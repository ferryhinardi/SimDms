angular.module("schemaForm").run(["$templateCache",function(n){n.put("directives/decorators/bootstrap/uiselect/multi.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="form.select_models=(form.schema.items| whereMulti : \'value\' : ($$value$$||[]))">\n  <label class="control-label" ng-show="showTitle()">{{form.title}}<\/label>\n  <div class="form-group" ng-controller="UiSelectController">\n    <ui-select multiple sortable-options="{{form.sortableOptions}}" ng-if="!(form.options.tagging||false)" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}<\/ui-select-match>\n      <ui-select-choices refresh="fetchResult(form.schema, form.options, $select.search)"\n         refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy"  repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n        <div ng-bind-html="item.label | highlight: $select.search"><\/div>\n        <div ng-if="item.description">\n          <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'<\/small>\'"><\/span>\n        <\/div>\n    <\/ui-select-choices>\n    <\/ui-select>\n    <ui-select ng-controller="UiSelectController" multiple ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}&nbsp;<small>{{($item.isTag===true ?  form.options.taggingLabel : \'\')}}<\/small><\/ui-select-match>\n      <ui-select-choices  refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)"\n         refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n          <div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label   | highlight: $select.search) + \' \' + form.options.taggingLabel + \'<\/div><div class=&quot;divider&quot;><\/div>\'"><\/div>\n          <div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"><\/div>\n      <div ng-if="item.description"> \n        <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'<\/small>\'"><\/span>\n      <\/div>\n    <\/ui-select-choices>\n      <!--repeat code because tagging does not display properly under group by but is still useful -->\n    <\/ui-select>\n\n    <ui-select ng-controller="UiSelectController" multiple ng-if="(form.options.tagging||false) && (form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}&nbsp;<small>{{($item.isTag===true ?  form.options.taggingLabel : \'\')}}<\/small><\/ui-select-match>\n      <ui-select-choices group-by="form.options.groupBy" refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)"\n         refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n          <div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label   | highlight: $select.search) + \' \' + form.options.taggingLabel + \'<\/div><div class=&quot;divider&quot;><\/div>\'"><\/div>\n          <div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"><\/div>\n      <div ng-if="item.description"> \n        <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'<\/small>\'"><\/span>\n      <\/div>\n    <\/ui-select-choices>\n\n    <\/ui-select>\n    <input toggle-model type="hidden" ng-model="insideModel" sf-changed="form" schema-validate="form" />\n    <span ng-if="form.feedback !== false"\n      class="form-control-feedback"\n      ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"><\/span>\n    <div class="help-block"\n      ng-show="(hasError() && errorMessage(schemaError())) || form.description"\n      ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"><\/div>\n  <\/div>\n<\/div>\n');n.put("directives/decorators/bootstrap/uiselect/single.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="select_models=(form.schema.items | where : {value: $$value$$})">\n  <label class="control-label" ng-show="showTitle()">{{form.title}}<\/label>\n  <div class="form-group" ng-init="select_model.selected=select_models[0]">\n    <ui-select ng-model="select_model.selected" ng-controller="UiSelectController"  ng-if="!(form.options.tagging||false)" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{select_model.selected.label}}<\/ui-select-match>\n      <ui-select-choices refresh="fetchResult(form.schema, form.options, $select.search)"\n             refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy"  repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n                <div ng-bind-html="item.label | highlight: $select.search"><\/div>\n      <div ng-if="item.description"> \n        <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'<\/small>\'"><\/span><\/div>\n      <\/ui-select-choices>\n    <\/ui-select>\n    <ui-select ng-controller="UiSelectController"  ng-model="select_model.selected" ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens"\n      theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{select_model.selected.label}}&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}<\/small><\/ui-select-match>\n      <!--repeat code because tagging does not display properly under group by but is still useful -->\n      <ui-select-choices  refresh="form.options.refreshMethod(form.schema, $select.search)"\n             refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n        <div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label   | highlight: $select.search) + \' \' + form.options.taggingLabel + \'<\/div><div class=&quot;divider&quot;><\/div>\'"><\/div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"><\/div>\n      <div ng-if="item.description"> \n        <span  ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'<\/small>\'"><\/span>\n      <\/div>\n    <\/ui-select-choices>\n    <\/ui-select>\n\n      <!--repeat code because tagging does not display properly under group by but is still useful -->\n\n    <ui-select ng-controller="UiSelectController"  ng-model="select_model.selected" ng-if="(form.options.tagging||false) && (form.options.groupBy || false)"  tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens"\n      theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{select_model.selected.label}}&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}<\/small><\/ui-select-match>\n      <ui-select-choices group-by="form.options.groupBy" refresh="form.options.refreshMethod(form.schema, $select.search)"\n             refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n        <div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label   | highlight: $select.search) + \' \' + form.options.taggingLabel + \'<\/div><div class=&quot;divider&quot;><\/div>\'"><\/div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"><\/div>\n      <div ng-if="item.description"> \n        <span  ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'<\/small>\'"><\/span>\n      <\/div>\n    <\/ui-select-choices>\n    <\/ui-select>\n    <input type="hidden" toggle-single-model sf-changed="form" ng-model="insideModel" schema-validate="form" />\n    <span ng-if="form.feedback !== false"\n      class="form-control-feedback"\n      ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"><\/span>\n    <div class="help-block"\n      ng-show="(hasError() && errorMessage(schemaError())) || form.description"\n      ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"><\/div>\n  <\/div>\n<\/div>\n')}]);angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(n,t,i){var r=function(t,r,u){if(r.type==="string"&&r.format=="uiselect"){var f=n.stdFormObj(t,r,u);return f.key=u.path,f.type="uiselect",u.lookup[i.stringify(u.path)]=f,f}},u;n.defaults.string.unshift(r);r=function(t,r,u){if(r.type==="number"&&r.format=="uiselect"){var f=n.stdFormObj(t,r,u);return f.key=u.path,f.type="uiselect",u.lookup[i.stringify(u.path)]=f,f}};n.defaults.number.unshift(r);u=function(t,r,u){if(r.type==="array"&&r.format=="uiselect"){var f=n.stdFormObj(t,r,u);return f.key=u.path,f.type="uimultiselect",u.lookup[i.stringify(u.path)]=f,f}};n.defaults.array.unshift(u);t.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/single.html");t.createDirective("uiselect","directives/decorators/bootstrap/uiselect/single.html");t.addMapping("bootstrapDecorator","uimultiselect","directives/decorators/bootstrap/uiselect/multi.html");t.createDirective("uimultiselect","directives/decorators/bootstrap/uiselect/multi.html")}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(n){n.$parent.$watch("select_model.selected",function(){n.$parent.select_model.selected!=undefined&&(n.$parent.insideModel=n.$parent.select_model.selected.value,n.$parent.ngModel.$setViewValue(n.$parent.select_model.selected.value))})}]}}).directive("toggleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope","sfSelect",function(n,t){var i=t(n.$parent.form.key,n.$parent.model);angular.isUndefined(i)&&(i=[],t(n.$parent.form.key,n.$parent.model,i));n.$parent.$watch("form.select_models",function(){n.$parent.form.select_models.length==0?(n.$parent.insideModel=n.$parent.$$value$$,n.$parent.ngModel.$viewValue!=undefined&&n.$parent.ngModel.$setViewValue(n.$parent.form.select_models)):(n.$parent.insideModel=n.$parent.form.select_models,n.$parent.ngModel.$setViewValue(n.$parent.form.select_models))},!0)}]}}).filter("whereMulti",function(){return function(n,t,i){var r=[];return angular.isArray(i)?i.forEach(function(i){for(var u=0;u<n.length;u++)if(i==n[u][t]){r.push(n[u]);break}}):r=n,r}}).filter("propsFilter",function(){return function(n,t){var i=[];return angular.isArray(n)?n.forEach(function(n){for(var r,f,e=!1,o=Object.keys(t),u=0;u<o.length;u++)if(r=o[u],n.hasOwnProperty(r)&&(f=t[r].toLowerCase(),n[r].toString().toLowerCase().indexOf(f)===0||n[r].toString().toLowerCase().indexOf(" "+f)!==-1)){e=!0;break}e&&i.push(n)}):i=n,i}}).controller("UiSelectController",["$scope","$http",function(n,t){n.fetchResult=function(n,i,r){if(i)if(i.callback)n.items=i.callback(n,i,r),console.log("items",n.items);else{if(i.http_post)return t.post(i.http_post.url,i.http_post.parameter).then(function(t){n.items=t.data;console.log("items",n.items)},function(n,t){alert("Loading select items failed (URL: '"+String(i.http_post.url)+"' Parameter: "+String(i.http_post.parameter)+"\nError: "+t)});if(i.http_get)return t.get(i.http_get.url,i.http_get.parameter).then(function(t){n.items=t.data;console.log("items",n.items)},function(n,t){alert("Loading select items failed (URL: '"+String(i.http_get.url)+"\nError: "+t)});if(i.async)return i.async.call(n,i,r).then(function(t){n.items=t.data;console.log("items",n.items)},function(n,t){alert("Loading select items failed(Options: '"+String(i)+"\nError: "+t)})}}}]);