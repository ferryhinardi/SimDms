DROP VIEW [dbo].[vw_SyncEmployeeData]
GO

DROP VIEW [dbo].[vw_SvTrnInvoiceView]
GO

DROP VIEW [dbo].[Vw_SvTrnInvItem]
GO
/****** Object:  View [dbo].[vw_SvRekapInsentifMekanik]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vw_SvRekapInsentifMekanik]
GO
/****** Object:  View [dbo].[vw_SvJobOrder]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vw_SvJobOrder]
GO
/****** Object:  View [dbo].[vw_SvCustomerVehicle]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vw_SvCustomerVehicle]
GO
/****** Object:  View [dbo].[vw_spMasterItemBrowse]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vw_spMasterItemBrowse]
GO
/****** Object:  View [dbo].[vw_index_list]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vw_index_list]
GO
/****** Object:  View [dbo].[vw_GnCustomer]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vw_GnCustomer]
GO
/****** Object:  View [dbo].[vw_GnCheckTax]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vw_GnCheckTax]
GO
/****** Object:  View [dbo].[vtemp]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vtemp]
GO
/****** Object:  View [dbo].[View_1]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[View_1]
GO
/****** Object:  View [dbo].[vAllIndexes]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[vAllIndexes]
GO
/****** Object:  View [dbo].[SysUserView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SysUserView]
GO
/****** Object:  View [dbo].[SysModuleView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SysModuleView]
GO
/****** Object:  View [dbo].[SvWaktuKerja]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvWaktuKerja]
GO
/****** Object:  View [dbo].[SvVehicleDetailView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvVehicleDetailView]
GO
/****** Object:  View [dbo].[SvTrnSPKGeneralView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnSPKGeneralView]
GO
/****** Object:  View [dbo].[SvTrnServiceMechanicView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnServiceMechanicView]
GO
/****** Object:  View [dbo].[SvTrnServiceMechanicByJobOrderNoView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnServiceMechanicByJobOrderNoView]
GO
/****** Object:  View [dbo].[SvTrnSenderDealerView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnSenderDealerView]
GO
/****** Object:  View [dbo].[SvTrnPOSubConView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnPOSubConView]
GO
/****** Object:  View [dbo].[SvTrnPOSubConRcvView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnPOSubConRcvView]
GO
/****** Object:  View [dbo].[SvTrnPdiFscView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnPdiFscView]
GO
/****** Object:  View [dbo].[SvTrnOpNo]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnOpNo]
GO
/****** Object:  View [dbo].[SvTrnMaintainSPKView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnMaintainSPKView]
GO
/****** Object:  View [dbo].[SvTrnDefCode]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnDefCode]
GO
/****** Object:  View [dbo].[SvTrnComCode]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnComCode]
GO
/****** Object:  View [dbo].[SvTrnClaimView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnClaimView]
GO
/****** Object:  View [dbo].[SvTrnCatCode]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTrnCatCode]
GO
/****** Object:  View [dbo].[SvTaxInvoiceView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTaxInvoiceView]
GO
/****** Object:  View [dbo].[SvTaxInvoiceStdView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTaxInvoiceStdView]
GO
/****** Object:  View [dbo].[SvTaxInvoiceLookUpView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTaxInvoiceLookUpView]
GO
/****** Object:  View [dbo].[SvTaxInvoiceHQView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTaxInvoiceHQView]
GO
/****** Object:  View [dbo].[SvTaskTypeView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTaskTypeView]
GO
/****** Object:  View [dbo].[SvTaskNoView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTaskNoView]
GO
/****** Object:  View [dbo].[SvTarifJasaView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTarifJasaView]
GO
/****** Object:  View [dbo].[SvTargetView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvTargetView]
GO
/****** Object:  View [dbo].[SvStallView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvStallView]
GO
/****** Object:  View [dbo].[SvSaView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvSaView]
GO
/****** Object:  View [dbo].[SvRincinJob]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvRincinJob]
GO
/****** Object:  View [dbo].[SvRincianPart]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvRincianPart]
GO
/****** Object:  View [dbo].[SvRincianBrowser]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvRincianBrowser]
GO
/****** Object:  View [dbo].[SvReturnServiceView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvReturnServiceView]
GO
/****** Object:  View [dbo].[SvRegPackageView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvRegPackageView]
GO
/****** Object:  View [dbo].[SvRegCampaign]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvRegCampaign]
GO
/****** Object:  View [dbo].[SvReffServiceView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvReffServiceView]
GO
/****** Object:  View [dbo].[SvRefferenceServiceView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvRefferenceServiceView]
GO
/****** Object:  View [dbo].[SvPekerjaanView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvPekerjaanView]
GO
/****** Object:  View [dbo].[SvPaymentPackage]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvPaymentPackage]
GO
/****** Object:  View [dbo].[SvOperationView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvOperationView]
GO
/****** Object:  View [dbo].[SvNoPolisi]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvNoPolisi]
GO
/****** Object:  View [dbo].[SvNomorAccView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvNomorAccView]
GO
/****** Object:  View [dbo].[SvMstDealerView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvMstDealerView]
GO
/****** Object:  View [dbo].[SvMechanicAvbView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvMechanicAvbView]
GO
/****** Object:  View [dbo].[SvLaborCode]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvLaborCode]
GO
/****** Object:  View [dbo].[SvKSGView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvKSGView]
GO
/****** Object:  View [dbo].[SvKontrakServiceView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvKontrakServiceView]
GO
/****** Object:  View [dbo].[SvKendaraanPel]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvKendaraanPel]
GO
/****** Object:  View [dbo].[SvJTView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvJTView]
GO
/****** Object:  View [dbo].[SvJobView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvJobView]
GO
/****** Object:  View [dbo].[SvJobTypeView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvJobTypeView]
GO
/****** Object:  View [dbo].[SvJobOrderView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvJobOrderView]
GO
/****** Object:  View [dbo].[SvHistVehicleServiceView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvHistVehicleServiceView]
GO
/****** Object:  View [dbo].[SvGroupJobView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvGroupJobView]
GO
/****** Object:  View [dbo].[SvGetTableChassis]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvGetTableChassis]
GO
/****** Object:  View [dbo].[SvGetMekanik]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvGetMekanik]
GO
/****** Object:  View [dbo].[SvGetInvoiceView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvGetInvoiceView]
GO
/****** Object:  View [dbo].[SvGetCustomerDetailView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvGetCustomerDetailView]
GO
/****** Object:  View [dbo].[SvGetAllBranchFromSPKView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvGetAllBranchFromSPKView]
GO
/****** Object:  View [dbo].[SvGaransiView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvGaransiView]
GO
/****** Object:  View [dbo].[SvFmView]    Script Date: 25/02/2015 12:46:12 ******/
DROP VIEW [dbo].[SvFmView]
GO
/****** Object:  View [dbo].[SvEventView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvEventView]
GO
/****** Object:  View [dbo].[SvEventBM]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvEventBM]
GO
/****** Object:  View [dbo].[SvDefectView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvDefectView]
GO
/****** Object:  View [dbo].[SvDealerView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvDealerView]
GO
/****** Object:  View [dbo].[SvCustomerView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvCustomerView]
GO
/****** Object:  View [dbo].[SvCustomerVehicleView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvCustomerVehicleView]
GO
/****** Object:  View [dbo].[SvCustomerDetailView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvCustomerDetailView]
GO
/****** Object:  View [dbo].[SvComplainView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvComplainView]
GO
/****** Object:  View [dbo].[SvColorView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvColorView]
GO
/****** Object:  View [dbo].[SvClubView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvClubView]
GO
/****** Object:  View [dbo].[SvClubTable]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvClubTable]
GO
/****** Object:  View [dbo].[SvClaimJudgement4LookupView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvClaimJudgement4LookupView]
GO
/****** Object:  View [dbo].[SvChassicView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvChassicView]
GO
/****** Object:  View [dbo].[SvCBasmodView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvCBasmodView]
GO
/****** Object:  View [dbo].[SvCampaignView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvCampaignView]
GO
/****** Object:  View [dbo].[SvBMView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvBMView]
GO
/****** Object:  View [dbo].[SvBillTypeView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvBillTypeView]
GO
/****** Object:  View [dbo].[SvBasicModelView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvBasicModelView]
GO
/****** Object:  View [dbo].[SvBasicModelPekerjaan]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvBasicModelPekerjaan]
GO
/****** Object:  View [dbo].[SvBasicKsgView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvBasicKsgView]
GO
/****** Object:  View [dbo].[SvBasicCopy]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvBasicCopy]
GO
/****** Object:  View [dbo].[SvBasicCodeView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SvBasicCodeView]
GO
/****** Object:  View [dbo].[SpWRSNo]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpWRSNo]
GO
/****** Object:  View [dbo].[SpWRSHpp]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpWRSHpp]
GO
/****** Object:  View [dbo].[SpVendorClaimView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpVendorClaimView]
GO
/****** Object:  View [dbo].[SpSelectByNoWRS]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpSelectByNoWRS]
GO
/****** Object:  View [dbo].[SpSelectByNoBinning]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpSelectByNoBinning]
GO
/****** Object:  View [dbo].[SpPembelian]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpPembelian]
GO
/****** Object:  View [dbo].[SpPartOrderView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpPartOrderView]
GO
/****** Object:  View [dbo].[SpPartNoView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpPartNoView]
GO
/****** Object:  View [dbo].[sppartnameWarehousename]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[sppartnameWarehousename]
GO
/****** Object:  View [dbo].[spMstSalesTargetview]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spMstSalesTargetview]
GO
/****** Object:  View [dbo].[SpMstSalesTargetDtlView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpMstSalesTargetDtlView]
GO
/****** Object:  View [dbo].[spMstSalesCampaignView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spMstSalesCampaignView]
GO
/****** Object:  View [dbo].[spMstPurchCampaignView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spMstPurchCampaignView]
GO
/****** Object:  View [dbo].[spMstOrderParamView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spMstOrderParamView]
GO
/****** Object:  View [dbo].[spMstMovingCodeView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spMstMovingCodeView]
GO
/****** Object:  View [dbo].[SpMstItemLocView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpMstItemLocView]
GO
/****** Object:  View [dbo].[SpMstItemLocItemLookupView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpMstItemLocItemLookupView]
GO
/****** Object:  View [dbo].[SpMstItemConversionview]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpMstItemConversionview]
GO
/****** Object:  View [dbo].[spMstAccountView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spMstAccountView]
GO
/****** Object:  View [dbo].[spmasterpartview]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spmasterpartview]
GO
/****** Object:  View [dbo].[spMasterPartLookup]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spMasterPartLookup]
GO
/****** Object:  View [dbo].[SpMasteritemview]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpMasteritemview]
GO
/****** Object:  View [dbo].[SpMasteritemStockAlokasiView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpMasteritemStockAlokasiView]
GO
/****** Object:  View [dbo].[SpLoadEntryHPP]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpLoadEntryHPP]
GO
/****** Object:  View [dbo].[SpLoadDetail_TranStock]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpLoadDetail_TranStock]
GO
/****** Object:  View [dbo].[SpItemPriceView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpItemPriceView]
GO
/****** Object:  View [dbo].[SpGridPartNo]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpGridPartNo]
GO
/****** Object:  View [dbo].[SpGridEntryWRS]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpGridEntryWRS]
GO
/****** Object:  View [dbo].[spgnMstAccountView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spgnMstAccountView]
GO
/****** Object:  View [dbo].[SpEntryCS]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEntryCS]
GO
/****** Object:  View [dbo].[SpEdpSupplier]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEdpSupplier]
GO
/****** Object:  View [dbo].[SpEdpPartNo_Pembelian]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEdpPartNo_Pembelian]
GO
/****** Object:  View [dbo].[SpEdpPartNo_Others]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEdpPartNo_Others]
GO
/****** Object:  View [dbo].[SpEdpPartNo_Internal]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEdpPartNo_Internal]
GO
/****** Object:  View [dbo].[SpEdpPartNo]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEdpPartNo]
GO
/****** Object:  View [dbo].[SpEdpDnNo]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEdpDnNo]
GO
/****** Object:  View [dbo].[SpEdpDetail]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpEdpDetail]
GO
/****** Object:  View [dbo].[SpClosePeriodPending]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[SpClosePeriodPending]
GO
/****** Object:  View [dbo].[spCategoryCodeview]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[spCategoryCodeview]
GO
/****** Object:  View [dbo].[sp_tempmodel]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[sp_tempmodel]
GO
/****** Object:  View [dbo].[sp_spMstSalesTargetDtlview]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[sp_spMstSalesTargetDtlview]
GO
/****** Object:  View [dbo].[sp_spMstCompanyAccountDtl]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[sp_spMstCompanyAccountDtl]
GO
/****** Object:  View [dbo].[RptWRSBrowse]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptWRSBrowse]
GO
/****** Object:  View [dbo].[RptWarehouseTransferBrowse]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptWarehouseTransferBrowse]
GO
/****** Object:  View [dbo].[RptReservedBrowse]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptReservedBrowse]
GO
/****** Object:  View [dbo].[RptHPPBrowse]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptHPPBrowse]
GO
/****** Object:  View [dbo].[RptFPJNoBrowse]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptFPJNoBrowse]
GO
/****** Object:  View [dbo].[RptClaimReceivedNo]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptClaimReceivedNo]
GO
/****** Object:  View [dbo].[RptClaimNo]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptClaimNo]
GO
/****** Object:  View [dbo].[RptBinningBrowse]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptBinningBrowse]
GO
/****** Object:  View [dbo].[RptAdjustmentNoBrowse]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RptAdjustmentNoBrowse]
GO
/****** Object:  View [dbo].[RefferenceTypeView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[RefferenceTypeView]
GO
/****** Object:  View [dbo].[PmKdpClnUpView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[PmKdpClnUpView]
GO
/****** Object:  View [dbo].[omTrSalesDraftSOLookupView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[omTrSalesDraftSOLookupView]
GO
/****** Object:  View [dbo].[OmTrPurchasePOSelect4BPUView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmTrPurchasePOSelect4BPUView]
GO
/****** Object:  View [dbo].[OmTrPurchaseBPUView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmTrPurchaseBPUView]
GO
/****** Object:  View [dbo].[OmTrPurchaseBPULookupView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmTrPurchaseBPULookupView]
GO
/****** Object:  View [dbo].[OmTrPurchaseBPUDetailView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmTrPurchaseBPUDetailView]
GO
/****** Object:  View [dbo].[OmSelectReffSJTrueView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmSelectReffSJTrueView]
GO
/****** Object:  View [dbo].[OmSelectReffSJFalseView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmSelectReffSJFalseView]
GO
/****** Object:  View [dbo].[OmSelectReffSJBookingView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmSelectReffSJBookingView]
GO
/****** Object:  View [dbo].[OmSelectReffNoView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[OmSelectReffNoView]
GO
/****** Object:  View [dbo].[omMstModelPerlengkapanView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[omMstModelPerlengkapanView]
GO
/****** Object:  View [dbo].[omMstModelColourView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[omMstModelColourView]
GO
/****** Object:  View [dbo].[KaroseriBrowseView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[KaroseriBrowseView]
GO
/****** Object:  View [dbo].[GnMstSupplierView]    Script Date: 25/02/2015 12:46:13 ******/
DROP VIEW [dbo].[GnMstSupplierView]
GO
/****** Object:  View [dbo].[GnMstSupplierView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[GnMstSupplierView]
AS
SELECT a.CompanyCode, a.SupplierCode, b.BranchCode, 
     b.ProfitCenterCode, a.SupplierName, 
     ISNULL(a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 +
      ' ' + a.Address4, '') AS Alamat, ISNULL(a.Address1, '') 
     AS Address1, ISNULL(a.Address2, '') AS Address2, 
     ISNULL(a.Address3, '') AS Address3, 
     ISNULL(a.Address4, '') AS Address4, 
     (CASE WHEN (a.PhoneNo <> '' AND a.HPNo <> '') 
     THEN a.PhoneNo + ' / ' + a.HPNo WHEN (a.PhoneNo <> ''
      AND a.HPNo = '') 
     THEN a.PhoneNo WHEN (a.PhoneNo = '' AND 
     a.HPNo <> '') THEN a.HPNo ELSE '' END) AS Phone, 
     b.DiscPct, 
     (CASE a.Status WHEN 0 THEN 'Tidak Aktif' ELSE 'Aktif' END)
      AS Status,
         (SELECT LookUpValueName
       FROM dbo.gnMstLookUpDtl AS d
       WHERE (CodeID = 'PFCN') AND 
             (LookUpValue = b.ProfitCenterCode)) 
     AS ProfitCenterName,
         (SELECT ParaValue
       FROM dbo.gnMstLookUpDtl AS e
       WHERE (CodeID = 'TOPC') AND 
             (LookUpValue = b.TOPCode)) AS TOPDays, 
     a.CityCode, ISNULL
         ((SELECT LookUpValueName
        FROM dbo.gnMstLookUpDtl AS f
        WHERE (CodeID = 'CITY') AND 
             (LookUpValue = a.CityCode)), '') 
     AS CityName
FROM dbo.gnMstSupplier AS a INNER JOIN
     dbo.gnMstSupplierProfitCenter AS b ON 
     a.CompanyCode = b.CompanyCode AND 
     a.SupplierCode = b.SupplierCode



GO
/****** Object:  View [dbo].[KaroseriBrowseView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[KaroseriBrowseView]
AS
SELECT        a.CompanyCode, a.BranchCode, a.SupplierCode, a.SalesModelCode, a.SalesModelCodeNew, a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.Total, a.Remark, 
                         a.Status, a.CreatedBy, a.CreatedDate, a.LastUpdateBy, a.LastUpdateDate, a.isLocked, a.LockingBy, a.LockingDate, b.SupplierName, c.SalesModelDesc, 
                         d.SalesModelDesc AS SalesModelDescNew
FROM            dbo.omMstKaroseri AS a INNER JOIN
                         dbo.gnMstSupplier AS b ON a.SupplierCode = b.SupplierCode INNER JOIN
                         dbo.omMstModel AS c ON a.SalesModelCode = c.SalesModelCode INNER JOIN
                         dbo.omMstModel AS d ON a.SalesModelCodeNew = d.SalesModelCode

GO
/****** Object:  View [dbo].[omMstModelColourView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[omMstModelColourView]
AS
SELECT        a.CompanyCode, a.SalesModelCode, a.ColourCode, b.RefferenceDesc1, a.Remark, a.Status
FROM            dbo.omMstModelColour AS a INNER JOIN
                         dbo.omMstRefference AS b ON a.ColourCode = b.RefferenceCode


GO
/****** Object:  View [dbo].[omMstModelPerlengkapanView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[omMstModelPerlengkapanView]
AS
SELECT        a.CompanyCode, a.BranchCode, a.PerlengkapanCode, b.PerlengkapanName, a.Quantity, a.Remark, a.Status
FROM            dbo.omMstModelPerlengkapan AS a LEFT OUTER JOIN
                         dbo.omMstPerlengkapan AS b ON a.PerlengkapanCode = b.PerlengkapanCode AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode



GO
/****** Object:  View [dbo].[OmSelectReffNoView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[OmSelectReffNoView]
AS 
	select a.*,b.DONo,b.DODate,b.SKPNo,c.PONo,c.PODate,c.RefferenceNo,c.RefferenceDate
		,c.SupplierCode,c.BillTo,c.ShipTo,c.Remark
		,(select z.SupplierName from GnMstSupplier z where a.DealerCode = z.SupplierCode) as DealerName
	from OmUtlSDORDHdr a
		inner join omUtlSDORDDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.BatchNo=b.BatchNo
		inner join omTrPurchasePO c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
			and c.RefferenceNo = b.SKPNo
	where 1=1 
		--and a.CompanyCode = convert(varchar,@CompanyCode)
		--and a.BranchCode = convert(varchar,@BranchCode)
	--	and a.RcvDealerCode = convert(varchar,@CompanyCode)
		and c.Status = '2'
		and b.Status = '0'
		and not exists (
			select 1 from omTrPurchaseBPU d 
			where d.CompanyCode = a.CompanyCode and d.BranchCode = a.BranchCode 
				and d.RefferenceDONo=b.DONo
				and d.Status <> '3'
		)

GO
/****** Object:  View [dbo].[OmSelectReffSJBookingView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[OmSelectReffSJBookingView]
AS 
	SELECT a.CompanyCode, a.BranchCode, a.BatchNo, b.DONo, b.DODate, b.SJNo, b.SJDate, b.SKPNo, a.DealerCode, 
		(select SupplierName from gnMstSupplier where supplierCode = c.supplierCode) as DealerName,
		c.PONo, c.ShipTo, c.SupplierCode
	FROM OmUtlSSJALHdr a
		inner join OmUtlSSJALDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.BatchNo=b.BatchNo
		inner join omTrPurchasePO c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
			and c.RefferenceNo = b.SKPNo
	WHERE 1=1
		--and a.CompanyCode= convert(varchar,@CompanyCode)
		--and a.BranchCode= convert(varchar,@BranchCode)
		--and a.RcvDealerCode = convert(varchar,@CompanyCode)
		and c.status = '2'
		and b.Status = '0'
		and b.IsBlokir = 'Y'
		and not exists (
			select 1 from omTrPurchaseBPU 
			where 1=1
				and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode
				and RefferenceDONo= b.DONO
				and RefferenceSJNo= b.SJNO
				and Status <> '3'
		)

GO
/****** Object:  View [dbo].[OmSelectReffSJFalseView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[OmSelectReffSJFalseView]
AS
	SELECT a.CompanyCode, a.BranchCode, a.BatchNo, b.DONo, b.DODate, b.SJNo, b.SJDate, b.SKPNo, a.DealerCode, 
		(select SupplierName from gnMstSupplier where supplierCode = c.supplierCode) as DealerName,
		c.PONo, c.ShipTo, c.supplierCode
	FROM OmUtlSSJALHdr a
		inner join OmUtlSSJALDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.BatchNo=b.BatchNo
		inner join omTrPurchasePO c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
			and c.RefferenceNo = b.SKPNo
	WHERE 1=1
		-- and a.CompanyCode= convert(varchar,@CompanyCode)
		-- and a.BranchCode= convert(varchar,@BranchCode)
		-- and a.RcvDealerCode = convert(varchar,@CompanyCode)
		and c.status = '2'
		and b.Status = '0'

	-- Atas Perintah Pa Andreas dan Bu Tetti
	-- POD : Seandy A.K.
	-- Tgl : 9/3/2013
	-- and b.IsBlokir = 'N'

	and not exists (
		select 1 from omTrPurchaseBPU 
		where 1=1
			and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode
			and RefferenceDONo= b.DONO
			and RefferenceSJNo= b.SJNO
			and Status <> '3'
	)
GO
/****** Object:  View [dbo].[OmSelectReffSJTrueView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[OmSelectReffSJTrueView]
AS
SELECT a.CompanyCode, a.BranchCode, a.BatchNo, b.SJNo, b.SJDate, b.SKPNo, b.DONo, a.DealerCode, c.ShipTo, b.DODate, c.PONo,
    (select SupplierName from gnMstSupplier where supplierCode = c.supplierCode) as DealerName, c.SupplierCode, b.FlagRevisi
FROM OmUtlSSJALHdr a
    inner join OmUtlSSJALDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
        and a.BatchNo=b.BatchNo
    inner join omTrPurchaseBPU c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
        and c.RefferenceDONo = b.DONo
WHERE 1=1
	-- and a.CompanyCode = convert(varchar,@CompanyCode)
	-- and a.BranchCode = convert(varchar,@BranchCode)
	-- and a.RcvDealerCode = convert(varchar,@CompanyCode)
    and c.status = '2'
    and b.Status = '0'
    and not exists (
        select 1 from omTrPurchaseBPU d 
        where 1=1
            and d.CompanyCode = a.CompanyCode and d.BranchCode = a.BranchCode 
            and d.RefferenceSJNo=b.SJNo
            and d.Status <> '3'
    )
-- order by FlagRevisi Desc,a.BatchNo,b.SJNo,b.SKPNo

GO
/****** Object:  View [dbo].[OmTrPurchaseBPUDetailView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[OmTrPurchaseBPUDetailView]
AS
SELECT dtl.CompanyCode, dtl.BranchCode, dtl.BPUNo, dtl.PONo,dtl.BPUSeq, dtl.SalesModelCode, dtl.SalesModelYear, mdl.SalesModelDesc
    , dtl.ColourCode, ref.RefferenceDesc1 AS ColourName, dtl.ChassisCode
    , (CASE dtl.ChassisNo WHEN 0 THEN '' ELSE CONVERT(Varchar, dtl.ChassisNo) END) AS ChassisNo 
    , dtl.EngineCode, (CASE dtl.EngineNo WHEN 0 THEN '' ELSE CONVERT(Varchar, dtl.EngineNo) END) AS EngineNo
    , dtl.ServiceBookNo, dtl.KeyNo, dtl.Remark, dtl.isReturn
FROM OmTrPurchaseBPUDetail dtl
LEFT JOIN OmMstModelYear mdl ON dtl.CompanyCode = mdl.CompanyCode AND dtl.SalesModelCode = mdl.SalesModelCode
    AND dtl.SalesModelYear = mdl.SalesModelYear
LEFT JOIN OmMstRefference ref ON dtl.CompanyCode = ref.CompanyCode AND dtl.ColourCode = ref.RefferenceCode
    AND ref.RefferenceType = 'COLO'

GO
/****** Object:  View [dbo].[OmTrPurchaseBPULookupView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[OmTrPurchaseBPULookupView]
as
	SELECT bpu.*, sup.SupplierName
	, (CASE ISNULL(bpu.BPUType, '0') WHEN '0' THEN 'DO' WHEN '1' THEN 'SJ' WHEN '2' THEN 'DO & SJ' WHEN '3' THEN 'SJ Booking' END) AS Tipe
	, (CASE ISNULL(bpu.Status, '0') WHEN '0' THEN 'OPEN' WHEN '1' THEN 'PRINTED' WHEN '2' THEN 'APPROVED' WHEN '3' THEN 'CANCELED' WHEN '9' THEN 'FINISHED' END) AS StatusBPU
	, '' as ExpeditionName, '' as WarehouseName
	FROM OmTrPurchaseBPU bpu
	LEFT JOIN GnMstSupplier sup ON bpu.CompanyCode = sup.CompanyCode AND bpu.SupplierCode = sup.SupplierCode

GO
/****** Object:  View [dbo].[OmTrPurchaseBPUView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[OmTrPurchaseBPUView]
as
	SELECT bpu.*, sup.SupplierName as ExpeditionName, ref.RefferenceDesc1 as WarehouseName, '' as SupplierName
	, (CASE ISNULL(bpu.BPUType, '0') WHEN '0' THEN 'DO' WHEN '1' THEN 'SJ' WHEN '2' THEN 'DO & SJ' WHEN '3' THEN 'SJ Booking' END) AS Tipe
	, (CASE ISNULL(bpu.Status, '0') WHEN '0' THEN 'OPEN' WHEN '1' THEN 'PRINTED' WHEN '2' THEN 'APPROVED' WHEN '3' THEN 'CANCELED' WHEN '9' THEN 'FINISHED' END) AS StatusBPU
	FROM OmTrPurchaseBPU bpu
	LEFT JOIN GnMstSupplier sup ON bpu.CompanyCode = sup.CompanyCode AND bpu.Expedition = sup.SupplierCode
	LEFT JOIN omMstRefference ref ON bpu.CompanyCode = ref.CompanyCode AND bpu.WarehouseCode = ref.RefferenceCode AND ref.RefferenceType = 'WARE'
GO
/****** Object:  View [dbo].[OmTrPurchasePOSelect4BPUView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[OmTrPurchasePOSelect4BPUView]
AS
SELECT PO.*, sup.SupplierName FROM omTrPurchasePO PO
LEFT JOIN gnMstSupplier sup ON PO.CompanyCode = sup.CompanyCode
AND PO.SupplierCode = sup.SupplierCode
WHERE (
	SELECT SUM(ISNULL(QuantityPO, 0)) - SUM(ISNULL(QuantityBPU, 0)) 
	FROM omTrPurchasePOModel
	WHERE CompanyCode = PO.CompanyCode AND BranchCode = PO.BranchCode
	AND PONo = PO.PONo
) > 0
GO
/****** Object:  View [dbo].[omTrSalesDraftSOLookupView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[omTrSalesDraftSOLookupView]
AS
SELECT a.CompanyCode, a.BranchCode, a.DraftSONo, 
    CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
    then '' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
    e.Address1 + ' ' + e.Address2 + ' ' + e.Address3 + ' ' + e.Address4 as Address,
    a.RefferenceNo, a.SKPKNo, a.DraftSODate, (a.CustomerCode
        + ' || '
        + (SELECT b.CustomerName
            FROM gnMstCustomer b
            WHERE a.CompanyCode = b.CompanyCode
		    AND a.CustomerCode = b.CustomerCode))  
		    AS Customer, (a.Salesman
        + ' || '
        + (SELECT c.EmployeeName
            FROM gnMstEmployee c
            WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
	        AND a.Salesman = c.EmployeeID))  AS Salesman, (a.GroupPriceCode
        + ' || '
        + (SELECT d.RefferenceDesc1
            FROM omMstRefference d
            WHERE a.CompanyCode = d.CompanyCode
		    AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPriceCode, 
    CASE a.Status when 0 then 'OPEN'
                    when 1 then 'PRINTED'
                    when 2 then 'APPROVED'
                    when 3 then 'DELETED'
                    when 4 then 'REJECTED'
                    when 9 then 'FINISHED' END as Stat
    , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales
FROM omTrSalesDraftSO a
    INNER JOIN gnMstCustomer e
        ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode
--WHERE a.CompanyCode = '6006410' AND a.BranchCode = '600641001'
GO
/****** Object:  View [dbo].[PmKdpClnUpView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[PmKdpClnUpView]
with schemabinding
as

select a.CompanyCode, a.BranchCode, a.InquiryNumber, convert(varchar, a.InquiryNumber, 100) InquiryNumberStr, InquiryDate, convert(varchar, a.InquiryDate, 103) InquiryDateStr, a.NamaProspek, 
a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode, a.PerolehanData, c.EmployeeID, c.EmployeeID + ' - ' + c.EmployeeName Wiraniaga, 
d.EmployeeID SpvEmployeeID, d.EmployeeID + ' - ' + d.EmployeeName Coordinator, a.LastProgress, 
(select top 1 NextFollowUpDate from dbo.pmActivities where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber order by NextFollowUpDate desc) NextFollowUpDate,
(select top 1 convert(varchar, NextFollowUpDate, 103) from dbo.pmActivities where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber order by NextFollowUpDate desc) NextFollowUpDateStr
from dbo.pmKDP a
inner join dbo.gnMstEmployee c on
	a.CompanyCode = c.CompanyCode 
	and a.BranchCode = c.BranchCode
	and a.EmployeeID = c.EmployeeID
inner join dbo.gnMstEmployee d on
	a.CompanyCode = d.CompanyCode 
	and a.BranchCode = d.BranchCode
	and a.SpvEmployeeID = d.EmployeeID	
where a.LastProgress in ('P', 'HP', 'SPK')	
	

GO
/****** Object:  View [dbo].[RefferenceTypeView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[RefferenceTypeView]
AS
SELECT distinct(a.RefferenceType)  AS RefferenceType
	FROM dbo.omMstRefference a 
	UNION
	SELECT distinct(b.RefferenceCode)  AS RefferenceType
	FROM dbo.omMstRefference b
	WHERE b.RefferenceType = 'REFF'

GO
/****** Object:  View [dbo].[RptAdjustmentNoBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[RptAdjustmentNoBrowse]  as    

SELECT c.CompanyCode, c.BranchCode, c.AdjustmentNo, c.AdjustmentDate, c.ReferenceNo, 
c.ReferenceDate, c.TypeOfGoods
FROM SpTrnIAdjustHdr c with(nolock,nowait)
WHERE c.Status <> '3'


GO
/****** Object:  View [dbo].[RptBinningBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[RptBinningBrowse]  as
    
SELECT CompanyCode, BranchCode, BinningNo, BinningDate, Status,ReferenceNo,DNSupplierNo, TypeOfGoods
FROM spTrnPBinnHdr WITH(NOLOCK, NOWAIT)



GO
/****** Object:  View [dbo].[RptClaimNo]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[RptClaimNo]  as    

  SELECT DISTINCT a.CompanyCode, a.BranchCode, a.ClaimNo, ClaimDate, a.TypeOfGoods
  FROM spTrnPClaimHdr a
JOIN spTrnPClaimDtl b ON a.CompanyCode = b.CompanyCode
AND a.BranchCode = b.BranchCode
AND a.ClaimNo = b.ClaimNo


GO
/****** Object:  View [dbo].[RptClaimReceivedNo]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[RptClaimReceivedNo]  as    

  SELECT CompanyCode, BranchCode, ClaimReceivedNo
    ,ClaimNo    
    ,ClaimReceivedDate, TypeOfGoods   
  FROM spTrnPRcvClaimHdr 
 WHERE (Status = '2' OR Status = '8')



GO
/****** Object:  View [dbo].[RptFPJNoBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[RptFPJNoBrowse]  as    

  select CompanyCode, BranchCode, FPJNo, FPJDate, PickingSlipNo, PickingSlipDate, InvoiceNo, InvoiceDate, TypeOfGoods
                from	    spTrnSFPJHdr



GO
/****** Object:  View [dbo].[RptHPPBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[RptHPPBrowse]  as    

  SELECT a.CompanyCode, a.BranchCode, 
    a.HPPNo
    , a.HPPDate
    , a.WRSNo
    , a.WRSDate 
    ,(
        select LookUpValueName
		from gnMstLookUpDtl
		where CompanyCode=a.CompanyCode and CodeID='STAT' and LookUpValue=a.Status
    ) Status, a.TypeOfGoods
FROM 
    spTrnPHPP a


GO
/****** Object:  View [dbo].[RptReservedBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[RptReservedBrowse]  as    

SELECT c.CompanyCode, c.BranchCode, c.ReservedNo, c.ReservedDate, c.ReferenceNo, 
c.ReferenceDate, c.TypeOfGoods
FROM spTrnIReservedHdr c WITH (NOLOCK, NOWAIT)
WHERE c.Status <> '3'


GO
/****** Object:  View [dbo].[RptWarehouseTransferBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[RptWarehouseTransferBrowse]  as    

SELECT c.CompanyCode, c.BranchCode, c.WHTrfNo, c.WHTrfDate, c.ReferenceNo, 
c.ReferenceDate,c.TypeOfGoods 
FROM spTrnIWHTrfHdr c WITH(NOLOCK, NOWAIT)
WHERE c.Status <> '3'


GO
/****** Object:  View [dbo].[RptWRSBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[RptWRSBrowse]  as
    
SELECT CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate,
TypeOfGoods, TransType
FROM SpTrnPRcvHdr



GO
/****** Object:  View [dbo].[sp_spMstCompanyAccountDtl]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


		CREATE view [dbo].[sp_spMstCompanyAccountDtl]
		as
		  select  distinct  a.CompanyCode,a.CompanyCodeTo,d.LookUpValue as TPGO, d.LookUpValueName as TPGOName
		,a.InterCompanyAccNoTo AccountNo,b.[Description] as AccountName
		from spMstCompanyAccountdtl a
		inner join gnMstAccount b
		on a.CompanyCode=b.CompanyCode and
		a.InterCompanyAccNoTo=b.AccountNo
		inner join  spMstCompanyAccount c 
		on a.CompanyCode=c.CompanyCode and a.CompanyCodeTo=c.CompanyCodeTo 
		inner join gnMstLookUpDtl d
				on d.CompanyCode=b.CompanyCode and d.LookUpValue=a.TPGO 
				 where d.CodeID='TPGO'


GO
/****** Object:  View [dbo].[sp_spMstSalesTargetDtlview]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[sp_spMstSalesTargetDtlview]
as

SELECT  [CompanyCode]
      ,[BranchCode]
      ,[Year]
      ,[Month]
      ,[CategoryCode]
	   ,(select  LookUpValueName from gnMstLookUpDtl where CompanyCode=spMstSalesTargetDtl.CompanyCode and CodeID='CSCT') as [CategoryName]
      
	,[QtyTarget]
      ,[AmountTarget]
       ,[TotalJaringan]
  FROM  spMstSalesTargetDtl 
   
GO
/****** Object:  View [dbo].[sp_tempmodel]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[sp_tempmodel]
as
            SELECT a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
GO
/****** Object:  View [dbo].[spCategoryCodeview]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
		 create view [dbo].[spCategoryCodeview] 
		 as
		 
		    select 
                a.LookupValue 'CategoryCode', a.LookupValueName 'CategoryName', a.CompanyCode
            from 
                gnMstLookupdtl a
				            where 
                          
                a.CodeID='CSCT' 
GO
/****** Object:  View [dbo].[SpClosePeriodPending]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SpClosePeriodPending]  as    

 SELECT DocumentNo, FiscalYear, FiscalMonth
, CASE Status 
    WHEN '0' THEN 'OPEN, BELUM PRINT DAN CLOSED'
    WHEN '1' THEN 'SUDAH PRINT, BELUM CLOSED'
    WHEN '2' THEN CASE LEFT(DocumentNo, 3) 
					WHEN 'WRL' THEN 'CLOSE, TETAPI BELUM DIBUATKAN HPP'
					WHEN 'WRN' THEN 'CLOSE, TETAPI BELUM DIBUATKAN HPP'
					WHEN 'BNL' THEN 'CLOSE, TETAPI BELUM DIBUATKAN WRS'
					WHEN 'SOC' THEN 'CLOSE, TETAPI BELUM DIBUATKAN PICKING LIST'					
				  END
    END AS Status
, ProfitCenter
, TableName 
, (
    SELECT LookupValueName
    FROM gnMstLookUpDtl
    WHERE LookupValue = a.TypeOfGoods
        AND CodeID = 'TPGO'
  ) AS TipePart
FROM gnErrorRaiseDtl a


GO
/****** Object:  View [dbo].[SpEdpDetail]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpEdpDetail]  as  
  
SELECT row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut, a.CompanyCode, a.BranchCode, a.BinningNo,
 a.DocNo,a.PartNo, a.PurchasePrice, a.DiscPct, 
a.ReceivedQty, a.BoxNo, (select PartName from spMstItemInfo c WITH(NOLOCK, NOWAIT)
WHERE c.CompanyCode=a.CompanyCode and c.PartNo=a.PartNo) as NmPart
FROM spTrnPBinnDtl a WITH(NOLOCK, NOWAIT)
INNER JOIN spTrnPBinnHdr b WITH(NOLOCK, NOWAIT) ON b.BinningNo = a.BinningNo 
AND b.CompanyCode = a.CompanyCode
AND b.BranchCode = a.BranchCode


GO
/****** Object:  View [dbo].[SpEdpDnNo]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpEdpDnNo]  as    

SELECT DISTINCT a.CompanyCode, BranchCode,
a.DeliveryNo 
,a.SupplierCode
,ISNULL(b.SupplierName,'') as SupplierName 
FROM spUtlPINVDDTL a
LEFT JOIN GnMstSupplier b ON a.CompanyCode=b.CompanyCode 
AND a.SupplierCode=b.SupplierCode
WHERE a.Status in ('0','1')


GO
/****** Object:  View [dbo].[SpEdpPartNo]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpEdpPartNo]  as    
SELECT a.CompanyCode, a.BranchCode, 
 a.PartNo
,b.PartName
,c.CostPrice
,a.QtyBill,
CustomerCode, a.BPSFNo
FROM spTrnSBPSFDtl a
INNER JOIN spMstItemInfo b
   ON b.CompanyCode = a.CompanyCode
  AND b.PartNo      = a.PartNo
INNER JOIN spMstItemPrice c
   ON c.CompanyCode = a.CompanyCode
  AND c.BranchCode  = a.BranchCode
  AND c.PartNo      = a.PartNo
INNER JOIN spTrnSBPSFHdr d
   ON d.CompanyCode = a.CompanyCode
  AND d.BranchCode  = a.BranchCode
  AND d.BPSFNo      = a.BPSFNo
/*WHERE a.CompanyCode=@CompanyCode
  AND a.BranchCode=@BranchCode
  AND d.CustomerCode=@CustomerCode
  AND a.BPSFNo = @BPSFNo*/
GROUP BY a.PartNo, b.PartName, c.CostPrice, a.QtyBill, a.CompanyCode, a.BranchCode, CustomerCode, a.BPSFNo

GO
/****** Object:  View [dbo].[SpEdpPartNo_Internal]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpEdpPartNo_Internal]  as    
SELECT 
    TOP 500 a.CompanyCode, a.BranchCode, a.ProductType, TypeOfGoods, ItemInfo.PartNo,
    ItemInfo.PartName,
    c.OnHand - (c.AllocationSP + c.AllocationSR + c.AllocationSL + c.ReservedSP + c.ReservedSR + c.ReservedSL) AS Available,
	a.MovingCode
FROM 
    SpMstItems a
    INNER JOIN SpMstItemInfo ItemInfo ON ItemInfo.PartNo = a.PartNo 
        AND ItemInfo.CompanyCode = a.CompanyCode
    INNER JOIN SpMstItemLoc c ON a.CompanyCode = c.CompanyCode
        AND a.BranchCode = c.BranchCode
        AND a.PartNo = c.PartNo
    INNER JOIN SpMstItemPrice d ON a.CompanyCode = d.CompanyCode 
		AND a.BranchCode = d.BranchCode
		AND a.PArtNo = d.PartNo
WHERE a.Status = '1'  AND WarehouseCode = '00'
/*    a.CompanyCode = @CompanyCode
    AND a.BranchCode  = @BranchCode 
    AND a.ProductType  = @ProductType
    AND a.TypeOfGoods = @TypeOfGoods
    AND a.Status = @Status
    AND c.WarehouseCode = @WarehouseCode*/

GO
/****** Object:  View [dbo].[SpEdpPartNo_Others]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpEdpPartNo_Others]  as    
SELECT 
    TOP 500 a.CompanyCode, a.BranchCode, SupplierCode, a.ProductType, TypeOfGoods, ItemInfo.PartNo,
    ItemInfo.PartName,
    c.OnHand - (c.AllocationSP + c.AllocationSR + c.AllocationSL + c.ReservedSP + c.ReservedSR + c.ReservedSL) AS Available,
	a.MovingCode
FROM 
    SpMstItems a
    INNER JOIN SpMstItemInfo ItemInfo ON ItemInfo.PartNo = a.PartNo 
        AND ItemInfo.CompanyCode = a.CompanyCode
    INNER JOIN SpMstItemLoc c ON a.CompanyCode = c.CompanyCode
        AND a.BranchCode = c.BranchCode
        AND a.PartNo = c.PartNo
    INNER JOIN SpMstItemPrice d ON a.CompanyCode = d.CompanyCode 
		AND a.BranchCode = d.BranchCode
		AND a.PArtNo = d.PartNo
WHERE a.Status = '1'
    AND c.WarehouseCode = '00'

GO
/****** Object:  View [dbo].[SpEdpPartNo_Pembelian]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[SpEdpPartNo_Pembelian]  as    
SELECT c.CompanyCode, c.BranchCode, c.PartNo, c.PartName, c.PurchasePrice,  c.DiscPct, SUM(c.OnOrder) AS MaxReceived,
CASE WHEN c.ReceivedQty IS NULL  THEN SUM(c.OnOrder) ELSE SUM(c.OnOrder-c.ReceivedQty) END AS ReminQty
 , c.POSNo, c.BinningNo
FROM
(
    SELECT DISTINCT a.CompanyCode, a.BranchCode, a.POSNo,d.ReceivedQty, d.BinningNo,
     a.PartNo
    ,b.PartName 
    ,ISNULL((SELECT x.PurchasePrice FROM SpMstItemPrice x where x.CompanyCode = a.CompanyCode AND
     x.BranchCode = a.BranchCode AND x.PartNo = a.PartNo),0) AS PurchasePrice
    ,a.OnOrder
    ,a.DiscPct
    FROM spTrnPOrderBalance a, spMstItemInfo b, spTrnPBinnDtl d
    WHERE b.CompanyCode = a.CompanyCode
    and b.PartNo = a.PartNo
    AND d.CompanyCode = a.CompanyCode
    and d.BranchCode = a.BranchCode
    and d.DocNo = a.POSNo
    AND d.PartNo = a.PartNo
    --LEFT JOIN spMstItemInfo b
    --   ON b.CompanyCode = a.CompanyCode
    --  AND b.PartNo      = a.PartNo
    --  LEFT JOIN spTrnPBinnDtl d
    --  ON d.CompanyCode = a.CompanyCode
    --  and d.BranchCode = a.BranchCode
    --  AND d.DocNo = a.POSNo
    --  AND d.PartNo = a.PartNo
      --LEFT JOIN spTrnPPOSDtl e
      --on e.CompanyCode = d.CompanyCode
      --AND e.BranchCode = d.BranchCode
      --AND e.POSNo = d.DocNo
    --and a.CompanyCode = '6006410'
    --  AND a.BranchCode  = '600641001'
    --  AND a.PosNo       = 'POS/14/000121'
    --  AND d.BinningNo = 'BNL/14/000182'
   -- GROUP BY a.PartNo
) c
GROUP BY c.CompanyCode, c.BranchCode,c.PartNo ,c.PartName, c.PurchasePrice, c.DiscPct, c.POSNo, c.ReceivedQty, c.OnOrder, c.BinningNo
HAVING sum(c.OnOrder) > 0



GO
/****** Object:  View [dbo].[SpEdpSupplier]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpEdpSupplier]  as  
  
SELECT a.CompanyCode, BranchCode, 
a.SupplierCode, a.SupplierName, (a.address1+' '+a.address2+' '+a.address3+' '+a.address4) as Alamat,
b.DiscPct as Diskon, (Case a.Status when 0 then 'Tidak Aktif' else 'Aktif' end) as StatusStr, a.Status, ProfitCenterCode,
(SELECT Lookupvaluename FROM gnmstlookupdtl WHERE codeid='PFCN' 
AND lookupvalue = b.ProfitCentercode) as ProfitCenterCodeStr, isBlackList
FROM 
gnMstSupplier a
JOIN gnmstSupplierProfitCenter b ON a.CompanyCode= b.CompanyCode
AND a.SupplierCode = b.SupplierCode


GO
/****** Object:  View [dbo].[SpEntryCS]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[SpEntryCS]  as    
  SELECT DISTINCT CompanyCode, BranchCode, a.ClaimNo, ClaimDate, a.TypeOfGoods, a.Status
  FROM spTrnPClaimHdr a
 WHERE a.Status IN ('0', '1')
GO
/****** Object:  View [dbo].[spgnMstAccountView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE view [dbo].[spgnMstAccountView]
 as
SELECT top 100 AccountNo, [Description], CompanyCode,
  BranchCode
  FROM gnMstAccount 




GO
/****** Object:  View [dbo].[SpGridEntryWRS]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpGridEntryWRS]  as    

SELECT A.CompanyCode, A.BranchCode, A.DocNo, A.PartNo, A.PurchasePrice, A.WRSNo,
A.DiscPct,  A.ReceivedQty, A.BoxNo, (select PartName from spMstItemInfo C
where C.CompanyCode=A.CompanyCode and C.PartNo=A.PartNo) as NmPart 
  FROM spTrnPRcvDtl A
 INNER JOIN spTrnPRcvHdr B ON 
 B.CompanyCode = A.CompanyCode
 AND B.BranchCode = A.BranchCode 
 AND B.WRSNo = A.WRSNo 



GO
/****** Object:  View [dbo].[SpGridPartNo]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SpGridPartNo]  as 
   
SELECT CompanyCode, BranchCode, ClaimNo, PartNo, PartNoWrong, ClaimType, DocNo, DocDate, SeqNo,OvertageQty, ReceivedQty, 
ShortageQty, DemageQty, WrongQty, TotClaimQty,PurchasePrice,CostPrice, ReasonCode, 
CASE ReasonCode WHEN 'CORR' THEN 'KOREKSI STOK' ELSE CASE ReasonCode WHEN 'DMG' THEN 'RUSAK STOK' 
ELSE 'DIHANCURKAN' END END as ReasonCodeStr, Status, ABCClass, MovingCode, ProductType, PartCategory
from spTrnPClaimDtl


GO
/****** Object:  View [dbo].[SpItemPriceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[SpItemPriceView]
as
SELECT TOP 1500
 ItemInfo.PartNo
,ItemInfo.PartName
,ItemPrice.PurchasePrice
,ItemInfo.SupplierCode
,ItemPrice.RetailPriceInclTax
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,Items.ProductType
,Items.PartCategory
,u.LookupValueName 
 as CategoryName
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice
 ,Items.CompanyCode 
 ,Items.BranchCode
FROM spMstItemPrice ItemPrice 
INNER JOIN spMstItems Items 
    ON ItemPrice.CompanyCode=Items.CompanyCode 
    AND ItemPrice.BranchCode=Items.BranchCode
    AND ItemPrice.PartNo=Items.PartNo
right JOIN spMstItemInfo ItemInfo 
    ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
    AND ItemPrice.PartNo = ItemInfo.PartNo
	inner join  gnMstLookUpDtl u on (Items.PartCategory =u.ParaValue)
WHERE  u.CodeID='PRCT' 
 

GO
/****** Object:  View [dbo].[SpLoadDetail_TranStock]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SpLoadDetail_TranStock]  as  
  
SELECT a.CompanyCode, a.BranchCode, a.LampiranNo, a.DealerCode, row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut
, a.OrderNo as DocNo
, a.PartNo
, a.PurchasePrice
, 0.00 as DiscPct
, a.QtyShipped ReceivedQty
, '' as BoxNo
, ISNULL(b.PartName, '') as NmPart
FROM spUtlStockTrfDtl a
LEFT JOIN SpMstItemInfo b ON b.CompanyCode=a.CompanyCode
    AND b.PartNo=a.PartNo
--WHERE a.CompanyCode = @CompanyCode
--  AND a.BranchCode = @BranchCode
--  AND a.DealerCode = @DealerCode
--  AND a.LampiranNo = @LampiranNo



GO
/****** Object:  View [dbo].[SpLoadEntryHPP]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpLoadEntryHPP]  as    

SELECT a.*, c.DNSupplierNo,
    d.SupplierName,b.BinningNo, b.BinningDate, b.SupplierCode, 
	(
		select LookUpValueName
		from gnMstLookUpDtl
		where CompanyCode=a.CompanyCode and CodeID='STAT' and LookUpValue=a.Status
	) StatusStr
FROM 
    SpTrnPHPP a WITH(NoLock,NoWait)
LEFT JOIN SpTrnPRcvHdr b ON b.CompanyCode = a.CompanyCOde AND b.BranchCode = a.BranchCode
    AND b.WRSNo = a. WRSNo
LEFT JOIN SpTrnPBinnHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode
    AND c.BinningNo = b.BinningNo 
LEFT JOIN gnMstSupplier d ON d.CompanyCode = a.CompanyCode AND d.SupplierCode = c.SupplierCode



GO
/****** Object:  View [dbo].[SpMasteritemStockAlokasiView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE view [dbo].[SpMasteritemStockAlokasiView] as 

 SELECT  
 
 distinct
--StockAlokasi
d.PartNo
,d.WarehouseCode
,a.LookUpValueName as 'WarehouseName'
,d.LocationCode
,d.OnHand
,d.AllocationSP
,d.AllocationSR
,d.AllocationSL

,d.CompanyCode 
,d.BranchCode 
FROM  spMstItemLoc d 
inner join  gnMstLookUpDtl a on (d.WarehouseCode=a.ParaValue)

WHERE a.CodeID='WRCD' 
 






GO
/****** Object:  View [dbo].[SpMasteritemview]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[SpMasteritemview]
as
SELECT TOP 1500
ItemPrice.CompanyCode
,ItemPrice.BranchCode
 ,ItemPrice.PartNo
,ItemInfo.PartName
,ItemPrice.PurchasePrice
,ItemPrice.RetailPriceInclTax
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,Items.TypeOfGoods
,Items.ProductType
,Items.PartCategory
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
    WHERE CodeID = 'PRCT' AND 
    LookUpValue = Items.PartCategory AND 
    CompanyCode =ItemPrice.CompanyCode) CategoryName
FROM spMstItemPrice ItemPrice 
INNER JOIN spMstItems Items 
    ON ItemPrice.CompanyCode=Items.CompanyCode 
    AND ItemPrice.BranchCode=Items.BranchCode
    AND ItemPrice.PartNo=Items.PartNo
INNER JOIN spMstItemInfo ItemInfo 
    ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
    AND ItemPrice.PartNo = ItemInfo.PartNo
 
GO
/****** Object:  View [dbo].[spMasterPartLookup]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[spMasterPartLookup]
AS	
	SELECT 
	 Items.CompanyCode,
	 Items.BranchCode,
	 Items.PartNo
	,Items.ProductType
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	   WHERE CodeID = 'PRCT' AND 
			 LookUpValue = Items.PartCategory AND 
			 CompanyCode = Items.CompanyCode) AS CategoryName
	,Items.PartCategory
	,ItemInfo.PartName
	,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
	,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
	,ItemInfo.OrderUnit
	,ItemInfo.SupplierCode
	,Supplier.SupplierName
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	  WHERE CodeID = 'TPGO' AND 
			LookUpValue = Items.TypeOfGoods AND 
			CompanyCode = Items.CompanyCode) AS TypeOfGoods
	FROM SpMstItems Items
	INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
							 AND Items.PartNo = ItemInfo.PartNo
	LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
							 AND Supplier.SupplierCode = ItemInfo.SupplierCode
GO
/****** Object:  View [dbo].[spmasterpartview]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[spmasterpartview]
as
select a.CompanyCode,ItemPrice.BranchCode,a.PartNo,a.PartName,a.SupplierCode,gnMstSupplier.SupplierName,
a.IsGenuinePart,a.ProductType,a.PartCategory ,u.LookUpValueName as CategoryName
,a.OrderUnit
,ItemPrice.PurchasePrice
,ItemPrice.RetailPriceInclTax
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice

from SpMstItemInfo a 
inner join  gnMstLookUpDtl u on (a.PartCategory =u.ParaValue)
left join  spMstItemPrice ItemPrice       ON ItemPrice.CompanyCode=a.CompanyCode 
    AND ItemPrice.PartNo=a.PartNo 
	 LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = a.SupplierCode AND
        gnMstSupplier.CompanyCode = a.CompanyCode
WHERE  u.CodeID='PRCT'  and a.Status > 0  





GO
/****** Object:  View [dbo].[spMstAccountView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
          create view   [dbo].[spMstAccountView]
			as
			        SELECT a.TypeOfGoods, 
                           b.LookUpValueName as NameOfGoods,  
                           a.SalesAccNo,  a.COGSAccNo,  a.InventoryAccNo,  a.DiscAccNo,  a.ReturnAccNo, 
                            a.ReturnPybAccNo,  a.OtherIncomeAccNo,  a.OtherReceivableAccNo,  a.InTransitAccNo, a.CompanyCode, a.BranchCode
                    FROM   spMstAccount a 
					inner join gnMstLookUpDtl b on b.LookUpValue=a.TypeOfGoods
                    WHERE  B.CodeID='TPGO'
GO
/****** Object:  View [dbo].[SpMstItemConversionview]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view  [dbo].[SpMstItemConversionview] 
as
select   a.CompanyCode,a.PartNo, b.PartName, FromQty, ToQty 
from SpMstItemConversion a
left join spMstItemInfo b on
    a.CompanyCode = b.CompanyCode
    and a.ProductType = b.ProductType
    and a.PartNo = b.PartNo
 
GO
/****** Object:  View [dbo].[SpMstItemLocItemLookupView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SpMstItemLocItemLookupView]
AS
SELECT 
	ItemInfo.PartNo,
	Items.ABCClass,
	ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,
	Items.OnOrder,
	Items.ReservedSP,
	Items.ReservedSR,
	Items.ReservedSL,
	Items.MovingCode,
	ItemInfo.SupplierCode,
	ItemInfo.PartName,
	ItemPrice.RetailPrice,
	ItemPrice.RetailPriceInclTax,
	ItemPrice.PurchasePrice
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode
                        AND Items.PartNo = ItemLoc.PartNo
WHERE Items.Status > 0
  AND ItemLoc.WarehouseCode = '00'
GO
/****** Object:  View [dbo].[SpMstItemLocView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SpMstItemLocView]
AS
SELECT 
	 ItemLoc.PartNo
	,ItemInfo.PartName
	,ItemInfo.SupplierCode
	,ItemLoc.WarehouseCode
	,ItemLoc.LocationCode
	,Items.PartCategory
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM spMstItemLoc ItemLoc
INNER JOIN spMstItems Items 
    ON ItemLoc.CompanyCode=Items.CompanyCode
    AND ItemLoc.BranchCode=Items.BranchCode
    AND ItemLoc.PartNo=Items.PartNo
INNER JOIN spMstItemInfo ItemInfo 
    ON ItemLoc.CompanyCode=ItemInfo.CompanyCode
    AND ItemLoc.PartNo=ItemInfo.PartNo
WHERE
	ItemLoc.WarehouseCode NOT LIKE 'X%'

GO
/****** Object:  View [dbo].[spMstMovingCodeView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[spMstMovingCodeView]
as
SELECT MovingCode, MovingCodeName,
Formula = Cast(Param1 as varchar(10)) + Sign1 + Variable + Sign2 + Cast(Param2 as varchar(10)),
Param1, Sign1, Variable, Param2, Sign2,CompanyCode
FROM spMstMovingCode
 
GO
/****** Object:  View [dbo].[spMstOrderParamView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
       create view [dbo].[spMstOrderParamView] 
 as   
		    SELECT a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
GO
/****** Object:  View [dbo].[spMstPurchCampaignView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[spMstPurchCampaignView]
as
SELECT 
spMstPurchCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstPurchCampaign.DiscPct, 
spMstPurchCampaign.BegDate,
spMstPurchCampaign.EndDate,
spMstPurchCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstPurchCampaign.CompanyCode,
  spMstPurchCampaign.BranchCode
  FROM spMstPurchCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstPurchCampaign.PartNo AND	
        spMstItemInfo.CompanyCode = spMstPurchCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstPurchCampaign.SupplierCode AND
        gnMstSupplier.CompanyCode = spMstPurchCampaign.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstPurchCampaign.CompanyCode AND 
	      spMstItems.BranchCode=spMstPurchCampaign.BranchCode AND 
				spMstItems.PartNo=spMstPurchCampaign.PartNo

GO
/****** Object:  View [dbo].[spMstSalesCampaignView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[spMstSalesCampaignView]
as
SELECT 
spMstSalesCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstSalesCampaign.DiscPct, 
spMstSalesCampaign.BegDate,
spMstSalesCampaign.EndDate,
spMstSalesCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstSalesCampaign.CompanyCode,
  spMstSalesCampaign.BranchCode
  FROM spMstSalesCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstSalesCampaign.PartNo AND spMstItemInfo.CompanyCode = spMstSalesCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstItemInfo.SupplierCode AND gnMstSupplier.CompanyCode = spMstItemInfo.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstSalesCampaign.CompanyCode AND spMstItems.BranchCode=spMstSalesCampaign.BranchCode 
        AND spMstItems.PartNo=spMstSalesCampaign.PartNo
 
   
GO
/****** Object:  View [dbo].[SpMstSalesTargetDtlView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SpMstSalesTargetDtlView]
AS
select 
	a.CompanyCode,
	a.BranchCode,
	a.[Year],
	a.[Month],
	a.CategoryCode,
	(select LookUpValueName from gnMstLookUpDtl where CodeID='CSCT' and CompanyCode= a.CompanyCode and LookUpValue = a.CategoryCode) CategoryName,
	a.QtyTarget,
	a.AmountTarget,
	a.TotalJaringan
from spMstSalesTargetDtl a

GO
/****** Object:  View [dbo].[spMstSalesTargetview]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[spMstSalesTargetview]
as
SELECT  cast (Year as varchar(4)) Year, 
                                cast (Month as varchar(2)) Month, QtyTarget, AmountTarget, TotalJaringan,CompanyCode,BranchCode 
                                FROM spMstSalesTarget
 
GO
/****** Object:  View [dbo].[sppartnameWarehousename]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[sppartnameWarehousename]
as
SELECT  distinct      a.PartNo, a.PartName, b.WarehouseCode, c.LookUpValueName [Warehousename]
FROM            spMstItemInfo AS a INNER JOIN
                         spMstItemLoc AS b ON a.CompanyCode = b.CompanyCode AND a.PartNo = b.PartNo INNER JOIN
                         gnMstLookUpDtl AS c ON a.CompanyCode = c.CompanyCode 
						 AND b.WarehouseCode = c.LookUpValue
						 where c.CodeID='WRCD'
				
						  

GO
/****** Object:  View [dbo].[SpPartNoView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SpPartNoView]  as    
 SELECT a.CompanyCode, BranchCode, a.PartNo, x.PartName, a.DocNo, WRSNo, ReceivedQty, a.PurchasePrice FROM spTrnPRcvDtl a
INNER JOIN spMstItemInfo x with(nolock, nowait) on a.CompanyCode = x.CompanyCode AND a.PartNo = x.PartNo
WHERE NOT EXISTS
(
SELECT 1 FROM spTrnPClaimDtl b
INNER JOIN spTrnPClaimHdr c ON b.CompanyCode = c.CompanyCode AND b.BranchCode = c.BranchCode AND b.ClaimNo = c.ClaimNo
WHERE a.CompanyCode = b.CompanyCode 
AND a.BranchCode = b.BranchCode
AND c.WRSNo = a.WRSNO
AND a.Partno = b.PartNo
AND a.DocNo = b.DocNo
)
--AND a.CompanyCode = '6006406'
--AND a.BranchCode = '6006401'
--AND a.WRSNO = 'WRN/13/000780'



GO
/****** Object:  View [dbo].[SpPartOrderView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpPartOrderView]  as    
SELECT DISTINCT a.CompanyCode, BranchCode,
a.PartNo, 
b.PartName,
a.DocNo, ClaimNo
FROM spTrnPCLaimDtl a
LEFT JOIN spMstItemInfo b ON b.CompanyCode = a.CompanyCode 
    AND b.PartNo = a.PartNo
--WHERE -- a.CompanyCode = '6006406'
    --AND a.BranchCode = '6006401'
    --AND ClaimNo = 'CLM/12/000001'
--ORDER BY a.PartNo


GO
/****** Object:  View [dbo].[SpPembelian]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[SpPembelian]
AS
SELECT a.CompanyCode, BranchCode,
 a.SuggorNo
,a.SuggorDate
--,CONVERT(varchar(15), a.SuggorDate, 103) as SuggorDate
,a.SupplierCode
,b.SupplierName,
TypeOfGoods
FROM spTrnPSUGGORHdr a
LEFT JOIN gnMstSupplier b on b.CompanyCode=a.CompanyCode AND b.SupplierCode=a.SupplierCode                               
WHERE a.status < 2


GO
/****** Object:  View [dbo].[SpSelectByNoBinning]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SpSelectByNoBinning]  as    
SELECT a.CompanyCode, a.BranchCode, a.BinningNo,
row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut,
a.DocNo,a.PartNo, a.PurchasePrice, a.DiscPct, 
a.ReceivedQty, a.BoxNo, (select PartName from spMstItemInfo c WITH(NOLOCK, NOWAIT)
WHERE c.CompanyCode=a.CompanyCode and c.PartNo=a.PartNo) as NmPart
 FROM spTrnPBinnDtl a WITH(NOLOCK, NOWAIT)
 INNER JOIN spTrnPBinnHdr b WITH(NOLOCK, NOWAIT) ON b.BinningNo = a.BinningNo 
    AND b.CompanyCode = a.CompanyCode
    AND b.BranchCode = a.BranchCode
 /*WHERE a.CompanyCode = @CompanyCode
   AND a.BranchCode = @BranchCode
   AND a.BinningNo =  @BinningNo
*/

GO
/****** Object:  View [dbo].[SpSelectByNoWRS]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SpSelectByNoWRS]  as    

SELECT A.CompanyCode, A.BranchCode, A.WRSNo , A.PartNo, A.DocNo, A.PurchasePrice,
A.DiscPct,  A.ReceivedQty, A.BoxNo, (select PartName from spMstItemInfo C
where C.CompanyCode=A.CompanyCode and C.PartNo=A.PartNo) as NmPart 
  FROM spTrnPRcvDtl A
 INNER JOIN spTrnPRcvHdr B ON 
 B.CompanyCode = A.CompanyCode
 AND B.BranchCode = A.BranchCode 
 AND B.WRSNo = A.WRSNo

GO
/****** Object:  View [dbo].[SpVendorClaimView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SpVendorClaimView]  as 
   
SELECT CompanyCode, BranchCode ,ClaimReceivedNo
    ,ClaimNo    
    ,ClaimReceivedDate, ClaimDate,
    TypeOfGoods, Status   
  FROM spTrnPRcvClaimHdr 
 WHERE --CompanyCode = '6006406'
   --AND BranchCode = '6006401'
   --AND TypeOfGoods = '0'
   (Status = '0' OR Status = '1')
 --ORDER BY ClaimReceivedNo DESC




GO
/****** Object:  View [dbo].[SpWRSHpp]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SpWRSHpp]  as 

SELECT a.CompanyCode, a.BranchCode,
WRSNo,WRSDate, b.ReferenceNo, b.DNSupplierNo, c.SupplierName, a.TypeOfGoods  
FROM 
spTrnPRcvHdr a
LEFT JOIN SpTrnPBinnHdr b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
AND b.BinningNo = a.BinningNo 
LEFT JOIN gnMstSupplier c ON c.CompanyCode = a.CompanyCode AND c.SupplierCode = b.SupplierCode
WHERE --a.CompanyCode = '6006406'
--AND a.BranchCode = '6006401'
a.Status = '2'
--AND a.TypeOfGoods ='0'
AND a.ReceivingType in (1,2)
AND a.TransType = 4
--ORDER BY a.CreatedDate DESC


GO
/****** Object:  View [dbo].[SpWRSNo]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SpWRSNo]  as    
 SELECT * FROM (
SELECT a.CompanyCode, a.BranchCode,
	a.WRSNo, a.TypeOfGoods
	, WRSDate
	, COUNT(b.PartNo) CountPartNo
	, ISNULL(Claim.CountClaim, 0) CountClaim
FROM 
	spTrnPRcvHdr a WITH(NOLOCK, NOWAIT)
	INNER JOIN spTrnPRcvDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN (SELECT dtl.CompanyCode, dtl.BranchCode, hdr.WRSNo, ISNULL(COUNT(dtl.PartNo), 0) CountClaim FROM spTrnPClaimDtl dtl
				INNER JOIN spTrnPClaimHdr hdr ON dtl.CompanyCode = hdr.CompanyCode
				AND dtl.BranchCode = hdr.BranchCode
				AND dtl.ClaimNo = hdr.ClaimNo
                AND hdr.status <> '3'
				GROUP BY dtl.CompanyCode, dtl.BranchCode, hdr.WRSNo
	) Claim ON a.CompanyCode = Claim.CompanyCode
		AND a.BranchCode = Claim.BranchCode
		AND a.WRSNo = Claim.WRSNo
WHERE 
	--a.CompanyCode = '6006406'
	--AND a.BranchCode = '6006401'
	(a.Status = '2' OR a.Status = '4')
	--AND a.TypeOfGoods = '0' 
GROUP BY 
	a.WRSNo, WRSDate, CountClaim,a.TypeOfGoods, a.CompanyCode, a.BranchCode
) a
GROUP BY 
	a.WrsNo, a.WrsDate, a.CountPartNo, a.CountClaim,a.TypeOfGoods, a.CompanyCode, a.BranchCode
HAVING 
	a.CountPartNo > a.CountClaim


GO
/****** Object:  View [dbo].[SvBasicCodeView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvBasicCodeView]
AS
SELECT        a.CompanyCode, a.ProductType, a.BasicModel, SUBSTRING(a.OperationNo, 1, 6) AS BasicCode, SUBSTRING(a.OperationNo, 7, LEN(a.OperationNo)) AS VarCom, 
                         a.OperationNo, a.OperationHour, a.LaborPrice, a.Description, CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive, a.JobType
FROM            dbo.svMstTask AS a INNER JOIN
                         dbo.svMstJob AS b ON a.CompanyCode = b.CompanyCode AND a.ProductType = b.ProductType AND a.BasicModel = b.BasicModel AND 
                         a.JobType = b.JobType
WHERE        (1 = 1) AND (a.IsActive = 1) AND (b.IsActive = 1) AND (b.GroupJobType = 'CLM')

GO
/****** Object:  View [dbo].[SvBasicCopy]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvBasicCopy]

as 

Select CompanyCode, ProductType, a.RefferenceCode AS BasicModel, 
 a.DescriptionEng AS TechnicalModelCode, 
a.Description AS ModelDescription
, CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status 
from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL' 



GO
/****** Object:  View [dbo].[SvBasicKsgView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvBasicKsgView]

as 


Select a.CompanyCode, a.ProductType,a.RefferenceCode AS BasicModel, a.DescriptionEng AS TechnicalModelCode,
a.Description AS ModelDescription, CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status 
from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL'



GO
/****** Object:  View [dbo].[SvBasicModelPekerjaan]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvBasicModelPekerjaan]

as 

Select a.CompanyCode, ProductType, a.RefferenceCode AS BasicModel, a.DescriptionEng AS TechnicalModelCode,
a.Description AS ModelDescription, 
CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL'


GO
/****** Object:  View [dbo].[SvBasicModelView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[SvBasicModelView]
AS
SELECT        TOP (100) PERCENT CompanyCode, ProductType, RefferenceType, RefferenceCode, Description, DescriptionEng, 
                         CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive
FROM            dbo.svMstRefferenceService WITH (Nolock, Nowait)
WHERE        (RefferenceType = 'BASMODEL')



GO
/****** Object:  View [dbo].[SvBillTypeView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[SvBillTypeView]  
as   
  select distinct
 a.CompanyCode, a.BillType,a.Description,a.CustomerCode,b.CustomerName
,(b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4) as CustomerAddress
,case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as StatusDesc, IsActive
from svMstBillingType a 
left join gnMstCustomer b
  on b.CompanyCode = a.CompanyCode
 and b.CustomerCode = a.CustomerCode

GO
/****** Object:  View [dbo].[SvBMView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvBMView]

as 


Select a.CompanyCode, a.ProductType, a.RefferenceCode AS BasicModel, a.DescriptionEng AS TechnicalModelCode,
a.Description AS ModelDescription, CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL'



GO
/****** Object:  View [dbo].[SvCampaignView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvCampaignView]

as 


select
a.CompanyCode, a.ProductType,
 a.ComplainCode
,a.DefectCode
,a.ChassisCode
,a.ChassisStartNo
,a.ChassisEndNo
,a.OperationNo
,a.CloseDate
,case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
,a.IsActive
,a.Description    
from svMstCampaign a
where a.ComplainCode in (select RefferenceCode from svMstRefferenceService where RefferenceType='COMPLNCD')
  and a.DefectCode in (select RefferenceCode from svMstRefferenceService where RefferenceType='DEFECTCD')


GO
/****** Object:  View [dbo].[SvCBasmodView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [dbo].[SvCBasmodView]
AS

Select CompanyCode, ProductType, RefferenceCode, RefferenceCode AS BasicModel, DescriptionEng AS TechnicalModelCode, 
Description AS ModelDescription, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status 
from svMstrefferenceService
WHERE --a.CompanyCode = '6006406' AND a.ProductType = '4W' AND 
RefferenceType = 'BASMODEL' --AND RefferenceCode = 'JB424AT' AND CompanyCode = '6006406' 


GO
/****** Object:  View [dbo].[SvChassicView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE VIEW [dbo].[SvChassicView]
AS
select a.CompanyCode, a.ChassisCode, cast(a.ChassisNo as varchar) ChassisNo, a.EngineCode, a.SalesModelYear
     , cast(a.EngineNo as varchar) EngineNo, a.ServiceBookNo
     , case a.PoliceRegistrationDate when ('19000101') then NULL else a.PoliceRegistrationDate end as PoliceRegistrationDate
     , a.PoliceRegistrationNo, FakturPolisiNo, d.FakturPolisiDate
     , case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
     , b.BasicModel
    -- , b.TechnicalModelCode
     , b.TransmissionType
     , a.ColourCode
     , c.CustomerCode
  from omMstVehicle a
  left join omMstModel b
    on b.CompanyCode = a.CompanyCode
   and b.SalesModelCode = a.SalesModelCode
  left join omTrSalesInvoice c
    on c.CompanyCode = a.CompanyCode
   and c.InvoiceNo = a.InvoiceNo
  LEFT JOIN svMstCustomerVehicle d
	ON a.CompanyCode = d.CompanyCode 
	AND a.ChassisCode = d.ChassisCode 
	AND a.ChassisNo = d.ChassisNo
 where --a.ChassisCode = 'MA3GXB72SE0' AND a.ChassisNo='477379' and--a.CompanyCode = @CompanyCode
    a.IsActive = 1





GO
/****** Object:  View [dbo].[SvClaimJudgement4LookupView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvClaimJudgement4LookupView]
AS
	SELECT
		a.*,
		b.SenderDealerCode, 
		b.SenderDealerName,
		b.ReceiveDealerCode,
		b.LotNo,
		b.BatchNo
	FROM 
		SvTrnClaimJudgement a,
		SvTrnClaim b

GO
/****** Object:  View [dbo].[SvClubTable]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvClubTable]

as 

select distinct a.CompanyCode, e.BranchCode,
 a.PoliceRegNo
,a.CustomerCode
,b.CustomerName
,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
, b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
,a.DealerCode
,c.CustomerName DealerName
, (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
,a.ChassisCode
,  cast(a.ChassisNo as varchar) ChassisNo
,a.EngineCode
,  cast(a.EngineNo as varchar) EngineNo
,a.ServiceBookNo
,a.ClubCode
,a.ColourCode
,case a.FakturPolisiDate when ('19000101') then null else a.FakturPolisiDate end FakturPolisiDate
,a.ClubNo --ClubDateStart, ClubDateFinish, ClubSince
,case a.ClubDateStart when ('19000101') then null else a.ClubDateStart end ClubDateStart
,case a.ClubDateFinish when ('19000101') then null else a.ClubDateFinish end ClubDateFinish
,case a.ClubSince when ('19000101') then null else a.ClubSince end ClubSince
, (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
,a.IsClubStatus
, (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
,a.IsActive as IsActiveP
, (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
,a.BasicModel
,a.TransmissionType
,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
,a.LastJobType
--,a.ChassisNo
,a.ContractNo
,a.ContactName
,b.CityCode
,f.LookUpValueName CityName
from svMstCustomerVehicle a
left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode
left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	and c.CustomerCode = a.DealerCode
left join svMstJob d on 
	d.CompanyCode = a.CompanyCode and
	d.BasicModel = a.BasicModel 	
inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
left join gnMstLookupDtl f on 
    f.CompanyCode = a.CompanyCode and
    f.CodeID = 'CITY' and
    f.LookUpValue = b.CityCode
    WHERE --ClubCode = 'KLB/11/000002'
   -- AND a.CompanyCode = '6006406'
    --AND BranchCode = '6006400'
    a.IsActive='1'
    


GO
/****** Object:  View [dbo].[SvClubView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[SvClubView]
AS
select CompanyCode, ClubCode as ClubCodeStr, --replace(convert(varchar, CreatedDate, 106),' ','-') as CreatedDate, 
CreatedDate,
Description, 
LaborDiscPct, PartDiscPct, MaterialDiscPct,
case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as IsActiveStr, IsActive
from svMstClub


GO
/****** Object:  View [dbo].[SvColorView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE VIEW [dbo].[SvColorView]
AS

/*select CompanyCode, RefferenceCode as ColourCode, RefferenceDesc1, RefferenceDesc2 
from omMstRefference
where --CompanyCode = '6006406' and 
RefferenceType = 'COLO' 
--order by RefferenceDesc1
*/   
SELECT CompanyCode, RefferenceCode, RefferenceCode as ColourCode, RefferenceDesc1, RefferenceDesc2 FROM omMstRefference WHERE RefferenceType = 'COLO'

GO
/****** Object:  View [dbo].[SvComplainView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[SvComplainView]

as 

SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as ComplainCode, Description as Keterangan, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'COMPLNCD'




GO
/****** Object:  View [dbo].[SvCustomerDetailView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SvCustomerDetailView]

as 

SELECT a.CustomerCode, a.CompanyCode, a.CustomerName , a.Address1, a.Address2, a.Address3, a.Address4, 
a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 AS Address,
CASE a.Status WHEN 1 THEN 'Aktif' ELSE 'TIdak Aktif' END AS Status, HPNo, FaxNo, e.ProfitCenterCode
  FROM gnMstCustomer a with(nolock, nowait)
  inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode


GO
/****** Object:  View [dbo].[SvCustomerVehicleView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[SvCustomerVehicleView]

as 

--select a.CompanyCode
--     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as VinNo
--     , a.ChassisCode
--     , a.ChassisNo
--     , a.PoliceRegNo
--     , a.BasicModel
--     , a.TransmissionType
--     , a.ServiceBookNo
--     , a.CustomerCode
--     , b.CustomerName
--  from svMstCustomerVehicle a
--  left join gnMstCustomer b
--    on b.CompanyCode = a.CompanyCode
--   and b.CustomerCode = a.CustomerCode


select distinct a.CompanyCode 
	 , c.BranchCode
	 , a.ChassisCode
     , a.ChassisNo
     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as VinNo
     , a.BasicModel
     , a.PoliceRegNo
     , a.ServiceBookNo
     , a.CustomerCode
     , b.CustomerName
     , a.ContractNo
     , a.IsContractStatus
     , case d.ContractDate
         when ('19000101') then null
        else d.ContractDate
       end ContractDate
     , a.ClubNo
     , case a.ClubDateFinish
         when ('19000101') then null
         else a.ClubDateFinish
       end ClubDateFinish
     , a.IsClubStatus
     , b.Address1
     , b.Address2
     , b.Address3 
     , b.Address4
     , b.CityCode
     , e.LookUpValueName as CityName
     , b.PhoneNo
     , b.HPNo
     , b.FaxNo
     , a.TransmissionType
     , a.TechnicalModelCode
     , case a.LastServiceDate
         when ('19000101') then null
         else a.LastServiceDate
       end LastServiceDate
     , a.LastJobType
     , a.ColourCode
     , a.EngineCode
     , a.EngineNo
     , c.MaterialDiscPct
     , c.PartDiscPct
     , c.LaborDiscPct
  from svMstCustomerVehicle a
  left join gnMstCustomer b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
 inner join gnMstCustomerProfitCenter c
    on c.CustomerCode = b.CustomerCode 
   and c.CompanyCode = b.CompanyCode
   and c.ProfitCenterCode = '200'
	LEFT JOIN svMstContract d
	ON d.CompanyCode = b.CompanyCode
	AND d.CustomerCode = b.CustomerCode
	LEFT JOIN gnMstLookUpDtl e
	ON e.CompanyCode = b.CompanyCode
	AND e.CodeID = 'CITY'
	AND e.LookUpValue = b.CityCode
 where isnull(a.BasicModel, '') <> ''


GO
/****** Object:  View [dbo].[SvCustomerView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[SvCustomerView]
as 
select a.CompanyCode
     , b.CompanyName
     , a.CustomerCode
     , a.CustomerName
     , a.Address1 as Address
     , a.Address1 as Address1, a.Address1 as Address2, a.Address3 as Address3, a.Address4 as Address4
     , a.FaxNo, a.PhoneNo, a.HPNo, a.NPWPNo, isnull(a.NPWPDate,'19000101') NPWPDate, a.SKPNo, isnull(a.SKPDate,'19000101')SKPDate
     , a.BirthDate
  from gnMstCustomer a
  left join gnMstOrganizationHdr b
    on b.CompanyCode = a.CompanyCode


GO
/****** Object:  View [dbo].[SvDealerView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvDealerView]
AS
SELECT        TOP (100) PERCENT a.CompanyCode, b.BranchCode, b.ProfitCenterCode, a.CustomerCode, a.CustomerName, 
                         a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 AS Address, a.Address1, a.CustomerAbbrName, a.Address2, a.Address3, a.Address4, a.CityCode, 
                         d.LookUpValueName AS CityCodeDesc, a.PhoneNo, a.HPNo, a.FaxNo, e.LookUpValueName AS ProfitCenter, 
                         CASE Status WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM            dbo.gnMstCustomer AS a WITH (nolock, nowait) INNER JOIN
                         dbo.gnMstCustomerProfitCenter AS b WITH (nolock, nowait) ON b.CustomerCode = a.CustomerCode AND b.CompanyCode = a.CompanyCode LEFT OUTER JOIN
                         dbo.gnMstCustomerClass AS c WITH (nolock, nowait) ON c.ProfitCenterCode = b.ProfitCenterCode AND c.CustomerClass = b.CustomerClass AND 
                         c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode LEFT OUTER JOIN
                         dbo.gnMstLookUpDtl AS d WITH (nolock, nowait) ON d.CompanyCode = a.CompanyCode AND d.CodeID = 'CITY' AND d.LookUpValue = a.CityCode LEFT OUTER JOIN
                         dbo.gnMstLookUpDtl AS e WITH (nolock, nowait) ON e.CompanyCode = a.CompanyCode AND e.CodeID = 'PFCN' AND e.LookUpValue = b.ProfitCenterCode
WHERE        (b.isBlackList = 0) AND (a.Status = 1) AND (b.ProfitCenterCode = 200)

GO
/****** Object:  View [dbo].[SvDefectView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SvDefectView]

as 

/*SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as ComplainCode, Description as Ket, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'COMPLNCD'
*/
SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as DefectCode, Description as Keterangan, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'DEFECTCD'

GO
/****** Object:  View [dbo].[SvEventBM]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE VIEW [dbo].[SvEventBM]
AS

select distinct a.CompanyCode
,a.BasicModel
,a.TechnicalModelCode
from omMstModel a
where a.status = 1



GO
/****** Object:  View [dbo].[SvEventView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvEventView]

as 

select CompanyCode
,EventNo
,EventDate
,BasicModel
,JobType
,EventStartDate
,EventEndDate
,LaborDiscPct
,PartsDiscPct
,MaterialDiscPct
,TotalAmount
,Description
,case isActive when 1 then 'Aktif' else 'Tidak Aktif' end Status
,IsActive
from svMstEvent



GO
/****** Object:  View [dbo].[SvFmView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[SvFmView]

as 

select a.CompanyCode, a.BranchCode, a.EmployeeID, a.EmployeeName  from GnMstEmployee a
where a.TitleCode IN ('8')
   AND PersonnelStatus = '1'

GO
/****** Object:  View [dbo].[SvGaransiView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SvGaransiView]

as 


select
a.CompanyCode
,a.ProductType
,a.BasicModel
,a.OperationNo
,a.Description
,a.Odometer
,a.TimePeriod
,a.TimeDim
,a.EffectiveDate
,b.LookUpValueName TimeDimDesc
,case a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status,
a.IsActive
from svMstWarranty a
left join gnMstLookupDtl b on b.CompanyCode=a.CompanyCode 
                          and b.CodeID='STWK'
                          and b.LookUpValue=a.TimeDim




GO
/****** Object:  View [dbo].[SvGetAllBranchFromSPKView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvGetAllBranchFromSPKView]
AS
SELECT DISTINCT 
                         a.CompanyCode, a.ProductType, a.BranchCode, a.GenerateNo, a.GenerateDate, a.FromInvoiceNo, a.ToInvoiceNo, CASE isnull(a.FromInvoiceNo, '') 
                         WHEN '' THEN '' ELSE (rtrim(a.FromInvoiceNo) + ' s/d ' + rtrim(a.ToInvoiceNo)) END AS Invoice, a.FPJNo, CASE a.FPJDate WHEN ('19000101') THEN NULL 
                         ELSE a.FPJDate END AS FPJDate, a.FPJGovNo, a.SourceData, b.Description AS SourceDataDesc, a.TotalNoOfItem, a.TotalAmt, a.SenderDealerName, 
                         a.RefferenceNo, CASE a.RefferenceDate WHEN ('19000101') THEN NULL ELSE a.RefferenceDate END AS RefferenceDate, a.PostingFlag, 
                         c.Description AS PostingFlagDesc, a.SenderDealerCode, d.CustomerName
FROM            dbo.svTrnPdiFsc AS a WITH (nolock, nowait) LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS b WITH (nolock, nowait) ON b.CompanyCode = a.CompanyCode AND b.ProductType = a.ProductType AND 
                         b.RefferenceCode = a.SourceData AND b.RefferenceType = 'SORCDATA' LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS c WITH (nolock, nowait) ON c.CompanyCode = a.CompanyCode AND c.ProductType = a.ProductType AND 
                         c.RefferenceCode = a.PostingFlag AND c.RefferenceType = 'POSTFLAG' LEFT OUTER JOIN
                         dbo.gnMstCustomer AS d ON d.CompanyCode = a.CompanyCode AND d.CustomerCode = a.SenderDealerCode
WHERE        (1 = 1) AND (a.FromInvoiceNo LIKE 'SPK%') OR
                         (1 = 1) AND (a.ToInvoiceNo LIKE 'SPK%')


GO
/****** Object:  View [dbo].[SvGetCustomerDetailView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvGetCustomerDetailView]

as 


select a.CompanyCode ,a.CustomerCode, a.CustomerName, 
(a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4) as CustomerAddress
,case a.Status when '1' then 'Aktif' else 'Tidak Aktif' end as Status
from gnMstCustomer a with(nolock, nowait)
where  a.Status = '1'


GO
/****** Object:  View [dbo].[SvGetInvoiceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvGetInvoiceView]
AS
SELECT     dbo.svTrnInvoice.Remarks, dbo.svTrnInvoice.CompanyCode, dbo.svTrnInvoice.BranchCode, dbo.svTrnInvoice.ProductType, dbo.svTrnInvoice.InvoiceNo, 
                      dbo.svTrnInvoice.JobOrderNo, dbo.svTrnInvoice.PoliceRegNo, dbo.svTrnInvoice.ChassisCode, dbo.svTrnInvoice.ChassisNo, dbo.svTrnService.ColorCode, 
                      RTRIM(RTRIM(dbo.svTrnService.ColorCode) + CASE isnull(omMstRefference.RefferenceDesc2, '') 
                      WHEN '' THEN '' ELSE ' - ' END + ISNULL(dbo.omMstRefference.RefferenceDesc2, '')) AS ColorCodeDesc, dbo.svTrnInvoice.CustomerCode, 
                      dbo.gnMstCustomer.CustomerName, dbo.gnMstCustomer.Address1 AS CustAddr1, dbo.gnMstCustomer.Address2 AS CustAddr2, 
                      dbo.gnMstCustomer.Address3 AS CustAddr3, dbo.gnMstCustomer.Address4 AS CustAddr4, dbo.gnMstCustomer.CityCode, 
                      dbo.gnMstLookUpDtl.LookUpValueName AS CityName, dbo.svTrnInvoice.CustomerCodeBill, dbo.gnMstCustomer.CustomerName AS CustomerNameBill, 
                      dbo.gnMstCustomer.Address1 AS CustAddr1Bill, dbo.gnMstCustomer.Address2 AS CustAddr2Bill, dbo.gnMstCustomer.Address3 AS CustAddr3Bill, 
                      dbo.gnMstCustomer.Address4 AS CustAddr4Bill, dbo.gnMstCustomer.CityCode AS CityCodeBill, dbo.gnMstLookUpDtl.LookUpValueName AS CityNameBill, 
                      dbo.gnMstCustomer.PhoneNo, dbo.gnMstCustomer.FaxNo, dbo.gnMstCustomer.HPNo, dbo.svTrnInvoice.LaborDiscPct, dbo.svTrnInvoice.PartsDiscPct, 
                      dbo.svTrnInvoice.MaterialDiscPct, dbo.svTrnInvoice.JobType, dbo.svTrnService.ForemanID, dbo.svTrnService.MechanicID, dbo.svTrnService.ServiceStatus, 
                      dbo.svTrnInvoice.FPJNo, dbo.svMstCustomerVehicle.IsContractStatus AS IsContract, dbo.svMstCustomerVehicle.ContractNo, 
                      dbo.svMstContract.EndPeriod AS ContractEndPeriod, dbo.svMstContract.IsActive AS ContractStatus, 
                      CASE svMstCustomerVehicle.IsContractStatus WHEN 1 THEN (CASE svMstContract.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) 
                      ELSE '' END AS ContractStatusDesc, dbo.svMstCustomerVehicle.IsClubStatus AS IsClub, dbo.svMstCustomerVehicle.ClubCode, 
                      dbo.svMstCustomerVehicle.ClubDateFinish AS ClubEndPeriod, dbo.svMstClub.IsActive AS ClubStatus, 
                      CASE svMstCustomerVehicle.IsClubStatus WHEN 1 THEN (CASE svMstClub.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) ELSE '' END AS ClubStatusDesc, 
                      dbo.svMstRefferenceService.Description AS JobTypeDesc, dbo.svMstRefferenceService.Description AS ServiceStatusDesc, 
                      dbo.gnMstEmployee.EmployeeName AS ForemanName, dbo.gnMstEmployee.EmployeeName AS MechanicName, ISNULL(dbo.gnMstCustomerProfitCenter.TaxCode, '')
                       AS TaxCode, ISNULL(dbo.gnMstTax.TaxPct, 0) AS TaxPct
FROM         dbo.svTrnInvoice LEFT OUTER JOIN
                      dbo.svTrnService ON dbo.svTrnInvoice.CompanyCode = dbo.svTrnService.CompanyCode AND dbo.svTrnInvoice.BranchCode = dbo.svTrnService.BranchCode AND 
                      dbo.svTrnInvoice.ProductType = dbo.svTrnService.ProductType AND dbo.svTrnInvoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT OUTER JOIN
                      dbo.omMstRefference ON dbo.svTrnInvoice.CompanyCode = dbo.omMstRefference.CompanyCode AND dbo.omMstRefference.RefferenceType = 'COLO' AND 
                      dbo.svTrnService.ColorCode = dbo.omMstRefference.RefferenceCode LEFT OUTER JOIN
                      dbo.gnMstCustomer ON dbo.svTrnService.CompanyCode = dbo.gnMstCustomer.CompanyCode AND 
                      dbo.svTrnService.CustomerCode = dbo.gnMstCustomer.CustomerCode LEFT OUTER JOIN
                      dbo.gnMstLookUpDtl ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstLookUpDtl.CompanyCode AND dbo.gnMstLookUpDtl.CodeID = 'CITY' AND 
                      dbo.gnMstCustomer.CityCode = dbo.gnMstLookUpDtl.LookUpValue LEFT OUTER JOIN
                      dbo.gnMstCustomer AS gnMstCustomer_1 ON dbo.svTrnService.CompanyCode = gnMstCustomer_1.CompanyCode AND 
                      dbo.svTrnService.CustomerCodeBill = gnMstCustomer_1.CustomerCode LEFT OUTER JOIN
                      dbo.gnMstLookUpDtl AS gnMstLookUpDtl_1 ON dbo.svTrnInvoice.CompanyCode = gnMstLookUpDtl_1.CompanyCode AND gnMstLookUpDtl_1.CodeID = 'CITY' AND 
                      gnMstCustomer_1.CityCode = gnMstLookUpDtl_1.LookUpValue LEFT OUTER JOIN
                      dbo.svMstCustomerVehicle ON dbo.svTrnService.CompanyCode = dbo.svMstCustomerVehicle.CompanyCode AND 
                      dbo.svTrnService.ChassisCode = dbo.svMstCustomerVehicle.ChassisCode AND 
                      dbo.svTrnService.ChassisNo = dbo.svMstCustomerVehicle.ChassisNo LEFT OUTER JOIN
                      dbo.svMstContract ON dbo.svTrnInvoice.CompanyCode = dbo.svMstContract.CompanyCode AND 
                      dbo.svMstCustomerVehicle.ContractNo = dbo.svMstContract.ContractNo AND dbo.svMstCustomerVehicle.IsContractStatus = 1 LEFT OUTER JOIN
                      dbo.svMstClub ON dbo.svTrnInvoice.CompanyCode = dbo.svMstClub.CompanyCode AND 
                      dbo.svMstCustomerVehicle.ClubCode = dbo.svMstClub.ClubCode LEFT OUTER JOIN
                      dbo.svMstRefferenceService ON dbo.svTrnInvoice.CompanyCode = dbo.svMstRefferenceService.CompanyCode AND 
                      dbo.svTrnInvoice.ProductType = dbo.svMstRefferenceService.ProductType AND dbo.svTrnInvoice.JobType = dbo.svMstRefferenceService.RefferenceCode AND 
                      dbo.svMstRefferenceService.RefferenceType = 'JOBSTYPE' LEFT OUTER JOIN
                      dbo.svMstRefferenceService AS svMstRefferenceService_1 ON dbo.svTrnInvoice.CompanyCode = svMstRefferenceService_1.CompanyCode AND 
                      dbo.svTrnInvoice.ProductType = svMstRefferenceService_1.ProductType AND dbo.svTrnService.ServiceStatus = svMstRefferenceService_1.RefferenceCode AND 
                      svMstRefferenceService_1.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
                      dbo.gnMstEmployee ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstEmployee.CompanyCode AND 
                      dbo.svTrnInvoice.BranchCode = dbo.gnMstEmployee.BranchCode AND dbo.svTrnService.ForemanID = dbo.gnMstEmployee.EmployeeID LEFT OUTER JOIN
                      dbo.gnMstEmployee AS gnMstEmployee_1 ON dbo.svTrnInvoice.CompanyCode = gnMstEmployee_1.CompanyCode AND 
                      dbo.svTrnInvoice.BranchCode = gnMstEmployee_1.BranchCode AND dbo.svTrnService.MechanicID = gnMstEmployee_1.EmployeeID LEFT OUTER JOIN
                      dbo.gnMstCustomerProfitCenter ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstCustomerProfitCenter.CompanyCode AND 
                      dbo.svTrnInvoice.BranchCode = dbo.gnMstCustomerProfitCenter.BranchCode AND 
                      dbo.svTrnInvoice.CustomerCode = dbo.gnMstCustomerProfitCenter.CustomerCode AND dbo.gnMstCustomerProfitCenter.ProfitCenterCode = '200' LEFT OUTER JOIN
                      dbo.gnMstTax ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstTax.CompanyCode AND dbo.gnMstCustomerProfitCenter.TaxCode = dbo.gnMstTax.TaxCode

GO
/****** Object:  View [dbo].[SvGetMekanik]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[SvGetMekanik]  as    
  SELECT a.CompanyCode, a.BranchCode, a.EmployeeID, a.EmployeeName , a.PersonnelStatus IsAvailableStatus, /*CASE b.IsAvailable WHEN '1' THEN 'Hadir' ELSE 'Tidak Aktif' END AS IsAvailable,*/     
  CASE a.PersonnelStatus WHEN '1' THEN 'AKTIF' END as PersonnelStatus    
  FROM gnMstEmployee a  
  where 1=1   
  and a.PersonnelStatus = '1'    
  AND a.TitleCode in ('2','3','8','9') 

GO
/****** Object:  View [dbo].[SvGetTableChassis]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[SvGetTableChassis]
AS
select CompanyCode, ChassisCode, cast(a.ChassisNo as varchar) ChassisNo, SeqNo, PreviousData, ChangeCode, LastUpdateBy, LastUpdateDate 
from svMstCustomerVehicleHist a
/*where 
a.companycode = '6006406' and
a.chassiscode = 'JSAJTEA4VC4' and
a.chassisno = '200049'*/

GO
/****** Object:  View [dbo].[SvGroupJobView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvGroupJobView]

as 

SELECT CompanyCode, ProductType, RefferenceType, RefferenceCode AS GroupJobType, Description AS GroupJobDescription,
DescriptionEng, CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive
FROM      svMstRefferenceService with (Nolock, Nowait)
WHERE     RefferenceType = 'GRPJOBTY'


GO
/****** Object:  View [dbo].[SvHistVehicleServiceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvHistVehicleServiceView]
AS
SELECT DISTINCT 
                         a.CompanyCode, e.BranchCode, a.PoliceRegNo, a.CustomerCode, b.CustomerName, RTRIM(RTRIM(a.CustomerCode) + ' - ' + RTRIM(b.CustomerName)) 
                         AS CustomerDesc, RTRIM(RTRIM(b.Address1) + ' ' + RTRIM(b.Address2) + ' ' + RTRIM(b.Address3) + ' ' + RTRIM(b.Address4)) AS CustomerAddr, b.Address1, 
                         b.Address2, b.Address3 + ' ' + b.Address4 AS Address3, a.DealerCode, c.CustomerName AS DealerName, a.CustomerCode + ' - ' + c.CustomerName AS DealerDesc, 
                         a.ChassisCode, CAST(a.ChassisNo AS varchar) AS ChassisNo, a.EngineCode, CAST(a.EngineNo AS varchar) AS EngineNo, a.ServiceBookNo, a.ClubCode, 
                         a.ColourCode, CASE a.FakturPolisiDate WHEN ('19000101') THEN NULL ELSE a.FakturPolisiDate END AS FakturPolisiDate, a.ClubNo, 
                         CASE a.ClubDateStart WHEN ('19000101') THEN NULL ELSE a.ClubDateStart END AS ClubDateStart, CASE a.ClubDateFinish WHEN ('19000101') THEN NULL 
                         ELSE a.ClubDateFinish END AS ClubDateFinish, CASE a.ClubSince WHEN ('19000101') THEN NULL ELSE a.ClubSince END AS ClubSince, 
                         (CASE a.IsClubStatus WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) AS IsClubStatusDesc, a.IsClubStatus, 
                         (CASE a.IsContractStatus WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) AS IsContractStatusDesc, a.IsActive, 
                         (CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) AS IsActiveDesc, a.BasicModel, a.TransmissionType, CASE a.LastServiceDate WHEN ('19000101') 
                         THEN NULL ELSE a.LastServiceDate END AS LastServiceDate, a.LastJobType, a.ContractNo, a.ContactName, b.CityCode, f.LookUpValueName AS CityName
FROM            dbo.svMstCustomerVehicle AS a LEFT OUTER JOIN
                         dbo.gnMstCustomer AS b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstCustomer AS c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.DealerCode LEFT OUTER JOIN
                         dbo.svMstJob AS d ON d.CompanyCode = a.CompanyCode AND d.BasicModel = a.BasicModel INNER JOIN
                         dbo.gnMstCustomerProfitCenter AS e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstLookUpDtl AS f ON f.CompanyCode = a.CompanyCode AND f.CodeID = 'CITY' AND f.LookUpValue = b.CityCode
WHERE        (a.IsActive = 1) AND (e.ProfitCenterCode = 200)

GO
/****** Object:  View [dbo].[SvJobOrderView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvJobOrderView]
AS
SELECT a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo,
     a.ServiceNo, a.JobOrderNo, a.JobOrderDate, 
     a.EstimationNo, a.EstimationDate, a.BookingNo, 
     a.BookingDate, a.PoliceRegNo, a.ServiceBookNo, 
     a.BasicModel, a.TransmissionType, a.ChassisCode, 
     a.ChassisNo, 
     a.ChassisCode + ' ' + CAST(a.ChassisNo AS varchar) 
     AS Chassis, a.EngineCode, a.EngineNo, 
     a.EngineCode + ' ' + CAST(a.EngineNo AS varchar) 
     AS Engine, a.ColorCode,
         (SELECT RefferenceDesc1
       FROM dbo.omMstRefference AS g
       WHERE (CompanyCode = a.CompanyCode) AND 
             (RefferenceType = 'COLO') AND 
             (RefferenceCode = a.ColorCode)) 
     AS ColorName, a.CustomerCode, 
     a.CustomerCode + ' - ' + b.CustomerName AS Customer,
      b.CustomerName, 
     b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4
      AS CustomerAddress, 
     a.CustomerCodeBill + ' - ' + c.CustomerName AS CustomerBill,
      a.CustomerCodeBill, 
     c.CustomerName AS CustomerNameBill, 
     c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4
      AS CustomerBillAddress, c.NPWPNo, c.PhoneNo, 
     c.HPNo, a.Odometer, a.JobType, a.ForemanID, 
     a.MechanicID, a.ServiceStatus, a.ServiceType, 
     CASE WHEN a.ServiceStatus IN (0, 1, 2, 3, 4, 5) 
     THEN 'Outstanding Task' ELSE 'Finish Task' END AS StatusTask,
      CASE WHEN a.ServiceStatus = '4' THEN CASE WHEN '4W'
      = '4W' THEN d .Description ELSE d .LockingBy END ELSE
      d .Description END AS ServiceStatusDesc, 
     a.ServiceRequestDesc, 
     e.EmployeeName AS ForemanName, 
     f.EmployeeName AS MechanicName,
     a.TotalSrvAmount
FROM dbo.svTrnService AS a LEFT OUTER JOIN
     dbo.gnMstCustomer AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.CustomerCode = a.CustomerCode LEFT OUTER JOIN
     dbo.gnMstCustomer AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.CustomerCode = a.CustomerCodeBill LEFT OUTER JOIN
     dbo.svMstRefferenceService AS d ON 
     d.CompanyCode = a.CompanyCode AND 
     d.ProductType = a.ProductType AND 
     d.RefferenceCode = a.ServiceStatus AND 
     d.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
     dbo.gnMstEmployee AS e ON 
     e.CompanyCode = a.CompanyCode AND 
     e.BranchCode = a.BranchCode AND 
     e.EmployeeID = a.ForemanID LEFT OUTER JOIN
     dbo.gnMstEmployee AS f ON 
     f.CompanyCode = a.CompanyCode AND 
     f.BranchCode = a.BranchCode AND 
     f.EmployeeID = a.MechanicID



GO
/****** Object:  View [dbo].[SvJobTypeView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[SvJobTypeView]

as 

select a.CompanyCode
     , a.BasicModel
     , a.JobType
     , b.Description
  from SvMstJob a
  left join svMstRefferenceService b
    on b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.RefferenceCode = a.JobType
   and b.RefferenceType = 'JOBSTYPE'


GO
/****** Object:  View [dbo].[SvJobView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvJobView]

as 

SELECT CompanyCode, ProductType, RefferenceType, RefferenceCode as JobType, Description as JobDescription,
DescriptionEng, CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      svMstRefferenceService with (Nolock, Nowait)
WHERE    RefferenceType = 'JOBSTYPE'



GO
/****** Object:  View [dbo].[SvJTView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SvJTView]

as 


select CompanyCode, ProductType, BasicModel, OperationNo
,Description
,TechnicalModelCode
,case IsSubCon when 1 then 'Ya' else 'Tidak' end as IsSubCon
,case IsCampaign when 1 then 'Ya' else 'Tidak' end as IsCampaign
,case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
,OperationHour
,ClaimHour
from svMstTask



GO
/****** Object:  View [dbo].[SvKendaraanPel]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[SvKendaraanPel]
AS
select DISTINCT a.CompanyCode, BranchCode,
 a.PoliceRegNo
,a.CustomerCode
,b.CustomerName
,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
, b.PhoneNo
, b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
,a.DealerCode
,c.CustomerName DealerName
, (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
,a.ChassisCode
,  cast(a.ChassisNo as varchar) ChassisNo
,a.EngineCode
,  cast(a.EngineNo as varchar) EngineNo
,a.ServiceBookNo
,a.ClubCode
,a.ColourCode
,case a.FakturPolisiDate when ('19000101') then getdate() else a.FakturPolisiDate end FakturPolisiDate
,a.ClubNo
,case a.ClubDateStart when ('19000101') then getdate() else a.ClubDateStart end ClubDateStart
,case a.ClubDateFinish when ('19000101') then getdate() else a.ClubDateFinish end ClubDateFinish
,case a.ClubSince when ('19000101') then getdate() else a.ClubSince end ClubSince
, (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
,a.IsClubStatus
, (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
,a.IsActive
, (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
,a.BasicModel
,a.TransmissionType
,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
,a.LastJobType
,ProductionYear
,a.ContractNo
,a.ContactName, ContactAddress, ContactPhone
,b.CityCode
,f.LookUpValueName CityName, e.ProfitCenterCode
,g.RefferenceDesc1 ColourDesc ,g.RefferenceDesc1 ColourName
,h.DescriptionEng TechnicalModelCode
from svMstCustomerVehicle a
inner join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode
left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	and c.CustomerCode = a.DealerCode
left join svMstJob d on 
	d.CompanyCode = a.CompanyCode and
	d.BasicModel = a.BasicModel 	
LEFT join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
left join gnMstLookupDtl f on 
    f.CompanyCode = a.CompanyCode and
    f.CodeID = 'CITY' and
    f.LookUpValue = b.CityCode
left join omMstRefference g on 
	a.CompanyCode = c.CompanyCode and
	g.RefferenceType = 'COLO' and
	g.RefferenceCode = a.ColourCode
LEFT JOIN svMstrefferenceService h ON
	a.CompanyCode = h.CompanyCode and
	a.BasicModel = h.RefferenceCode and
	h.RefferenceType = 'BASMODEL'

    --WHERE a.IsActive = 1 







GO
/****** Object:  View [dbo].[SvKontrakServiceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvKontrakServiceView]

as 

SELECT a.*, gnMstCustomer.CustomerName AS CustomerName 
, case a.IsActive when 1 then 'Aktif' Else 'Tidak Aktif' end Status
FROM svMstContract a
INNER JOIN gnMstCustomer ON gnMstCustomer.CompanyCode = a.CompanyCode AND
gnMstCustomer.CustomerCode = a.CustomerCode


GO
/****** Object:  View [dbo].[SvKSGView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SvKSGView]

as 


SELECT a.CompanyCode, a.ProductType,
a.BasicModel,
a.IsCampaign,a.TransmissionType, a.PdiFscSeq,
a.EffectiveDate,
Case a.IsCampaign WHEN 1 THEN 'Campaign' ELSE 'Reguler' END AS IsCampaignType,
b.LookupValueName as TransType,
a.RegularLaborAmount,	
a.RegularMaterialAmount, a.RegularTotalAmount,
--((a.LaborRate * a.RegularLaborAmount)+ a.RegularMaterialAmount) AS RegularTotalAmount,
a.Description,
CASE a.isActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status,
a.IsActive,a.LaborRate
FROM
svMstPdiFscRate a
LEFT JOIN GnMstLookupDtl b ON a.companyCode = b.CompanyCode and
a.TransmissionType =  b.LookUpValue and b.CodeId = 'TRTY'



GO
/****** Object:  View [dbo].[SvLaborCode]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvLaborCode]

as 

/*
select distinct CompanyCode , BasicModel from omMstModel
union
select distinct CompanyCode , RefferenceCode from svMstRefferenceService
where RefferenceType = 'BASMODEL'*/
select distinct CompanyCode, BasicModel from omMstModel
union
select distinct CompanyCode,LaborCode from svMstLaborRate
union
select distinct CompanyCode, RefferenceCode from svMstRefferenceService
where RefferenceType = 'BASMODEL'




GO
/****** Object:  View [dbo].[SvMechanicAvbView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  CREATE view [dbo].[SvMechanicAvbView]  as  
  SELECT b.CompanyCode,a.EmployeeID, b.BranchCode, a.EmployeeName , /*CASE b.IsAvailable WHEN '1' THEN 'Hadir' ELSE 'Tidak Aktif' END AS IsAvailableString,*/     
  b.IsAvailable, CASE b.IsAvailable WHEN '1' THEN 'Hadir' ELSE 'Tidak Hadir' END as AttendStatus    
  FROM gnMstEmployee a, svMstAvailableMechanic b    
  where b.EmployeeID = a.EmployeeID    
  AND a.PersonnelStatus = '1'    
  and a.CompanyCode = b.CompanyCode    
  AND a.BranchCode  = b.BranchCode
GO
/****** Object:  View [dbo].[SvMstDealerView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvMstDealerView]

as 

SELECT CompanyCode, CustomerCode as DealerCode, CustomerName as DealerName, Address1, Address2, Address3, Address4, 
Address1 + ' ' + Address2 + ' ' + Address3 + ' ' + Address4 AS Address,
CASE Status WHEN 1 THEN 'Aktif' ELSE 'TIdak Aktif' END AS Status
FROM gnMstCustomer with(nolock, nowait)
--WHERE  CompanyCode = '6006406'



GO
/****** Object:  View [dbo].[SvNomorAccView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvNomorAccView]

as 

SELECT CompanyCode, BranchCode, AccountNo, Description as AccDescription
FROM gnMstAccount with(nolock,nowait)


GO
/****** Object:  View [dbo].[SvNoPolisi]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[SvNoPolisi]
AS
select DISTINCT
 a.CompanyCode, BranchCode,
--CASE a.PoliceRegNo WHEN null THEN '-' ELSE a.PoliceRegNo END as PoliceRegNo
a.PoliceRegNo
,a.CustomerCode
,b.CustomerName
,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
, b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
,a.DealerCode
,c.CustomerName DealerName
, (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
,a.ChassisCode
,  cast(a.ChassisNo as varchar) ChassisNoStr
,a.EngineCode
,  cast(a.EngineNo as varchar) EngineNo
,a.ServiceBookNo
,a.ClubCode
,a.ColourCode
,case a.FakturPolisiDate when ('19000101') then null else a.FakturPolisiDate end FakturPolisiDate
,a.ClubNo
--,a.ClubDateStart, a.ClubDateFinish, a.ClubSince
,case a.ClubDateStart when ('19000101') then getdate() else a.ClubDateStart end ClubDateStart
,case a.ClubDateFinish when ('19000101') then getdate() else a.ClubDateFinish end ClubDateFinish
,case a.ClubSince when ('19000101') then getdate() else a.ClubSince end ClubSince
, (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
,a.IsClubStatus
, (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
,a.IsActive as IsActiveP
, (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
,a.BasicModel
,a.TransmissionType
,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
,a.LastJobType
,a.ChassisNo
,a.ContractNo
,a.ContactName
,b.CityCode
,f.LookUpValueName CityName
from svMstCustomerVehicle a
left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode
left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	and c.CustomerCode = a.DealerCode
left join svMstJob d on 
	d.CompanyCode = a.CompanyCode and
	d.BasicModel = a.BasicModel 	
inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
left join gnMstLookupDtl f on 
    f.CompanyCode = a.CompanyCode and
    f.CodeID = 'CITY' and
    f.LookUpValue = b.CityCode
 WHERE a.IsActive = '1'
and a.PoliceRegNo != ''
and a.PoliceRegNo != '-'


GO
/****** Object:  View [dbo].[SvOperationView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SvOperationView]

as 

/*SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as ComplainCode, Description as Ket, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'COMPLNCD'
*/
select CompanyCode, ProductType,OperationNo
,Description as Keterangan
,case IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from  svMstTask
where IsActive = 1

GO
/****** Object:  View [dbo].[SvPaymentPackage]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[SvPaymentPackage]

as 

SELECT a.CompanyCode, BranchCode, ProfitCenterCode, a.CustomerCode, a.CustomerCode as BillTo, a.CustomerName,
       a.Address1+' '+a.Address2+' '+a.Address3+' '+a.Address4 as Address,
       c.LookUpValueName as ProfitCenter
  FROM gnMstCustomer a with(nolock, nowait)
    INNER JOIN gnMstCustomerProfitCenter b with(nolock, nowait) ON 
        b.CustomerCode= b.CustomerCode AND b.CustomerCode=a.CustomerCode
    INNER JOIN gnMstLookUpDtl c ON c.CompanyCode= a.CompanyCode
 WHERE  --a.CompanyCode='6006406'
    --AND b.BranchCode='6006401'
    --AND b.ProfitCenterCode= '200'
    b.isBlackList=0
    AND a.status = 1
    AND c.LookupValue= b.ProfitCenterCode
    AND c.CodeID= 'PFCN'
   --order BY CustomerName ASC




GO
/****** Object:  View [dbo].[SvPekerjaanView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvPekerjaanView]

as 

SELECT a.CompanyCode, a.ProductType,
    BasicModel,
    JobType,
    b.Description AS JobDescription,	
    GroupJobType,
    c.Description AS GroupJobDescription,
    WarrantyOdometer, 
    WarrantyTimePeriod,
    CASE WarrantyTimeDim WHEN 'D' THEN 'Hari' ELSE CASE WarrantyTimeDim WHEN 'M' THEN 'Bulan' ELSE 'Tahun' END END AS WarrantyTimeDimStr,
    WarrantyTimeDim,
    CASE IsPdiFsc WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsPdiFscStr,
    IsPdiFsc,
    PdiFscSeq= CAST(PdiFscSeq As Varchar(10)),
    CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status, a.IsActive as IsActiveP
FROM
    svMstJob a,
    svMstRefferenceService b,
    svMstRefferenceService c
WHERE
    a.CompanyCode = b.CompanyCode
	AND a.ProductType = b.ProductType
    AND a.JobType = b.RefferenceCode
	AND b.RefferenceType = 'JOBSTYPE'
	AND a.CompanyCode = c.CompanyCode
	AND a.ProductType = c.ProductType
    AND a.GroupJobType = c.RefferenceCode    
    AND c.RefferenceType = 'GRPJOBTY'



GO
/****** Object:  View [dbo].[SvRefferenceServiceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvRefferenceServiceView]
AS
SELECT        TOP (100) PERCENT CompanyCode, ProductType, RefferenceType, RefferenceCode, Description, DescriptionEng, IsActive
FROM            dbo.svMstRefferenceService
WHERE        (IsActive = 1)

GO
/****** Object:  View [dbo].[SvReffServiceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvReffServiceView]      
AS    
SELECT     a.CompanyCode, a.ProductType, b.LookupValueName, a.RefferenceType, a.RefferenceCode, a.Description, a.DescriptionEng, CASE WHEN a.IsActive = 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActiveDesc, a.IsActive,       
                      a.CreatedBy, a.CreatedDate, a.LastupdateBy, a.LastupdateDate, a.IsLocked, a.LockingBy, a.LockingDate      
FROM         dbo.svMstRefferenceService  a
join gnMstLookupDtl b
on a.CompanyCode = b.CompanyCode
and a.RefferenceType = b.LookupValue
GO
/****** Object:  View [dbo].[SvRegCampaign]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvRegCampaign]

as 

SELECT a.CompanyCode,	
b.PoliceRegNo
, a.ChassisCode
, a.ChassisNo
, b.EngineCode
, b.EngineNo
, d.CustomerCode
, d.CustomerName
, a.CampaignFlag
, c.LookupValueName, a.StartDate, a.EndDate, b.ServiceBookNo
, rtrim(rtrim(d.Address1) + ' ' + rtrim(d.Address2) + ' ' + rtrim(d.Address3) + ' ' + rtrim(d.Address4)) as Address
, d.CityCode, d.IbuKota as CityName
FROM svMstFscCampaign a
LEFT JOIN svMstCustomerVehicle b 
ON a.CompanyCode = b.CompanyCode
AND a.ChassisCode = b.ChassisCode	
AND a.ChassisNo = b.ChassisNo
LEFT JOIN gnMstLookupDtl c 
ON c.CodeID = 'FSC_Campaign'
AND c.ParaValue = a.CampaignFlag	
LEFT JOIN gnMstCustomer d
ON d.CompanyCode = a.CompanyCode
AND d.CustomerCode = b.CustomerCode





GO
/****** Object:  View [dbo].[SvRegPackageView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvRegPackageView]

as 

SELECT gnMstCustomer.CompanyCode
    ,PoliceRegNo
    , ChassisCode + ' - ' + CONVERT(VARCHAR, ChassisNo, 50) Chassis
  --  , ChassisCode
    --, ChassisNo
   -- , svMstPackageContract.PackageCode
    , svMstPackageContract.PackageCode + ' - ' + PackageName Package
    , svMstPackageContract.CustomerCode + ' - ' + gnMstCustomer.CustomerName Customer
    , BeginDate as StartDate
    , EndDate as FinishDate
    , VirtualAccount as AccountNo
FROM 
    svMstPackageContract
LEFT JOIN svMstPackage ON 
    svMstPackageContract.CompanyCode = svMstPackage.CompanyCode
    AND svMstPackageContract.PackageCode = svMstPackage.PackageCode    
LEFT JOIN gnMstCustomer ON
    svMstPackageContract.CompanyCode = gnMstCustomer.CompanyCode
    AND svMstPackageContract.CustomerCode = gnMstCustomer.CustomerCode




GO
/****** Object:  View [dbo].[SvReturnServiceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvReturnServiceView]
AS
SELECT a.CompanyCode, a.BranchCode, a.ProductType, 
     a.InvoiceNo, CASE a.InvoiceDate WHEN ('19000101') 
     THEN NULL 
     ELSE a.InvoiceDate END AS InvoiceDate, f.ReturnNo, 
     e.DescriptionEng AS InvoiceStatus, a.FPJNo, 
     CASE a.FPJDate WHEN ('19000101') THEN NULL 
     ELSE a.FPJDate END AS FPJDate, a.JobOrderNo, 
     CASE a.JobOrderDate WHEN ('19000101') THEN NULL 
     ELSE a.JobOrderDate END AS JobOrderDate, 
     a.JobType, a.ChassisCode, a.ChassisNo, 
     a.EngineCode, a.EngineNo, a.PoliceRegNo, 
     a.BasicModel, a.CustomerCode, a.CustomerCodeBill, 
     a.Remarks, 
     a.CustomerCode + ' - ' + b.CustomerName AS Customer,
      a.CustomerCodeBill + ' - ' + c.CustomerName AS CustomerBill,
      d.ServiceBookNo, a.Odometer, d.TransmissionType, 
     d.ColourCode
FROM dbo.svTrnInvoice AS a LEFT OUTER JOIN
     dbo.gnMstCustomer AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.CustomerCode = a.CustomerCode LEFT OUTER JOIN
     dbo.gnMstCustomer AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.CustomerCode = a.CustomerCodeBill LEFT OUTER JOIN
     dbo.svMstCustomerVehicle AS d ON 
     a.CompanyCode = d.CompanyCode AND 
     a.ChassisCode = d.ChassisCode AND 
     a.ChassisNo = d.ChassisNo AND 
     a.EngineCode = d.EngineCode AND 
     a.EngineNo = d.EngineNo AND 
     a.BasicModel = d.BasicModel LEFT OUTER JOIN
     dbo.svMstRefferenceService AS e ON 
     a.CompanyCode = e.CompanyCode AND 
     a.ProductType = e.ProductType AND 
     e.RefferenceType = 'INVSTATS' AND 
     a.InvoiceStatus = e.RefferenceCode LEFT OUTER JOIN
     dbo.SvTrnReturn AS f ON 
     a.CompanyCode = f.CompanyCode AND 
     a.BranchCode = f.BranchCode AND 
     a.ProductType = f.ProductType AND 
     a.InvoiceNo = f.InvoiceNo
WHERE (a.InvoiceStatus IN ('0', '1', '2', '4'))


GO
/****** Object:  View [dbo].[SvRincianBrowser]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE view [dbo].[SvRincianBrowser]

as 


select CompanyCode, ProductType, BasicModel, JobType,
 OperationNo
,Description
,TechnicalModelCode
,case IsSubCon when 1 then 'Ya' else 'Tidak' end as IsSubConStr
,case IsCampaign when 1 then 'Ya' else 'Tidak' end as IsCampaignStr
,case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
,IsActive as IsActiveR
,IsCampaign
,IsSubCon
,OperationHour
,ClaimHour
,BillType
,LaborCost
,LaborPrice
from svMstTask




GO
/****** Object:  View [dbo].[SvRincianPart]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvRincianPart]

as 

select a.CompanyCode, a.ProductType, BranchCode, a.BasicModel, a.OperationNo, a.JobType
	 ,a.PartNo
	,b.PartName
	,a.Quantity
    ,isnull((case d.GroupJobType when 'FSC' then a.RetailPrice else e.RetailPrice end),0) as RetailPrice
    ,d.GroupJobType
    ,a.BillType as BillTypePart
    ,case a.BillType when 'F' then 'Free' when 'C' then 'Customer' else '' end BillTypeDesc
    ,d.PdiFscSeq
from svMstTaskPart a
left join spMstItemInfo b 
	on  b.CompanyCode = a.CompanyCode
	and b.ProductType = a.ProductType
	and b.PartNo = a.PartNo
left join svMstTask c
	on  c.CompanyCode = a.CompanyCode
	and c.ProductType = a.ProductType
	and c.BasicModel = a.BasicModel
	and c.JobType = a.JobType
	and c.OperationNo = a.OperationNo
left join svMstJob d
	on  d.CompanyCode = a.CompanyCode
	and d.ProductType = a.ProductType
	and d.BasicModel = a.BasicModel
	and d.JobType = a.JobType
left join spMstItemPrice e
	on  e.CompanyCode = a.CompanyCode
	and e.PartNo = a.PartNo




GO
/****** Object:  View [dbo].[SvRincinJob]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE view [dbo].[SvRincinJob]

as 


select CompanyCode, ProductType, BasicModel, JobType,
 OperationNo
,Description
,TechnicalModelCode
,IsActive as IsActiveR
,IsCampaign
,IsSubCon
,OperationHour
,ClaimHour
,BillType
,LaborCost
,LaborPrice
from svMstTask






GO
/****** Object:  View [dbo].[SvSaView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[SvSaView]

as 

select a.CompanyCode, a.BranchCode, a.EmployeeID, a.EmployeeName  from GnMstEmployee a
where a.TitleCode IN ('3','7')
   AND PersonnelStatus = '1'

GO
/****** Object:  View [dbo].[SvStallView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvStallView]
AS
SELECT        CompanyCode, BranchCode, ProductType, StallCode, Description, HaveLift, IsActive, CASE HaveLift WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS HaveLiftString, 
                         CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActiveString
FROM            dbo.svMstStall

GO
/****** Object:  View [dbo].[SvTargetView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvTargetView]

as 


select	CompanyCode
,ProductType, BranchCode
, cast(PeriodYear as varchar) + ' / ' + replicate('0', (2 - LEN(CAST(PeriodMonth as varchar)))) + cast(PeriodMonth as varchar) as Period	
, PeriodYear
, PeriodMonth
, ProductivityMechanic
, TotalWorkingDays
, TotalMechanic
, TotalStall
, TotalLift
, HourlyLaborRate
, ProductivityStall
, TotalUnitService
, OverheadCost
, ServiceAmount 
, SMRTarget
, DasDailyTarget
, DasMonthTarget
from	svMstTarget
--where	CompanyCode = '6006406'
--AND BranchCode = '6006401'
--AND ProductType = '4W' 
--order by PeriodYear desc, PeriodMonth desc





GO
/****** Object:  View [dbo].[SvTarifJasaView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[SvTarifJasaView]

as 


select
	a.CompanyCode,
	a.BranchCode,
	a.ProductType,
     a.LaborCode
    ,a.Description
    ,a.LaborPrice
    ,a.EffectiveDate
    ,case IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
    , a.IsActive
from svMstLaborRate a






GO
/****** Object:  View [dbo].[SvTaskNoView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTaskNoView]
AS
SELECT        CompanyCode, ProductType, BasicModel, JobType, OperationNo, Description, ClaimHour, OperationHour, LaborCost, LaborPrice
FROM            dbo.svMstTask
WHERE        (1 = 1) AND (JobType = 'CLAIM') OR
                         (JobType = 'OTHER')


GO
/****** Object:  View [dbo].[SvTaskTypeView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTaskTypeView]
AS
SELECT DISTINCT 
                         a.CompanyCode, a.ProductType, a.BasicModel, a.JobType AS TaskType, b.Description AS Description1, ISNULL(b.Description, c.Description) AS Description2, 
                         CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive
FROM            dbo.svMstJob AS a LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS b ON b.CompanyCode = a.CompanyCode AND b.ProductType = a.ProductType AND b.RefferenceCode = a.JobType AND 
                         b.RefferenceType = 'JOBSTYPE' RIGHT OUTER JOIN
                         dbo.svMstTask AS c ON c.CompanyCode = a.CompanyCode AND c.ProductType = a.ProductType AND c.BasicModel = a.BasicModel AND c.JobType = a.JobType AND 
                         c.IsActive = 1
WHERE        (1 = 1) AND (a.IsActive = 1)


GO
/****** Object:  View [dbo].[SvTaxInvoiceHQView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTaxInvoiceHQView]
AS
SELECT DISTINCT TOP (100) PERCENT trnFakturPajak.CompanyCode, trnFakturPajak.BranchCode, trnFakturPajak.FPJNo, trnFakturPajak.FPJDate,
                             (SELECT        TOP (1) InvoiceNo + ' (' + SUBSTRING(BranchCode, LEN(BranchCode) - 1, 3) + ')' AS Expr1
                               FROM            dbo.svTrnInvoice
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY BranchCode, InvoiceNo) + ' s/d ' +
                             (SELECT        TOP (1) InvoiceNo + ' (' + SUBSTRING(BranchCode, LEN(BranchCode) - 1, 3) + ')' AS Expr1
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_3
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY InvoiceNo, BranchCode DESC) AS Invoice,
                             (SELECT        TOP (1) BranchCode
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_2
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY BranchCode, InvoiceNo) AS BranchStart,
                             (SELECT        TOP (1) BranchCode
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_1
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY BranchCode DESC) AS BranchEnd, trnFakturPajak.CustomerCode, trnFakturPajak.CustomerName, trnFakturPajak.CustomerCodeBill, 
                         trnFakturPajak.CustomerCode + ' - ' +
                             (SELECT        CustomerName
                               FROM            dbo.gnMstCustomer
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (CustomerCode = trnFakturPajak.CustomerCode)) AS Customer, 
                         trnFakturPajak.CustomerCodeBill + ' - ' +
                             (SELECT        CustomerName
                               FROM            dbo.gnMstCustomer AS gnMstCustomer_1
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (CustomerCode = trnFakturPajak.CustomerCodeBill)) AS CustomerBill
FROM            dbo.svTrnFakturPajak AS trnFakturPajak LEFT OUTER JOIN
                         dbo.svTrnInvoice AS trnInvoice ON trnInvoice.CompanyCode = trnFakturPajak.CompanyCode AND trnInvoice.FPJNo = trnFakturPajak.FPJNo AND 
                         trnInvoice.IsLocked = 1
WHERE        (trnFakturPajak.FPJNo LIKE 'FPH%')


GO
/****** Object:  View [dbo].[SvTaxInvoiceLookUpView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTaxInvoiceLookUpView]
AS
SELECT        inv.CompanyCode, inv.BranchCode, inv.ProductType, inv.InvoiceNo, inv.InvoiceDate, inv.JobOrderNo, inv.JobOrderDate, inv.PoliceRegNo, inv.JobType, 
                         inv.CustomerCode + ' - ' + cust.CustomerName AS Customer, inv.CustomerCodeBill + ' - ' + custBill.CustomerName AS CustomerBill, inv.CustomerCode
FROM            dbo.svTrnInvoice AS inv WITH (nolock, nowait) INNER JOIN
                         dbo.gnMstCustomer AS cust WITH (nolock, nowait) ON inv.CompanyCode = cust.CompanyCode AND inv.CustomerCode = cust.CustomerCode INNER JOIN
                         dbo.gnMstCustomer AS custBill WITH (nolock, nowait) ON inv.CompanyCode = cust.CompanyCode AND inv.CustomerCodeBill = custBill.CustomerCode
WHERE        (inv.InvoiceStatus = 0) AND (inv.FPJNo = '') AND (inv.InvoiceNo LIKE 'INW%' OR
                         inv.InvoiceNo LIKE 'INF%')


GO
/****** Object:  View [dbo].[SvTaxInvoiceStdView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTaxInvoiceStdView]
AS
SELECT DISTINCT TOP (100) PERCENT trnFakturPajak.CompanyCode, trnFakturPajak.BranchCode, trnFakturPajak.FPJNo, trnFakturPajak.FPJDate,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo) + ' s/d ' +
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_3
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo DESC) AS InvoiceNo, trnFakturPajak.CustomerCode + ' - ' + cust.CustomerName AS Customer, 
                         trnFakturPajak.CustomerCodeBill + ' - ' + custBill.CustomerName AS CustomerBill, trnFakturPajak.CustomerCode,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_2
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo) AS InvoiceStart,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_1
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo DESC) AS InvoiceEnd
FROM            dbo.svTrnFakturPajak AS trnFakturPajak LEFT OUTER JOIN
                         dbo.svTrnInvoice AS trnInvoice ON trnInvoice.CompanyCode = trnFakturPajak.CompanyCode AND trnInvoice.BranchCode = trnFakturPajak.BranchCode AND 
                         trnInvoice.FPJNo = trnFakturPajak.FPJNo INNER JOIN
                         dbo.gnMstCustomer AS cust WITH (nolock, nowait) ON trnFakturPajak.CompanyCode = cust.CompanyCode AND 
                         trnFakturPajak.CustomerCode = cust.CustomerCode INNER JOIN
                         dbo.gnMstCustomer AS custBill WITH (nolock, nowait) ON trnFakturPajak.CompanyCode = cust.CompanyCode AND 
                         trnFakturPajak.CustomerCodeBill = custBill.CustomerCode
WHERE        (trnFakturPajak.FPJNo LIKE 'FPS%') AND (trnFakturPajak.FPJGovNo = '') AND (trnInvoice.InvoiceNo LIKE 'INW%' OR
                         trnInvoice.InvoiceNo LIKE 'INF%') OR
                         (trnFakturPajak.FPJNo LIKE 'FPS%') AND (trnFakturPajak.FPJGovNo = '') AND (trnFakturPajak.NoOfInvoice > 1)


GO


CREATE TABLE [dbo].[gnMstCompanyMapping](
	[CompanyCode] [varchar](15) NOT NULL,
	[BranchCode] [varchar](15) NOT NULL,
	[BranchName] [varchar](100) NOT NULL,
	[DbName] [varchar](50) NOT NULL,
	[MappingType] [bit] NOT NULL,
	[CompanyMD] [varchar](15) NOT NULL,
	[BranchMD] [varchar](15) NULL,
	[UnitBranchMD] [varchar](15) NULL,
	[BranchNameMD] [varchar](100) NOT NULL,
	[DbMD] [varchar](50) NOT NULL,
	[WarehouseMD] [varchar](15) NOT NULL,
	[isStatus] [bit] NOT NULL,
 CONSTRAINT [PK_gnMstCompanyMapping] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[BranchCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
) ON [PRIMARY]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTaxInvoiceView]
AS
SELECT DISTINCT a.CompanyCode, a.BranchCode, a.FPJNo, a.FPJDate,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)) AS InvoiceStart,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_3
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)
                               ORDER BY InvoiceNo DESC) AS InvoiceEnd,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_2
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)) + ' s/d ' +
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_1
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)
                               ORDER BY InvoiceNo DESC) AS Invoice, a.CustomerCode,
                             (SELECT        CustomerName
                               FROM            dbo.gnMstCustomer
                               WHERE        (CompanyCode = a.CompanyCode) AND (CustomerCode = a.CustomerCode)) AS CustomerName, a.CustomerCodeBill,
                             (SELECT        CustomerCode + ' - ' + CustomerName AS Expr1
                               FROM            dbo.gnMstCustomer AS gnMstCustomer_2
                               WHERE        (CompanyCode = a.CompanyCode) AND (CustomerCode = a.CustomerCode)) AS Customer,
                             (SELECT        CustomerCode + ' - ' + CustomerName AS Expr1
                               FROM            dbo.gnMstCustomer AS gnMstCustomer_1
                               WHERE        (CompanyCode = a.CompanyCode) AND (CustomerCode = a.CustomerCodeBill)) AS CustomerBill
FROM            dbo.svTrnFakturPajak AS a LEFT OUTER JOIN
                         dbo.svTrnInvoice AS b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.FPJNo = a.FPJNo
WHERE        (1 = 1) AND (ISNULL(a.FPJGovNo, '') = '')


GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE view [dbo].[SvTrnCatCode]

as 


select CompanyCode, ProductType, RefferenceCode
, Description
, DescriptionEng
, IsActive
, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from	svMstRefferenceService with(nolock, nowait)
where	RefferenceType = 'CLAIMCAT'
/*and CompanyCode = '6006406'
and ProductType = '4W'
order by RefferenceCode
*/




GO
/****** Object:  View [dbo].[SvTrnClaimView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnClaimView]
AS
SELECT        a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateDate, a.FromInvoiceNo, a.ToInvoiceNo, CASE isnull(a.FromInvoiceNo, '') 
                         WHEN '' THEN '' ELSE (rtrim(a.FromInvoiceNo) + ' s/d ' + rtrim(a.ToInvoiceNo)) END AS Invoice, a.FPJNo, CASE a.FPJDate WHEN ('19000101') THEN NULL 
                         ELSE a.FPJDate END AS FPJDate, a.FPJGovNo, a.SourceData, b.Description AS SourceDataDesc, a.TotalNoOfItem, a.TotalClaimAmt, a.SenderDealerName, 
                         a.RefferenceNo, CASE a.RefferenceDate WHEN ('19000101') THEN NULL ELSE a.RefferenceDate END AS RefferenceDate, a.PostingFlag, 
                         c.Description AS PostingFlagDesc, a.SenderDealerCode, d.CustomerName, ISNULL(a.IsSparepartClaim, 0) AS IsSparepartClaim
FROM            dbo.svTrnClaim AS a WITH (nolock, nowait) LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS b WITH (nolock, nowait) ON b.CompanyCode = a.CompanyCode AND b.ProductType = a.ProductType AND 
                         b.RefferenceCode = a.SourceData AND b.RefferenceType = 'SORCDATA' LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS c WITH (nolock, nowait) ON c.CompanyCode = a.CompanyCode AND c.ProductType = a.ProductType AND 
                         c.RefferenceCode = a.PostingFlag AND c.RefferenceType = 'POSTFLAG' LEFT OUTER JOIN
                         dbo.gnMstCustomer AS d ON d.CompanyCode = a.CompanyCode AND d.CustomerCode = a.SenderDealerCode
WHERE        (1 = 1)

GO
/****** Object:  View [dbo].[SvTrnComCode]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[SvTrnComCode]

as 


select CompanyCode, ProductType, RefferenceCode as ComCode
, Description
, DescriptionEng
, IsActive, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from	svMstRefferenceService with(nolock, nowait)
where	RefferenceType = 'COMPLNCD'
/*and CompanyCode = '6006406'
and ProductType = '4W'
order by RefferenceCode
*/



GO
/****** Object:  View [dbo].[SvTrnDefCode]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE view [dbo].[SvTrnDefCode]

as 

select CompanyCode, ProductType, RefferenceCode as DefCod
, Description
, DescriptionEng
, IsActive, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from	svMstRefferenceService with(nolock, nowait)
where	RefferenceType = 'DEFECTCD'
/*and CompanyCode = '6006406'
and ProductType = '4W'
order by RefferenceCode
*/



GO
/****** Object:  View [dbo].[SvTrnMaintainSPKView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnMaintainSPKView]
AS
SELECT DISTINCT 
                         dbo.svTrnService.CompanyCode, dbo.svTrnService.BranchCode, dbo.svTrnService.ServiceNo, dbo.svTrnService.JobOrderNo, dbo.svTrnService.JobOrderDate, 
                         dbo.svTrnService.PoliceRegNo, dbo.svTrnService.ServiceBookNo, dbo.svTrnService.BasicModel, dbo.svTrnService.TransmissionType, 
                         dbo.svTrnService.ChassisCode, dbo.svTrnService.ChassisNo, dbo.svTrnService.EngineCode, dbo.svTrnService.EngineNo, dbo.svTrnService.ColorCode, 
                         dbo.svTrnService.CustomerCode, dbo.gnMstCustomer.CustomerName, dbo.svTrnService.CustomerCodeBill, custBill.CustomerName AS CustomerNameBill, 
                         dbo.svTrnService.Odometer, dbo.svTrnService.JobType, dbo.svTrnService.ServiceStatus, reffService.Description AS ServiceName, dbo.svTrnService.ForemanID, 
                         employee.EmployeeName AS ForemanName
FROM            dbo.svTrnService WITH (NOLOCK, NOWAIT) LEFT OUTER JOIN
                         dbo.gnMstCustomer ON dbo.gnMstCustomer.CompanyCode = dbo.svTrnService.CompanyCode AND 
                         dbo.gnMstCustomer.CustomerCode = dbo.svTrnService.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstCustomer AS custBill ON custBill.CompanyCode = dbo.svTrnService.CompanyCode AND 
                         custBill.CustomerCode = dbo.svTrnService.CustomerCodeBill LEFT OUTER JOIN
                         dbo.gnMstEmployee AS employee ON employee.CompanyCode = dbo.svTrnService.CompanyCode AND employee.BranchCode = dbo.svTrnService.BranchCode AND 
                         employee.EmployeeID = dbo.svTrnService.ForemanID LEFT OUTER JOIN
                         dbo.svTrnSrvItem AS srvItem ON srvItem.CompanyCode = dbo.svTrnService.CompanyCode AND srvItem.BranchCode = dbo.svTrnService.BranchCode AND 
                         srvItem.ProductType = dbo.svTrnService.ProductType AND srvItem.ServiceNo = dbo.svTrnService.ServiceNo LEFT OUTER JOIN
                         dbo.svTrnSrvTask AS srvTask ON srvTask.CompanyCode = dbo.svTrnService.CompanyCode AND srvTask.BranchCode = dbo.svTrnService.BranchCode AND 
                         srvTask.ProductType = dbo.svTrnService.ProductType AND srvTask.ServiceNo = dbo.svTrnService.ServiceNo LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS reffService ON reffService.CompanyCode = dbo.svTrnService.CompanyCode AND 
                         reffService.ProductType = dbo.svTrnService.ProductType AND reffService.RefferenceCode = dbo.svTrnService.ServiceStatus AND 
                         reffService.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
                         dbo.svTrnInvoice AS invoice ON invoice.CompanyCode = dbo.svTrnService.CompanyCode AND invoice.BranchCode = dbo.svTrnService.BranchCode AND 
                         invoice.ProductType = dbo.svTrnService.ProductType AND invoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT OUTER JOIN
                         dbo.svTrnSrvVOR AS VOR ON VOR.CompanyCode = dbo.svTrnService.CompanyCode AND VOR.BranchCode = dbo.svTrnService.BranchCode AND 
                         VOR.ServiceNo = dbo.svTrnService.ServiceNo
WHERE        (dbo.svTrnService.ServiceType = 2) AND (dbo.svTrnService.ServiceStatus IN ('0', '1', '2', '3', '4', '5'))


GO
/****** Object:  View [dbo].[SvTrnOpNo]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE view [dbo].[SvTrnOpNo]

as 

select a.CompanyCode, a.BranchCode, a.ServiceNo, a.OperationNo, a.OperationHour, c.Description
  from svTrnSrvTask a
  left join svTrnService b 
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.ProductType = a.ProductType
   and b.ServiceNo = a.ServiceNo
  left join svMstTask c 
    on c.CompanyCode = a.CompanyCode
   and c.ProductType = a.ProductType
   and c.BasicModel = b.BasicModel
   and c.JobType = b.JobType
   and c.OperationNo = a.OperationNo
 where 1 = 1
   /*and a.CompanyCode = '6006406'
   and a.BranchCode = '6006401'
   and a.ServiceNo = '29061'*/
   and a.BillType = 'W'




GO
/****** Object:  View [dbo].[SvTrnPdiFscView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnPdiFscView]
AS
SELECT DISTINCT 
     a.CompanyCode, a.BranchCode, a.ProductType, 
     a.GenerateNo, a.GenerateDate, 
     ISNULL(a.FromInvoiceNo, '') AS FromInvoiceNo, 
     ISNULL(a.ToInvoiceNo, '') AS ToInvoiceNo, 
     CASE isnull(a.FromInvoiceNo, '') 
     WHEN '' THEN '' ELSE (rtrim(a.FromInvoiceNo) 
     + ' s/d ' + rtrim(a.ToInvoiceNo)) END AS Invoice, 
     a.FPJNo, CASE a.FPJDate WHEN ('19000101') 
     THEN NULL ELSE a.FPJDate END AS FPJDate, 
     a.FPJGovNo, a.SourceData, 
     b.Description AS SourceDataDesc, a.TotalNoOfItem, 
     a.TotalAmt, a.SenderDealerName, a.RefferenceNo, 
     CASE a.RefferenceDate WHEN ('19000101') 
     THEN NULL 
     ELSE a.RefferenceDate END AS RefferenceDate, 
     a.PostingFlag, c.Description AS PostingFlagDesc, 
     a.SenderDealerCode, d.CustomerName
FROM dbo.svTrnPdiFsc AS a WITH (nolock, nowait) 
     LEFT OUTER JOIN
     dbo.svMstRefferenceService AS b WITH (nolock, 
     nowait) ON b.CompanyCode = a.CompanyCode AND 
     b.ProductType = a.ProductType AND 
     b.RefferenceCode = a.SourceData AND 
     b.RefferenceType = 'SORCDATA' LEFT OUTER JOIN
     dbo.svMstRefferenceService AS c WITH (nolock, 
     nowait) ON c.CompanyCode = a.CompanyCode AND 
     c.ProductType = a.ProductType AND 
     c.RefferenceCode = a.PostingFlag AND 
     c.RefferenceType = 'POSTFLAG' LEFT OUTER JOIN
     dbo.gnMstCustomer AS d ON 
     d.CompanyCode = a.CompanyCode AND 
     d.CustomerCode = a.SenderDealerCode

GO
/****** Object:  View [dbo].[SvTrnPOSubConRcvView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnPOSubConRcvView]
AS
SELECT DISTINCT 
     TOP (100) PERCENT a.CompanyCode, a.BranchCode, 
     a.ProductType, a.PONo, a.PODate, a.JobOrderNo, 
     a.JobOrderDate, a.SupplierCode, b.SupplierName, 
     a.PODisc, a.ServiceAmt, a.POStatus, c.Description, 
     a.RecNo, a.RecDate, a.FPJNo, a.FPJDate, 
     a.FPJGovNo
FROM dbo.svTrnPoSubCon AS a LEFT OUTER JOIN
     dbo.gnMstSupplier AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.SupplierCode = a.SupplierCode LEFT OUTER JOIN
     dbo.svMstRefferenceService AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.ProductType = a.ProductType AND 
     c.RefferenceCode = a.POStatus AND 
     c.RefferenceType = 'PORRSTAT'


GO
/****** Object:  View [dbo].[SvTrnPOSubConView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnPOSubConView]
AS
SELECT a.CompanyCode, a.BranchCode, a.ProductType, 
     a.PONo, a.PODate, a.JobOrderNo, a.JobOrderDate, 
     a.SupplierCode, b.SupplierName, a.PODisc, 
     a.ServiceAmt, c.RefferenceCode, a.POStatus, 
     c.Description
FROM dbo.svTrnPoSubCon AS a LEFT OUTER JOIN
     dbo.gnMstSupplier AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.SupplierCode = a.SupplierCode LEFT OUTER JOIN
     dbo.svMstRefferenceService AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.ProductType = a.ProductType AND 
     c.RefferenceCode = a.POStatus AND 
     c.RefferenceType = 'PORRSTAT'


GO
/****** Object:  View [dbo].[SvTrnSenderDealerView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnSenderDealerView]
AS
SELECT a.CompanyCode, b.BranchCode, a.CustomerCode, 
     a.CustomerName, a.CustomerAbbrName, 
     a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4
      AS Address, a.Address1, a.Address2, a.Address3, 
     a.Address4, a.CityCode, 
     d.LookUpValueName AS CityCodeDesc, a.PhoneNo, 
     a.HPNo, a.FaxNo, b.ProfitCenterCode, 
     e.LookUpValueName AS ProfitCenter, 
     CASE Status WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END
      AS Status
FROM dbo.gnMstCustomer AS a WITH (nolock, nowait) 
     INNER JOIN
     dbo.gnMstCustomerProfitCenter AS b WITH (nolock, 
     nowait) ON b.CustomerCode = a.CustomerCode AND 
     b.CompanyCode = a.CompanyCode LEFT OUTER JOIN
     dbo.gnMstCustomerClass AS c WITH (nolock, nowait) 
     ON c.ProfitCenterCode = b.ProfitCenterCode AND 
     c.CustomerClass = b.CustomerClass AND 
     c.CompanyCode = b.CompanyCode AND 
     c.BranchCode = b.BranchCode LEFT OUTER JOIN
     dbo.gnMstLookUpDtl AS d WITH (nolock, nowait) ON 
     d.CompanyCode = a.CompanyCode AND 
     d.CodeID = 'CITY' AND 
     d.LookUpValue = a.CityCode LEFT OUTER JOIN
     dbo.gnMstLookUpDtl AS e WITH (nolock, nowait) ON 
     e.CompanyCode = a.CompanyCode AND 
     e.CodeID = 'PFCN' AND 
     e.LookUpValue = b.ProfitCenterCode
WHERE (b.isBlackList = 0)


GO
/****** Object:  View [dbo].[SvTrnServiceMechanicByJobOrderNoView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[SvTrnServiceMechanicByJobOrderNoView]
AS
SELECT DISTINCT 
     dbo.svTrnService.CompanyCode, 
     dbo.svTrnService.BranchCode, 
     dbo.svTrnService.ProductType, 
     dbo.svTrnService.ServiceNo, 
     dbo.svTrnService.ServiceType, 
     dbo.svTrnService.ForemanID, 
     dbo.svTrnService.EstimationNo, 
     dbo.svTrnService.EstimationDate, 
     dbo.svTrnService.BookingNo, 
     dbo.svTrnService.BookingDate, 
     dbo.svTrnService.JobOrderNo, 
     dbo.svTrnService.JobOrderDate, 
     dbo.svTrnService.InvoiceNo, 
     dbo.svTrnService.PoliceRegNo, 
     dbo.svTrnService.ServiceBookNo, 
     dbo.svTrnService.BasicModel, 
     dbo.svTrnService.TransmissionType, 
     dbo.svTrnService.ChassisCode, 
     dbo.svTrnService.ChassisNo, 
     dbo.svTrnService.EngineCode, 
     dbo.svTrnService.EngineNo, 
     dbo.svTrnService.ChassisCode + ' ' + CAST(dbo.svTrnService.ChassisNo
      AS varchar) AS KodeRangka, 
     dbo.svTrnService.EngineCode + ' ' + CAST(dbo.svTrnService.EngineNo
      AS varchar) AS KodeMesin, 
     dbo.svTrnService.ColorCode, 
     dbo.svTrnService.CustomerCode + ' - ' + dbo.gnMstCustomer.CustomerName
      AS Customer, 
     dbo.svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName
      AS CustomerBill, dbo.svTrnService.CustomerCode, 
     dbo.svTrnService.CustomerCodeBill, 
     dbo.svTrnService.Odometer, 
     dbo.svTrnService.JobType, 
     reffService.RefferenceCode AS ServiceStatus, 
     reffService.Description AS ServiceStatusDesc, 
     reffService.LockingBy, 
     dbo.svTrnService.InsurancePayFlag, 
     dbo.svTrnService.InsuranceOwnRisk, 
     dbo.svTrnService.InsuranceNo, 
     dbo.svTrnService.InsuranceJobOrderNo, 
     dbo.svTrnService.LaborDiscPct, 
     dbo.svTrnService.PartDiscPct, 
     dbo.svTrnService.MaterialDiscPct, 
     dbo.svTrnService.PPNPct, 
     dbo.svTrnService.ServiceRequestDesc, 
     dbo.svTrnService.ConfirmChangingPart, 
     dbo.svTrnService.EstimateFinishDate, 
     dbo.svTrnService.LaborDppAmt, 
     dbo.svTrnService.PartsDppAmt, 
     dbo.svTrnService.MaterialDppAmt, 
     dbo.svTrnService.TotalDPPAmount, 
     dbo.svTrnService.TotalPpnAmount, 
     dbo.svTrnService.TotalPphAmount, 
     dbo.svTrnService.TotalSrvAmount, 
     employee.EmployeeName AS ForemanName, 
     custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3
      + '' + custBill.Address4 AS AddressBill, 
     custBill.NPWPNo, custBill.PhoneNo, custBill.FaxNo, 
     custBill.HPNo
FROM dbo.svTrnService WITH (NOLOCK, NOWAIT) 
     LEFT OUTER JOIN
     dbo.gnMstCustomer ON 
     dbo.gnMstCustomer.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     dbo.gnMstCustomer.CustomerCode = dbo.svTrnService.CustomerCode
      LEFT OUTER JOIN
     dbo.gnMstCustomer AS custBill ON 
     custBill.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     custBill.CustomerCode = dbo.svTrnService.CustomerCodeBill
      LEFT OUTER JOIN
     dbo.gnMstEmployee AS employee ON 
     employee.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     employee.BranchCode = dbo.svTrnService.BranchCode AND
      employee.EmployeeID = dbo.svTrnService.ForemanID LEFT
      OUTER JOIN
     dbo.svTrnSrvItem AS srvItem ON 
     srvItem.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvItem.BranchCode = dbo.svTrnService.BranchCode AND
      srvItem.ProductType = dbo.svTrnService.ProductType AND
      srvItem.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svTrnSrvTask AS srvTask ON 
     srvTask.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvTask.BranchCode = dbo.svTrnService.BranchCode AND
      srvTask.ProductType = dbo.svTrnService.ProductType AND
      srvTask.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svMstRefferenceService AS reffService ON 
     reffService.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     reffService.ProductType = dbo.svTrnService.ProductType
      AND 
     reffService.RefferenceCode = dbo.svTrnService.ServiceStatus
      AND 
     reffService.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
     dbo.svTrnInvoice AS invoice ON 
     invoice.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     invoice.BranchCode = dbo.svTrnService.BranchCode AND
      invoice.ProductType = dbo.svTrnService.ProductType AND
      invoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT
      OUTER JOIN
     dbo.svTrnSrvVOR AS VOR ON 
     VOR.CompanyCode = dbo.svTrnService.CompanyCode AND
      VOR.BranchCode = dbo.svTrnService.BranchCode AND 
     VOR.ServiceNo = dbo.svTrnService.ServiceNo
WHERE (1 = 1)



GO
/****** Object:  View [dbo].[SvTrnServiceMechanicView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnServiceMechanicView]
AS
SELECT DISTINCT 
     dbo.svTrnService.CompanyCode, 
     dbo.svTrnService.BranchCode, 
     dbo.svTrnService.ProductType, 
     dbo.svTrnService.ServiceNo, 
     dbo.svTrnService.ServiceType, 
     dbo.svTrnService.ForemanID, 
     dbo.svTrnService.EstimationNo, 
     dbo.svTrnService.EstimationDate, 
     dbo.svTrnService.BookingNo, 
     dbo.svTrnService.BookingDate, 
     dbo.svTrnService.JobOrderNo, 
     dbo.svTrnService.JobOrderDate, 
     dbo.svTrnService.InvoiceNo, 
     dbo.svTrnService.PoliceRegNo, 
     dbo.svTrnService.ServiceBookNo, 
     dbo.svTrnService.BasicModel, 
     dbo.svTrnService.TransmissionType, 
     dbo.svTrnService.ChassisCode, 
     dbo.svTrnService.ChassisNo, 
     dbo.svTrnService.EngineCode, 
     dbo.svTrnService.EngineNo, 
     dbo.svTrnService.ChassisCode + ' ' + CAST(dbo.svTrnService.ChassisNo
      AS varchar) AS KodeRangka, 
     dbo.svTrnService.EngineCode + ' ' + CAST(dbo.svTrnService.EngineNo
      AS varchar) AS KodeMesin, 
     dbo.svTrnService.ColorCode, 
     dbo.svTrnService.CustomerCode + ' - ' + dbo.gnMstCustomer.CustomerName
      AS Customer, 
     dbo.svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName
      AS CustomerBill, dbo.svTrnService.CustomerCode, 
     dbo.svTrnService.CustomerCodeBill, 
     dbo.svTrnService.Odometer, 
     dbo.svTrnService.JobType, 
     reffService.RefferenceCode AS ServiceStatus, 
     reffService.Description AS ServiceStatusDesc, 
     reffService.LockingBy, 
     dbo.svTrnService.InsurancePayFlag, 
     dbo.svTrnService.InsuranceOwnRisk, 
     dbo.svTrnService.InsuranceNo, 
     dbo.svTrnService.InsuranceJobOrderNo, 
     dbo.svTrnService.LaborDiscPct, 
     dbo.svTrnService.PartDiscPct, 
     dbo.svTrnService.MaterialDiscPct, 
     dbo.svTrnService.PPNPct, 
     dbo.svTrnService.ServiceRequestDesc, 
     dbo.svTrnService.ConfirmChangingPart, 
     dbo.svTrnService.EstimateFinishDate, 
     dbo.svTrnService.LaborDppAmt, 
     dbo.svTrnService.PartsDppAmt, 
     dbo.svTrnService.MaterialDppAmt, 
     dbo.svTrnService.TotalDPPAmount, 
     dbo.svTrnService.TotalPpnAmount, 
     dbo.svTrnService.TotalPphAmount, 
     dbo.svTrnService.TotalSrvAmount, 
     employee.EmployeeName AS ForemanName, 
     custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3
      + '' + custBill.Address4 AS AddressBill, 
     custBill.NPWPNo, custBill.PhoneNo, custBill.FaxNo, 
     custBill.HPNo
FROM dbo.svTrnService WITH (NOLOCK, NOWAIT) 
     LEFT OUTER JOIN
     dbo.gnMstCustomer ON 
     dbo.gnMstCustomer.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     dbo.gnMstCustomer.CustomerCode = dbo.svTrnService.CustomerCode
      LEFT OUTER JOIN
     dbo.gnMstCustomer AS custBill ON 
     custBill.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     custBill.CustomerCode = dbo.svTrnService.CustomerCodeBill
      LEFT OUTER JOIN
     dbo.gnMstEmployee AS employee ON 
     employee.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     employee.BranchCode = dbo.svTrnService.BranchCode AND
      employee.EmployeeID = dbo.svTrnService.ForemanID LEFT
      OUTER JOIN
     dbo.svTrnSrvItem AS srvItem ON 
     srvItem.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvItem.BranchCode = dbo.svTrnService.BranchCode AND
      srvItem.ProductType = dbo.svTrnService.ProductType AND
      srvItem.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svTrnSrvTask AS srvTask ON 
     srvTask.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvTask.BranchCode = dbo.svTrnService.BranchCode AND
      srvTask.ProductType = dbo.svTrnService.ProductType AND
      srvTask.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svMstRefferenceService AS reffService ON 
     reffService.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     reffService.ProductType = dbo.svTrnService.ProductType
      AND 
     reffService.RefferenceCode = dbo.svTrnService.ServiceStatus
      AND 
     reffService.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
     dbo.svTrnInvoice AS invoice ON 
     invoice.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     invoice.BranchCode = dbo.svTrnService.BranchCode AND
      invoice.ProductType = dbo.svTrnService.ProductType AND
      invoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT
      OUTER JOIN
     dbo.svTrnSrvVOR AS VOR ON 
     VOR.CompanyCode = dbo.svTrnService.CompanyCode AND
      VOR.BranchCode = dbo.svTrnService.BranchCode AND 
     VOR.ServiceNo = dbo.svTrnService.ServiceNo
WHERE (1 = 1) AND (dbo.svTrnService.ServiceStatus IN (0, 
     1, 2, 3, 4)) AND (srvTask.ServiceNo IS NOT NULL) AND 
     (srvTask.IsSubCon = 0)


GO
/****** Object:  View [dbo].[SvTrnSPKGeneralView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[SvTrnSPKGeneralView]
as

SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + ' ' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + ' ' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + ' - ' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    ,svTrnService.ServiceStatus
    , case when svTrnService.ServiceStatus='4' then
            case when '4W'='4W' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatusDesc
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3 + '' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
    , svTrnService.CompanyCode
    ,svTrnService.BranchCode
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = 'SERVSTAS'
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo

GO
/****** Object:  View [dbo].[SvVehicleDetailView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvVehicleDetailView]

as 

select CompanyCode, 
a.ContractNo as ContractNoStr, a.PoliceRegNo, a.ChassisCode, 
convert(varchar, a.ChassisNo) ChassisNo, a.EngineCode, 
convert(varchar, a.EngineNo) EngineNo, a.ServiceBookNo, 
CASE a.FakturPolisiDate WHEN null THEN '-' ELSE a.FakturPolisiDate END as FakturPolisiDate,
ClubCode, ClubNo, CustomerCode
from svMstCustomerVehicle a
--where a.CompanyCode = '6006406' and a.CustomerCode = '6023'
--order by	a.PoliceRegNo asc


GO
/****** Object:  View [dbo].[SvWaktuKerja]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE view [dbo].[SvWaktuKerja]

as 

select a.CompanyCode, a.BranchCode ,DayCode 
, a.Description
, a.BeginWorkTime  --, convert(varchar, a.BeginWorkTime, 24)  as BeginWorkTime
, a.EndWorkTime    --, convert(varchar, a.EndWorkTime, 24) as EndWorkTime
, a.BeginLunchTime --, convert(varchar, a.BeginLunchTime, 24) as BeginLunchTime
, a.EndLunchTime   --, convert(varchar, a.EndLunchTime, 24) as EndLunchTime  
, IsActive
,case IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from svMstWorkingTime a with(nolock, nowait)       




GO
/****** Object:  View [dbo].[SysModuleView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[SysModuleView] 
as
select
	a.ModuleId,
	a.ModuleCaption,
	a.ModuleIndex,
	a.ModuleUrl,
	a.InternalLink,
	a.IsPublish,
	InternalLinkDescription = (
		case 
			when a.InternalLink=1 then 'Yes'
			else 'No'
		end 
	),
	IsPublishDescription = (
		case 
			when a.IsPublish=1 then 'Yes'
			else 'No'
		end
	)
from
	SysModule a


GO
/****** Object:  View [dbo].[SysUserView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[SysUserView]
as
select a.UserId
     , a.FullName
     , a.Email
     , a.CompanyCode
     , a.BranchCode
	 , d.CompanyName as BranchName
     , a.TypeOfGoods
     , a.IsActive
     , b.RoleId
     , c.RoleName
	 , a.RequiredChange
	 , e.ProfitCenter
  from SysUser a
  left join SysRoleuser b 
    on b.UserId = a.UserId
  left join sysRole c 
    on c.RoleId = b.RoleId
  left join gnMstCoProfile d
    on d.CompanyCode = a.CompanyCode
   and d.BranchCode = a.BranchCode
   left join sysUserProfitCenter e
   on e.UserID = a.UserID

GO
/****** Object:  View [dbo].[vAllIndexes]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vAllIndexes]  
AS 
    SELECT  
        TABLE_NAME = OBJECT_NAME(i.id), 
        INDEX_NAME = i.name, 
        COLUMN_LIST = dbo.GetIndexColumns(OBJECT_NAME(i.id), i.id, i.indid), 
        IS_CLUSTERED = INDEXPROPERTY(i.id, i.name, 'IsClustered'), 
        IS_UNIQUE = INDEXPROPERTY(i.id, i.name, 'IsUnique'), 
        FILE_GROUP = g.GroupName 
    FROM 
        sysindexes i 
    INNER JOIN 
        sysfilegroups g 
    ON 
        i.groupid = g.groupid 
    WHERE 
        (i.indid BETWEEN 1 AND 254) 
        -- leave out AUTO_STATISTICS: 
        AND (i.Status & 64)=0 
        -- leave out system tables: 
        AND OBJECTPROPERTY(i.id, 'IsMsShipped') = 0

GO
/****** Object:  View [dbo].[View_1]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[View_1]
AS
SELECT        TOP (1500) Invoice.ProductType, Invoice.InvoiceNo, Invoice.BranchCode, CASE Invoice.InvoiceDate WHEN ('19000101') THEN NULL 
                         ELSE Invoice.InvoiceDate END AS InvoiceDate, Invoice.InvoiceStatus, Invoice.FPJNo, CASE Invoice.FPJDate WHEN ('19000101') THEN NULL 
                         ELSE Invoice.FPJDate END AS FPJDate, Invoice.JobOrderNo, CASE Invoice.JobOrderDate WHEN ('19000101') THEN NULL 
                         ELSE Invoice.JobOrderDate END AS JobOrderDate, Invoice.JobType, Invoice.ChassisCode, Invoice.ChassisNo, Invoice.EngineCode, Invoice.EngineNo, 
                         Invoice.PoliceRegNo, Invoice.BasicModel, Invoice.CustomerCode, Invoice.CustomerCodeBill, Invoice.Remarks, 
                         Invoice.CustomerCode + ' - ' + Cust.CustomerName AS Customer, Invoice.CustomerCodeBill + ' - ' + CustBill.CustomerName AS CustomerBill, 
                         vehicle.ServiceBookNo, Invoice.Odometer
FROM            dbo.svTrnInvoice AS Invoice LEFT OUTER JOIN
                         dbo.gnMstCustomer AS Cust ON Cust.CompanyCode = Invoice.CompanyCode AND Cust.CustomerCode = Invoice.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstCustomer AS CustBill ON CustBill.CompanyCode = Invoice.CompanyCode AND CustBill.CustomerCode = Invoice.CustomerCodeBill LEFT OUTER JOIN
                         dbo.svMstCustomerVehicle AS vehicle ON Invoice.CompanyCode = vehicle.CompanyCode AND Invoice.ChassisCode = vehicle.ChassisCode AND 
                         Invoice.ChassisNo = vehicle.ChassisNo AND Invoice.EngineCode = vehicle.EngineCode AND Invoice.EngineNo = vehicle.EngineNo AND 
                         Invoice.BasicModel = vehicle.BasicModel LEFT OUTER JOIN
                         dbo.svMstFscCampaign AS fsc ON fsc.CompanyCode = Invoice.CompanyCode AND fsc.ChassisCode = Invoice.ChassisCode AND fsc.ChassisNo = Invoice.ChassisNo


GO
/****** Object:  View [dbo].[vtemp]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vtemp] as 
SELECT 
		a.CompanyCode,a.BranchCode	,a.InvoiceNo	,a.InvoiceDate	,a.SONo	,a.CustomerCode	,a.BillTo	,a.FakturPajakNo	
		,a.FakturPajakDate	,a.DueDate	,a.isStandard	,a.Remark	,a.Status,b.CustomerName,c.SalesType, 
		CASE ISNULL(c.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales
FROM 
		omTrSalesInvoice a
		LEFT JOIN gnMstCustomer b
		ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
		LEFT JOIN gnMstCustomerProfitCenter c
		ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = '100'                  

GO
/****** Object:  View [dbo].[vw_GnCheckTax]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vw_GnCheckTax]
as

select a.BranchCode, a.FPJNo, a.FPJDate, a.CustomerCodeBill, b.TaxTransCode
  from SpTrnSFPJHdr a
  left join gnMstCustomerProfitCenter b
    on b.BranchCode = a.BranchCode
   and b.CustomerCode = a.CustomerCodeBill
 where 1 = 1
   and a.IsPKP = 1 
   and isnull(a.FPJGovNo, '') = ''
   and b.ProfitCenterCode = '300'
   
union all
   
select a.BranchCode, a.FPJNo, a.FPJDate, a.CustomerCodeBill, b.TaxTransCode
  from SvTrnFakturPajak a  
  left join gnMstCustomerProfitCenter b
    on b.BranchCode = a.BranchCode
   and b.CustomerCode = a.CustomerCodeBill
 where 1 = 1
   and a.IsPKP = 1 
   and isnull(a.FPJGovNo, '') = ''
   and b.ProfitCenterCode = '200'
   
union all   

select a.BranchCode, a.InvoiceNo, a.InvoiceDate, a.CustomerCode, b.TaxTransCode
  from OmFakturPajakHdr a
  left join gnMstCustomerProfitCenter b
    on b.BranchCode = a.BranchCode
   and b.CustomerCode = a.CustomerCode
 where 1 = 1
   and a.TaxType = 'Standard'
   and isnull(a.FakturPajakNo, '') = ''
   and b.ProfitCenterCode = '100'


GO
/****** Object:  View [dbo].[vw_GnCustomer]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vw_GnCustomer]
as

-- select top 10  * from vw_GnCustomer where ProfitCenterCode = '200'
-- select * from gnMstCustomer

select a.CompanyCode, b.BranchCode
     , a.CustomerCode
     , a.CustomerName
     , a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 as CustAddress
     , a.Address1
     , a.CustomerAbbrName
     , a.Address2, a.Address3, a.Address4, a.CityCode
     , d.LookUpValueName as CityCodeDesc
     , a.PhoneNo, a.HPNo, a.FaxNo
     , e.LookupValueName as ProfitCenter
     , case Status when 1 then 'Aktif' else 'Tidak Aktif' end as Status
     , b.ProfitCenterCode
  from gnMstCustomer a with(nolock, nowait)
 inner join gnMstCustomerProfitCenter b with(nolock, nowait) 
    on b.CustomerCode = a.CustomerCode 
   and b.CompanyCode = a.CompanyCode
  left join gnMstCustomerClass c with(nolock, nowait) 
    on c.ProfitCenterCode = b.ProfitCenterCode 
   and c.CustomerClass = b.CustomerClass 
   and c.CompanyCode = b.CompanyCode
   and c.BranchCode = b.BranchCode
  left join gnMstLookUpDtl d with(nolock, nowait)
    on d.CompanyCode = a.CompanyCode
   and d.CodeID = 'CITY'
   and d.LookUpValue = a.CityCode
  left join gnMstLookUpDtl e with(nolock, nowait)
    on e.CompanyCode = a.CompanyCode
   and e.CodeID = 'PFCN'
   and e.LookUpValue = b.ProfitCenterCode
 where b.IsBlackList = 0 
   and a.Status = 1
   and a.CategoryCode not in ('00', '01')
  

  

GO
/****** Object:  View [dbo].[vw_index_list]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_index_list] AS
SELECT tbl.[name] AS TableName,
	idx.[name] AS IndexName,
	INDEX_COL( tbl.[name], idx.indid, 1 ) AS col1,
	INDEX_COL( tbl.[name], idx.indid, 2 ) AS col2,
	INDEX_COL( tbl.[name], idx.indid, 3 ) AS col3,
	INDEX_COL( tbl.[name], idx.indid, 4 ) AS col4,
	INDEX_COL( tbl.[name], idx.indid, 5 ) AS col5,
	INDEX_COL( tbl.[name], idx.indid, 6 ) AS col6,
	INDEX_COL( tbl.[name], idx.indid, 7 ) AS col7,
	INDEX_COL( tbl.[name], idx.indid, 8 ) AS col8,
	INDEX_COL( tbl.[name], idx.indid, 9 ) AS col9,
	INDEX_COL( tbl.[name], idx.indid, 10 ) AS col10,
	INDEX_COL( tbl.[name], idx.indid, 11 ) AS col11,
	INDEX_COL( tbl.[name], idx.indid, 12 ) AS col12,
	INDEX_COL( tbl.[name], idx.indid, 13 ) AS col13,
	INDEX_COL( tbl.[name], idx.indid, 14 ) AS col14,
	INDEX_COL( tbl.[name], idx.indid, 15 ) AS col15,
	INDEX_COL( tbl.[name], idx.indid, 16 ) AS col16,
	dpages,
	used,
	rowcnt
FROM SYSINDEXES idx
INNER JOIN SYSOBJECTS tbl ON idx.[id] = tbl.[id]
WHERE indid > 0
	AND INDEXPROPERTY( tbl.[id], idx.[name], 'IsStatistics') = 0
GO
/****** Object:  View [dbo].[vw_spMasterItemBrowse]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_spMasterItemBrowse]
AS
SELECT 
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = Items.CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,ItemInfo.SupplierCode
,Supplier.SupplierName
,Items.TypeOfGoods aaa
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = Items.CompanyCode) AS TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode



GO
/****** Object:  View [dbo].[vw_SvCustomerVehicle]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[vw_SvCustomerVehicle]
as

select a.CompanyCode 
     , rtrim(a.ChassisCode) + convert(varchar, a.ChassisNo) Chassis
     , rtrim(a.EngineCode) + convert(varchar, a.EngineNo) Engine
     , a.BasicModel, a.PoliceRegNo, a.ServiceBookNo
     , a.CustomerCode
     , b.CustomerName
     , b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as CustAddress
     , a.TransmissionType
     , a.TechnicalModelCode
     , case a.LastServiceDate
         when ('19000101') then null
         else a.LastServiceDate
       end LastServiceDate
     , a.LastJobType
     , a.ColourCode
     , a.ChassisCode
     , a.ChassisNo
     , a.EngineCode
     , a.EngineNo
  from svMstCustomerVehicle a
  left join gnMstCustomer b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
 where isnull(a.BasicModel, '') <> ''
 
  



GO
/****** Object:  View [dbo].[vw_SvJobOrder]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vw_SvJobOrder]
as

select top 500 a.CompanyCode, a.BranchCode
     , a.JobOrderNo, a.JobOrderDate
     , a.PoliceRegNo, a.ServiceBookNo
     , a.BasicModel, a.TransmissionType
     , a.ChassisCode + ' ' + cast(a.ChassisNo as  varchar) Chassis
     , a.EngineCode + ' ' + cast(a.EngineNo as varchar) Engine
     , a.ColorCode
     , a.CustomerCode + ' - ' + b.CustomerName as Customer
     , a.CustomerCodeBill + ' - ' + c.CustomerName as CustomerBill
     , c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as AddressBill
     , c.NPWPNo, c.PhoneNo, c.HPNo
     , a.Odometer, a.JobType
     , a.ForemanID, a.MechanicID
     , a.ServiceStatus
     , a.ServiceType
     , case when a.ServiceStatus in (0,1,2,3,4,5) then 'Outstanding Task' else 'Finish Task' end StatusTask
     , case when a.ServiceStatus='4' 
            then case when '4W'='4W'
                      then d.Description
                      else d.LockingBy end
            else d.Description end ServiceStatusDesc
     , a.ServiceRequestDesc
     , e.EmployeeName as ForemanName
  from svTrnService a
  left join gnMstCustomer b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join gnMstCustomer c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCodeBill
  left join svMstRefferenceService d
    on d.CompanyCode = a.CompanyCode
   and d.ProductType = a.ProductType    
   and d.RefferenceCode = a.ServiceStatus
   and d.RefferenceType = 'SERVSTAS'
  left join gnMstEmployee e
    on e.CompanyCode = a.CompanyCode
   and e.BranchCode = a.BranchCode
   and e.EmployeeID = a.ForemanID
  left join gnMstEmployee f
    on f.CompanyCode = a.CompanyCode
   and f.BranchCode = a.BranchCode
   and f.EmployeeID = a.ForemanID
 where 1 = 1  



GO
/****** Object:  View [dbo].[vw_SvRekapInsentifMekanik]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_SvRekapInsentifMekanik]
AS
SELECT     BranchCode, Periode, MechanicID, MechanicName, SUM(OperationHour) AS OperationHour, SUM(LaborGrossAmt) AS LaborGrossAmt, SUM(LaborDiscAmt) 
                      AS LaborDiscAmt, SUM(LaborGrossAmt) - SUM(LaborDiscAmt) AS LaborDppAmt
FROM         (SELECT     mek.BranchCode, LEFT(CONVERT(varchar, inv.InvoiceDate, 112), 6) AS Periode, mek.InvoiceNo, inv.InvoiceDate, mek.OperationNo, mek.MechanicID, 
                                              emp.EmployeeName AS MechanicName, CASE LEFT(inv.InvoiceNo, 3) WHEN 'INW' THEN tsk.ClaimHour ELSE tsk.OperationHour END AS OperationHour, 
                                              CONVERT(money, tsk.OperationCost * tsk.OperationHour) AS LaborGrossAmt, CONVERT(money, 
                                              tsk.OperationCost * tsk.OperationHour * inv.LaborDiscPct * 0.01) AS LaborDiscAmt
                       FROM          dbo.svTrnInvMechanic AS mek LEFT OUTER JOIN
                                              dbo.svTrnInvTask AS tsk ON tsk.CompanyCode = mek.CompanyCode AND tsk.BranchCode = mek.BranchCode AND tsk.InvoiceNo = mek.InvoiceNo AND 
                                              tsk.OperationNo = mek.OperationNo LEFT OUTER JOIN
                                              dbo.svTrnInvoice AS inv ON inv.CompanyCode = tsk.CompanyCode AND inv.BranchCode = tsk.BranchCode AND 
                                              inv.InvoiceNo = tsk.InvoiceNo LEFT OUTER JOIN
                                              dbo.gnMstEmployee AS emp ON emp.CompanyCode = mek.CompanyCode AND emp.BranchCode = mek.BranchCode AND 
                                              emp.EmployeeID = mek.MechanicID) AS [#]
GROUP BY BranchCode, Periode, MechanicID, MechanicName


GO
/****** Object:  View [dbo].[Vw_SvTrnInvItem]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[Vw_SvTrnInvItem]

as

select a.CompanyCode, a.BranchCode, a.InvoiceNo
     , c.PickingSlipNo, d.BPSFNo, e.LmpNo
     , a.SupplySlipNo, a.PartNo
     , a.SupplyQty, a.CostPrice, b.RetailPrice, b.DiscPct, a.CreatedDate
  from svTrnInvItemDtl a
 inner join svTrnInvItem b
    on b.BranchCode = a.BranchCode
   and b.InvoiceNo = a.InvoiceNo
   and b.PartNo = a.PartNo
  left join SpTrnSPickingDtl c
    on c.BranchCode = a.BranchCode
   and c.DocNo = a.SupplySlipNo
   and c.PartNo = a.PartNo
  left join SpTrnSBPSFDtl d
    on d.BranchCode = a.BranchCode
   and d.DocNo = a.SupplySlipNo
   and d.PartNo = a.PartNo
  left join spTrnSLmpDtl e
    on e.BranchCode = a.BranchCode
   and e.DocNo = a.SupplySlipNo
   and e.PartNo = a.PartNo
  

GO
/****** Object:  View [dbo].[vw_SvTrnInvoiceView]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vw_SvTrnInvoiceView]
AS

SELECT 
	Invoice.CompanyCode, Invoice.BranchCode, Invoice.ProductType, Invoice.InvoiceNo
	,isnull(Invoice.InvoiceDate,'19000101') InvoiceDate
	,Invoice.InvoiceStatus, Invoice.FPJNo, FPJ.FPJGovNo
	,isnull(Invoice.FPJDate,'19000101') FPJDate
	,Invoice.JobOrderNo
	,isnull(Invoice.JobOrderDate,'19000101') JobOrderDate
	,Invoice.JobType, Invoice.ChassisCode, Invoice.ChassisNo, Invoice.EngineCode
	,Invoice.EngineNo, Invoice.PoliceRegNo, Invoice.BasicModel, Invoice.CustomerCode, Invoice.CustomerCodeBill
	,Invoice.Remarks, (Invoice.CustomerCode + ' - ' + Cust.CustomerName) as Customer
	,(Invoice.CustomerCodeBill + ' - ' + CustBill.CustomerName) as CustomerBill
	, Invoice.Odometer, Invoice.LaborDiscPct, Invoice.PartsDiscPct, Invoice.MaterialDiscPct
	, Invoice.LaborDppAmt, Invoice.PartsDppAmt, Invoice.MaterialDppAmt
	, Invoice.TotalDppAmt, Invoice.TotalPpnAmt, Invoice.TotalSrvAmt
	
	, vehicle.ServiceBookNo
	
	, isnull(CustBill.CustomerName, '') CustomerName, isnull(CustBill.Address1, '') Address1, isnull(CustBill.Address2, '') Address2
	, isnull(CustBill.Address3, '') Address3, isnull(CustBill.Address4, '') Address4, isnull(CustBill.PhoneNo, '') PhoneNo
	, isnull(CustBill.HPNo, '') HPNo, isnull(CustBill.NPWPNo, '') NPWPNo, isnull(CustBill.NPWPDate,'19000101') NPWPDate, isnull(CustBill.SKPNo, '') SKPNo
	, isnull(CustBill.SKPDate,'19000101') SKPDate, isnull(CustBill.CityCode, '') CityCode, isnull(CityCode.LookUpValueName, '') CityDesc
	
	, isnull(CustProfCenter.TOPCode, '') TOPCode
	, isnull(TOPCode.LookUpValueName, '') TOPDesc
	
	, isnull(case AR.StatusFlag when '0' then 'Unposted' 
						 when '3' then 'Posted'
						 else 'Unknown' end, 'Unknown') StatusAR, isnull(AR.DebetAmt, 0) DebetAmt, isnull(AR.CreditAmt, 0) CreditAmt
    , isnull(AR.BlockAmt, 0) BlockAmt, isnull(AR.ReceiveAmt, 0) ReceiveAmt		
FROM svTrnInvoice Invoice
LEFT JOIN gnMstCustomer Cust
    ON Cust.CompanyCode = Invoice.CompanyCode AND Cust.CustomerCode = Invoice.CustomerCode
LEFT JOIN gnMstCustomer CustBill
    ON CustBill.CompanyCode = Invoice.CompanyCode AND CustBill.CustomerCode = Invoice.CustomerCodeBill
LEFT JOIN svMstcustomerVehicle vehicle 
	ON Invoice.CompanyCode = vehicle.CompanyCode and Invoice.ChassisCode = vehicle.ChassisCode and 
	Invoice.ChassisNo = vehicle.ChassisNo and Invoice.EngineCode = vehicle.EngineCode and 
	Invoice.EngineNo = vehicle.EngineNo and Invoice.BasicModel = vehicle.BasicModel	
LEFT JOIN svTrnFakturPajak FPJ 
	ON FPJ.CompanyCode = Invoice.CompanyCode
	AND FPJ.BranchCode = Invoice.BranchCode
	AND FPJ.FPJNo = Invoice.FPJNo
LEFT JOIN gnMstCustomerProfitCenter CustProfCenter
	ON CustProfCenter.CompanyCode = Invoice.CompanyCode
	AND CustProfCenter.BranchCode = Invoice.BranchCode
	AND CustProfCenter.CustomerCode = Invoice.CustomerCodeBill
	AND ProfitCenterCode = '200'
LEFT JOIN gnMstLookupDtl TOPCode
	ON TOPCode.CompanyCode = Invoice.CompanyCode
	AND TOPCode.CodeID = 'TOPC'
	AND TOPCode.LookupValue = CustProfCenter.TOPCode
LEFT JOIN gnMstLookupDtl CityCode
	ON CityCode.CompanyCode = Invoice.CompanyCode
	AND CityCode.CodeID = 'CITY'
	AND CityCode.LookupValue = CustBill.CityCode
LEFT JOIN ARInterface AR 
	ON AR.CompanyCode = Invoice.CompanyCode
	AND AR.BranchCode = Invoice.BranchCode
	AND AR.DocNo = Invoice.InvoiceNo


GO
/****** Object:  View [dbo].[vw_SyncEmployeeData]    Script Date: 25/02/2015 12:46:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[vw_SyncEmployeeData]      
as      
select       
 distinct      
 --b.DealerName as DealerName,      
 --dbo.GetDealerName(a.CompanyCode) as DealerName,      
 BranchName = (      
  select       
   x.BranchName      
  from      
  gnMstOrganizationDtl x      
  where      
  CompanyCode = a.CompanyCode      
  and      
  BranchCode = a.BranchCode      
 ),      
 a.CompanyCode,      
 a.BranchCode,      
 a.EmployeeID,      
 a.EmployeeName,      
 a.SalesID,      
 a.DeptCode,      
 a.PosCode,      
 a.TeamLeaderID,      
 a.Grade,      
 convert(varchar(25),a.JoinDate,106) as JoinDate,      
 convert(varchar(25),a.ResignDate,106) as ResignDate,      
 convert(varchar(25),a.JoinDate,106) as JoinDates,      
 convert(varchar(25),a.ResignDate,106) as ResignDates,      
 a.AdditionalJob,      
 a.MaritalStatusCode,      
 a.ReligionCode,      
 a.GenderCode,      
 a.FormalEducation,      
 a.PersonnelStatus,      
 a.BirthPlace,      
 convert(varchar(25),a.BirthDate,106) as BirthDate,      
 convert(varchar(25),a.BirthDate,106) as BirthDates,      
 a.Address1,      
 a.Address2,      
 a.Address3,      
 a.ZipNo,      
 a.District,      
 a.CityCode,      
 a.IdentityNo,      
 a.Email,      
 a.PhoneNo,      
 a.HpNo,      
 a.Phone1,      
 a.Phone2,      
 a.Phone3,      
 a.Phone4,      
 a.FaxNo,      
 a.DrivingLicense1,      
 a.DrivingLicense2,      
 a.Height,      
 a.Weight,      
 a.BloodCode,      
 a.UniformSize,      
 a.ShoesSize,      
 a.ResignReason,      
 a.MutationTo,      
 convert(varchar(25),a.MutationDate,106) as MutationDate,      
 convert(varchar(25),a.MutationDate,106) as MutationDates,      
 a.EmployeeIDNew,      
 a.PromotionLevel,      
 convert(varchar(25),a.PromotionDate,106) as PromotionDate,      
 convert(varchar(25),a.PromotionDate,106) as PromotionDates,
 a.DemotionLevel,      
 convert(varchar(25),a.DemotionDate,106) as DemotionDate,      
 convert(varchar(25),a.DemotionDate,106) as DemotionDates,  
 TrnStdpDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate      
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%STDP%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSilverDate = (      
  select top 1      
  convert(varchar(25),x.TrainingDate,106) as TrainingDate     
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SPSS%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnGoldDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate       
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SPSG%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnPlatinumDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SPSP%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSCBasicDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SCB%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSCAdvDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SCA%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSHBasicDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SHB%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSHIntDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SHI%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnBMDpDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%BMB%'      
  order by      
   x.TrainingSeq desc      
 ),      
 a.CreatedDate,      
 a.IsTransfered,      
 --a.TransferedID,      
 --a.TransferedDate,      
 a.IsDeleted,      
 PosName = (      
  select top 1      
   a1.PosName      
  from      
   gnMstPosition a1      
  where      
   a1.PosCode = a.PosCode      
   and      
  a1.DeptCode = a.DeptCode      
 ),      
 GradeName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'ITSG'      
   and      
   a1.LookupValue = a.Grade      
 ),      
 TeamLeaderName = (      
  select top 1      
   a1.EmployeeName      
  from       
   SyncEmployeeData a1      
  where      
   a1.EmployeeID = a.TeamLeaderID       
   and      
   a1.CompanyCode = a.CompanyCode        
 ),      
 MaritalStatusName = (      
  select top 1     a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'MRTL'      
   and      
   a1.LookupValue = a.MaritalStatusCode       
 ),      
 ReligionName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'RLGN'      
   and      
   a1.LookupValue = a.ReligionCode       
 ),      
 GenderName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'GNDR'      
   and      
   a1.LookupValue = a.GenderCode       
 ),      
 FormalEducatioName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'FEDU'      
   and      
   a1.LookupValue = a.FormalEducation       
 ),      
 PersonnelStatusName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'PERS'      
   and      
   a1.LookupValue = a.PersonnelStatus       
 ),      
 MutationToName = (      
  select top 1      
   a1.BranchName      
  from       
   gnMstOrganizationDtl a1      
  where      
   a1.CompanyCode = a.CompanyCode      
   and      
   a1.BranchCode = a.MutationTo      
 ),      
 AdditionalJobName = (      
  select top 1      
   a1.PosName      
  from       
   gnMstPosition a1      
  where      
   a1.DeptCode = a.DeptCode      
   and      
   a1.PosCode = a.AdditionalJob      
 )      
from       
 SyncEmployeeData a      
left outer join      
 gnMstOrganizationDtl b      
on      
 b.BranchCode = a.BranchCode
 
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[LookUpSO]'))
DROP VIEW [dbo].[LookUpSO]
GO

create view [LookUpSO]
as
               SELECT a.CompanyCode, a.BranchCode,
                a.SONo, a.SODate, a.SalesType, a.CustomerCode, a.TOPCode, a.Installment, a.FinalPaymentDate,
                a.TOPDays, a.BillTo, a.ShipTo, a.ProspectNo, a.SKPKNo, a.Salesman, a.WareHouseCode, a.isLeasing, 
                a.LeasingCo, a.GroupPriceCode, a.Insurance, a.PaymentType, a.PrePaymentAmt, a.PrePaymentBy, 
                a.CommissionBy, a.CommissionAmt, a.PONo, a.ContractNo, a.Remark, a.Status,
                a.SalesCoordinator, a.SalesHead, a.BranchManager, a.RefferenceNo,
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
                then '' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDates, 
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
                CASE convert(varchar, a.RequestDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.RequestDate, 111) end as RequestDate,
                CASE convert(varchar, a.PrePaymentDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.PrePaymentDate, 111) end as PrePaymentDate,
                e.Address1 + ' ' + e.Address2 + ' ' + e.Address3 + ' ' + e.Address4 as Address,
                case when year(a.RefferenceDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC1,
                case when a.SKPKNo <> '' then convert(bit,1) else convert(bit,0) end isC2,
                case when year(a.PrePaymentDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC3,
                case when year(a.RequestDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC4,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS CustomerName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID) as SalesmanName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.Shipto = b.CustomerCode)  
						AS ShipName,
                (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.LeasingCo = b.CustomerCode)  
						AS LeasingCoName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.PrePaymentby = c.EmployeeID) as PrePaymentName,
				(SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = 'GRPR' 
                        AND d.RefferenceCode = a.GroupPriceCode) AS GroupPriceName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS BillName,
				(SELECT b.lookupvaluename
                        FROM gnMstLookUpDtl b
                        WHERE a.WareHouseCode = b.LookUpValue
						AND a.WareHouseCode = b.LookUpValue and CodeID ='MPWH')  
						AS WareHouseName,
                (a.CustomerCode
                    + ' || '
                    + (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode))  
						AS Customer, 
                (a.Salesman
                    + ' || '
                    + (SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID))  AS Sales, 
                (a.GroupPriceCode
                    + ' || '
                    + (SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = 'GRPR' 
                        AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPrice, 
                CASE a.Status when 0 then 'OPEN'
                                when 1 then 'PRINTED'
                                when 2 then 'APPROVED'
                                when 3 then 'DELETED'
                                when 4 then 'REJECTED'
                                when 9 then 'FINISHED' END as Stat
                , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales
                ,(select distinct x.TipeKendaraan
                    from pmKDP x
	                    left join gnMstEmployee b on x.CompanyCode=b.CompanyCode and x.BranchCode=b.BranchCode
		                    and x.EmployeeID=b.EmployeeID
	                    left join omTrSalesSO c on c.CompanyCode = x.CompanyCode 
		                    and c.BranchCode = x.BranchCode
		                    and c.ProspectNo = x.InquiryNumber
	                    left join omTrSalesInvoice d on d.CompanyCode = x.CompanyCode
		                    and d.BranchCode = x.BranchCode
		                    and d.SONo = c.SONo
	                    left join omTrSalesReturn e on e.CompanyCode = x.CompanyCode
		                    and e.BranchCode = x.BranchCode
		                    and e.InvoiceNo = d.InvoiceNo
                    where x.InquiryNumber=a.ProspectNo) as VehicleType
                FROM omTrSalesSO a
                INNER JOIN gnMstCustomer e
                ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode

GO
/****** Object:  UserDefinedFunction [dbo].[XSplitString]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[XSplitString]
GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_trim]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[uspfn_trim]
GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_MinuteToTime]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[uspfn_MinuteToTime]
GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_IsNullOrEmpty]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[uspfn_IsNullOrEmpty]
GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_CalculateMinute]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[uspfn_CalculateMinute]
GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_AbSplitString]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[uspfn_AbSplitString]
GO
/****** Object:  UserDefinedFunction [dbo].[SplitString]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[SplitString]
GO
/****** Object:  UserDefinedFunction [dbo].[SplitLineString]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[SplitLineString]
GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetTitleHistoryCorrelatedBranch]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[sfm_GetTitleHistoryCorrelatedBranch]
GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetGradeHistoryCorrelatedSelectedPosition]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[sfm_GetGradeHistoryCorrelatedSelectedPosition]
GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetGradeHistoryCorrelatedBranch]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[sfm_GetGradeHistoryCorrelatedBranch]
GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetCorrelatedTrainingHistoryPosition]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[sfm_GetCorrelatedTrainingHistoryPosition]
GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetCorrelatedTrainingHistoryBranch]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[sfm_GetCorrelatedTrainingHistoryBranch]
GO
/****** Object:  UserDefinedFunction [dbo].[ISOweek]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[ISOweek]
GO
/****** Object:  UserDefinedFunction [dbo].[GetSUGGORModifikasi]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetSUGGORModifikasi]
GO
/****** Object:  UserDefinedFunction [dbo].[GetSUGGORElementChilds]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetSUGGORElementChilds]
GO
/****** Object:  UserDefinedFunction [dbo].[GetModifikasi]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetModifikasi]
GO
/****** Object:  UserDefinedFunction [dbo].[GetIndexColumns]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetIndexColumns]
GO
/****** Object:  UserDefinedFunction [dbo].[GetIndexColumnOrder]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetIndexColumnOrder]
GO
/****** Object:  UserDefinedFunction [dbo].[GetElementChilds]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetElementChilds]
GO
/****** Object:  UserDefinedFunction [dbo].[GetDateIndonesian]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetDateIndonesian]
GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryPosting]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetArInquiryPosting]
GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryJournalDraft]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetArInquiryJournalDraft]
GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetArInquiryInvoiceByDocNo]
GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryInvoice]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetArInquiryInvoice]
GO
/****** Object:  UserDefinedFunction [dbo].[GetApReInquiryJournalDraft]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetApReInquiryJournalDraft]
GO
/****** Object:  UserDefinedFunction [dbo].[GetApReInquiryInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetApReInquiryInvoiceByDocNo]
GO
/****** Object:  UserDefinedFunction [dbo].[GetApInquiryJournalDraft]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetApInquiryJournalDraft]
GO
/****** Object:  UserDefinedFunction [dbo].[GetApInquiryInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[GetApInquiryInvoiceByDocNo]
GO
/****** Object:  UserDefinedFunction [dbo].[ApReCheckBalanceInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[ApReCheckBalanceInvoiceByDocNo]
GO
/****** Object:  UserDefinedFunction [dbo].[ApCheckBalanceInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
DROP FUNCTION [dbo].[ApCheckBalanceInvoiceByDocNo]
GO
/****** Object:  UserDefinedFunction [dbo].[ApCheckBalanceInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[ApCheckBalanceInvoiceByDocNo]
(
    @CompanyCode		varchar(20),
    @BranchCode			varchar(20),
    @DocNo				varchar(20)
)

returns @Result table(
 DocNo		varchar(20),
 AmountDb	decimal(18,0), 
 AmountCr	decimal(18,0)
)

begin


-- nota debet 
INSERT INTO @Result 
	SELECT a.DbCrNo AS DocNo, TotalDbCrAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnDbCrNoteHdr a
	WHERE a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 
		AND a.Status = 0 
		AND a.DbCrNo = @DocNo 
		AND a.bType = 0 

INSERT INTO @Result
	SELECT a.DbCrNo AS DocNo, 0 AS AmountDb, a.Amount AS AmountCr
	FROM apTrnDbCrNoteDtl a
	LEFT JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = 0
		AND a.DbCrNo = @DocNo 
		AND b.bType = 0
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DbCrNo AS DocNo, a.Amount AS AmountDb, 0 AS AmountCr
	FROM apTrnDbCrNoteDtl a
	LEFT JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = 0
		AND a.DbCrNo = @DocNo 
		AND b.bType = 1
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DbCrNo AS DocNo, 0 AS AmountDb, a.TotalDbCrAmt AS AmountCR
	FROM apTrnDbCrNoteHdr a
	LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo 
		AND a.CompanyCode = c.CompanyCode 
		AND a.BranchCode = c.BranchCode
	WHERE a.Status = 0
		AND a.DbCrNo = @DocNo 
		AND a.bType = 1
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 
-- invoice
INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, a.PJBSAmt AS AmountDb, 0 AS AmountCR
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'PJBS'
		AND b.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, ABS(a.PayableAmt) AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherHdr a
	WHERE a.Status = '0' 
		AND a.Category = 'PJBS' 
		AND a.PJBSAmt < a.BSAmt
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnAmt) AS AmountDB, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'PJBS' 
		AND a.PPnAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnBMAmt) AS AmountDB, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'PJBS' 
		AND a.PPnBMAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, 0 AS AmountDb, SUM(a.PPhAmt) AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'PJBS' 
		AND a.PPhAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, 0 AS AmountDb, a.PayableAmt AS AmountCr
	FROM apTrnBTTOtherHdr a
	WHERE a.Status = '0' 
		AND a.Category = 'PJBS' 
		AND a.PJBSAmt > a.BSAmt
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, 0 AS AmountDb, a.BSAmt AS AmountCr
	FROM apTrnBTTOtherHdr a
	WHERE a.Status = '0' 
		AND a.Category = 'PJBS'
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, a.DPPAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'INV'
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnAmt) AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'INV' 
		AND a.PPnAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode  
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnBMAmt) AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'INV' 
		AND a.PPnBMAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, 0 AS AmountDb, SUM(a.PPhAmt) AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Status = '0' 
		AND b.Category = 'INV' 
		AND a.PPhAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode  
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, 0 AS AmountDb, a.PayableAmt AS AmountCr
	FROM apTrnBTTOtherHdr a
	LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo 
		AND a.CompanyCode = c.CompanyCode 
		AND a.BranchCode = c.BranchCode
	WHERE a.Status = '0' 
		AND a.Category = 'INV'
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.AmountDb  AS AmountDb, a.AmountCr AS AmountCr
	FROM GLInterface a
	LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.StatusFlag NOT IN (3,4)
		AND a.DocNo = @DocNo 
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo,a.Amount AS AmountDb, 0 AS AmountCr
	FROM ApBeginBalanceDtl a
	LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN ApBeginBalanceHdr c ON a.CompanyCode = c.CompanyCode 
		AND a.BranchCode = c.BranchCode 
		AND a.DocNo = c.DocNo
	WHERE c.Status = 0
		AND a.DocNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DocNo AS DocNo, 0 AS AmountDb, a.Amount AS AmountCr
	FROM ApBeginBalanceHdr a
	LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status = 0
		AND a.DocNo = @DocNo
		AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDB, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DocNo AS DocNo, 0 AS AmountDB, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDB, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDB, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE b.Status IN('0', '1')
		AND a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.Status IN('0', '1')
		AND a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

    return
end

GO
/****** Object:  UserDefinedFunction [dbo].[ApReCheckBalanceInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[ApReCheckBalanceInvoiceByDocNo]
(
    @CompanyCode		varchar(20),
    @BranchCode			varchar(20),
    @DocNo				varchar(20)
)

returns @Result table(
 DocNo		varchar(20),
 AmountDb	decimal(18,0), 
 AmountCr	decimal(18,0)
)

begin


-- nota debet 
INSERT INTO @Result 
	SELECT a.DbCrNo AS DocNo, TotalDbCrAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnDbCrNoteHdr a
	WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
		AND a.DbCrNo = @DocNo AND a.bType = 0 

INSERT INTO @Result
	SELECT a.DbCrNo AS DocNo, 0 AS AmountDb, a.Amount AS AmountCr
	FROM apTrnDbCrNoteDtl a
	LEFT JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
	WHERE a.DbCrNo = @DocNo AND b.bType = 0
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DbCrNo AS DocNo, a.Amount AS AmountDb, 0 AS AmountCr
	FROM apTrnDbCrNoteDtl a
	LEFT JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
	WHERE a.DbCrNo = @DocNo AND b.bType = 1
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DbCrNo AS DocNo, 0 AS AmountDb, a.TotalDbCrAmt AS AmountCR
	FROM apTrnDbCrNoteHdr a
	LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
	WHERE a.DbCrNo = @DocNo AND a.bType = 1
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
-- invoice
INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, a.PJBSAmt AS AmountDb, 0 AS AmountCR
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'PJBS'
		AND b.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, ABS(a.PayableAmt) AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherHdr a
	WHERE a.Category = 'PJBS' AND a.PJBSAmt < a.BSAmt
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnAmt) AS AmountDB, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'PJBS' AND a.PPnAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnBMAmt) AS AmountDB, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'PJBS' AND a.PPnBMAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, 0 AS AmountDb, SUM(a.PPhAmt) AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'PJBS' AND a.PPhAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, 0 AS AmountDb, a.PayableAmt AS AmountCr
	FROM apTrnBTTOtherHdr a
	WHERE a.Category = 'PJBS' AND a.PJBSAmt > a.BSAmt
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, 0 AS AmountDb, a.BSAmt AS AmountCr
	FROM apTrnBTTOtherHdr a
	WHERE a.Category = 'PJBS'
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, a.DPPAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'INV'
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnAmt) AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'INV' AND a.PPnAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, SUM(a.PPnBMAmt) AS AmountDb, 0 AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'INV' AND a.PPnBMAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT  a.BTTNo AS DocNo, 0 AS AmountDb, SUM(a.PPhAmt) AS AmountCr
	FROM apTrnBTTOtherDtl a
	LEFT JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE b.Category = 'INV' AND a.PPhAmt > 0
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  
	GROUP BY a.BTTNo

INSERT INTO @Result
	SELECT a.BTTNo AS DocNo, 0 AS AmountDb, a.PayableAmt AS AmountCr
	FROM apTrnBTTOtherHdr a
	LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo 
		AND a.CompanyCode = c.CompanyCode 
		AND a.BranchCode = c.BranchCode
	WHERE a.Category = 'INV'
		AND a.BTTNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.AmountDb  AS AmountDb, a.AmountCr AS AmountCr
	FROM GLInterface a
	LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo 
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo,a.Amount AS AmountDb, 0 AS AmountCr
	FROM ApBeginBalanceDtl a
	LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN ApBeginBalanceHdr c ON a.CompanyCode = c.CompanyCode 
		AND a.BranchCode = c.BranchCode 
		AND a.DocNo = c.DocNo
	WHERE a.DocNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DocNo AS DocNo, 0 AS AmountDb, a.Amount AS AmountCr
	FROM ApBeginBalanceHdr a
	LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDB, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DocNo AS DocNo, 0 AS AmountDB, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDB, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDB, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 0 AND dtl.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 0 AND b.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'Hutang'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'PUBS'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT  a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'Others'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, a.PaymentAmt AS AmountDb, 0 AS AmountCr
	FROM apTrnBankKasKeluarInvoice a
	LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo 
		AND a.CompanyCode = dtl.CompanyCode 
		AND a.BranchCode = dtl.BranchCode
		AND a.SupplierCode = dtl.SupplierCode
	WHERE a.DocNo = @DocNo AND b.bType = 1 AND dtl.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

INSERT INTO @Result
	SELECT a.DocNo AS DocNo, 0 AS AmountDb, b.Amount AS AmountCr
	FROM apTrnBankKasKeluarHdr a
	INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo 
		AND a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
	WHERE a.DocNo = @DocNo AND a.bType = 1 AND b.BankKasType = 'Return'
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  

    return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetApInquiryInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetApInquiryInvoiceByDocNo]
(
    @CompanyCode		varchar(20),
    @BranchCode			varchar(20),
    @DocNo				varchar(20)
)

returns @Invoice table(
 CompanyCode		varchar(20),
 BranchCode			varchar(20),
 DocNo				varchar(20), 
 DocDate			datetime, 
 GLDate				datetime,
 Amount				numeric(18, 0),
 ReffCode			varchar(20),
 ProfitCenter		varchar(20),
 Status				varchar(20),
 PostingType		varchar(20),
 JournalType		varchar(20),
 DocSource			varchar(20),
 ReffName			varchar(max),
 ProfitCenterCode	varchar(20)
)

begin
	
	/* DEBET - KREDIT NOTE */
	-------------------------
	INSERT INTO @Invoice
    SELECT a.CompanyCode , a.BranchCode, a.DbCrNo AS DocNo, a.DbCrDate AS DocDate, a.GLDate, a.TotalDbCrAmt AS Amount
		, a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'UnPosted' AS Status, 'Invoice' AS PostingType
		, 'NotaDebet' AS JournalType, 'AP' AS DocSource , b.SupplierName AS ReffName, a.ProfitCenterCode 
     FROM apTrnDbCrNoteHdr a
     LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
     LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
     WHERE a.Status = 0 AND bType = 0 AND a.PrintSeq > 0     
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode		
		AND a.DbCrNo = @DocNo	
	UNION ALL	
    SELECT a.CompanyCode, a.BranchCode,a.DbCrNo AS DocNo, a.DbCrDate AS DocDate, a.GLDate, a.TotalDbCrAmt AS Amount
		, a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'UnPosted' AS Status, 'Invoice' AS PostingType
		, 'NotaKredit' AS JournalType, 'AP' AS DocSource, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apTrnDbCrNoteHdr a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.Status = 0 AND bType = 1 AND a.PrintSeq > 0	
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DbCrNo = @DocNo

	/* BTT OTHERS */
	----------------
	INSERT INTO @Invoice
	SELECT a.CompanyCode, a.BranchCode,a.BTTNo AS DocNo, a.BTTDate AS DocDate, a.GLDate, 
		(CASE a.Category WHEN 'PJBS' THEN a.PJBSAmt WHEN 'INV' THEN a.PayableAmt END) AS Amount, a.SupplierCode AS ReffCode
		, c.LookUpValueName AS ProfitCenter, 'UnPosted' AS Status, 'Invoice' AS PostingType, 'Invoice' AS JournalType, 'AP' AS DocSource
		, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apTrnBTTOtherHdr a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.Status = '0' AND a.Category IN('PJBS', 'INV')
		AND a.PrintSeq > 0 AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.BTTNo = @DocNo
	
	/* 3S */
	--------
	INSERT INTO @Invoice
	SELECT DISTINCT a.CompanyCode, a.BranchCode, a.DocNo AS DocNo, a.DocDate AS DocDate, a.DocDate AS GLDate, a.NetAmt AS Amount
		, a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'UnPosted' AS Status, 'Invoice' AS PostingType, 'Purchase' AS JournalType
		, (CASE a.ProfitCenterCode WHEN '000' THEN 'AR' WHEN '100' THEN 'SA' WHEN '200' THEN 'WS' WHEN '300' THEN 'SP' END) AS DocSource
		, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apInterface a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.StatusFlag NOT IN (3, 4) AND a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo

	/* AP BEGIN BALANCE */
	----------------------
	INSERT INTO @Invoice
	SELECT DISTINCT a.CompanyCode, a.BranchCode,a.DocNo AS DocNo, a.DocDate AS DocDate, a.DocDate AS GLDate, a.Amount AS Amount, 
		a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'UnPosted' AS Status, 'Invoice' AS PostingType, 'Purchase' AS JournalType
		, 'AP' AS DocSource, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apBeginBalanceHdr a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.Status = 0 AND a.PrintSeq > 0		
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DocNo = @DocNo

--------------------------------------------- END TYPE = INVOICE --------------------------------------------------------------

	/* BANK KAS KELUAR */
	---------------------
	INSERT INTO @Invoice
	SELECT a.CompanyCode, a.BranchCode, a.DocNo AS DocNo, a.DocDate AS DocDate, a.GLDate, a.TotalAmt AS Amount, a.BankCode  AS ReffCode
		, c.LookUpValueName AS ProfitCenter, 'UnPosted' AS Status, 'Payment' AS PostingType, 'Bank' AS JournalType, 'AP' AS DocSource
		, b.BankName AS ReffName, a.ProfitCenterCode 
	FROM apTrnBankKasKeluarHdr a
	LEFT JOIN gnMstBankCompany b ON a.BankCode = b.BankCode 
		AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.Status IN('0', '1') AND bType = 0 AND a.PrintSeq > 0	
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DocNo = @DocNo
	UNION ALL
	SELECT a.CompanyCode, a.BranchCode, a.DocNo AS DocNo, a.DocDate AS DocDate, a.GLDate, a.TotalAmt AS Amount, a.BankCode  AS ReffCode
		, c.LookUpValueName AS ProfitCenter, 'UnPosted' AS Status, 'Payment' AS PostingType, 'Kas' AS JournalType, 'AP' AS DocSource
		, b.BankName AS ReffName, a.ProfitCenterCode 
	FROM apTrnBankKasKeluarHdr a
	LEFT JOIN gnMstBankCompany b ON a.BankCode = b.BankCode 
		AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.Status IN('0', '1') AND bType = 1 AND a.PrintSeq > 0	
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DocNo = @DocNo


------------------------------------------ END TYPE = PAYMENT --------------------------------------------------------------------

    return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetApInquiryJournalDraft]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetApInquiryJournalDraft]
(
	@CompanyCode  varchar(20),
	@BranchCode   varchar(20),
	@PostingGroup varchar(20),
	@JournalType  varchar(20),
	@DocNo        varchar(20)
)

returns @Journal table(
  JournalNo varchar(20)
, DocNo  varchar(20)
, AccountNo  varchar(50)
, AmountDb  numeric(18, 0)
, AmountCr  numeric(18, 0)
, TypeTrans varchar(50)
, JournalType  varchar(50)
, AccountType varchar(20)
, ApplyTo varchar(150)
)
begin
	if UPPER(@PostingGroup) = 'INVOICE'
	begin
		if UPPER(@Journaltype) = 'NOTADEBET'
		begin
			/***** NOTA DEBET ****/
			INSERT INTO @Journal 
			SELECT '' AS JornalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.TotalDbCrAmt AS AmountDb
				, 0 AS AmountCr
				, 'AP' AS TypeTrans
				, 'NotaDebet' AS JournalType
				, c.AccountType AS AccountType
				, a.Description AS Description
			FROM apTrnDbCrNoteHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode 
				AND a.BranchCode = c.BranchCode			
			WHERE a.Status = 0 AND a.bType = 0 AND a.DbCrNo = @DocNo
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
			UNION ALL
			SELECT '' AS JournalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AS AmountDb
				, a.Amount AS AmountCr
				, 'DEPENDTR' AS TypeTrans
				, 'NotaDebet' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnDbCrNoteDtl a
			INNER JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode			
			WHERE b.Status = 0 AND b.bType = 0 AND a.DbCrNo = @DocNo
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 	
		end
		if UPPER(@Journaltype) = 'NOTAKREDIT'
		begin
			/***** NOTA KEREDIT ****/
			INSERT INTO @Journal
			SELECT '' AS JournalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.Amount AS AmountDb
				, 0 AS AmountCr
				, 'DEPENDTR' AS TypeTrans
				, 'NotaKredit' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnDbCrNoteDtl a
			INNER JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status = 0 AND b.bType = 1
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DbCrNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AS AmountDb
				, a.TotalDbCrAmt AS AmountCr
				, 'AP' AS TypeTrans
				, 'NotaKredit' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnDbCrNoteHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status = 0 AND a.bType = 1
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DbCrNo = @DocNo		
		end
		if UPPER(@JournalType) = 'INVOICE'
		begin
			/***** BTT OTHERS ****/
			INSERT INTO @Journal
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PJBSAmt AS AmountDb
				, 0 AS AmountCr
				, 'EXPENSES' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode			
			WHERE b.Status = '0' AND b.Category = 'PJBS'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, (SELECT ISNULL(AccPiutangOthers, '') FROM fnSystemConfig WHERE CompanyCode = a.CompanyCode 
					AND BranchCode = a.BranchCode) AS AccountNo
				, ABS(a.PayableAmt) AS AmountDb
				, 0 AS AmountCr
				, 'PAYPJBS' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status = '0' AND a.Category = 'PJBS' AND a.PJBSAmt < a.BSAmt
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL			
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnAmt) AS AmountDb
				, 0 AS AmountCr
				, 'TAX IN' AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Status = '0' AND b.Category = 'PJBS' AND a.PPnAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo, d.TaxInAccNo
					, e.AccountType, a.Description
			UNION ALL			
			SELECT  '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnBMAmt) AS AmountDb
				, 0 AS AmountCr
				, 'TAX IN'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Status = '0' AND b.Category = 'PJBS' AND a.PPnBMAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.TaxInAccNo, e.AccountType , a.Description
			UNION ALL			
			SELECT '' AS journalNo
				, a.BTTNo AS DocNo
				, d.WitholdingTaxAccNo AS AccountNo
				, 0 AS AmountDb
				, SUM(a.PPhAmt) AS AmountCr
				, 'TAX OUT'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT WitholdingTaxAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.WitholdingTaxAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Status = '0' AND b.Category = 'PJBS' AND a.PPhAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.WitholdingTaxAccNo, e.AccountType , a.Description
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, (SELECT ISNULL(AccHutangOthers, '') FROM fnSystemConfig WHERE CompanyCode = a.CompanyCode 
					AND BranchCode = a.BranchCode) AS AccountNo
				, 0 AS AmountDb
				, a.PayableAmt AS AmountCr
				, 'AP' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status = '0' AND a.Category = 'PJBS' AND a.PJBSAmt > a.BSAmt
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AmountDb
				, a.BSAmt AS AmountCr
				, 'DOWNPAYMENT' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status = '0' AND a.Category = 'PJBS'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo						
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.DPPAmt AS AmountDb
				, 0 AS AmountCr
				, 'EXPENSES'   AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status = '0' AND b.Category = 'INV'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnAmt) AS AmountDb
				, 0 AS AmoutnCr
				, 'TAX IN'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Status = '0' AND b.Category = 'INV' AND a.PPnAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.TaxInAccNo, e.AccountType , a.Description
			UNION ALL
			SELECT  '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnBMAmt) AS AmountDb
				, 0 AmoutCr
				, 'TAX IN'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description		
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Status = '0' AND b.Category = 'INV' AND a.PPnBMAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.TaxInAccNo, e.AccountType, a.Description
			UNION ALL
			SELECT  '' as JournalNo
				, a.BTTNo AS DocNo
				, d.WitholdingTaxAccNo AS AccountNo
				, 0 as AmountDb
				, SUM(a.PPhAmt) AS AmountCr
				, 'TAX OUT' AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT WitholdingTaxAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.WitholdingTaxAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Status = '0' AND b.Category = 'INV' AND a.PPhAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.WitholdingTaxAccNo, e.AccountType , a.Description
			UNION ALL
			SELECT '' as JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, a.PayableAmt AS AmountCr
				, 'AP' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status = '0' AND a.Category = 'INV'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
		end
		if UPPER (@JournalType) = 'PURCHASE'
		begin
			/***** GL INTERFACE ****/
			INSERT INTO @Journal
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.AmountDb as AmountDb
				, a.AmountCr as AmountCr
				, a.TypeTrans AS TypeTrans
				, 'Purchase' AS JournalType
				, b.AccountType AS AccountType
				, a.ApplyTo AS Description
			FROM GLInterface a
			LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			WHERE a.StatusFlag NOT IN (3,4) 
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo			
		end
	end
	else
	begin
		if UPPER(@JournalType) = 'BANK'
		begin
			/*******BANK KELUAR - HUTANG - PJBS - INV - 3S********/
			INSERT INTO @Journal
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'AP' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description AS Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode AND a.BranchCode = dtl.BranchCode 
				AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 0
				AND dtl.BankKasType = 'Hutang'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AS AmountDb
				, isnull(sum(b.Amount),0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			LEFT JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 0
			AND b.BankKasType = 'Hutang'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '') 			
			-----------------------
			/*******BANK KELUAR - PU/BS ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 AS AmountCr
				, 'DOWNPAYMENT' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 0
			AND dtl.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo =@DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 0
			AND b.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '') 
			/*******BANK KELUAR - Others ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'EXPENSES' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 0
			AND dtl.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 0
			AND b.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
			/*******BANK KELUAR - RETURN********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'HRETURN' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 0
			AND dtl.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 0
			AND b.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
		end
		if UPPER(@JournalType) = ('KAS')
		begin
			/*******KAS KELUAR - HUTANG - PJBS - INV - 3S********/
			INSERT INTO @Journal
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 AS AmountCr
				, 'AP' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 1
			AND dtl.BankKasType = 'Hutang'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 1
			AND b.BankKasType = 'Hutang'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')			
			------------------------
			/*******KAS KELUAR - PU/BS ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'DOWNPAYMENT' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 1
			AND dtl.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 1
			AND b.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
			/*******KAS KELUAR - Others ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 As AmountCr
				, 'EXPENSES' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 1
			AND dtl.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 1
			AND b.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
			/*******KAS KELUAR - RETURN********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'HRETURN' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Status IN('0', '1') AND b.bType = 1
			AND dtl.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 As AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Status IN('0', '1') AND a.bType = 1
			AND b.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
		end
	end

return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetApReInquiryInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetApReInquiryInvoiceByDocNo]
(
    @CompanyCode		varchar(20),
    @BranchCode			varchar(20),
    @DocNo				varchar(20)
)

returns @Invoice table(
 CompanyCode		varchar(20),
 BranchCode			varchar(20),
 DocNo				varchar(20), 
 DocDate			datetime, 
 GLDate				datetime,
 Amount				numeric(18, 0),
 ReffCode			varchar(20),
 ProfitCenter		varchar(20),
 PostingType		varchar(20),
 JournalType		varchar(20),
 DocSource			varchar(20),
 ReffName			varchar(max),
 ProfitCenterCode	varchar(20)
)

begin
	
	/* DEBET - KREDIT NOTE */
	-------------------------
	INSERT INTO @Invoice
    SELECT a.CompanyCode , a.BranchCode, a.DbCrNo AS DocNo, a.DbCrDate AS DocDate, a.GLDate, a.TotalDbCrAmt AS Amount
		, a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'Invoice' AS PostingType
		, 'NotaDebet' AS JournalType, 'AP' AS DocSource , b.SupplierName AS ReffName, a.ProfitCenterCode 
     FROM apTrnDbCrNoteHdr a
     LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
     LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
     WHERE a.bType = 0 AND a.PrintSeq > 0     
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode		
		AND a.DbCrNo = @DocNo	
	UNION ALL	
    SELECT a.CompanyCode, a.BranchCode,a.DbCrNo AS DocNo, a.DbCrDate AS DocDate, a.GLDate, a.TotalDbCrAmt AS Amount
		, a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'Invoice' AS PostingType
		, 'NotaKredit' AS JournalType, 'AP' AS DocSource, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apTrnDbCrNoteHdr a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.bType = 1 AND a.PrintSeq > 0	
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DbCrNo = @DocNo

	/* BTT OTHERS */
	----------------
	INSERT INTO @Invoice
	SELECT a.CompanyCode, a.BranchCode,a.BTTNo AS DocNo, a.BTTDate AS DocDate, a.GLDate, 
		(CASE a.Category WHEN 'PJBS' THEN a.PJBSAmt WHEN 'INV' THEN a.PayableAmt END) AS Amount, a.SupplierCode AS ReffCode
		, c.LookUpValueName AS ProfitCenter, 'Invoice' AS PostingType, 'Invoice' AS JournalType, 'AP' AS DocSource
		, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apTrnBTTOtherHdr a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.Category IN('PJBS', 'INV')
		AND a.PrintSeq > 0 AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.BTTNo = @DocNo
	
	/* 3S */
	--------
	INSERT INTO @Invoice
	SELECT DISTINCT a.CompanyCode, a.BranchCode, a.DocNo AS DocNo, a.DocDate AS DocDate, a.DocDate AS GLDate, a.NetAmt AS Amount
		, a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'Invoice' AS PostingType, 'Purchase' AS JournalType
		, (CASE a.ProfitCenterCode WHEN '000' THEN 'AR' WHEN '100' THEN 'SA' WHEN '200' THEN 'WS' WHEN '300' THEN 'SP' END) AS DocSource
		, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apInterface a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.CompanyCode = @CompanyCode 
		AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo

	/* AP BEGIN BALANCE */
	----------------------
	INSERT INTO @Invoice
	SELECT DISTINCT a.CompanyCode, a.BranchCode,a.DocNo AS DocNo, a.DocDate AS DocDate, a.DocDate AS GLDate, a.Amount AS Amount, 
		a.SupplierCode AS ReffCode, c.LookUpValueName AS ProfitCenter, 'Invoice' AS PostingType, 'Purchase' AS JournalType
		, 'AP' AS DocSource, b.SupplierName AS ReffName, a.ProfitCenterCode 
	FROM apBeginBalanceHdr a
	LEFT JOIN gnMstSupplier b ON a.SupplierCode = b.SupplierCode 
		AND a.CompanyCode = b.CompanyCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.PrintSeq > 0		
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DocNo = @DocNo

--------------------------------------------- END TYPE = INVOICE --------------------------------------------------------------

	/* BANK KAS KELUAR */
	---------------------
	INSERT INTO @Invoice
	SELECT a.CompanyCode, a.BranchCode, a.DocNo AS DocNo, a.DocDate AS DocDate, a.GLDate, a.TotalAmt AS Amount, a.BankCode  AS ReffCode
		, c.LookUpValueName AS ProfitCenter, 'Payment' AS PostingType, 'Bank' AS JournalType, 'AP' AS DocSource
		, b.BankName AS ReffName, a.ProfitCenterCode 
	FROM apTrnBankKasKeluarHdr a
	LEFT JOIN gnMstBankCompany b ON a.BankCode = b.BankCode 
		AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.bType = 0 AND a.PrintSeq > 0	
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DocNo = @DocNo
	UNION ALL
	SELECT a.CompanyCode, a.BranchCode, a.DocNo AS DocNo, a.DocDate AS DocDate, a.GLDate, a.TotalAmt AS Amount, a.BankCode  AS ReffCode
		, c.LookUpValueName AS ProfitCenter, 'Payment' AS PostingType, 'Kas' AS JournalType, 'AP' AS DocSource
		, b.BankName AS ReffName, a.ProfitCenterCode 
	FROM apTrnBankKasKeluarHdr a
	LEFT JOIN gnMstBankCompany b ON a.BankCode = b.BankCode 
		AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
	LEFT JOIN gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
		AND c.LookUpValue = a.ProfitCenterCode AND c.CodeID = 'PFCN'
	WHERE a.bType = 1 AND a.PrintSeq > 0	
		AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
		AND a.DocNo = @DocNo


------------------------------------------ END TYPE = PAYMENT --------------------------------------------------------------------

    return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetApReInquiryJournalDraft]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetApReInquiryJournalDraft]
(
	@CompanyCode  varchar(20),
	@BranchCode   varchar(20),
	@PostingGroup varchar(20),
	@JournalType  varchar(20),
	@DocNo        varchar(20)
)

returns @Journal table(
  JournalNo varchar(20)
, DocNo  varchar(20)
, AccountNo  varchar(50)
, AmountDb  numeric(18, 0)
, AmountCr  numeric(18, 0)
, TypeTrans varchar(50)
, JournalType  varchar(50)
, AccountType varchar(20)
, ApplyTo varchar(150)
)
begin
	if UPPER(@PostingGroup) = 'INVOICE'
	begin
		if UPPER(@Journaltype) = 'NOTADEBET'
		begin
			/***** NOTA DEBET ****/
			INSERT INTO @Journal 
			SELECT '' AS JornalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.TotalDbCrAmt AS AmountDb
				, 0 AS AmountCr
				, 'AP' AS TypeTrans
				, 'NotaDebet' AS JournalType
				, c.AccountType AS AccountType
				, a.Description AS Description
			FROM apTrnDbCrNoteHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode 
				AND a.BranchCode = c.BranchCode			
			WHERE a.bType = 0 AND a.DbCrNo = @DocNo
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
			UNION ALL
			SELECT '' AS JournalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AS AmountDb
				, a.Amount AS AmountCr
				, 'DEPENDTR' AS TypeTrans
				, 'NotaDebet' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnDbCrNoteDtl a
			INNER JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode			
			WHERE b.bType = 0 AND a.DbCrNo = @DocNo
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 	
		end
		if UPPER(@Journaltype) = 'NOTAKREDIT'
		begin
			/***** NOTA KEREDIT ****/
			INSERT INTO @Journal
			SELECT '' AS JournalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.Amount AS AmountDb
				, 0 AS AmountCr
				, 'DEPENDTR' AS TypeTrans
				, 'NotaKredit' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnDbCrNoteDtl a
			INNER JOIN apTrnDbCrNoteHdr b ON a.DbCrNo = b.DbCrNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 1
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DbCrNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.DbCrNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AS AmountDb
				, a.TotalDbCrAmt AS AmountCr
				, 'AP' AS TypeTrans
				, 'NotaKredit' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnDbCrNoteHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 1
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DbCrNo = @DocNo		
		end
		if UPPER(@JournalType) = 'INVOICE'
		begin
			/***** BTT OTHERS ****/
			INSERT INTO @Journal
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PJBSAmt AS AmountDb
				, 0 AS AmountCr
				, 'EXPENSES' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode			
			WHERE b.Category = 'PJBS'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, (SELECT ISNULL(AccPiutangOthers, '') FROM fnSystemConfig WHERE CompanyCode = a.CompanyCode 
					AND BranchCode = a.BranchCode) AS AccountNo
				, ABS(a.PayableAmt) AS AmountDb
				, 0 AS AmountCr
				, 'PAYPJBS' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Category = 'PJBS' AND a.PJBSAmt < a.BSAmt
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL			
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnAmt) AS AmountDb
				, 0 AS AmountCr
				, 'TAX IN' AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Category = 'PJBS' AND a.PPnAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo, d.TaxInAccNo, e.AccountType, a.Description
			UNION ALL			
			SELECT  '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnBMAmt) AS AmountDb
				, 0 AS AmountCr
				, 'TAX IN'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Category = 'PJBS' AND a.PPnBMAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.TaxInAccNo, e.AccountType , a.Description
			UNION ALL			
			SELECT '' AS journalNo
				, a.BTTNo AS DocNo
				, d.WitholdingTaxAccNo AS AccountNo
				, 0 AS AmountDb
				, SUM(a.PPhAmt) AS AmountCr
				, 'TAX OUT'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT WitholdingTaxAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.WitholdingTaxAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Category = 'PJBS' AND a.PPhAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.WitholdingTaxAccNo, e.AccountType , a.Description
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, (SELECT ISNULL(AccHutangOthers, '') FROM fnSystemConfig WHERE CompanyCode = a.CompanyCode 
					AND BranchCode = a.BranchCode) AS AccountNo
				, 0 AS AmountDb
				, a.PayableAmt AS AmountCr
				, 'AP' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Category = 'PJBS' AND a.PJBSAmt > a.BSAmt
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AmountDb
				, a.BSAmt AS AmountCr
				, 'DOWNPAYMENT' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Category = 'PJBS'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo						
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.DPPAmt AS AmountDb
				, 0 AS AmountCr
				, 'EXPENSES'   AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.Category = 'INV'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			UNION ALL
			SELECT '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnAmt) AS AmountDb
				, 0 AS AmoutnCr
				, 'TAX IN'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Category = 'INV' AND a.PPnAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.TaxInAccNo, e.AccountType , a.Description
			UNION ALL
			SELECT  '' AS JournalNo
				, a.BTTNo AS DocNo
				, d.TaxInAccNo AS AccountNo
				, SUM(a.PPnBMAmt) AS AmountDb
				, 0 AmoutCr
				, 'TAX IN'  AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description		
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT TaxInAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.TaxInAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Category = 'INV' AND a.PPnBMAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.TaxInAccNo, e.AccountType, a.Description
			UNION ALL
			SELECT  '' as JournalNo
				, a.BTTNo AS DocNo
				, d.WitholdingTaxAccNo AS AccountNo
				, 0 as AmountDb
				, SUM(a.PPhAmt) AS AmountCr
				, 'TAX OUT' AS TypeTrans
				, 'Invoice' AS JournalType
				, e.AccountType AS AccountType
				, a.Description
			FROM apTrnBTTOtherDtl a
			INNER JOIN apTrnBTTOtherHdr b ON a.BTTNo = b.BTTNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstSupplierProfitCenter c ON b.SupplierCode = c.SupplierCode AND b.CompanyCode = c.CompanyCode 
				AND b.BranchCode = c.BranchCode AND c.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN 
			(
				SELECT DISTINCT WitholdingTaxAccNo, CompanyCode, BranchCode, SupplierClass, ProfitCenterCode FROM gnMstSupplierClass
			) d ON c.SupplierClass = d.SupplierClass AND c.CompanyCode = d.CompanyCode 
				AND c.BranchCode = d.BranchCode AND d.ProfitCenterCode = b.ProfitCenterCode
			LEFT JOIN gnMstAccount e ON d.WitholdingTaxAccNo = e.AccountNo AND a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode
			WHERE b.Category = 'INV' AND a.PPhAmt > 0
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
			GROUP BY a.BTTNo , d.WitholdingTaxAccNo, e.AccountType , a.Description
			UNION ALL
			SELECT '' as JournalNo
				, a.BTTNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, a.PayableAmt AS AmountCr
				, 'AP' AS TypeTrans
				, 'Invoice' AS JournalType
				, c.AccountType AS AccountType
				, a.ReffNo AS Description
			FROM apTrnBTTOtherHdr a
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.Category = 'INV'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.BTTNo = @DocNo
		end
		if UPPER (@JournalType) = 'PURCHASE'
		begin
			/***** GL INTERFACE ****/
			INSERT INTO @Journal
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.AmountDb as AmountDb
				, a.AmountCr as AmountCr
				, a.TypeTrans AS TypeTrans
				, 'Purchase' AS JournalType
				, b.AccountType AS AccountType
				, a.ApplyTo AS Description
			FROM GLInterface a
			LEFT JOIN gnMstAccount b ON a.AccountNo = b.AccountNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo			
		end
	end
	else
	begin
		if UPPER(@JournalType) = 'BANK'
		begin
			/*******BANK KELUAR - HUTANG - PJBS - INV - 3S********/
			INSERT INTO @Journal
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'AP' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description AS Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode AND a.BranchCode = dtl.BranchCode 
				AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 0
				AND dtl.BankKasType = 'Hutang'
				AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 AS AmountDb
				, isnull(sum(b.Amount),0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			LEFT JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 0
			AND b.BankKasType = 'Hutang'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '') 			
			-----------------------
			/*******BANK KELUAR - PU/BS ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 AS AmountCr
				, 'DOWNPAYMENT' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 0
			AND dtl.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo =@DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 0
			AND b.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '') 
			/*******BANK KELUAR - Others ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'EXPENSES' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 0
			AND dtl.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 0
			AND b.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
			/*******BANK KELUAR - RETURN********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'HRETURN' AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 0
			AND dtl.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Bank' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 0
			AND b.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
		end
		if UPPER(@JournalType) = ('KAS')
		begin
			/*******KAS KELUAR - HUTANG - PJBS - INV - 3S********/
			INSERT INTO @Journal
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 AS AmountCr
				, 'AP' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 1
			AND dtl.BankKasType = 'Hutang'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 1
			AND b.BankKasType = 'Hutang'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')			
			------------------------
			/*******KAS KELUAR - PU/BS ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'DOWNPAYMENT' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 1
			AND dtl.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 1
			AND b.BankKasType = 'PUBS'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
			/*******KAS KELUAR - Others ********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 As AmountCr
				, 'EXPENSES' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			INNER JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 1
			AND dtl.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 as AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 1
			AND b.BankKasType = 'Others'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
			/*******KAS KELUAR - RETURN********/
			UNION ALL
			SELECT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, a.PaymentAmt AS AmountDb
				, 0 as AmountCr
				, 'HRETURN' AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, a.Description
			FROM apTrnBankKasKeluarInvoice a
			LEFT JOIN apTrnBankKasKeluarHdr b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			INNER JOIN apTrnBankKasKeluarDtl dtl ON a.DocNo = dtl.DocNo AND a.CompanyCode = dtl.CompanyCode 
				AND a.BranchCode = dtl.BranchCode  AND dtl.SupplierCode = a.SupplierCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE b.bType = 1
			AND dtl.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			UNION ALL
			SELECT DISTINCT '' as JournalNo
				, a.DocNo AS DocNo
				, a.AccountNo AS AccountNo
				, 0 As AmountDb
				, isnull(sum(b.Amount), 0) AS AmountCr
				, 'BANK/CASH'  AS TypeTrans
				, 'Kas' AS JournalType
				, c.AccountType AS AccountType
				, ISNULL(a.Remark, '') AS Description
			FROM apTrnBankKasKeluarHdr a
			INNER JOIN apTrnBankKasKeluarDtl b ON a.DocNo = b.DocNo AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			LEFT JOIN gnMstAccount c ON a.AccountNo = c.AccountNo AND a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
			WHERE a.bType = 1
			AND b.BankKasType = 'Return'
			AND a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode  AND a.DocNo = @DocNo
			GROUP BY a.DocNo, a.AccountNo, c.AccountType , ISNULL(a.Remark, '')
		end
	end

return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryInvoice]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--declare    @CompanyCode  varchar(20)
--declare    @BranchCode   varchar(20)
--declare    @FromDate     datetime
--declare    @EndDate      datetime
--declare    @Status       varchar(20)
--declare    @Type         varchar(20)
--declare    @UserID       varchar(20)
--
--set    @CompanyCode = (select top 1 CompanyCode from gnMstCoProfile)
--set    @BranchCode  = (select top 1 BranchCode from gnMstCoProfile)
--set    @FromDate    = '20101101'
--set    @EndDate     = '20101130'
--set    @Status      = 'UP'
--set    @Type        = 'ND'
--set    @UserID      = 'ws-s'

CREATE function [dbo].[GetArInquiryInvoice]
(
    @CompanyCode varchar(20),
    @BranchCode  varchar(20),
	@FromDate    datetime,
	@EndDate     datetime,
	@Type        varchar(20)
)

returns @Invoice table(
 CompanyCode varchar(20),
 BranchCode varchar(20),
 ProfitCenterCode varchar(20),
 ReffCode varchar(20),
 DocNo varchar(20),
 DocDate datetime,
 GLDate datetime,
 Amount numeric(18, 0),
 DocSource varchar(20),
 JournalType varchar(20)
)

begin
	------------------------------------------------------------------------------------
	-- DN
	------------------------------------------------------------------------------------
	if upper(@Type) = 'ND'
	begin
		insert into @Invoice
		select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode
			 , a.DbCrNo as DocNo, a.DbCrDate as DocDate, a.GLDate, a.TotalDbCrAmt
			 , 'AR', 'NotaDebet'
		  from arTrnDbCrNoteHdr a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and convert(varchar, a.DbCrDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.bType = 0
		   and a.PrintSeq > 0
		   and a.Status = 0
	end
	------------------------------------------------------------------------------------
	-- CN
	------------------------------------------------------------------------------------
	if upper(@Type) = 'NK'
	begin
		insert into @Invoice
		select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode
			 , a.DbCrNo as DocNo, a.DbCrDate as DocDate, a.GLDate, a.TotalDbCrAmt
			 , 'AR', 'NotaKredit'
		  from arTrnDbCrNoteHdr a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and convert(varchar, a.DbCrDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.bType = 1
		   and a.PrintSeq > 0
		   and a.Status = 0
	end
	------------------------------------------------------------------------------------
	-- INVOICE AR
	------------------------------------------------------------------------------------
	if upper(@Type) = ('INV')
	begin
		insert into @Invoice
		select a.CompanyCode, a.BranchCode, '000' ProfitCenterCode, a.CustomerCode
			 , a.InvoiceNo as DocNo, a.InvoiceDate DocDate, a.GLDate, sum(b.GrandTotalAmt)
			 , 'AR', 'Invoice'
		  from arTrnInvoiceHdr a, arTrnInvoiceDtl b
		 where b.CompanyCode = a.CompanyCode
		   and b.BranchCode = a.BranchCode
		   and b.InvoiceNo = a.InvoiceNo
		   and a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and convert(varchar, a.InvoiceDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.PrintSeq > 0
		   and a.Status = 0
	     group by a.CompanyCode, a.BranchCode, a.CustomerCode, a.InvoiceNo, a.InvoiceDate, a.GLDate
		union all
		select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode, a.DocNo, a.DocDate
			 , a.DocDate as GLDate, a.Amount, 'AR', 'Invoice'
		  from ArBeginBalanceHdr a
		 where 1 = 1
		   and a.CompanyCode = @CompanyCode 
		   and a.BranchCode = @BranchCode 
		   and convert (varchar, a.DocDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.PrintSeq > 0
		   and a.Status = '0' 
	end
	------------------------------------------------------------------------------------
	-- INVOICE 3S
	------------------------------------------------------------------------------------
	if upper(@Type) = ('3S')
	begin
		insert into @Invoice
		select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode
			 , a.DocNo, a.DocDate, a.DocDate, a.NettAmt as Amount
			 , case a.ProfitCenterCode when '000' then 'AR' when '100' then 'SA' when '200' then 'WS' when '300' then 'SP' end
			 , 'Invoice'
		  from arInterface a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and convert(varchar, a.DocDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.StatusFlag not in(3, 4)
	end
	------------------------------------------------------------------------------------
	-- RETURN
	------------------------------------------------------------------------------------
	if upper(@Type) = ('RTR')
	begin
		insert into @Invoice
		select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode
			 , a.DocNo, a.DocDate, a.GLDate, a.TotalRetur as Amount
			 , 'AR', 'Return'
		  from arTrnReturnHdr a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and convert(varchar, a.DocDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.PrintSeq > 0
		   and a.Status = 0
	end
	------------------------------------------------------------------------------------
	-- BNK & KAS
	------------------------------------------------------------------------------------
	if upper(@Type) in ('BNK', 'KAS')
	begin
		insert into @Invoice
		select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.BankCode
			 , a.DocNo, a.DocDate, a.GLDate, a.TotalAmt as Amount
			 , 'AR', case upper(@Type) when 'BNK' then 'Bank' else 'Kas' end
		  from arTrnBankKasTerimaHdr a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and convert(varchar, a.DocDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.bType = (case when upper(@Type) = 'BNK' then '0' else '1' end)
		   and a.Status = '1' 
		   and a.PrintSeq > 0 		   
	end
	------------------------------------------------------------------------------------
	-- GIRO CEK TERIMA
	------------------------------------------------------------------------------------
	if upper(@Type) in ('GC')
	begin
		insert into @Invoice
		select a.CompanyCode, a.BranchCode, '000', a.BankCode
			 , a.DocNo, a.DocDate, a.GLDate, a.TotalGiroCek as Amount
			 , 'AR', 'Giro_Cek'
		  from arTrnGiroCekCairHdr a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and convert(varchar, a.DocDate, 112)
			   between convert(varchar, @FromDate, 112) and convert(varchar, @EndDate, 112)
		   and a.Status = 5 
		   and a.TotalGiroCek > 0
		   and a.PrintSeq > 0 
	end
	------------------------------------------------------------------------------------
	-- ALL
	------------------------------------------------------------------------------------
	if upper(@Type) in ('ALL-INV')
	begin
		insert into @Invoice
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, 'ND')  union all
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, 'NK')  union all
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, 'INV') union all
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, '3S')  union all
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, 'RTR')
	end
	if upper(@Type) in ('ALL-RCV')
	begin
		insert into @Invoice
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, 'BNK') union all
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, 'KAS') union all
		select * from GetArInquiryInvoice(@CompanyCode, @BranchCode, @FromDate, @EndDate, 'GC')
	end
    return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryInvoiceByDocNo]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--declare    @CompanyCode  varchar(20)
--declare    @BranchCode   varchar(20)
--declare    @DocNo        varchar(20)
--declare    @UserID       varchar(20)
--
--set    @CompanyCode = (select top 1 CompanyCode from gnMstCoProfile)
--set    @BranchCode  = (select top 1 BranchCode from gnMstCoProfile)
--set    @DocNo       = 'GCT/10/001952'
--set    @UserID      = 'ws-s'

create function [dbo].[GetArInquiryInvoiceByDocNo]
(
    @CompanyCode varchar(20),
    @BranchCode  varchar(20),
    @DocNo       varchar(20)
)

returns @Invoice table(
 CompanyCode varchar(20),
 BranchCode varchar(20),
 ProfitCenterCode varchar(20),
 CustomerCode varchar(20),
 ReffCode varchar(20),
 DocNo varchar(20),
 DocDate datetime,
 GLDate datetime,
 PostingGroup varchar(20),
 DocSource varchar(20),
 JournalType varchar(20),
 RecType varchar(20),
 Amount numeric(18, 0),
 ReffNo varchar(50),
 ReffDate datetime,
 AccountNo varchar(90),
 DueDate datetime,
 SalesCode varchar(20),
 LeasingCode varchar(20)
)

begin
    ------------------------------------------------------------------------------------
	-- DN & CN
    ------------------------------------------------------------------------------------
    insert into @Invoice
    select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode, a.CustomerCode
         , a.DbCrNo as DocNo, a.DbCrDate as DocDate, a.GLDate
		 , '0', 'AR', 'NotaDebet', 'D' as RecType, b.Amount
         , b.InvoiceNo RefNo, b.InvoiceDate RefDate
		 , b.AccountNo, b.InvoiceDueDate, '', ''
      from arTrnDbCrNoteHdr a, arTrnDbCrNoteDtl b
     where b.CompanyCode = a.CompanyCode
       and b.BranchCode = a.BranchCode
       and b.DbCrNo = a.DbCrNo
       and a.CompanyCode = @CompanyCode
       and a.BranchCode = @BranchCode
       and a.DbCrNo = @DocNo
       and a.bType = 0
    union all
    select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode, a.CustomerCode
         , a.DbCrNo as DocNo, a.DbCrDate as DocDate, a.GLDate
		 , '0', 'AR', 'NotaKredit', 'K' as RecType, b.Amount
         , b.InvoiceNo RefNo, b.InvoiceDate RefDate
		 , b.AccountNo, b.InvoiceDueDate, '', ''
      from arTrnDbCrNoteHdr a, arTrnDbCrNoteDtl b
     where b.CompanyCode = a.CompanyCode
       and b.BranchCode = a.BranchCode
       and b.DbCrNo = a.DbCrNo
       and a.CompanyCode = @CompanyCode
       and a.BranchCode = @BranchCode
       and a.DbCrNo = @DocNo
       and a.bType = 1

    ------------------------------------------------------------------------------------
	-- INVOICE AR
    ------------------------------------------------------------------------------------
    insert into @Invoice
    select a.CompanyCode, a.BranchCode, '000' ProfitCenterCode, a.CustomerCode, a.CustomerCode
         , a.InvoiceNo as DocNo, a.InvoiceDate DocDate, a.GLDate
		 , '0', 'AR', 'Invoice', 'D' as RecType, a.ReceivableAmt
         , '' as RefNo, null as RefDate
		 , a.AccountNo, a.DueDate, '', ''
      from arTrnInvoiceHdr a
     where a.CompanyCode = @CompanyCode
       and a.BranchCode = @BranchCode
       and a.InvoiceNo = @DocNo

    ------------------------------------------------------------------------------------
	-- INVOICE 3S
    ------------------------------------------------------------------------------------
    insert into @Invoice
    select a.CompanyCode, a.BranchCode, a.ProfitCenterCode, a.CustomerCode, a.CustomerCode
         , a.DocNo, a.DocDate, a.DocDate, '0'
		 , case a.ProfitCenterCode when '000' then 'AR' when '100' then 'SA' when '200' then 'WS' when '300' then 'SP' end
		 , 'Invoice', 'D' as RecType, a.NettAmt as Amount
         , '' as RefNo, null as RefDate
		 , a.AccountNo, a.DueDate, a.SalesCode, a.LeasingCode
      from arInterface a
     where a.CompanyCode = @CompanyCode
       and a.BranchCode = @BranchCode
       and a.DocNo = @DocNo

    ------------------------------------------------------------------------------------
	-- BNK & KAS
    ------------------------------------------------------------------------------------
    insert into @Invoice
    select a.CompanyCode, a.BranchCode, b.ProfitCenterCode, b.CustomerCode, a.BankCode
         , a.DocNo, a.DocDate, a.GLDate, '1', 'AR'
		 , (case when bType = '0' then 'Bank' else 'Kas' end)
		 , 'K' as RecType, b.PaymentAmt as Amount
         , b.InvoiceNo as ReffNo, b.InvoiceDate as ReffDate
		 , b.AccountNo, b.DueDate, '', ''
      from arTrnBankKasTerimaHdr a, arTrnBankKasTerimaInvoice b
	 where b.CompanyCode = a.CompanyCode
	   and b.BranchCode = a.BranchCode
	   and b.DocNo = a.DocNo
       and b.BankKasType = 'Piutang'
       and a.CompanyCode = @CompanyCode
       and a.BranchCode = @BranchCode
       and a.DocNo = @DocNo

    ------------------------------------------------------------------------------------
	-- GIRO CEK TERIMA
    ------------------------------------------------------------------------------------
    insert into @Invoice
	select a.CompanyCode, a.BranchCode, '000', a.BankCode, a.BankCode
		 , a.DocNo, a.DocDate, a.GLDate, '1', 'AR'
		 , 'Giro_Cek', 'K' as RecType, a.TotalGiroCek as Amount
		 , '' as ReffNo, null as ReffDate
		 , a.AccountNo, null, '', ''
	  from arTrnGiroCekCairHdr a
	 where a.CompanyCode = @CompanyCode
       and a.BranchCode = @BranchCode
       and a.DocNo = @DocNo

    return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryJournalDraft]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetArInquiryJournalDraft]
(
	@CompanyCode  varchar(20),
	@BranchCode   varchar(20),
	@PostingGroup varchar(20),
	@JournalType  varchar(20),
	@DocNo        varchar(20)
)

returns @Journal table(
  JournalNo varchar(20)
, AccDescription  varchar(max)
, DocNo  varchar(20)
, AccountNo  varchar(50)
, AmountDB  numeric(18, 0)
, AmountCr  numeric(18, 0)
, JournalType  varchar(50)
, TypeTrans varchar(50)
, ApplyTo varchar(150)
)

begin
	if @PostingGroup = '0'
	begin
		if upper(@JournalType) = 'NOTADEBET'
		begin
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DbCrNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , 0 as AmountDB 
				 , isnull(sum(a.Amount),0) as AmountCr 
				 , 'NotaDebet' as JournalType 
				 , 'AP', b.Description
			  from arTrnDbCrNoteDtl a 
			 inner join arTrnDbCrNoteHdr b on a.DbCrNo = b.DbCrNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DbCrNo = @DocNo 
			   and b.bType = 0 
			group by a.DbCrNo, a.InvoiceNo, a.AccountNo, c.Description, c.AccountType, b.Description
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DbCrNo as DocNo 
				 , a.AccountNoInv as AccountNo 
				 , isnull(sum(a.Amount),0) as AmountDb 
				 , 0 as AmountCR 
				 , 'NotaDebet' as JournalType 
				 , 'DEPENDTR', b.Description
			  from arTrnDbCrNoteDtl a 
			 inner join arTrnDbCrNoteHdr b on a.DbCrNo = b.DbCrNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNoInv = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode
			   and a.DbCrNo = @DocNo 
			   and b.bType = 0 
			group by a.DbCrNo, a.InvoiceNo, a.AccountNoInv, c.Description, c.AccountType, b.Description
		end
		if upper(@JournalType) = 'NOTAKREDIT'
		begin 
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DbCrNo as DocNo 
				 , a.AccountNoInv as AccountNo 
				 , 0 as AmountDB 
				 , isnull(sum(a.Amount),0) as AmountCr 
				 , 'NotaKredit' as JournalType 
				 , 'DEPENDTR', a.Description
			  from arTrnDbCrNoteDtl a 
			 inner join arTrnDbCrNoteHdr b on a.DbCrNo = b.DbCrNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNoInv = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DbCrNo = @DocNo 
			   and b.bType = 1 
			group by a.DbCrNo, a.InvoiceNo, a.AccountNoInv, c.Description, c.AccountType, a.Description
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DbCrNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , isnull(sum(a.Amount),0) as AmountDb 
				 , 0 as AmountCr 
				 , 'NotaKredit' as JournalType 
				 , 'AR', a.Description
			  from arTrnDbCrNoteDtl a 
			 inner join arTrnDbCrNoteHdr b on a.DbCrNo = b.DbCrNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode
			   and a.DbCrNo = @DocNo 
			   and b.bType = 1 
			group by a.DbCrNo, a.InvoiceNo, a.AccountNo, c.Description, c.AccountType, a.Description
		end 
		if upper(@JournalType) = 'INVOICE'
		begin
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.InvoiceNo as DocNo 
				 , a.AccountNo as AccountNo 
    			 , sum(a.ReceivableAmt) as AmountDb   
				 , 0 as AmountCr 
				 , 'Invoice' as JournalType 
				 , 'AR',a.ReffNo
			  from arTrnInvoiceHdr a 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.InvoiceNo = @DocNo 
   			 group by a.InvoiceNo, a.AccountNo, c.Description, c.AccountType, a.ReffNo  
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.InvoiceNo as DocNo 
				 , a.DiscAccountNo as AccountNo 
   				 , sum(a.DiscAmt) as AmountDb   
				 , 0 as AmountCr 
				 , 'Invoice' as JournalType 
				 , 'DISC1', a.Description
			  from arTrnInvoiceDtl a 
			  left join arTrnInvoiceHdr b on a.InvoiceNo = b.InvoiceNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.DiscAccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.InvoiceNo = @DocNo 
			   and a.DiscAmt > 0 
  			 group by c.Description, a.InvoiceNo, a.DiscAccountNo, a.Description  
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.InvoiceNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , 0 as AmountDb 
    			 , sum(a.SubAmt) as AmountCr   
				 , 'Invoice' as JournalType 
				 , 'DEPENDTR', a.Description
			  from arTrnInvoiceDtl a 
			  left join arTrnInvoiceHdr b on a.InvoiceNo = b.InvoiceNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.InvoiceNo = @DocNo 
  			 group by c.Description, a.InvoiceNo, a.AccountNo, a.Description  
			union all
			select '' as JournalNo 
				 , e.Description as AccDescription 
				 , a.InvoiceNo as DocNo 
				 , d.TaxOutAccNo as AccountNo 
				 , 0 as AmountDb 
    			 , sum(a.PPnAmt) as AmountCr   
				 , 'Invoice' as JournalType 
				 , 'PPN', a.Description
			  from arTrnInvoiceDtl a 
			  left join arTrnInvoiceHdr b on a.InvoiceNo = b.InvoiceNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstCustomerProfitCenter c on b.CustomerCode = c.CustomerCode 
			   and b.CompanyCode = c.CompanyCode 
			   and b.BranchCode = c.BranchCode 
			   and '000' = c.ProfitCenterCode 
			  left join gnMstCustomerClass d on c.CustomerClass = d.CustomerClass 
			   and c.CompanyCode = d.CompanyCode 
			   and c.BranchCode = d.BranchCode 
			  left join gnMstAccount e on d.TaxOutAccNo = e.AccountNo 
			   and a.CompanyCode = e.CompanyCode 
			   and a.BranchCode = e.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.InvoiceNo = @DocNo 
			   and a.PPnAmt > 0 
 			  group by e.Description, a.InvoiceNo, d.TaxOutAccNo, a.Description  
			union 
			select '' as JournalNo 
				 , e.Description as AccDescription 
				 , a.InvoiceNo as DocNo 
				 , d.LuxuryTaxAccNo as AccountNo 
				 , 0 as AmountDb 
  				 , sum(a.PPnBMAmt) as AmountCr   
				 , 'Invoice' as JournalType 
				 , 'TAX OUT', a.Description
			  from arTrnInvoiceDtl a 
			  left join arTrnInvoiceHdr b on a.InvoiceNo = b.InvoiceNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstCustomerProfitCenter c on b.CustomerCode = c.CustomerCode 
			   and b.CompanyCode = c.CompanyCode 
			   and b.BranchCode = c.BranchCode 
			   and '000' = c.ProfitCenterCode 
			  left join gnMstCustomerClass d on c.CustomerClass = d.CustomerClass 
			   and c.CompanyCode = d.CompanyCode 
			   and c.BranchCode = d.BranchCode 
			  left join gnMstAccount e on d.LuxuryTaxAccNo = e.AccountNo 
			   and a.CompanyCode = e.CompanyCode 
			   and a.BranchCode = e.BranchCode 
			 where a.PPnBMAmt > 0 
			   and a.InvoiceNo = @DocNo 
			   and a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
  			 group by e.Description, a.InvoiceNo, d.LuxuryTaxAccNo, a.Description  
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.ReceiptNo as DocNo 
				 , a.AccountNoDb as AccountNo 
				 , a.ReceiptAmtCr as AmountDb 
				 , 0 as AmountCr 
				 , 'Invoice' as JournalType 
				 , 'RECEIPT', convert(varchar, a.Description)
			  from arTrnReceipt a 
			  left join gnMstAccount c on a.AccountNoDb = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.ReceiptType = 'DP' 
			   and a.ReceiptNo = @DocNo 
			   and a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.ReceiptNo as DocNo 
				 , a.AccountNoCr as AccountNo 
				 , 0 as AmountDb 
				 , a.NetAmtCr as AmountCr 
				 , 'Invoice' as JournalType 
				 , 'DEPENDTR', convert(varchar, a.Description)
			  from arTrnReceipt a 
			  left join gnMstAccount c on a.AccountNoCr = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.ReceiptNo = @DocNo 
			   and a.ReceiptType = 'DP' 
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.ReceiptNo as DocNo 
				 , d.TaxOutAccNo as AccountNo 
				 , 0 as AmountDb 
				 , a.PPnAmtCr as AmountCr 
				 , 'Invoice' as JournalType 
				 , 'PPN', convert(varchar, a.Description)
			  from arTrnReceipt a 
			  left join gnMstCustomerProfitCenter b on a.CustomerCode = b.CustomerCode 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			   and '000' = b.ProfitCenterCode 
			  left join gnMstCustomerClass d on b.CustomerClass = d.CustomerClass 
			   and b.CompanyCode = d.CompanyCode 
			   and b.BranchCode = d.BranchCode 
			  left join gnMstAccount c on d.TaxOutAccNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.ReceiptType = 'DP' 
			   and a.ReceiptNo = @DocNo 
			   and a.PPnAmtCr > 0 
		end
		if upper(@JournalType) in ('INVOICE','INVOICE3S','RETURN3S','BPS','BEGINBALANCE')
		begin
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , a.AmountDb 
				 , a.AmountCr 
				 , a.TypeJournal as JournalType 
				 , a.TypeTrans, a.ApplyTo
			  from GLInterface a 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
		end
		if upper(@JournalType) = 'RETURN'
		begin
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , a.ReturAmt as AmountDb 
				 , 0 as AmountCr 
				 , 'Return' as JournalType 
				 , 'RETURN',''
			  from arTrnReturnSubDtl a 
			  left join arTrnReturnHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.DocNo = @DocNo 
			   and a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , 0 as AmountDb 
				 , a.TotalRetur as AmountCr 
				 , 'Return' as JournalType 
				 , 'HRETURN',''
			  from arTrnReturnHdr a 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode
			   and a.DocNo = @DocNo 
		end
	end
	else if @PostingGroup = '1'
	begin
		if upper(@JournalType) = 'BANK'
		begin
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
   				 , sum(a.ReceivAmt) as AmountDb   
				 , 0 as AmountCr 
				 , 'Bank' as JournalType 
				 , 'BANK/CASH',''
			  from arTrnBankKasTerimaHdr a 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and a.bType = 0 
  			 group by c.Description, a.DocNo, a.AccountNo  
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , 0 as AmountDb 
   				 , sum(a.PaymentAmt) as AmountCr   
				 , 'Bank' as JournalType 
				 , 'DEPENDTR',''
			  from arTrnBankKasTerimaInvoice a 
			 inner join arTrnBankKasTerimaHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and b.bType = 0 
			 group by c.Description, a.DocNo, a.AccountNo  
			union all
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , b.AccUnderPayment as AccountNo 
			     , sum(abs(a.BalanceAmt)) as AmountDb   
				 , 0 as AmountCr 
				 , 'Bank' as JournalType 
				 , 'UNDER PAYMENT',''
			  from arTrnBankKasTerimaHdr a 
			  left join FnSystemConfig b on b.CompanyCode = a.CompanyCode 
			   and b.BranchCode = a.BranchCode 
			  left join gnMstAccount c on b.AccUnderPayment = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and a.bType = 0 
			   and abs(a.BalanceAmt)> 0 
		     group by c.Description, a.DocNo, b.AccUnderPayment  
		end
		else if upper(@JournalType) = 'KAS'
		begin 
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
			     , sum(a.ReceivAmt) as AmountDb   
				 , 0 as AmountCr 
				 , 'Kas' as JournalType 
				 , 'BANK/CASH',''
			  from arTrnBankKasTerimaHdr a 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and a.bType = 1 
		     group by c.Description, a.DocNo, a.AccountNo  
		     union all  
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
				 , 0 as AmountDb 
			     , sum(a.PaymentAmt) as AmountCr   
				 , 'Kas' as JournalType 
				 , 'DEPENDTR',''
			  from arTrnBankKasTerimaInvoice a 
			  left join arTrnBankKasTerimaHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and b.bType = 1 
			 group by c.Description, a.DocNo, a.AccountNo  
		     union all  
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , b.AccUnderPayment as AccountNo 
			     , sum(abs(a.BalanceAmt)) as AmountDb   
				 , 0 as AmountCr 
				 , 'Kas' as JournalType 
				 , 'UNDER PAYMENT',''
			  from arTrnBankKasTerimaHdr a 
			  left join FnSystemConfig b on b.CompanyCode = a.CompanyCode 
			   and b.BranchCode = a.BranchCode 
			  left join gnMstAccount c on b.AccUnderPayment = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and a.bType = 1 
			   and abs(a.BalanceAmt)> 0 
		     group by c.Description, a.DocNo, b.AccUnderPayment  
		end
		if upper(@JournalType) = 'GIRO_CEK'
		begin
			insert into @Journal
			select '' as JournalNo 
				 , c.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , a.AccountNo as AccountNo 
			     , sum(a.TotalGiroCek) as AmountDb   
				 , 0 as AmountCr 
				 , 'Giro_Cek' as JournalType 
				 , 'BANK/CASH',''
			  from arTrnGiroCekCairHdr a 
			  left join gnMstAccount c on a.AccountNo = c.AccountNo 
			   and a.CompanyCode = c.CompanyCode 
			   and a.BranchCode = c.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.PrintSeq > 0 
			   and a.DocNo = @DocNo 
			 group by c.Description, a.DocNo, a.AccountNo  
		     union all  
			select '' as JournalNo 
				 , e.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , c.OnAccountNo as AccountNo 
			     , sum(c.OnAccountPrevAmt) as AmountDb   
				 , 0 as AmountCr 
				 , 'Giro_Cek' as JournalType 
				 , '',''
			  from arTrnGiroCekCairDtl a 
			  left join arTrnGiroCekCairHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join arTrnGiroCekTerimaDtl c on a.GiroCekNo = c.GiroCekNo 
			   and a.BankCodeCust = c.BankCode 
			   and a.CompanyCode = c.CompanyCode 
			   and c.BranchCode = b.BranchCode 
			  left join gnMstAccount e on e.AccountNo = c.OnAccountNo 
			   and a.CompanyCode = e.CompanyCode 
			   and a.BranchCode = e.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and c.OnAccountPrevAmt > 0 
		     group by e.Description, a.DocNo, c.OnAccountNo  
		     union all  
			select distinct '' as JournalNo 
				 , e.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , d.AccountNo as AccountNo 
				 , 0 as AmountDb 
				 , sum(d.PaymentAmt) as AmountCr 
				 , 'Giro_Cek' as JournalType 
				 , 'DEPENDTR',''
			  from arTrnGiroCekCairDtl a 
			  left join arTrnGiroCekCairHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join arTrnGiroCekTerimaDtl c on a.GiroCekNo = c.GiroCekNo 
			   and a.BankCodeCust = c.BankCode 
			   and a.CompanyCode = c.CompanyCode 
			   and c.BranchCode = b.BranchCode 
			 inner join arTrnGiroCekTerimaInvoice d on c.DocNo = d.DocNo 
			   and c.BankCode = d.BankCode 
			   and a.CompanyCode = d.CompanyCode 
			   and a.BranchCode = d.BranchCode 
			  left join gnMstAccount e on d.AccountNo = e.AccountNo 
			   and a.CompanyCode = e.CompanyCode 
			   and a.BranchCode = e.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
		  	 group by e.Description, a.DocNo, d.AccountNo 
		     union all  
			select '' as JournalNo 
				 , e.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , c.OnAccountNo as AccountNo 
				 , 0 as AmountDb 
			     , sum(c.OnAccountAmt) as AmountCr   
				 , 'Giro_Cek' as JournalType 
				 , 'DEPENDTR',''
			  from arTrnGiroCekCairDtl a 
			  left join arTrnGiroCekCairHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join arTrnGiroCekTerimaDtl c on a.GiroCekNo = c.GiroCekNo 
			   and a.BankCodeCust = c.BankCode 
			   and a.CompanyCode = c.CompanyCode 
			   and c.BranchCode = b.BranchCode 
			  left join gnMstAccount e on c.OnAccountNo = e.AccountNo 
			   and a.CompanyCode = e.CompanyCode 
			   and a.BranchCode = e.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and c.OnAccountAmt > 0 
			   and (isnull(c.OnAccountNo ,'') <> '' or c.OnAccountNo <> '')
			 group by e.Description, a.DocNo, c.OnAccountNo  
			 union all  
			select '' as JournalNo 
				 , e.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , c.WriteOffAccountNo as AccountNo 
				 , 0 as AmountDb 
				 ,(sum(c.Amount)+ sum(c.OnAccountPrevAmt)) - sum(c.Payment) as AmountCr 
				 , 'Giro_Cek' as JournalType 
				 , 'WRITE OFF',''
			  from arTrnGiroCekCairDtl a 
			  left join arTrnGiroCekCairHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join arTrnGiroCekTerimaDtl c on a.GiroCekNo = c.GiroCekNo 
			   and a.BankCodeCust = c.BankCode 
			   and a.CompanyCode = c.CompanyCode 
			   and c.BranchCode = b.BranchCode 
			  left join gnMstAccount e on c.WriteOffAccountNo = e.AccountNo 
			   and a.CompanyCode = e.CompanyCode 
			   and a.BranchCode = e.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode 
			   and a.DocNo = @DocNo 
			   and (c.Amount + c.OnAccountPrevAmt) - c.Payment > 0 
			   and (isnull(c.WriteOffAccountNo ,'') <> '' or c.WriteOffAccountNo <> '')
			 group by e.Description, a.DocNo, c.WriteOffAccountNo 
		     union all  
			select '' as JournalNo 
				 , e.Description as AccDescription 
				 , a.DocNo as DocNo 
				 , d.AccUnderPayment as AccountNo 
			     , sum(abs(( c.Amount + c.OnAccountPrevAmt)- c.Payment)) as AmountDb   
				 , 0 as AmountCr 
				 , 'Giro_Cek' as JournalType 
				 , 'UNDER PAYMENT',''
			  from arTrnGiroCekCairDtl a 
			  left join arTrnGiroCekCairHdr b on a.DocNo = b.DocNo 
			   and a.CompanyCode = b.CompanyCode 
			   and a.BranchCode = b.BranchCode 
			  left join arTrnGiroCekTerimaDtl c on a.GiroCekNo = c.GiroCekNo 
			   and a.BankCodeCust = c.BankCode 
			   and a.CompanyCode = c.CompanyCode 
			   and c.BranchCode = b.BranchCode 
			  left join FnSystemConfig d on d.CompanyCode = a.CompanyCode 
			   and d.BranchCode = a.BranchCode 
			  left join gnMstAccount e on d.AccUnderPayment = e.AccountNo 
			   and a.CompanyCode = e.CompanyCode 
			   and a.BranchCode = e.BranchCode 
			 where a.CompanyCode = @CompanyCode 
			   and a.BranchCode = @BranchCode
			   and a.DocNo = @DocNo 
			   and (c.Amount + c.OnAccountPrevAmt) - c.Payment < 0 
		     group by e.Description, a.DocNo, d.AccUnderPayment  
		end
	end

	return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetArInquiryPosting]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetArInquiryPosting]
(
	@CompanyCode  varchar(20),
	@BranchCode   varchar(20),
	@ProfitCenterCode varchar(20),
	@PostingGroup varchar(20),
	@DateFrom     datetime,
	@DateTo       datetime,
	@Type         varchar(20) = 'ALL',
	@Status       varchar(20) = 'UP'
)

returns @Result table(
  IsSelected bit
, DocNo varchar(20)
, DocDate datetime
, GLDate datetime
, Amount numeric(18,0)
, ReffCode varchar(20)
, ProfitCenter varchar(20)
, Status varchar(20)
, PostingType varchar(20)
, JournalType varchar(20)
, DocSource varchar(20)
, ReffName varchar(100)
, ProfitCenterCode varchar(20)
)

begin
	declare @t_pcenter table (ProfitCenterCode varchar(50))
	if (rtrim(@ProfitCenterCode) != '000') insert into @t_pcenter values (@ProfitCenterCode)
	else insert into @t_pcenter select LookUpValue from gnMstLookupDtl where CodeID = 'PFCN'

	if upper(@Status) = 'UP'
	begin
		if upper(@PostingGroup) = 'INVOICE'
		begin
			if upper(@Type) = 'ALL' set @Type = 'ALL-INV'
			if @ProfitCenterCode = '000'
			begin
				insert into @Result
				select convert(bit, 0) IsSelected
					 , a.DocNo, a.DocDate, a.GLDate, a.Amount, a.ReffCode
					 , b.LookUpValueName ProfitCenter
					 , 'UnPosted' as Status
					 , 'Invoice' as PostingType
					 , a.JournalType, a.DocSource
					 , c.CustomerName ReffName
					 , a.ProfitCenterCode
				  from GetArInquiryInvoice(@CompanyCode,@BranchCode,@DateFrom,@DateTo,@Type) a
				  left join gnMstLookUpDtl b
					on b.CompanyCode = a.CompanyCode 
				   and b.LookUpValue = a.ProfitCenterCode
				   and b.CodeID = 'PFCN' 
				  left join gnMstCustomer c
					on c.CustomerCode = a.ReffCode 
				   and c.CompanyCode = a.CompanyCode 
			end
			else
			begin
				insert into @Result
				select convert(bit, 0) IsSelected
					 , a.DocNo, a.DocDate, a.GLDate, a.Amount, a.ReffCode
					 , b.LookUpValueName ProfitCenter
					 , 'UnPosted' as Status
					 , 'Invoice' as PostingType
					 , a.JournalType, a.DocSource
					 , c.CustomerName ReffName
					 , a.ProfitCenterCode
				  from GetArInquiryInvoice(@CompanyCode,@BranchCode,@DateFrom,@DateTo,@Type) a
				  left join gnMstLookUpDtl b
					on b.CompanyCode = a.CompanyCode 
				   and b.LookUpValue = a.ProfitCenterCode
				   and b.CodeID = 'PFCN' 
				  left join gnMstCustomer c
					on c.CustomerCode = a.ReffCode 
				   and c.CompanyCode = a.CompanyCode 
				 where a.ProfitCenterCode = @ProfitCenterCode
			end
		end
		else
		begin
			if upper(@Type) = 'ALL' set @Type = 'ALL-RCV'
			if @ProfitCenterCode = '000'
			begin
				insert into @Result
				select convert(bit, 0) IsSelected
					 , a.DocNo, a.DocDate, a.GLDate, a.Amount, a.ReffCode
					 , b.LookUpValueName ProfitCenter
					 , 'UnPosted' as Status
					 , 'Receiving' as PostingType
					 , a.JournalType, a.DocSource
					 , c.BankName ReffName
					 , a.ProfitCenterCode
				  from GetArInquiryInvoice(@CompanyCode,@BranchCode,@DateFrom,@DateTo,@Type) a
				  left join gnMstLookUpDtl b
					on b.CompanyCode = a.CompanyCode 
				   and b.LookUpValue = a.ProfitCenterCode
				   and b.CodeID = 'PFCN' 
				  left join gnMstBankCompany c
					on c.BankCode = a.ReffCode 
				   and c.CompanyCode = a.CompanyCode 
				   and c.BranchCode = a.BranchCode 
			end
			else
			begin
				insert into @Result
				select convert(bit, 0) IsSelected
					 , a.DocNo, a.DocDate, a.GLDate, a.Amount, a.ReffCode
					 , b.LookUpValueName ProfitCenter
					 , 'UnPosted' as Status
					 , 'Receiving' as PostingType
					 , a.JournalType, a.DocSource
					 , c.BankName ReffName
					 , a.ProfitCenterCode
				  from GetArInquiryInvoice(@CompanyCode,@BranchCode,@DateFrom,@DateTo,@Type) a
				  left join gnMstLookUpDtl b
					on b.CompanyCode = a.CompanyCode 
				   and b.LookUpValue = a.ProfitCenterCode
				   and b.CodeID = 'PFCN' 
				  left join gnMstBankCompany c
					on c.BankCode = a.ReffCode 
				   and c.CompanyCode = a.CompanyCode 
				   and c.BranchCode = a.BranchCode 
				 where a.ProfitCenterCode = @ProfitCenterCode
			end
		end
	end
	else if upper(@Status) = 'POSTED'
	begin
		if upper(@PostingGroup) = 'INVOICE'
		begin
			if upper(@Type) = 'ALL'
			begin
				insert into @Result
				select isSelected = convert(bit, 1)
					 , a.DocNo, a.DocDate, a.GLDate
					 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
					 , case isnull(a.Status, 0) 
						when 0 then 'UnPosted' 
						when 1 then 'Posted' 
						when 2 then 'Error' 
					   end as Status
					 , a.PostingType, a.JournalType, a.DocSource
					 , b.CustomerName as ReffName, a.ProfitCenterCode 
				  from arPosting a 
				  left join gnMstCustomer b ON a.ReffCode = b.CustomerCode 
				   and a.CompanyCode = b.CompanyCode 
				  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
				   and c.LookUpValue = a.ProfitCenterCode 
				   and c.CodeID = 'PFCN' 
				 where a.CompanyCode = @CompanyCode
				   and a.BranchCode = @BranchCode
				   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
				   and a.PostingType = 'Invoice'
				   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
			end
			else
			begin
				if @Type = 'ND'
				begin
					insert into @Result
					select isSelected = convert(bit, 1)
						 , a.DocNo, a.DocDate, a.GLDate
						 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
						 , case isnull(a.Status, 0) 
							when 0 then 'UnPosted' 
							when 1 then 'Posted' 
							when 2 then 'Error' 
						   end as Status
						 , a.PostingType, a.JournalType, a.DocSource
						 , b.CustomerName as ReffName, a.ProfitCenterCode 
					  from arPosting a 
					  left join gnMstCustomer b ON a.ReffCode = b.CustomerCode 
					   and a.CompanyCode = b.CompanyCode 
					  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
					   and c.LookUpValue = a.ProfitCenterCode 
					   and c.CodeID = 'PFCN' 
					 where a.CompanyCode = @CompanyCode
					   and a.BranchCode = @BranchCode
					   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
					   and a.PostingType = 'Invoice'
					   and a.JournalType = 'NotaDebet'
					   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
				end
				if @Type = 'NK'
				begin
					insert into @Result
					select isSelected = convert(bit, 1)
						 , a.DocNo, a.DocDate, a.GLDate
						 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
						 , case isnull(a.Status, 0) 
							when 0 then 'UnPosted' 
							when 1 then 'Posted' 
							when 2 then 'Error' 
						   end as Status
						 , a.PostingType, a.JournalType, a.DocSource
						 , b.CustomerName as ReffName, a.ProfitCenterCode 
					  from arPosting a 
					  left join gnMstCustomer b ON a.ReffCode = b.CustomerCode 
					   and a.CompanyCode = b.CompanyCode 
					  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
					   and c.LookUpValue = a.ProfitCenterCode 
					   and c.CodeID = 'PFCN' 
					 where a.CompanyCode = @CompanyCode
					   and a.BranchCode = @BranchCode
					   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
					   and a.PostingType = 'Invoice'
					   and a.JournalType = 'NotaKredit'
					   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
				end
				if @Type = 'INV'
				begin
					insert into @Result
					select isSelected = convert(bit, 1)
						 , a.DocNo, a.DocDate, a.GLDate
						 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
						 , case isnull(a.Status, 0) 
							when 0 then 'UnPosted' 
							when 1 then 'Posted' 
							when 2 then 'Error' 
						   end as Status
						 , a.PostingType, a.JournalType, a.DocSource
						 , b.CustomerName as ReffName, a.ProfitCenterCode 
					  from arPosting a 
					  left join gnMstCustomer b ON a.ReffCode = b.CustomerCode 
					   and a.CompanyCode = b.CompanyCode 
					  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
					   and c.LookUpValue = a.ProfitCenterCode 
					   and c.CodeID = 'PFCN' 
					 where a.CompanyCode = @CompanyCode
					   and a.BranchCode = @BranchCode
					   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
					   and a.PostingType = 'Invoice'
					   and a.JournalType = 'Invoice'
					   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
					   and not exists (select * from ArInterface where CompanyCode = @CompanyCode and BranchCode = @BranchCode and DocNo = a.DocNo)
				end
				if @Type = '3S'
				begin
					insert into @Result
					select isSelected = convert(bit, 1)
						 , a.DocNo, a.DocDate, a.GLDate
						 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
						 , case isnull(a.Status, 0) 
							when 0 then 'UnPosted' 
							when 1 then 'Posted' 
							when 2 then 'Error' 
						   end as Status
						 , a.PostingType, a.JournalType, a.DocSource
						 , b.CustomerName as ReffName, a.ProfitCenterCode 
					  from arPosting a 
					  left join gnMstCustomer b ON a.ReffCode = b.CustomerCode 
					   and a.CompanyCode = b.CompanyCode 
					  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
					   and c.LookUpValue = a.ProfitCenterCode 
					   and c.CodeID = 'PFCN' 
					 where a.CompanyCode = @CompanyCode
					   and a.BranchCode = @BranchCode
					   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
					   and a.PostingType = 'Invoice'
					   and a.JournalType = 'Invoice'
					   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
					   and exists (select * from ArInterface where CompanyCode = @CompanyCode and BranchCode = @BranchCode and DocNo = a.DocNo)
				end
				if @Type = 'RTR'
				begin
					insert into @Result
					select isSelected = convert(bit, 1)
						 , a.DocNo, a.DocDate, a.GLDate
						 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
						 , case isnull(a.Status, 0) 
							when 0 then 'UnPosted' 
							when 1 then 'Posted' 
							when 2 then 'Error' 
						   end as Status
						 , a.PostingType, a.JournalType, a.DocSource
						 , b.CustomerName as ReffName, a.ProfitCenterCode 
					  from arPosting a 
					  left join gnMstCustomer b ON a.ReffCode = b.CustomerCode 
					   and a.CompanyCode = b.CompanyCode 
					  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
					   and c.LookUpValue = a.ProfitCenterCode 
					   and c.CodeID = 'PFCN' 
					 where a.CompanyCode = @CompanyCode
					   and a.BranchCode = @BranchCode
					   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
					   and a.PostingType = 'Invoice'
					   and a.JournalType = 'Return'
					   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
				end
			end
		end
		if upper(@PostingGroup) = 'RECEIVING'
		begin
			if upper(@Type) = 'ALL'
			begin
				insert into @Result
				select isSelected = convert(bit, 1)
					 , a.DocNo, a.DocDate, a.GLDate
					 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
					 , case isnull(a.Status, 0) 
						when 0 then 'UnPosted' 
						when 1 then 'Posted' 
						when 2 then 'Error' 
					   end as Status
					 , a.PostingType, a.JournalType, a.DocSource
					 , b.BankName as ReffName, a.ProfitCenterCode 
				  from arPosting a 
				  left join gnMstBankCompany b ON a.ReffCode = b.BankCode 
				   and a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode
				  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
				   and c.LookUpValue = a.ProfitCenterCode 
				   and c.CodeID = 'PFCN' 
				 where a.CompanyCode = @CompanyCode
				   and a.BranchCode = @BranchCode
				   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
				   and a.PostingType = 'Receiving'
				   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
			end
			else if upper(@Type) = 'BNK'
			begin
				insert into @Result
				select isSelected = convert(bit, 1)
					 , a.DocNo, a.DocDate, a.GLDate
					 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
					 , case isnull(a.Status, 0) 
						when 0 then 'UnPosted' 
						when 1 then 'Posted' 
						when 2 then 'Error' 
					   end as Status
					 , a.PostingType, a.JournalType, a.DocSource
					 , b.BankName as ReffName, a.ProfitCenterCode 
				  from arPosting a 
				  left join gnMstBankCompany b ON a.ReffCode = b.BankCode 
				   and a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode
				  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
				   and c.LookUpValue = a.ProfitCenterCode 
				   and c.CodeID = 'PFCN' 
				 where a.CompanyCode = @CompanyCode
				   and a.BranchCode = @BranchCode
				   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
				   and a.PostingType = 'Receiving'
				   and a.JournalType = 'Bank'
				   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
			end
			else if upper(@Type) = 'KAS'
			begin
				insert into @Result
				select isSelected = convert(bit, 1)
					 , a.DocNo, a.DocDate, a.GLDate
					 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
					 , case isnull(a.Status, 0) 
						when 0 then 'UnPosted' 
						when 1 then 'Posted' 
						when 2 then 'Error' 
					   end as Status
					 , a.PostingType, a.JournalType, a.DocSource
					 , b.BankName as ReffName, a.ProfitCenterCode 
				  from arPosting a 
				  left join gnMstBankCompany b ON a.ReffCode = b.BankCode 
				   and a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode
				  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
				   and c.LookUpValue = a.ProfitCenterCode 
				   and c.CodeID = 'PFCN' 
				 where a.CompanyCode = @CompanyCode
				   and a.BranchCode = @BranchCode
				   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
				   and a.PostingType = 'Receiving'
				   and a.JournalType = 'Kas'
				   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
			end
			else if upper(@Type) = 'GCC'
			begin
				insert into @Result
				select isSelected = convert(bit, 1)
					 , a.DocNo, a.DocDate, a.GLDate
					 , a.Amount, a.ReffCode, c.LookUpValueName AS ProfitCenter
					 , case isnull(a.Status, 0) 
						when 0 then 'UnPosted' 
						when 1 then 'Posted' 
						when 2 then 'Error' 
					   end as Status
					 , a.PostingType, a.JournalType, a.DocSource
					 , b.BankName as ReffName, a.ProfitCenterCode 
				  from arPosting a 
				  left join gnMstBankCompany b ON a.ReffCode = b.BankCode 
				   and a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode
				  left join gnMstLookUpDtl c ON a.CompanyCode = c.CompanyCode 
				   and c.LookUpValue = a.ProfitCenterCode 
				   and c.CodeID = 'PFCN' 
				 where a.CompanyCode = @CompanyCode
				   and a.BranchCode = @BranchCode
				   and convert(varchar, a.GLDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112) 
				   and a.PostingType = 'Receiving'
				   and a.JournalType = 'Giro_Cek'
				   and a.ProfitCenterCode in (select ProfitCenterCode from @t_pcenter)
			end
		end
	end
	return
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetDateIndonesian]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- SELECT dbo.GetDateIndonesian ('12/25/2009') AS 'Tanggal'
CREATE FUNCTION [dbo].[GetDateIndonesian] (@pdate datetime) 
RETURNS VARCHAR (20)
AS 
BEGIN
  DECLARE @result VARCHAR(20), @Date VARCHAR(2), @Month VARCHAR(2), @Year VARCHAR(4)
  SET @Date = DATEPART(day, COnvert(DateTime, @pdate))--DAY(@pdate)
  SET @Month = DATEPART(MONTH,  COnvert(DateTime,@pdate))--MONTH(@pdate)
  SET @Year = DATEPART(YEAR,  COnvert(DateTime,@pdate))--YEAR(@pdate)
	
  IF  (DATEPART(MONTH, @pdate) = 1) --(@Month = '01')
	BEGIN
		SET @result = @Date + ' JANUARI ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '02')
    BEGIN
		SET @result = @Date + ' FEBRUARI ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '03')
    BEGIN
		SET @result = @Date + ' MARET ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '04')
    BEGIN
		SET @result = @Date + ' APRIL ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '05')
    BEGIN
		SET @result = @Date + ' MEI ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '06')
    BEGIN
		SET @result = @Date + ' JUNI ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '07')
    BEGIN
		SET @result = @Date + ' JULI ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '08')
    BEGIN
		SET @result = @Date + ' AGUSTUS ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '09')
    BEGIN
		SET @result = @Date + ' SEPTEMBER ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '10')
    BEGIN
		SET @result = @Date + ' OKTOBER ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '11')
    BEGIN
		SET @result = @Date + ' NOPEMBER ' + @Year
	END
  ELSE IF (DATEPART(MONTH, @pdate) = '12')
    BEGIN
		SET @result = @Date + ' DESEMBER ' + @Year
	END
 RETURN @result
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetElementChilds]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetElementChilds] ( @ElementID VARCHAR(20), @ic BIT, @p VARCHAR(MAX), @seqNo INT) 
RETURNS @result TABLE ( [ID] VARCHAR(20) , [InterChangeCode] CHAR (2) , SuperiorElementID VARCHAR(20), seqNo INT ) 
AS 

BEGIN 

--SELECT * FROM GetElementChilds ('09409-06322-5PK',1,'09409-06322-5PK') 
--SELECT * FROM GetElementChilds ('37100B13H00N000',0,'37100B13H00N000') 

DECLARE @r INT 
DECLARE @i INT 
DECLARE @rsl INT
DECLARE @id VARCHAR(20)
DECLARE @sp VARCHAR(20)
DECLARE @tbl_temp TABLE ( i INT identity, [ID] VARCHAR(20) , [InterChangeCode] CHAR (2) , 
                          SuperiorElementID VARCHAR(20) ) 

SET @i = 1 

if (@ic=1)
BEGIN
  INSERT INTO @tbl_temp 
  SELECT NewPartNo as [ID], InterChangeCode, PartNo as [SuperiorElementID]
  FROM spMstItemMod 
  WHERE PartNo = @ElementID
  AND InterChangeCode <> '3'
END
ELSE
BEGIN
  INSERT INTO @tbl_temp 
  SELECT PartNo as [ID], InterChangeCode, NewPartNo as [SuperiorElementID]
  FROM spMstItemMod 
  WHERE NewPartNo = @ElementID
  AND InterChangeCode = '11'
END

SET @r = @@ROWCOUNT 

WHILE ( @i < = @r ) 
BEGIN 
  SELECT @id = [ID], @sp = [SuperiorElementID] FROM @tbl_temp WHERE i = @i 

  SELECT @rsl = CHARINDEX(@id, @p)
  SET @p = @p + '~' + @sp

  IF @rsl=0
  BEGIN  
    SET @seqNo = @seqNo + 1

    INSERT INTO @result 
    SELECT [ID], InterChangeCode, SuperiorElementID, @seqNo as seqNO  
    FROM @tbl_temp 
    WHERE [ID] = @id AND SuperiorElementID = @ElementID 

    IF @@ROWCOUNT > 0 
    BEGIN 
      INSERT INTO @result 
      SELECT * FROM GetElementChilds ( @id, @ic, @p, @seqNo )
    END
  END
  SET @i = @i + 1 
END

RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetIndexColumnOrder]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Returns whether the column is ASC or DESC 
CREATE FUNCTION [dbo].[GetIndexColumnOrder] 
( 
    @object_id INT, 
    @index_id TINYINT, 
    @column_id TINYINT 
) 
RETURNS NVARCHAR(5) 
AS 
BEGIN 
    DECLARE @r NVARCHAR(5) 
    SELECT @r = CASE INDEXKEY_PROPERTY 
    ( 
        @object_id, 
        @index_id, 
        @column_id, 
        'IsDescending' 
    ) 
        WHEN 1 THEN N' DESC' 
        ELSE N'' 
    END 
    RETURN @r 
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetIndexColumns]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Returns the list of columns in the index 
CREATE FUNCTION [dbo].[GetIndexColumns] 
( 
    @table_name SYSNAME, 
    @object_id INT, 
    @index_id TINYINT 
) 
RETURNS NVARCHAR(4000) 
AS 
BEGIN 
    DECLARE 
        @colnames NVARCHAR(4000),  
        @thisColID INT, 
        @thisColName SYSNAME 
         
    SET @colnames = INDEX_COL(@table_name, @index_id, 1) 
        + dbo.GetIndexColumnOrder(@object_id, @index_id, 1) 
 
    SET @thisColID = 2 
    SET @thisColName = INDEX_COL(@table_name, @index_id, @thisColID) 
        + dbo.GetIndexColumnOrder(@object_id, @index_id, @thisColID) 
 
    WHILE (@thisColName IS NOT NULL) 
    BEGIN 
        SET @thisColID = @thisColID + 1 
        SET @colnames = @colnames + ', ' + @thisColName 
 
        SET @thisColName = INDEX_COL(@table_name, @index_id, @thisColID) 
            + dbo.GetIndexColumnOrder(@object_id, @index_id, @thisColID) 
    END 
    RETURN @colNames 
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetModifikasi]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
----------------
CREATE FUNCTION [dbo].[GetModifikasi] ( @ElementID VARCHAR(20) ) 
RETURNS @result TABLE ( [ID] VARCHAR(20) , [InterChangeCode] CHAR (2)) 
AS 
BEGIN
  --SELECT * FROM GetModifikasi ('09409-06322-5PK') 
  --SELECT * FROM GetElementChilds('09409-06322-5PK',1,'09409-06322-5PK')
  --SELECT * FROM GetSUGGORElementChilds('09409-06322-5PK',1,'09409-06322-5PK') 

  DECLARE @r1 INT, @r2 INT;
  DECLARE @p VARCHAR(20), @i VARCHAR(20);
  SELECT @r1=0, @r2=0;

  SELECT @r1=COUNT(*) FROM spMstItemMod WHERE NewPartNo=@ElementID;
  IF (@r1=0)
     SELECT @r2=COUNT(*) FROM spMstItemMod WHERE PartNo=@ElementID;

  IF (@r1=0 AND @r2=0)
  BEGIN
    INSERT @result(ID, InterChangeCode) VALUES(@ElementID,'00');
    RETURN
  END

  -- GET PARENT
  SELECT TOP 1 @p=ID, @i=InterChangeCode 
  FROM GetElementChilds ( @ElementID, 0, '', 0 )
  ORDER BY seqNo DESC;
  
  IF (@p <> '')
  BEGIN
    INSERT @result(ID, InterChangeCode) VALUES(@p, @i);
  END
  ELSE
  BEGIN
    IF (@r1 > 0)
      SELECT @i=InterChangeCode FROM spMstItemMod WHERE NewPartNo=@ElementID;
    ELSE IF (@r2 > 0)
      SELECT @i=InterChangeCode FROM spMstItemMod WHERE PartNo=@ElementID;

    SELECT @p=@ElementID
    INSERT @result(ID, InterChangeCode) VALUES(@p, @i);
  END
  
  -- GET CHILD
  INSERT INTO @result 
  SELECT ID, InterChangeCode FROM (
  SELECT * FROM GetElementChilds ( @p, 1, '', 0 ) ) A
  WHERE NOT EXISTS(SELECT 1 FROM @result B WHERE B.ID=A.ID);

  RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetSUGGORElementChilds]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetSUGGORElementChilds] ( @ElementID VARCHAR(20), @ic BIT, @p VARCHAR(MAX), @seqNo INT) 
RETURNS @result TABLE ( [ID] VARCHAR(20) , [InterChangeCode] CHAR (2) , SuperiorElementID VARCHAR(20), seqNo INT ) 
AS 

BEGIN 

-- SELECT * FROM GetSUGGORElementChilds ('09409-06322-5PK',1, '09409-06322-5PK') 
-- SELECT * FROM GetSUGGORElementChilds ('37100B13H00N000',0,'37100B13H00N000') 

DECLARE @r INT 
DECLARE @i INT
DECLARE @rsl INT
DECLARE @id VARCHAR(20)
DECLARE @sp VARCHAR(20)
DECLARE @tbl_temp TABLE ( i INT identity, [ID] VARCHAR(20) , [InterChangeCode] CHAR (2) , 
                          SuperiorElementID VARCHAR(20) ) 

SET @i = 1 

if (@ic=1)
BEGIN
  INSERT INTO @tbl_temp 
  SELECT NewPartNo as [ID], InterChangeCode, PartNo as [SuperiorElementID]
  FROM spMstItemMod 
  WHERE PartNo = @ElementID
END
ELSE
BEGIN
  INSERT INTO @tbl_temp 
  SELECT PartNo as [ID], InterChangeCode, NewPartNo as [SuperiorElementID]
  FROM spMstItemMod 
  WHERE NewPartNo = @ElementID
END

SET @r = @@ROWCOUNT 

WHILE ( @i < = @r ) 
BEGIN 
  SELECT @id = [ID], @sp = [SuperiorElementID] FROM @tbl_temp WHERE i = @i 

  SELECT @rsl = CHARINDEX(@id, @p)
  SET @p = @p + '~' + @sp

  IF @rsl=0
  BEGIN
    SET @seqNo = @seqNo + 1
  
    INSERT INTO @result 
    SELECT [ID], InterChangeCode, SuperiorElementID, @seqNo as seqNO  
    FROM @tbl_temp 
    WHERE [ID] = @id AND SuperiorElementID = @ElementID 

    IF @@ROWCOUNT > 0 
    BEGIN 
      INSERT INTO @result 
      SELECT * FROM GetSUGGORElementChilds ( @id, @ic, @p, @seqNo )
    END
  END
  SET @i = @i + 1 
END

RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[GetSUGGORModifikasi]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetSUGGORModifikasi] ( @ElementID VARCHAR(20) ) 
RETURNS @result TABLE ( [ID] VARCHAR(20) , [InterChangeCode] CHAR (2)) 
AS 
BEGIN
  --SELECT * FROM GetSUGGORModifikasi('09409-06322-5PK') 
  --SELECT * FROM GetSUGGORElementChilds('09409-06322-5PK',0,'09409-06322-5PK') 

  DECLARE @r1 INT, @r2 INT;
  DECLARE @p VARCHAR(20), @i VARCHAR(20);
  SELECT @r1=0, @r2=0;

  SELECT @r1=COUNT(*) FROM spMstItemMod WHERE NewPartNo=@ElementID;
  IF (@r1=0)
     SELECT @r2=COUNT(*) FROM spMstItemMod WHERE PartNo=@ElementID;

  IF (@r1=0 AND @r2=0)
  BEGIN
    INSERT @result(ID, InterChangeCode) VALUES(@ElementID,'00');
    RETURN
  END

  -- GET PARENT
  SELECT TOP 1 @p=ID, @i=InterChangeCode 
  FROM GetSUGGORElementChilds ( @ElementID, 0, '', 0 )
  ORDER BY seqNo DESC;
  
  IF (@p<>'')
  BEGIN
    INSERT @result(ID, InterChangeCode) VALUES(@p, @i);
  END
  ELSE
  BEGIN
    IF (@r1 > 0)
      SELECT @i=InterChangeCode FROM spMstItemMod WHERE NewPartNo=@ElementID;
    ELSE IF (@r2 > 0)
      SELECT @i=InterChangeCode FROM spMstItemMod WHERE PartNo=@ElementID;

    SELECT @p=@ElementID
    INSERT @result(ID, InterChangeCode) VALUES(@p, @i);
  END

  -- GET CHILD
  INSERT INTO @result 
  SELECT ID, InterChangeCode FROM (
  SELECT * FROM GetSUGGORElementChilds ( @p, 1, '', 0 ) ) A
  WHERE NOT EXISTS(SELECT 1 FROM @result B WHERE B.ID=A.ID);

  RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[ISOweek]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ISOweek]  (@DATE datetime)
RETURNS int
AS
BEGIN
   DECLARE @ISOweek int
   SET @ISOweek= DATEPART(wk,@DATE)+1
      -DATEPART(wk,CAST(DATEPART(yy,@DATE) as CHAR(4))+'0104')
--Special cases: Jan 1-3 may belong to the previous year
   IF (@ISOweek=0) 
      SET @ISOweek=dbo.ISOweek(CAST(DATEPART(yy,@DATE)-1 
         AS CHAR(4))+'12'+ CAST(24+DATEPART(DAY,@DATE) AS CHAR(2)))+1
--Special case: Dec 29-31 may belong to the next year
   IF ((DATEPART(mm,@DATE)=12) AND 
      ((DATEPART(dd,@DATE)-DATEPART(dw,@DATE))>= 28))
      SET @ISOweek=1
   RETURN(@ISOweek)
END

GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetCorrelatedTrainingHistoryBranch]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[sfm_GetCorrelatedTrainingHistoryBranch] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime,
	@ParamTrainingCode varchar(15)
)
returns varchar(15)
as
begin
	declare @TempTablePosition table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		DeptCode varchar(15),
		PosCode varchar(15),
		AssignedDate datetime,
		GradeCode varchar(15)
	);
	declare @TempTableTraining table (
		DeptCode varchar(15),
		PosCode varchar(15),
		GradeCode varchar(15)
	);
	declare @CorrelatedBranchCode varchar(15);
	declare @PositionCode varchar(15);
	declare @DepartmentCode varchar(15);
	declare @GradeCode varchar(15);
	declare @TrainingPosCode varchar(15);
	declare @TrainingDeptCode varchar(15);
	declare @TrainingGradeCode varchar(15);

	
	delete @TempTablePosition;
	delete @TempTableTraining;


	-- Find Training Dept and Position
	insert into @TempTableTraining
	select top 1
		a.DeptCode, 
		a.PosCode,
		a.GradeCode
	from 
		sfMstTraining a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.TrainingCode = @ParamTrainingCode
	order by a.TrainingCode asc;

	set @TrainingDeptCode = (
		select top 1 DeptCode from @TempTableTraining
	);

	set @TrainingPosCode = (
		select top 1 PosCode from @TempTableTraining
	);

	set @TrainingGradeCode = (
		select top 1 GradeCode from @TempTableTraining
	);

	-- Find Correlated Branch and Position
	insert into @TempTablePosition
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryDeptCode,
		a.HistoryPosCode,
		a.AssignedDate,
		''
	from
		SfEmployeeTitleHistory a
	where
		a.CompanyCode = @ParamCompanyCode
		and
		a.EmployeeID = @ParamEmployeeID
		and
		a.AssignedDate <= @ParamAssignedDate
	order by 
		a.AssignedDate desc;

	set @DepartmentCode = (
		select top 1
			a.DeptCode
		from
			@TempTablePosition a
	);

	set @PositionCode = (
		select top 1
			a.PosCode
		from
			@TempTablePosition a
	);



	--select 'Before enter validation';
	--select PosCode = @PositionCode, DeptCode = @DepartmentCode;
	--select TrnGrade = @TrainingGradeCode;

	if @PositionCode = @TrainingPosCode and @DepartmentCode = @TrainingDeptCode
	begin
		set @CorrelatedBranchCode = (
			select top 1
				a.BranchCode
			from
				@TempTablePosition a
		);

		if @DepartmentCode = 'SALES' and @PositionCode = 'S'
		begin
			set @GradeCode = (
				select top 1
					a.HistoryGrade
				from
					SfEmployeeGradeHistory a
				where
					a.CompanyCode like ('%' + @ParamCompanyCode + '%')
					and
					a.EmployeeID = @ParamEmployeeID
					and
					a.AssignedDate <= @ParamAssignedDate
				order by
					a.AssignedDate desc
			);	

			--select @DepartmentCode as DepartmentCode, @PositionCode as PositionCode, @GradeCode as GradeCode;

			if @GradeCode = @TrainingGradeCode
			begin
				set @GradeCode = @GradeCode;
			end
			else
			begin
				set @CorrelatedBranchCode = '';
			end
		end
	end

	return @CorrelatedBranchCode;
end

GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetCorrelatedTrainingHistoryPosition]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[sfm_GetCorrelatedTrainingHistoryPosition] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime,
	@ParamTrainingCode varchar(15)
)
returns varchar(15)
as
begin
	declare @TempTablePosition table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		DeptCode varchar(15),
		PosCode varchar(15),
		AssignedDate datetime,
		GradeCode varchar(15)
	);
	declare @TempTableTraining table (
		DeptCode varchar(15),
		PosCode varchar(15),
		GradeCode varchar(15)
	);
	declare @CorrelatedBranchCode varchar(15);
	declare @PositionCode varchar(15);
	declare @DepartmentCode varchar(15);
	declare @GradeCode varchar(15);
	declare @TrainingPosCode varchar(15);
	declare @TrainingDeptCode varchar(15);
	declare @TrainingGradeCode varchar(15);

	
	delete @TempTablePosition;
	delete @TempTableTraining;


	-- Find Training Dept and Position
	insert into @TempTableTraining
	select top 1
		a.DeptCode, 
		a.PosCode,
		a.GradeCode
	from 
		sfMstTraining a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.TrainingCode = @ParamTrainingCode
	order by a.TrainingCode asc;

	set @TrainingDeptCode = (
		select top 1 DeptCode from @TempTableTraining
	);

	set @TrainingPosCode = (
		select top 1 PosCode from @TempTableTraining
	);

	set @TrainingGradeCode = (
		select top 1 GradeCode from @TempTableTraining
	);

	-- Find Correlated Branch and Position
	insert into @TempTablePosition
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryDeptCode,
		a.HistoryPosCode,
		a.AssignedDate,
		''
	from
		SfEmployeeTitleHistory a
	where
		a.CompanyCode = @ParamCompanyCode
		and
		a.EmployeeID = @ParamEmployeeID
		and
		a.AssignedDate <= @ParamAssignedDate
	order by 
		a.AssignedDate desc;

	set @DepartmentCode = (
		select top 1
			a.DeptCode
		from
			@TempTablePosition a
	);

	set @PositionCode = (
		select top 1
			a.PosCode
		from
			@TempTablePosition a
	);

	if @PositionCode = @TrainingPosCode and @DepartmentCode = @TrainingDeptCode
	begin
		set @CorrelatedBranchCode = (
			select top 1
				a.BranchCode
			from
				@TempTablePosition a
		);

		if @DepartmentCode = 'SALES' and @PositionCode = 'S'
		begin
			set @GradeCode = (
				select top 1
					a.HistoryGrade
				from
					SfEmployeeGradeHistory a
				where
					a.CompanyCode like ('%' + @ParamCompanyCode + '%')
					and
					a.EmployeeID = @ParamEmployeeID
					and
					a.AssignedDate <= @ParamAssignedDate
				order by
					a.AssignedDate desc
			);	

			if @GradeCode != @TrainingGradeCode
			begin
				set @CorrelatedBranchCode = '';
			end
		end
	end

	return @PositionCode;
end

GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetGradeHistoryCorrelatedBranch]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[sfm_GetGradeHistoryCorrelatedBranch] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime
)
returns varchar(15)
as
begin
	declare @CorrelatedBranchCode varchar(15);
	declare @TempTable table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		PosCode varchar(15)
	);
	
	delete from @TempTable;
	
	insert into @TempTable
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryPosCode		
	from 
		SfEmployeeTitleHistory a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.EmployeeID = @ParamEmployeeID
		--and
		--a.HistoryDeptCode = 'SALES'
		--and
		--a.HistoryPosCode = 'S'	
		--and		
		--a.IsValid = 1
		and
		a.AssignedDate <= @ParamAssignedDate
	order by a.AssignedDate desc		
	
	declare @PositionCode varchar(15);
	set @PositionCode = (
		select top 1 PosCode from @TempTable
	);	
	
	if @PositionCode = 'S'
	begin
		set @CorrelatedBranchCode = (
			select BranchCode from @TempTable
		);
	end
	else
	begin
		delete from @TempTable;
	
		insert into @TempTable
		select top 1
			x.CompanyCode,
			x.BranchCode, 
			x.EmployeeID,
			x.PosCode		
		from 
			gnMstEmployeeData x
		where
			x.CompanyCode = @ParamCompanyCode
			and
			x.EmployeeID = @ParamEmployeeID
			and
			x.EmpJoinDate <= @ParamAssignedDate
			and
			ISNULL(x.OrgCode, '') != ''
		order by
			x.CreatedDate desc;
			
		set @PositionCode = (
			select top 1 PosCode from @TempTable
		);
			
		if @PositionCode = 'S'
		begin
			set @CorrelatedBranchCode = (
				select top 1 BranchCode from @TempTable
			);
		end
		else
		begin
			set @CorrelatedBranchCode = '';
		end
	end
	
	return @CorrelatedBranchCode;
end;

GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetGradeHistoryCorrelatedSelectedPosition]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[sfm_GetGradeHistoryCorrelatedSelectedPosition] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime
)
returns varchar(15)
as
begin
	declare @CorrelatedBranchCode varchar(15);
	declare @TempTable table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		PosCode varchar(15)
	);
	declare @SelectedPosition varchar(15);
	
	delete from @TempTable;
	
	insert into @TempTable
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryPosCode		
	from 
		SfEmployeeTitleHistory a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.EmployeeID = @ParamEmployeeID
		--and
		--a.HistoryDeptCode = 'SALES'
		--and
		--a.HistoryPosCode = 'S'	
		--and		
		--a.IsValid = 1
		and
		a.AssignedDate <= @ParamAssignedDate
	order by a.AssignedDate desc		
	
	declare @PositionCode varchar(15);
	set @PositionCode = (
		select top 1 PosCode from @TempTable
	);	
	
	if @PositionCode = 'S'
	begin
		set @CorrelatedBranchCode = (
			select BranchCode from @TempTable
		);
	end
	else
	begin
		delete from @TempTable;
	
		insert into @TempTable
		select top 1
			x.CompanyCode,
			x.BranchCode, 
			x.EmployeeID,
			x.PosCode		
		from 
			gnMstEmployeeData x
		where
			x.CompanyCode = @ParamCompanyCode
			and
			x.EmployeeID = @ParamEmployeeID
			and
			x.EmpJoinDate <= @ParamAssignedDate
			and
			ISNULL(x.OrgCode, '') != ''
		order by
			x.CreatedDate desc;
			
		set @PositionCode = (
			select top 1 PosCode from @TempTable
		);
			
		if @PositionCode = 'S'
		begin
			set @CorrelatedBranchCode = (
				select top 1 BranchCode from @TempTable
			);
		end
		else
		begin
			set @CorrelatedBranchCode = '';
			set @SelectedPosition = (
				select top 1 PosCode from @TempTable
			);
		end
	end
	
	return @SelectedPosition;
end;

GO
/****** Object:  UserDefinedFunction [dbo].[sfm_GetTitleHistoryCorrelatedBranch]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[sfm_GetTitleHistoryCorrelatedBranch] (
	@ParamCompanyCode varchar(15),
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime
)
returns varchar(15)
as
begin
	declare @CorrelatedBranch varchar(15);

	set @CorrelatedBranch = (
		select top 1
			a.MutationTo
		from
			gnMstEmployeeMutation a
		where
			a.CompanyCode = @ParamCompanyCode
			and
			a.EmployeeID = @ParamEmployeeID
			and
			CONVERT(varchar(21), a.MutationDate) <= CONVERT(varchar(21), @ParamAssignedDate)
			--and
			--a.IsValid = 1
		order by 
			a.MutationDate desc				
	);

	if ISNULL(@CorrelatedBranch, '') = ''
	begin										 
		set @CorrelatedBranch = (
			select top 1
				a.BranchCode
			from
				gnMstEmployee a
			where
				--a.CreatedDate <= @ParamAssignedDate
				--or
				a.JoinDate <= @ParamAssignedDate
				and
				a.EmployeeID = @ParamEmployeeID
				--and
				--ISNULL(a.OrgCode, '') != ''
			order by
				a.CreatedDate desc
		);
		
		--select 'Branch found at employee data';
	end;
	
	return @CorrelatedBranch;
end

GO
/****** Object:  UserDefinedFunction [dbo].[SplitLineString]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SplitLineString] 
( 
    @string NVARCHAR(MAX), 
    @delimiter CHAR(1) 
) 
RETURNS @output TABLE(splitdata NVARCHAR(MAX) 
) 
BEGIN 
    DECLARE @start INT, @end INT 
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string) 
    WHILE @start < LEN(@string) + 1 BEGIN 
        IF @end = 0  
            SET @end = LEN(@string) + 1
       
        INSERT INTO @output (splitdata)  
        VALUES(SUBSTRING(@string, @start, @end - @start)) 
        SET @start = @end + 1 
        SET @end = CHARINDEX(@delimiter, @string, @start)
        
    END 
    RETURN 
END

GO
/****** Object:  UserDefinedFunction [dbo].[SplitString]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[SplitString]
(  
 @RowData nvarchar(MAX),
 @SplitOn nvarchar(5),
 @Index int
)    
RETURNS @ReturnValue TABLE   
(Data NVARCHAR(MAX))   
AS
BEGIN
 Declare @Counter int
 Set @Counter = 1 
 While (Charindex(@SplitOn,@RowData)>0) 
 Begin  
  --Insert Into @ReturnValue (data)  
  --Select Data = 
  --    ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))
  Set @RowData = 
      Substring(@RowData,Charindex(@SplitOn,@RowData)+1,len(@RowData)) 

  if @Counter=@Index
  begin
	  Insert Into @ReturnValue (data)  
	  Select Data = 
		  ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))
  end

  Set @Counter = @Counter + 1  
 End 


 --Insert Into @ReturnValue (data)  
 --Select Data = ltrim(rtrim(@RowData))  
 Return  
END


GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_AbSplitString]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[uspfn_AbSplitString] (
	@String varchar(max), @Delimiter char(1)
)
returns @temptable TABLE (Part varchar(8000))
as
begin
	declare @idx int
	declare @slice varchar(8000)

	select @idx = 1

	if len(@String)<1 or @String is null return

	while @idx!= 0
	begin
		set @idx = charindex(@Delimiter,@String)
		if @idx!=0
			set @slice = left(@String,@idx - 1)
		else
			set @slice = @String

		if(len(@slice)>0)
			insert into @temptable(Part) values(@slice)

		set @String = right(@String,len(@String) - @idx)
		if len(@String) = 0 break
	end
	return 
end
GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_CalculateMinute]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[uspfn_CalculateMinute] (
	@Time1 char(5),
	@Time2 char(5)
)
returns int
as
begin
	declare @Difference int;
	set @Difference = DATEDIFF(minute, @Time1, @Time2);
	return abs(@Difference);
end


GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_IsNullOrEmpty]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[uspfn_IsNullOrEmpty] (
	@paramString varchar(200)
)
returns bit
as
begin
	declare @status bit;
	set @status = 0;

	if isnull(@paramString, '') = ''
	begin
		set @status = 1;
	end
	else
	begin
		set @status = 0;
	end

	if dbo.uspfn_trim(@paramString) = ''
	begin
		set @status = 1;
	end
	else
	begin
		set @status = 0;
	end

	return @status;
end


GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_MinuteToTime]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[uspfn_MinuteToTime] (
	@Minute int
)
returns varchar(5)
as

begin
	declare @Result char(5);

	if @Minute != 0 and @Minute != '0'
		set @Result = dateadd(minute, @Minute, '00:00')
	else
		set @Result='';

	return @Result;
end



GO
/****** Object:  UserDefinedFunction [dbo].[uspfn_trim]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[uspfn_trim] (
	@paramString varchar(200)
)
returns varchar(200)
as
begin
	return ltrim(rtrim(@paramString));
end;


GO
/****** Object:  UserDefinedFunction [dbo].[XSplitString]    Script Date: 25/02/2015 15:00:13 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[XSplitString] (
	@String varchar(max), @Delimiter char(1)
)
returns @temptable TABLE (Part varchar(8000))
as
begin
	declare @idx int
	declare @slice varchar(8000)

	select @idx = 1

	if len(@String)<1 or @String is null return

	while @idx!= 0
	begin
		set @idx = charindex(@Delimiter,@String)
		if @idx!=0
			set @slice = left(@String,@idx - 1)
		else
			set @slice = @String

		if(len(@slice)>0)
			insert into @temptable(Part) values(@slice)

		set @String = right(@String,len(@String) - @idx)
		if len(@String) = 0 break
	end
	return 
end

GO
if object_id('sp_BBNKIRBrowse') is not null
	drop procedure sp_BBNKIRBrowse
GO

CREATE procedure [dbo].[sp_BBNKIRBrowse]  @CompanyCode varchar(10), @BranchCode varchar(10)
 as
 
SELECT a.CompanyCode, a.BranchCode, a.SupplierCode, b.SupplierName, a.CityCode, c.LookUpValueName as CityName
		, a.SalesModelCode, d.SalesModelDesc, a.SalesModelYear, d.SalesModelDesc as SalesModelYearDesc, CAST(a.Status as bit) as Status
		, a.BBN, a.KIR, a.Remark
FROM omMstBBNKIR a
INNER JOIN gnMstSupplier b
	ON a.SupplierCode = b.SupplierCode
INNER JOIN gnMstLookUpDtl c
	ON a.CityCode = c.LookUpValue AND c.CodeID = 'CITY'
INNER JOIN omMstModel d
	ON a.SalesModelCode = d.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
GO

if object_id('sp_CheckValidTrans') is not null
	drop procedure sp_CheckValidTrans
GO





CREATE procedure [dbo].[sp_CheckValidTrans] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@BegDate varchar(10),
@EndDate varchar(10))


as

SELECT CompanyCode, BranchCode, POSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPPOSHdr'
FROM spTrnPPOSHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5, 6, 7))
AND (CONVERT(VARCHAR,POSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, BinningNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPBinnHdr'
FROM spTrnPBinnHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (3, 4))
AND (CONVERT(VARCHAR,BinningDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WRSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPRcvHdr' 
FROM spTrnPRcvHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status  NOT IN (3, 4))
--AND (ReceivingType NOT IN (3))
AND ReceivingType = 1  -- add 30/10/2010  by dRU
AND TransType = 4      -- add 30/10/2010  by dRU
AND (CONVERT(VARCHAR,WRSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WRSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPRcvHdr' 
FROM spTrnPRcvHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2,3))
AND (ReceivingType IN (3))
AND (CONVERT(VARCHAR,WRSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WRSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPHPP' 
FROM spTrnPHPP
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,WRSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ClaimNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPClaimHdr'
FROM spTrnPClaimHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5, 6, 7))
AND (CONVERT(VARCHAR,ClaimDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ClaimReceivedNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPRcvClaimHdr'
FROM spTrnPRcvClaimHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5, 6, 7, 8))
AND (CONVERT(VARCHAR,ClaimReceivedDate,111) BETWEEN @BegDate AND @EndDate)

SELECT a.CompanyCode, a.BranchCode, a.LampiranNo AS DocNo, a.Status, b.TypeOfGoods, TableName = 'spUtlStockTrfHdr' 
FROM spUtlStockTrfHdr a
	INNER JOIN SpTrnSLmpHdr b ON a.CompanyCode = b.CompanyCode AND a.DealerCode = b.BranchCode AND a.LampiranNo = b.LmpNo
WHERE a.CompanyCode = @CompanyCode 
    AND a.BranchCode = @BranchCode
	AND (a.Status <> 2)
	AND (CONVERT(VARCHAR,b.LmpDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, DocNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSORDHdr' 
FROM spTrnSORDHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5))
AND (CONVERT(VARCHAR,DocDate,111) BETWEEN @BegDate AND @EndDate)

SELECT DISTINCT a.CompanyCode, a.BranchCode, a.DocNo, b.Status, b.TypeOfGoods, TableName = 'spTrnSOSupply' 
FROM spTrnSOSupply a
	 INNER JOIN spTrnSORDHdr b ON a.CompanyCode = b.CompanyCode
	 AND a.BranchCode = b.BranchCode
	 AND a.DocNo = b.DocNo
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
AND (LEN(ISNULL(PickingSlipNo, '')) = 0)
AND (CONVERT(VARCHAR, b.DocDate, 111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, PickingSlipNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSPickingHdr' 
FROM spTrnSPickingHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,PickingSlipDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, InvoiceNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSInvoiceHdr'
FROM spTrnSInvoiceHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3)) 
AND (CONVERT(VARCHAR,InvoiceDate,111) BETWEEN @BegDate AND @EndDate)
                
SELECT CompanyCode, BranchCode, BPSFNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSBPSFHdr'
FROM spTrnSBPSFHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,BPSFDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, FPJNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSFPJHdr'
FROM spTrnSFPJHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (1, 2, 3))
AND ISNULL(FpjGovNo,'') = ''
AND (CONVERT(VARCHAR,FPJDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, LmpNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSLmpHdr'
FROM spTrnSLmpHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (1, 2, 3))
AND (CONVERT(VARCHAR,LmpDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReturnNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSRturHdr' 
FROM spTrnSRturHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReturnDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReturnNo AS DocNo, Status, '-' TypeOfGoods, TableName = 'spTrnSRturSrvHdr' 
FROM spTrnSRturSrvHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReturnDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReturnNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSRturSSHdr' 
FROM spTrnSRturSSHdr                           
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReturnDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, AdjustmentNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnIAdjustHdr'
FROM spTrnIAdjustHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,AdjustmentDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WHTrfNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnIWHTrfHdr'
FROM spTrnIWHTrfHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,WHTrfDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReservedNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnIReservedHdr'
FROM spTrnIReservedHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReservedDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, STHdrNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnStockTakingHdr'
FROM spTrnStockTakingHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,CreatedDate,111) BETWEEN @BegDate AND @EndDate)



GO

if object_id('sp_columns') is not null
	drop procedure sp_columns
GO
create procedure [dbo].[sp_columns]
(
    @table_name         nvarchar(384),
    @table_owner        nvarchar(384) = null,
    @table_qualifier    sysname = null,
    @column_name        nvarchar(384) = null,
    @ODBCVer            int = 2
)
as
    declare @full_table_name    nvarchar(769) -- 384 + 1 + 384
    declare @table_id           int
    declare @fUsePattern        bit

    select @fUsePattern = 1

    if (@ODBCVer is null) or (@ODBCVer <> 3)
        select @ODBCVer = 2

    if @table_qualifier is not null
    begin
        if db_name() <> @table_qualifier
        begin   -- If qualifier doesn't match current database
            raiserror (15250, -1,-1)
            return
        end
    end

    -- "ALL" is represented by NULL value.
    if @table_name = '%'
        select @table_name = null
    if @table_owner = '%'
        select @table_owner = null
    if @table_qualifier = '%'
        select @table_qualifier = null
    if @column_name = '%'
        select @column_name = null

    -- Empty string means nothing, so use invalid identifier.
    -- A quoted space will never match any object name.
    if @table_owner = ''
        select @table_owner = ' '

    select @full_table_name = isnull(quotename(@table_owner), '') + '.' + isnull(quotename(@table_name), '')
    select @table_id = object_id(@full_table_name)

    if (@fUsePattern = 1) -- Does the user want it?
    begin
        if ((isnull(charindex('%', @full_table_name),0) = 0) and
            (isnull(charindex('_', @full_table_name),0) = 0) and
            (isnull(charindex('[', @table_name),0) = 0) and
            (isnull(charindex('[', @table_owner),0) = 0) and
            (isnull(charindex('%', @column_name),0) = 0) and
            (isnull(charindex('_', @column_name),0) = 0) and
            (@table_id <> 0))
        begin
            select @fUsePattern = 0 -- not a single wild char, so go the fast way.
        end
    end

    if @fUsePattern = 0
    begin
        /* -- Debug output, do not remove it.
        print '*************'
        print 'No pattern matching.'
        print @fUsePattern
        print isnull(convert(sysname, @table_id), '@table_id = null')
        print isnull(@full_table_name, '@full_table_name = null')
        print isnull(@table_owner, '@table_owner = null')
        print isnull(@table_name, '@table_name = null')
        print isnull(@column_name, '@column_name = null')
        print '*************'
        */
        select
            TABLE_QUALIFIER             = s_cov.TABLE_QUALIFIER,
            TABLE_OWNER                 = s_cov.TABLE_OWNER,
            TABLE_NAME                  = s_cov.TABLE_NAME,
            COLUMN_NAME                 = s_cov.COLUMN_NAME,
            DATA_TYPE                   = s_cov.DATA_TYPE_28,
            TYPE_NAME                   = s_cov.TYPE_NAME_28,
            "PRECISION"                 = s_cov.PRECISION_28,
            "LENGTH"                    = s_cov.LENGTH_28,
            SCALE                       = s_cov.SCALE_90,
            RADIX                       = s_cov.RADIX,
            NULLABLE                    = s_cov.NULLABLE,
            REMARKS                     = s_cov.REMARKS,
            COLUMN_DEF                  = s_cov.COLUMN_DEF,
            SQL_DATA_TYPE               = s_cov.SQL_DATA_TYPE_28,
            SQL_DATETIME_SUB            = s_cov.SQL_DATETIME_SUB_90,
            CHAR_OCTET_LENGTH           = s_cov.CHAR_OCTET_LENGTH_28,
            ORDINAL_POSITION            = s_cov.ORDINAL_POSITION,
            IS_NULLABLE                 = s_cov.IS_NULLABLE,
            SS_DATA_TYPE                = s_cov.SS_DATA_TYPE

        from
            sys.spt_columns_odbc_view s_cov

        where
            s_cov.object_id = @table_id -- (2nd) (@table_name is null or o.name like @table_name)
            -- (2nd) and (@table_owner is null or schema_name(o.schema_id) like @table_owner)
            and (@column_name is null or s_cov.COLUMN_NAME = @column_name) -- (2nd)             and (@column_name is NULL or c.name like @column_name)
            and s_cov.ODBCVER = @ODBCVer
            and s_cov.OBJECT_TYPE <> 'TT'
            and ( s_cov.SS_IS_SPARSE = 0 OR objectproperty ( s_cov.OBJECT_ID, 'tablehascolumnset' ) = 0 )
        order by 17
    end
    else
    begin
        /* -- Debug output, do not remove it.
        print '*************'
        print 'THERE IS pattern matching!'
        print @fUsePattern
        print isnull(convert(sysname, @table_id), '@table_id = null')
        print isnull(@full_table_name, '@full_table_name = null')
        print isnull(@table_owner, '@table_owner = null')
        print isnull(@table_name, '@table_name = null')
        print isnull(@column_name, '@column_name = null')
        print '*************'
    */
        select
            TABLE_QUALIFIER             = s_cov.TABLE_QUALIFIER,
            TABLE_OWNER                 = s_cov.TABLE_OWNER,
            TABLE_NAME                  = s_cov.TABLE_NAME,
            COLUMN_NAME                 = s_cov.COLUMN_NAME,
            DATA_TYPE                   = s_cov.DATA_TYPE_28,
            TYPE_NAME                   = s_cov.TYPE_NAME_28,
            "PRECISION"                 = s_cov.PRECISION_28,
            "LENGTH"                    = s_cov.LENGTH_28,
            SCALE                       = s_cov.SCALE_90,
            RADIX                       = s_cov.RADIX,
            NULLABLE                    = s_cov.NULLABLE,
            REMARKS                     = s_cov.REMARKS,
            COLUMN_DEF                  = s_cov.COLUMN_DEF,
            SQL_DATA_TYPE               = s_cov.SQL_DATA_TYPE_28,
            SQL_DATETIME_SUB            = s_cov.SQL_DATETIME_SUB_90,
            CHAR_OCTET_LENGTH           = s_cov.CHAR_OCTET_LENGTH_28,
            ORDINAL_POSITION            = s_cov.ORDINAL_POSITION,
            IS_NULLABLE                 = s_cov.IS_NULLABLE,
            SS_DATA_TYPE                = s_cov.SS_DATA_TYPE

        from
            sys.spt_columns_odbc_view s_cov

        where
            s_cov.ODBCVER = @ODBCVer and
            s_cov.OBJECT_TYPE <> 'TT' and
            (@table_name is null or s_cov.TABLE_NAME like @table_name) and
            (@table_owner is null or schema_name(s_cov.SCHEMA_ID) like @table_owner) and
            (@column_name is null or s_cov.COLUMN_NAME like @column_name) and
            ( s_cov.SS_IS_SPARSE = 0 OR objectproperty ( s_cov.OBJECT_ID, 'tablehascolumnset' ) = 0 )

        order by 2, 3, 17
    end

GO

if object_id('sp_EdpBpsNoBrowse') is not null
	drop procedure sp_EdpBpsNoBrowse
GO





CREATE procedure [dbo].[sp_EdpBpsNoBrowse] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@ProductType varchar(10),
@CustomerCode varchar(30))


as

SELECT 
 a.BPSFNo
,a.BPSFDate
,a.PickingSlipNo
,a.PickingSlipDate
FROM spTrnSBPSFHdr a
WHERE a.CompanyCode=@CompanyCode
  AND a.BranchCode=@BranchCode
  AND a.CustomerCode=@CustomerCode
  AND a.TypeOfGoods=@TypeOfGoods
GROUP BY  a.BPSFNo, a.BPSFDate, a.PickingSlipNo, a.PickingSlipDate
ORDER BY  a.BPSFNo DESC





GO

if object_id('sp_EdpDocNoBrowse') is not null
	drop procedure sp_EdpDocNoBrowse
GO






CREATE procedure [dbo].[sp_EdpDocNoBrowse] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@ProductType varchar(10),
@SupplierCode varchar(30))


as

SELECT 
 a.POSNo
,a.PosDate
,a.SupplierCode
FROM SpTrnPOrderBalance a with(nolock, nowait)
INNER JOIN SpTrnPPOSHdr b ON b.POSNo = a.POSNo AND b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
WHERE a.OnOrder > 0
  AND a.CompanyCode=@CompanyCode
  AND a.BranchCode=@BranchCode
  AND a.TypeOfGoods=@TypeOfGoods
  AND b.ProductType=@ProductType
  AND a.SupplierCode=@SupplierCode
  --and b.Status = 2
GROUP BY  a.POSNo, a.PosDate, a.SupplierCode 
ORDER BY  a.POSNo DESC






GO

if object_id('sp_EdpPartNo_Pembelian') is not null
	drop procedure sp_EdpPartNo_Pembelian
GO




CREATE procedure [dbo].[sp_EdpPartNo_Pembelian]  (  
@CompanyCode varchar(10),
@BranchCode varchar(10),
@DocNo varchar(20)
--@BinningNo varchar(20),
--@Opt varchar(10)
)
 as 
 
--SELECT DISTINCT a.POSNo, a.PartNo, c.PartName, CASE when e.ReceiveQty is null then a.OnOrder else a.OrderQty-e.ReceiveQty end as ReminQty,
--d.PurchasePrice, a.DiscPct, 
--a.OnOrder as MaxReceived
--from spTrnPOrderBalance a 
--LEFT JOIN spTrnPBinnDtl b ON
--a.CompanyCode = b.CompanyCode
--and a.BranchCode = b.BranchCode
--and a.POSNo = b.DocNo
--AND a.PartNo = b.PartNo
--LEFT JOIN spMstItemInfo c ON
--a.CompanyCode = c.CompanyCode
--and a.PartNo = c.PartNo
--LEFT JOIN SpMstItemPrice d ON
--a.CompanyCode = d.CompanyCode
--and a.BranchCode = d.BranchCode
--AND a.PartNo = d.PartNo LEFT JOIN
--(SELECT PartNo, DocNo, sum(ReceivedQty) as ReceiveQty from spTrnPBinnDtl WHERE CompanyCode = @CompanyCode
--AND BranchCode = @BranchCode
--and DocNo = @DocNo GROUP BY PartNo, DocNo) e
--ON a.PartNo = e.PartNo
--AND a.POSNo = e.DocNo
--where
--a.CompanyCode = @CompanyCode
--AND a.BranchCode = @BranchCode
--and a.POSNo = @DocNo

SELECT c.PartNo, c.PartName, c.PurchasePrice, c.DiscPct, SUM(c.OnOrder) AS MaxReceived
FROM
(
    SELECT
     a.PartNo
    ,b.PartName 
    ,ISNULL((SELECT round(x.PurchasePrice + (x.PurchasePrice * (select (TaxPct/100) from gnMstTax
where TaxCode = (select ParaValue from gnMstLookUpDtl where CodeID = 'BINS' and SeqNo = 3))),0)
FROM SpMstItemPrice x where x.CompanyCode = a.CompanyCode AND
     x.BranchCode = a.BranchCode AND x.PartNo = a.PartNo),0) AS PurchasePrice
    ,a.OnOrder
    ,a.DiscPct
    FROM spTrnPOrderBalance a 
    INNER JOIN spMstItemInfo b
       ON b.CompanyCode = a.CompanyCode
      AND b.PartNo      = a.PartNo
      WHERE a.CompanyCode = @CompanyCode
      AND a.BranchCode  = @BranchCode
      AND a.PosNo       = @DocNo      
) c
GROUP BY c.PartNo, c.PartName, c.PurchasePrice, c.DiscPct
HAVING sum(c.OnOrder) > 0




GO

if object_id('sp_EdpPelangganBrowse') is not null
	drop procedure sp_EdpPelangganBrowse
GO





CREATE procedure [dbo].[sp_EdpPelangganBrowse] (  

@CompanyCode varchar(10),
@BranchCode varchar(10),
@ProfitCenter varchar(30))


as

SELECT a.CustomerCode, a.CustomerName,
       a.Address1+' '+a.Address2+' '+a.Address3+' '+a.Address4 as Address,
       c.LookUpValueName as ProfitCenter
  FROM gnMstCustomer a with(nolock, nowait)
    INNER JOIN gnMstCustomerProfitCenter b with(nolock, nowait) ON 
        a.CompanyCode = b.CompanyCode 
        AND b.BranchCode = @BranchCode
        AND b.ProfitCenterCode = @ProfitCenter
        AND b.CustomerCode = a.CustomerCode
        AND b.isBlackList=0
    INNER JOIN gnMstLookUpDtl c ON c.CompanyCode= a.CompanyCode
         AND c.LookupValue= b.ProfitCenterCode
         AND c.CodeID= 'PFCN'
 WHERE  a.CompanyCode=@CompanyCode
    AND a.status = 1   
    ORDER BY a.CustomerCode
    






GO

if object_id('sp_EdpTransNo') is not null
	drop procedure sp_EdpTransNo
GO







CREATE procedure [dbo].[sp_EdpTransNo] (  

@CompanyCode varchar(10),
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@LampiranNo varchar(10)
)


as

SELECT * INTO #t1 FROM ( 
SELECT
    a.LampiranNo
    , a.DealerCode as SupplierCode
    , ISNULL(b.SupplierName, '') as SupplierName
    , ISNULL(c.TypeOfGoods, '') TypeofGoods
FROM spUtlStockTrfHdr a
LEFT JOIN GnMstSupplier b ON b.CompanyCode = a.CompanyCode 
    AND b.SupplierCode = a.DealerCode
LEFT JOIN SpTrnSLmpHdr c ON c.CompanyCode = a.CompanyCode 
    AND c.BranchCode = a.DealerCode
    AND c.LmpNo = a.LampiranNo
WHERE a.CompanyCode = @CompanyCode
  AND a.BranchCode = @BranchCode
  AND a.Status in ('0','1') ) #t1
  
SELECT * FROM #t1 WHERE TypeofGoods = @TypeOfGoods
    AND LampiranNo = CASE @LampiranNo WHEN '' THEN LampiranNo ELSE @LampiranNo END

DROP TABLE #t1
    








GO

if object_id('sp_EntryHPPBrowse') is not null
	drop procedure sp_EntryHPPBrowse
GO




CREATE procedure [dbo].[sp_EntryHPPBrowse] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@PeriodBeg varchar(30),
@PeriodEnd varchar(30))


as

SELECT a.*, c.DNSupplierNo,
    d.SupplierName,b.BinningNo, b.BinningDate, b.SupplierCode, 
	(
		select LookUpValueName
		from gnMstLookUpDtl
		where CompanyCode=a.CompanyCode and CodeID='STAT' and LookUpValue=a.Status
	) StatusStr
FROM 
    SpTrnPHPP a WITH(NoLock,NoWait)
LEFT JOIN SpTrnPRcvHdr b ON b.CompanyCode = a.CompanyCOde AND b.BranchCode = a.BranchCode
    AND b.WRSNo = a. WRSNo
LEFT JOIN SpTrnPBinnHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode
    AND c.BinningNo = b.BinningNo 
LEFT JOIN gnMstSupplier d ON d.CompanyCode = a.CompanyCode AND d.SupplierCode = c.SupplierCode
WHERE a.CompanyCode=@CompanyCode
      AND a.BranchCode=@BranchCode
      AND a.TypeOfGoods=@TypeOfGoods
      AND Convert(Varchar, a.HPPDate, 112) between @PeriodBeg and @PeriodEnd
      ORDER BY a.HPPNO DESC





GO

if object_id('sp_GetMaxQtyBinning') is not null
	drop procedure sp_GetMaxQtyBinning
GO

CREATE procedure [dbo].[sp_GetMaxQtyBinning]  (  
@CompanyCode varchar(10),
@BranchCode varchar(10),
@DocNo varchar(20),
@SupplierCode varchar(10),
--@CustomerCode varchar(10),
@PartNo varchar(20),
@BinningNo varchar(20),
@Opt varchar(10)
)
 as 
 
IF @Opt = 'P'
BEGIN
 
SELECT 
OrderQty, ReceivedQty
FROM
(
SELECT ISNULL(SUM(OnOrder),0) AS OrderQty
FROM SpTrnPOrderBalance with(nolock, nowait)
WHERE CompanyCode=@CompanyCode
AND BranchCode=@BranchCode
AND POSNo=@DocNo
AND SupplierCode=@SupplierCode
AND PartNo=@PartNo	                
) AS PO,
(
SELECT ISNULL(SUM(ReceivedQty),0) AS ReceivedQty
FROM spTrnPBinnDtl
INNER JOIN spTrnPBinnHdr ON spTrnPBinnDtl.CompanyCode = spTrnPBinnHdr.CompanyCode
AND spTrnPBinnDtl.BranchCode = spTrnPBinnHdr.BranchCode
AND spTrnPBinnDtl.BinningNo = spTrnPBinnHdr.BinningNo
WHERE spTrnPBinnDtl.CompanyCode = @CompanyCode 
AND spTrnPBinnDtl.BranchCode = @BranchCode AND DocNo = @DocNo AND PartNo = @PartNo
AND spTrnPBinnDtl.BinningNo NOT IN(@BinningNo) AND Status IN ('0', '1')
GROUP BY DocNo
) AS BINN            
END

ELSE 
BEGIN
SELECT 
OrderQty, ReceivedQty
FROM(
SELECT ISNULL(SUM(a.QtyBill),0) OrderQty
FROM SpTrnSBPSFDtl a with(nolock, nowait)
INNER JOIN SpTrnSBPSFHdr b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.BPSFNo = a.BPSFNo
WHERE a.CompanyCode = @CompanyCode
AND a.BranchCode = @BranchCode
AND a.BPSFNo = @DocNo
AND b.CustomerCode = @SupplierCode
AND a.PartNo = @PartNo                
) AS PO,
(
SELECT ISNULL(SUM(ReceivedQty),0) AS ReceivedQty
FROM spTrnPBinnDtl
INNER JOIN spTrnPBinnHdr ON spTrnPBinnDtl.CompanyCode = spTrnPBinnHdr.CompanyCode
AND spTrnPBinnDtl.BranchCode = spTrnPBinnHdr.BranchCode
AND spTrnPBinnDtl.BinningNo = spTrnPBinnHdr.BinningNo
WHERE spTrnPBinnDtl.CompanyCode = @CompanyCode 
AND spTrnPBinnDtl.BranchCode = @BranchCode AND DocNo = @DocNo AND PartNo = @PartNo	         
AND spTrnPBinnDtl.BinningNo NOT IN(@BinningNo)
) AS BINN  
END
                 

GO

if object_id('sp_gnMstSupplierView') is not null
	drop procedure sp_gnMstSupplierView
GO
create procedure [dbo].[sp_gnMstSupplierView]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
as
select 
CompanyCode,
SupplierCode,
BranchCode,
ProfitCenterCode,
SupplierName,
Alamat,
Address1,
Address2,
Address3,
Address4,
Phone,
DiscPct,
[Status],
ProfitCenterName,
TOPDays,
CityCode,
CityName
from gnMstSupplierView
where CompanyCode=@CompanyCode and   BranchCode=@BranchCode

GO

if object_id('sp_InquirDataKendaraan') is not null
	drop procedure sp_InquirDataKendaraan
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirDataKendaraan] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @WarehouseCode varchar(100),
 @WarehouseCodeTo varchar(100),
 @SalesModelCode varchar(100),
 @SalesModelCodeTo varchar(100),
 @SalesModelYear varchar(100),
 @SalesModelYearTo varchar(100),
 @ChassisCode varchar(100),
 @ChassisCodeTo varchar(100),
 @ChassisNo varchar(100),
 @ChassisNoTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

select a.salesModelCode, (select b.SalesModelDesc from OmMstModel b
where a.CompanyCode = b.CompanyCode and a.SalesModelCode = b.SalesModelCode) as SalesModelDesc,
a.salesModelYear, a.chassisCode, convert(varchar, a.chassisNo) as chassisNo, a.engineCode, 
convert(varchar, a.engineNo) as engineNo,
CASE a.Status 
WHEN 0 THEN ''Ready''
WHEN 1 THEN ''Karoseri''
WHEN 2 THEN ''Return''
WHEN 3 THEN ''Order''
WHEN 4 THEN ''DO''
WHEN 5 THEN ''BPK''
WHEN 6 THEN ''Sales''
WHEN 7 THEN ''Transfer''
END as Status,
case a.isActive when 1 then ''Ya'' else ''Tidak'' end as isActive
from ommstvehicle a
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@WarehouseCode)) > 0
   set @pQuery = @pQuery + ' and a.WarehouseCode between ''' + rtrim(@WarehouseCode) + '''' + ' and ' + '''' + rtrim(@WarehouseCodeTo) + ''''

if len(rtrim(@SalesModelCode)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCode between ''' + rtrim(@SalesModelCode) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeTo) + ''''

if len(rtrim(@SalesModelYear)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYear) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@ChassisCode)) > 0
   set @pQuery = @pQuery + ' and a.ChassisCode between ''' + rtrim(@ChassisCode) + '''' + ' and ' + '''' + rtrim(@ChassisCodeTo) + ''''

if len(rtrim(@ChassisNo)) > 0
   set @pQuery = @pQuery + ' and a.ChassisNo between ''' + rtrim(@ChassisNo) + '''' + ' and ' + '''' + rtrim(@ChassisNoTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' 
set @pQuery = @pQuery + ' ORDER BY a.SalesModelCode '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------



GO

if object_id('sp_InquirDetailDataKendaraan') is not null
	drop procedure sp_InquirDetailDataKendaraan
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirDetailDataKendaraan] 
(
 @CompanyCode varchar(15),
 @BranchCode varchar(15),
 @ChassisCode varchar(100),
 @ChassisNo varchar(100)
)
AS
BEGIN

select 
	(select b.refferenceDesc1 from ommstrefference b where b.companyCode = a.companyCode
	and b.refferencetype = 'WARE' and b.refferenceCode = a.warehouseCode) as warehouseName
	,'('+a.ColourCode+') '+(select c.refferenceDesc1 from ommstrefference c where c.companyCode = a.companyCode
	and c.refferencetype = 'COLO' and c.refferenceCode = a.ColourCode) as ColourName
	, a.servicebookno
	, a.keyno
	, a.cogsunit
	, a.cogsOthers
	, a.cogsKaroseri
    , o.afterdiscdpp dpp
    , o.afterdiscppn ppn
    , p.bbn
	, j.pono
    , convert(varchar, j.podate, 106) podate
	, h.bpuno+' ('+h.RefferenceDONo+')' bpuno
    , convert(varchar, h.bpudate, 106) bpudate
	, d.sono
    , convert(varchar, d.sodate, 106) sodate
	, k.dono
    , convert(varchar, k.dodate, 106) dodate
    , case d.SKPKNo when '' then d.RefferenceNo else d.SKPKNo end as SKPKNo
    , convert(varchar, d.sodate, 106)  SKPKDate
    , l.bpkno
    , convert(varchar, l.bpkdate, 106) bpkdate
	, m.invoiceNo
    , convert(varchar, m.invoicedate, 106) invoicedate
    , q.RefferenceSJNo
	, convert(varchar, q.RefferenceSJDate, 106) RefferenceSJDate
    , i.hppno
    , convert(varchar, i.hppdate, 106) hppdate
	, n.reqNo reqOutNo
    , convert(varchar, n.reqDate, 106) reqdate
    , i.RefferenceInvoiceNo reffinv
    , convert(varchar, i.RefferenceInvoiceDate, 106) reffinvdate
    , i.RefferenceFakturPajakNo refffp
    , convert(varchar, i.RefferenceFakturPajakDate , 106) refffpdate
	, s.PoliceRegistrationNo policeregno
    , convert(varchar, s.PoliceRegistrationDate, 106) policeregdate
	, isnull(b.CustomerCode + ' - ' + c.CustomerName, 
		k.CustomerCode + ' - ' + (select CustomerName from gnMstCustomer where CompanyCode = @CompanyCode and CustomerCode = k.CustomerCode)
		) as Customer
	, isnull(c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4,
		(select Address1 + ' ' + Address2 + ' ' + Address3 + ' ' + Address4 from gnMstCustomer where CompanyCode = @CompanyCode and CustomerCode = k.CustomerCode)
		) as Address
	, d.Salesman + ' - ' + f.EmployeeName as Salesman
	, d.LeasingCo + ' - ' + g.CustomerName as Leasing
	, d.SalesCode + ' - ' + e.LookUpValueName as KelAR
    , s.BPKBNo
	, s.SPKNo
from 
	ommstvehicle a
left join omTrSalesInvoice b on a.CompanyCode = b.CompanyCode and b.BranchCode like @BranchCode 
    and a.InvoiceNo = b.InvoiceNo
left join gnMstCustomer c on a.CompanyCode = c.CompanyCode and b.Customercode = c.CustomerCode
left join omTrSalesSO d on a.CompanyCode = d.CompanyCode and d.BranchCode like @BranchCode and a.SONo = d.SONo
left join GnMstLookUpDtl e on a.CompanyCode = e.CompanyCode and CodeID = 'GPAR' and e.LookUpValue = d.SalesCode
left join gnMstEmployee f on a.CompanyCode  = f.Companycode and f.BranchCode like @BranchCode 
    and f.EmployeeID = d.Salesman
left join gnMstCustomer g on a.CompanyCode = g.CompanyCode and g.CustomerCode = d.LeasingCo
left join omTrPurchaseBPU h on a.CompanyCode= h.CompanyCode and h.BranchCode like @BranchCode 
    and a.PONo = h.PONo and a.BPUNo=h.BPUNo
left join omTrPurchaseHPP i on a.CompanyCode= i.CompanyCode and i.BranchCode like @BranchCode and a.HPPNo= i.HPPNo
left join omTrPurchasePO j on a.CompanyCode = j.CompanyCode and j.BranchCode like @BranchCode and a.PONo = j.PONo
left join omTrSalesDO k on a.CompanyCode = k.CompanyCode and k.BranchCode like @BranchCode and a.DONo = k.DONo and a.SONo= k.SONo
left join omTrSalesBPK l on a.CompanyCode = l.CompanyCode and l.BranchCode like @BranchCode and a.BPKNo = l.BPKNo
left join omTrSalesInvoice m on a.CompanyCode = m.CompanyCode and m.BranchCode like @BranchCode 
    and a.InvoiceNo = m.InvoiceNo
left join omTrSalesReq n on a.CompanyCode = n.CompanyCode and n.BranchCode like @BranchCode and a.ReqOutNo = n.ReqNo
left join omTrSalesSOModel o on a.CompanyCode = o.CompanyCode and o.BranchCode like @BranchCode and a.SONo = o.SONo 
    and a.SalesModelCode = o.SalesModelCode and a.SalesModelYear = o.SalesModelYear and a.ChassisCode = o.ChassisCode
left join omTrSalesSOVin p on a.CompanyCode = p.CompanyCode and p.BranchCode like @BranchCode and a.SONo = p.SONo
    and a.SalesModelCode = p.SalesModelCode and a.SalesModelYear = p.SalesModelYear and a.ColourCode = p.ColourCode
    and a.ChassisNo = p.ChassisNo and a.ChassisCode = p.ChassisCode
left join omTrPurchaseBPU q on a.CompanyCode = q.CompanyCode and q.BranchCode like @BranchCode and q.PONo = j.PONO 
	and q.BPUNo = a.BPUNo
left join omTrSalesSPKDetail s on s.CompanyCode = a.CompanyCode and s.BranchCode like @BranchCode
	and s.ChassisCode = a.ChassisCode and s.ChassisNo = a.ChassisNo
where 
	a.companyCode = @CompanyCode and a.chassisCode = @ChassisCode and a.chassisNo = @ChassisNo

END
GO

if object_id('sp_InquiryBPK') is not null
	drop procedure sp_InquiryBPK
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryBPK] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SODateFrom DateTime,
 @SODateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @NoDOFrom varchar(100),
 @NoDOTo varchar(100),
 @NoBPKFrom varchar(100),
 @NoBPKTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT a.BPKNo, convert(varchar(20),a.BPKDate,106) as BPKDate, a.SONo, a.DONo, b.CustomerName, 
a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
c.SupplierName AS Expedition, case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
d.RefferenceDesc1 AS WareHouseName, e.CustomerName AS ShipTo, 
a.Remark, 
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Canceled''
	WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM omTrSalesBPK a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstSupplier c ON c.CompanyCode = a.CompanyCode AND c.SupplierCode = a.Expedition
LEFT JOIN OmMstRefference d ON d.CompanyCode = a.CompanyCode AND d.RefferenceCode = a.WareHouseCode AND d.RefferenceType = ''WARE''
LEFT JOIN GnMstCustomer e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.ShipTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.BPKDate between ''' + convert(varchar(50),@SODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SODateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@NoDOFrom)) > 0
   set @pQuery = @pQuery + ' and a.DONo between ''' + rtrim(@NoDOFrom) + '''' + ' and ' + '''' + rtrim(@NoDOTo) + ''''

if len(rtrim(@NoBPKFrom)) > 0
   set @pQuery = @pQuery + ' and a.BPKNo between ''' + rtrim(@NoBPKFrom) + '''' + ' and ' + '''' + rtrim(@NoBPKTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.BPKNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------

GO

if object_id('sp_InquiryBPKDetail') is not null
	drop procedure sp_InquiryBPKDetail
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryBPKDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @NoBPK varchar(15)
)
AS
BEGIN

SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
	a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
	a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
	a.ColourCode, c.RefferenceDesc1 as ColourName, a.Remark, a.StatusPDI,
	a.BPKSeq
FROM   omTrSalesBPKDetail a	   
	LEFT JOIN
	omMstModelYear b
	ON a.CompanyCode = b.CompanyCode
	AND a.SalesModelCode = b.SalesModelCode      
	AND a.ChassisCode = b.ChassisCode
	AND a.SalesModelYear = b.SalesModelYear	   
	LEFT JOIN
	omMstRefference c
	ON a.CompanyCode = c.CompanyCode
	AND a.ColourCode = c.RefferenceCode
	AND c.RefferenceType = 'COLO'
WHERE a.CompanyCode= @p_CompanyCode 
	AND a.BranchCode= @p_BranchCode 
	AND a.BPKNo= @NoBPK
ORDER BY a.ChassisNo ASC

END
GO

if object_id('sp_InquiryBPU') is not null
	drop procedure sp_InquiryBPU
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryBPU] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @BPUType varchar(2),
 @BPUDateFrom DateTime,
 @BPUDateTo DateTime,
 @PONoFrom varchar(100),
 @PONoTo varchar(100),
 @NoRefDOFrom varchar(100),
 @NoRefDOTo varchar(100),
 @NoRefSJFrom varchar(100),
 @NoRefSJTo varchar(100),
 @NoBPUFrom varchar(100),
 @NoBPUTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT 
case when a.BPUType = ''0'' then ''DO'' 
when a.BPUType = ''1'' then ''SJ''
when a.BPUType = ''2'' then ''DO & SJ'' 
when a.BPUType = ''3'' then ''SJ Booking''
end as BPUType, a.BPUNo,
convert(varchar(20),a.BPUDate,106) as BPUDate,
a.RefferenceDONo, 
convert(varchar(20),a.RefferenceDODate,106) as RefferenceDODate, 
a.RefferenceSJNo, 
case when year(a.RefferenceSJDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceSJDate,106) end as RefferenceSJDate, 
a.SupplierCode, 
(SELECT z.SupplierName FROM gnMstSupplier z 
WHERE z.CompanyCode = a.CompanyCode
AND z.SupplierCode = a.SupplierCode)  AS SupplierName, 
a.ShipTo, a.Expedition, 
(SELECT x.SupplierName
FROM gnMstSupplier x
WHERE x.CompanyCode = a.CompanyCode
AND x.SupplierCode = a.Expedition)  AS ExpeditionName, 
a.WarehouseCode, 
(SELECT y.RefferenceDesc1
FROM omMstRefference y
WHERE y.CompanyCode = a.CompanyCode
AND y.RefferenceCode = a.WarehouseCode
AND y.RefferenceType = ''WARE'')  AS WareHouseName, 
a.Remark, 
CASE WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM omTrPurchaseBPU a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@BPUType)) > 0
   set @pQuery = @pQuery + ' and a.BPUType = ''' + rtrim(@BPUType) + ''''

if year(@BPUDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.BPUDate between ''' + convert(varchar(50),@BPUDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@BPUDateTo) + ''''

if len(rtrim(@PONoFrom)) > 0
   set @pQuery = @pQuery + ' and a.PONo between ''' + rtrim(@PONoFrom) + '''' + ' and ' + '''' + rtrim(@PONoTo) + ''''

if len(rtrim(@NoRefDOFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceDONo between ''' + rtrim(@NoRefDOFrom) + '''' + ' and ' + '''' + rtrim(@NoRefDOTo) + ''''

if len(rtrim(@NoRefSJFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceSJNo between ''' + rtrim(@NoRefSJFrom) + '''' + ' and ' + '''' + rtrim(@NoRefSJTo) + ''''

if len(rtrim(@NoBPUFrom)) > 0
   set @pQuery = @pQuery + ' and a.BPUNo between ''' + rtrim(@NoBPUFrom) + '''' + ' and ' + '''' + rtrim(@NoBPUTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.BPUNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryDebetNote') is not null
	drop procedure sp_InquiryDebetNote
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryDebetNote] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @InvDateFrom DateTime,
 @InvDateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @CustomerFrom varchar(100),
 @CustomerTo varchar(100),
 @NoInvFrom varchar(100),
 @NoInvtTo varchar(100),
 @NoSKPKFrom varchar(100),
 @NoSKPKTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.DNNo as InvoiceNo, a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.DNDate,106) as InvoiceDate, 
case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as Type,
a.SONo, b.CustomerName, c.CustomerName AS BillTo, a.InvoiceNo as InvNo, 
case when year(a.DueDate) = ''1900'' then '''' else convert(varchar(20),a.DueDate,106) end as DueDate, a.Remark, 
pso.SKPKNo, convert(varchar(20),pso.SODate,106) as SODate, pdo.DONo,convert(varchar(20),pdo.DODate,106) as DODate, pbpk.BPKNo,
convert(varchar(20),pbpk.BPKDate,106) as BPKDate, pso.RefferenceNo,
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM omTrSalesDN a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.BillTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
LEFT JOIN omTrSalesDO pdo ON a.CompanyCode = pdo.CompanyCode AND a.BranchCode = pdo.BranchCode AND a.SONo = pdo.SONo
LEFT JOIN omTrSalesBPK pbpk ON a.CompanyCode = pbpk.CompanyCode AND a.BranchCode = pbpk.BranchCode AND a.SONO = pbpk.SONo AND pdo.DONo = pbpk.DONo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@InvDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.DNDate between ''' + convert(varchar(50),@InvDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@InvDateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@CustomerFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerFrom) + '''' + ' and ' + '''' + rtrim(@CustomerTo) + ''''

if len(rtrim(@NoInvFrom)) > 0
   set @pQuery = @pQuery + ' and a.DNNo between ''' + rtrim(@NoInvFrom) + '''' + ' and ' + '''' + rtrim(@NoInvFrom) + ''''

if len(rtrim(@NoSKPKFrom)) > 0
   set @pQuery = @pQuery + ' and pso.SKPKNo between ''' + rtrim(@NoSKPKFrom) + '''' + ' and ' + '''' + rtrim(@NoSKPKTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.DNNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryDeliveryOrder') is not null
	drop procedure sp_InquiryDeliveryOrder
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryDeliveryOrder] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SODateFrom DateTime,
 @SODateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @NoDOFrom varchar(100),
 @NoDOTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT a.DONo, convert(varchar(20),a.DODate,106) as DODate, a.SONo, a.CustomerCode, b.CustomerName, 
b.CustomerName, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
c.SupplierName AS Expedition, case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
d.RefferenceDesc1 AS WareHouseName, e.CustomerName AS ShipTo, 
a.Remark, 
CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM omTrSalesDO a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstSupplier c ON c.CompanyCode = a.CompanyCode AND c.SupplierCode = a.Expedition
LEFT JOIN OmMstRefference d ON d.CompanyCode = a.CompanyCode AND d.RefferenceCode = a.WareHouseCode AND d.RefferenceType = ''WARE''
LEFT JOIN GnMstCustomer e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.ShipTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.DODate between ''' + convert(varchar(50),@SODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SODateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@NoDOFrom)) > 0
   set @pQuery = @pQuery + ' and a.DONo between ''' + rtrim(@NoDOFrom) + '''' + ' and ' + '''' + rtrim(@NoDOTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.DONo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------

GO

if object_id('sp_InquiryDeliveryOrderDetail') is not null
	drop procedure sp_InquiryDeliveryOrderDetail
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryDeliveryOrderDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @NoDO varchar(15)
)
AS
BEGIN

SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
a.ColourCode, c.RefferenceDesc1 as ColourName, a.Remark, a.DOSeq
FROM   omTrSalesDODetail a	   
LEFT JOIN
omMstModelYear b
ON a.CompanyCode = b.CompanyCode
AND a.SalesModelCode = b.SalesModelCode
AND a.SalesModelYear = b.SalesModelYear      
AND a.ChassisCode = b.ChassisCode	   
LEFT JOIN
omMstRefference c
ON a.CompanyCode = c.CompanyCode
AND a.ColourCode = c.RefferenceCode
AND c.RefferenceType = 'COLO'
WHERE a.CompanyCode= @p_CompanyCode 
AND a.BranchCode= @p_BranchCode  
AND a.DONo= @NoDO
ORDER BY a.ChassisNo ASC

END
GO

if object_id('sp_InquiryHPP') is not null
	drop procedure sp_InquiryHPP
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryHPP] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @HPPDateFrom DateTime,
 @HPPDateTo DateTime,
 @refNoFrom varchar(100),
 @refNoTo varchar(100),
 @HPPNoFrom varchar(100),
 @HPPNoTo varchar(100),
 @PONoFrom varchar(100),
 @PONoTo varchar(100),
 @supplierCodeFrom varchar(100),
 @supplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT a.HPPNo, convert(varchar(20),a.HPPDate,106) as HPPDate, a.PONo, a.RefferenceInvoiceNo, convert(varchar(20),a.RefferenceInvoiceDate,106) as RefferenceInvoiceDate,
a.RefferenceFakturPajakNo, convert(varchar(20),a.RefferenceFakturPajakDate,106) as RefferenceFakturPajakDate, a.SupplierCode, 
(select z.SupplierName from gnMstSupplier z where a.CompanyCode = z.CompanyCode and
a.SupplierCode = z.SupplierCode) as SupplierName,
a.BillTo, convert(varchar(20),a.DueDate,106) as DueDate, a.Remark, CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM omTrPurchaseHPP a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@HPPDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.HPPDate between ''' + convert(varchar(50),@HPPDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@HPPDateTo) + ''''

if len(rtrim(@refNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceInvoiceNo between ''' + rtrim(@refNoFrom) + '''' + ' and ' + '''' + rtrim(@refNoTo) + ''''

if len(rtrim(@HPPNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.HPPNo between ''' + rtrim(@HPPNoFrom) + '''' + ' and ' + '''' + rtrim(@HPPNoTo) + ''''

if len(rtrim(@PONoFrom)) > 0
   set @pQuery = @pQuery + ' and a.PONo between ''' + rtrim(@PONoFrom) + '''' + ' and ' + '''' + rtrim(@PONoTo) + ''''

if len(rtrim(@supplierCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@supplierCodeFrom) + '''' + ' and ' + '''' + rtrim(@supplierCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.HPPNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryInvoice') is not null
	drop procedure sp_InquiryInvoice
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryInvoice] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @InvDateFrom DateTime,
 @InvDateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @CustomerFrom varchar(100),
 @CustomerTo varchar(100),
 @NoInvFrom varchar(100),
 @NoInvTo varchar(100),
 @NoSKPKFrom varchar(100),
 @NoSKPKTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.InvoiceNo, a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.InvoiceDate,106) as InvoiceDate, 
case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
a.SONo, b.CustomerName, c.CustomerName AS BillTo, a.FakturPajakNo, isnull(pdn.DNNo,'''') as DNNo,
case when year(a.FakturPajakDate) = ''1900'' then '''' else convert(varchar(20),a.FakturPajakDate,106) end as FakturPajakDate, 
case when year(a.DueDate) = ''1900'' then '''' else convert(varchar(20),a.DueDate,106) end as DueDate, a.Remark, 
pso.SKPKNo, convert(varchar(20),pso.SODate,106) as SODate, pdo.DONo,convert(varchar(20),pdo.DODate,106) as DODate, pbpk.BPKNo,
convert(varchar(20),pbpk.BPKDate,106) as BPKDate, pso.RefferenceNo,
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM omTrSalesInvoice a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.BillTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
LEFT JOIN omTrSalesDO pdo ON a.CompanyCode = pdo.CompanyCode AND a.BranchCode = pdo.BranchCode AND a.SONo = pdo.SONo
LEFT JOIN omTrSalesBPK pbpk ON a.CompanyCode = pbpk.CompanyCode AND a.BranchCode = pbpk.BranchCode AND a.SONO = pbpk.SONo AND pdo.DONo = pbpk.DONo
LEFT JOIN omTrSalesDN pdn ON a.CompanyCode = pdn.CompanyCode AND a.BranchCode = pdn.BranchCode AND a.InvoiceNo = pdn.InvoiceNo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@InvDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.InvoiceDate between ''' + convert(varchar(50),@InvDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@InvDateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@CustomerFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerFrom) + '''' + ' and ' + '''' + rtrim(@CustomerTo) + ''''

if len(rtrim(@NoInvFrom)) > 0
   set @pQuery = @pQuery + ' and a.InvoiceNo between ''' + rtrim(@NoInvFrom) + '''' + ' and ' + '''' + rtrim(@NoInvTo) + ''''

if len(rtrim(@NoSKPKFrom)) > 0
   set @pQuery = @pQuery + ' and pso.SKPKNo between ''' + rtrim(@NoSKPKFrom) + '''' + ' and ' + '''' + rtrim(@NoSKPKTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.InvoiceNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryKaroseri') is not null
	drop procedure sp_InquiryKaroseri
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryKaroseri] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @KaroseriDateFrom DateTime,
 @KaroseriDateTo DateTime,
 @SalesModelCodeOldFrom varchar(100),
 @SalesModelCodeOldTo varchar(100),
 @SalesModelYearFrom varchar(100),
 @SalesModelYearTo varchar(100),
 @NoSPKKaroseriFrom varchar(100),
 @NoSPKKaroseriTo varchar(100),
 @SupplierCodeFrom varchar(100),
 @SupplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.KaroseriSPKNo, 
convert(varchar(20),a.KaroseriSPKDate,106) as KaroseriSPKDate, 
a.RefferenceNo, 
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
a.SupplierCode,b.SupplierName, a.SalesModelCodeOld, a.SalesModelYear, a.SalesModelCodeNew, 
a.Quantity, a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.Total, a.DurationDays, 
a.Remark, CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Approved'' WHEN 3 THEN ''Canceled'' END AS Status        
FROM 
OmTrPurchaseKaroseri a
LEFT JOIN 
gnMstSupplier b 
ON a.CompanyCode = b.CompanyCode 
AND a.SupplierCode =  b.SupplierCode
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@KaroseriDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.KaroseriSPKDate between ''' + convert(varchar(50),@KaroseriDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@KaroseriDateTo) + ''''

if len(rtrim(@SalesModelCodeOldFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCodeOld between ''' + rtrim(@SalesModelCodeOldFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeOldFrom) + ''''

if len(rtrim(@SalesModelYearFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYearFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@NoSPKKaroseriFrom)) > 0
   set @pQuery = @pQuery + ' and a.KaroseriSPKNo between ''' + rtrim(@NoSPKKaroseriFrom) + '''' + ' and ' + '''' + rtrim(@NoSPKKaroseriTo) + ''''

if len(rtrim(@SupplierCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@SupplierCodeFrom) + '''' + ' and ' + '''' + rtrim(@SupplierCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.KaroseriSPKNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryKaroseriTerima') is not null
	drop procedure sp_InquiryKaroseriTerima
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryKaroseriTerima] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @KaroseriDateFrom DateTime,
 @KaroseriDateTo DateTime,
 @SalesModelCodeOldFrom varchar(100),
 @SalesModelCodeOldTo varchar(100),
 @SalesModelYearFrom varchar(100),
 @SalesModelYearTo varchar(100),
 @NoSPKKaroseriFrom varchar(100),
 @NoSPKKaroseriTo varchar(100),
 @NoKaroseriTerimaFrom varchar(100),
 @NoKaroseriTerimaTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.KaroseriTerimaNo, 
convert(varchar(20),a.KaroseriTerimaDate,106) as KaroseriTerimaDate,
a.RefferenceInvoiceNo,
case when year(a.RefferenceInvoiceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceInvoiceDate,106) end as RefferenceInvoiceDate,
a.RefferenceFakturPajakNo, 
case when year(a.RefferenceFakturPajakDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceFakturPajakDate,106) end  as RefferenceFakturPajakDate,
b.SupplierName, a.SalesModelCodeOld, a.SalesModelYear, a.SalesModelCodeNew, a.Quantity, 
a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.PPh, a.Total, case when year(a.DueDate) = ''1900'' then '''' else convert(varchar(20),a.DueDate,106) end as DueDate, a.Remark, 
CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Closed'' WHEN 3 THEN ''Canceled'' WHEN 9 THEN ''Finished'' END AS Status
FROM 
OmTrPurchaseKaroseriTerima a
LEFT JOIN 
gnMstSupplier b 
ON a.CompanyCode = b.CompanyCode 
AND a.SupplierCode =  b.SupplierCode  
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@KaroseriDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.KaroseriSPKDate between ''' + convert(varchar(50),@KaroseriDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@KaroseriDateTo) + ''''

if len(rtrim(@SalesModelCodeOldFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCodeOld between ''' + rtrim(@SalesModelCodeOldFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeOldFrom) + ''''

if len(rtrim(@SalesModelYearFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYearFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@NoSPKKaroseriFrom)) > 0
   set @pQuery = @pQuery + ' and a.KaroseriSPKNo between ''' + rtrim(@NoSPKKaroseriFrom) + '''' + ' and ' + '''' + rtrim(@NoSPKKaroseriTo) + ''''

if len(rtrim(@NoKaroseriTerimaFrom)) > 0
   set @pQuery = @pQuery + ' and a.KaroseriTerimaNo between ''' + rtrim(@NoKaroseriTerimaFrom) + '''' + ' and ' + '''' + rtrim(@NoKaroseriTerimaTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.KaroseriTerimaNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryPerlengkapanAdjustent') is not null
	drop procedure sp_InquiryPerlengkapanAdjustent
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPerlengkapanAdjustent] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PerlengkapanDateFrom DateTime,
 @PerlengkapanDateTo DateTime,
 @NoReffFrom varchar(100),
 @NoReffTo varchar(100),
 @NoAdjustmentFrom varchar(100),
 @NoAdjustmentTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.AdjustmentNo, 
convert(varchar(20),a.AdjustmentNo,106) as AdjustmentDate,
a.RefferenceNo,
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate,
CASE a.PerlengkapanType WHEN 1 THEN ''BPU'' WHEN 2 THEN ''Transfer'' WHEN 3 THEN ''Return'' ELSE a.PerlengkapanType END AS PerlengkapanType , a.Remark,
CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Deleted'' WHEN 3 THEN ''Canceled'' WHEN 9 THEN ''Finished'' END AS Status
FROM 
OmTrPurchasePerlengkapanAdjustment a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@PerlengkapanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PerlengkapanDate between ''' + convert(varchar(50),@PerlengkapanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PerlengkapanDateTo) + ''''

if len(rtrim(@NoReffFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceNo between ''' + rtrim(@NoReffFrom) + '''' + ' and ' + '''' + rtrim(@NoReffTo) + ''''

if len(rtrim(@NoAdjustmentFrom)) > 0
   set @pQuery = @pQuery + ' and a.AdjustmentNo between ''' + rtrim(@NoAdjustmentFrom) + '''' + ' and ' + '''' + rtrim(@NoAdjustmentTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.AdjustmentNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryPerlengkapanIn') is not null
	drop procedure sp_InquiryPerlengkapanIn
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPerlengkapanIn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PerlengkapanType varchar(2),
 @PerlengkapanDateFrom DateTime,
 @PerlengkapanDateTo DateTime,
 @NoReffFrom varchar(100),
 @NoReffTo varchar(100),
 @NoPerlengkapanFrom varchar(100),
 @NoPerlengkapanTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.PerlengkapanNo, 
convert(varchar(20),a.PerlengkapanDate,106) as PerlengkapanDate,
a.RefferenceNo,
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate,
CASE a.PerlengkapanType WHEN 1 THEN ''BPU'' WHEN 2 THEN ''Transfer'' WHEN 3 THEN ''Return'' ELSE a.PerlengkapanType END AS PerlengkapanType , 
a.SourceDoc, a.Remark, 
CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Deleted'' WHEN 3 THEN ''Canceled'' WHEN 9 THEN ''Finished'' END AS Status
FROM 
OmTrPurchasePerlengkapanIn a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@PerlengkapanType)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanType = ''' + rtrim(@PerlengkapanType) + ''''

if year(@PerlengkapanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PerlengkapanDate between ''' + convert(varchar(50),@PerlengkapanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PerlengkapanDateTo) + ''''

if len(rtrim(@NoReffFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceNo between ''' + rtrim(@NoReffFrom) + '''' + ' and ' + '''' + rtrim(@NoReffTo) + ''''

if len(rtrim(@NoPerlengkapanFrom)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanNo between ''' + rtrim(@NoPerlengkapanFrom) + '''' + ' and ' + '''' + rtrim(@NoPerlengkapanTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.PerlengkapanNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryPerlengkapanOut') is not null
	drop procedure sp_InquiryPerlengkapanOut
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPerlengkapanOut] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PerlengkapanType varchar(2),
 @PerlengkapanDateFrom DateTime,
 @PerlengkapanDateTo DateTime,
 @NoPerlengkapanFrom varchar(100),
 @NoPerlengkapanTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.PerlengkapanNo, a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.PerlengkapanDate,106) as PerlengkapanDate, 
a.ReferenceNo, 
case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate, 
a.SourceDoc, b.CustomerName, CASE ISNULL(PerlengkapanType, ''0'') WHEN ''1'' THEN ''BPK'' WHEN ''2'' THEN ''TRANSFER'' WHEN 3 THEN ''RETURN'' ELSE ''Unknown Type'' END AS PerlengkapanType, 
a.Remark, 
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Closed''
	WHEN a.Status = 3 THEN ''Canceled''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM 
	omTrSalesPerlengkapanOut a
LEFT JOIN 
	GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@PerlengkapanType)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanType = ''' + rtrim(@PerlengkapanType) + ''''

if year(@PerlengkapanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PerlengkapanDate between ''' + convert(varchar(50),@PerlengkapanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PerlengkapanDateTo) + ''''

if len(rtrim(@NoPerlengkapanFrom)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanNo between ''' + rtrim(@NoPerlengkapanFrom) + '''' + ' and ' + '''' + rtrim(@NoPerlengkapanTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.PerlengkapanNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryPurchaseOrder') is not null
	drop procedure sp_InquiryPurchaseOrder
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPurchaseOrder] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PODateFrom DateTime,
 @PODateTo DateTime,
 @refNoFrom varchar(100),
 @refNoTo varchar(100),
 @PONoFrom varchar(100),
 @PONoTo varchar(100),
 @supplierCodeFrom varchar(100),
 @supplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT 
a.PONo, 
 case Year(a.PODate) when (1900) then null else convert(varchar(20),a.PODate,106) end as PODate, 
a.RefferenceNo, 
	case Year(a.RefferenceDate) when (1900) then null else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
a.SupplierCode, ( SELECT sup.SupplierName FROM gnMstSupplier sup 
WHERE sup.SupplierCode = a.SupplierCode AND a.CompanyCode = sup.CompanyCode) AS SupplierName, 
a.BillTo, a.ShipTo, a.Remark, 
CASE WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM 
omTrPurchasePO a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@PODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PODate between ''' + convert(varchar(50),@PODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PODateTo) + ''''

if len(rtrim(@supplierCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@supplierCodeFrom) + '''' + ' and ' + '''' + rtrim(@supplierCodeTo) + ''''

if len(rtrim(@refNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceNo between ''' + rtrim(@refNoFrom) + '''' + ' and ' + '''' + rtrim(@refNoTo) + ''''

if len(rtrim(@PONoFrom)) > 0
   set @pQuery = @pQuery + ' and a.PONo between ''' + rtrim(@PONoFrom) + '''' + ' and ' + '''' + rtrim(@PONoTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.PONo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------


GO

if object_id('sp_InquiryPurchaseReturn') is not null
	drop procedure sp_InquiryPurchaseReturn
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPurchaseReturn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @ReturnDateFrom DateTime,
 @ReturnDateTo DateTime,
 @HPPNoFrom varchar(100),
 @HPPNoTo varchar(100),
 @NoReturnFrom varchar(100),
 @NoReturnTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT DISTINCT
a.ReturnNo, 
convert(varchar(20),a.ReturnDate,106) as ReturnDate, 
a.RefferenceNo, 
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
a.HPPNo, a.RefferenceFakturPajakNo, a.Remark, 
CASE WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM 
omTrPurchaseReturn a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@ReturnDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.ReturnDate between ''' + convert(varchar(50),@ReturnDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@ReturnDateTo) + ''''

if len(rtrim(@HPPNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.HPPNo between ''' + rtrim(@HPPNoFrom) + '''' + ' and ' + '''' + rtrim(@HPPNoTo) + ''''

if len(rtrim(@NoReturnFrom)) > 0
   set @pQuery = @pQuery + ' and a.ReturnNo between ''' + rtrim(@NoReturnFrom) + '''' + ' and ' + '''' + rtrim(@NoReturnTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.ReturnNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquirySalesOrder') is not null
	drop procedure sp_InquirySalesOrder
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesOrder] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SODateFrom DateTime,
 @SODateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @CustomerCodeFrom varchar(100),
 @CustomerCodeTo varchar(100),
 @SalesmanFrom varchar(100),
 @SalesmanTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.SONo, 
convert(varchar(20),a.SODate,106) as SODate, 
a.RefferenceNo, a.CustomerCode,  case a.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
b.CustomerName, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address, 
c.EmployeeName AS SalesmanName, d.RefferenceDesc1 AS WareHouseName, 
e.CustomerName AS BillTo, f.CustomerName AS ShipTo, g.RefferenceDesc1 AS GroupPriceName, a.Remark, 
CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 4 THEN ''Rejected''
WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM 
	omTrSalesSO a
LEFT JOIN 
	GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN 
	GnMstEmployee c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.EmployeeID = a.Salesman
LEFT JOIN 
	OmMstRefference d ON d.CompanyCode = a.CompanyCode AND d.RefferenceCode = a.WareHouseCode AND d.RefferenceType = ''WARE''
LEFT JOIN 
	GnMstCustomer e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.BillTo
LEFT JOIN 
	GnMstCustomer f ON f.CompanyCode = a.CompanyCode AND f.CustomerCode = a.ShipTo
LEFT JOIN 
	OmMstRefference g ON g.CompanyCode = a.CompanyCode AND g.RefferenceCode = a.GroupPriceCode AND g.RefferenceType = ''GRPR''
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.SODate between ''' + convert(varchar(50),@SODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SODateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@CustomerCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerCodeFrom) + '''' + ' and ' + '''' + rtrim(@CustomerCodeTo) + ''''

if len(rtrim(@SalesmanFrom)) > 0
   set @pQuery = @pQuery + ' and a.Salesman between ''' + rtrim(@SalesmanFrom) + '''' + ' and ' + '''' + rtrim(@SalesmanTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.SONo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------

					
GO

if object_id('sp_InquirySalesReq') is not null
	drop procedure sp_InquirySalesReq
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesReq] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @Jenis varchar(10),
 @PermohonanDateFrom DateTime,
 @PermohonanDateTo DateTime,
 @NoPermohonanFrom varchar(100),
 @NoPermohonanTo varchar(100),
 @CustomerCode varchar(100),
 @CustomerCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT a.ReqNo,convert(varchar(20),a.ReqDate,106) as ReqDate, a.ReffNo, case when year(a.ReffDate) = ''1900'' then '''' else convert(varchar(20),a.ReffDate,106) end as ReffDate, 
b.CustomerName AS SubDealerName, CASE ISNULL(StatusFaktur, ''0'') WHEN ''0'' THEN ''NON FAKTUR'' WHEN ''1'' THEN ''FAKTUR'' END AS StatusFaktur,
a.Remark, 
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM omTrSalesReq a
LEFT JOIN gnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.SubDealerCode
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@Jenis)) > 0
   set @pQuery = @pQuery + ' and a.StatusFaktur = ''' + rtrim(@Jenis) + ''''

if year(@PermohonanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.ReqDate between ''' + convert(varchar(50),@PermohonanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PermohonanDateTo) + ''''

if len(rtrim(@NoPermohonanFrom)) > 0
   set @pQuery = @pQuery + ' and a.ReqNo between ''' + rtrim(@NoPermohonanFrom) + '''' + ' and ' + '''' + rtrim(@NoPermohonanTO) + ''''

if len(rtrim(@CustomerCode)) > 0
   set @pQuery = @pQuery + ' and a.SubDealerCode between ''' + rtrim(@CustomerCode) + '''' + ' and ' + '''' + rtrim(@CustomerCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.ReqNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquirySalesReturn') is not null
	drop procedure sp_InquirySalesReturn
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesReturn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @ReturnDateFrom DateTime,
 @ReturnDateTo DateTime,
 @NoInvFrom varchar(100),
 @NoInvTo varchar(100),
 @NoReturnFrom varchar(100),
 @NoReturnTo varchar(100),
 @CustomerFrom varchar(100),
 @CustomerTo varchar(100),
 @WarehouseFrom varchar(100),
 @WarehouseFromTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.ReturnNo, b.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.ReturnDate,106) as ReturnDate, 
a.ReferenceNo, 
case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate, 
a.InvoiceNo, 
case when year(a.InvoiceDate) = ''1900'' then '''' else convert(varchar(20),a.InvoiceDate,106) end as InvoiceDate, 
b.CustomerName, a.FakturPajakNo, 
case when year(a.FakturPajakDate) = ''1900'' then '''' else convert(varchar(20),a.FakturPajakDate,106) end as FakturPajakDate, 
c.RefferenceDesc1 AS WareHouseName, a.Remark, 
CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Deleted''
WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM 
	omTrSalesReturn a
LEFT JOIN 
	GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN 
	OmMstRefference c ON c.CompanyCode = a.CompanyCode AND c.RefferenceCode = a.WareHouseCode AND c.RefferenceType = ''WARE''
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@ReturnDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.ReturnDate between ''' + convert(varchar(50),@ReturnDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@ReturnDateTo) + ''''

if len(rtrim(@NoInvFrom)) > 0
   set @pQuery = @pQuery + ' and a.InvoiceNo between ''' + rtrim(@NoInvFrom) + '''' + ' and ' + '''' + rtrim(@NoInvTo) + ''''

if len(rtrim(@NoReturnFrom)) > 0
   set @pQuery = @pQuery + ' and a.ReturnNo between ''' + rtrim(@NoReturnFrom) + '''' + ' and ' + '''' + rtrim(@NoReturnTo) + ''''

if len(rtrim(@CustomerFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerFrom) + '''' + ' and ' + '''' + rtrim(@CustomerTo) + ''''

if len(rtrim(@WarehouseFrom)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCode between ''' + rtrim(@WarehouseFrom) + '''' + ' and ' + '''' + rtrim(@WarehouseFrom) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.InvoiceNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquirySalesReturnDetailModel') is not null
	drop procedure sp_InquirySalesReturnDetailModel
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesReturnDetailModel] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @ReturnNo varchar(100)
)
AS
BEGIN

SELECT *, (SELECT z.SalesModelDesc
			FROM omMstModelYear z
			WHERE a.CompanyCode = z.CompanyCode
			AND a.SalesModelCode = z.SalesModelCode
			AND a.salesmodelyear = z.salesmodelyear)  AS salesModelDesc
FROM    omTrSalesReturnDetailModel a
INNER JOIN
	omTrSalesReturnVIN b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.BPKNo = b.BPKNo
	AND a.ReturnNo = b.ReturnNo
	AND a.SalesModelCode = b.SalesModelCode
	AND a.SalesModelYear = b.SalesModelYear
WHERE a.CompanyCode = @p_CompanyCode
	AND a.BranchCode = @p_BranchCode
	AND a.ReturnNo = @ReturnNo

END
GO

if object_id('sp_InquirySPK') is not null
	drop procedure sp_InquirySPK
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySPK] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SPKDateFrom DateTime,
 @SPKDateTo DateTime,
 @NoSPKFrom varchar(100),
 @NoSPKTo varchar(100),
 @NoChassisFrom varchar(100),
 @NoChassisTo varchar(100),
 @SupplierCode varchar(100),
 @SupplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.SPKNo, 
convert(varchar(20),a.SPKDate,106) as SPKDate, 
a.RefferenceNo, 
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
b.SupplierName AS SupplierName, a.Remark, 
	CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM 
	omTrSalesSPK a
LEFT JOIN 
	gnMstSupplier b ON b.CompanyCode = a.CompanyCode AND b.SupplierCode = a.SupplierCode
LEFT JOIN omTrSalesSPKDetail c
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCode = c.BranchCode
	AND a.SPKNo = c.SPKNo
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SPKDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.SPKDate between ''' + convert(varchar(50),@SPKDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SPKDateTo) + ''''

if len(rtrim(@NoSPKFrom)) > 0
   set @pQuery = @pQuery + ' and a.SPKNo between ''' + rtrim(@NoSPKFrom) + '''' + ' and ' + '''' + rtrim(@NoSPKTo) + ''''

if len(rtrim(@NoChassisFrom)) > 0
   set @pQuery = @pQuery + ' and c.ChassisNo between ''' + rtrim(@NoChassisFrom) + '''' + ' and ' + '''' + rtrim(@NoChassisTo) + ''''

if len(rtrim(@SupplierCode)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@SupplierCode) + '''' + ' and ' + '''' + rtrim(@SupplierCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.SPKNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryStokKendaraan') is not null
	drop procedure sp_InquiryStokKendaraan
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryStokKendaraan] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @year varchar(10),
 @Month varchar(10),
 @WarehouseCode varchar(100),
 @WarehouseCodeTo Varchar(100),
 @SalesModelCode Varchar(100),
 @SalesModelCodeTo Varchar(100),
 @SalesModelYear Varchar(100),
 @SalesModelYearTo Varchar(100),
 @ColourCode Varchar(100),
 @ColourCodeTo Varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT CONVERT(Varchar,a.Year) as Year
     , CASE WHEN a.Month = 1 THEN ''Januari''
            WHEN a.Month = 2 THEN ''Februari''
            WHEN a.Month = 3 THEN ''Maret'' 
            WHEN a.Month = 4 THEN ''April'' 
            WHEN a.Month = 5 THEN ''Mei'' 
            WHEN a.Month = 6 THEN ''Juni''
            WHEN a.Month = 7 THEN ''Juli'' 
            WHEN a.Month = 8 THEN ''Agustus'' 
            WHEN a.Month = 9 THEN ''September'' 
            WHEN a.Month = 10 THEN ''Oktober''
            WHEN a.Month = 11 THEN ''November'' 
            WHEN a.Month = 12 THEN ''Desember'' 
        END AS Month
     , (select top 1 RefferenceDesc1
          from omMstRefference
         where CompanyCode = a.CompanyCode
           and RefferenceType = ''WARE''
           and RefferenceCode = a.WarehouseCode
         ) as WareHouseName
     , a.SalesModelCode
     , b.SalesModelDesc
     , CONVERT(Varchar,a.SalesModelYear) as ModelYear
     , (c.RefferenceCode + '' - '' + c.RefferenceDesc1) as ColourName
     , a.BeginningAV
     , a.QtyIn
     , a.Alocation
     , a.QtyOut
     , a.EndingAV
  FROM OmTrInventQtyVehicle a 
 INNER JOIN omMstModel b
    ON a.CompanyCode = b.CompanyCode
   AND a.SalesModelCode = b.SalesModelCode 
 INNER JOIN omMstRefference c
    ON a.CompanyCode = c.CompanyCode  
   AND a.ColourCode = c.RefferenceCode                                       
WHERE 1 = 1
'

if len(rtrim(@year)) > 0
   set @pQuery = @pQuery + ' and a.Year = ''' + rtrim(@year) + ''''

if len(rtrim(@Month)) > 0
   set @pQuery = @pQuery + ' and a.Month = ''' + rtrim(@Month) + ''''

if len(rtrim(@WarehouseCode)) > 0
   set @pQuery = @pQuery + ' and a.WarehouseCode between ''' + rtrim(@WarehouseCode) + '''' + ' and ' + '''' + rtrim(@WarehouseCodeTo) + ''''

if len(rtrim(@SalesModelCode)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCode between ''' + rtrim(@SalesModelCode) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeTo) + ''''

if len(rtrim(@SalesModelYear)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYear) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@ColourCode)) > 0
   set @pQuery = @pQuery + ' and a.ColourCode between ''' + rtrim(@ColourCode) + '''' + ' and ' + '''' + rtrim(@ColourCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.Year, a.Month, a.SalesModelCode '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryStokPerlengkapan') is not null
	drop procedure sp_InquiryStokPerlengkapan
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryStokPerlengkapan] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @Status varchar(10),
 @Year varchar(10),
 @Month varchar(10),
 @PerlengkapanCode varchar(100),
 @PerlengkapanCodeTo Varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT CONVERT(Varchar,a.Year) as Year, 
CASE WHEN a.Month = 1 THEN ''Januari'' 
	WHEN a.Month = 2 THEN ''Februari''
	WHEN a.Month = 3 THEN ''Maret'' 
	WHEN a.Month = 4 THEN ''April'' 
	WHEN a.Month = 5 THEN ''Mei'' 
	WHEN a.Month = 6 THEN ''Juni''
	WHEN a.Month = 7 THEN ''Juli'' 
	WHEN a.Month = 8 THEN ''Agustus'' 
	WHEN a.Month = 9 THEN ''September'' 
	WHEN a.Month = 10 THEN ''Oktober''
	WHEN a.Month = 11 THEN ''November'' 
	WHEN a.Month = 12 THEN ''Desember'' 
END AS Month
, a.PerlengkapanCode, b.PerlengkapanName, a.QuantityBeginning, a.QuantityIn, 
a.QuantityOut, a.QuantityEnding, CASE WHEN b.Status = 0 THEN ''Not Active'' WHEN b.Status = 1 THEN ''Active'' END AS Status 
FROM OMTrInventQtyPerlengkapan a 
INNER JOIN OMMstPerlengkapan b
ON a.CompanyCode = b.CompanyCode 
AND a.BranchCode = b.BranchCode
AND a.PerlengkapanCode = b.PerlengkapanCode

WHERE 1 = 1
'
if len(rtrim(@Status)) > 0
   set @pQuery = @pQuery + ' and b.Status = ''' + rtrim(@Status) + ''''

if len(rtrim(@Year)) > 0
   set @pQuery = @pQuery + ' and a.Year = ''' + rtrim(@year) + ''''

if len(rtrim(@Month)) > 0
   set @pQuery = @pQuery + ' and a.Month = ''' + rtrim(@Month) + ''''

if len(rtrim(@PerlengkapanCode)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanCode between ''' + rtrim(@PerlengkapanCode) + '''' + ' and ' + '''' + rtrim(@PerlengkapanCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.Year, a.Month, a.PerlengkapanCode '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryTransferIn') is not null
	drop procedure sp_InquiryTransferIn
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferIn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @TransferInDateFrom DateTime,
 @TransferInDateTo DateTime,
 @NoTransferInFrom varchar(100),
 @NoTransferInTo varchar(100),
 @NoTransferOutFrom varchar(100),
 @NoTransferOutTo varchar(100),
 @GudangTujuanAwal varchar(100),
 @GudangTujuanAkhir varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'


SELECT 
	a.TransferInNo, 
	convert(varchar(20),a.TransferInDate,106) as TransferInDate,
	a.TransferOutNo, a.ReferenceNo, 
	case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate, 
	c.BranchName as BranchNameFrom, 
	(select b.RefferenceDesc1  from OmTrInventTransferIn x INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeFrom = b.RefferenceCode AND x.TransferInNo= a.TransferInNo)as WareHouseNameFrom , 
	d.BranchName as BranchNameTo, 
	(select b.RefferenceDesc1  from OmTrInventTransferIn x INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeTo = b.RefferenceCode AND x.TransferInNo= a.TransferInNo)as WareHouseNameTo, 
	case when year(a.ReturnDate) = ''1900'' then '''' else convert(varchar(20),a.ReturnDate,106) end as ReturnDate, 
	a.Remark, CASE WHEN a.Status = 0 THEN ''Open'' WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Closed'' WHEN a.Status = 3 THEN ''Canceled'' END AS Status
FROM 
	OmTrInventTransferIn a 
INNER JOIN 
	gnMstOrganizationDtl c 
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCodeFrom = c.BranchCode
INNER JOIN 
	gnMstOrganizationDtl d 
	ON a.CompanyCode = d.CompanyCode
	AND a.BranchCodeTo = d.BranchCode
WHERE 1 = 1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@TransferInDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.TransferInDate between ''' + convert(varchar(50),@TransferInDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@TransferInDateTo) + ''''

if len(rtrim(@NoTransferOutFrom)) > 0
   set @pQuery = @pQuery + ' and a.TransferOutNo between ''' + rtrim(@NoTransferOutFrom) + '''' + ' and ' + '''' + rtrim(@NoTransferOutTo) + ''''

if len(rtrim(@NoTransferInFrom)) > 0
   set @pQuery = @pQuery + ' and a.TransferInNo between ''' + rtrim(@NoTransferInFrom) + '''' + ' and ' + '''' + rtrim(@NoTransferInTo) + ''''

if len(rtrim(@GudangTujuanAwal)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCodeTo between ''' + rtrim(@GudangTujuanAwal) + '''' + ' and ' + '''' + rtrim(@GudangTujuanAkhir) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.TransferInNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryTransferInDetail') is not null
	drop procedure sp_InquiryTransferInDetail
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferInDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @TransferInNo varchar(15)
)
AS
BEGIN

SELECT a.SalesModelCode,Convert(varchar,a.SalesModelYear) as SalesModelYear,b.SalesModelDesc,
a.ChassisCode,Convert(varchar,a.ChassisNo) as ChassisNo,a.EngineCode,Convert(varchar,a.EngineNo) as EngineNo,a.ColourCode,
c.RefferenceDesc1 as ColourName,a.Remark
FROM OmTrInventTransferInDetail a
LEFT JOIN omMstModel b
ON a.CompanyCode = b.CompanyCode
AND a.SalesModelCode = b.SalesModelCode
LEFT JOIN omMstRefference c
ON a.CompanyCode = c.CompanyCode
AND a.ColourCode = c.RefferenceCode
WHERE c.RefferenceType = 'COLO'
AND a.CompanyCode = @p_CompanyCode
AND a.BranchCode = @p_BranchCode
AND a.TransferInNo = @TransferInNo
ORDER BY a.SalesModelCode,a.SalesModelYear,a.ChassisNo ASC

END
GO

if object_id('sp_InquiryTransferOut') is not null
	drop procedure sp_InquiryTransferOut
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferOut] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @TransferOutDateFrom DateTime,
 @TransferOutDateTo DateTime,
 @NoTransferOutFrom varchar(100),
 @NoTransferOutTo varchar(100),
 @GudangAsalAwal varchar(100),
 @GudangAsalAkhir varchar(100),
 @CabangTujuanAwal varchar(100),
 @CabangTujuanAkhir varchar(100),
 @GudangTujuanAwal varchar(100),
 @GudangTujuanAkhir varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
	a.TransferOutNo, convert(varchar(20),a.TransferOutDate,106) as TransferOutDate,
	a.ReferenceNo, case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate,
	c.BranchName as BranchNameFrom, 
	(select b.RefferenceDesc1  from OmTrInventTransferOut x 
	INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode 
	AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeFrom = b.RefferenceCode 
	AND x.TransferOutNo= a.TransferOutNo)as WareHouseNameFrom,
	d.BranchName as BranchNameTo, 
	(select b.RefferenceDesc1  from OmTrInventTransferOut x 
	INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode 
	AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeTo = b.RefferenceCode 
	AND x.TransferOutNo= a.TransferOutNo)as WareHouseNameTo,
	case when year(a.ReturnDate) = ''1900'' then '''' else convert(varchar(20),a.ReturnDate,106) end as ReturnDate,
	a.Remark, CASE WHEN a.Status = 0 THEN ''Open'' WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Closed'' WHEN a.Status = 3 THEN ''Canceled'' END AS Status
FROM 
	OmTrInventTransferOut a 
	INNER JOIN gnMstOrganizationDtl c 
	ON a.CompanyCode = c.CompanyCode 
	AND a.BranchCodeFrom = c.BranchCode
	INNER JOIN gnMstOrganizationDtl d 
	ON a.CompanyCode = d.CompanyCode 
	AND a.BranchCodeTo = d.BranchCode
WHERE 1 = 1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@TransferOutDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.TransferOutDate between ''' + convert(varchar(50),@TransferOutDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@TransferOutDateTo) + ''''

if len(rtrim(@NoTransferOutFrom)) > 0
   set @pQuery = @pQuery + ' and a.TransferOutNo between ''' + rtrim(@NoTransferOutFrom) + '''' + ' and ' + '''' + rtrim(@NoTransferOutTo) + ''''

if len(rtrim(@GudangAsalAwal)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCodeFrom between ''' + rtrim(@GudangAsalAwal) + '''' + ' and ' + '''' + rtrim(@GudangAsalAkhir) + ''''

if len(rtrim(@CabangTujuanAwal)) > 0
   set @pQuery = @pQuery + ' and a.BranchCodeTo between ''' + rtrim(@CabangTujuanAwal) + '''' + ' and ' + '''' + rtrim(@CabangTujuanAkhir) + ''''

if len(rtrim(@GudangTujuanAwal)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCodeTo between ''' + rtrim(@GudangTujuanAwal) + '''' + ' and ' + '''' + rtrim(@GudangTujuanAkhir) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.TransferOutNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO

if object_id('sp_InquiryTransferOutDetail') is not null
	drop procedure sp_InquiryTransferOutDetail
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferOutDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @TransferOutNo varchar(15)
)
AS
BEGIN

SELECT Convert(varchar,a.TransferOutSeq) as TransferOutSeq,a.SalesModelCode,Convert(varchar,a.SalesModelYear) as SalesModelYear,b.SalesModelDesc,
a.ChassisCode,Convert(varchar,a.ChassisNo) as ChassisNo,a.EngineCode,Convert(varchar,a.EngineNo) as EngineNo,a.ColourCode,
c.RefferenceDesc1 as ColourName,a.Remark
FROM OmTrInventTransferOutDetail a
LEFT JOIN omMstModel b
ON a.CompanyCode = b.CompanyCode
AND a.SalesModelCode = b.SalesModelCode
LEFT JOIN omMstRefference c
ON a.CompanyCode = c.CompanyCode
AND a.ColourCode = c.RefferenceCode
WHERE c.RefferenceType = 'COLO'
AND a.CompanyCode = @p_CompanyCode
AND a.BranchCode = @p_BranchCode
AND a.TransferOutNo = @TransferOutNo
ORDER BY a.TransferOutSeq, a.SalesModelCode,a.SalesModelYear,a.ChassisNo ASC

END
GO

if object_id('sp_InqVehicleHistory4Lookup') is not null
	drop procedure sp_InqVehicleHistory4Lookup
GO
CREATE procedure [dbo].[sp_InqVehicleHistory4Lookup] (
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProfitCenterCode varchar(15)
)
as
begin
	 select distinct
                     a.PoliceRegNo
                    ,a.CustomerCode
                    ,b.CustomerName
                    ,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
                    ,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
                    , b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
                    ,a.DealerCode
                    ,c.CustomerName DealerName
                    , (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
                    ,a.ChassisCode
                    ,  cast(a.ChassisNo as varchar) ChassisNo
                    ,a.EngineCode
                    ,  cast(a.EngineNo as varchar) EngineNo
                    ,a.ServiceBookNo
                    ,a.ClubCode
                    ,a.ColourCode
                    ,case a.FakturPolisiDate when ('19000101') then null else a.FakturPolisiDate end FakturPolisiDate
                    ,a.ClubNo
                    ,case a.ClubDateStart when ('19000101') then null else a.ClubDateStart end ClubDateStart
                    ,case a.ClubDateFinish when ('19000101') then null else a.ClubDateFinish end ClubDateFinish
                    ,case a.ClubSince when ('19000101') then null else a.ClubSince end ClubSince
                    , (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
                    ,a.IsClubStatus
                    , (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
                    ,a.IsActive
                    , (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
                    ,a.BasicModel
                    ,a.TransmissionType
                    ,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
                    ,a.LastJobType
                    ,a.ChassisNo
                    ,a.ContractNo
                    ,a.ContactName
                    ,b.CityCode
                    ,f.LookUpValueName CityName
                    from svMstCustomerVehicle a
                    left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	                    and b.CustomerCode = a.CustomerCode
                    left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	                    and c.CustomerCode = a.DealerCode
                    left join svMstJob d on 
	                    d.CompanyCode = a.CompanyCode and
	                    d.BasicModel = a.BasicModel 	
                    inner join gnMstCustomerProfitCenter e on 
                        e.CompanyCode = a.CompanyCode and
                        e.CustomerCode = a.CustomerCode
                    left join gnMstLookupDtl f on 
                        f.CompanyCode = a.CompanyCode and
                        f.CodeID = 'CITY' and
                        f.LookUpValue = b.CityCode
                    where a.CompanyCode=@CompanyCode and a.IsActive = 1 and e.BranchCode = @BranchCode and e.ProfitCenterCode = @ProfitCenterCode
END
GO

if object_id('sp_InsertHistoryItemStatusTuning') is not null
	drop procedure sp_InsertHistoryItemStatusTuning
GO





CREATE procedure [dbo].[sp_InsertHistoryItemStatusTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year numeric(10),
@Month numeric(10),
@CreatedBy varchar(10))


as

DELETE spHstItemStatus WHERE YEAR = @Year AND MONTH = @Month and CompanyCode = @CompanyCode and BranchCode = @BranchCode
SELECT
	a.CompanyCode     
	, a.BranchCode      
	, @Year Year                                    
	, @Month Month                                   
	, a.PartNo   
	, a.WarehouseCode            
	, b.MovingCode      
	, b.ABCClass 
	, ISNULL(c.PurchasePrice, 0) PurchasePrice                           
	, ISNULL(c.CostPrice, 0) CostPrice                               
	, ISNULL(c.RetailPrice, 0) RetailPrice                             
	, ISNULL(c.RetailPriceInclTax, 0) RetailPriceInclTax                     
	, ISNULL(b.LeadTime, 0) LeadTime                                
	, ISNULL(b.OrderPointQty, 0) OrderPoint                              
	, ISNULL(b.SafetyStock, 0) SafetyStock                             
	, ISNULL(b.OrderCycle, 0) OrderCycle                             
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(b.OnOrder, 0) ELSE 0 END OnOrder 
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(b.InTransit, 0) ELSE 0 END InTransit                              
	, ISNULL(a.OnHand, 0) OnHand                                  
	, ISNULL(a.AllocationSP, 0) AllocationSP                           
	, ISNULL(a.AllocationSR, 0) AllocationSR                            
	, ISNULL(a.AllocationSL, 0) AllocationSL                           
	, ISNULL(a.ReservedSP, 0) ReservedSP                             
	, ISNULL(a.ReservedSR, 0) ReservedSR                             
	, ISNULL(a.ReservedSL, 0) ReservedSL                             
	, ISNULL(a.BackOrderSP, 0) BackOrderSP                            
	, ISNULL(a.BackOrderSR, 0) BackOrderSR                           
	, ISNULL(a.BackOrderSL, 0) BackOrderSL                            
	, ISNULL(b.BorrowQty, 0) BorrowQty                              
	, ISNULL(b.BorrowedQty, 0) BorrowedQty                             
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(b.DemandAverage, 0) ELSE 0 END DemandAverage
	, (SELECT ISNULL(DiscPct, 0) FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) DiscPct                                
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN b.LastPurchaseDate ELSE '' END LastPurchaseDate       
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN b.LastDemandDate ELSE '' END LastDemandDate        
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN b.LastSalesDate ELSE '' END LastSalesDate         
	, b.Status 
	, b.ProductType 
	, b.PartCategory 
	, b.TypeOfGoods 
	, @CreatedBy CreatedBy       
	, GETDATE() CreatedDate
INTO #TempHstItemStatus	
FROM
	spMstItemLoc a
	LEFT JOIN spMstItems b WITH(NOWAIT, NOLOCK) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
	LEFT JOIN spMstItemPrice c WITH(NOWAIT, NOLOCK) ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo	
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode

INSERT INTO SpHstItemStatus SELECT * FROM #TempHstItemStatus
DROP TABLE #TempHstItemStatus






GO

if object_id('sp_InsertHistoryMovementTuning') is not null
	drop procedure sp_InsertHistoryMovementTuning
GO






CREATE procedure [dbo].[sp_InsertHistoryMovementTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year int,
@Month int,
@PID varchar(10)
)


as

-- delete spHstStockMovement based on Year and Month
-- Include all coloumn into one than insert spHstStockMovement

delete spHstStockMovement where Year = @Year AND Month = @Month and CompanyCode = @CompanyCode and BranchCode = @BranchCode

SELECT * INTO #A1 FROM
(
SELECT a.CompanyCode, a.BranchCode, a.PartNo PartNo, a.WarehouseCode WareHouseCode, 
a.LocationCode LocationCode,  
a.OnHand OnHand,
a.BOMInvQty BOMInvQty,
(SELECT ISNULL(SUM(x.ReceivedQty), 0) RcvQty FROM spTrnPRcvDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.WRSNo = b.WRSNo
	WHERE Year(b.WRSDate) = @Year
	  AND Month(b.WRSDate) = @Month
	  AND b.CompanyCode = @CompanyCode
      AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
      AND b.Status NOT IN (0, 1, 3)) AS RcvQtyIN,
(SELECT ISNULL(SUM(x.QtyAdjustment), 0) AdjQty FROM spTrnIAdjustDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIAdjustHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.AdjustmentNo = b.AdjustmentNo
	WHERE YEAR(b.AdjustmentDate) = @Year
      AND MONTH(b.AdjustmentDate) = @Month
      AND b.CompanyCode = @CompanyCode
      AND b.BranchCode = @BranchCode
      AND x.WarehouseCode = a.WarehouseCode
      AND x.PartNo = a.PartNo
      AND x.AdjustmentCode = '+'
      AND b.Status = 2) AS AdjQtyIN,
(SELECT ISNULL(SUM(x.Qty),0) FROM spTrnIWHTrfDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIWHTrfHDR b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.WHTrfNo = b.WHTrfNo 
	WHERE YEAR(b.WHTrfDate) = @Year
	  AND MONTH(b.WHTrfDate) = @Month
	  AND b.CompanyCode =@CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.ToWarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND b.Status = 2
) AS WhtQtyIN,
(SELECT ISNULL(SUM(x.QtyReturn), 0) RturQty FROM spTrnSRturDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnSRturHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.ReturnNo = b.ReturnNo
	WHERE YEAR(b.ReturnDate) = @Year
	  AND MONTH(b.ReturnDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND b.Status = 2) AS RtrQtyIN,
(SELECT ISNULL(SUM(x.QtyReturn),0) RturQty FROM spTrnSRturSSDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnSRturSSHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.ReturnNo = b.ReturnNo
	WHERE YEAR(b.ReturnDate) = @Year
	  AND MONTH(b.ReturnDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo	
	  AND b.Status = 2) AS SSQtyIN,
(SELECT ISNULL(SUM(x.QtyBill)  ,0) FROM spTrnSFPJDtl x WITH(NOLOCK, NOWAIT)JOIN spTrnSFPJHdr b WITH(NOLOCK, NOWAIT)
 ON  x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.FPJNo = b.FPJNo
	WHERE YEAR(b.FPJDate) = @Year
	  AND MONTH(b.FPJDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo) AS FpjQtyOUT,
(SELECT ISNULL(SUM(x.QtyBill) ,0)FROM spTrnSLmpDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnSLmpHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.LmpNo = b.LmpNo 
	WHERE YEAR(b.LmpDate) = @Year
	  AND MONTH(b.LmpDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo) AS LmpQtyOUT,
(SELECT ISNULL(SUM(x.QtyAdjustment), 0) AdjQty FROM spTrnIAdjustDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIAdjustHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.AdjustmentNo = b.AdjustmentNo 
	WHERE YEAR(b.AdjustmentDate) = @Year
	  AND MONTH(b.AdjustmentDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND x.AdjustmentCode = '-'
	  AND b.Status = 2) AS AdjQtyOUT,
(SELECT ISNULL(SUM(x.Qty),0) FROM spTrnIWHTrfDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIWHTrfHDR b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.WHTrfNo = b.WHTrfNo 
	WHERE YEAR(b.WHTrfDate) = @Year
	  AND MONTH(b.WHTrfDate) = @Month
	  AND b.CompanyCode =@CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.FromWarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND b.Status = 2) AS WhtQtyOUT 
FROM spMstItemLoc a WITH(NOLOCK, NOWAIT)
WHERE a.CompanyCode = @CompanyCode
  AND a.BranchCode = @BranchCode
) a1

SELECT * INTO #A2 FROM
(
	SELECT a.CompanyCode, a.BranchCode, @Year AS Year, @Month AS Month, a.WarehouseCode, a.LocationCode, a.PartNo, 
        BOMInvQty AS BOMStock, 
		(RcvQtyIN + AdjQtyIN + WhtQtyIN + RtrQtyIN + SSQtyIN) AS MoveIn,
        (FpjQtyOUT + LmpQtyOUT + AdjQtyOUT + WhtQtyOUT ) AS MoveOut,
        (BOMInvQty + ((RcvQtyIN + AdjQtyIN + WhtQtyIN + RtrQtyIN + SSQtyIN ) - 
        (FpjQtyOUT + LmpQtyOUT + AdjQtyOUT + WhtQtyOUT))) AS EOMStock, 
		ISNULL(b.CostPrice,0) AS CostPrice,
        @PID AS CreatedBy, GetDate() AS CreatedDate,
		@PID AS LastUpdateBy, GetDate() AS LastUpdateDate
	FROM #A1 a WITH(NOLOCK, NOWAIT)
		LEFT JOIN SpMstItemPrice b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
) b1

insert into spHstStockMovement select * from #A2
drop table #A1
drop table #A2


GO

if object_id('sp_InsertTransactionHistoryTuning') is not null
	drop procedure sp_InsertTransactionHistoryTuning
GO






CREATE procedure [dbo].[sp_InsertTransactionHistoryTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Month int,
@Year int,
@CreatedBy varchar(10),
@CreatedDate datetime
)


as

DELETE spHstTransaction WHERE YEAR = @Year AND MONTH = @Month and CompanyCode = @CompanyCode and BranchCode = @BranchCode
SELECT 
	itemLoc.CompanyCode
    , itemLoc.BranchCode
    , itemLoc.PartNo
	, @Year Year
	, @Month Month
    , itemLoc.WarehouseCode
    , ProductType
    , PartCategory
    , MovingCode
    , ABCClass
    , TypeOfGoods
    , ISNULL(CostPrice, 0) CostPrice        
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForPurchaseQty, 0) ELSE 0 END ReceivingForPurchaseQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForNPurchaseQty, 0) ELSE 0 END ReceivingForNPurchaseQty
	, ISNULL(Adjustment.AdjustmentPlusQty, 0) AdjustmentPlusQty
	, ISNULL(Adjustment.AdjustmentMinusQty, 0) AdjustmentMinusQty
	, ISNULL(WHTrf.WTHOutQty, 0) WTHOutQty
	, ISNULL(WHTrf.WTHInQty, 0) WTHInQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCreditQty, 0) ELSE 0 END SalesForCreditQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCashQty, 0) ELSE 0 END SalesForCashQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForBPSQty, 0) ELSE 0 END SalesForBPSQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForServiceQty, 0) ELSE 0 END SalesForServiceQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForUnitQty, 0) ELSE 0 END SalesForUnitQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCreditQty, 0) ELSE 0 END ReturForSalesCreditQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCashQty, 0) ELSE 0 END ReturForSalesCashQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturnForBPSQty, 0) ELSE 0 END ReturnForBPSQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForServiceQty, 0) ELSE 0 END ReturForServiceQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForUnitQty, 0) ELSE 0 END ReturForUnitQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(POS.PurchaseOrderQty, 0) ELSE 0 END PurchaseOrderQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.OnOrderQty, 0) ELSE 0 END OnOrderQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.InTransitQty, 0) ELSE 0 END InTransitQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(BO.BackOrderQty, 0) ELSE 0 END BackOrderQty
	, ISNULL(itemLoc.OnHand, 0) OnHand
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForPurchaseAmt, 0) ELSE 0 END ReceivingForPurchaseAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForNPurchaseAmt, 0) ELSE 0 END ReceivingForNPurchaseAmt
	, ISNULL(Adjustment.AdjustmentPlusAmt, 0) AdjustmentPlusAmt
	, ISNULL(Adjustment.AdjustmentMinusAmt, 0) AdjustmentMinusAmt
	, ISNULL(WHTrf.WTHOutAmt, 0) WTHOutAmt
	, ISNULL(WHTrf.WTHInAmt, 0) WTHInAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCreditAmt, 0) ELSE 0 END SalesForCreditAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCashAmt, 0) ELSE 0 END SalesForCashAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForBPSAmt, 0) ELSE 0 END SalesForBPSAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForServiceAmt, 0) ELSE 0 END SalesForServiceAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForUnitAmt, 0) ELSE 0 END SalesForUnitAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCreditAmt, 0) ELSE 0 END ReturForSalesCreditAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCashAmt, 0) ELSE 0 END ReturForSalesCashAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturnForBPSAmt, 0) ELSE 0 END ReturnForBPSAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForServiceAmt, 0) ELSE 0 END ReturForServiceAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForUnitAmt, 0) ELSE 0 END ReturForUnitAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(POS.PurchaseOrderAmt, 0) ELSE 0 END PurchaseOrderAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.OnOrderAmt, 0) ELSE 0 END OnOrderAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.InTransitAmt, 0) ELSE 0 END InTransitAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(BO.BackOrderAmt, 0) ELSE 0 END BackOrderAmt
	, ISNULL(itemLoc.OnHand, 0) * ISNULL(itemPrice.CostPrice, 0) OnHandAmt
	, @CreatedBy CreatedBy
	, @CreatedDate CreatedDate
INTO #HstTransaction
FROM spMstItemLoc itemLoc WITH(NOLOCK, NOWAIT)
	LEFT JOIN (SELECT rcvDtl.PartNo, rcvDtl.WarehouseCode 
		    , SUM(CASE WHEN (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) ELSE 0 END) ReceivingForPurchaseQty
            , SUM(CASE WHEN NOT (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) ELSE 0 END) ReceivingForNPurchaseQty	
            , SUM(CASE WHEN (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) - ROUND(ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) * ISNULL(rcvDtl.DiscPct, 0) / 100, 0) ELSE 0 END) ReceivingForPurchaseAmt
            , SUM(CASE WHEN NOT (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) - ROUND(ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) * ISNULL(rcvDtl.DiscPct, 0) / 100, 0) ELSE 0 END) ReceivingForNPurchaseAmt			
		FROM spTrnPRcvHdr rcvHdr WITH(NOLOCK, NOWAIT)
			INNER JOIN spTrnPRcvDtl rcvDtl with (nolock, nowait) ON rcvHdr.WRSNo = rcvDtl.WrsNo
				AND rcvHdr.CompanyCode = rcvDtl.CompanyCode
				AND rcvHdr.BranchCode = rcvDtl.BranchCode				                
		WHERE	rcvHdr.CompanyCode = @CompanyCode
			AND rcvHdr.BranchCode = @BranchCode
			AND MONTH(rcvHdr.WRSDate) = @Month 
			AND YEAR(rcvHdr.WRSDate) = @Year
			AND rcvHdr.Status NOT IN (0, 1, 3)
		GROUP BY rcvDtl.PartNo, rcvDtl.WarehouseCode			
	) Receiving ON itemLoc.PartNo = Receiving.PartNo AND itemloc.WarehouseCode = Receiving.WarehouseCode
	LEFT JOIN (SELECT adjDtl.PartNo, adjDtl.WarehouseCode
			, SUM(CASE adjustmentCode WHEN '+' THEN ISNULL(QtyAdjustment, 0) ELSE 0 END) AdjustmentPlusQty
			, SUM(CASE adjustmentCode WHEN '-' THEN ISNULL(QtyAdjustment, 0) ELSE 0 END) AdjustmentMinusQty	
            , SUM(CASE adjustmentCode WHEN '+' THEN ISNULL(QtyAdjustment, 0) * ISNULL(CostPrice, 0) ELSE 0 END) AdjustmentPlusAmt
			, SUM(CASE adjustmentCode WHEN '-' THEN ISNULL(QtyAdjustment, 0) * ISNULL(CostPrice, 0) ELSE 0 END) AdjustmentMinusAmt	
		FROM spTrnIAdjustHdr adjHdr WITH(NOLOCK, NOWAIT)
			INNER JOIN spTrnIAdjustDtl adjDtl WITH(NOLOCK, NOWAIT) ON adjHdr.AdjustmentNo = adjDtl.AdjustmentNo
				AND adjHdr.CompanyCode = adjDtl.CompanyCode 
				AND adjHdr.BranchCode = adjDtl.BranchCode				                
		WHERE adjHdr.CompanyCode = @CompanyCode
			AND adjHdr.BranchCode  = @BranchCode
			AND MONTH(adjHdr.AdjustmentDate) = @Month
			AND YEAR(adjHdr.AdjustmentDate) = @Year
			AND adjHdr.Status = 2
		GROUP BY adjDtl.PartNo, adjDtl.WarehouseCode
	) Adjustment ON itemLoc.PartNo = Adjustment.PartNo AND itemloc.WarehouseCode = Adjustment.WarehouseCode
	LEFT JOIN (SELECT aWHTrf.PartNo, aWHTrf.warehouseCode 
			, SUM(ISNULL(aWHTrf.WTHOutQty, 0))WTHOutQty , SUM(ISNULL(aWHTrf.WTHInQty, 0))WTHInQty  
            , SUM(ISNULL(aWHTrf.WTHOutAmt, 0))WTHOutAmt , SUM(ISNULL(aWHTrf.WTHInAmt, 0))WTHInAmt
        FROM 
        (SELECT whTrfDtl.PartNo, whTrfDtl.FromWarehouseCode warehouseCode 
			    , SUM(ISNULL(Qty,0)) WTHOutQty, 0 WTHInQty 
                , SUM(ISNULL(Qty, 0) * ISNULL(CostPrice, 0)) WTHOutAmt, 0 WTHInAmt
	        FROM spTrnIWhTrfHdr whTrfHdr WITH(NOLOCK, NOWAIT)
				INNER JOIN spTrnIWhTrfDtl whTrfDtl WITH(NOLOCK, NOWAIT) ON whTrfHdr.WHTrfNo = whTrfDtl.WHTrfNo
				AND whTrfHdr.CompanyCode = whTrfDtl.CompanyCode
				AND whTrfHdr.BranchCode = whTrfDtl.BranchCode			                
			WHERE whTrfHdr.CompanyCode = @CompanyCode
				AND whTrfHdr.BranchCode = @BranchCode
				AND MONTH(whTrfHdr.WHTrfDate) = @Month
				AND YEAR(whTrfHdr.WHTrfDate) = @Year
				AND whTrfHdr.Status = 2
			GROUP BY whTrfDtl.PartNo, whTrfDtl.FromWarehouseCode
			UNION ALL
			SELECT whTrfDtl.PartNo, whTrfDtl.ToWarehouseCode warehouseCode 
				,0 WTHOutQty, SUM(ISNULL(Qty, 0)) WTHInQty 
                ,0 WTHOutAmt, SUM(ISNULL(Qty, 0) * ISNULL(CostPrice, 0)) WTHInAmt 
			FROM spTrnIWhTrfHdr whTrfHdr WITH(NOLOCK, NOWAIT)
				INNER JOIN spTrnIWhTrfDtl whTrfDtl WITH(NOLOCK, NOWAIT) ON whTrfHdr.WHTrfNo = whTrfDtl.WHTrfNo
				AND whTrfHdr.CompanyCode = whTrfDtl.CompanyCode
				AND whTrfHdr.BranchCode = whTrfDtl.BranchCode			                
			WHERE whTrfHdr.CompanyCode = @CompanyCode
				AND whTrfHdr.BranchCode = @BranchCode
				AND MONTH(whTrfHdr.WHTrfDate) = @Month
				AND YEAR(whTrfHdr.WHTrfDate) = @Year
				AND whTrfHdr.Status = 2
			GROUP BY whTrfDtl.PartNo, whTrfDtl.ToWarehouseCode 
        ) aWHTrf
        GROUP BY aWHTrf.PartNo, aWHTrf.WarehouseCode
	) WHTrf ON itemLoc.PartNo = WHTrf.PartNo AND itemloc.WarehouseCode = WHTrf.WarehouseCode
	LEFT JOIN (SELECT fpjDtl.PartNo, fpjDtl.WarehouseCode
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(QtyBill, 0) ELSE 0 END) as SalesForCashQty
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(QtyBill, 0) ELSE 0 END) as SalesForCreditQty
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(QtyBill, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as SalesForCashAmt
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(QtyBill, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as SalesForCreditAmt
        FROM spTrnSFPJHdr fpjHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSFPJDtl fpjDtl WITH(NOLOCK, NOWAIT) ON fpjHdr.FPJNo = fpjDtl.FPJNo
                AND fpjHdr.CompanyCode = fpjDtl.CompanyCode
                AND fpjHdr.BranchCode = fpjDtl.BranchCode				                
        WHERE fpjHdr.CompanyCode = @CompanyCode
            AND fpjHdr.BranchCode = @BranchCode
            AND MONTH(fpjHdr.FPJDate) = @Month
            AND YEAR(fpjHdr.FPJDate) = @Year
        GROUP BY fpjDtl.PartNo, fpjDtl.WarehouseCode
	) FPJ ON itemLoc.PartNo = FPJ.PartNo AND itemloc.WarehouseCode = FPJ.WarehouseCode
	LEFT JOIN (SELECT lmpDtl.PartNo, lmpDtl.WarehouseCode
            , SUM(CASE bpsHdr.SalesType WHEN 1 THEN ISNULL(lmpDtl.QtyBill, 0) ELSE 0 END) as SalesForBPSQty
            , SUM(CASE bpsHdr.SalesType WHEN 2 THEN ISNULL(lmpDtl.QtyBill, 0) ELSE 0 END) as SalesForServiceQty
            , SUM(CASE bpsHdr.SalesType WHEN 3 THEN ISNULL(lmpDtl.QtyBill, 0) ELSE 0 END) as SalesForUnitQty
            , SUM(CASE bpsHdr.SalesType WHEN 1 THEN ISNULL(lmpDtl.QtyBill, 0) * ISNULL(lmpDtl.CostPrice, 0) ELSE 0 END) as SalesForBPSAmt
            , SUM(CASE bpsHdr.SalesType WHEN 2 THEN ISNULL(lmpDtl.QtyBill, 0) * ISNULL(lmpDtl.CostPrice, 0) ELSE 0 END) as SalesForServiceAmt
            , SUM(CASE bpsHdr.SalesType WHEN 3 THEN ISNULL(lmpDtl.QtyBill, 0) * ISNULL(lmpDtl.CostPrice, 0) ELSE 0 END) as SalesForUnitAmt
        FROM spTrnSLmpHdr lmpHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSBPSFHdr bpsHdr WITH(NOLOCK, NOWAIT) ON lmpHdr.BPSFNo = bpsHdr.BPSFNo
                AND lmpHdr.CompanyCode = bpsHdr.CompanyCode
                AND lmpHdr.BranchCode = bpsHdr.BranchCode
            INNER JOIN spTrnSLmpDtl lmpDtl WITH(NOLOCK, NOWAIT) ON lmpHdr.LmpNo = lmpDtl.LmpNo
                AND lmpHdr.CompanyCode = lmpDtl.CompanyCode
                AND lmpHdr.BranchCode = lmpDtl.BranchCode				                
        WHERE lmpHdr.CompanyCode = @CompanyCode
            AND lmpHdr.BranchCode = @BranchCode
            AND MONTH(lmpHdr.LmpDate) = @Month
            AND YEAR(lmpHdr.LmpDate) = @Year
        GROUP BY lmpDtl.PartNo, lmpDtl.WarehouseCode
	) Lmp ON itemLoc.PartNo = Lmp.PartNo AND itemloc.WarehouseCode = Lmp.WarehouseCode
	LEFT JOIN (SELECT rtrDtl.PartNo, rtrDtl.WarehouseCode
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(rtrDtl.QtyReturn, 0) ELSE 0 END) as ReturForSalesCashQty
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(rtrDtl.QtyReturn, 0) ELSE 0 END) as ReturForSalesCreditQty
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(rtrDtl.QtyReturn, 0) * ISNULL(rtrDtl.CostPrice, 0) ELSE 0 END) as ReturForSalesCashAmt
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(rtrDtl.QtyReturn, 0) * ISNULL(rtrDtl.CostPrice, 0) ELSE 0 END) as ReturForSalesCreditAmt
        FROM spTrnSRturHdr rtrHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSFPJHdr fpjHdr WITH(NOLOCK, NOWAIT) ON rtrHdr.FPJNo = fpjHdr.FPJNo
                AND rtrHdr.CompanyCode = fpjHdr.CompanyCode
                AND rtrHdr.BranchCode = fpjHdr.BranchCode
            INNER JOIN spTrnSRturDtl rtrDtl WITH(NOLOCK, NOWAIT) ON rtrHdr.ReturnNo = rtrDtl.ReturnNo
                AND rtrHdr.CompanyCode = rtrDtl.CompanyCode 
                AND rtrHdr.BranchCode = rtrDtl.BranchCode 				                
        WHERE	rtrHdr.CompanyCode = @CompanyCode
            AND rtrHdr.BranchCode = @BranchCode
            AND MONTH(rtrHdr.ReturnDate) = @Month
            AND YEAR(rtrHdr.ReturnDate) = @Year
            AND rtrHdr.Status = 2
        GROUP BY rtrDtl.PartNo, rtrDtl.WarehouseCode
	) SRtur ON itemLoc.PartNo = SRtur.PartNo AND itemloc.WarehouseCode = SRtur.WarehouseCode
	LEFT JOIN (SELECT rtrSSDtl.PartNo, rtrSSDtl.WarehouseCode
            , SUM(CASE rtrSSHdr.SalesType WHEN 1 THEN ISNULL(QtyReturn, 0) ELSE 0 END) as ReturnForBPSQty
            , SUM(CASE rtrSSHdr.SalesType WHEN 2 THEN ISNULL(QtyReturn, 0) ELSE 0 END) as ReturForServiceQty
            , SUM(CASE rtrSSHdr.SalesType WHEN 3 THEN ISNULL(QtyReturn, 0) ELSE 0 END) as ReturForUnitQty
            , SUM(CASE rtrSSHdr.SalesType WHEN 1 THEN ISNULL(QtyReturn, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as ReturnForBPSAmt
            , SUM(CASE rtrSSHdr.SalesType WHEN 2 THEN ISNULL(QtyReturn, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as ReturForServiceAmt
            , SUM(CASE rtrSSHdr.SalesType WHEN 3 THEN ISNULL(QtyReturn, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as ReturForUnitAmt
        FROM spTrnSRturSSHdr rtrSSHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSRturSSDtl rtrSSDtl WITH(NOLOCK, NOWAIT) ON rtrSSHdr.ReturnNo = rtrSSDtl.ReturnNo
                AND rtrSSHdr.CompanyCode = rtrSSDtl.CompanyCode
                AND rtrSSHdr.BranchCode = rtrSSDtl.BranchCode				                
        WHERE	rtrSSHdr.CompanyCode = @CompanyCode
            AND rtrSSHdr.BranchCode = @BranchCode
            AND MONTH(rtrSSHdr.ReturnDate) = @Month
            AND YEAR(rtrSSHdr.ReturnDate) = @Year
            AND rtrSSHdr.Status = 2
        GROUP BY rtrSSDtl.PartNo, rtrSSDtl.WarehouseCode
	) SRturSS ON itemLoc.PartNo = SRturSS.PartNo AND itemloc.WarehouseCode = SRturSS.WarehouseCode
	LEFT JOIN (SELECT posDtl.PartNo, SUM(ISNULL(posDtl.OrderQty, 0)) PurchaseOrderQty,
            SUM(ISNULL(posDtl.OrderQty, 0) * ISNULL(posDtl.PurchasePrice, 0) - ROUND(ISNULL(posDtl.OrderQty, 0) * ISNULL(posDtl.PurchasePrice, 0) * ISNULL(posDtl.DiscPct, 0) / 100, 0)) PurchaseOrderAmt
        FROM spTrnPPOSHdr posHDr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnPPOSDtl posDtl WITH(NOLOCK, NOWAIT) ON posHdr.POSNo = posDtl.POSNo
                AND posHdr.CompanyCode = posDtl.CompanyCode
                AND posHdr.BranchCode = posDtl.BranchCode				                
        WHERE posHdr.CompanyCode = @CompanyCode 
            AND posHdr.BranchCode = @BranchCode                                
            AND MONTH(posHdr.POSDate) = @Month
            AND YEAR(posHdr.POSDate) = @Year
            AND posHdr.Status NOT IN (0, 1, 3)
        GROUP BY posDtl.PartNo
	) POS ON itemLoc.PartNo = POS.PartNo
	LEFT JOIN (SELECT PartNo, SUM(ISNULL(OnOrder, 0)) OnOrderQty, SUM(ISNULL(InTransit, 0)) InTransitQty,
            SUM(ISNULL(OnOrder, 0) * ISNULL(PurchasePrice, 0) - ROUND(ISNULL(OnOrder, 0) * ISNULL(PurchasePrice, 0) * ISNULL(DiscPct, 0) / 100, 0)) OnOrderAmt,
            SUM(ISNULL(InTransit, 0) * ISNULL(PurchasePrice, 0) - ROUND(ISNULL(InTransit, 0) * ISNULL(PurchasePrice, 0) * ISNULL(DiscPct, 0) / 100, 0)) InTransitAmt
        FROM spTrnPOrderBalance WITH(NOLOCK, NOWAIT)
        WHERE MONTH(POSDate) = @Month
            AND YEAR(POSDate) = @Year
            AND CompanyCode = @CompanyCode 
            AND BranchCode = @BranchCode
        GROUP BY PartNo
	) Balance ON itemLoc.PartNo = Balance.PartNo
	LEFT JOIN (SELECT ordDtl.PartNo, ordDtl.WarehouseCode
            , SUM(ISNULL(ordDtl.QtyBO, 0) - ISNULL(ordDtl.QtyBOSupply, 0) - ISNULL(ordDtl.QtyBOCancel, 0)) BackOrderQty
            , SUM((ISNULL(ordDtl.QtyBO, 0) - ISNULL(ordDtl.QtyBOSupply, 0) - ISNULL(ordDtl.QtyBOCancel, 0)) * ISNULL(ordDtl.CostPrice, 0)) BackOrderAmt
        FROM spTrnSORDHdr ordHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSORDDtl ordDtl WITH(NOLOCK, NOWAIT) ON ordHdr.DocNo = ordDtl.DocNo 
                AND ordHdr.CompanyCode = ordDtl.CompanyCode		
                AND ordHdr.BranchCode = ordDtl.BranchCode				                
        WHERE ordHdr.CompanyCode = @CompanyCode
            AND ordHdr.BranchCode = @BranchCode
            AND MONTH(ordHdr.DocDate) = @Month
            AND YEAR(ordHdr.DocDate) = @Year
            AND ordHdr.Status NOT IN (0, 1, 3)
        GROUP BY ordDtl.PartNo, ordDtl.WarehouseCode
	) BO ON itemLoc.PartNo = BO.PartNo AND itemloc.WarehouseCode = BO.WarehouseCode 
    LEFT JOIN spMstItems items WITH(NOLOCK, NOWAIT) ON itemLoc.PartNo = items.PartNo
        AND itemLoc.CompanyCode = items.CompanyCode
        AND itemLoc.BranchCode = items.BranchCode
    LEFT JOIN spMstItemPrice itemPrice WITH(NOLOCK, NOWAIT) ON itemLoc.PartNo = itemPrice.PartNo
        AND itemLoc.CompanyCode = itemPrice.CompanyCode
        AND itemLoc.BranchCode = itemPrice.BranchCode		
WHERE itemLoc.CompanyCode = @CompanyCode 
	AND itemLoc.BranchCode = @BranchCode		

INSERT INTO spHstTransaction SELECT * FROM #HstTransaction
DROP TABLE #HstTransaction


GO

if object_id('sp_IsValidSTAnalyze') is not null
	drop procedure sp_IsValidSTAnalyze
GO





CREATE procedure [dbo].[sp_IsValidSTAnalyze] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@STHdrNo varchar(20))


as

SELECT * INTO #a2 FROM(
SELECT
	a.PartNo, a.STNo, a.SEqNo,  CASE WHEN b.Partno is null THEN 'LOKASI UTAMA BELUM DIENTRY' ELSE '' END Status
FROM SpTrnStockTakingDtl a
LEFT JOIN 
(
	SELECT
		x.CompanyCode,
		x.BranchCode,
		x.StHdrNo,
		x.PartNo
	FROM SpTrnStockTakingDtl x
	WHERE x.CompanyCode = @CompanyCode
		AND x.BranchCode = @BranchCode
		AND x.StHdrNo = @StHdrNo
		AND x.IsMainLocation = 1

) b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.StHdrNo = b.StHdrNo AND a.PartNo = b.PartNo
WHERE a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.StHdrNo = @StHdrNo
GROUP BY a.PartNo, b.PartNo, a.STNo, a.SeqNo
) #a2

SELECT * FROM #a2 WHERE Status <> ''
UNION
SELECT
	a.PartNo, a.STNo, a.SEqNo,'BELUM TERDAFTAR PADA LIST TAG/FORM' Status
FROM SpTrnStockTakingTemp a
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND PartNo NOT IN (
SELECT 
DISTINCT(a.PartNo)
FROM SpTrnStockTakingDtl a
WHERE CompanyCode = @CompanyCode
	  AND BranchCode = @BranchCode
	  AND StHdrNo = @StHdrNo)
	AND PartNo <> ''
GROUP BY a.PartNo, a.STNo, a.SeqNo
UNION
SELECT
	a.PartNo, a.STNo, a.SEqNo, 'BLANK TAG/FORM BELUM TERPAKAI/DIBATALKAN' Status
FROM SpTrnStockTakingTemp a
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND STNo NOT IN (
SELECT 
DISTINCT(a.StNo)
FROM SpTrnStockTakingDtl a
WHERE CompanyCode = @CompanyCode
	  AND BranchCode = @BranchCode
	  AND StHdrNo = @StHdrNo)
	AND PartNo = '' AND a.Status IN ('0','1')
GROUP BY a.PartNo, a.STNo, a.SeqNo
UNION
SELECT PartNo, STNo, SeqNo, 'LOKASI UTAMA DI-ENTRY LEBIH DARI BATAS' Status
FROM SpTrnStocktakingDtl
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND PartNo IN (
SELECT
	PartNo
FROM spTrnStockTakingDtl
WHERE CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND IsMainLocation = 1
Group By PartNo
HAVING
	Count(PartNo) > 1)
DROP TABLE #a2





GO

if object_id('sp_KaroseriBrowse') is not null
	drop procedure sp_KaroseriBrowse
GO

CREATE procedure [dbo].[sp_KaroseriBrowse]  @CompanyCode varchar(10), @BranchCode varchar(10)
 as

select a.CompanyCode, a.BranchCode, a.SupplierCode, b.SupplierName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelCodeNew, d.SalesModelDesc as SalesModelDescNew
		,a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.Total, a.Remark, cast(a.Status AS bit) as Status
from omMstKaroseri a
INNER JOIN gnMstSupplier b
	ON a.SupplierCode = b.SupplierCode
INNER JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
INNER JOIN omMstModel d
	ON a.SalesModelCodeNew = d.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
GO

if object_id('sp_MaintainAvgCostItem') is not null
	drop procedure sp_MaintainAvgCostItem
GO

CREATE procedure [dbo].[sp_MaintainAvgCostItem] (  

@CompanyCode varchar(10),
@BranchCode varchar(10),
@ProductType varchar(10),
@PartNo varchar (20),
@Option varchar (2)
)


as

IF @Option = 'A'
BEGIN

SELECT TOP 1500
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = @CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,ItemInfo.SupplierCode
,Supplier.SupplierName
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = @CompanyCode) AS TypeOfGoods
,ISNULL(ItemLoc.WarehouseCode,0) WarehouseCode
,ISNULL(ItemLoc.LocationCode,0) LocationCode
,(ISNULL(ItemLoc.OnHand,0) - (ISNULL(ItemLoc.AllocationSP,0) + ISNULL(ItemLoc.AllocationSR,0) + ISNULL(ItemLoc.AllocationSL,0) + ISNULL(ItemLoc.ReservedSP,0) + ISNULL(ItemLoc.ReservedSR,0) + ISNULL(ItemLoc.ReservedSL,0))) AS QtyAvail
,ISNULL(ItemPrice.RetailPrice,0) RetailPrice
,ISNULL(ItemPrice.RetailPriceInclTax,0) RetailPriceInclTax
FROM SpMstItems Items
LEFT JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN SpMstItemLoc ItemLoc ON Items.CompanyCode  = ItemLoc.CompanyCode
	AND Items.BranchCode = ItemLoc.BranchCode	
	AND Items.PartNo = ItemLoc.PartNo
LEFT JOIN SpMstItemPrice ItemPrice ON Items.CompanyCode  = ItemPrice.CompanyCode
	AND Items.BranchCode = ItemPrice.BranchCode	
	AND Items.PartNo = ItemPrice.PartNo		 
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode
WHERE Items.CompanyCode = @CompanyCode
  AND Items.BranchCode  = @BranchCode    
  AND Items.ProductType = @ProductType
  AND ItemLoc.WarehouseCode = '00'
END
ELSE
BEGIN

SELECT TOP 1500
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = @CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,Items.Onhand
,ItemInfo.SupplierCode
,Supplier.SupplierName
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = @CompanyCode) AS TypeOfGoods
,ItemLoc.WarehouseCode
,ItemLoc.LocationCode
,(ItemLoc.OnHand - (ItemLoc.AllocationSP + ItemLoc.AllocationSR + ItemLoc.AllocationSL + ItemLoc.ReservedSP + ItemLoc.ReservedSR + ItemLoc.ReservedSL)) AS QtyAvail
,ItemPrice.RetailPrice
,ItemPrice.CostPrice
,ItemPrice.RetailPriceInclTax
FROM SpMstItems Items with (nolock, nowait)
LEFT JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN SpMstItemLoc ItemLoc ON Items.CompanyCode  = ItemLoc.CompanyCode
	AND Items.BranchCode = ItemLoc.BranchCode	
	AND Items.PartNo = ItemLoc.PartNo
LEFT JOIN SpMstItemPrice ItemPrice ON Items.CompanyCode  = ItemPrice.CompanyCode
	AND Items.BranchCode = ItemPrice.BranchCode	
	AND Items.PartNo = ItemPrice.PartNo		 
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode
WHERE Items.CompanyCode = @CompanyCode
  AND Items.BranchCode  = @BranchCode    
  AND Items.ProductType = @ProductType
  AND Items.PartNo      = @PartNo
  AND ItemLoc.WarehouseCode = '00'
  END


GO

if object_id('sp_ModelAccountBrowse') is not null
	drop procedure sp_ModelAccountBrowse
GO

CREATE procedure [dbo].[sp_ModelAccountBrowse]  @CompanyCode varchar(10), @BranchCode varchar(10)
 as

 SELECT a.CompanyCode, a.BranchCode, a.SalesModelCode, z.SalesModelDesc
		, SalesAccNo, DiscountAccNo, ReturnAccNo, COGsAccNo,HReturnAccNo
		, b.Description as SalesAccDesc, c.Description as DiscountAccDesc, d.Description as ReturnAccDesc, e.Description as COGsAccDesc, f.Description as HReturnAccDesc
		, SalesAccNoAks, ReturnAccNoAks, DiscountAccNoAks
		, g.Description as SalesAccDescAks, h.Description as ReturnAccDescAks, i.Description as DiscountAccDescAks
		, ShipAccNo, DepositAccNo, OthersAccNo, BBNAccNo, KIRAccNo
		,j.Description as ShipAccDesc, k.Description as DepositAccDesc, l.Description as OthersAccDesc, m.Description as BBNAccDesc, n.Description as KIRAccDesc
		, PReturnAccNo, InTransitTransferStockAccNo
		, o.Description as PReturnAccDesc, p.Description as IntransitAccDesc
		, a.Remark, IsActive, a.InventoryAccNo, q.Description as InventoryAccDesc
-- select *
FROM omMstModelAccount a
LEFT JOIN GnMstAccount b
	ON a.SalesAccNo = b.AccountNo
LEFT JOIN GnMstAccount c
	ON a.DiscountAccNo = c.AccountNo
LEFT JOIN GnMstAccount d
	ON a.ReturnAccNo = d.AccountNo
LEFT JOIN GnMstAccount e
	ON a.COGsAccNo = e.AccountNo
LEFT JOIN GnMstAccount f
	ON a.HReturnAccNo = f.AccountNo
LEFT JOIN GnMstAccount g
	ON a.SalesAccNoAks = g.AccountNo
LEFT JOIN GnMstAccount h
	ON a.ReturnAccNoAks = h.AccountNo
LEFT JOIN GnMstAccount i
	ON a.DiscountAccNoAks = i.AccountNo
LEFT JOIN GnMstAccount j
	ON a.ShipAccNo = j.AccountNo
LEFT JOIN GnMstAccount k
	ON a.DepositAccNo = k.AccountNo
LEFT JOIN GnMstAccount l
	ON a.OthersAccNo = l.AccountNo
LEFT JOIN GnMstAccount m
	ON a.BBNAccNo = m.AccountNo
LEFT JOIN GnMstAccount n
	ON a.KIRAccNo = n.AccountNo
LEFT JOIN GnMstAccount o
	ON a.PReturnAccNo = o.AccountNo AND o.BranchCode = @BranchCode
LEFT JOIN GnMstAccount p
	ON a.InTransitTransferStockAccNo = p.AccountNo AND p.BranchCode = @BranchCode
LEFT JOIN GnMstAccount q
	ON a.InventoryAccNo = q.AccountNo
INNER JOIN omMstModel z
	ON a.SalesModelCode = z.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode 
GO

if object_id('sp_ModelAccountLookup') is not null
	drop procedure sp_ModelAccountLookup
GO

CREATE procedure [dbo].[sp_ModelAccountLookup]  @CompanyCode varchar(10), @BranchCode varchar(10), @SalesModelCode varchar(100)
 as

 SELECT a.CompanyCode, a.BranchCode, a.SalesModelCode, z.SalesModelDesc
		, SalesAccNo, DiscountAccNo, ReturnAccNo, COGsAccNo,HReturnAccNo
		, b.Description as SalesAccDesc, c.Description as DiscountAccDesc, d.Description as ReturnAccDesc, e.Description as COGsAccDesc, f.Description as HReturnAccDesc
		, SalesAccNoAks, ReturnAccNoAks, DiscountAccNoAks
		, g.Description as SalesAccDescAks, h.Description as ReturnAccDescAks, i.Description as DiscountAccDescAks
		, ShipAccNo, DepositAccNo, OthersAccNo, BBNAccNo, KIRAccNo
		,j.Description as ShipAccDesc, k.Description as DepositAccDesc, l.Description as OthersAccDesc, m.Description as BBNAccDesc, n.Description as KIRAccDesc
		, PReturnAccNo, InTransitTransferStockAccNo
		, o.Description as PReturnAccDesc, p.Description as IntransitAccDesc
		, a.Remark, IsActive, a.InventoryAccNo, q.Description as InventoryAccDesc
-- select *
FROM omMstModelAccount a
LEFT JOIN GnMstAccount b
	ON a.SalesAccNo = b.AccountNo
LEFT JOIN GnMstAccount c
	ON a.DiscountAccNo = c.AccountNo
LEFT JOIN GnMstAccount d
	ON a.ReturnAccNo = d.AccountNo
LEFT JOIN GnMstAccount e
	ON a.COGsAccNo = e.AccountNo
LEFT JOIN GnMstAccount f
	ON a.HReturnAccNo = f.AccountNo
LEFT JOIN GnMstAccount g
	ON a.SalesAccNoAks = g.AccountNo
LEFT JOIN GnMstAccount h
	ON a.ReturnAccNoAks = h.AccountNo
LEFT JOIN GnMstAccount i
	ON a.DiscountAccNoAks = i.AccountNo
LEFT JOIN GnMstAccount j
	ON a.ShipAccNo = j.AccountNo
LEFT JOIN GnMstAccount k
	ON a.DepositAccNo = k.AccountNo
LEFT JOIN GnMstAccount l
	ON a.OthersAccNo = l.AccountNo
LEFT JOIN GnMstAccount m
	ON a.BBNAccNo = m.AccountNo
LEFT JOIN GnMstAccount n
	ON a.KIRAccNo = n.AccountNo
LEFT JOIN GnMstAccount o
	ON a.PReturnAccNo = o.AccountNo AND o.BranchCode = @BranchCode
LEFT JOIN GnMstAccount p
	ON a.InTransitTransferStockAccNo = p.AccountNo AND p.BranchCode = @BranchCode
LEFT JOIN GnMstAccount q
	ON a.InventoryAccNo = q.AccountNo
INNER JOIN omMstModel z
	ON a.SalesModelCode = z.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode and a.SalesModelCode = @SalesModelCode
GO

if object_id('sp_MstOthersInventoryBrowse') is not null
	drop procedure sp_MstOthersInventoryBrowse
GO
CREATE procedure sp_MstOthersInventoryBrowse @CompanyCode varchar(10), @BranchCode varchar(10)
as

SELECT a.OthersNonInventory, a.OthersNonInventoryDesc, a.OthersNonInventoryAccNo, b.Description, a.Remark, a.IsActive
FROM omMstOthersNonInventory a
INNER JOIN GnMstAccount b
ON a.OthersNonInventoryAccNo=b.AccountNo
WHERE a.CompanyCode=@CompanyCode AND a.BranchCode=@BranchCode
GO

if object_id('sp_MstPriceListBeliBrowse') is not null
	drop procedure sp_MstPriceListBeliBrowse
GO
CREATE procedure [dbo].[sp_MstPriceListBeliBrowse] @CompanyCode varchar(10) , @BranchCode varchar(100)
 as

SELECT a.CompanyCode, a.BranchCode, a.SupplierCode, b.SupplierName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelYear
		,a.PPnBMPaid, a.DPP, a.PPn, a.PPnBM, a.Total, a.Remark, cast(a.Status AS bit) as Status
FROM omMstPricelistBuy a
LEFT JOIN gnMstSupplier b
	ON a.SupplierCode = b.SupplierCode
LEFT JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
WHERE a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode
GO

if object_id('sp_MstPriceListJualBrowse') is not null
	drop procedure sp_MstPriceListJualBrowse
GO
CREATE procedure [dbo].[sp_MstPriceListJualBrowse] @CompanyCode varchar(10) , @BranchCode varchar(100)
 as

SELECT a.CompanyCode, a.BranchCode, a.GroupPriceCode, b.RefferenceDesc1 as GroupPriceName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelYear
		, a.TotalMinStaff, a.DPP, a.PPn, a.PPnBM, a.Total, a.Remark, cast(a.Status AS bit) as Status, a.TaxCode, a.TaxPct
FROM omMstPricelistSell a
LEFT JOIN OmMstRefference b
	ON a.GroupPriceCode = b.RefferenceCode AND b.RefferenceType='GRPR'
LEFT JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
WHERE a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode

GO

if object_id('sp_MstPriceListJualView') is not null
	drop procedure sp_MstPriceListJualView
GO
CREATE procedure [dbo].[sp_MstPriceListJualView] @CompanyCode varchar(10) , @BranchCode varchar(100)
													, @GroupPriceCode varchar(10),@SalesModelCode varchar(100), @SalesModelYear varchar(10)
 as

SELECT a.CompanyCode, a.BranchCode, a.GroupPriceCode, b.RefferenceDesc1 as GroupPriceName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelYear
		, a.*
FROM omMstPricelistSell a
LEFT JOIN OmMstRefference b
	ON a.GroupPriceCode = b.RefferenceCode AND b.RefferenceType='GRPR'
LEFT JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
WHERE a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode
		and a.GroupPriceCode = @GroupPriceCode and a.SalesModelCode = @SalesModelCode and a.SalesModelYear = @SalesModelYear

GO

if object_id('sp_omMstModelColour') is not null
	drop procedure sp_omMstModelColour
GO
CREATE procedure [dbo].[sp_omMstModelColour] @CompanyCode varchar(10) , @SalesModelCode varchar(100)
 as

SELECT a.CompanyCode, a.SalesModelCode, b.SalesModelDesc, ColourCode, RefferenceDesc1, a.Remark, cast(a.Status AS bit) as [Status]
FROM omMstModelColourView a
INNER JOIN omMstModel b
	ON a.SalesModelCode = b.SalesModelCode
where a.CompanyCode=@CompanyCode and a.SalesModelCode=@SalesModelCode
GO

if object_id('sp_omMstModelPerlengkapan') is not null
	drop procedure sp_omMstModelPerlengkapan
GO
CREATE procedure [dbo].[sp_omMstModelPerlengkapan] @CompanyCode varchar(10), @BranchCode varchar(10), @SalesModelCode varchar(100)
 as

SELECT a.CompanyCode
		, a.BranchCode
		, a.SalesModelCode
		, a.PerlengkapanCode
		, b.PerlengkapanName
		, a.Quantity
		, a.Remark
		, CAST(a.Status AS bit) as [Status]

FROM omMstModelPerlengkapan a
LEFT JOIN omMstPerlengkapan b
	ON a.PerlengkapanCode = b.PerlengkapanCode
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
where a.CompanyCode=@CompanyCode and a.BranchCode = @BranchCode and SalesModelCode=@SalesModelCode
GO

if object_id('sp_omMstModelYear') is not null
	drop procedure sp_omMstModelYear
GO
CREATE procedure [dbo].[sp_omMstModelYear] @CompanyCode varchar(10) , @SalesModelCode varchar(100)
 as

SELECT CompanyCode, SalesModelCode, SalesModelYear, SalesModelDesc, ChassisCode, Remark, cast(Status AS bit) as [Status]
FROM omMstModelYear
where CompanyCode=@CompanyCode and SalesModelCode=@SalesModelCode
GO

if object_id('sp_pkeys') is not null
	drop procedure sp_pkeys
GO
CREATE procedure [dbo].[sp_pkeys]
(
    @table_name      sysname,
    @table_owner     sysname = null,
    @table_qualifier sysname = null
)
as
    declare @table_id           int
    -- quotename() returns up to 258 chars
    declare @full_table_name    nvarchar(517) -- 258 + 1 + 258

    if @table_qualifier is not null
    begin
        if db_name() <> @table_qualifier
        begin   -- If qualifier doesn't match current database
            raiserror (15250, -1,-1)
            return
        end
    end

    if @table_owner is null
    begin   -- If unqualified table name
        select @full_table_name = quotename(@table_name)
    end
    else
    begin   -- Qualified table name
        if @table_owner = ''
        begin   -- If empty owner name
            select @full_table_name = quotename(@table_owner)
        end
        else
        begin
            select @full_table_name = quotename(@table_owner) + '.' + quotename(@table_name)
        end
    end

    select @table_id = object_id(@full_table_name)

    select
        TABLE_QUALIFIER = convert(sysname,db_name()),
        TABLE_OWNER = convert(sysname,schema_name(o.schema_id)),
        TABLE_NAME = convert(sysname,o.name),
        COLUMN_NAME = convert(sysname,c.name),
        KEY_SEQ = convert (smallint,
            case
                when c.name = index_col(@full_table_name, i.index_id,  1) then 1
                when c.name = index_col(@full_table_name, i.index_id,  2) then 2
                when c.name = index_col(@full_table_name, i.index_id,  3) then 3
                when c.name = index_col(@full_table_name, i.index_id,  4) then 4
                when c.name = index_col(@full_table_name, i.index_id,  5) then 5
                when c.name = index_col(@full_table_name, i.index_id,  6) then 6
                when c.name = index_col(@full_table_name, i.index_id,  7) then 7
                when c.name = index_col(@full_table_name, i.index_id,  8) then 8
                when c.name = index_col(@full_table_name, i.index_id,  9) then 9
                when c.name = index_col(@full_table_name, i.index_id, 10) then 10
                when c.name = index_col(@full_table_name, i.index_id, 11) then 11
                when c.name = index_col(@full_table_name, i.index_id, 12) then 12
                when c.name = index_col(@full_table_name, i.index_id, 13) then 13
                when c.name = index_col(@full_table_name, i.index_id, 14) then 14
                when c.name = index_col(@full_table_name, i.index_id, 15) then 15
                when c.name = index_col(@full_table_name, i.index_id, 16) then 16
            end),
        PK_NAME = convert(sysname,i.name)
    from
        sys.indexes i,
        sys.all_columns c,
        sys.all_objects o
    where
        o.object_id = @table_id and
        o.object_id = c.object_id and
        o.object_id = i.object_id and
        i.is_primary_key = 1 and
        (c.name = index_col (@full_table_name, i.index_id,  1) or
         c.name = index_col (@full_table_name, i.index_id,  2) or
         c.name = index_col (@full_table_name, i.index_id,  3) or
         c.name = index_col (@full_table_name, i.index_id,  4) or
         c.name = index_col (@full_table_name, i.index_id,  5) or
         c.name = index_col (@full_table_name, i.index_id,  6) or
         c.name = index_col (@full_table_name, i.index_id,  7) or
         c.name = index_col (@full_table_name, i.index_id,  8) or
         c.name = index_col (@full_table_name, i.index_id,  9) or
         c.name = index_col (@full_table_name, i.index_id, 10) or
         c.name = index_col (@full_table_name, i.index_id, 11) or
         c.name = index_col (@full_table_name, i.index_id, 12) or
         c.name = index_col (@full_table_name, i.index_id, 13) or
         c.name = index_col (@full_table_name, i.index_id, 14) or
         c.name = index_col (@full_table_name, i.index_id, 15) or
         c.name = index_col (@full_table_name, i.index_id, 16))
    order by 1, 2, 3, 5

GO

if object_id('sp_PurchaseReturnBPULookup') is not null
	drop procedure sp_PurchaseReturnBPULookup
GO
CREATE procedure [dbo].[sp_PurchaseReturnBPULookup] @CompanyCode varchar(10) , @BranchCode varchar(100), @ReturnNo nvarchar(100), @HPPNo nvarchar(100)
 as

select a.BPUNo,a.BPUDate,a.SupplierCode + ' - ' + b.SupplierName AS SupplierCode
from omTrPurchaseBPU a
	left join gnMstSupplier b
		on a.CompanyCode = b.CompanyCode
		and a.SupplierCode = b.SupplierCode
	inner join omTrPurchaseHPPDetail c on a.CompanyCode=c.CompanyCode
		and a.BranchCode=c.BranchCode and c.HPPNo=@HPPNo and a.BPUNo=c.BPUNo
		where not exists (
		select 1 from omTrPurchaseReturnDetail
		where CompanyCode= a.CompanyCode
			and BranchCode= a.BranchCode
			and ReturnNo= @ReturnNo
			and BPUNo= a.BPUNo
	)
order by  BPUNo asc
GO

if object_id('sp_RefferenceTypeLookup') is not null
	drop procedure sp_RefferenceTypeLookup
GO

CREATE procedure [dbo].[sp_RefferenceTypeLookup]  @CompanyCode varchar(10)
 as
SELECT DISTINCT  * 
FROM (
	SELECT distinct(a.RefferenceType)  AS RefferenceType
	FROM dbo.omMstRefference a
	WHERE a.CompanyCode = '6006410'
	UNION
	SELECT distinct(b.RefferenceCode)  AS RefferenceType
	FROM dbo.omMstRefference b
	WHERE b.CompanyCode = '6006410' AND b.RefferenceType = 'REFF'
	) tab
ORDER BY RefferenceType ASC




GO

if object_id('sp_select4LookupCustomer') is not null
	drop procedure sp_select4LookupCustomer
GO
CREATE PROCEDURE [dbo].sp_Select4LookupCustomer (@CompanyCode varchar(10) , @BranchCode varchar(10),
	@ProfitCenterCode varchar(10), @TOPC varchar(10))
AS
 SELECT TableA.CustomerCode, TableA.CustomerName, TableA.TopCode, TableA.TOPCD, TableA.GroupPriceCode, TableA.RefferenceDesc1 as GroupPriceDesc
  FROM    (SELECT a.CustomerCode, a.CustomerName, 
                  a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 as Address,
                  b.TOPCode + '||'
                  + (SELECT c.LookUpValueName
                  FROM gnMstLookUpDtl c
                  WHERE c.CodeID = @TOPC
                  AND c.LookUpValue = b.TOPCode)  AS TopCode, b.TOPCode  AS
                  TOPCD, b.CreditLimit, a.CompanyCode, b.BranchCode, b.
                  ProfitCenterCode, b.GroupPriceCode, c.RefferenceDesc1
             FROM gnMstCustomer a
            LEFT JOIN gnMstCustomerProfitCenter b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
            LEFT JOIN omMstRefference c ON a.CompanyCode = c.CompanyCode AND c.RefferenceType = 'GRPR' AND c.RefferenceCode = b.GroupPriceCode
            WHERE a.CompanyCode = b.CompanyCode
                  AND a.CompanyCode = b.CompanyCode
                  AND b.CompanyCode = @CompanyCode
                  AND b.BranchCode = @BranchCode
                  AND b.ProfitCenterCode = @ProfitCenterCode
                  AND a.Status = '1'
                  AND b.SalesType = '0'
                  AND b.isBlackList = 0
                  AND b.CreditLimit > 0) TableA
       LEFT JOIN
          gnTrnBankBook c
       ON TableA.CompanyCode = c.CompanyCode
          AND TableA.BranchCode = c.BranchCode
          AND TableA.ProfitCenterCode = c.ProfitCenterCode
          AND TableA.CustomerCode = c.CustomerCode
 WHERE TableA.CreditLimit >
          (ISNULL (c.SalesAmt, 0) - ISNULL (c.ReceivedAmt, 0))
ORDER BY TableA.CustomerCode ASC
GO

if object_id('sp_Select4LookupCustomer2') is not null
	drop procedure sp_Select4LookupCustomer2
GO
CREATE PROCEDURE [dbo].sp_Select4LookupCustomer2 (@CompanyCode varchar(10) , @BranchCode varchar(10),
	@ProfitCenterCode varchar(10), @TOPC varchar(10))
AS
	SELECT a.CustomerCode
		, a.CustomerName
		, a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 as Address
		, ISNULL(c.LookUpValueName,'') AS TopCode
		, b.TopCode as TOPCD
		, b.GroupPriceCode
		, d.RefferenceDesc1 as GroupPriceDesc
		, b.SalesCode
	FROM gnMstCustomer a
	LEFT JOIN gnMstCustomerProfitCenter b ON b.CompanyCode = a.CompanyCode 
		AND b.CustomerCode = a.CustomerCode
	LEFT JOIN gnMstLookUpDtl c ON c.CompanyCode=a.CompanyCode
		AND c.LookUpValue = b.TOPCode    
		AND c.CodeID = @TOPC
	LEFT JOIN omMstRefference d ON a.CompanyCode = d.CompanyCode 
		AND d.RefferenceType = 'GRPR' 
		AND d.RefferenceCode = b.GroupPriceCode
	WHERE a.CompanyCode = @CompanyCode
		AND b.BranchCode = @BranchCode
		AND b.ProfitCenterCode = @ProfitCenterCode
		AND a.Status = '1'
		AND b.SalesType = '1'
		AND b.isBlackList = 0
	ORDER BY CustomerCode;
GO

if object_id('sp_spCategoryCodeview') is not null
	drop procedure sp_spCategoryCodeview
GO
         
		 create procedure [dbo].[sp_spCategoryCodeview] ( @CompanyCode varchar(10))

		 as
		 
		    select 
                a.LookupValue 'CategoryCode', a.LookupValueName 'CategoryName', a.CompanyCode
            from 
                gnMstLookupdtl a
				            where 
                          
                a.CodeID='CSCT'  and a.CompanyCode=@CompanyCode
GO

if object_id('sp_spgnMstAccountView') is not null
	drop procedure sp_spgnMstAccountView
GO

CREATE procedure [dbo].[sp_spgnMstAccountView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10), @Search varchar(50) = '')
 as
 IF @Search <> ''
	SELECT   AccountNo, [Description], CompanyCode,  BranchCode  FROM gnMstAccount 
	where CompanyCode=@CompanyCode and BranchCode=@BranchCode
	and (AccountNo like '%' + @Search + '%' or [Description] like '%' + @Search + '%')

 ELSE
	SELECT   AccountNo, [Description], CompanyCode,  BranchCode  FROM gnMstAccount 
	where CompanyCode=@CompanyCode and BranchCode=@BranchCode





GO

if object_id('sp_SpItemPriceView') is not null
	drop procedure sp_SpItemPriceView
GO

CREATE procedure [dbo].[sp_SpItemPriceView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
 Items.CompanyCode 
 ,Items.BranchCode
 ,ItemInfo.PartNo
,ItemInfo.PartName
,ItemPrice.PurchasePrice
,ItemInfo.SupplierCode
,ItemPrice.RetailPriceInclTax
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,Items.ProductType
,Items.PartCategory
,u.LookupValueName 
 as CategoryName
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice

FROM spMstItemPrice ItemPrice 
INNER JOIN spMstItems Items 
    ON ItemPrice.CompanyCode=Items.CompanyCode 
    AND ItemPrice.BranchCode=Items.BranchCode
    AND ItemPrice.PartNo=Items.PartNo
right JOIN spMstItemInfo ItemInfo 
    ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
    AND ItemPrice.PartNo = ItemInfo.PartNo
	inner join  gnMstLookUpDtl u on (Items.PartCategory =u.ParaValue)
WHERE  u.CodeID='PRCT' 
and Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode





GO

if object_id('sp_SpMasteritemStockAlokasiView') is not null
	drop procedure sp_SpMasteritemStockAlokasiView
GO

create procedure [dbo].[sp_SpMasteritemStockAlokasiView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT  
 
 distinct
--StockAlokasi
d.PartNo
,d.WarehouseCode
,a.LookUpValueName as 'WarehouseName'
,d.LocationCode
,d.OnHand
,d.AllocationSP
,d.AllocationSR
,d.AllocationSL

,d.CompanyCode 
,d.BranchCode 
FROM  spMstItemLoc d 
inner join  gnMstLookUpDtl a on (d.WarehouseCode=a.ParaValue)

WHERE a.CodeID='WRCD' 
 
and a.CompanyCode=@CompanyCode and d.BranchCode=@BranchCode





GO

if object_id('sp_SpMasteritemview') is not null
	drop procedure sp_SpMasteritemview
GO

create procedure [dbo].[sp_SpMasteritemview] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as


 SELECT  
 a.PartNo 
,a.ProductType
,a.PartCategory
,u.LookupValueName  as CategoryName
,a.MovingCode
,a.OnHand - (a.AllocationSL + a.AllocationSP + a.AllocationSR + a.ReservedSL + a.ReservedSP + a.ReservedSR)  AS AvailableItems
,b.PartName
,b.IsGenuinePart
,b.OrderUnit
,b.SupplierCode
,c.SupplierName
,a.BornDate
,a.Status

,a.SalesUnit
,a.PurcDiscPct
,a.LastPurchaseDate
,b.DiscPct
,a.LastDemandDate
--,a.ProductTypedesc
,a.LastSalesDate
,a.ABCClass
,b.UOMCode
,a.DemandAverage

,a.Utility1
,a.Utility2
,a.Utility3
,a.Utility4


--ItemInventory
,a.OnOrder
,a.InTransit
,a.BorrowQty
,a.BorrowedQty
,a.BackOrderSR
,a.ReservedSR
,a.BackOrderSP
,a.ReservedSP
,a.BackOrderSL
,a.ReservedSL

--StockAlokasi
,d.WarehouseCode
--,a.WarehouseName
,d.LocationCode
,d.OnHand
,d.AllocationSP
,d.AllocationSR
,d.AllocationSL


--HPemPenj
--HargaSupplier
--PotonganBeli
--PotonganBelipercen
--HargaBeli
--HargaJual
--HargaJualPPn
--AvarageCost

--OrderParam
,a.OrderPointQty
,a.OrderCycle
,a.SafetyStock
,a.LeadTime





,a.CompanyCode 
,d.BranchCode 
FROM SpMstItems a
INNER JOIN SpMstItemInfo b   ON a.CompanyCode  = b.CompanyCode                          
                         AND a.PartNo = b.PartNo
LEFT JOIN GnMstSupplier c ON c.CompanyCode  = a.CompanyCode 
                         AND c.SupplierCode = b.SupplierCode
INNER JOIN spMstItemLoc d ON a.CompanyCode  = d.CompanyCode   
                         AND a.BranchCode = d.BranchCode                       
                         AND a.PartNo = d.PartNo
						 inner join  gnMstLookUpDtl u on (a.PartCategory =u.ParaValue)
WHERE  u.CodeID='PRCT'
and a.Status > 0
 
and a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode





GO

if object_id('sp_spmasterpart') is not null
	drop procedure sp_spmasterpart
GO
CREATE procedure [dbo].[sp_spmasterpart] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@TypeOfGoods varchar(10),@ProductType varchar(10))
as
            SELECT TOP 1500
             ItemPrice.PartNo
            ,ItemInfo.PartName,ItemInfo.SupplierCode,ItemInfo.ProductType,ItemPrice.LastPurchaseUpdate,ItemPrice.LastRetailPriceUpdate
            ,ItemPrice.PurchasePrice
            ,ItemPrice.RetailPriceInclTax
            ,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
			,ItemPrice.OldPurchasePrice
			,ItemPrice.OldCostPrice
			,ItemPrice.OldRetailPrice
			,OldRetailPrice
            ,Items.PartCategory
            ,(SELECT LookupValueName 
                FROM gnMstLookupDtl 
                WHERE CodeID = 'PRCT' AND 
                LookUpValue = Items.PartCategory AND 
                CompanyCode ='6004001') CategoryName
            FROM spMstItemPrice ItemPrice 
            INNER JOIN spMstItems Items 
                ON ItemPrice.CompanyCode=Items.CompanyCode 
                AND ItemPrice.BranchCode=Items.BranchCode
                AND ItemPrice.PartNo=Items.PartNo
            INNER JOIN spMstItemInfo ItemInfo 
                ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
                AND ItemPrice.PartNo = ItemInfo.PartNo
            WHERE ItemPrice.CompanyCode=@CompanyCode
                AND ItemPrice.BranchCode= @BranchCode
                AND Items.TypeOfGoods=@TypeOfGoods
                AND Items.ProductType= @ProductType
GO

if object_id('sp_spMasterPartSelect4Lookup') is not null
	drop procedure sp_spMasterPartSelect4Lookup
GO

CREATE PROCEDURE [dbo].[sp_spMasterPartSelect4Lookup] ( 
	@CompanyCode varchar(15)
	,@BranchCode varchar(15)
	,@TypeOfGoods varchar(15)
	,@ProductType varchar(15)
)
AS
	SELECT 
	 Items.PartNo
	,Items.ProductType
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	   WHERE CodeID = 'PRCT' AND 
			 LookUpValue = Items.PartCategory AND 
			 CompanyCode = @CompanyCode) AS CategoryName
	,Items.PartCategory
	,ItemInfo.PartName
	,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
	,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
	,ItemInfo.OrderUnit
	,ItemInfo.SupplierCode
	,Supplier.SupplierName
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	  WHERE CodeID = 'TPGO' AND 
			LookUpValue = Items.TypeOfGoods AND 
			CompanyCode = @CompanyCode) AS TypeOfGoods
	FROM SpMstItems Items
	INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
							 AND Items.PartNo = ItemInfo.PartNo
	LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
							 AND Supplier.SupplierCode = ItemInfo.SupplierCode
	WHERE Items.CompanyCode = @CompanyCode
	  AND Items.BranchCode  = @BranchCode    
	  AND Items.TypeOfGoods = @TypeOfGoods
	  AND Items.ProductType = @ProductType
GO

if object_id('sp_spmasterpartview') is not null
	drop procedure sp_spmasterpartview
GO

CREATE procedure [dbo].[sp_spmasterpartview] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as

 select a.CompanyCode,ItemPrice.BranchCode,a.PartNo,a.PartName,a.SupplierCode,gnMstSupplier.SupplierName,
a.IsGenuinePart,a.ProductType,a.PartCategory ,u.LookUpValueName as CategoryName
,a.OrderUnit as 'FromQty'
,ItemPrice.PurchasePrice
,ItemPrice.RetailPriceInclTax
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice

from SpMstItemInfo a 
inner join  gnMstLookUpDtl u on (a.PartCategory =u.ParaValue)
left join  spMstItemPrice ItemPrice       ON ItemPrice.CompanyCode=a.CompanyCode 
    AND ItemPrice.PartNo=a.PartNo 
	 LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = a.SupplierCode AND
        gnMstSupplier.CompanyCode = a.CompanyCode
WHERE  u.CodeID='PRCT'  and a.Status > 0  

and a.CompanyCode=@CompanyCode and ItemPrice.BranchCode=@BranchCode





GO

if object_id('sp_spMstAccountView') is not null
	drop procedure sp_spMstAccountView
GO

create procedure [dbo].[sp_spMstAccountView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as

 SELECT a.TypeOfGoods, 
                           b.LookUpValueName as NameOfGoods,  
                           a.SalesAccNo,  a.COGSAccNo,  a.InventoryAccNo,  a.DiscAccNo,  a.ReturnAccNo, 
                            a.ReturnPybAccNo,  a.OtherIncomeAccNo,  a.OtherReceivableAccNo,  a.InTransitAccNo, a.CompanyCode, a.BranchCode
                    FROM   spMstAccount a 
					inner join gnMstLookUpDtl b on b.LookUpValue=a.TypeOfGoods
                    WHERE  B.CodeID='TPGO' 

and a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode





GO

if object_id('sp_spMstCompanyAccount') is not null
	drop procedure sp_spMstCompanyAccount
GO
create procedure  [dbo].[sp_spMstCompanyAccount]  (  @CompanyCode varchar(10)  )
as
select 
CompanyCode,
CompanyCodeTo,
CompanyCodeToDesc,
BranchCodeTo,
BranchCodeToDesc,
WarehouseCodeTo,
WarehouseCodeToDesc,
UrlAddress,
isActive
from spMstCompanyAccount
where CompanyCode= @CompanyCode
GO

if object_id('sp_SpMstItemcondition') is not null
	drop procedure sp_SpMstItemcondition
GO
     CREATE procedure [dbo].[sp_SpMstItemcondition] (  @CompanyCode varchar(10) )  
	 as
                SELECT 
                    a.PartNo, a.NewPartNo, a.InterchangeCode, a.ProductType, a.PartCategory, a.UnitConversion,EndMark , a.CompanyCode
                FROM 
                    spMstItemMod a 
                WHERE a.CompanyCode=@CompanyCode
                    ORDER BY a.PartNo, a.NewPartNo
             
GO

if object_id('sp_SpMstItemConversionview') is not null
	drop procedure sp_SpMstItemConversionview
GO
CREATE procedure [dbo].[sp_SpMstItemConversionview]    (  @CompanyCode varchar(10)  )
as
select   a.CompanyCode,a.PartNo,a.ProductType, b.PartName, FromQty, ToQty ,IsActive
from SpMstItemConversion a
left join spMstItemInfo b on
    a.CompanyCode = b.CompanyCode
    and a.ProductType = b.ProductType
    and a.PartNo = b.PartNo
 where   a.CompanyCode=@CompanyCode

GO

if object_id('sp_SpMstItemLocItemLookupView') is not null
	drop procedure sp_SpMstItemLocItemLookupView
GO

create procedure [dbo].[sp_SpMstItemLocItemLookupView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
	ItemInfo.PartNo,
	Items.ABCClass,
	ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,
	Items.OnOrder,
	Items.ReservedSP,
	Items.ReservedSR,
	Items.ReservedSL,
	Items.MovingCode,
	ItemInfo.SupplierCode,
	ItemInfo.PartName,
	ItemPrice.RetailPrice,
	ItemPrice.RetailPriceInclTax,
	ItemPrice.PurchasePrice
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode
                        AND Items.PartNo = ItemLoc.PartNo
WHERE Items.Status > 0
  AND ItemLoc.WarehouseCode = '00'

and Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode





GO

if object_id('sp_SpMstItemLocView') is not null
	drop procedure sp_SpMstItemLocView
GO

create procedure [dbo].[sp_SpMstItemLocView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
	 ItemLoc.PartNo
	,ItemInfo.PartName
	,ItemInfo.SupplierCode
	,ItemLoc.WarehouseCode
	,ItemLoc.LocationCode
	,Items.PartCategory
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM spMstItemLoc ItemLoc
INNER JOIN spMstItems Items 
    ON ItemLoc.CompanyCode=Items.CompanyCode
    AND ItemLoc.BranchCode=Items.BranchCode
    AND ItemLoc.PartNo=Items.PartNo
INNER JOIN spMstItemInfo ItemInfo 
    ON ItemLoc.CompanyCode=ItemInfo.CompanyCode
    AND ItemLoc.PartNo=ItemInfo.PartNo
WHERE
	ItemLoc.WarehouseCode NOT LIKE 'X%'


and Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode





GO

if object_id('sp_SpMstItemModifInfo') is not null
	drop procedure sp_SpMstItemModifInfo
GO
CREATE procedure [dbo].[sp_SpMstItemModifInfo]  (  @CompanyCode varchar(10))
 as

SELECT distinct
                     ItemInfo.PartNo
                    ,ItemInfo.ProductType
					   ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRDT' AND 
                             LookUpValue = ItemInfo.ProductType AND 
                             CompanyCode = @CompanyCode) AS ProductTypeName
                    ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRCT' AND 
                             LookUpValue = ItemInfo.PartCategory AND 
                             CompanyCode = @CompanyCode) AS CategoryName
                    ,ItemInfo.PartCategory
                    ,ItemInfo.PartName
                    ,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
                    ,ItemInfo.OrderUnit
                    ,ItemInfo.SupplierCode
                    ,Supplier.SupplierName ,ItemInfo.CompanyCode 
                FROM SpMstItemInfo ItemInfo
                LEFT JOIN GnMstSupplier Supplier ON 
                    Supplier.CompanyCode  = ItemInfo.CompanyCode 
                AND Supplier.SupplierCode = ItemInfo.SupplierCode

				where  ItemInfo.CompanyCode= @CompanyCode
				
     
                 
GO

if object_id('sp_SpMstItemModifSelect') is not null
	drop procedure sp_SpMstItemModifSelect
GO
CREATE procedure [dbo].[sp_SpMstItemModifSelect]  (  @CompanyCode varchar(10),@PartNo varchar(50))
 as

SELECT 
                     ItemInfo.PartNo
                    ,ItemInfo.ProductType
					   ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRDT' AND 
                             LookUpValue = ItemInfo.ProductType AND 
                             CompanyCode = @CompanyCode) AS ProductTypeName
                    ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRCT' AND 
                             LookUpValue = ItemInfo.PartCategory AND 
                             CompanyCode = @CompanyCode) AS CategoryName
                    ,ItemInfo.PartCategory
                    ,ItemInfo.PartName
                    ,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
                    ,ItemInfo.OrderUnit
                    ,ItemInfo.SupplierCode
                    ,Supplier.SupplierName ,ItemInfo.CompanyCode 
                FROM SpMstItemInfo ItemInfo
                LEFT JOIN GnMstSupplier Supplier ON 
                    Supplier.CompanyCode  = ItemInfo.CompanyCode 
                AND Supplier.SupplierCode = ItemInfo.SupplierCode

				where  ItemInfo.CompanyCode= @CompanyCode
				and ItemInfo.PartNo=@PartNo
     
                 
GO

if object_id('sp_spMstMovingCodeView') is not null
	drop procedure sp_spMstMovingCodeView
GO

CREATE procedure [dbo].[sp_spMstMovingCodeView]  (@CompanyCode varchar(15))
 as
SELECT MovingCode, MovingCodeName,
Formula = Cast(Param1 as varchar(10)) + Sign1 + Variable + Sign2 + Cast(Param2 as varchar(10)),
Param1, Sign1, Variable, Param2, Sign2,CompanyCode
FROM spMstMovingCode
where CompanyCode=@CompanyCode







GO

if object_id('sp_spMstOrderParamLookup') is not null
	drop procedure sp_spMstOrderParamLookup
GO
       create procedure [dbo].[sp_spMstOrderParamLookup] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@SupplierCode varchar(20))
 as   
		    SELECT distinct a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
 

            WHERE a.CompanyCode=@CompanyCode
            AND a.BranchCode=@BranchCode and a.SupplierCode=@SupplierCode
GO

if object_id('sp_spMstOrderParamView') is not null
	drop procedure sp_spMstOrderParamView
GO
       create procedure [dbo].[sp_spMstOrderParamView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as   
		    SELECT a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
 

            WHERE a.CompanyCode=@CompanyCode
            AND a.BranchCode=@BranchCode
GO

if object_id('sp_spMstPurchCampaignView') is not null
	drop procedure sp_spMstPurchCampaignView
GO

create procedure [dbo].[sp_spMstPurchCampaignView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
spMstPurchCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstPurchCampaign.DiscPct, 
spMstPurchCampaign.BegDate,
spMstPurchCampaign.EndDate,
spMstPurchCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstPurchCampaign.CompanyCode,
  spMstPurchCampaign.BranchCode
  FROM spMstPurchCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstPurchCampaign.PartNo AND	
        spMstItemInfo.CompanyCode = spMstPurchCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstPurchCampaign.SupplierCode AND
        gnMstSupplier.CompanyCode = spMstPurchCampaign.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstPurchCampaign.CompanyCode AND 
	      spMstItems.BranchCode=spMstPurchCampaign.BranchCode AND 
				spMstItems.PartNo=spMstPurchCampaign.PartNo
where  spMstPurchCampaign.CompanyCode=@CompanyCode and spMstPurchCampaign.BranchCode=@BranchCode





GO

if object_id('sp_spMstSalesCampaignView') is not null
	drop procedure sp_spMstSalesCampaignView
GO

create procedure [dbo].[sp_spMstSalesCampaignView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
spMstSalesCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstSalesCampaign.DiscPct, 
spMstSalesCampaign.BegDate,
spMstSalesCampaign.EndDate,
spMstSalesCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstSalesCampaign.CompanyCode,
  spMstSalesCampaign.BranchCode
  FROM spMstSalesCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstSalesCampaign.PartNo AND spMstItemInfo.CompanyCode = spMstSalesCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstItemInfo.SupplierCode AND gnMstSupplier.CompanyCode = spMstItemInfo.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstSalesCampaign.CompanyCode AND spMstItems.BranchCode=spMstSalesCampaign.BranchCode 
        AND spMstItems.PartNo=spMstSalesCampaign.PartNo
 
where  spMstSalesCampaign.CompanyCode=@CompanyCode and spMstSalesCampaign.BranchCode=@BranchCode





GO

if object_id('sp_spMstSalesTargetDetil') is not null
	drop procedure sp_spMstSalesTargetDetil
GO
CREATE procedure [dbo].[sp_spMstSalesTargetDetil] (
	@CompanyCode varchar(10),
	@BranchCode varchar(10)
)
as
select 
	a.CompanyCode,
	a.BranchCode,
	a.[Year],
	a.[Month],
	a.CategoryCode,
	(select LookUpValueName from gnMstLookUpDtl where CodeID='CSCT' and CompanyCode= a.CompanyCode and LookUpValue = a.CategoryCode) CategoryName,
	a.QtyTarget,
	a.AmountTarget,
	a.TotalJaringan
from spMstSalesTargetDtl a
WHERE a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode

GO

if object_id('sp_spMstSalesTargetDtl') is not null
	drop procedure sp_spMstSalesTargetDtl
GO
CREATE procedure [dbo].[sp_spMstSalesTargetDtl]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@Year Varchar(4),@Month varchar(2))
as
select 
a.CompanyCode,
a.BranchCode,
 a.[Year],
a.[Month],
a.CategoryCode,
   b.LookUpValueName  CategoryName,
a.QtyTarget,
a.AmountTarget,
a.TotalJaringan
from spMstSalesTargetDtl a
inner join gnMstLookUpDtl b on 
a.CompanyCode=b.CompanyCode 
and a.CategoryCode=b.LookUpValue
WHERE  b.CodeID='CSCT' and a.CompanyCode=@CompanyCode and  a.BranchCode=@BranchCode
and a.[Year]=@Year and a.[Month]=@Month
GO

if object_id('sp_spMstSalesTargetDtlSum') is not null
	drop procedure sp_spMstSalesTargetDtlSum
GO
CREATE procedure [dbo].[sp_spMstSalesTargetDtlSum]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@Year Varchar(4),@Month varchar(2))
as
select 

sum(a.QtyTarget) as sumQtyTarget,
sum(a.AmountTarget) as sumAmountTarget,
sum(a.TotalJaringan) as sumTotalJaringan
from spMstSalesTargetDtl a
 WHERE a.CompanyCode=@CompanyCode and  a.BranchCode=@BranchCode
and a.[Year]=@Year and a.[Month]=@Month
GO

if object_id('sp_spMstSalesTargetview') is not null
	drop procedure sp_spMstSalesTargetview
GO

CREATE procedure [dbo].[sp_spMstSalesTargetview] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT  CompanyCode,BranchCode,  [Year]  , 
                               [Month]  , QtyTarget, AmountTarget, TotalJaringan 
                                FROM spMstSalesTarget
WHERE  CompanyCode=@CompanyCode and  BranchCode=@BranchCode





GO

if object_id('sp_SpPosLkp') is not null
	drop procedure sp_SpPosLkp
GO

create procedure sp_SpPosLkp
@CompanyCode varchar(15),  
@BranchCode varchar(15),   
@TypeOfGoods  varchar(15)
as

SELECT 
 a.POSNo
,a.PosDate
,ISNULL(a.IsDeleted, 0) IsDeleted
,a.SupplierCode
,b.SupplierName
FROM spTrnPPOSHdr a
INNER JOIN gnMstSupplier b ON b.SupplierCode = a.SupplierCode and b.CompanyCode = a.CompanyCode
WHERE a.CompanyCode=@CompanyCode 
	  AND a.BranchCode=@BranchCode
      AND a.IsDeleted=0 
      AND TypeOfGoods = @TypeOfGoods
ORDER BY a.POSNo ASC
        

GO

if object_id('sp_SpReceiveClaimNo') is not null
	drop procedure sp_SpReceiveClaimNo
GO


CREATE procedure [dbo].[sp_SpReceiveClaimNo] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10))

as
SELECT DISTINCT a.CompanyCode, a.BranchCode, a.ClaimNo
,a.ClaimDate , TypeOfGoods            
FROM spTrnPClaimHdr a
INNER JOIN spTrnPClaimDtl b ON b.CompanyCode = a.CompanyCode
AND b.BranchCode = a.BranchCode
AND b.ClaimNo = a.ClaimNo
WHERE a.CompanyCode = @CompanyCode
AND a.BranchCode = @BranchCode   
AND a.Status = '2'
AND a.TypeOfGoods = @TypeOfGoods
AND 
(SELECT ISNULL(SUM(OvertageQty) + SUM(ShortageQty) + SUM(DemageQty) + SUM(WrongQty),0) FROM spTrnPClaimDtl 
WHERE CompanyCode =  @CompanyCode
AND BranchCode = @BranchCode   
AND ClaimNo = a.ClaimNo) >
(SELECT  ISNULL(SUM(c.RcvOvertageQty) + SUM(c.RcvShortageQty) + SUM(c.RcvDamageQty) + SUM(c.RcvWrongQty),0) FROM spTrnPRcvClaimDtl c
INNER JOIN spTrnPRcvClaimHdr b ON c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode AND c.ClaimNo = b.ClaimNo AND c.ClaimReceivedNo = b.ClaimReceivedNo
WHERE c.CompanyCode =  @CompanyCode
AND c.BranchCode = @BranchCode   
AND c.ClaimNo = a.ClaimNo AND b.Status NOT IN (3))
ORDER BY a.ClaimNo DESC


GO

if object_id('sp_SpSOSelectforEntry') is not null
	drop procedure sp_SpSOSelectforEntry
GO

 CREATE PROCEDURE [dbo].[sp_SpSOSelectforEntry]   
@CompanyCode varchar(15),  
@BranchCode varchar(15),   
@ProductType  varchar(15),
@WarehouseCode  varchar(15)   

AS  
 SELECT
 distinct
	    a.PartNo,
	    (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) AS PartName
    FROM
	    spMstItems a
        INNER JOIN spMstItemLoc b ON a.CompanyCode = b.CompanyCode
            AND a.BranchCode = b.BranchCode
            AND a.PartNo = b.PartNo
    WHERE
	    a.CompanyCode = @CompanyCode
	    AND a.BranchCode = @BranchCode	
	    AND a.ProductType = @ProductType
        AND b.WarehouseCode = @WarehouseCode
    ORDER BY
        PartNo ASC
        
        
GO

if object_id('sp_SpSOSelectforInsert') is not null
	drop procedure sp_SpSOSelectforInsert
GO

CREATE procedure [dbo].[sp_SpSOSelectforInsert] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@LocationCode varchar(10))
 as
SELECT 
	 ItemLoc.PartNo	
	,ItemLoc.WarehouseCode
	,ItemLoc.LocationCode
	,Items.PartCategory
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
	,itemloc.OnHand
FROM spMstItemLoc ItemLoc
INNER JOIN spMstItems Items 
    ON ItemLoc.CompanyCode=Items.CompanyCode
    AND ItemLoc.BranchCode=Items.BranchCode
    AND ItemLoc.PartNo=Items.PartNo
WHERE	
	 Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode and ItemLoc.LocationCode like '%' +@LocationCode

GO

if object_id('sp_SpSOSelectforLookup') is not null
	drop procedure sp_SpSOSelectforLookup
GO

CREATE procedure [dbo].[sp_SpSOSelectforLookup] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))  
 as  
select distinct(a.STNo)  
  , b.WarehouseCode  
  , b.STHdrNo  
  --, a.PartNo  
  from spTrnStockTakingTemp a with(nolock, nowait)  
       left join spTrnStockTakingHdr b with(nolock, nowait) on a.CompanyCode = b.CompanyCode  
   and a.Branchcode = b.Branchcode   
   and a.STHdrNo = b.STHdrNo   
 where a.status IN ('0', '1')  
   and b.status < 2  
   and a.CompanyCode = @CompanyCode  
   and a.Branchcode = @BranchCode
GO

if object_id('sp_SpSrvLampLkp') is not null
	drop procedure sp_SpSrvLampLkp
GO

CREATE procedure [dbo].[sp_SpSrvLampLkp]
@CompanyCode varchar(15),  
@BranchCode varchar(15),   
@SalesType char(1)

--exec sp_SpSrvLampLkp '6006410','600641001',1
as
SELECT
    DISTINCT LmpNo
    , LmpDate
    , (SELECT TOP 1 DocNo FROM spTrnSPickingDtl
		WHERE spTrnSPickingDtl.CompanyCode = spTrnSLmpHdr.CompanyCode
			AND spTrnSPickingDtl.BranchCode = spTrnSLmpHdr.BranchCode
			AND spTrnSPickingDtl.PickingSlipNo = spTrnSLmpHdr.PickingSlipNo
		) AS SSNo
	, (SELECT TOP 1 DocDate FROM spTrnSPickingDtl
		WHERE spTrnSPickingDtl.CompanyCode = spTrnSLmpHdr.CompanyCode
			AND spTrnSPickingDtl.BranchCode = spTrnSLmpHdr.BranchCode
			AND spTrnSPickingDtl.PickingSlipNo = spTrnSLmpHdr.PickingSlipNo
		) AS SSDate
    , spTrnSLmpHdr.BPSFNo
    , spTrnSLmpHdr.BPSFDate
    , spTrnSLmpHdr.PickingSlipNo
    , spTrnSLmpHdr.PickingSlipDate
FROM 
    spTrnSLmpHdr
    INNER JOIN spTrnSBPSFHdr ON spTrnSBPSFHdr.Companycode = spTrnSLmpHdr.CompanyCode 
            AND spTrnSBPSFHdr.BranchCode = spTrnSLmpHdr.BranchCode 
            AND spTrnSBPSFHdr.BPSFNo = spTrnSLmpHdr.BPSFNo 
WHERE 
    spTrnSLmpHdr.CompanyCode = @CompanyCode
    AND spTrnSLmpHdr.BranchCode = @BranchCode
    AND spTrnSBPSFHdr.SalesType = @SalesType
ORDER BY 
    LmpNo DESC
        
GO

if object_id('sp_UpdateABCClassTuning') is not null
	drop procedure sp_UpdateABCClassTuning
GO





CREATE procedure [dbo].[sp_UpdateABCClassTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year int,
@Month int,
@PID varchar(10))


as

/*SET @Year = '{0}'
SET @Month = '{1}'
SET @CompanyCode = '{2}'
SET @BranchCode = '{3}'
SET @PID = '{4}'*/

SELECT * into #A1 from(
SELECT a.CompanyCode, a.BranchCode, a.PartNo, ISNULL(b.CostPrice, 0) AS HargaPokok, ISNULL(c.SalesQty, 0) AS SalesQty, ISNULL(b.CostPrice * c.SalesQty, 0) as TotalPokok
FROM 
spMstItems a
LEFT JOIN spMstItemPrice b On a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode and a.PartNo = b.PartNo
LEFT JOIN 
(SELECT CompanyCode, BranchCode, PartNo, SalesQty FROM SpHstDemandItem a
  WHERE a.Year  = @Year
    AND a.Month = @Month) c ON a.CompanyCode = c.CompanyCode AND c.BranchCode = b.BranchCode AND a.PartNo = c.PartNo
LEFT JOIN
(SELECT ABCClassAPct, ABCClassBPct, ABCClassCPct, CompanyCode, BranchCode
                        FROM gnMstCoProfileSpare
                        WHERE CompanyCode = @CompanyCode
                        AND BranchCode = @BranchCode) d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode
WHERE a.CompanyCode = @CompanyCode
    AND a.BranchCode = @BranchCode
) #A1
--==========================================

SELECT partno, TotalPokok, Total into #A2 from 
(
SELECT TOP 1000000000 a.CompanyCode, a.BranchCode, a.PartNo, a.TotalPokok, (SELECT Sum(b.TotalPokok) FROM #A1 b WHERE a.TotalPokok <= b.TotalPokok) AS Total 
FROM #A1 a 
ORDER BY a.TotalPokok DESC
 ) #A2 WHERE TotalPokok > 0
--==========================================

select * into #A3
FROM(
SELECT CompanyCode, BranchCode, SUM(TotalPokok) AS TotalFinal FROM #A1 GROUP BY CompanyCode, BranchCode
) #A3
--==========================================

SELECT * INTO #A4
FROM(
SELECT a.CompanyCode, a.BranchCode, a.PartNo, b.Total, c.TotalFinal,
CASE WHEN c.TotalFinal = 0 THEN 'C' ELSE CASE WHEN ((b.Total/c.TotalFinal) * 100) <= ABCClassAPct THEN 'A' ELSE CASE WHEN ISNULL(((b.Total/c.TotalFinal) * 100),0) > ABCClassAPct AND ((b.Total/c.TotalFinal) * 100) <= ABCClassBPct THEN 'B' ELSE CASE WHEN ISNULL(((b.Total/c.TotalFinal) * 100),0) > ABCClassBPct THEN 'C' END END END END AS ABCClass
FROM #A1 a  
INNER JOIN #A2 b ON  a.PartNo = b.PartNo
LEFT JOIN #A3 c ON  a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
LEFT JOIN (SELECT ABCClassAPct, ABCClassBPct, ABCClassCPct, CompanyCode, BranchCode
                        FROM gnMstCoProfileSpare
                        WHERE CompanyCode = @CompanyCode
                        AND BranchCode = @BranchCode) d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode
)#A4 

--update spMstItems set ABCClass = isnull((select ABCClass from #A4 where PartNo = spMstItems.PartNo and CompanyCode = spMstItems.CompanyCode and BranchCode = spMstItems.BranchCode), spMstItems.ABCClass)
--update spMstItems set LastUpdateBy = @PID, LastUpdateDate = GetDate()

UPDATE spMstItems SET ABCClass = isnull(b.ABCClass, a.ABCClass),
LastUpdateBy  = @PID, 
LastUpdateDate = GetDate() 
FROM spMstItems a, #A4 b
WHERE a.CompanyCode = b.CompanyCode 
AND a.BranchCode = b.BranchCode
AND a.PartNo = b.PartNo

DROP table #A1
DROP table #A2
DROP table #A3
DROP table #A4

GO

if object_id('sp_UpdateBOMTuning') is not null
	drop procedure sp_UpdateBOMTuning
GO






CREATE procedure [dbo].[sp_UpdateBOMTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@User varchar(10)
)


as

UPDATE spMstItems
SET spMstItems.BOMInvCostPrice= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK)
						WHERE spMstItemPrice.CompanyCode=spMstItems.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItems.BranchCode
							AND spMstItemPrice.PartNo=spMstItems.PartNo), spMstItems.BOMInvCostPrice),
	spMstItems.BOMInvQty= spMstItems.OnHand,
	spMstItems.BOMInvAmt= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK)
						WHERE spMstItemPrice.CompanyCode=spMstItems.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItems.BranchCode
							AND spMstItemPrice.PartNo=spMstItems.PartNo), spMstItems.BOMInvCostPrice)
                            * spMstItems.OnHand,
	spMstItems.LastUpdateBy=@User,	
	spMstItems.LastUpdateDate=GetDate()	
WHERE spMstItems.CompanyCode=@CompanyCode AND spMstItems.BranchCode=@BranchCode

UPDATE spMstItemLoc
SET spMstItemLoc.BOMInvCostPrice= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK) 
						WHERE spMstItemPrice.CompanyCode=spMstItemLoc.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItemLoc.BranchCode
							AND spMstItemPrice.PartNo=spMstItemLoc.PartNo 
							AND spMstItemLoc.WarehouseCode=spMstItemLoc.WarehouseCode), spMstItemLoc.BOMInvCostPrice),
	spMstItemLoc.BOMInvQty= spMstItemLoc.OnHand,
	spMstItemLoc.BOMInvAmount= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK) 
						WHERE spMstItemPrice.CompanyCode=spMstItemLoc.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItemLoc.BranchCode
							AND spMstItemPrice.PartNo=spMstItemLoc.PartNo 
							AND spMstItemLoc.WarehouseCode=spMstItemLoc.WarehouseCode), spMstItemLoc.BOMInvCostPrice)
                            * spMstItemLoc.OnHand,
	spMstItemLoc.LastUpdateBy=@User,	
	spMstItemLoc.LastUpdateDate=GetDate()	
WHERE spMstItemLoc.CompanyCode=@CompanyCode AND spMstItemLoc.BranchCode=@BranchCode

GO

if object_id('sp_UpdateBORegisterTuning') is not null
	drop procedure sp_UpdateBORegisterTuning
GO





CREATE procedure [dbo].[sp_UpdateBORegisterTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@LastUpdateBy varchar(10))


as

UPDATE spMstItems
SET BackOrderSP = 0, BackOrderSR = 0, BackOrderSL = 0
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode

UPDATE spMstItemLoc
SET BackOrderSP = 0, BackOrderSR = 0, BackOrderSL = 0
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode

SELECT A.CompanyCode, A.BranchCode, A.WarehouseCode, A.Partno, B.SalesType, SUM(A.QtyBO -(A.QtyBOSupply + A.QtyBOCancel)) as BOAvail 
INTO #TempBo
FROM spTrnSORDDtl A WITH(NOWAIT, NOLOCK) INNER JOIN spTrnSORDHdr B WITH(NOWAIT, NOLOCK) 
ON A.CompanyCode = B.CompanyCode 
AND A.BranchCode = B.BranchCode
AND A.DocNo = B.DocNo
WHERE A.CompanyCode = @CompanyCode 
AND A.BranchCode = @BranchCode
GROUP BY A.CompanyCode, A.BranchCode, WarehouseCode, A.Partno, B.SalesType
HAVING SUM(A.QtyBO -(A.QtyBOSupply + A.QtyBOCancel)) > 0

UPDATE spMstItems 
SET LastUpdateBy = @LastUpdateBy, LastUpdateDate = getDate(),
    BackOrderSP = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItems.CompanyCode
    AND a.BranchCode = spMstItems.BranchCode
    AND a.PartNo = spMstItems.PartNo
    AND a.SalesType in ('0','1')), spMstItems.BackOrderSP),
 BackOrderSR = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItems.CompanyCode
    AND a.BranchCode = spMstItems.BranchCode
    AND a.PartNo = spMstItems.PartNo
    AND a.SalesType='2'), spMstItems.BackOrderSR),
 BackOrderSL = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a
    WHERE a.CompanyCode = spMstItems.CompanyCode
    AND a.BranchCode = spMstItems.BranchCode 
    AND a.PartNo = spMstItems.PartNo
    AND a.SalesType='3'), spMstItems.BackOrderSL)
WHERE spMstItems.CompanyCode=@CompanyCode
AND spMstItems.BranchCode=@BranchCode 

UPDATE spMstItemLoc 
SET LastUpdateBy = @LastUpdateBy, LastUpdateDate = getDate(),
 BackOrderSP = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItemLoc.CompanyCode
    AND a.BranchCode = spMstItemLoc.BranchCode
    AND a.WarehouseCode = spMstItemLoc.WarehouseCode
    AND a.PartNo = spMstItemLoc.PartNo 
    AND a.SalesType in ('0','1')), spMstItemLoc.BackOrderSP),
 BackOrderSR = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a  
    WHERE a.CompanyCode = spMstItemLoc.CompanyCode
    AND a.BranchCode = spMstItemLoc.BranchCode
    AND a.WarehouseCode = spMstItemLoc.WarehouseCode
    AND a.PartNo = spMstItemLoc.PartNo 
    AND a.SalesType='2'), spMstItemLoc.BackOrderSR),
 BackOrderSL = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItemLoc.CompanyCode
    AND a.BranchCode = spMstItemLoc.BranchCode
    AND a.WarehouseCode = spMstItemLoc.WarehouseCode
    AND a.PartNo = spMstItemLoc.PartNo 
    AND a.SalesType='3'), spMstItemLoc.BackOrderSL)
WHERE spMstItemLoc.CompanyCode=@CompanyCode
AND spMstItemLoc.BranchCode=@BranchCode 
AND spMstItemLoc.WarehouseCode = '00'

DROP TABLE #TempBo






GO

if object_id('sp_UpdateDemandAverageTuning') is not null
	drop procedure sp_UpdateDemandAverageTuning
GO





CREATE procedure [dbo].[sp_UpdateDemandAverageTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TransDate datetime)


as

--declare @TransDate as datetime
--set @TransDate = '{0}'

select * into #t1 from (
select a.CompanyCode
,a.BranchCode
,a.PartNo
,a.DemandQty
,a.Year
,a.Month
,convert(varchar,a.Year) + right('0' + convert(varchar,a.Month),2) as date0
,convert(varchar(6), dateadd(m,-5,@TransDate), 112) date1
,convert(varchar(6), @TransDate, 112) date2
from spHstDemandItem a WITH(NOWAIT, NOLOCK) where a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
) #T1

select * into #T2 from (
select 
a.* 
,case when date0 between date1 and date2 then 1 else 0 end as IsValid
from #t1 a
) #t2

select * into #t3 from (
select CompanyCode, BranchCode, PartNo, Sum(DemandQty) DemandQty, Sum(DemandQty)/(6*30) DemandAvg from #t2 
where IsValid = 1 and DemandQty > 0
group by CompanyCode, BranchCode, PartNo
) #t3

select * into #t4 from (
select a.companycode, a.branchcode, a.partno, 0 as DemandAvg 
from spMstItems a
left join #t3 b on a.companycode = b.companycode and a.branchcode = b.branchcode and a.partno = b.partno
where  a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode and b.partno is null
) #t4


update spMstItems set DemandAverage = isnull(b.DemandAvg, 0)
from spMstItems a, #t4 b
where a.CompanyCode=b.CompanyCode
and a.BranchCode=b.BranchCode
and a.PartNo=b.PartNo

update spMstItems set DemandAverage = isnull(b.DemandAvg, a.DemandAverage)
from spMstItems a, #t3 b
where a.CompanyCode=b.CompanyCode
and a.BranchCode=b.BranchCode
and a.PartNo=b.PartNo

drop table #t4
drop table #t3
drop table #t2
drop table #t1

GO

if object_id('sp_UpdateDemandHistoryTuning') is not null
	drop procedure sp_UpdateDemandHistoryTuning
GO






CREATE procedure [dbo].[sp_UpdateDemandHistoryTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year int,
@Month int,
@ProfitCenterCode varchar(10),
@LastUpdateBy varchar(10)
)


as

DELETE SpHstDemandItem 
                    WHERE Year=@Year AND Month=@Month AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode

                    SELECT 
                        x.CompanyCode
                        , x.BranchCode
                        , @Year Year
                        , @Month Month
                        , x.PartNo
                        , 0 AS DemandFreq
                        , 0 AS DemandQty
                        , 0 AS SalesFreq
                        , 0 AS SalesQty    
                        , x.MovingCode
                        , x.ProductType
                        , x.PartCategory
                        , x.ABCClass
                        , @LastUpdateBy LastUpdateBy
                        , getdate() LastUpdateDate			
                    INTO #SpHstDemandItem 
                    FROM spMstItems x WITH(NOWAIT,NOLOCK) 
                    WHERE x.CompanyCode = @CompanyCode
                        AND x.BranchCode = @BranchCode
                    
                    INSERT INTO SpHstDemandItem SELECT * FROM #SpHstDemandItem

                    DROP TABLE #SpHstDemandItem


GO

if object_id('sp_UpdateMovingCodeTuningV2') is not null
	drop procedure sp_UpdateMovingCodeTuningV2
GO





CREATE procedure [dbo].[sp_UpdateMovingCodeTuningV2] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TransDate datetime)


as


select * into #t1 from (
select 
 a.PartNo
,a.DemandFreq
,a.DemandQty
,convert(varchar,a.Year) + right('0' + convert(varchar,a.Month),2) as date0
,convert(varchar(6), dateadd(m,-5,@TransDate), 112) date1
,convert(varchar(6), dateadd(m,-4,@TransDate), 112) date2
,convert(varchar(6), dateadd(m,-3,@TransDate), 112) date3
,convert(varchar(6), dateadd(m,-2,@TransDate), 112) date4
,convert(varchar(6), dateadd(m,-1,@TransDate), 112) date5
,convert(varchar(6), dateadd(m,-0,@TransDate), 112) date6
from spHstDemandItem a WITH(NOWAIT, NOLOCK) 
where a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode
 and convert(varchar,a.Year) + right('0' + convert(varchar,a.Month),2) >= convert(varchar(6), dateadd(m,-6,@TransDate), 112)
) #t1

select * into #t2 from (
select 
 a.PartNo
,a.DemandFreq
,case when (date0=date1) and a.DemandFreq>0 then 1 else 0 end as T1
,case when (date0=date2) and a.DemandFreq>0 then 1 else 0 end as T2
,case when (date0=date3) and a.DemandFreq>0 then 1 else 0 end as T3
,case when (date0=date4) and a.DemandFreq>0 then 1 else 0 end as T4
,case when (date0=date5) and a.DemandFreq>0 then 1 else 0 end as T5
,case when (date0=date6) and a.DemandFreq>0 then 1 else 0 end as T6
from #t1 a
) #t2

select * into #t3 from (
select
 a.PartNo
,case when (sum(T1)> 0) then 1 else 0 end as D1
,case when (sum(T2)> 0) then 1 else 0 end as D2
,case when (sum(T3)> 0) then 1 else 0 end as D3
,case when (sum(T4)> 0) then 1 else 0 end as D4
,case when (sum(T5)> 0) then 1 else 0 end as D5
,case when (sum(T6)> 0) then 1 else 0 end as D6
from #t2 a
group by a.PartNo
) #t3

select * into #t4 from (
select 
 a.PartNo
,b.NewPartNo
from #t3 a
left join spMstItemMod b WITH(NOWAIT, NOLOCK)
  on b.PartNo = a.PartNo and b.CompanyCode = @CompanyCode
where b.NewPartNo <> ''
) #t4

insert into #t3
select 
 NewPartNo as PartNo
,D1=0,D2=0,D3=0,D4=0,D5=0,D6=0
from #t4
where NewPartNo not in (select PartNo from #t3)

select * into #t5 from(
select distinct PartNo, D1, D2, D3, D4, D5, D6 from #t3)#t5


select * into #t6 from (
select 
	PartNo
	, CASE WHEN ISNULL((SELECT D1 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D1 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D1
	, CASE WHEN ISNULL((SELECT D2 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D2 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D2
	, CASE WHEN ISNULL((SELECT D3 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D3 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D3
	, CASE WHEN ISNULL((SELECT D4 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D4 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D4
	, CASE WHEN ISNULL((SELECT D5 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D5 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D5
	, CASE WHEN ISNULL((SELECT D6 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D6 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D6
from #t4 a) #t6

update #t5
set d1 = b.d1
	, d2 = b.d2
	, d3 = b.d3
	, d4 = b.d4
	, d5 = b.d5
	, d6 = b.d6
from #t5 a, #t6 b
where a.partno = b.partno


select * into #t7 from (
select @CompanyCode CompanyCode, @BranchCode BranchCode, partno, d1 + d2 + d3 + d4 + d5 + d6  dTotal from #t5) #t7

update spMstItems 
set MovingCode = CASE WHEN b.dTotal = 0 THEN 5
			ELSE CASE WHEN b.dTotal = 1 THEN 4 
			ELSE CASE WHEN b.dTotal = 2 THEN 4
			ELSE CASE WHEN b.dTotal = 3 THEN 3 
			ELSE CASE WHEN b.dTotal = 4 THEN 3 
			ELSE CASE WHEN b.dTotal = 5 THEN 2 
			ELSE CASE WHEN b.dTotal = 6 THEN 1 
			END END END END END END END 
from spMstItems a, #t7 b
where 
	a.CompanyCode = b.CompanyCode
	and a.branchcode = b.branchcode
	and a.partno = b.partno
	and (datediff(mm, a.BornDate, @transdate) + 1) >= 6 

-- SET MOVING CODE : 0 FOR ITEM THAT BORN DATE < 6 MONTHS
update spMstItems set MovingCode = 0
where CompanyCode = @CompanyCode
  and BranchCode = @BranchCode
  and (datediff(mm, BornDate, @TransDate) + 1) < 6

drop table #t7
drop table #t6
drop table #t5
drop table #t4
drop table #t3
drop table #t2
drop table #t1


GO

if object_id('sp_UpdateOrderPointTuning') is not null
	drop procedure sp_UpdateOrderPointTuning
GO






CREATE procedure [dbo].[sp_UpdateOrderPointTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@LastUpdateBy varchar(10)
)


as

SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PartNo
	, (ISNULL(a.DemandAverage, 0) * (ISNULL(c.LeadTime, 0) + ISNULL(c.OrderCycle, 0))) + 
	  (ISNULL(a.DemandAverage, 0) * ISNULL(c.SafetyStock, 0)) OrderPointQty
    , (ISNULL(a.DemandAverage, 0) * ISNULL(c.SafetyStock, 0)) SafetyStockQty
	, ISNULL(c.LeadTime, 0) LeadTime
	, ISNULL(c.OrderCycle, 0) OrderCycle
	, ISNULL(c.SafetyStock, 0) SafetyStock
INTO
	#OrderPointQty
FROM
	spMstItems a		
	LEFT JOIN spMstItemInfo b ON a.CompanyCode = b.CompanyCode
		AND a.PartNo = b.PartNo		
	LEFT JOIN spMstOrderParam c ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.MovingCode = c.MovingCode
		AND b.SupplierCode = c.SupplierCode
WHERE	
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode

UPDATE spMstItems
SET OrderPointQty = b.OrderPointQty
    , SafetyStockQty = b.SafetyStockQty
	, LeadTime = b.LeadTime
	, OrderCycle = b.OrderCycle
	, SafetyStock = b.SafetyStock
	, LastUpdateBy = @LastUpdateBy
	, LastUpdateDate = GETDATE()
FROM
	spMstItems a, #OrderPointQty b
WHERE
	a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode 
	AND a.PartNo = b.PartNo

DROP TABLE #OrderPointQty


GO

if object_id('uspfn_AbExtractData_II') is not null
	drop procedure uspfn_AbExtractData_II
GO
create procedure uspfn_AbExtractData_II
	@FileID varchar(100),
	@FileContent varchar(max),
	@UserId varchar(25)
as
begin
	--select @FileContent

	update SimDmsIterator 
	   set AttendanceFlatFileExtractionProcessed=0
	     , AttendanceFlatFileExtractionTotal=100

	select * into #a 
	from uspfn_AbSplitString(@FileContent, char(10)+char(13))

	--begin try
		declare c cursor for 
			select * from #a
		declare @Record varchar(100);
		declare @EmployeeID varchar(17);
		declare @AttendanceTime varchar(20);
		declare @MachineCode varchar(15);
		declare @IdentityCode varchar(12);
		declare @CurrentDate datetime;
		declare @CompanyCode varchar(17);
		declare @TrailingZeroIndex tinyint;
		set @CompanyCode = (
			select top 1
			       CompanyCode
			  from gnMstOrganizationHdr 
		);

		declare @NumberOfIteratorRecords int;
		declare @NumberOfRecord int;
		set @NumberOfIteratorRecords = ( select count(*) from SimDmsIterator );
		set @NumberOfRecord = (select count(*) from #a);

		if @NumberOfIteratorRecords = 0
		begin
			insert into SimDmsIterator (AttendanceFlatFileExtractionProcessed, AttendanceFlatFileExtractionTotal)
			values (0, 100)
		end

		update SimDmsIterator
		   set AttendanceFlatFileExtractionProcessed = 0
		     , AttendanceFlatFileExtractionTotal = @NumberOfRecord
			 




		open c
			fetch next from c into @Record

			declare @iterator int;
			set @iterator=1;
			while @@FETCH_STATUS=0
			begin
				if @iterator>2
				begin
					set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr );
					set @EmployeeID = (select * from dbo.SplitString(@Record, ',', 1));
					--set @AttendanceTime = convert(datetime,  (select * from dbo.SplitString(@Record, ',', 3)) + ' ' + (select * from dbo.SplitString(@Record, ',', 4)));
					set @AttendanceTime = (select * from dbo.SplitString(@Record, ',', 3)) + ' ' + (select * from dbo.SplitString(@Record, ',', 4));
					set @MachineCode = (select * from dbo.SplitString(@Record, ',', 5));
					set @IdentityCode = ( 
						case (select * from dbo.SplitString(@Record, ',', 8) )
							when 'scan masuk' then 'I' 
							else 'O' 
						end);


					--select @AttendanceTime as AttendanceTime;
					--select * from dbo.SplitString(@Record, ',', 3);
					exec uspfn_AbInsertAttendanceData 
						 @CompanyCode = @CompanyCode
					   , @FileID = @FileID
					   , @Iterator = @Iterator
					   , @EmployeeID = @EmployeeID
					   , @AttendanceTime = @AttendanceTime
					   , @MachineCode = @MachineCode
					   , @IdentityCode = @IdentityCode
					   , @UserId = @UserID

					update SimDmsIterator 
					   set AttendanceFlatFileExtractionProcessed = @iterator					 
				end

				set @iterator = @iterator + 1;
				fetch next from c into @Record
			end
		close c
		deallocate c

		select Convert(bit, 1);
	--end try
	--begin catch
	--	select Convert(bit, 0);
	--end catch
end



GO

if object_id('uspfn_GetTaxInPeriod') is not null
	drop procedure uspfn_GetTaxInPeriod
GO
 CREATE procedure [dbo].[uspfn_GetTaxInPeriod]
	@CompanyCode nvarchar(25),
	@BranchCode nvarchar(25),
	@ProductType nvarchar(2),
	@PeriodYear int,
	@PeriodMonth int
  
  as
  begin
--DECLARE @CompanyCode nvarchar(25) set @CompanyCode ='6006410'
--DECLARE @BranchCode nvarchar(25) set @BranchCode ='600641001'
--DECLARE @ProductType nvarchar(2) set @ProductType ='4W'
--DECLARE @PeriodYear int set @PeriodYear = 2014
--DECLARE @PeriodMonth int set @PeriodMonth =12

  --exec uspfn_GetTaxInPeriod 6006410,600641001,'4W',2014,12


SELECT * INTO #1 FROM (
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxIn WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth
UNION
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxInHistory WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth 
    AND IsDeleted = '1'
) #1

/* AMBIL SEMUA DATA HPP SPARE */
select * into #t_1 from (
select b.SupplierCode, a.* 
from spTrnPHpp a
left join spTrnPRcvHdr b on b.CompanyCode = a.CompanyCode 
	and b.BranchCode = a.BranchCode
	and b.WRSNo = a.WRSNo
where
	a.CompanyCode	 = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	and a.YearTax	 = @PeriodYear
	and a.MonthTax	 = @PeriodMonth
)#t_1 

/* AMBIL SEMUA DATA BTT OTHER (AP) */
select * into #t_2 from (
select a.* 
from apTrnBTTOtherHdr a
where 
	a.CompanyCode = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	and a.FPJNo <> ''
	and SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    and RIGHT(a.FPJPeriod, 2) = @PeriodMonth
)#t_2 

/* DATA HPP SPARE YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA DENGAN BTT OTHER (NILAI DIJUMLAHKAN) */
SELECT * INTO #t_3 FROM (
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL((ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0)) + g.DppAmt,0) DPPAmt
, ISNULL((ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0)) + g.PPNAmt, 0) PPNAmt
, ISNULL(0 + g.PPNBmAmt, 0) PPNBmAmt
, 'PEMBELIAN SPARE PART' Description
, ISNULL(ISNULL(b.TotItem, 0)+(SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode 
							AND BranchCode = a.BranchCode AND BTTNo = g.BTTNo), 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
	INNER JOIN #t_2 g on g.BranchCode=a.BranchCode AND g.SupplierCode = b.SupplierCode
		AND g.FPJNo = a.TaxNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
) #t_3

-----------------------------------------------------------

/* QUERY UTAMA */
SELECT * INTO Query3S FROM (
-- SALES : PURCHASE
SELECT
  a.CompanyCode
, a.BranchCode
, e.ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode 
, d.SupplierGovName SupplierName
, d.IsPKP 
, d.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.HPPNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, (SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscDPP, 0) + ISNULL(OthersDPP, 0))) FROM omTrPurchaseHPPDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ) DPPAmt
, (SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscPPn, 0) + ISNULL(OthersPPn, 0))) FROM omTrPurchaseHPPDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ) PPNAmt
, (SELECT SUM(ISNULL(Quantity, 0) * ISNULL(AfterDiscPPnBM, 0)) FROM omTrPurchaseHPPDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ) PPNBmAmt
, (SELECT TOP 1 SalesModelCode + ', NO. CHS. ' + CONVERT(VARCHAR, ChassisNo) FROM omTrPurchaseHPPSubDetail 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo) Description
, (SELECT COUNT(HPPSeq) FROM omTrPurchaseHPPSubDetail c 
    LEFT JOIN omTrPurchaseHPPDetailModel b ON c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode 
    AND c.HPPNo = b.HPPNo AND c.BPUNo = b.BPUNo
    WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.HPPNo = a.HPPNo) Quantity
FROM
    omTrPurchaseHPP a WITH(NOLOCK, NOWAIT)
    LEFT JOIN gnMstSupplier d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.SupplierCode = d.SupplierCode
    LEFT JOIN gnMstCoProfile e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
    INNER JOIN gnMstSupplierProfitCenter f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
	    AND a.BranchCode = f.BranchCode
        AND a.SupplierCode = f.SupplierCode
    INNER JOIN gnMstTax g WITH(NOLOCK, NOWAIT) ON a.CompanyCode = g.CompanyCode
        AND f.TaxCode = g.TaxCode        
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND YEAR(a.LockingDate) = @PeriodYear
    AND MONTH(a.LockingDate) = @PeriodMonth
    AND a.Status NOT IN ('3')
    AND f.ProfitCenterCode = '100'    
    AND g.TaxPct > 0
-------------------------------------------------------------------------------------
UNION
-- SALES : KAROSERI
SELECT
  a.CompanyCode
, a.BranchCode
, ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.KaroseriTerimaNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.Quantity, 0) * (ISNULL(a.DPPMaterial, 0) + ISNULL(a.DPPFee, 0) + ISNULL(a.DPPOthers, 0)) DPPAmt
, ISNULL(a.Quantity, 0) * ISNULL(a.PPn, 0) PPNAmt
, 0 PPNBmAmt
, 'Karoseri SPK No: ' + a.KaroseriSPKNo Description
, ISNULL(a.Quantity, 0) Quantity
FROM
    omTrPurchaseKaroseriTerima a WITH(NOLOCK, NOWAIT)
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode  
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode              
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND YEAR(a.LockingDate) = @PeriodYear
    AND MONTH(a.LockingDate) = @PeriodMonth
    AND a.Status NOT IN ('3')
    AND d.ProfitCenterCode = '100'
    AND e.TaxPct > 0
-----------------------------------------------------------------------------------------
UNION
-- SALES : PURCHASE RETURN
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, YEAR(ReturnDate) PeriodYear
, MONTH(ReturnDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'R' DocumentType
, c.SupplierCode SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP IsPKP
, c.NPWPNo NPWP
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') FPJNo
, a.RefferenceDate FPJDate
, a.ReturnNo + ' (' + a.RefferenceNo + ')' ReferenceNo
, a.RefferenceDate ReferenceDate
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') TaxNo  
, a.RefferenceDate TaxDate
, a.ReturnDate SubmissionDate
,(SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscDPP, 0) + ISNULL(OthersDPP, 0))) FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 DPPAmt
,(SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscPPn, 0) + ISNULL(OthersPPn, 0)))FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 PPNAmt
,(SELECT SUM(ISNULL(Quantity, 0) * ISNULL(AfterDiscPPnBM, 0)) FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 PPNBmAmt
, 'RTR-SLS-NO: ' + a.ReturnNo Description
, (SELECT SUM(ISNULL(Quantity, 0))FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 Quantity
FROM
    omTrPurchaseReturn a WITH(NOLOCK, NOWAIT)
    LEFT JOIN omTrPurchaseHPP b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.BranchCode = b.BranchCode
	    AND a.HPPNo = b.HPPNo
    LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND b.SupplierCode = c.SupplierCode
    LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode  
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode              
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND YEAR(ReturnDate) = @PeriodYear
    AND MONTH(ReturnDate) = @PeriodMonth
    AND a.Status NOT IN ('3')
    AND e.ProfitCenterCode = '100'
    AND f.TaxPct > 0
---------------------------------------------------------------------------------------
UNION
-- SERVICE
SELECT
 a.CompanyCode
, a.BranchCode
, a.ProductType
, YEAR(RecDate) PeriodYear
, MONTH(RecDate) PeriodMonth
, '200' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP IsPKP
, b.NPWPNo NPWP
, a.FPJNo FPJNo
, a.FPJDate FPJDate
, a.PONo + ' (' + a.JobOrderNo + ')' ReferenceNo
, a.RecDate RefferenceDate
, a.FPJGovNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.DPPAmt, 0) DPPAmt
, ISNULL(a.PPnAmt, 0) PPNAmt
, 0 PPNBmAmt
, 'REC-SV-NO: ' + a.RecNo Description
, 1 Quantity
FROM
    svTrnPOSubCon a	WITH(NOLOCK, NOWAIT)
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    INNER JOIN gnMstSupplierProfitCenter c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
        AND a.SupplierCode = c.SupplierCode      
    INNER JOIN gnMstTax d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
        AND c.TaxCode = d.TaxCode          
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND a.ProductType = @ProductType
    AND YEAR(RecDate) = @PeriodYear
    AND MONTH(RecDate) = @PeriodMonth
    AND c.ProfitCenterCode = '200'
    AND d.TaxPct > 0
---------------------------------------------------------------------------------------
UNION 
-- SPAREPART
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0) DPPAmt
, ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0) PPNAmt
, 0 PPNBmAmt
, 'PEMBELIAN SPARE PART' Description
, ISNULL(b.TotItem, 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
	AND b.BranchCode+'-'+b.SupplierCode+'-'+a.TaxNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- FINANCE
SELECT
  a.CompanyCode
, a.BranchCode
, c.ProductType
, SUBSTRING(a.FPJPeriod, 1, 4) PeriodYear
, RIGHT(a.FPJPeriod, 2) PeriodMonth
, '000' ProfitCenter
, 'NULL' TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.FPJNo
, a.FPJDate
, a.BTTNo + ' (' + a.ReffNo + ')' ReferenceNo
, a.ReffDate ReferenceDate
, a.FPJNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, a.DPPAmt
, a.PPNAmt
, a.PPnBMAmt
, (SELECT TOP 1 Description FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Description
, (SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Quantity	
FROM
    apTrnBTTOtherHdr a	WITH(NOLOCK, NOWAIT)    
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode               
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    AND RIGHT(a.FPJPeriod, 2) = @PeriodMonth
    AND a.Category = 'INV'
    AND d.ProfitCenterCode = '000'
    AND e.TaxPct > 0
    AND a.BranchCode+'-'+a.SupplierCode+'-'+a.FPJNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- SPARE PART DAN BTT YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA
SELECT * FROM #t_3
) Query3S

select ROW_NUMBER() OVER(ORDER BY q1.BranchCode, q1.ProfitCenter ASC, q1.TaxNo)  SeqNo
    , q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, ISNULL((SELECT TOP 1 TypeOfGoods FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo), '') TypeOfGoods
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, (SELECT TOP 1 FPJNo FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJNo
	, (SELECT TOP 1 FPJDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJDate
	, (SELECT TOP 1 ReferenceNo FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceNo
	, (SELECT TOP 1 ReferenceDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceDate
	, q1.TaxNo
	, (SELECT TOP 1 TaxDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) TaxDate
	, (SELECT TOP 1 SubmissionDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) SubmissionDate
	, SUM(q1.DPPAmt) DPPAmt
	, SUM(q1.PPNAmt) PPNAmt
	, SUM(q1.PPnBMAmt) PPnBMAmt
	, (SELECT TOP 1 Description FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) Description
	, SUM(q1.Quantity) Quantity
from Query3S q1
group by
	q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, q1.TaxNo 

select
    ISNULL(SUM(DPPAmt),0) DPPAmt
    ,ISNULL(SUM(PPnAmt),0) PPnAmt
	,ISNULL((SELECT SUM(DPPAmt) FROM Query3S WHERE IsPKP='1'),0) SumDPPStd 
	,ISNULL((SELECT SUM(DPPAmt) FROM Query3S WHERE IsPKP='0'),0) SumDPPSdh 
	,ISNULL((SELECT SUM(PPnAmt) FROM Query3S WHERE IsPKP='1'),0) SumPPNStd
	,ISNULL((SELECT SUM(PPnAmt) FROM Query3S WHERE IsPKP='0'),0) SumPPNSdh
	,ISNULL(SUM(PPnBMAmt),0) SumPPnBMAmt
from Query3S

drop table Query3S
drop table #1
drop table #t_1
drop table #t_2
drop table #t_3
end
GO

if object_id('uspfn_GnGetDataSHISTTest') is not null
	drop procedure uspfn_GnGetDataSHISTTest
GO
CREATE Procedure [dbo].[uspfn_GnGetDataSHISTTest]    
as    
declare @CompanyCode varchar(20)    
declare @BranchCode  varchar(20)    
declare @DealerCode  char(10)    
declare @TotalItem  int    
declare @LastDate  datetime    
declare @ProductType varchar(100)    
    
set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr);    
set @BranchCode  = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0);    
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode);    
set @ProductType = (select top 1 ProductType from gnMstCoProfile where CompanyCode = @CompanyCode and BranchCode = @BranchCode)    
    
declare @T_SHIST  table (Line varchar(max), SeqNo varchar(max), SeqNo1 varchar(MAX))    
declare @T_SHIST_DTL table    
(    
 Year     varchar(4),    
 Month     varchar(2),    
 BranchCode    varchar(15),    
 BranchName    varchar(100),    
 Area     varchar(100),    
 BranchHeadID   varchar(15),    
 BranchHeadName   varchar(100),    
 SalesHeadID    varchar(15),    
 SalesHeadName   varchar(100),    
 SalesCoordinatorID  varchar(15),    
 SalesCoordinatorName varchar(100),    
 SalesmanID    varchar(15),    
 SalesmanName   varchar(100),    
 JoinDate    varchar(8),    
 ResignDate    varchar(8),    
 GradeDate    varchar(8),    
 Grade     varchar(50),    
 ModelCatagory   varchar(100),    
 SalesType    varchar(100),    
 InvoiceNo    varchar(15),    
 InvoiceDate    varchar(8),    
 SoNo     varchar(15),    
 SalesModelCode   varchar(20),    
 SalesModelYear   varchar(4),    
 SalesModelDesc   varchar(100),    
 FakturPolisiDesc  varchar(100),    
 MarketModel    varchar(100),    
 ColourCode    varchar(15),    
 ColourName    varchar(100),    
 --ColourNameInd   varchar(100),    
 GroupMarketModel  varchar(100),    
 ColumnMarketModel  varchar(100),    
 ChassisCode    varchar(15),    
 ChassisNo    varchar(10),    
 EngineCode    varchar(15),    
 EngineNo    varchar(10),    
 FakturPolisiNo   varchar(15),    
 FakturPolisiDate  varchar(8),    
 Status     varchar(1),    
 CreatedBy    varchar(15),    
 CreatedDate    varchar(8),    
 LastUpdateBy   varchar(15),    
 LastUpdateDate   varchar(8)    
)    
    
insert into @T_SHIST_DTL    
select TOP 2000 a.Year    
 , a.Month    
 , a.BranchCode    
 , a.BranchName    
 , a.Area    
 , a.BranchHeadID    
 , replace(a.BranchHeadName,',','.') BranchHeadName    
 , a.SalesHeadID    
 , replace(a.SalesHeadName,',','.') SalesHeadName    
 , a.SalesCoordinatorID    
 , replace(a.SalesCoordinatorName,',','.') SalesCoordinatorName    
 , a.SalesmanID    
 , replace(replace(a.SalesmanName,',','.'),'''','`') SalesmanName    
 , convert(varchar, isnull(a.JoinDate, '19000101'),112)    
 , convert(varchar, isnull(a.ResignDate, '19000101'),112)    
 , convert(varchar, isnull(a.GradeDate, '19000101'),112)    
 , isnull(a.Grade,1)    
 , a.ModelCatagory    
 , a.SalesType    
 , a.InvoiceNo    
 , convert(varchar, isnull(a.InvoiceDate, '19000101'),112)    
 , a.SoNo    
 , a.SalesModelCode    
 , a.SalesModelYear    
 , a.SalesModelDesc    
 , a.FakturPolisiDesc    
 , a.MarketModel    
 , a.ColourCode    
 , a.ColourName    
 --, a.ColourNameInd  
 , a.GroupMarketModel    
 , a.ColumnMarketModel    
 , isnull(a.ChassisCode, '') ChassisCode    
 , convert(varchar,isnull(a.ChassisNo, 0)) ChassisNo    
 , isnull(a.EngineCode, '') EngineCode    
 , convert(varchar,isnull(a.EngineNo, 0)) EngineNo    
 , isnull(a.FakturPolisiNo, '') FakturPolisiNo    
 , convert(varchar, isnull(a.FakturPolisiDate, '19000101'),112) FakturPolisiDate    
 , a.Status    
 , a.CreatedBy    
 , convert(varchar, isnull(a.CreatedDate, '19000101'),112)    
 , a.LastUpdateBy    
 , convert(varchar, isnull(a.LastUpdateDate, '19000101'),112)    
from omHstInquirySales a    
where a.CompanyCode = @CompanyCode    
-- and a.LastUpdateBy not like 'TR#%'    
 and SalesHeadID = '00421'    
 --and isnull(a.CreatedDate, convert(datetime, '19000101'))    
 --> isnull((    
 --   select top 1 LastSendDate    
 --  from gnMstSendSchedule    
 --    where DataType = 'SHIST'    
 --    order by LastSendDate desc    
 --   ), convert(datetime, '18990101'))    
order by a.CreatedDate    
    
set @TotalItem = (select count(*) from @T_SHIST_DTL)     
set @LastDate  = (select top 1 CreatedDate from @T_SHIST_DTL order by CreatedDate desc)    
    
insert into @T_SHIST     
select 'HSHIST'     
+ left(@DealerCode + replicate(' ',10),10)    
+ left('2000000' + replicate(' ',10),10)    
+ left((select BranchName     
   from GnMstOrganizationDtl     
   where CompanyCode = @CompanyCode     
    and BranchCode = @BranchCode)     
  + replicate(' ',50),50)    
+ right(replicate('0', 6) + convert(varchar, @TotalItem), 6)    
+ (select top 1 case ProductType    
  when '2W' then 'A'     
  when '4W' then 'B'     
  else 'C'      
  end     
   from gnMstCoProfile    
  where CompanyCode = @CompanyCode    
    and BranchCode = @BranchCode)    
+ replicate(' ', 480)    
, 0    
, 0    
    
insert into @T_SHIST    
select distinct '1'    
 + LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchName,'') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.Area,'') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadName,'-') + replicate(' ', 100), 100)    
 + replicate(' ', 226)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
, '1'    
    
from @T_SHIST_DTL a    
group by a.Year    
 , a.Month    
 , a.BranchCode    
 , a.BranchName    
 , a.Area    
 , a.BranchHeadID    
 , a.BranchHeadName    
     
insert into  @T_SHIST    
select distinct '2'    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadName, '-') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorName, '-') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanName, '-') + replicate(' ', 100), 100)    
 + convert(varchar, isnull(a.JoinDate, '19000101'),112)    
 + convert(varchar, isnull(a.ResignDate, '19000101'),112)    
 + convert(varchar, isnull(a.GradeDate, '19000101'),112)    
 + LEFT(isnull(a.Grade, '') + replicate(' ', 50), 50)    
 + replicate(' ', 143)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
, '2'    
from @T_SHIST_DTL a    
group by a.Year    
 , a.Month    
 , a.BranchCode    
 , a.BranchName    
 , a.Area    
 , a.BranchHeadID    
 , a.BranchHeadName    
 , a.SalesHeadID    
 , a.SalesHeadName    
 , a.SalesCoordinatorID    
 , a.SalesCoordinatorName    
 , a.SalesmanID    
 , a.SalesmanName    
 , a.JoinDate    
 , a.ResignDate    
 , a.GradeDate    
 , a.Grade    
     
insert into @T_SHIST    
select distinct '3'    
 + LEFT(isnull(a.ModelCatagory, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.SalesType, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.InvoiceNo, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.InvoiceDate, '19000101'),112)    
 + LEFT(isnull(a.SoNo, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesModelCode, '') + replicate(' ', 20), 20)    
 + RIGHT(replicate('0', 4) + isnull(a.SalesModelYear, '') , 4)    
 + LEFT(isnull(a.SalesModelDesc, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.FakturPolisiDesc, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.MarketModel, '') + replicate(' ', 100), 100)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisNo, '') + replicate(' ', 10), 10)    
, LEFT(isnull(a.SoNo, '') + replicate(' ', 15), 15) + '(1)'    
from @T_SHIST_DTL a    
    
insert into @T_SHIST    
select distinct '4'    
 + LEFT(isnull(a.ColourCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ColourName, '') + replicate(' ', 100), 100)    
-- + LEFT(isnull(a.ColourNameInd, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.GroupMarketModel, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.ColumnMarketModel, '') + replicate(' ', 100), 100)    
 + isnull(a.Status, '0')    
 + LEFT(isnull(a.CreatedBy, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.CreatedDate, '19000101'),112)    
 + LEFT(isnull(a.LastUpdateBy, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.LastUpdateDate, '19000101'), 112)    
 + LEFT(isnull(a.ChassisCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisNo, '') + replicate(' ', 10), 10)    
 + LEFT(isnull(a.EngineCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.EngineNo, '') + replicate(' ', 10), 10)    
 + LEFT(isnull(a.FakturPolisiNo, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.FakturPolisiDate, '19000101'), 112)    
 + replicate(' ', 27)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisNo, '') + replicate(' ', 10), 10)    
,LEFT(isnull(a.SoNo, '') + replicate(' ', 15), 15) + '(2)'    
from @T_SHIST_DTL a    
    
select @LastDate as LastDate    
    
select line from @T_SHIST    
order by SeqNo,SeqNo1    
    
--;with x as(select TOP 2000 * from omHstInquirySales a    
--   where a.CompanyCode = @CompanyCode    
--   and a.LastUpdateBy not like 'TR#%')    
--update x set LastUpdateBy=('TR#' + LastUpdateBy) , LastUpdateDate = getdate() 
GO

if object_id('uspfn_HrGetTeamLeader222') is not null
	drop procedure uspfn_HrGetTeamLeader222
GO
CREATE procedure [dbo].[uspfn_HrGetTeamLeader222]
	@CompanyCode varchar(25),
	@DeptCode varchar(25),
	@PosCode varchar(25)
as

declare @table as table(value varchar(200), text varchar(200))
declare @curpos as varchar(200)
select Dept = @DeptCode
if(@DeptCode like '%SALES & MKT%')
	select 'true'
else
	select 'false'

select 
	a.*
from
	gnMstPosition a
where
	a.CompanyCode=@CompanyCode
	and
	a.DeptCode='SALES & MKT'

set @curpos = isnull((
				select top 1 PosHeader
				  from GnMstPosition
				 where CompanyCode = @CompanyCode
				   and DeptCode = @DeptCode
				   and PosCode = @PosCode
				  ), '') 

while (@curpos != '' and @DeptCode != 'COM')
begin
	insert into @table
	select a.EmployeeID, a.EmployeeName + ' (' + @curpos + ')' 
	  from HrEmployee a
	 where CompanyCode = @CompanyCode
	   and (Department = @DeptCode or Department = 'COM')
	   and Position = @curpos
   
	set @curpos = isnull((
					select top 1 PosHeader
					  from GnMstPosition
					 where CompanyCode = @CompanyCode
					   and (DeptCode = @DeptCode or DeptCode = 'COM')
					   and PosCode = @curpos
					  ), '') 
end

select * from @table

GO

if object_id('uspfn_OmFakturPajakDtlAccsSeqSaveDetail') is not null
	drop procedure uspfn_OmFakturPajakDtlAccsSeqSaveDetail
GO
Create procedure [dbo].[uspfn_OmFakturPajakDtlAccsSeqSaveDetail]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlAccsSeqSaveDetail 6006410,600641001,''
INSERT INTO OmFakturPajakDetailAccsSeq(CompanyCode, BranchCode, InvoiceNo, PartNo, PartName, Quantity, 
    RetailPrice, DiscExcludePPn, DPP, PPn, Total)
SELECT a.CompanyCode
    , a.BranchCode
    , a.InvoiceNo
    , a.PartNo
    , isnull(b.PartName,'') PartName
    , a.Quantity Quantity
    , a.RetailPrice
    , a.DiscExcludePPn
    , a.DPP
    , a.PPn
    , a.Total
FROM omTrSalesInvoiceAccsSeq a
LEFT JOIN spMstItemInfo b ON b.CompanyCode = a.CompanyCode 
    AND b.PartNo = a.PartNo
WHERE a.CompanyCode = @CompanyCode 
    AND a.BranchCode = @BranchCode 
    AND a.InvoiceNo = @InvoiceNo
    AND a.PartNo NOT IN(SELECT PartNo FROM omFakturPajakDetailAccsSeq WHERE CompanyCode = a.CompanyCode 
        AND BranchCode = a.BranchCode AND InvoiceNo = a.InvoiceNo AND PartNo = a.PartNo)  
end     
GO

if object_id('uspfn_OmFakturPajakDtlDoSaveDO') is not null
	drop procedure uspfn_OmFakturPajakDtlDoSaveDO
GO
Create procedure [dbo].[uspfn_OmFakturPajakDtlDoSaveDO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlSaveDO 6006410,600641001,''
INSERT INTO OmFakturPajakDetailDO(CompanyCode, BranchCode, InvoiceNo, DONo)
 SELECT a.CompanyCode, a.BranchCode, a.InvoiceNo, b.DONo FROM omTrSalesInvoiceModel a
 INNER JOIN omTrSalesBPK b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND a.BPKNo = b.BPKNo
 WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
 AND b.DONo NOT IN(SELECT DONo FROM omFakturPajakDetailDO WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
 AND InvoiceNo = a.InvoiceNo)
 GROUP BY a.CompanyCode, a.BranchCode, a.InvoiceNo, b.DONo
end     

GO

if object_id('uspfn_OmFakturPajakDtlOthersSaveDetail') is not null
	drop procedure uspfn_OmFakturPajakDtlOthersSaveDetail
GO

Create procedure [dbo].[uspfn_OmFakturPajakDtlOthersSaveDetail]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30),
 @ReffType varchar(15)
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlAccsSeqSaveDetail 6006410,600641001,''
INSERT INTO OmFakturPajakDetailOthers(CompanyCode, BranchCode, InvoiceNo, SalesModelCode, SalesModelYear, OtherCode, OtherName, Quantity, DPP, PPn, Total)
SELECT a.CompanyCode, a.BranchCode, a.InvoiceNo, a.SalesModelCode, a.SalesModelYear, a.OtherCode, b.RefferenceDesc1 AS OtherName, c.Quantity, a.AfterDiscDPP, a.AfterDiscPPn, a.AfterDiscTotal
FROM omTrSalesInvoiceOthers a
LEFT JOIN omMstRefference b ON b.CompanyCode = a.CompanyCode AND b.RefferenceCode = a.OtherCode AND b.RefferenceType = @ReffType
LEFT JOIN omTrSalesInvoiceModel c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InvoiceNo = a.InvoiceNo AND c.BPKNo = a.BPKNo
AND c.SalesModelCode = a.SalesModelCode AND c.SalesModelYear = a.SalesModelYear
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
AND a.OtherCode NOT IN(SELECT OtherCode FROM OmFakturPajakDetailOthers WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
AND InvoiceNo = a.InvoiceNo AND SalesModelCode = a.SalesModelCode AND SalesModelYear = a.SalesModelYear AND OtherCode = a.OtherCode)
           
end     
GO

if object_id('uspfn_OmFakturPajakDtlSaveDetail') is not null
	drop procedure uspfn_OmFakturPajakDtlSaveDetail
GO

Create procedure [dbo].[uspfn_OmFakturPajakDtlSaveDetail]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlSaveDetail 6006410,600641001,''
INSERT INTO OmFakturPajakDetail(CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, SalesModelYear, ChassisCode
, ChassisNo, EngineNo, BeforeDiscDPP, DiscExcludePPn, AfterDiscPPn, AfterDiscPPnBM, PPnBMPaid, OthersDPP, OthersPPN)
SELECT a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear, a.ChassisCode, a.ChassisNo
, a.EngineNo, b.BeforeDiscDPP, b.DiscExcludePPn, b.AfterDiscPPn, b.AfterDiscPPnBM, b.PPnBMPaid, b.OthersDPP, b.OthersPPN
FROM omTrSalesInvoiceVin a
LEFT JOIN omTrSalesInvoiceModel b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.InvoiceNo = a.InvoiceNo
AND b.BPKNo = a.BPKNo AND b.SalesModelCode = a.SalesModelCode AND b.SalesModelYear = a.SalesModelYear
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
AND a.ChassisNo NOT IN(SELECT ChassisNo FROM omFakturPajakDetail WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
AND InvoiceNo = a.InvoiceNo AND SalesModelCode = a.SalesModelCode AND ChassisCode = a.ChassisCode)
            
end     
GO

if object_id('uspfn_OmGetJournalDebetCredit') is not null
	drop procedure uspfn_OmGetJournalDebetCredit
GO
--declare @CompanyCode varchar(20)
--declare @BranchCode  varchar(20)
--declare @TypeJournal  varchar(20)
--declare @DocNo   varchar(20)

--set @CompanyCode = '6558201'
--set @BranchCode  = '655820100'
--set @TypeJournal = 'invoice'
--set @DocNo       = 'IVU/13/001280'

-- =============================================
-- Author:		<xxxxxx>
-- Create date: <xxxxxx>
-- Description:	<Get Journal>
-- Last Update By:	<yo - 29 Nov 2013>
-- =============================================

CREATE procedure [dbo].[uspfn_OmGetJournalDebetCredit]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@TypeJournal varchar(50),
	@DocNo       varchar(50)
as 

declare @t_journal as table (
	SeqCode     varchar(50),
	TypeTrans   varchar(50),
	AccountNo   varchar(50),
	AccountDesc varchar(100),
	AmountDb    decimal,
	AmountCr    decimal
)

--#region TypeJournal = 'TRANSFEROUT'
if @TypeJournal = 'TRANSFEROUT'
begin
	declare @t_trans_out as table (
		CompanyCode varchar(50),
		BranchCode  varchar(50),
		DocInfo     varchar(50),
		Amount      decimal
	)

	insert into @t_trans_out
	select a.CompanyCode, a.BranchCode, a.SalesModelCode 
		 , isnull(b.CogsUnit, 0) + isnull(b.COGSKaroseri, 0) + isnull(b.COGSOthers, 0)
	  from omTrInventTransferOutDetail a
	  left join omMstVehicle b on 1 = 1
	   and b.CompanyCode = a.CompanyCode
	   and b.ChassisCode = a.ChassisCode
	   and b.ChassisNo   = a.ChassisNo
	   and b.EngineCode  = a.EngineCode
	   and b.EngineNo    = a.EngineNo
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	 where 1 = 1 
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode  = @BranchCode
	   and a.TransferOutNo = @DocNo

	insert into @t_journal
	select '01', 'PSEMENTARA'
		 , isnull(b.InTransitTransferStockAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_out a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InTransitTransferStockAccNo= c.AccountNo

	insert into @t_journal
	select '02', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	  from @t_trans_out a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo
end

--#region TypeJournal = 'TRANSFERIN'
if @TypeJournal = 'TRANSFERIN'
begin
	declare @t_trans_in as table (
		CompanyCode varchar(50),
		BranchCode  varchar(50),
		BranchCodeFrom varchar(50),
		BranchCodeTo varchar(50),
		DocInfo     varchar(50),
		Amount      decimal
	)

	insert into @t_trans_in
	select a.CompanyCode, a.BranchCode, c.BranchCodeFrom, c.BranchCodeTo, a.SalesModelCode 
		 , isnull(b.CogsUnit, 0) + isnull(b.COGSKaroseri, 0) + isnull(b.COGSOthers, 0)
	  from omTrInventTransferInDetail a
	  left join omMstVehicle b on 1 = 1
	   and b.CompanyCode = a.CompanyCode
	   and b.ChassisCode = a.ChassisCode
	   and b.ChassisNo   = a.ChassisNo
	   and b.EngineCode  = a.EngineCode
	   and b.EngineNo    = a.EngineNo
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	  left join omTrInventTransferIn c on 1 = 1
	   and c.CompanyCode = a.CompanyCode
	   and c.BranchCode  = a.BranchCode
	   and c.TransferInNo = a.TransferInNo
	 where 1 = 1 
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode  = @BranchCode
	   and a.TransferInNo = @DocNo

	insert into @t_journal
	select '01', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_in a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeTo=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo

	insert into @t_journal
	select '02', 'PSEMENTARA'
		 , isnull(b.InTransitTransferStockAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	  from @t_trans_in a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeFrom=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InTransitTransferStockAccNo= c.AccountNo

end
--#endregion

--#region TypeJournal = 'TRANSFEROUTMULTIBRANCH'
if @TypeJournal = 'TRANSFEROUTMULTIBRANCH'
begin
	declare @t_trans_outMB as table (
	CompanyCode		varchar(50),
	BranchCode		varchar(50),
	CompanyCodeTo	varchar(50),
	DocInfo			varchar(50),
	Amount			decimal
	)

	insert into @t_trans_outMB
		select a.CompanyCode
			, a.BranchCode
			, b.CompanyCodeTo
			, a.SalesModelCode 
			, isnull(a.CogsUnit, 0) + isnull(a.COGSKaroseri, 0) + isnull(a.COGSOthers, 0)
		from omTrInventTransferOutDetailMultiBranch a
		left join omTrInventTransferOutMultiBranch b on b.CompanyCode = a.CompanyCode
			and b.BranchCode = a.BranchCode
			and b.TransferOutNo = a.TransferOutNo
		where 1 = 1 
		   and a.CompanyCode = @CompanyCode
		   and a.BranchCode  = @BranchCode
		   and a.TransferOutNo = @DocNo
		   
	insert into @t_journal
	select '01', 'PSEMENTARA'
		 , isnull(b.InterCompanyAccNoTo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	from @t_trans_outMB a
	left join omMstCompanyAccount b on b.CompanyCode = a.CompanyCode
		and b.CompanyCodeTo = a.CompanyCodeTo
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
		and b.InterCompanyAccNoTo = c.AccountNo

	insert into @t_journal
	select '02', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	from @t_trans_outMB a
	left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.DocInfo=b.SalesModelCode
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
		and b.InventoryAccNo= c.AccountNo
end
--#endregion

--#region TypeJournal = 'TRANSFERINMULTIBRANCH'
if @TypeJournal = 'TRANSFERINMULTIBRANCH'
begin
	declare @t_trans_inMB as table (
	CompanyCode		varchar(50),
	BranchCode		varchar(50),
	CompanyCodeFrom	varchar(50),
	BranchCodeFrom	varchar(50),
	BranchCodeTo	varchar(50),
	DocInfo			varchar(50),
	Amount			decimal
)

insert into @t_trans_inMB
	select a.CompanyCode
		, a.BranchCode
		, b.CompanyCodeFrom
		, b.BranchCodeFrom
		, b.BranchCodeTo
		, a.SalesModelCode 
		, isnull(a.CogsUnit, 0) + isnull(a.COGSKaroseri, 0) + isnull(a.COGSOthers, 0)
	from omTrInventTransferInDetailMultiBranch a
	left join omTrInventTransferInMultiBranch b on 1 = 1
	   and b.CompanyCode	= a.CompanyCode
	   and b.BranchCode		= a.BranchCode
	   and b.TransferInNo	= a.TransferInNo
	where 1 = 1 
	   and a.CompanyCode	= @CompanyCode
	   and a.BranchCode		= @BranchCode
	   and a.TransferInNo	= @DocNo

	insert into @t_journal
	select '01', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_inMB a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeTo=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo
			
	insert into @t_journal
	select '02', 'PSEMENTARA'
		 , isnull(b.InterCompanyAccNoTo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	from @t_trans_inMB a
	left join omMstCompanyAccount b on b.CompanyCode = a.CompanyCode
		and b.CompanyCodeTo = a.CompanyCodeFrom
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
		and b.InterCompanyAccNoTo = c.AccountNo

end
--#endregion

--#region TypeJournal = 'KAROSERI'
if @TypeJournal = 'KAROSERI'
begin
	declare @t_karoseri as table (
		SeqCode     varchar(50),
		TypeTrans   varchar(50),
		AccountNo   varchar(50),
		AmountDb    decimal,
		AmountCr    decimal
	)
	
	insert into @t_karoseri
	select '01', 'INVENTORY'
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCodeNew
			), '')
		 , sum(isnull(c.COGSKaroseri, 0) + (isnull(c.COGsUnit, 0) + isnull(c.COGsOthers, 0)))
		 , 0
	  from OmTrPurchaseKaroseriTerima a, OmTrPurchaseKaroseriTerimaDetail b, OmMstVehicle c
	 where 1 = 1
	   and c.CompanyCode = b.CompanyCode 
	   and c.ChassisCode = b.ChassisCode
	   and c.ChassisNo = b.ChassisNo 
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode = a.BranchCode
	   and b.KaroseriTerimaNo = a.KaroseriTerimaNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeNew
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '02', 'PPN'
		 , isnull((
			select cls.TaxInAccNo
			  from gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and cls.CompanyCode   = sup.CompanyCode
			   and cls.BranchCode    = sup.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = a.CompanyCode
			   and sup.BranchCode    = a.BranchCode
			   and sup.SupplierCode  = a.SupplierCode
			   and sup.ProfitCenterCode = '100'
			), '')
		 , sum(isnull(a.Quantity, 0) * isnull(a.PPn, 0))
		 , 0
	  from OmTrPurchaseKaroseriTerima a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeNew, a.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '03', 'INVENTORY'
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCodeOld
			), '')
		 , 0
		 , sum((isnull (c.COGsUnit, 0) + isnull (c.COGsOthers, 0 )))
	  from OmTrPurchaseKaroseriTerima a, OmTrPurchaseKaroseriTerimaDetail b, OmMstVehicle c
	 where 1 = 1
	   and c.CompanyCode = b.CompanyCode 
	   and c.ChassisCode = b.ChassisCode
	   and c.ChassisNo = b.ChassisNo 
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode = a.BranchCode
	   and b.KaroseriTerimaNo = a.KaroseriTerimaNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeOld
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '04', 'AP'
		 , isnull((
			select cls.PayableAccNo
			  from gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and cls.CompanyCode   = sup.CompanyCode
			   and cls.BranchCode    = sup.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = a.CompanyCode
			   and sup.BranchCode    = a.BranchCode
			   and sup.SupplierCode  = a.SupplierCode
			   and sup.ProfitCenterCode = '100'
			), '')
		 , 0
		 , sum(isnull(a.Quantity, 0) * isnull(a.Total, 0))
	  from OmTrPurchaseKaroseriTerima a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_journal
	select a.SeqCode, a.TypeTrans, a.AccountNo
		 , b.Description AccountDesc, a.AmountDb, a.AmountCr    
	  from @t_karoseri a, gnMstAccount b
	 where b.CompanyCode = @CompanyCode
	   and b.BranchCode = @BranchCode 
	   and b.AccountNo = a.AccountNo
end
--#endregion

--#region TRANS TYPE PURCHASE
IF @TypeJournal = 'PURCHASE'
	BEGIN	
	Select * into #t1 from
	(
		select distinct a.CompanyCode
				, a.BranchCode
				, a.HPPNo
				, a.BPUNo
				, a.SalesModelCode
				, a.SalesModelYear
				, a.OthersCode
				, isnull(b.OthersNonInventoryAccNo,'') AccountNo
				, SUM(a.OthersDPP) DPP
				, SUM(a.OthersPPN) PPN
		from omTrPurchaseHPPDetailModelOthers a
		left join omMstOthersNonInventory b on a.CompanyCode = b.CompanyCode
			and a.BranchCode = b.BranchCode
			--and a.OthersCode = b.OthersNonInventory
		where a.CompanyCode = @CompanyCode
			and a.BranchCode = @BrancHCode
			and a.HPPNo = @DocNo
			and isnull(b.OthersNonInventoryAccNo,'') <> ''
		group by a.CompanyCode, a.BranchCode, a.HPPNo, a.BPUNo, a.SalesModelCode, a.SalesModelYear, a.OthersCode,b.OthersNonInventoryAccNo		
	)#t1


	select * into #Inventory from(
	select 'INVENTORY' CodeTrans
		 , @DocNo DocNo
		 , a.SalesModelCode DocInfo
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCode
			), '') AccountNo
		 , isnull(a.Quantity, 0) Quantity
		 , isnull(a.AfterDiscDPP, 0) AfterDiscDPP	 
		 , case when (select COUNT(*) from #t1 where HPPNo = a.HppNo and BPUNo = a.BPUNo and SalesModelCode = a.SalesModelCode and SalesModelYear = SalesModelYear) > 0 
			   then isnull((select distinct (b.DPP)
					from #t1 b
					where b.CompanyCode = a.CompanyCode
						and b.BranchCode = a.BranchCode
						and b.HPPNo = a.HPPNo
						and b.SalesModelCode = a.SalesModelCode
						and b.SalesModelYear = a.SalesModelYear
						and b.OthersCode not in (select distinct OthersNonInventory 
								from omMstOthersNonInventory))
				, 0) else a.OthersDPP end OthersDPP
		 , isnull(a.AfterDiscPPnBM, 0) AfterDiscPPnBM
		 , 0 AmountCr
	  from omTrPurchaseHPPDetailModel a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	)#Inventory

	insert into @t_journal
	select	1
			, a.CodeTrans
			, a.AccountNo
			, '' AccountDesc
			, sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) as DPP
			, 0
	  from #Inventory a
	 group by a.CodeTrans, a.DocNo, a.DocInfo, a.AccountNo
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0

	select * into #OthersInv from(
	select 'OTHERS' CodeTrans 		
		 , isnull((
			select acc.OthersNonInventoryAccNo
			  from omMstOthersNonInventory acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.OthersNonInventory = b.OthersCode
			), '') AccountNo
		 , '' AccountDesc
		 , sum(isnull(a.Quantity, 0) * isnull(b.DPP, 0)) as DPP
		 , 0 AmountCr
	  from omTrPurchaseHPPDetailModel a, #t1 b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	   and a.SalesModelCode = b.SalesModelCode
	   and a.SalesModelYear = b.SalesModelYear
	   and a.BPUNo = b.BPUNo
	   and b.OthersCode in (select distinct OthersNonInventory 
									from omMstOthersNonInventory) 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, a.SalesModelCode,a.SalesModelYear,b.OthersCode,b.AccountNo
	having sum(isnull(a.Quantity, 0) * isnull(b.DPP, 0)) > 0
	)#OthersInv
	
	insert into @t_journal
	select 2, CodeTrans			
			, AccountNo
			, '' AccountDesc
			, SUM(DPP)
			, AmountCr
	  from #OthersInv a
	 group by a.CodeTrans, a.AccountNo,a.AmountCr
	having sum(DPP) > 0

	insert into @t_journal
	select 3, 'PPN'
		 , isnull((
			select cls.TaxInAccNo
			  from omTrPurchaseHPP pur, gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and sup.CompanyCode   = pur.CompanyCode
			   and sup.BranchCode    = pur.BranchCode
			   and sup.SupplierCode  = pur.SupplierCode
			   and sup.ProfitCenterCode = '100'
			   and cls.CompanyCode   = pur.CompanyCode
			   and cls.BranchCode    = pur.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = @CompanyCode
			   and sup.BranchCode    = @BranchCode
			   and pur.HPPNo         = @DocNo
			), '')
		 , '' AccountDesc
		 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0))) as PPN
		 , 0
	  from omTrPurchaseHPPDetailModel a, omTrPurchaseHPP b
	 where 1 = 1
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode  = a.BranchCode
	   and b.HPPNo       = a.HPPNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, b.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0

	insert into @t_journal
	select 4, 'AP'
		 , isnull((
			select cls.PayableAccNo
			  from omTrPurchaseHPP pur, gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and sup.CompanyCode   = pur.CompanyCode
			   and sup.BranchCode    = pur.BranchCode
			   and sup.SupplierCode  = pur.SupplierCode
			   and sup.ProfitCenterCode = '100'
			   and cls.CompanyCode   = pur.CompanyCode
			   and cls.BranchCode    = pur.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = @CompanyCode
			   and sup.BranchCode    = @BranchCode
			   and pur.HPPNo         = @DocNo
			), '')
		 , '' AccountDesc
		 , 0
		 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0)))
		 + sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0))) as TotalTransAmt
	  from omTrPurchaseHPPDetailModel a, omTrPurchaseHPP b
	 where 1 = 1
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode  = a.BranchCode
	   and b.HPPNo       = a.HPPNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, b.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0	

	drop table #t1
	drop table #Inventory
	drop table #OthersInv
		
	END
--#endregion

--#region TypeJournal = 'INVOICE'
IF @TypeJournal = 'INVOICE'
BEGIN
	insert into @t_journal
		select 1, 'AR'
			 , isnull((
				select cls.ReceivableAccNo
				  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
				 where 1 = 1
				   and cus.CompanyCode   = ivu.CompanyCode
				   and cus.BranchCode    = ivu.BranchCode
				   and cus.CustomerCode  = ivu.CustomerCode
				   and cus.ProfitCenterCode = '100'
				   and cls.CompanyCode   = ivu.CompanyCode
				   and cls.BranchCode    = ivu.BranchCode
				   and cls.CustomerClass = cus.CustomerClass
				   and cus.CompanyCode   = @CompanyCode
				   and cus.BranchCode    = @BranchCode
				   and ivu.InvoiceNo     = @DocNo
				), '') AccounNo
			 , '' AccountDesc
			 , isnull((
				select sum(isnull(Quantity, 0) * (AfterDiscDPP + AfterDiscPPn + AfterDiscPPnBm))
				  from omTrSalesInvoiceModel
				 where 1 = 1
				   and CompanyCode = @CompanyCode 
				   and BranchCode  = @BranchCode
				   and InvoiceNo   = @DocNo
				), 0)
			 + isnull((
				select sum(mdl.Quantity * (oth.AfterDiscDPP + oth.AfterDiscPPn))
				  from omTrSalesInvoiceOthers oth left join omTrSalesInvoiceModel mdl
					on oth.BranchCode = mdl.BranchCode
					and oth.InvoiceNo = mdl.InvoiceNo
					and oth.BPKNo = mdl.BPKNo
					and oth.SalesModelCode = mdl.SalesModelCode
				 where 1 = 1
				   and oth.CompanyCode = @CompanyCode 
				   and oth.BranchCode  = @BranchCode
				   and oth.InvoiceNo   = @DocNo
				), 0)
			 + isnull((
				select sum(DPP + PPN)
				  from omTrSalesInvoiceAccs
				 where 1 = 1
				   and CompanyCode = @CompanyCode 
				   and BranchCode  = @BranchCode
				   and InvoiceNo   = @DocNo
				), 0)
			 + (select isnull(sum(isnull(Quantity,0)*isnull(Total,0)),0) from omTrSalesInvoiceAccsSeq where CompanyCode=@CompanyCode
				   and BranchCode=@BranchCode and InvoiceNo=@DocNo) 
			 , 0

insert into @t_journal
select 2, 'DISCOUNT UNIT'
	 , isnull((
		select acc.DiscountAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) as Discount
	 , 0
  from omTrSalesInvoiceModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) > 0

insert into @t_journal
select 3, 'DISCOUNT AKSESORIS'
	 , isnull((
		select acc.DiscountAccNoAks
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull(a.DiscExcludePPn, 0)) as Discount
	 , 0
  from omTrSalesInvoiceOthers a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull(a.DiscExcludePPn, 0)) > 0

insert into @t_journal
select distinct 4, 'DISCOUNT SPAREPART['+a.TypeOfGoods+']'
	, (select top 1 DiscAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, (select sum(isnull(Quantity,0)*isnull(DiscExcludePPn,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
		and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountDb
	, 0 AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
where a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

insert into @t_journal
select 5, 'SALES UNIT'
	 , isnull((
		select acc.SalesAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull(a.Quantity, 0) * isnull (a.AfterDiscDPP, 0))
	 + sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) 
  from omTrSalesInvoiceModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having (sum(isnull(a.Quantity, 0) * isnull (a.AfterDiscDPP, 0)) +
	    sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0))) > 0

insert into @t_journal
select 6, 'SALES AKSESORIS'
	 , isnull((
		select acc.SalesAccNoAks
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull(b.Quantity, 0) * isnull (a.AfterDiscDPP, 0))
	 + sum(isnull(b.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) 
  from omTrSalesInvoiceOthers a, omTrSalesInvoiceModel b
 where 1 = 1
   and b.BranchCode = a.BranchCode 
   and b.InvoiceNo = a.InvoiceNo 
   and b.BPKNo = a.BPKNo 
   and b.SalesModelCode = a.SalesModelCode 
   and b.SalesModelYear = a.SalesModelYear 
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having (sum(isnull(b.Quantity, 0) * isnull (a.AfterDiscDPP, 0)) +
	    sum(isnull(b.Quantity, 0) * isnull (a.DiscExcludePPn, 0))) > 0

insert into @t_journal
select distinct 7, 'SALES SPAREPART ['+a.typeOfGoods+']'
	, (select top 1 SalesAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, 0 AmountDb
	, (select sum(isnull(Quantity,0) * isnull(RetailPrice,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
		and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.TypeOfGoods

insert into @t_journal
select 8, 'PPN'
	 , isnull((
		select cls.TaxOutAccNo
		  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
		 where 1 = 1
		   and cus.CompanyCode   = ivu.CompanyCode
		   and cus.BranchCode    = ivu.BranchCode
		   and cus.CustomerCode  = ivu.CustomerCode
		   and cus.ProfitCenterCode = '100'
		   and cls.CompanyCode   = ivu.CompanyCode
		   and cls.BranchCode    = ivu.BranchCode
		   and cls.CustomerClass = cus.CustomerClass
		   and cus.CompanyCode   = @CompanyCode
		   and cus.BranchCode    = @BranchCode
		   and ivu.InvoiceNo     = @DocNo
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , isnull((
		select sum(Quantity * AfterDiscPPn)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(mdl.Quantity * oth.AfterDiscPPn)
		  from omTrSalesInvoiceOthers oth left join omTrSalesInvoiceModel mdl
			on oth.BranchCode = mdl.BranchCode
			and oth.InvoiceNo = mdl.InvoiceNo
			and oth.BPKNo = mdl.BPKNo
			and oth.SalesModelCode = mdl.SalesModelCode
		 where 1 = 1
		   and oth.CompanyCode = @CompanyCode 
		   and oth.BranchCode  = @BranchCode
		   and oth.InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(PPN)
		  from omTrSalesInvoiceAccs
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + (select isnull(sum(isnull(Quantity,0)*isnull(PPN,0)),0) from omTrSalesInvoiceAccsSeq where companyCode = @CompanyCode 
		   and BranchCode=@BranchCode and InvoiceNo=@DocNo)
where (isnull((
		select sum(Quantity * AfterDiscPPn)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(AfterDiscPPn)
		  from omTrSalesInvoiceOthers
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(PPN)
		  from omTrSalesInvoiceAccs
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)) 
	 +(select isnull(sum(isnull(quantity,0)*isnull(PPN,0)),0) from omTrSalesInvoiceAccsSeq where companyCode = @CompanyCode 
		   and BranchCode=@BranchCode and InvoiceNo=@DocNo) > 0

insert into @t_journal
select 9, 'PPN BM'
	 , isnull((
		select cls.LuxuryTaxAccNo
		  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
		 where 1 = 1
		   and cus.CompanyCode   = ivu.CompanyCode
		   and cus.BranchCode    = ivu.BranchCode
		   and cus.CustomerCode  = ivu.CustomerCode
		   and cus.ProfitCenterCode = '100'
		   and cls.CompanyCode   = ivu.CompanyCode
		   and cls.BranchCode    = ivu.BranchCode
		   and cls.CustomerClass = cus.CustomerClass
		   and cus.CompanyCode   = @CompanyCode
		   and cus.BranchCode    = @BranchCode
		   and ivu.InvoiceNo     = @DocNo
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , isnull((
		select sum(Quantity * AfterDiscPPnBm)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
where isnull((
		select sum(Quantity * AfterDiscPPnBm)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0) > 0

insert into @t_journal
select 10, 'HPP Unit'
	 , isnull((
		select acc.COGSAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull (a.COGS, 0)) as COGS
	 , 0
  from OmTrSalesInvoiceVin a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull (a.COGS, 0)) > 0

insert into @t_journal
select 11, 'INVENTORY UNIT'
	 , isnull((
		select acc.InventoryAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull (a.COGS, 0)) as COGS
  from OmTrSalesInvoiceVin a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull (a.COGS, 0)) > 0

insert into @t_journal
select distinct 12, 'COGS SPAREPART ['+a.TypeOfGoods+']'
	, (select top 1 COGSAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, (select sum(isnull(Quantity,0)*isnull(COGS,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
			and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountDb
	, 0 AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
where a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

insert into @t_journal
select distinct 13, 'INVENTORY AKSESORIES ['+a.TypeOfGoods+']'
	, (select top 1 InventoryAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, 0 AmountDb
	, (select sum(isnull(Quantity,0)*isnull(COGS,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode and invoiceno=a.invoiceno
		and typeofgoods=a.typeofgoods group by typeofgoods) AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode

	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
WHERE a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

END
--#endregion

select sum(a.AmountDb) as AmountDb, sum(a.AmountCr) as AmountCr
  from @t_journal a

GO

if object_id('uspfn_OmGetStockDataTable') is not null
	drop procedure uspfn_OmGetStockDataTable
GO
CREATE procedure [dbo].[uspfn_OmGetStockDataTable]
	@CompanyCode varchar(20),
	@DateBegin datetime,
	@DateEnd datetime
AS
--exec uspfn_OmGetStockDataTable '6006406','20120101','20121230'
BEGIN
	SELECT '1'  AS RecordID, b.BPUDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
		   THEN
				 'B1'
			  ELSE
				 'B2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, b.RefferenceDONo AS DONo,

		   (CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
			THEN '' ELSE b.SupplierCode END)  AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE b.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a
		LEFT JOIN omTrPurchaseBPUDetail c on a.CompanyCode = c.CompanyCode and a.ChassisCode = c.ChassisCode and a.ChassisNo = c.ChassisNo
		LEFT JOIN omTrPurchaseBPU b on b.CompanyCode = c.CompanyCode and b.BranchCode = c.BranchCode and b.BPUNo = c.BPUNo
	 WHERE a.CompanyCode = b.CompanyCode
		   AND a.BPUNo = b.BPUNo
		   AND CONVERT(VARCHAR, b.BPUDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND b.CompanyCode = @CompanyCode 

	UNION
	SELECT '1'  AS RecordID, b.BPUDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
		   THEN
				 'B1'
			  ELSE
				 'B2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, b.RefferenceDONo AS DONo,
			(CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
			THEN '' ELSE b.SupplierCode END) AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE b.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicleTemp a, omTrPurchaseBPU b
	 WHERE a.CompanyCode = b.CompanyCode
		   AND a.BPUNo = b.BPUNo AND a.IsActive = 1
		   AND CONVERT(VARCHAR, b.BPUDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND b.CompanyCode = @CompanyCode 


	UNION
	SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = x.CompanyCode AND SupplierCode = x.SupplierCode) = '2000000'
		   THEN
				 'R1'
			  ELSE
				 'R2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
			(CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = x.SupplierCode)  = '2000000'
			THEN '' ELSE x.SupplierCode END) AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE x.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	 FROM omMstVehicle a
	 INNER JOIN omTrPurchaseReturn b ON b.CompanyCode = a.CompanyCode AND b.ReturnNo = a.POReturnNo AND b.HPPNo = a.HPPNo
	 LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = a.CompanyCode AND x.BranchCode = b.BranchCode AND x.BPUNo = a.BPUNo
	 WHERE CONVERT(VARCHAR, b.ReturnDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND a.CompanyCode = @CompanyCode 
	UNION
	SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = x.CompanyCode AND SupplierCode = x.SupplierCode) = '2000000'
		   THEN
				 'R1'
			  ELSE
				 'R2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, 
		   (CASE WHEN charindex('-', a.RefDoNo) = 0 THEN a.RefDONo ELSE  SUBSTRING(a.RefDoNo, 0, charindex('-', a.RefDoNo) ) END) AS DONo,
			(CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = x.SupplierCode)  = '2000000'
			THEN '' ELSE x.SupplierCode END) AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE x.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicleTemp a
	 INNER JOIN omTrPurchaseReturn b ON b.CompanyCode = a.CompanyCode AND b.ReturnNo = a.POReturnNo AND b.HPPNo = a.HPPNo
	 LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = a.CompanyCode AND x.BranchCode = b.BranchCode AND x.BPUNo = a.BPUNo
	 WHERE CONVERT(VARCHAR, b.ReturnDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND a.CompanyCode = @CompanyCode 

	UNION
	SELECT '1'  AS RecordID, b.SODate  AS transactionDate, 
		   CASE WHEN b.SalesType = '1' THEN 'S1' ELSE 'S2' END AS transactionType, ''  AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
		   ''  AS 'Supplier_CustomerCode', (
		   SELECT c.CustomerName
		   FROM gnMstCustomer c
		   WHERE b.CustomerCode = c.CustomerCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a 
	  INNER JOIN omTrSalesSO b
	  ON a.CompanyCode = b.CompanyCode
	  AND a.SONo = b.SONo
	  LEFT JOIN omTrPurchaseBPUDetail y ON a.CompanyCode = y.CompanyCode and a.ChassisCOde = y.ChassisCode AND a.ChassisNo = y.ChassisNo
	  LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
	  WHERE CONVERT(VARCHAR, b.SODate, 112) BETWEEN @DateBegin AND @DateEnd  
	  AND b.CompanyCode = @CompanyCode 
	UNION
	SELECT '1'  AS RecordID, b.ReqDate  AS transactionDate, 
	CASE WHEN b.StatusFaktur = '1' AND b.SubDealerCode = b.CompanyCode THEN 'F1' ELSE 
	(CASE WHEN b.StatusFaktur = '1' AND b.SubDealerCode <> b.CompanyCode THEN 'F2' ELSE 
	(CASE WHEN b.StatusFaktur <> '1' AND b.SubDealerCode = b.CompanyCode THEN 'F3' ELSE 'F4' END) END) END
	AS transactionType, (SELECT TOP 1 z.ReasonCode
		   FROM omTrSalesReqDetail z
		   WHERE z.ChassisNo = a.ChassisNo
		   AND z.ChassisCode = a.ChassisCode)  AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
			(CASE WHEN b.SubDealerCode  = a.CompanyCode THEN '' ELSE b.SubDealerCode END) AS 'Supplier_CustomerCode'
		   , (
		   SELECT c.CustomerName
		   FROM gnMstCustomer c
		   WHERE b.SubDealerCode = c.CustomerCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a
	  INNER JOIN omTrSalesReqDetail z ON a.CompanyCode = z.CompanyCode AND a.ChassisCode = z.ChassisCode AND a.ChassisNo = z.ChassisNo
	  INNER JOIN omTrSalesReq b	ON b.CompanyCode = z.CompanyCode AND b.BranchCode = z.BranchCode AND b.ReqNo = z.ReqNo
	  LEFT JOIN omTrPurchaseBPUDetail y
		ON y.CompanyCode = a.CompanyCode AND y.ChassisCode = a.ChassisCode AND y.ChassisNo = a.ChassisNo
	  LEFT JOIN omTrPurchaseBPU x 
		ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
	  WHERE CONVERT(VARCHAR, b.ReqDate, 112) BETWEEN @DateBegin AND @DateEnd
	  AND b.CompanyCode = @CompanyCode 
	UNION
	SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, 'U1'  AS
		   transactionType, ''  AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
		   ''  AS 'Supplier_CustomerCode', (
		   SELECT c.CustomerName
		   FROM gnMstCustomer c
		   WHERE b.CustomerCode = c.CustomerCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a
	  INNER JOIN omTrSalesReturn b
	  ON a.CompanyCode = b.CompanyCode
	  AND a.SOReturnNo = b.ReturnNo
	LEFT JOIN omTrPurchaseBPUDetail y ON y.CompanyCode = a.CompanyCode AND y.ChassisCode = a.ChassisCode AND y.ChassisNo = a.ChassisNo
	LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
	  WHERE CONVERT(VARCHAR, b.ReturnDate, 112) BETWEEN @DateBegin AND @DateEnd
	  AND b.CompanyCode = @CompanyCode;
END
GO

if object_id('uspfn_OmRpSalesTrn001B') is not null
	drop procedure uspfn_OmRpSalesTrn001B
GO
CREATE procedure uspfn_OmRpSalesTrn001B 

(
	@CompanyCode VARCHAR(15),
	@BranchCode	VARCHAR(15),
	@SONoFrom VARCHAR(15),
	@SONoEnd VARCHAR(15),
	@param bit
)

AS

BEGIN
--	declare	@CompanyCode varchar(15)
--	declare @BranchCode varchar(15)
--	declare @SONoFrom varchar(15)
--	declare @SONoEnd varchar(15)
--	declare @param bit
--
--	set @CompanyCode ='6114201'
--	set @BranchCode ='611420100'
--	set @SONoFrom ='SOA/12/000537'
--	set @SONoEnd ='SOA/12/000537'
--	set @param ='1'
--	
	declare @tabData as table 
	(
		CompanyCode		varchar(max),
		BranchCode		varchar(max),
		SoNo			varchar(max),
		Prefix			char(1),
		Model			varchar(max),
		Remark			varchar(max),
		Satuan			decimal(18,0),		
		Qty				decimal(6,0),
		Total			decimal(18,0),		
		BBN				decimal(18,0),		
		Accs			decimal(18,0),		
		Diskon			decimal(18,0),		
		Lain			decimal(18,0),		
		Jumlah			decimal(18,0),
		ChassisNo		int,
		EngineNo		int
	)

	-- INITIAL TABLE FOR UNIT --
	----------------------------
	SELECT * INTO #tUnit FROM (
		SELECT  
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, b.SalesModelCode Model
			, b.SalesModelYear ModelYear
			, c.ColourCode
			, b.BeforeDiscTotal Satuan
			, case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end Qty
			, SUM(ISNULL(d.bbn, 0))+ SUM(ISNULL(d.kir, 0))as BBN
			, (b.OthersDPP+b.OthersPPn) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end) as Accesories
			, b.DiscIncludePPN * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end) as Potongan
			, (b.ShipAmt+b.DepositAmt+b.OthersAmt) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end) as Lainlain 
			, isnull(d.ChassisNo,0) ChassisNo
			, isnull(d.EngineNo,0) EngineNo
		FROM OmTrSalesSO a
		INNER JOIN OmTrSalesSOModel b on a.companyCode = b.companyCode 
			AND a.branchCode = b.branchCode 
			AND a.SONo = b.SONo
		INNER JOIN OmTrSalesSOModelColour c on c.companyCode = b.companyCode 
			AND c.branchCode = b.branchCode 
			AND c.SONo = b.SONo
			AND c.salesModelCode = b.salesModelCode 
			AND c.salesModelYear = b.salesModelYear
		LEFT JOIN OmTrSalesSOVin d on d.companyCode = c.companyCode 
			AND d.branchCode = c.branchCode
			AND d.SONo = c.SONo 
			AND d.salesModelCode = c.salesModelCode 
			AND d.salesModelYear = c.salesModelYear 
			AND c.colourCode = d.colourCode
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
		GROUP BY a.CompanyCode
			, a.BranchCode
			, a.SONo
			, b.SalesModelCode
			, b.SalesModelYear
			, c.ColourCode
			, b.BeforeDiscTotal
			, case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end
			, b.BeforeDiscTotal * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)
			, (b.OthersDPP+b.OthersPPn) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)
			, b.DiscIncludePPN * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)
			, (b.ShipAmt+b.DepositAmt+b.OthersAmt) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)	
			, d.ChassisNo
			, d.EngineNo

		-- SISA UNIT YANG BELUM ADA VIN

		UNION 

		SELECT 
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, b.SalesModelCode Model
			, b.SalesModelYear ModelYear
			, c.ColourCode
			, b.BeforeDiscTotal Satuan
			, c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode and branchcode=a.branchcode and sono=a.sono 
				and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear and colourcode=c.colourcode)as Qty
			, 0 BBN
			, (b.OthersDPP+b.OthersPPn) * (c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode 
				and branchcode=a.branchcode and sono=a.sono and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear 
				and colourcode=c.colourcode)) as Accessories
			, b.DiscIncludePPN * (c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode and branchcode=a.branchcode 
				and sono=a.sono and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear and colourcode=c.colourcode)) as Potongan
			, (b.ShipAmt+b.DepositAmt+b.OthersAmt) * (c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode 
				and branchcode=a.branchcode and sono=a.sono and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear 
				and colourcode=c.colourcode)) as Lainlain
			, 0 ChassisNo
			, 0 EngineNo
		FROM OmTrSalesSO a
		INNER JOIN OmTrSalesSOModel b on a.companyCode = b.companyCode 
			AND a.branchCode = b.branchCode 
			AND a.SONo = b.SONo
		INNER JOIN OmTrSalesSOModelColour c on a.companyCode = c.companyCode 
			AND a.branchCode = c.branchCode 
			AND a.SONo = c.SONo
			AND c.SalesModelCode=b.SalesModelCode
			AND c.SalesModelYear=b.SalesModelYear
		WHERE a.CompanyCode=@COmpanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
			AND c.quantity-(select count(*) from OmTrSalesSOVin where companycode=a.companycode and branchcode=a.branchcode and sono=a.sono 
					and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear and colourcode=c.colourcode)>0
	) #tUnit


	set @param = 1;


	IF (@param=1)
	BEGIN
		-- DETAIL PART DISEMBUNYIKAN --
		-------------------------------

		SELECT * INTO #t1 FROM (
		SELECT 
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, sum((floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100)) * isnull(a.qty,0)) Total
			, sum((floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100) - isnull(a.Afterdisctotal,0)) * isnull(a.qty,0)) Potongan
			, sum((floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100) - 
				(floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100) - isnull(a.Afterdisctotal,0))) * isnull(a.qty,0)) Jumlah
		FROM omTrSalesSOAccsSeq a
		INNER JOIN omTrSalesSO b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
		LEFT JOIN gnMstCustomerProfitCenter c ON c.CompanyCode=a.CompanyCode
			AND c.BranchCode=a.BranchCode
			AND c.CustomerCode=b.CustomerCode
			AND c.ProfitCenterCode='100'
		LEFT JOIN gnMstTax d ON d.CompanyCode=a.CompanyCode
			AND d.TaxCode=c.TaxCode
		WHERE a.CompanyCode=@CompanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd 
			AND a.partSeq=1
		GROUP BY a.CompanyCode, a.BranchCode, a.SONo
		) #t1

		INSERT INTO @tabData
		SELECT  
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'A'
			, b.Model
			, b.ColourCode+' - '+isnull(e.RefferenceDesc1,'') Remark
			, b.Satuan+isnull(f.Total,0) AS Satuan
			, b.Qty
			, (b.Satuan+isnull(f.Total,0)) * b.Qty AS Total
			, b.BBN
			, b.Accesories
			, b.Potongan+(isnull(f.Potongan,0)*b.Qty)
			, b.Lainlain 
			, (b.Satuan*b.Qty) + b.BBN + b.Accesories - b.Potongan + b.LainLain + (isnull(f.Jumlah,0)*b.Qty) AS Jumlah
			, b.ChassisNo
			, b.EngineNo
		FROM OmTrSalesSO a
		INNER JOIN #tUnit b on b.companyCode = a.companyCode 
			AND b.branchCode = a.branchCode 
			AND b.SONo = a.SONo
		LEFT JOIN omMstRefference e ON e.CompanyCode = b.CompanyCode
			AND e.RefferenceType = 'COLO'
			AND e.RefferenceCode = b.ColourCode
		LEFT JOIN #t1 f ON f.CompanyCode=a.CompanyCode
			AND f.BranchCode=a.BranchCode
			AND f.SONo=a.SONo
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd	
		UNION ALL

		SELECT DISTINCT
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'B'
			, 'SPAREPART/ACCS :'
			, ''
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
		FROM OmTrSalesSO a
		INNER JOIN omTrSalesSOAccsSeq b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
			AND b.PartSeq=1
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd

		UNION ALL

		SELECT 
			  a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'C'
			, a.PartNo Model
			, isnull(c.PartName,'') Remark
			, 0 Satuan
			, a.demandqty Qty
			, 0 Total
			, 0 BBN
			, 0 Accesories
			, 0 Potongan
			, 0 LainLain
			, 0 Jumlah
			, 0 Rangka
			, 0 Mesin
		FROM omTrSalesSOAccsSeq a
		INNER JOIN omTrSalesSO b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
		LEFT JOIN SpMStItemInfo c ON c.CompanyCode=a.CompanyCode
			AND c.PartNo=a.PartNo
		LEFT JOIN gnMstCustomerProfitCenter d ON d.CompanyCode=a.CompanyCode
			AND d.BranchCode=a.BranchCode
			AND d.CustomerCode=b.CustomerCode
			AND ProfitCenterCode='100'
		LEFT JOIN gnMstTax e ON e.CompanyCode=a.CompanyCode
			AND e.TaxCode=d.TaxCode
		WHERE a.CompanyCode=@CompanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd 
			AND a.partSeq=1	

		DROP TABLE #t1

	END

	ELSE

	BEGIN
		-- TAMPILKAN PART DETAIL --
		---------------------------		

		SELECT * INTO #tPart FROM (
		SELECT 
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, a.PartNo Model
			, isnull(c.PartName,'') Remark
			, floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100) Satuan
			, a.demandqty Qty
			, (floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100))*a.demandqty Total
			, 0 BBN
			, 0 Accesories
			, (floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100)-a.Afterdisctotal)*a.demandqty Potongan
			, 0 LainLain
			, (floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100)-(floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100)-a.Afterdisctotal))*a.demandqty Jumlah
		FROM omTrSalesSOAccsSeq a
		INNER JOIN omTrSalesSO b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
		LEFT JOIN SpMStItemInfo c ON c.CompanyCode=a.CompanyCode
			AND c.PartNo=a.PartNo
		LEFT JOIN gnMstCustomerProfitCenter d ON d.CompanyCode=a.CompanyCode
			AND d.BranchCode=a.BranchCode
			AND d.CustomerCode=b.CustomerCode
			AND ProfitCenterCode='100'
		LEFT JOIN gnMstTax e ON e.CompanyCode=a.CompanyCode
			AND e.TaxCode=d.TaxCode
		WHERE a.CompanyCode=@CompanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd 
			AND a.partSeq=1
		) #tPart

		

		INSERT INTO @tabData
		SELECT  
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'A'
			, b.Model
			, b.ColourCode+' - '+isnull(e.RefferenceDesc1,'') Remark
			, b.Satuan
			, b.Qty
			, b.Satuan*b.Qty AS Total
			, b.BBN
			, b.Accesories
			, b.Potongan
			, b.Lainlain 
			, (b.Satuan*b.Qty) + b.BBN + b.Accesories - b.Potongan + b.LainLain Jumlah
			, b.ChassisNo
			, b.EngineNo
		FROM OmTrSalesSO a
		INNER JOIN #tUnit b on b.companyCode = a.companyCode 
			AND b.branchCode = a.branchCode 
			AND b.SONo = a.SONo
		LEFT JOIN omMstRefference e ON e.CompanyCode = b.CompanyCode
			AND e.RefferenceType = 'COLO'
			AND e.RefferenceCode = b.ColourCode
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd

		UNION ALL

		SELECT DISTINCT
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'B'
			, 'SPAREPART/ACCS :'
			, ''
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
		FROM OmTrSalesSO a
		INNER JOIN omTrSalesSOAccsSeq b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
			AND b.PartSeq=1
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
		UNION ALL
		SELECT
			CompanyCode
			, BranchCode
			, SONo
			, 'C'
			, Model
			, Remark
			, Satuan
			, Qty
			, Total
			, BBN
			, Accesories
			, Potongan
			, LainLain
			, Jumlah
			, 0
			, 0
		FROM #tPart
		DROP TABLE #tPart
	END



--select * from @tabData
	-- DATA RESULT --
	-----------------
   SELECT  
		  a.SONo + case a.SalesType when '0' then '-W' when '1' then '-D' end  AS SONo
		, a.SKPKNo
		, a.RefferenceNo
		, a.SODate
		, b.Model
		, b.Model SalesModelCode
		, b.Remark
		, b.Remark ColourCode
		, b.Satuan 
		, b.Satuan BeforeDiscTotal
		, b.Qty
		, b.Qty Quantity
		, b.Total
		, b.BBN
		, b.Accs
		, b.Accs Accesories
		, b.Diskon Diskon
		, b.Diskon Potongan
		, b.Lain
		, b.Lain LainLain
		, b.Jumlah
		, b.Jumlah SubTotal
		, d.EmployeeName +' ['+a.Salesman+']' as Sales
		, CASE a.SalesType WHEN '0' THEN 'WHOLESALE' WHEN '1' THEN 'DIRECT' END AS TipeSales
		, a.RefferenceNo
		, c.CustomerName +' ['+a.CustomerCode+']' as Pelanggan
		, a.RequestDate
		, dateadd(day, convert(int, e.ParaValue), a.SODate) as JatuhTempo
		, e.LookUpValueName as TOPCode
		, a.shipto
		, g.CustomerName as ShipName
		, a.PrePaymentAmt
		, f.CustomerName as Leasing
		, a.Remark as Ket
		, a.SKPKNo
		, upper(sign1.SignName) AS SignName
		, upper(sign1.TitleSign) AS TitleSign
		, b.ChassisNo
		, b.EngineNo
		, b.Prefix
		, @param HidePart
	FROM OmTrSalesSO a
	INNER JOIN @tabData b on b.companyCode = a.companyCode 
		AND b.branchCode = a.branchCode 
		AND b.SONo = a.SONo
	LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode
		AND c.CustomerCode = a.CustomerCode
	LEFT JOIN HrEmployee d ON d.companyCode = a.companyCode
		--AND d.branchCode = a.branchCode
		AND d.EmployeeID= a.salesman
	LEFT JOIN gnMstLookUpDtl e ON e.CompanyCode = a.CompanyCode
		AND e.CodeID = 'TOPC'
		AND e.LookUpValue = a.TOPCode
	LEFT JOIN gnMstCustomer f ON f.CompanyCode = a.CompanyCode
		AND f.CustomerCode = a.LeasingCo
	LEFT JOIN gnMstCustomer g ON g.CompanyCode = a.CompanyCode
		AND g.CustomerCode = a.shipTo
	LEFT JOIN gnMstSignature AS sign1 ON sign1.CompanyCode = a.CompanyCode
		AND sign1.BranchCode = a.BranchCode
		AND sign1.ProfitCenterCode = '100'
		AND sign1.DocumentType = 'SON'
		AND sign1.SeqNo = '1'
	WHERE a.companyCode = @CompanyCode 
		AND a.branchCode = @BranchCode 
		AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
	ORDER BY a.SONo, b.Prefix, b.Model

	

	DROP TABLE #tUnit
END




GO

if object_id('uspfn_omSlsBPKBrowse') is not null
	drop procedure uspfn_omSlsBPKBrowse
GO

CREATE procedure [dbo].[uspfn_omSlsBPKBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS  
BEGIN  
--exec uspfn_omSlsBPKBrowse 6006410,600641001
 SELECT Distinct a.BPKNo, a.BPKDate, a.DONo, a.SONo, d.SKPKNo, d.RefferenceNo, a.CustomerCode  , c.CustomerName , a.ShipTo , e.CustomerName as ShipToDsc,
            c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as Address, a.WareHouseCode, f.LookUpValueName as WrhDsc,a.Expedition,g.CustomerName as ExpeditionDsc,a.Status,
            CASE a.Status WHEN '0' THEN 'Open' WHEN '1' THEN 'Printed' WHEN '2' THEN 'Approved' WHEN '3' THEN 'Canceled' WHEN '9' THEN 'Finished' END as StatusDsc       
            ,b.SalesType, CASE ISNULL(b.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales,a.Remark
            FROM omTrSalesBPK a
            LEFT JOIN gnMstCustomerProfitCenter b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.CustomerCode = b.CustomerCode AND b.ProfitCenterCode = '100'
            LEFT JOIN gnMstCustomer c ON a.CompanyCode = c.CompanyCode AND a.CustomerCode = c.CustomerCode
            LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND a.SONo = d.SONo
            LEFT JOIN gnMstCustomer e ON a.CompanyCode = e.CompanyCode AND a.shipto = e.CustomerCode
            Left join gnMstLookUpDtl f on a.CompanyCode=f.CompanyCode and a.BranchCode=f.ParaValue and a.WarehouseCode=f.LookUpValue and f.CodeID='MPWH'
            LEFT JOIN gnMstCustomer g ON a.CompanyCode = g.CompanyCode AND a.Expedition = g.CustomerCode
            WHERE a.CompanyCode = @CompanyCode
               AND a.BranchCode = @BranchCode                              
            ORDER BY a.BPKNo DESC
End

GO

if object_id('uspfn_omSlsBPKBrwDtl') is not null
	drop procedure uspfn_omSlsBPKBrwDtl
GO

CREATE procedure [dbo].[uspfn_omSlsBPKBrwDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @RefType varchar(15),
 @BPKNo varchar(15)
)  
AS  
BEGIN  
--exec uspfn_omSlsBPKBrwDtl 6006410,600641001,'CLCD','BSJ/14/000001'
SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
	           a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
	           a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
	           a.ColourCode, case when c.RefferenceDesc1 is null then '' else c.RefferenceDesc1 end RefferenceDesc1, 
	           a.Remark, a.StatusPDI,
               a.BPKSeq
        FROM   omTrSalesBPKDetail a	   
	           LEFT JOIN
	           omMstModelYear b
	           ON a.CompanyCode = b.CompanyCode
	           AND a.SalesModelCode = b.SalesModelCode      
	           AND a.ChassisCode = b.ChassisCode
               AND a.SalesModelYear = b.SalesModelYear	   
	           LEFT JOIN
	           omMstRefference c
	           ON a.CompanyCode = c.CompanyCode
	           AND a.ColourCode = c.RefferenceCode
	           AND c.RefferenceType = @RefType
       WHERE a.CompanyCode= @CompanyCode 
               AND a.BranchCode= @BranchCode 
               AND a.BPKNo= @BPKNo
       ORDER BY a.ChassisNo ASC
            
end

GO

if object_id('uspfn_omSlsBPKLkpChassisNo') is not null
	drop procedure uspfn_omSlsBPKLkpChassisNo
GO

CREATE procedure [dbo].[uspfn_omSlsBPKLkpChassisNo]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15),
 @BPKNo varchar(15),
 @ChassisCode   varchar(15) 
)  
AS  
begin
select a.ChassisNo, a.EngineCode, a.EngineNo, 
a.ColourCode, b.RefferenceDesc1 from 
omTrSalesDODetail a
left join omMstRefference b on 
b.CompanyCode = a.CompanyCode and
b.RefferenceCode = a.ColourCode and
b.RefferenceType = 'COLO'
where
a.CompanyCode = @CompanyCode
AND a.BranchCode = @BranchCode
AND a.ChassisCode = @ChassisCode
AND a.DONo = @DONo
AND a.ChassisNo not in (select ChassisNo from omTrSalesBPKDetail z
where z.CompanyCode = a.CompanyCode
and z.BranchCode = a.BranchCode
--and z.BPKNo = @BPKNo
and z.ChassisCode = a.ChassisCode
AND not exists (select 1 from omTrSalesReturnVIN where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode
		and ChassisCode=a.ChassisCode and ChassisNo=a.ChassisNo))
END		
GO

if object_id('uspfn_omSlsBPKLkpDO') is not null
	drop procedure uspfn_omSlsBPKLkpDO
GO


CREATE procedure [dbo].[uspfn_omSlsBPKLkpDO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @ProfitCenterCode varchar(15)
 )  
AS  
BEGIN  
-- exec uspfn_omSlsBPKLkpDO  6006410,600641001,'100'
 SELECT Distinct a.DONo, a.DODate, a.SONo, g.SKPKNo, g.RefferenceNo, a.CustomerCode ,c.CustomerName, 
            c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as Address,
            a.ShipTo, c1.CustomerName as ShipName, 
            a.WareHouseCode,f.RefferenceDesc1 as WareHouseName, a.Expedition, e.SupplierName as ExpeditionName,
            b.SalesType,(CASE ISNULL(b.SalesType, 0) WHEN 0 THEN 'WholeSales' ELSE 'Direct' END) AS SalesTypeDsc
            FROM omTrSalesDO a
            LEFT JOIN gnMstCustomerProfitCenter b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.CustomerCode = a.CustomerCode
			LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.CustomerCode
            LEFT JOIN gnMstCustomer c1 ON c1.CompanyCode = a.CompanyCode AND c1.CustomerCode = a.ShipTo
			LEFT JOIN  omTrSalesDODetail d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode AND d.DoNo = a.DoNo
			LEFT JOIN gnMstSupplier e ON e.CompanyCode = a.CompanyCode AND e.SupplierCode = a.Expedition 
			LEFT JOIN  omMstRefference f ON f.CompanyCode = a.CompanyCode AND f.RefferenceCode = a.WareHouseCode and f.RefferenceType = 'WARE'
            LEFT JOIN omTrSalesSO g ON a.CompanyCode = g.CompanyCode AND a.BranchCode = g.BranchCode AND a.SONo = g.SONo            
            WHERE a.Status = '2'
            and d.StatusBPK <> '1'  
            AND a.CompanyCode = @CompanyCode
            AND b.BranchCode = @BranchCode
			AND b.ProfitCenterCode = @ProfitCenterCode                   
            ORDER BY a.DONo ASC
END      



GO

if object_id('uspfn_omSlsBPKLkpMdlCode') is not null
	drop procedure uspfn_omSlsBPKLkpMdlCode
GO


create procedure [dbo].[uspfn_omSlsBPKLkpMdlCode]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpMdlCode 6006410,600641001,''
SELECT  
	a.CompanyCode
	,a.SalesModelCode
	,a.SalesModelDesc
	,a.FakturPolisiDesc
	,a.EngineCode
	,a.PpnBmCodeBuy
	,a.PpnBmPctBuy
	,a.PpnBmCodeSell
	,a.PpnBmPctSell
	,a.PpnBmCodePrincipal
	,a.PpnBmPctPrincipal
	,a.Remark
	,a.BasicModel
	,a.TechnicalModelCode
	,a.ProductType
	,a.TransmissionType
	,a.IsChassis
	,a.IsCbu
	,a.SMCModelCode
	,a.GroupCode
	,a.TypeCode
	,a.CylinderCapacity
	,a.fuel
	,a.ModelPrincipal
	,a.Specification
	,a.ModelLine
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.IsLocked
	,a.LockedBy
	,a.LockedDate
	,a.MarketModelCode
	,a.GroupMarketModel
	,a.ColumnMarketModel
FROM omMstModel a
INNER JOIN OmTrSalesDODetail b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND b.DONo = @DONo
AND b.StatusBPK = '0'
ORDER BY a.SalesModelCode ASC
end    
GO

if object_id('uspfn_omSlsBPKLkpMdlYear') is not null
	drop procedure uspfn_omSlsBPKLkpMdlYear
GO

CREATE procedure [dbo].[uspfn_omSlsBPKLkpMdlYear]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15),
 @SalesModelCode varchar(20)
)  
AS  
begin
	SELECT a.*
FROM omMstModelYear a
INNER JOIN OmTrSalesDODetail b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode
AND b.salesModelYear = a.SalesModelYear
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND a.Status = '1'
AND b.StatusBPK = '0'
AND b.DONo = @DONo
AND b.SalesModelCode = @SalesModelCode					 
end			


GO

if object_id('uspfn_omSlsDoBrowse') is not null
	drop procedure uspfn_omSlsDoBrowse
GO

CREATE procedure [dbo].[uspfn_omSlsDoBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoBrowse 6006410,600641001
 SELECT Distinct a.DONo, a.DODate, d.SKPKNo, d.RefferenceNo, a.CustomerCode, c.CustomerName , a.ShipTo ,c.CustomerName as ShipToDsc,
            c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as Address,
            a.WareHouseCode, a.Expedition, a.SONo, f.CustomerName as ExpeditionDsc,a.Remark,
            CASE a.Status WHEN '0' THEN 'OPEN' WHEN '1' THEN 'PRINT' WHEN '2' THEN 'APPROVED' WHEN '3' THEN 'CANCEL' WHEN '9' THEN 'FINISH' END as StatusDsc,a.Status
            , CASE ISNULL(b.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales,e.LookUpValueName as WrhDsc
            FROM omTrSalesDO a
            LEFT JOIN gnMstCustomerProfitCenter b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.CustomerCode = b.CustomerCode AND b.ProfitCenterCode = '100'
            LEFT JOIN gnMstCustomer c ON a.CompanyCode = c.CompanyCode AND a.CustomerCode = c.CustomerCode
            LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND a.SONo = d.SONo      
            Left join gnMstLookUpDtl e on a.CompanyCode=e.CompanyCode and a.BranchCode=e.ParaValue and a.WarehouseCode=e.LookUpValue and e.CodeID='MPWH'
            LEFT JOIN gnMstCustomer f ON a.CompanyCode = c.CompanyCode AND a.Expedition = c.CustomerCode
            WHERE a.CompanyCode = @CompanyCode
               AND a.BranchCode = @BranchCode                              
            ORDER BY a.DONo DESC
end         
GO

if object_id('uspfn_omSlsDoDtl') is not null
	drop procedure uspfn_omSlsDoDtl
GO

create procedure [dbo].[uspfn_omSlsDoDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @DONo varchar(15)
)  
AS  
BEGIN  
-- exec uspfn_omSlsDoDtl 6006410,600641001,'DOS/14/000001'
 SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
	           a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
	           a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
	           a.ColourCode, c.RefferenceDesc1, a.Remark, a.DOSeq
        FROM   omTrSalesDODetail a	   
	           LEFT JOIN
	           omMstModelYear b
	           ON a.CompanyCode = b.CompanyCode
	           AND a.SalesModelCode = b.SalesModelCode
               AND a.SalesModelYear = b.SalesModelYear      
	           AND a.ChassisCode = b.ChassisCode	   
	           LEFT JOIN
	           omMstRefference c
	           ON a.CompanyCode = c.CompanyCode
	           AND a.ColourCode = c.RefferenceCode
	           AND c.RefferenceType = 'COLO'
       WHERE a.CompanyCode= @CompanyCode 
               AND a.BranchCode= @BranchCode 
               AND a.DONo= @DONo
       ORDER BY a.ChassisNo ASC;
END
GO

if object_id('uspfn_omSlsDoLkpExpdtn') is not null
	drop procedure uspfn_omSlsDoLkpExpdtn
GO
CREATE procedure [dbo].[uspfn_omSlsDoLkpExpdtn]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @Status varchar(1),
 @ProfitCenterCode varchar(3) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpExpdtn 6006410,600641001,1,100
SELECT 
                    a.SupplierCode, a.Suppliername, (a.address1+' '+a.address2+' '+a.address3+' '+a.address4) as Alamat,
                    b.DiscPct as Diskon, (Case a.Status when 0 then 'Tidak Aktif' else 'Aktif' end) as [Status],
                    (SELECT Lookupvaluename FROM gnmstlookupdtl WHERE codeid='PFCN' 
                     AND lookupvalue = b.ProfitCentercode) as Profit
                FROM 
                    gnMstSupplier a
                LEFT JOIN gnmstSupplierProfitCenter b ON a.CompanyCode= b.CompanyCode
	                AND a.SupplierCode = b.SupplierCode
                LEFT JOIN gnMstCustomer c ON a.SupplierCode = c.customercode
                WHERE 
                    a.CompanyCode           = @CompanyCode
                    and b.BranchCode        = @BranchCode
                    AND a.Status            = @Status
                    AND b.ProfitCenterCode  = @ProfitCenterCode                
                ORDER BY 
                    a.SupplierCode 
end

GO

if object_id('uspfn_omSlsDoLkpMdlCode') is not null
	drop procedure uspfn_omSlsDoLkpMdlCode
GO

CREATE procedure [dbo].[uspfn_omSlsDoLkpMdlCode]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @SONo varchar(15) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpMdlCode 6006410,600641001,''
SELECT  
	a.CompanyCode
	,a.SalesModelCode
	,a.SalesModelDesc
	,a.FakturPolisiDesc
	,a.EngineCode
	,a.PpnBmCodeBuy
	,a.PpnBmPctBuy
	,a.PpnBmCodeSell
	,a.PpnBmPctSell
	,a.PpnBmCodePrincipal
	,a.PpnBmPctPrincipal
	,a.Remark
	,a.BasicModel
	,a.TechnicalModelCode
	,a.ProductType
	,a.TransmissionType
	,a.IsChassis
	,a.IsCbu
	,a.SMCModelCode
	,a.GroupCode
	,a.TypeCode
	,a.CylinderCapacity
	,a.fuel
	,a.ModelPrincipal
	,a.Specification
	,a.ModelLine
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.IsLocked
	,a.LockedBy
	,a.LockedDate
	,a.MarketModelCode
	,a.GroupMarketModel
	,a.ColumnMarketModel
FROM omMstModel a
INNER JOIN omTrSalesSOModel b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode	
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND b.SONo = @SONo
AND b.QuantityDO < b.QuantitySO
ORDER BY a.SalesModelCode ASC
end


GO

if object_id('uspfn_omSlsDoLkpMdlYear') is not null
	drop procedure uspfn_omSlsDoLkpMdlYear
GO
create procedure [dbo].[uspfn_omSlsDoLkpMdlYear]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @SONo varchar(15),
 @SalesModelCode varchar(20)
)  
AS  

begin
--exec uspfn_omSlsDoLkpMdlYear 6006410,600641001,'',''
SELECT * FROM omMstModelYear a 
			 WHERE a.CompanyCode = @CompanyCode  
			 AND a.SalesModelCode =@SalesModelCode
			 AND a.Status = '1' 
			 AND a.SalesModelYear IN (SELECT b.SalesModelYear FROM omTrSalesSOModel b 
									  WHERE b.CompanyCode = a.CompanyCode 
									  AND b.SalesModelCode = a.SalesModelCode
									 AND b.SONo = @SONo	
								 AND b.BranchCode = @BranchCode)							 
end			
GO

if object_id('uspfn_omSlsDoLkpShipto') is not null
	drop procedure uspfn_omSlsDoLkpShipto
GO

CREATE procedure [dbo].[uspfn_omSlsDoLkpShipto]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProfitCenterCode varchar(3)
) 
as begin
--exec uspfn_omSlsDoLkpShipto 6006410,600641001,300
SELECT a.CompanyCode
	,a.CustomerCode
	,a.StandardCode
	,a.CustomerName
	,a.CustomerAbbrName
	,a.CustomerGovName
	,a.CustomerType
	,a.CategoryCode
	,a.Address1
	,a.Address2
	,a.Address3
	,a.Address4
	,a.PhoneNo
	,a.HPNo
	,a.FaxNo
	,a.isPKP
	,a.NPWPNo
	,a.NPWPDate
	,a.SKPNo
	,a.SKPDate
	,a.ProvinceCode
	,a.AreaCode
	,a.CityCode
	,a.ZipNo
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.isLocked
	,a.LockingBy
	,a.LockingDate
	,a.Email
	,a.BirthDate
	,a.Spare01
	,a.Spare02
	,a.Spare03
	,a.Spare04
	,a.Spare05
	,a.Gender
	,a.OfficePhoneNo
	,a.KelurahanDesa
	,a.KecamatanDistrik
	,a.KotaKabupaten
	,a.IbuKota
	,a.CustomerStatus
	  FROM gnMstCustomer a 
	INNER JOIN gnMstCustomerProfitCenter b
	  ON a.CompanyCode = b.CompanyCode AND 
		 a.CustomerCode = b.CustomerCode AND
		 b.BranchCode = @BranchCode
	WHERE a.CompanyCode = @CompanyCode AND 
		  b.ProfitCenterCode = @ProfitCenterCode                      
end                

GO

if object_id('uspfn_omSlsDoLkpSO') is not null
	drop procedure uspfn_omSlsDoLkpSO
GO

                
CREATE procedure [dbo].[uspfn_omSlsDoLkpSO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @RefType varchar(8)
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpSO 6006410,600641001,'WARE'
 SELECT Distinct a.SONo, a.SODate, a.SKPKNo, a.RefferenceNo, c.CustomerName, a.CustomerCode, 
                c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as Address,
                a.WareHouseCode, e.RefferenceDesc1 AS WareHouseName
                , (CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'WholeSales' ELSE 'Direct' END) AS TypeSales
                FROM omTrSalesSO a
                INNER JOIN omTrSalesSOModel b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.SONo = a.SONo
                LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.CustomerCode
                LEFT JOIN gnMstCustomer d ON d.CompanyCode = a.CompanyCode AND d.CustomerCode = a.ShipTo
                LEFT JOIN OmMstRefference e ON e.CompanyCode = a.CompanyCode AND e.RefferenceType = @RefType AND e.RefferenceCode = a.WareHouseCode
                WHERE a.Status = '2'
                AND a.CompanyCode = @CompanyCode
                AND b.BranchCode = @BranchCode
                AND b.QuantityDO < b.QuantitySO
                ORDER BY a.SONo ASC
                
end 

GO

if object_id('uspfn_omSlsDoUpdateSOVin') is not null
	drop procedure uspfn_omSlsDoUpdateSOVin
GO
CREATE procedure [dbo].[uspfn_omSlsDoUpdateSOVin]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15) 
)  
AS  

begin
--exec uspfn_omSlsDoUpdateSOVin 6006410,600641001,'DOS/14/000025'
select a.*,b.SONo,c.ServiceBookNo,c.KeyNo from OmTrSalesDODetail a inner join OmTrSalesDO b 
	on a.companyCode = b.companyCode and a.branchCode = b.branchCode and a.DONo = b.DONo
	inner join OmMstVehicle c on a.companyCode = c.companyCode and 
	a.chassisCode = c.chassisCode and a.chassisNo = c.chassisNo
where a.companyCode = @CompanyCode
and a.branchCode = @BranchCode and a.DONo = @DONo
					 
end	
GO

if object_id('uspfn_omSlsInvBrowse') is not null
	drop procedure uspfn_omSlsInvBrowse
GO

CREATE procedure [dbo].[uspfn_omSlsInvBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS  
BEGIN  
-- exec uspfn_omSlsInvBrowse 6006410,600641001,'DOS/14/000002'
SELECT a.BranchCode
    , a.InvoiceNo
    , a.InvoiceDate
    , a.SONo
    , d.SKPKNo
    , d.RefferenceNo
    , a.CustomerCode
    , b.CustomerName
    , a.BillTo
    , b.CustomerName AS BillName
    , b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address
    ,a.Status
    , CASE 
        WHEN a.Status = 0 THEN 'OPEN'
        WHEN a.Status = 1 THEN 'PRINTED'
        WHEN a.Status = 2 THEN 'APPROVED'
        WHEN a.Status = 3 THEN 'DELETED'
        WHEN a.Status = 5 THEN 'POSTED'
        WHEN a.Status = 9 THEN 'FINISHED'
      END as StatusDsc
    , c.SalesType
    , CASE ISNULL(c.SalesType, 0) 
        WHEN 0 THEN 'Wholesales' 
        ELSE 'Direct' 
      END AS SalesTypeDsc
    ,a.Remark
     
FROM omTrSalesInvoice a
LEFT JOIN gnMstCustomer b ON a.CompanyCode = b.CompanyCode 
    AND a.CustomerCode = b.CustomerCode
LEFT JOIN gnMstCustomerProfitCenter c ON a.CompanyCode = c.CompanyCode 
    AND a.BranchCode = c.BranchCode 
    AND a.CustomerCode = c.CustomerCode 
    AND c.ProfitCenterCode = '100'
LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode 
    AND a.BranchCode = d.BranchCode 
    AND a.SONo = d.SONo
WHERE a.CompanyCode = @companyCode 
    AND a.BranchCode like @branchCode
ORDER BY a.InvoiceNo DESC  
END


GO

if object_id('uspfn_omSlsInvGetAccsSeqTotal4Tax') is not null
	drop procedure uspfn_omSlsInvGetAccsSeqTotal4Tax
GO
Create procedure [dbo].[uspfn_omSlsInvGetAccsSeqTotal4Tax]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_omSlsInvGetTotal4Tax 6006410,600641001,''
SELECT * INTO #f1 FROM(
    SELECT (ISNULL(SUM(a.Quantity), 0) * ISNULL(SUM(a.DPP), 0)) AS DPPAmt
        , ISNULL(SUM(a.Quantity), 0) AS TotQuantity
        , (ISNULL(SUM(a.Quantity), 0) * ISNULL(SUM(a.PPn), 0)) AS PPnAmt
        , (ISNULL(SUM(a.Quantity), 0) * ISNULL(SUM(a.Total), 0)) AS TotalAmt
    FROM omTrSalesInvoiceAccsSeq a
    WHERE a.CompanyCode = @CompanyCode 
        AND a.BranchCode = @BranchCode 
        AND a.InvoiceNo = @InvoiceNo
    GROUP BY a.PartNo   
) #f1

SELECT ISNULL(SUM(DPPAmt), 0) AS DPPAmt
    , ISNULL(SUM(TotQuantity), 0) AS TotQuantity
    , ISNULL(SUM(PPnAmt), 0) AS PPnAmt
    , ISNULL(SUM(TotalAmt), 0) AS TotalAmt
FROM #f1
DROP TABLE #f1  
end                

GO

if object_id('uspfn_omSlsInvLkpBillTo') is not null
	drop procedure uspfn_omSlsInvLkpBillTo
GO

CREATE procedure [dbo].[uspfn_omSlsInvLkpBillTo]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @ProfitCenterCode varchar(3)
)  
AS  
BEGIN  
-- exec [uspfn_omSlsInvLkpBillTo] 6006410,600641001,100
 SELECT a.CustomerCode, a.CustomerName
                  FROM gnMstCustomer a 
                INNER JOIN gnMstCustomerProfitCenter b
                  ON a.CompanyCode = b.CompanyCode AND 
                     a.CustomerCode = b.CustomerCode AND
                     b.BranchCode = @BranchCode
                WHERE a.CompanyCode = @CompanyCode AND 
                      b.ProfitCenterCode = @ProfitCenterCode

end
GO

if object_id('uspfn_omSlsInvLkpBPK') is not null
	drop procedure uspfn_omSlsInvLkpBPK
GO

CREATE procedure [dbo].[uspfn_omSlsInvLkpBPK]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @SONo varchar(15),
 @INVDate datetime
)  
AS  
BEGIN  
-- exec [uspfn_omSlsInvLkpBPK] 6006410,600641001,'','2012-01-01'
SELECT distinct a.BPKNo,a.BPKDate,a.DONo,a.SONo
                  FROM omTrSalesBPK a inner join omTrSalesBPKDetail b
	                on a.companyCode = b.companyCode and a.branchCode = b.branchCode and a.BPKNo = b.BPKNo
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.BranchCode = @BranchCode
                       --AND MONTH(a.BPKDate) = @INVDate
                        AND a.BPKDate <= @INVDate
                        AND b.StatusInvoice = '0'
                        AND a.Status = '2'
                        AND SONO = @SONo
                ORDER BY a.BPKNo
END      

GO

if object_id('uspfn_omSlsInvLkpSlsMdlCd') is not null
	drop procedure uspfn_omSlsInvLkpSlsMdlCd
GO
Create procedure [dbo].[uspfn_omSlsInvLkpSlsMdlCd]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15)
)  
AS  
BEGIN  

SELECT a.*
FROM omMstModel a
WHERE EXISTS
      (SELECT 1
         FROM omTrSalesBPKModel b
        WHERE (b.QuantityBPK - b.QuantityInvoice) > 0
              AND a.SalesModelCode = b.SalesModelCode
              AND a.CompanyCode = b.CompanyCode
              AND b.BranchCode = @BranchCode
              AND b.BPKNo = @BPKNo)
   AND a.CompanyCode = @CompanyCode
ORDER BY a.SalesModelCode
                
END
GO

if object_id('uspfn_omSlsInvLkpSlsMdlYear') is not null
	drop procedure uspfn_omSlsInvLkpSlsMdlYear
GO

Create procedure [dbo].[uspfn_omSlsInvLkpSlsMdlYear]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15),
 @SalesModelCode varchar(30)
)  
AS  
BEGIN  
SELECT * 
                  FROM omMstModelYear a
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.Status = '1'
                       AND a.SalesModelCode = @SalesModelCode
                       AND a.SalesModelYear IN 
                             (SELECT b.SalesModelYear
                                FROM omTrSalesBPKModel b
                               WHERE b.CompanyCode = a.CompanyCode
                                     AND b.BranchCode = @BranchCode
                                     AND b.BPKNo = @BPKNo
                                     AND b.SalesModelCode = a.SalesModelCode
                                     AND (b.QuantityBPK - b.QuantityInvoice) > 0)                        
End
GO

if object_id('uspfn_omSlsInvLkpSO') is not null
	drop procedure uspfn_omSlsInvLkpSO
GO

CREATE procedure [dbo].[uspfn_omSlsInvLkpSO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS  
BEGIN  
-- exec uspfn_omSlsInvLkpSO 6006410,600641001
    SELECT tableA.SONo,tableA.QtyBPK,tableA.QtyInvoice, tableB.CustomerCode, tableB.CustomerName, tableB.BillTo, tableB.BillName,
				tableB.Address,tableB.SalesType,tableB.SalesTypeDsc,tableB.TOPDays, tableB.SKPKNo, tableB.RefferenceNo				
      FROM (SELECT a.SONo, sum (b.QuantityBPK)  AS QtyBPK, sum (b.QuantityInvoice)  AS QtyInvoice                   
              FROM omTrSalesBPK a, omTrSalesBPKModel b
             WHERE a.CompanyCode = b.CompanyCode
                   AND a.BranchCode = b.BranchCode
                   AND a.BPKNo = b.BPKNo
                   AND a.CompanyCode = @CompanyCode
                   AND a.BranchCode = @BranchCode
                   AND a.Status = '2' 
             GROUP BY a.SONo) tableA,
           (SELECT a.SONo, a.CustomerCode, b.CustomerName, a.BillTo, b.CustomerName as BillName,
			b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address,a.SalesType
            , (CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'WholeSales' ELSE 'Direct' END) AS SalesTypeDsc
            , ISNULL(a.TOPDays, 0) AS TOPDays, a.SKPKNo, a.RefferenceNo
              FROM omTrSalesSO a
			  LEFT JOIN gnMstCustomer b ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
             WHERE a.CompanyCode = @CompanyCode
                   AND a.BranchCode = @BranchCode
                   AND a.Status = '2') tableB
     WHERE tableA.QtyBPK > tableA.QtyInvoice AND tableA.SONo = tableB.SONo
    ORDER BY tableA.SONo
END

GO

if object_id('uspfn_omSlsInvModelGetTotal4Tax') is not null
	drop procedure uspfn_omSlsInvModelGetTotal4Tax
GO

Create procedure [dbo].[uspfn_omSlsInvModelGetTotal4Tax]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
		 SELECT * INTO #f1 FROM (
             SELECT ISNULL(SUM(a.Quantity) * SUM(a.BeforeDiscDPP), 0) AS DPPAmt, ISNULL(SUM(a.Quantity) * SUM(a.DiscExcludePPn), 0) AS DiscAmt
            , (ISNULL(SUM(a.Quantity) * SUM(a.BeforeDiscDPP), 0) - ISNULL(SUM(a.Quantity) * SUM(a.DiscExcludePPn), 0) + ISNULL(SUM(a.Quantity) * SUM(a.AfterDiscPPn), 0)) AS TotalAmt, ISNULL(SUM(a.Quantity) * SUM(a.AfterDiscPPn), 0) AS PPnAmt
            , ISNULL(SUM(a.Quantity), 0) AS TotQuantity, ISNULL(SUM(a.Quantity) * SUM(a.PPnBMPaid), 0) AS PPnBMPaid FROM omTrSalesInvoiceModel a
             WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
             GROUP BY a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
             ) #f1
            
            
         SELECT ISNULL(SUM(DPPAmt), 0) AS DPPAmt, ISNULL(SUM(DiscAmt), 0) AS DiscAmt
            , ISNULL(SUM(TotalAmt), 0) AS TotalAmt, ISNULL(SUM(PPnAmt), 0) AS PPnAmt
             , ISNULL(SUM(TotQuantity), 0) AS TotQuantity, ISNULL(SUM(PPnBMPaid), 0) AS PPnBMPaid FROM #f1
            
			DROP TABLE #f1

end          
GO

if object_id('uspfn_omSlsInvOtherGetTotal4Tax') is not null
	drop procedure uspfn_omSlsInvOtherGetTotal4Tax
GO

Create procedure [dbo].[uspfn_omSlsInvOtherGetTotal4Tax]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
SELECT * INTO #f1 FROM(
          SELECT (ISNULL(SUM(b.Quantity), 0) * ISNULL(SUM(a.AfterDiscDPP), 0)) AS DPPAmt, ISNULL(SUM(b.Quantity), 0) AS TotQuantity
         , (ISNULL(SUM(b.Quantity), 0) * ISNULL(SUM(a.AfterDiscPPn), 0)) AS PPnAmt, (ISNULL(SUM(b.Quantity), 0)  * ISNULL(SUM(a.AfterDiscTotal), 0)) AS TotalAmt
          FROM omTrSalesInvoiceOthers a
          LEFT JOIN omTrSalesInvoiceModel b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
          AND b.InvoiceNo = a.InvoiceNo AND b.SalesModelCode = a.SalesModelCode AND b.SalesModelYear = a.SalesModelYear
          WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
          GROUP BY a.SalesModelCode, a.SalesModelYear, a.OtherCode
          ) #f1

          SELECT ISNULL(SUM(DPPAmt), 0) AS DPPAmt, ISNULL(SUM(TotQuantity), 0) AS TotQuantity, ISNULL(SUM(PPnAmt), 0) AS PPnAmt, ISNULL(SUM(TotalAmt), 0) AS TotalAmt
          FROM #f1
          DROP TABLE #f1
          
end      
GO

if object_id('uspfn_omSlsInvSlctFrTblInvAccSeq') is not null
	drop procedure uspfn_omSlsInvSlctFrTblInvAccSeq
GO

Create procedure [dbo].[uspfn_omSlsInvSlctFrTblInvAccSeq]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN  
SELECT a.PartNo
    , ISNULL(b.PartName,'') AS PartName
    , a.SupplySlipNo
    , a.Quantity
    , a.DPP
    , a.PPn
    , a.Total * a.Quantity as Total
FROM omTrSalesInvoiceAccsSeq a
LEFT JOIN spMstItemInfo b ON b.CompanyCode=a.CompanyCode
    AND b.PartNo=a.PartNo
WHERE a.CompanyCode = @CompanyCode
   AND a.BranchCode = @BranchCode
   AND a.InvoiceNo = @InvoiceNo
End   

GO

if object_id('uspfn_omSlsInvSlctMdlYrVldt') is not null
	drop procedure uspfn_omSlsInvSlctMdlYrVldt
GO
create procedure [dbo].[uspfn_omSlsInvSlctMdlYrVldt]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15),
 @InvoiceNo varchar(30),
 @SalesModelCode varchar(30)
)  
AS  
BEGIN  
 SELECT a.SalesModelYear, a.SalesModelDesc
                  FROM omMstModelYear a
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.Status = '1'
                       AND a.SalesModelCode = @SalesModelCode
                       AND a.SalesModelYear IN
                             (SELECT b.SalesModelYear
                                FROM omTrSalesBPKModel b
                               WHERE b.CompanyCode = a.CompanyCode
                                     AND b.BranchCode = @BranchCode
                                     AND b.BPKNo = @BPKNo
                                     AND b.SalesModelCode = a.SalesModelCode
                                     AND (b.QuantityBPK - b.QuantityInvoice) > 0)
                UNION
                SELECT z.SalesModelYear, (SELECT x.SalesModelDesc 
                       FROM omMstModelYear x
                       WHERE x.SalesModelYear = z.SalesModelYear and 
			                 x.SalesModelCode = z.SalesModelCode)  AS SalesModelDesc
                  FROM omTrSalesInvoiceModel z
                 WHERE z.CompanyCode = @CompanyCode
                       AND z.BranchCode = @BranchCode
                       AND z.InvoiceNo = @InvoiceNo
                       AND z.BPKNo = @BPKNo
                       AND z.SalesModelCode = @SalesModelCode
                ORDER BY a.SalesModelYear 
                
end

GO

if object_id('uspfn_omSlsInvSlctModelVldt') is not null
	drop procedure uspfn_omSlsInvSlctModelVldt
GO

Create procedure [dbo].[uspfn_omSlsInvSlctModelVldt]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15),
 @InvoiceNo varchar(30)
)  
AS  
BEGIN  
 SELECT a.SalesModelCode, a.SalesModelDesc
                  FROM omMstModel a
                 WHERE EXISTS
                          (SELECT 1
                             FROM omTrSalesBPKModel b
                            WHERE (b.QuantityBPK - b.QuantityInvoice) > 0
                                  AND a.SalesModelCode = b.SalesModelCode
                                  AND a.CompanyCode = b.CompanyCode
                                  AND b.BranchCode = @BranchCode
                                  AND b.BPKNo = @BPKNo)
                       AND a.CompanyCode = @CompanyCode
                UNION
                SELECT z.SalesModelCode, (SELECT x.SalesModelDesc
                       FROM omMstModel x
                       WHERE z.SalesModelCode = x.SalesModelCode)  AS SalesModelDesc
                  FROM omTrSalesInvoiceModel z
                 WHERE z.CompanyCode = @CompanyCode
                       AND z.BranchCode = @BranchCode
                       AND z.InvoiceNo = @InvoiceNo
                       AND z.BPKNo = @BPKNo
                ORDER BY a.SalesModelCode
                
end
GO

if object_id('uspfn_omSlsInvSlsMdlYearVldt') is not null
	drop procedure uspfn_omSlsInvSlsMdlYearVldt
GO

Create procedure [dbo].[uspfn_omSlsInvSlsMdlYearVldt]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @InvoiceNo varchar(30),
 @BPKNo varchar(15),
 @SalesModelCode varchar(30)
)  
AS  
BEGIN 
SELECT a.SalesModelYear, a.SalesModelDesc
                  FROM omMstModelYear a
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.Status = '1'
                       AND a.SalesModelCode = @SalesModelCode
                       AND a.SalesModelYear IN
                             (SELECT b.SalesModelYear
                                FROM omTrSalesBPKModel b
                               WHERE b.CompanyCode = a.CompanyCode
                                     AND b.BranchCode = @BranchCode
                                     AND b.BPKNo = @BPKNo
                                     AND b.SalesModelCode = a.SalesModelCode
                                     AND (b.QuantityBPK - b.QuantityInvoice) > 0)
                UNION
                SELECT z.SalesModelYear, (SELECT x.SalesModelDesc 
                       FROM omMstModelYear x
                       WHERE x.SalesModelYear = z.SalesModelYear and 
			                 x.SalesModelCode = z.SalesModelCode)  AS SalesModelDesc
                  FROM omTrSalesInvoiceModel z
                 WHERE z.CompanyCode = @CompanyCode
                       AND z.BranchCode = @BranchCode
                       AND z.InvoiceNo = @InvoiceNo
                       AND z.BPKNo = @BPKNo
                       AND z.SalesModelCode = @SalesModelCode
                ORDER BY a.SalesModelYear
END                
          
GO

if object_id('uspfn_omSlsPrlgkpnOutBrwDocBPK') is not null
	drop procedure uspfn_omSlsPrlgkpnOutBrwDocBPK
GO

create procedure [dbo].[uspfn_omSlsPrlgkpnOutBrwDocBPK]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @ProfitCenterCode varchar(15)
 )  
AS  
BEGIN  
SELECT Distinct a.BPKNo, a.CustomerCode ,c.CustomerName,a.CustomerCode  + ' - ' + c.CustomerName as Customer,
                c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as Address 
                    FROM omTrSalesBPK a, gnMstCustomerProfitCenter b, gnMstCustomer c
                 WHERE a.CompanyCode = b.CompanyCode
                       AND a.CompanyCode = @CompanyCode
                       AND a.BranchCode = @BranchCode
                       AND b.ProfitCenterCode = @ProfitCenterCode                    
					   AND a.CompanyCode = c.CompanyCode
					   AND a.CustomerCode = c.CustomerCode
                       AND a.Status = '2'                      
                ORDER BY a.BPKNo ASC                
END                
            
            
            
GO

if object_id('uspfn_omSlsPrlgkpnOutBrwDocTransfer') is not null
	drop procedure uspfn_omSlsPrlgkpnOutBrwDocTransfer
GO
CREATE procedure [dbo].[uspfn_omSlsPrlgkpnOutBrwDocTransfer]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15)
 )  
AS  
BEGIN  
SELECT 
a.TransferOutNo, 
a.TransferOutDate, 
a.ReferenceNo, 
a.ReferenceDate, 
a.BranchCodeFrom, 
b.BranchName AS BranchNameFrom, 
a.BranchCodeTo, 
c.BranchName AS BranchNameTo, 
a.WareHouseCodeFrom, 
d.RefferenceDesc1 AS WareHouseNameFrom, 
a.WareHouseCodeTo, 
e.RefferenceDesc1 AS WareHouseNameTo, 
a.ReturnDate, 
a.Remark, 
a.Status,
CASE a.Status 
	WHEN '0' THEN 'OPEN' 
	WHEN '1' THEN 'PRINTED' 
	WHEN '2' THEN 'APPROVED' 
	WHEN '3' THEN 'DELETED' 
	WHEN '5' THEN 'TRANSFERED' 
	WHEN '9' THEN 'FINISHED' 
	ELSE '' 
END 
AS StatusDsc
FROM  OmTrInventTransferOut a 
LEFT JOIN gnMstOrganizationDtl b
ON    a.CompanyCode = b.CompanyCode 
AND   a.BranchCodeFrom = b.BranchCode 
LEFT JOIN gnMstOrganizationDtl c
ON    a.CompanyCode = c.CompanyCode 
AND   a.BranchCodeTo = c.BranchCode 
LEFT JOIN omMstRefference d
ON    a.CompanyCode = d.CompanyCode 
AND   a.WareHouseCodeFrom = d.RefferenceCode 
AND   d.RefferenceType = 'WARE' 
LEFT JOIN omMstRefference e
ON    e.CompanyCode = a.CompanyCode 
AND   e.RefferenceCode = a.WareHouseCodeTo 
AND   e.RefferenceType = 'WARE' 
WHERE a.CompanyCode = @CompanyCode
AND   a.BranchCode = @BranchCode
ORDER BY a.TransferOutNo DESC,a.TransferOutDate DESC        
END     
GO

if object_id('uspfn_omSlsPrlgkpnOutDtl') is not null
	drop procedure uspfn_omSlsPrlgkpnOutDtl
GO

CREATE procedure [dbo].[uspfn_omSlsPrlgkpnOutDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @PerlengkapanNo varchar(15),
 @SalesModelCode varchar(15)
 )  
AS  
BEGIN  
	SELECT 
		a.PerlengkapanNo, 
		b.PerlengkapanName, 
		a.SalesModelCode,  
		a.PerlengkapanCode,  
		a.QuantityStd,  
		a.Quantity,  
		a.Remark        	
	FROM OmTrSalesPerlengkapanOutDetail a
	LEFT JOIN OmMstPerlengkapan b
	ON a.CompanyCode = b.CompanyCode
	AND a.Branchcode = b.BranchCode
	AND a.PerlengkapanCode = b.PerlengkapanCode
	where a.CompanyCode = @CompanyCode
	and a.BranchCode = @BranchCode
	and a.PerlengkapanNo = @PerlengkapanNo and a.SalesModelCode = @SalesModelCode
	ORDER BY a.PerlengkapanCode ASC         
END            
            
GO

if object_id('uspfn_omSlsPrlgkpnOutLkpMdlDtl') is not null
	drop procedure uspfn_omSlsPrlgkpnOutLkpMdlDtl
GO

CREATE procedure [dbo].[uspfn_omSlsPrlgkpnOutLkpMdlDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @SalesModelCode varchar(20) 
 )  
AS  
BEGIN       
 SELECT DISTINCT a.PerlengkapanCode, a.PerlengkapanName,b.Remark,b.Quantity
            FROM OmMstPerlengkapan a
            INNER JOIN omMstModelPerlengkapan b ON
	            a.CompanyCode = b.CompanyCode
	            AND a.BranchCode = b.BranchCode
	            AND a.PerlengkapanCode = b.PerlengkapanCode
	            AND a.Status = '1'
	            AND b.salesModelCode = @SalesModelCode
            INNER JOIN omTrInventQtyPerlengkapan c
	            ON a.companyCode = c.companyCode
	            AND a.branchCode = c.branchCode
	            AND a.perlengkapanCode = c.perlengkapanCode
            WHERE a.CompanyCode = @CompanyCode
	            AND a.BranchCode = @BranchCode
	            --AND c.Year = year(getdate())
	            --AND c.Month = month(getdate())
                AND c.QuantityEnding > 0
            ORDER BY a.PerlengkapanCode ASC            
END         


   
GO

if object_id('uspfn_omSlsReturnBrowse') is not null
	drop procedure uspfn_omSlsReturnBrowse
GO

CREATE procedure uspfn_omSlsReturnBrowse
(    
 @CompanyCode varchar(15),    
 @BranchCode varchar(15)   
)    
AS    
BEGIN    
--exec uspfn_omSlsReturnBrowse 6006410,600641001  
SELECT 
		a.CompanyCode ,
		a.BranchCode ,
		a.ReturnNo ,
		a.ReturnDate ,
		a.ReferenceNo ,
		a.ReferenceDate ,
		a.InvoiceNo ,
		a.InvoiceDate ,
		a.CustomerCode ,
		a.FakturPajakNo ,
		a.FakturPajakDate ,
		a.WareHouseCode ,
		a.Remark ,
		a.Status ,
		a.WareHouseCode,
		b.CustomerName, 
		b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address,
		(
			SELECT 
					c.RefferenceDesc1
			FROM 
					omMstRefference c
			WHERE 
					a.WareHouseCode = c.RefferenceCode
		)  AS WarehouseName, 
		CASE
			WHEN a.Status = '0' THEN 'OPEN'
			WHEN a.Status = '1' THEN 'PRINTED'
			WHEN a.Status = '2' THEN 'APPROVED'
			WHEN a.Status = '3' THEN 'DELETED'
			WHEN a.Status = '5' THEN 'POSTED'
			WHEN a.Status = '9' THEN 'FINISHED'
		END  AS StatusDsc
		, CASE ISNULL(c.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS SalesTypeDsc
		,c.SalesType
FROM 
		omTrSalesReturn a
		LEFT JOIN gnMstCustomer b ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
		LEFT JOIN gnMstCustomerProfitCenter c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = '100'
WHERE 
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
order by 
		a.ReturnNo desc
End               
        
GO

if object_id('uspfn_omSlsReturnLkpInvoice') is not null
	drop procedure uspfn_omSlsReturnLkpInvoice
GO

CREATE procedure [dbo].[uspfn_omSlsReturnLkpInvoice]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15)
)  
AS  
BEGIN  
	SELECT 
			a.CompanyCode,a.BranchCode	,a.InvoiceNo	,a.InvoiceDate	,a.SONo	,a.CustomerCode	,			
			a.BillTo	,a.FakturPajakNo	
			,a.FakturPajakDate	,a.DueDate	,a.isStandard	,a.Remark	,a.Status,b.CustomerName,
			b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address,			
			c.SalesType, CASE ISNULL(c.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS SalesTypeDsc
	FROM 
			omTrSalesInvoice a
			LEFT JOIN gnMstCustomer b
			ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
			LEFT JOIN gnMstCustomerProfitCenter c
			ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = '100'                  
			
	WHERE
			a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
			AND a.Status IN ('2', '5')
			AND a.FakturPajakNo != '' 
	ORDER BY 
			a.InvoiceNo ASC                
END
GO

if object_id('uspfn_omSlsReturnLkpMdlYear') is not null
	drop procedure uspfn_omSlsReturnLkpMdlYear
GO
create procedure [dbo].[uspfn_omSlsReturnLkpMdlYear]     
(    
 @CompanyCode varchar(15),    
 @BranchCode varchar(15),    
 @InvoiceNo varchar(15),  
 @SalesModelCode varchar(20)  
)    
AS   
begin  
SELECT a.SalesModelCode, a.SalesModelYear, a.SalesModelDesc, a.ChassisCode, b.BPKNo, b.
                       BeforeDiscDPP, b.AfterDiscDPP, b.AfterDiscPPn, b.AfterDiscPPnBM, b.
                       OthersDPP, b.OthersPPn, b.DiscExcludePPn 
                  FROM omMstModelYear a, omTrSalesInvoiceModel b
                 WHERE a.CompanyCode = b.companyCode
                       AND a.SalesModelCode = b.salesModelCode
                       AND a.SalesModelYear = b.salesModelYear
                       AND b.companyCode = @CompanyCode
                       AND b.branchCode = @BranchCode
                       AND b.invoiceNo = @InvoiceNo
                       AND b.salesModelCode = @SalesModelCode
                       AND (b.quantity - b.quantityReturn) > 0
                ORDER BY a.SalesModelYear ASC         
end   
GO

if object_id('uspfn_omSlsReturnLkpSlsMdlCd') is not null
	drop procedure uspfn_omSlsReturnLkpSlsMdlCd
GO
Create procedure [dbo].[uspfn_omSlsReturnLkpSlsMdlCd]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @InvoiceNo varchar(15)
)  
AS  
BEGIN  
 SELECT * 
                  FROM omMstModel a, omTrSalesInvoiceModel b
                 WHERE a.CompanyCode = b.CompanyCode
                       AND a.SalesModelCode = b.SalesModelCode
                       AND a.CompanyCode = @CompanyCode
                       AND b.BranchCode = @BranchCode
                       AND b.InvoiceNo = @InvoiceNo
                       AND (b.Quantity - b.QuantityReturn) > 0        
                
END

GO

if object_id('uspfn_PenjualFPLookup') is not null
	drop procedure uspfn_PenjualFPLookup
GO
CREATE procedure [dbo].[uspfn_PenjualFPLookup]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@ProfitCenterCode as varchar(15)
	,@CustomerCode as varchar(15)
as

declare @isBranch int
set @isBranch=(select isBranch from gnMstOrganizationDtl where CompanyCode=@CompanyCode and BranchCode=@BranchCode)

select a.CustomerCode, a.CustomerName,
       a.Address1+' '+a.Address2+' '+a.Address3+' '+a.Address4 as Address,
       c.LookUpValueName as ProfitCenter
from gnMstCustomer a 
	inner join gnMstCustomerProfitCenter b on 
		b.CustomerCode= b.CustomerCode and b.CustomerCode=a.CustomerCode
	inner join gnMstLookUpDtl c on c.CompanyCode= a.CompanyCode
		and c.LookupValue= b.ProfitCenterCode
		and c.CodeID= 'PFCN'
where a.CompanyCode=@CompanyCode
	and b.BranchCode=@BranchCode
	and b.ProfitCenterCode= @ProfitCenterCode
	and b.isBlackList=0
	and a.Status = 1
	and b.SalesType = '0' 
	and a.CustomerCode= (case when @isBranch=1 then @BranchCode else @CustomerCode end)
order by a.CustomerCode
GO



if object_id('uspfn_PostingTaxIn') is not null
	drop procedure uspfn_PostingTaxIn
GO
 CREATE procedure [dbo].[uspfn_PostingTaxIn]
	@CompanyCode nvarchar(25),
	@BranchCode nvarchar(25),
	@ProductType nvarchar(2),
	@PeriodYear int,
	@PeriodMonth int,
	@LastSeqNo int,
	@UserId varchar(max)
  
  as
  begin

SELECT * INTO #1 FROM (
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxIn WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth
UNION
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxInHistory WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth 
    AND IsDeleted = '1'
) Temp

/* AMBIL SEMUA DATA HPP SPARE */
select * into #t_1 from (
select b.SupplierCode, a.* 
from spTrnPHpp a
left join spTrnPRcvHdr b on b.CompanyCode = a.CompanyCode 
	and b.BranchCode = a.BranchCode
	and b.WRSNo = a.WRSNo
where
	a.CompanyCode	 = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	and a.YearTax	 = @PeriodYear
	and a.MonthTax	 = @PeriodMonth
)#t_1 

/* AMBIL SEMUA DATA BTT OTHER (AP) */
select * into #t_2 from (
select a.* 
from apTrnBTTOtherHdr a
where 
	a.CompanyCode = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	and a.FPJNo <> ''
	and SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    and RIGHT(a.FPJPeriod, 2) = @PeriodMonth
)#t_2 

/* DATA HPP SPARE YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA DENGAN BTT OTHER (NILAI DIJUMLAHKAN) */
SELECT * INTO #t_3 FROM (
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL((ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0)) + g.DppAmt,0) DPPAmt
, ISNULL((ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0)) + g.PPNAmt, 0) PPNAmt
, ISNULL(0 + g.PPNBmAmt, 0) PPNBmAmt
, 'PEMBELIAN SPARE PART' Description
, ISNULL(ISNULL(b.TotItem, 0)+(SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode 
							AND BranchCode = a.BranchCode AND BTTNo = g.BTTNo), 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
	INNER JOIN #t_2 g on g.BranchCode = a.BranchCode AND g.SupplierCode = b.SupplierCode
		AND g.FPJNo = a.TaxNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
) #t_3

-----------------------------------------------------------


SELECT * INTO #TaxIn FROM (
-- SALES : PURCHASE
SELECT
  a.CompanyCode
, a.BranchCode
, e.ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode 
, d.SupplierGovName SupplierName
, d.IsPKP 
, d.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.HPPNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, ISNULL((SELECT SUM(Quantity * (AfterDiscDPP + OthersDPP)) FROM omTrPurchaseHPPDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ), 0) DPPAmt
, ISNULL((SELECT SUM(Quantity * (AfterDiscPPn + OthersPPn)) FROM omTrPurchaseHPPDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ), 0) PPNAmt
, ISNULL((SELECT SUM(Quantity * AfterDiscPPnBM) FROM omTrPurchaseHPPDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ), 0) PPNBmAmt
, (SELECT TOP 1 SalesModelCode + ', NO. CHS. ' + CONVERT(VARCHAR, ChassisNo) FROM omTrPurchaseHPPSubDetail 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo) Description
, (SELECT COUNT(HPPSeq) FROM omTrPurchaseHPPSubDetail c 
	LEFT JOIN omTrPurchaseHPPDetailModel b ON c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode 
	AND c.HPPNo = b.HPPNo AND c.BPUNo = b.BPUNo
	WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.HPPNo = a.HPPNo) Quantity
FROM
	omTrPurchaseHPP a WITH(NOLOCK, NOWAIT)
	LEFT JOIN gnMstSupplier d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.SupplierCode = d.SupplierCode
	LEFT JOIN gnMstCoProfile e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
    INNER JOIN gnMstSupplierProfitCenter f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
	    AND a.BranchCode = f.BranchCode
        AND a.SupplierCode = f.SupplierCode
    INNER JOIN gnMstTax g WITH(NOLOCK, NOWAIT) ON a.CompanyCode = g.CompanyCode
        AND f.TaxCode = g.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND YEAR(a.LockingDate) = @PeriodYear
	AND MONTH(a.LockingDate) = @PeriodMonth
	AND a.Status NOT IN ('3')
    AND f.ProfitCenterCode = '100'
    AND g.TaxPct > 0
-------------------------------------------------------------------------------------
UNION
-- SALES : KAROSERI
SELECT
  a.CompanyCode
, a.BranchCode
, ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.KaroseriTerimaNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.Quantity, 0) * (ISNULL(a.DPPMaterial, 0) + ISNULL(a.DPPFee, 0) + ISNULL(a.DPPOthers, 0)) DPPAmt
, ISNULL(a.Quantity, 0) * ISNULL(a.PPn, 0) PPNAmt
, 0 PPNBmAmt
, a.KaroseriSPKNo Description
, ISNULL(a.Quantity, 0) Quantity
FROM
	omTrPurchaseKaroseriTerima a WITH(NOLOCK, NOWAIT)
	LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.SupplierCode = b.SupplierCode
	LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND YEAR(a.LockingDate) = @PeriodYear
	AND MONTH(a.LockingDate) = @PeriodMonth
	AND a.Status NOT IN ('3')
    AND d.ProfitCenterCode = '100'
    AND e.TaxPct > 0
-----------------------------------------------------------------------------------------
UNION
-- SALES : PURCHASE RETURN
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, YEAR(ReturnDate) PeriodYear
, MONTH(ReturnDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'R' DocumentType
, c.SupplierCode SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP IsPKP
, c.NPWPNo NPWP
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') FPJNo
, a.RefferenceDate FPJDate
, a.ReturnNo + ' (' + a.RefferenceNo + ')' ReferenceNo
, a.RefferenceDate ReferenceDate
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') TaxNo  
, a.RefferenceDate TaxDate
, a.ReturnDate SubmissionDate
, ISNULL((SELECT SUM(Quantity * (AfterDiscDPP + OthersDPP))FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 DPPAmt
, ISNULL((SELECT SUM(Quantity * (AfterDiscPPn + OthersPPn))FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 PPNAmt
, ISNULL((SELECT SUM(Quantity * AfterDiscPPnBM)FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 PPNBmAmt
, a.ReturnNo Description
, ISNULL((SELECT SUM(Quantity)FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 Quantity
FROM
	omTrPurchaseReturn a WITH(NOLOCK, NOWAIT)
	LEFT JOIN omTrPurchaseHPP b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.HPPNo = b.HPPNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND YEAR(ReturnDate) = @PeriodYear
	AND MONTH(ReturnDate) = @PeriodMonth
	AND a.Status NOT IN ('3')
    AND e.ProfitCenterCode = '100'
    AND f.TaxPct > 0
---------------------------------------------------------------------------------------
UNION
-- SERVICE
SELECT
  a.CompanyCode
, a.BranchCode
, a.ProductType
, YEAR(RecDate) PeriodYear
, MONTH(RecDate) PeriodMonth
, '200' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP IsPKP
, b.NPWPNo NPWP
, a.FPJNo FPJNo
, a.FPJDate FPJDate
, a.PONo + ' (' + a.JobOrderNo + ')' ReferenceNo
, a.JobOrderDate RefferenceDate
, a.FPJGovNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.DPPAmt, 0) DPPAmt
, ISNULL(a.PPnAmt, 0) PPNAmt
, 0 PPNBmAmt
, a.RecNo Description
, 1 Quantity
FROM
	svTrnPOSubCon a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.SupplierCode = b.SupplierCode
    INNER JOIN gnMstSupplierProfitCenter c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
        AND a.SupplierCode = c.SupplierCode
    INNER JOIN gnMstTax d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
        AND c.TaxCode = d.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND a.ProductType = @ProductType
	AND YEAR(RecDate) = @PeriodYear
	AND MONTH(RecDate) = @PeriodMonth
    AND c.ProfitCenterCode = '200'
    AND d.TaxPct > 0
---------------------------------------------------------------------------------------
UNION 
-- SPAREPART
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0) DPPAmt
, ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0) PPNAmt
, 0 PPNBmAmt
, 'PEMB. S`PART' Description
, ISNULL(b.TotItem, 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
    AND a.BranchCode+'-'+b.SupplierCode+'-'+a.TaxNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- FINANCE
SELECT
  a.CompanyCode
, a.BranchCode
, c.ProductType
, SUBSTRING(a.FPJPeriod, 1, 4) PeriodYear
, RIGHT(a.FPJPeriod, 2) PeriodMonth
, '000' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.FPJNo
, a.FPJDate
, a.BTTNo + ' (' + a.ReffNo + ')' ReferenceNo
, a.ReffDate ReferenceDate
, a.FPJNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, a.DPPAmt
, a.PPNAmt
, a.PPnBMAmt
, (SELECT TOP 1 Description FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Description
, (SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Quantity	
FROM
    apTrnBTTOtherHdr a	WITH(NOLOCK, NOWAIT)    
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
    AND ProductType = @ProductType
    AND SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    AND RIGHT(a.FPJPeriod, 2) = @PeriodMonth
    AND a.Category = 'INV'
    AND d.ProfitCenterCode = '000'
    AND e.TaxPct > 0
    AND a.BranchCode+'-'+b.SupplierCode+'-'+a.FPJNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- SPARE PART DAN BTT YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA
SELECT * FROM #t_3
) #TaxIn

select ROW_NUMBER() OVER(ORDER BY #TaxIn2.BranchCode ASC, #TaxIn2.ProfitCenter ASC, #TaxIn2.TaxNo ASC) + @LastSeqNo SeqNo, * into #TaxIn2 from(
select 
	q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, ISNULL((SELECT TOP 1 TypeOfGoods FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo),'') TypeOfGoods
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, (SELECT TOP 1 FPJNo FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJNo
	, (SELECT TOP 1 FPJDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJDate
	, (SELECT TOP 1 ReferenceNo FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceNo
	, (SELECT TOP 1 ReferenceDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceDate
	, q1.TaxNo
	, (SELECT TOP 1 TaxDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) TaxDate
	, (SELECT TOP 1 SubmissionDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) SubmissionDate
	, sum(q1.DPPAmt) DPPAmt
	, sum(q1.PPNAmt) PPNAmt
	, sum(q1.PPnBMAmt) PPnBMAmt
	, (SELECT TOP 1 Description FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) Description
	, sum(q1.Quantity) Quantity
from #TaxIn q1
group by
	q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, q1.TaxNo
) #TaxIn2
WHERE 
    #TaxIn2.BranchCode+'-'+#TaxIn2.TaxNo+'-'+#TaxIn2.SupplierCode 
        NOT IN (SELECT BranchCode+'-'+TaxNo+'-'+SupplierCode FROM #1)

INSERT INTO gnTaxIn SELECT CompanyCode, BranchCode, ProductType, PeriodYear, PeriodMonth, SeqNo, ProfitCenter, 
    TypeOfGoods, TaxCode, TransactionCode, StatusCode, DocumentCode, DocumentType, SupplierCode, SupplierName, 
    IsPKP, NPWP, FPJNo, FPJDate, ReferenceNo, ReferenceDate, TaxNo, TaxDate, SubmissionDate, DPPAmt, PPNAmt, 
    PPNBmAmt, Description, Quantity, 0 IsLocked, null LockingBy, null LockingDate, @UserId CreatedBy, 
    GETDATE() CreatedDate, @UserId LastupdateBy, GETDATE() LastupdateDate
    FROM #TaxIn2

DROP TABLE #1
DROP TABLE #TaxIn
DROP TABLE #TaxIn2
DROP TABLE #t_1
DROP TABLE #t_2
DROP TABLE #t_3
END
GO

if object_id('uspfn_Select4NoPartOrderBalance') is not null
	drop procedure uspfn_Select4NoPartOrderBalance
GO

Create procedure [dbo].[uspfn_Select4NoPartOrderBalance] @CompanyCode varchar(15),
@BranchCode varchar(15), @PosNo varchar(20)
as
SELECT 
	a.POSNo, a.PartNo, b.PartName, CAST(a.OrderQty as decimal(18,2)) as OrderQty, 
	a.OnOrder, a.Intransit, a.Received,a.DiscPct, a.PurchasePrice, 
	Convert(varchar(10),a.SeqNo) SeqNo, a.SupplierCode, a.OnOrder, a.PartNoOriginal, 
	a.TypeOfGoods 
FROM 
	spTrnPOrderBalance a 
INNER JOIN spMstItemInfo b
   ON b.PartNo      = a.PartNo
  AND b.CompanyCode = a.CompanyCode
WHERE a.CompanyCode = @CompanyCode
  AND a.BranchCode  = @BranchCode
  AND a.PosNo    like @PosNo
ORDER BY a.POSNo DESC, a.SeqNo
GO

if object_id('uspfn_SelectAccOther') is not null
	drop procedure uspfn_SelectAccOther
GO
create procedure [dbo].[uspfn_SelectAccOther]
	@CompanyCode varchar(25),
	@Reff varchar(25)
as
begin
	SELECT a.RefferenceCode
	     , a.RefferenceDesc
      FROM dbo.omMstRefference a
     WHERE a.CompanyCode = @CompanyCode
       AND a.RefferenceType = @Reff
       AND a.Status != '0'
end

GO

if object_id('uspfn_SelectInventory4All') is not null
	drop procedure uspfn_SelectInventory4All
GO
--declare @CompanyCode varchar(20)
--declare @BranchCode  varchar(20)
--declare @TypeJournal  varchar(20)
--declare @DocNo   varchar(20)

--set @CompanyCode = '6558201'
--set @BranchCode  = '655820100'
--set @TypeJournal = 'invoice'
--set @DocNo       = 'IVU/13/001280'

-- =============================================
-- Author:		<xxxxxx>
-- Create date: <xxxxxx>
-- Description:	<Get Journal>
-- Last Update By:	<yo - 29 Nov 2013>
-- =============================================

CREATE procedure [dbo].[uspfn_SelectInventory4All]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@Status		varchar(50),
	@StartDate	smalldatetime,
	@EndDate	smalldatetime
as 

select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFEROUT' as TypeJournal
	 , TransferOutNo as DocNo
	 , TransferOutDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferOut
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and TransferOutDate between @StartDate and @EndDate
UNION
select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFERIN' as TypeJournal
	 , TransferInNo as DocNo
	 , TransferInDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferIn
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and TransferInDate between @StartDate and @EndDate
UNION
select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFEROUTMULTIBRANCH' as TypeJournal
	 , TransferOutNo as DocNo
	 , TransferOutDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferOutMultiBranch
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and convert(varchar, TransferOutDate, 112) between @StartDate and @EndDate
UNION
select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFERINMULTIBRANCH' as TypeJournal
	 , TransferInNo as DocNo
	 , TransferInDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferInMultiBranch
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and TransferInDate between @StartDate and @EndDate
GO

if object_id('uspfn_SelectLMPDtl') is not null
	drop procedure uspfn_SelectLMPDtl
GO
CREATE procedure [dbo].[uspfn_SelectLMPDtl] @CompanyCode varchar(15), @BranchCode varchar(15), @LmpNo varchar(15)  
as  
SELECT     
	row_number () OVER (ORDER BY spTrnSLmpDtl.CreatedDate ASC) AS NoUrut,
	spTrnSLmpDtl.PartNo,
	spTrnSLmpDtl.PartNoOriginal,
	spTrnSLmpDtl.DocNo, 
	CONVERT(VARCHAR, spTrnSLmpDtl.DocDate, 106) AS DocDate, 
	spTrnSLmpDtl.ReferenceNo, 
	spTrnSLmpDtl.QtyBill
	FROM spTrnSLmpDtl
	WHERE
	spTrnSLmpDtl.CompanyCode = @CompanyCode AND
	spTrnSLmpDtl.BranchCode = @BranchCode AND
	spTrnSLmpDtl.LmpNo = @LmpNo
GO

if object_id('uspfn_spAutomaticOrderSparepart') is not null
	drop procedure uspfn_spAutomaticOrderSparepart
GO
---------------------------------------------------------
-- AUTOMATIC ORDER SPAREPART, by Hasim... 24 January 2014
---------------------------------------------------------
-- uspfn_spAutomaticOrderSparepart '6006406','6006406'
--
CREATE procedure [dbo].[uspfn_spAutomaticOrderSparepart]
	@CompanyCode		varchar(15),
	@BranchCode			varchar(15)
as

BEGIN
  --declare @CompanyCode		varchar(15)
  --declare @BranchCode			varchar(15)
	declare @PartNo				varchar(20)
	declare @NewPartNo			varchar(20)
	declare @OldPart			varchar(20)
	declare @NewPart			varchar(20)
	declare @StartDate			varchar(06)
	declare @EndDate			varchar(06)
	declare @SupplierCode 		varchar(15)
	declare @SupplierCode0		varchar(15)
	declare @SupplierCode1		varchar(15)
	declare @SupplierCode2		varchar(15)
	declare @TPGO				varchar(15)
	declare @SuggorNo			varchar(15)
	declare @POSNo				varchar(15)
	declare @DocPre				varchar(15)
	declare @AOS1               varchar(50)
	declare @AOS2               varchar(50)
	declare @MessageText        varchar(50)
	declare @DocNum				integer
	declare @DocYear			integer
	declare @Counter     		integer
	declare @Switch      		integer
	declare @PeriodYear  		integer
	declare @PeriodMonth		integer
	declare @PeriodDate			date
	declare @SuggorDate			datetime
	declare @SeqNo              numeric( 3,0)
	declare @DAvgFac            numeric(07,2)
	declare @DevFac             numeric(07,2)
	declare @DiscPct			numeric(07,2)
	declare @PurchasePriceNett	numeric(18,0)
  --set @CompanyCode = '6006406'
  --set @BranchCode  = '6006406'
	set @SuggorDate  = getdate()
	set @PeriodYear  = year(getdate())
	set @PeriodMonth = month(getdate())
	set @Counter     = 0
	set @PeriodDate  = RIGHT('0000'+convert(varchar(4),@PeriodYear ),4) + '/'
                     + RIGHT('00'+convert(varchar(2),@PeriodMonth),2) + '/01'

    if isnull((select ParaValue from gnMstLookUpDtl
                where CompanyCode=@CompanyCode and CodeID='AOS' and LookUpValue='AUTO'),'0') = 0
       return

    if isnull((select ParaValue from gnMstLookUpDtl 
                where CompanyCode=@CompanyCode and CodeID='ORTP' and LookUpValue='8'),'')=''
       begin
          set @SeqNo = isnull((select max(SeqNo) from gnMstLookUpDtl where CompanyCode=@CompanyCode and CodeID='ORTP'),0) + 1
          insert into gnMstLookUpDtl
                     (CompanyCode, CodeID, LookUpValue, SeqNo, ParaValue, LookUpValueName, 
                      CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
               values(@CompanyCode, 'ORTP', '8', @SeqNo, '0', 'AOS (AUTOMATIC ORDER SPAREPART)',
                      'SIM',@SuggorDate,'SIM',@SuggorDate)
       end
                  
	if isnull((select top 1 1 from spTrnPSUGGORHdr
                where CompanyCode=@CompanyCode and BranchCode=@BranchCode and OrderType='8'
                  and convert(varchar,SuggorDate,111)=convert(varchar,@SuggorDate,111)),0) = 1
       return
	   
    set @DocYear     = (select isnull(DocumentYear,9988) from gnMstDocument with(nolock,nowait)
                         where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR')

    if @DocYear<>YEAR(@SuggorDate) return

    set @SupplierCode0 = isnull((select ParaValue from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
	 							    and CodeID      = 'AOS'
	 							    and LookupValue = '0'),'')
    set @SupplierCode1 = isnull((select ParaValue from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
 								    and CodeID      = 'AOS'
 								    and LookupValue = '1'),'')
    set @SupplierCode2 = isnull((select ParaValue from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
 								    and CodeID      = 'AOS'
 								    and LookupValue = '2'),'')
    set @DAvgFac       = isnull((select convert(numeric(6,2),ParaValue) from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
      							    and CodeID      = 'AOS'
    								and LookupValue = 'DAVGFAC'),50.00)
    set @DevFac        = isnull((select convert(numeric(6,2),ParaValue) from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
    							    and CodeID      = 'AOS'
    								and LookupValue = 'DevFac'),0.60)
  --set @DAvgFac       = 50.00
  --set @DevFac        = 0.60

    create table #Suggor 
 	    ( [CompanyCode]		[varchar](15  ),
	      [BranchCode]    	[varchar](15  ),
	      [PartNo]        	[varchar](20  ),
	      [NewPartNo]     	[varchar](20  ),
	      [SupplierCode]  	[varchar](20  ),
	      [ProductType]   	[varchar](15  ),
	      [PartCategory]  	[varchar]( 3  ),
	      [TypeOfGoods]   	[varchar]( 5  ),
	      [MovingCode]    	[varchar](15  ),
	      [ABCClass]      	[char]   ( 1  ),
	      [OnHand]        	[numeric](12,2),
	      [OnOrder]       	[numeric](12,2),
	      [InTransit]     	[numeric](12,2),
	      [AllocationSP]  	[numeric](12,2),
	      [AllocationSR]  	[numeric](12,2),
	      [AllocationSL]  	[numeric](12,2),
	      [BackOrderSP]   	[numeric](12,2),
	      [BackOrderSR]   	[numeric](12,2),
	      [BackOrderSL]   	[numeric](12,2),
	      [ReservedSP]    	[numeric](12,2),
	      [ReservedSR]    	[numeric](12,2),
	      [ReservedSL]    	[numeric](12,2),
	      [DemandAvg]     	[numeric](15,5),
	      [OrderPoint]    	[numeric](12,0),
	      [SafetyStock]   	[numeric](12,0),
	      [AvailableQty]  	[numeric](12,2),
	      [OrderUnit]     	[numeric](12,2),
	      [PurchasePrice] 	[numeric](18,0),
	      [CostPrice]     	[numeric](18,0)
        )

    insert into #Suggor
              ( CompanyCode, BranchCode, PartNo, NewPartNo, SupplierCode, ProductType, PartCategory, 
	 		    TypeOfGoods, MovingCode, ABCClass, OnHand, OnOrder, InTransit, AllocationSP, AllocationSR, 
	 		    AllocationSL, BackOrderSP, BackOrderSR, BackOrderSL, ReservedSP, ReservedSR, ReservedSL, 
	 		    DemandAvg, OrderPoint, SafetyStock, AvailableQty, OrderUnit, PurchasePrice, CostPrice)
         select i.CompanyCode, i.BranchCode, i.PartNo, i.PartNo NewPartNo, f.SupplierCode, i.ProductType, 
		        i.PartCategory, i.TypeOfGoods, i.MovingCode, i.ABCClass, i.OnHand, i.OnOrder, i.InTransit, 
			    i.AllocationSP, i.AllocationSR, i.AllocationSL, i.BackOrderSP, i.BackOrderSR, i.BackOrderSL, 
			    i.ReservedSP, i.ReservedSR, i.ReservedSL, i.DemandAverage DemandAvg, i.OrderPointQty OrderPoint, 
			    i.SafetyStockQty SafetyStock,(i.OnHand-i.AllocationSP-i.AllocationSR-i.AllocationSL) AvailableQty, 
			    OrderUnit = case when isnull(i.OrderUnit,0.00)=0.00 then 1.00 else i.OrderUnit end, 
			    p.PurchasePrice, p.CostPrice
           from spMstItems i
                inner join spMstItemInfo f
			   	        on f.CompanyCode = i.CompanyCode
		               and f.PartNo      = i.PartNo
				       and f.Status      = 1
				       and f.SupplierCode in (@SupplierCode0, @SupplierCode1, @SupplierCode2)
	            inner join spMstItemPrice p
				        on p.CompanyCode = i.CompanyCode
				       and p.BranchCode  = i.BranchCode
		               and p.PartNo      = i.PartNo 
		  where i.CompanyCode = @CompanyCode
		    and i.BranchCode  = @BranchCode
		    and i.Status      = 1
		    and i.TypeOfGoods in ('0','1','2') -- 0:SGP, 1:SGO, 2:SGA

    create table #t1 
	    ( [CompanyCode] 	[varchar](15  ),
	      [BranchCode]  	[varchar](15  ),
	      [PartNo]      	[varchar](20  ),
	      [NewPartNo]   	[varchar](20  ),
	      [Year]        	[numeric]( 4,0),
	      [Month]       	[numeric]( 2,0),
	      [DemandQty]     	[numeric](18,2)
        )

    while @Counter < 6
      begin
         set @Counter = @Counter + 1
         if @PeriodMonth > 1
            begin
               set @PeriodYear  = @PeriodYear
               set @PeriodMonth = @PeriodMonth-1
            end
         else 
            begin
               set @PeriodYear  = @PeriodYear-1
               set @PeriodMonth = 12
            end

         insert into #t1
              select CompanyCode, BranchCode, PartNo, PartNo NewPartNo, 
                     @PeriodYear Year, @PeriodMonth Month, 
                     isnull((select DemandQty from spHstDemandItem
                              where CompanyCode = #Suggor.CompanyCode
                                and BranchCode  = #Suggor.BranchCode
                                and Year        = @PeriodYear
                                and Month       = @PeriodMonth
                                and PartNo      = #Suggor.PartNo),0.00) as DemandQty
                from #Suggor     -- spMstItems
               where CompanyCode = @CompanyCode
                 and BranchCode  = @BranchCode
      end
      
    declare ITEM   cursor for
            select CompanyCode, BranchCode, PartNo, NewPartNo from #t1
             where exists (select top 1 1 from spMstItemMod
                            where CompanyCode = #t1.CompanyCode
                              and BranchCode  = #t1.BranchCode
                              and PartNo      = #t1.PartNo
                              and NewPartNo  <> #t1.PartNo
                              and InterChangeCode in ('11','21'))
             order by PartNo
    open  ITEM
    fetch next from ITEM into @CompanyCode, @BranchCode, @PartNo, @NewPartNo

    while @@fetch_status=0
      begin
         set @OldPart  = @PartNo
         set @Switch   = 0
         while @Switch = 0
            begin
               set @NewPart = (select top 1 NewPartNo from spMstItemMod x
                                where PartNo=@OldPart and InterChangeCode in ('11','21')
                                  and not exists (select 1 from spMstItemMod
                                                   where CompanyCode=x.CompanyCode
                                                     and PartNo=x.NewPartNo
                                                     and NewPartNo=x.PartNo))
               if  @NewPart is NULL
                   begin
                      set @Switch = 1
                      set @NewPart = @OldPart
                   end
               else
                      set @OldPart = @NewPart
            end
         update #t1     set NewPartNo=@NewPart where PartNo=@PartNo
         update #Suggor set NewPartNo=@NewPart where PartNo=@PartNo
         fetch next from ITEM into @CompanyCode, @BranchCode, @PartNo, @NewPartNo
      end
    close ITEM
    deallocate ITEM

    select * into #t2
      from ( select CompanyCode, BranchCode, NewPartNo, Year, Month, sum(DemandQty) DemandQty
               from #t1 
              group by CompanyCode, BranchCode, NewPartNo, Year, Month) #t2

    select * into #t3
      from ( select CompanyCode, BranchCode, NewPartNo, 
                    sum  (isnull(DemandQty,0.0))    DmnQty, 
                   (sum  (isnull(DemandQty,0.0)))/6 DmnAvg, 
                    stdev(isnull(DemandQty,0.0))    StdDev,
                    case when sum  (isnull(DemandQty,0.0)) = 0.0
                         then 0.0
                         else round((stdev(isnull(DemandQty,0.0)) / 
                                   ((sum  (isnull(DemandQty,0.0)))/6)),2)
                    end as DevFac,
                    max  (isnull(DemandQty,0.0))    MaxQty,
                    min  (isnull(DemandQty,0.0))    MinQty
               from #t2
              group by CompanyCode, BranchCode, NewPartNo ) #t3

    select * into #t4
      from ( select #t3.CompanyCode, #t3.BranchCode, #t3.NewPartNo, #Suggor.MovingCode, 
                    #Suggor.ABCClass, #Suggor.ProductType, #Suggor.PartCategory, 
                    #Suggor.TypeOfGoods, #Suggor.SupplierCode, 
                    #Suggor.CostPrice, #Suggor.PurchasePrice,
                    DmnQty6      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-6,@PeriodDate))
                                       and Month      =month(dateadd(mm,-6,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty5      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-5,@PeriodDate))
                                       and Month      =month(dateadd(mm,-5,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty4      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-4,@PeriodDate))
                                       and Month      =month(dateadd(mm,-4,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty3      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-3,@PeriodDate))
                                       and Month      =month(dateadd(mm,-3,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty2      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-2,@PeriodDate))
                                       and Month      =month(dateadd(mm,-2,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty1      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-1,@PeriodDate))
                                       and Month      =month(dateadd(mm,-1,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    OnHand       = (select sum(isnull(OnHand,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    OnOrder      = (select sum(isnull(OnOrder,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    InTransit    = (select sum(isnull(InTransit,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    AllocationSP = (select sum(isnull(AllocationSP,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),                                
                    AllocationSR = (select sum(isnull(AllocationSR,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    AllocationSL = (select sum(isnull(AllocationSL,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    BackOrderSP  = (select sum(isnull(BackOrderSP,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    BackOrderSR  = (select sum(isnull(BackOrderSR,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    BackOrderSL  = (select sum(isnull(BackOrderSL,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    ReservedSP   = (select sum(isnull(ReservedSP,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    ReservedSR   = (select sum(isnull(ReservedSR,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    ReservedSL   = (select sum(isnull(ReservedSL,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    999999999999.99 AvailableQty, #Suggor.OrderUnit, 
                    DmnQty, DmnAvg, StdDev, DevFac, MaxQty, MinQty,
                    LeadTime     = (select isnull(LeadTime,0.00) from spMstOrderParam
                                     where CompanyCode  = #t3.CompanyCode
                                       and BranchCode   = #t3.BranchCode
                                       and SupplierCode = case #Suggor.TypeOfGoods
                                                               when '0' then @SupplierCode0
                                                               when '1' then @SupplierCode1
                                                               when '2' then @SupplierCode2
                                                               else '***NO-ORDER***'
                                                          end
                                       and MovingCode   = 1),
                    OrderCycle   = (select isnull(OrderCycle,0.00) from spMstOrderParam
                                     where CompanyCode  = #t3.CompanyCode
                                       and BranchCode   = #t3.BranchCode
                                       and SupplierCode = case #Suggor.TypeOfGoods
                                                               when '0' then @SupplierCode0
                                                               when '1' then @SupplierCode1
                                                               when '2' then @SupplierCode2
                                                               else '***NO-ORDER***'
                                                          end
                                       and MovingCode   = 1),
                    SafetyStock  = (select isnull(SafetyStock,0.00) from spMstOrderParam
                                     where CompanyCode  = #t3.CompanyCode
                                       and BranchCode   = #t3.BranchCode
                                       and SupplierCode = case #Suggor.TypeOfGoods
                                                               when '0' then @SupplierCode0
                                                               when '1' then @SupplierCode1
                                                               when '2' then @SupplierCode2
                                                               else '***NO-ORDER***'
                                                          end
                                       and MovingCode   = 1),
                    999999999999.99 OrderPoint, 999999999999.99 SafetyStokPoint, 
                    999999999999.99 SuggorQty, 0 Status
               from #t3, #Suggor
              where #t3.CompanyCode=#Suggor.CompanyCode
                and #t3.BranchCode =#Suggor.BranchCode
                and #t3.NewPartNo  =#Suggor.PartNo
                and #Suggor.TypeOfGoods in ('0','1','2')) #t4 -- 0:SGP, 1:SGO, 2:SGA

    update #t4
       set AvailableQty    = (OnHand+OnOrder+InTransit)
                           - (AllocationSP+AllocationSR+AllocationSL
                           +  BackOrderSP +BackOrderSR +BackOrderSL
                           +  ReservedSP  +ReservedSR  +ReservedSL),
           OrderPoint      = ceiling(DmnAvg/30 * isnull((LeadTime+OrderCycle+SafetyStock),0.00)),
           SafetyStokPoint = ceiling(DmnAvg/30 * isnull(SafetyStock,0.00)),
           Status          = 1
    --where DmnAvg>=50.0 and DevFac<=0.6
      where DmnAvg>=@DAvgFac and DevFac<=@DevFac

    update #t4 
       set SuggorQty       = case when AvailableQty>0.00 and OrderPoint>AvailableQty 
                                  then ceiling((OrderPoint-AvailableQty)/OrderUnit) * OrderUnit
                                  else 0.00 
                             end,
           Status          = case when AvailableQty>0.00 and OrderPoint>AvailableQty 
                                  then 1 
                                  else 0 
                             end
     where Status = 1 

    if isnull((select COUNT(*) from #t4 where Status=1),0) = 0
       begin
           drop table #Suggor
	  	   drop table #t1
           drop table #t2
           drop table #t3
           drop table #t4
           return
       end
    select * from #t4 where Status=1 order by TypeOfGoods, SupplierCode, NewPartNo
      
  --insert to SUGGOR table   
    set @TPGO = ''
    set @AOS1 = ''
    set @AOS2 = ''

    declare @cur_NewPartNo       varchar(20)
    declare @cur_MovingCode      varchar(15)
    declare @cur_ABCClass        varchar(01)
    declare @cur_ProductType		varchar(15)
    declare @cur_PartCategory	varchar(03)
    declare @cur_TypeOfGoods		varchar(05)
    declare @cur_SupplierCode    varchar(20)
    declare @cur_CostPrice		numeric(18,2)
    declare @cur_PurchasePrice	numeric(18,2)
    declare @cur_OnHand          numeric(12,2)
    declare @cur_OnOrder         numeric(12,2)
    declare @cur_InTransit       numeric(12,2)
    declare @cur_AllocationSP    numeric(12,2)
    declare @cur_AllocationSR    numeric(12,2)
    declare @cur_AllocationSL    numeric(12,2)
    declare @cur_BackOrderSP     numeric(12,2)
    declare @cur_BackOrderSR     numeric(12,2)
    declare @cur_BackOrderSL     numeric(12,2)
    declare @cur_ReservedSP      numeric(12,2)
    declare @cur_ReservedSR      numeric(12,2)
    declare @cur_ReservedSL      numeric(12,2)
    declare @cur_AvailableQty    numeric(12,2)
    declare @cur_DmnAvg          numeric(15,5)
    declare @cur_OrderPoint      numeric(12,0)
    declare @cur_SafetyStokPoint numeric(12,0)
    declare @cur_SuggorQty       numeric(12,0)

    declare SUGGOR cursor for
            select NewPartNo, MovingCode, ABCClass, ProductType, PartCategory, TypeOfGoods, SupplierCode, 
                   CostPrice, PurchasePrice, OnHand, OnOrder, InTransit, AllocationSP, AllocationSR, 
                   AllocationSL, BackOrderSP, BackOrderSR, BackOrderSL, ReservedSP, ReservedSR, 
                   ReservedSL, AvailableQty, DmnAvg, OrderPoint, SafetyStokPoint, SuggorQty
              from #t4 where Status=1 order by TypeOfGoods, SupplierCode, NewPartNo
    open  SUGGOR
    fetch next from SUGGOR 
               into @cur_NewPartNo, @cur_MovingCode, @cur_ABCClass, @cur_ProductType, @cur_PartCategory, 
                    @cur_TypeOfGoods, @cur_SupplierCode, @cur_CostPrice, @cur_PurchasePrice, @cur_OnHand, 
                    @cur_OnOrder, @cur_InTransit, @cur_AllocationSP, @cur_AllocationSR, @cur_AllocationSL, 
                    @cur_BackOrderSP, @cur_BackOrderSR, @cur_BackOrderSL, @cur_ReservedSP, @cur_ReservedSR, 
                    @cur_ReservedSL, @cur_AvailableQty, @cur_DmnAvg, @cur_OrderPoint, @cur_SafetyStokPoint, 
                    @cur_SuggorQty

    while @@fetch_status=0
      begin
         if @TPGO<>@cur_TypeOfGoods or @SupplierCode<>@cur_SupplierCode
            begin
                set @Counter      = 0
                set @TPGO         = @cur_TypeOfGoods
                set @SupplierCode = @cur_SupplierCode
                -- setup nomor document for SUGGOR
                   set @DocPre    = (select isnull(DocumentPrefix,'XYZ') from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR')
                   set @DocNum    = (select isnull(DocumentSequence,999888) from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR')
                   if  @DocNum    = 999888  return
                   set @DocNum    = @DocNum + 1
                   update gnMstDocument set DocumentSequence = @DocNum
                    where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR'
                   set @SuggorNo  = @DocPre + '/' + right('00'+right(convert(varchar(4),year(@SuggorDate)),2),2)
                                            + '/' + right('000000'+(convert(varchar(6),@DocNum,6)),6)
                 --set @AOS1      = @AOS1 + case when @AOS1='' then @SuggorNo else ', ' + @SuggorNo end
                   set @AOS1      = @AOS1 + case when @AOS1='' then @SuggorNo else ', ' + right(@SuggorNo,6) end

                -- setup nomor document POS
                   set @DocPre    = (select isnull(DocumentPrefix,'XYZ') from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='POS')
                   set @DocNum    = (select isnull(DocumentSequence,999888) from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='POS')
                   if  @DocNum    = 999888  return
                   set @DocNum    = @DocNum + 1
                   update gnMstDocument set DocumentSequence = @DocNum
                    where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='POS'
                   set @POSNo     = @DocPre + '/' + right('00'+right(convert(varchar(4),year(@SuggorDate)),2),2)
                                            + '/' + right('000000'+(convert(varchar(6),@DocNum,6)),6)
                 --set @AOS2      = @AOS2 + case when @AOS2='' then @POSNo else ', ' + @POSNo end
                   set @AOS2      = @AOS2 + case when @AOS2='' then @POSNo else ', ' + right(@POSNo,6) end

                -- insert Suggor Header table
                   insert into spTrnPSUGGORHdr
                              (CompanyCode, BranchCode, SuggorNo, SuggorDate, TypeOfGoods, POSNo, 
                               POSDate, SupplierCode, ProductType, MovingCode, OrderType, Status, 
                               PrintSeq, IsVoid, CreatedBy, CreatedDate, LastUpdateBy, 
                               LastUpdateDate, isLocked, LockingBy, LockingDate)
                        values(@CompanyCode, @BranchCode, @SuggorNo, @SuggorDate, @TPGO, @POSNo, 
                               @SuggorDate, @SupplierCode, @cur_ProductType, 1, '8', 1, 0, 0,  -- OrderType = 8 - AOS
                               'AOS', @SuggorDate, 'AOS', @SuggorDate, '0', NULL, NULL)

                -- insert POS Header table
                   insert into spTrnPPOSHdr
                              (CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, IsBO, 
                               IsSubstution, isSuggorProcess, Remark, ProductType, PrintSeq, ExPickingSlipNo, 
                               ExPickingSlipDate, Status, Transportation, TypeOfGoods, isGenPORDD, isDeleted, 
                               CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
                               LockingDate, isDropSign, DropSignReffNo)
                        values(@CompanyCode, @BranchCode, @POSNo, @SuggorDate, @SupplierCode, '8', 1, 
                               1, 1, 'MACHINE ORDER', @cur_ProductType, 1, NULL, NULL, 2, 'AOS', @TPGO, 
                               0, 0, 'AOS', @SuggorDate, 'AOS', @SuggorDate, 0, NULL, NULL, 0, NULL)
            end

         -- insert Suggor Detail table
            set @Counter = @Counter + 1
            insert into spTrnPSUGGORDtl
                       (CompanyCode, BranchCode, SuggorNo, PartNo, SeqNo, OnHand, OnOrder, InTransit, 
                        AllocationSP, AllocationSR, AllocationSL, BackOrderSP, BackOrderSR, BackOrderSL, 
                        ReservedSP, ReservedSR, ReservedSL, DemandAvg, OrderPoint, SafetyStock, AvailableQty, 
                        SuggorQty, SuggorCorrecQty, ProductType, PartCategory, PurchasePrice, CostPrice, 
                        isExistInItems, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
                 values(@CompanyCode, @BranchCode, @SuggorNo, @cur_NewPartNo, @Counter, @cur_OnHand, 
                        @cur_OnOrder, @cur_InTransit, @cur_AllocationSP, @cur_AllocationSR, @cur_AllocationSL, 
                        @cur_BackOrderSP, @cur_BackOrderSR, @cur_BackOrderSL, @cur_ReservedSP, 
                        @cur_ReservedSR, @cur_ReservedSL, @cur_DmnAvg, @cur_OrderPoint, 
                        @cur_SafetyStokPoint, @cur_AvailableQty, @cur_SuggorQty, @cur_SuggorQty,
                        @cur_ProductType, @cur_PartCategory, @cur_PurchasePrice, @cur_CostPrice, 
                        1, 'AOS', @SuggorDate, 'AOS', @SuggorDate)

         -- insert POS Detail table
            set @DiscPct = (select isnull(DiscPct,0.00) from gnMstSupplierProfitCenter 
                             where CompanyCode      = @CompanyCode
                               and BranchCode       = @BranchCode 
                               and SupplierCode     = @cur_SupplierCode 
                               and ProfitCenterCode = '300')
            set @PurchasePriceNett = floor(@cur_PurchasePrice * (100.00 - @DiscPct) / 100)
            insert into spTrnPPOSDtl
                       (CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, 
                        PurchasePrice, DiscPct, PurchasePriceNett, CostPrice, TotalAmount, 
                        ABCClass, MovingCode, ProductType, PartCategory, CreatedBy, 
                        CreatedDate, LastUpdateBy, LastUpdateDate, Note)
                 values(@CompanyCode, @BranchCode, @POSNo, @cur_NewPartNo, @Counter, 
                        @cur_SuggorQty, @cur_SuggorQty, @cur_PurchasePrice, @DiscPct, 
                        @PurchasePriceNett, @cur_CostPrice, @cur_SuggorQty * @PurchasePriceNett,
                        @cur_ABCClass, @cur_MovingCode, @cur_ProductType, @cur_PartCategory, 
                        'AOS', @SuggorDate, 'AOS', @SuggorDate, 'AOS')

         -- insert Suggor Sub-detail table
            insert into spTrnPSUGGORSubDtl
                 select @CompanyCode, @BranchCode, @SuggorNo, @cur_NewPartNo, PartNo,
                        ROW_NUMBER() over (order by PartNo) as row,
                        I   = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-6,@PeriodDate))
                                  and Month       = month(dateadd(mm,-6,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        II  = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-5,@PeriodDate))
                                  and Month       = month(dateadd(mm,-5,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        III = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-4,@PeriodDate))
                                  and Month       = month(dateadd(mm,-4,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        IV  = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-3,@PeriodDate))
                                  and Month       = month(dateadd(mm,-3,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        V   = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-2,@PeriodDate))
                                  and Month       = month(dateadd(mm,-2,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        VI  = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-1,@PeriodDate))
                                  and Month       = month(dateadd(mm,-1,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        'AOS',@SuggorDate
                   from #Suggor
                  where CompanyCode = @CompanyCode
                    and BranchCode  = @BranchCode
                    and NewPartNo   = @cur_NewPartNo
                    
         -- insert order balance table
            insert into spTrnPOrderBalance
                       (CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
                        POSDate, OrderQty, OnOrder, InTransit, Received, Located, DiscPct, 
                        PurchasePrice, CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
                        CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
                 values(@CompanyCode, @BranchCode, @POSNo, @cur_SupplierCode, @cur_NewPartNo, @Counter, 
                        @cur_NewPartNo, @SuggorDate, @cur_SuggorQty, @cur_SuggorQty, 0.00, 0.00, 0.00, 
                        @DiscPct, @cur_PurchasePrice, @cur_CostPrice, @cur_ABCClass, @cur_MovingCode, 
                        NULL, NULL, @TPGO, 'AOS', @SuggorDate, 'AOS', @SuggorDate)

         -- update item master table
            update spMstItems 
               set OnOrder = OnOrder + @cur_SuggorQty
             where CompanyCode = @CompanyCode
               and BranchCode  = @BranchCode
               and PartNo      = @cur_NewPartNo

         fetch next from SUGGOR 
               into @cur_NewPartNo, @cur_MovingCode, @cur_ABCClass, @cur_ProductType, @cur_PartCategory, 
                    @cur_TypeOfGoods, @cur_SupplierCode, @cur_CostPrice, @cur_PurchasePrice, @cur_OnHand, 
                    @cur_OnOrder, @cur_InTransit, @cur_AllocationSP, @cur_AllocationSR, @cur_AllocationSL, 
                    @cur_BackOrderSP, @cur_BackOrderSR, @cur_BackOrderSL, @cur_ReservedSP, @cur_ReservedSR, 
                    @cur_ReservedSL, @cur_AvailableQty, @cur_DmnAvg, @cur_OrderPoint, @cur_SafetyStokPoint, 
                    @cur_SuggorQty
      end
    close SUGGOR
    deallocate SUGGOR
	 
    -- alert machine order
       set @Counter = isnull((select max(MessageID) from SysMessageBoards),0) + 1
       set @MessageText = 'AOS# ' + @AOS1 + '. ' + @AOS2
       insert into SysMessageBoards
                  (MessageID, MessageHeader, MessageText, MessageTo, MessageTarget, MessageParams, 
                   DateFrom, DateTo, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
            values(@Counter, 'MACHINE ORDER', @MessageText, 'ALL', '', NULL,
                   NULL, NULL, 'AOS', @SuggorDate, 'AOS', @SuggorDate)
       select top 1 * from SysMessageBoards order by MessageID desc
    
    drop table #Suggor
    drop table #t1
    drop table #t2
    drop table #t3
    drop table #t4

END

GO

if object_id('uspfn_spCheckOutsQty') is not null
	drop procedure uspfn_spCheckOutsQty
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spCheckOutsQty]
	(
		@CompanyCode varchar(50),
		@BranchCode varchar(50),
		@CustCode varchar(50),
		@TransType varchar(50),
		@SalesType varchar(50),
		@PartNoOri varchar(50)

	)
AS
BEGIN
	SELECT 
		spTrnSORDDtl.DocNo, 
		CONVERT(varchar,spTrnSORDHdr.DocDate, 106) AS DocDate,
		spTrnSORDDtl.PartNo,
		CONVERT(NUMERIC(18,2), 
		ISNULL(spTrnSORDDtl.QtyBO, 0)) AS QtyBO, 
		CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) AS QtyBoSupply,
		CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBO, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOOts,
		CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOCancel, 
		spTrnSORDDtl.PartNoOriginal 
	FROM spTrnSORDDtl 
	INNER JOIN spTrnSORDHdr ON spTrnSORDDtl.DocNo = spTrnSORDHdr.DocNo 
				AND spTrnSORDHdr.CustomerCode=@CustCode AND  spTrnSORDHdr.TransType = @TransType 
				AND spTrnSORDHdr.SalesType = @SalesType AND spTrnSORDHdr.Status >= 2 
				AND spTrnSORDHdr.CompanyCode=@CompanyCode AND spTrnSORDHdr.BranchCode = @BranchCode
	WHERE 
	ISNULL(spTrnSORDDtl.QtyBO, 0) - ISNULL(spTrnSORDDtl.QtyBOSupply, 0) - ISNULL(spTrnSORDDtl.QtyBOCancel, 0) > 0 
	AND spTrnSORDDtl.CompanyCode=@CompanyCode AND spTrnSORDDtl.BranchCode = @BranchCode AND spTrnSORDDtl.PartNoOriginal = @PartNoOri  
	ORDER BY spTrnSORDHdr.DocDate DESC 
END



GO

if object_id('uspfn_spCustRptRgs011') is not null
	drop procedure uspfn_spCustRptRgs011
GO
-- =============================================
-- Author:		David L.
-- Create date: 22 Sep 2014
-- Description:	Get Customer For Report Register 011 
--              (Report Register Penjualan Per Pelanggan (Tunai&Kredit))
-- =============================================
CREATE PROCEDURE uspfn_spCustRptRgs011 
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@DateFrom datetime,
	@DateTo datetime,
	@PartType varchar(2),
	@PaymentCode nchar(1)
AS
BEGIN
	declare @TOPC varchar(15)
	set @TOPC = 'TOPC'

	if(@PaymentCode = '0')
	begin	
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     = 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else if(@PaymentCode = '1')
	begin 
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     > 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else
	begin
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
END

GO

if object_id('uspfn_spGetDataOutstandingBO') is not null
	drop procedure uspfn_spGetDataOutstandingBO
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spGetDataOutstandingBO]
	(
	@CompanyCode varchar(50),
	@BranchCode varchar(50),
	@CustCode varchar(50),
	@TransType varchar(50),
	@TypeOfGoods varchar(50),
	@SalesType varchar(50),
	@ProductType varchar(50)
	)
AS
BEGIN
	SELECT 
		Convert(bit, 0) chkSelect 
		, spTrnSORDDtl.DocNo
		, CONVERT(NUMERIC(18,2),0) AS QtyBOProc
		, spTrnSORDHdr.DocDate
		, spTrnSORDDtl.PartNo
		, CONVERT(NUMERIC(18,2)
		, ISNULL(spTrnSORDDtl.QtyBO, 0)) AS QtyBO
		, CONVERT(NUMERIC(18,2)
		, ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) AS QtyBoSupply
		, CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBO, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOOts
		, CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOCancel
		, spTrnSORDDtl.PartNoOriginal 
	FROM spTrnSORDDtl 
	INNER JOIN spTrnSORDHdr ON spTrnSORDDtl.DocNo = spTrnSORDHdr.DocNo AND spTrnSORDHdr.CustomerCode=@CustCode AND
				spTrnSORDHdr.TransType = @TransType AND spTrnSORDHdr.SalesType = @SalesType AND spTrnSORDHdr.Status >= 2 AND
				spTrnSORDHdr.TypeOfGoods = @TypeOfGoods AND spTrnSORDHdr.CompanyCode=@CompanyCode AND spTrnSORDHdr.BranchCode = @BranchCode
    WHERE 
	ISNULL(spTrnSORDDtl.QtyBO, 0) -  ISNULL(spTrnSORDDtl.QtyBOSupply, 0) - ISNULL(spTrnSORDDtl.QtyBOCancel, 0) > 0 
	AND spTrnSORDDtl.CompanyCode=@CompanyCode AND spTrnSORDDtl.BranchCode = @BranchCode AND spTrnSORDDtl.ProductType = @ProductType  
	ORDER BY spTrnSORDHdr.DocDate DESC 
END


GO

if object_id('uspfn_spGetEmployeeAllBranchs') is not null
	drop procedure uspfn_spGetEmployeeAllBranchs
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spGetEmployeeAllBranchs]
	@CompanyCode varchar(15)
AS
BEGIN
	SELECT EmployeeID, EmployeeName
	FROM gnMstEmployee 
	WHERE CompanyCode = @CompanyCode
	AND TitleCode IN ('7','58')
	AND PersonnelStatus = '1'
	ORDER BY EmployeeName ASC
END


GO

if object_id('uspfn_spGetEmployeeBranchs') is not null
	drop procedure uspfn_spGetEmployeeBranchs
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spGetEmployeeBranchs]
	@CompanyCode varchar(15), 
	@BranchCode varchar(15)
AS
BEGIN
	 SELECT EmployeeID, EmployeeName
	FROM gnMstEmployee 
	WHERE CompanyCode =  @CompanyCode 
	AND BranchCode = @BranchCode
	AND TitleCode IN  ('7','58')
	AND PersonnelStatus = '1'
	ORDER BY EmployeeName ASC
END


GO

if object_id('uspfn_spGetSpTrnSBPSFDtl') is not null
	drop procedure uspfn_spGetSpTrnSBPSFDtl
GO
CREATE PROCEDURE uspfn_spGetSpTrnSBPSFDtl   
@CompanyCode varchar(15), @BranchCode varchar(15), @BPSFNo varchar(15)  
as  
select PartNo, PartNoOriginal, DocNo, DocDate, ReferenceNo, QtyBill from spTrnSBPSFDtl  
where CompanyCode = @CompanyCode and BranchCode = @BranchCode and BPSFNo = @BPSFNo  
GO

if object_id('uspfn_spMstCompanyAccountDtl2') is not null
	drop procedure uspfn_spMstCompanyAccountDtl2
GO
create procedure [dbo].[uspfn_spMstCompanyAccountDtl2] (@CompanyCode varchar(10) , @CompanyCodeTo varchar(10))
 as
SELECT [CompanyCode]
      ,[CompanyCodeTo]
      ,[TPGO]
      ,[TPGOName]
      ,[AccountNo]
      ,[AccountName]
FROM [sp_spMstCompanyAccountDtl]
where CompanyCode=@CompanyCode and CompanyCodeTo=@CompanyCodeTo
GO

if object_id('uspfn_SvClosingMonth') is not null
	drop procedure uspfn_SvClosingMonth
GO
-- =============================================
-- Author:		SDMS - David
-- Create date: 5 Feb 2015
-- Description:	Menututup bulan service
-- =============================================
CREATE PROCEDURE uspfn_SvClosingMonth
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@FiscalYear int,
	@FiscalMonth int,
	@PeriodeNum int,
	@NextFiscalYear int,
	@NextPeriodeNum int,
	@ProfitCenterCode varchar(20),
	@Month int
AS
BEGIN

    update gnMstPeriode
   set StatusService = '2'
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and FiscalYear = @FiscalYear
   and FiscalMonth = @FiscalMonth
   and PeriodeNum = @PeriodeNum

update gnMstPeriode
   set StatusService = '1'
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and FiscalYear = @NextFiscalYear
   and PeriodeNum = @NextPeriodeNum
   and FiscalMonth = @FiscalMonth

update gnMstCoProfileService 
   set FiscalYear = @NextFiscalYear
      ,FiscalPeriod = @NextPeriodeNum
      ,PeriodBeg = isnull((
            select FromDate from gnMstPeriode
             where CompanyCode = @CompanyCode
               and BranchCode = @BranchCode
               and FiscalYear = @NextFiscalYear
               and PeriodeNum = @NextPeriodeNum
               and FiscalMonth = @FiscalMonth
           ),0)
      ,PeriodEnd = isnull((
            select EndDate from gnMstPeriode
             where CompanyCode = @CompanyCode
               and BranchCode = @BranchCode
               and FiscalYear = @NextFiscalYear
               and PeriodeNum = @NextPeriodeNum
               and FiscalMonth = @FiscalMonth
           ),0)
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode

   IF (@Month = 12)
   BEGIN
   update gnMstDocument
   set DocumentYear = convert(int, @FiscalYear) + 1
      ,DocumentSequence = 0
      ,LastUpdateBy = 'closing_month'
      ,LastUpdateDate = GetDate()
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and ProfitCenterCode = @ProfitCenterCode
   and DocumentType <> 'LOT'
   END 
   
END

GO

if object_id('uspfn_SvInqFpjHQList') is not null
	drop procedure uspfn_SvInqFpjHQList
GO
Create procedure [dbo].[uspfn_SvInqFpjHQList]
	@CompanyCode nvarchar(20),
	@BranchCode nvarchar(20)

as

 select distinct
	trnFakturPajak.FPJNo
	, trnFakturPajak.FPJDate
	, (
		(	
			select top 1 InvoiceNo+' ('+substring(BranchCode,len(BranchCode)-1,3)+')'
			from svTrnInvoice 
			where CompanyCode = trnFakturPajak.CompanyCode 
				and FPJNo = trnFakturPajak.FPJNo 
				and isLocked = 1
			order by BranchCode,InvoiceNo
		) 
		+ ' s/d ' + 
		(	
			select top 1 InvoiceNo+' ('+substring(BranchCode,len(BranchCode)-1,3)+')'
			from svTrnInvoice 
			where CompanyCode = trnFakturPajak.CompanyCode 
				and FPJNo = trnFakturPajak.FPJNo 
				and isLocked = 1
			order by InvoiceNo,BranchCode desc
		)
	) as Invoice	
	, (
		select top 1 BranchCode 
		from svTrnInvoice 
		where CompanyCode = trnFakturPajak.CompanyCode  
			and FPJNo = trnFakturPajak.FPJNo 
			and isLocked = 1
		order by BranchCode, InvoiceNo
	) as BranchStart
    , (
		select top 1 BranchCode 
		from svTrnInvoice	
		where CompanyCode = trnFakturPajak.CompanyCode  
			and FPJNo = trnFakturPajak.FPJNo 
			and isLocked = 1
		order by BranchCode desc
	) as BranchEnd
	, (	trnFakturPajak.CustomerCode + ' - ' + 
		(
			select CustomerName 
			from gnMstCustomer
			where CompanyCode = trnFakturPajak.CompanyCode  and CustomerCode = trnFakturPajak.CustomerCode
		)
	) as Customer
	, (	trnFakturPajak.CustomerCodeBill + ' - ' + 
		(
			select CustomerName 
			from gnMstCustomer 
			where CompanyCode = trnFakturPajak.CompanyCode  and CustomerCode = trnFakturPajak.CustomerCodeBill
		)
	) as CustomerBill
from svTrnFakturPajak trnFakturPajak
left join svTrnInvoice trnInvoice on 
	trnInvoice.CompanyCode = trnFakturPajak.CompanyCode 
	--and trnInvoice.BranchCode = trnFakturPajak.BranchCode
	and trnInvoice.FPJNo = trnFakturPajak.FPJNo
	and trnInvoice.IsLocked=1
where 
    trnFakturPajak.CompanyCode = @CompanyCode
	and trnFakturPajak.BranchCode = @BranchCode
	and trnFakturPajak.FPJNo like 'FPH%' 
order by trnFakturPajak.FPJNo desc
 
 
  
  
GO

if object_id('uspfn_SvInqVehicleHistoryWSDS') is not null
	drop procedure uspfn_SvInqVehicleHistoryWSDS
GO
CREATE procedure [dbo].[uspfn_SvInqVehicleHistoryWSDS]
	 @CompanyCode varchar(20),
	 @BranchCode  varchar(20),
	 @PoliceRegNo varchar(20) = '',
	 @BasicModel  varchar(20) = '',
	 @CustomerCode varchar(20) = '',
	 @CustomerName varchar(20) = '',
	 @ChassisCode  varchar(20) = '',
	 @ChassisNo    varchar(20) = '',
	 @EngineCode  varchar(20) = '',
	 @EngineNo    varchar(20) = ''

as

select distinct convert(bit, '0') as IsSelect
     , a.PoliceRegNo
     , a.BasicModel
     , '' as TransmissionType
     , ltrim(rtrim(a.ChassisCode)) + ' ' + cast(a.ChassisNo as char) Chassis 
     , a.ChassisCode
     , cast(a.ChassisNo as varchar) as ChassisNo
     , ltrim(rtrim(a.EngineCode)) + ' ' + cast(a.EngineNo as char) Engine
     , '' as ServiceBookNo
     , '' as ColourCode
     , a.CustomerCode + ' - ' + b.CustomerName Customer
     , '' as FakturPolisiDate	
     , '' as LastServiceDate
     , '' as LastServiceOdometer
     , '' as Dealer
     , b.CustomerName
 from svHstVehicle a
 left join gnMstCustomer b with(nolock, nowait)
   on a.CompanyCode = b.CompanyCode
  and a.CustomerCode = b.CustomerCode
   and a.PoliceRegNo like ('%' + @PoliceRegNo + '%')
   and a.BasicModel like ('%' + @BasicModel + '%')
   and a.CustomerCode like ('%' + @CustomerCode + '%')
   and b.CustomerName like ('%' + @CustomerName + '%')
   and a.ChassisCode like ('%' + @ChassisCode + '%')
   and convert(varchar, a.ChassisNo) like ('%' + @ChassisNo + '%')
   and a.EngineCode like ('%' + @EngineCode + '%')
   and convert(varchar, a.EngineNo) like ('%' + @EngineNo  + '%')


GO

if object_id('uspfn_SvTrnCustVehicle') is not null
	drop procedure uspfn_SvTrnCustVehicle
GO
CREATE procedure [dbo].[uspfn_SvTrnCustVehicle]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ChassisCode varchar(15),
	@ChassisNo varchar (15),
	@TransPeriod DateTime
as  

select
    a.PoliceRegNo
   ,a.ServiceBookNo
   ,a.BasicModel
   ,a.TransmissionType
   ,a.ChassisCode
   ,a.ChassisNo
   ,a.EngineCode
   ,a.EngineNo
   ,a.ColourCode ColorCode
   ,rtrim(rtrim(a.ColourCode) +
    case isnull(f.RefferenceDesc2,'') when '' then '' else ' - ' end +
    isnull(f.RefferenceDesc2,'')) as ColorCodeDesc
   ,b.CustomerCode CustCode
   ,b.CustomerName CustName
   ,b.Address1 CustAddr1
   ,b.Address2 CustAddr2
   ,b.Address3 CustAddr3
   ,b.Address4 CustAddr4
   ,b.CityCode CustCityCode
   ,g.LaborDiscPct
   ,g.PartDiscPct
   ,g.MaterialDiscPct
   ,e.LookupValueName CustCityName
   ,b.PhoneNo
   ,b.FaxNo
   ,b.HPNo
   -- Contract No
   ,isnull(c.ContractNo,'') ContractNo
   ,case isnull(c.ContractNo,'') when '' then '' else c.EndPeriod end ContractEndPeriod
   ,c.IsActive ContractStatus
   ,case isnull(c.ContractNo,'')
      when '' then ''
      else (case c.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
    end ContractStatusDesc
   -- Club Code
   ,d.ClubCode
   ,case isnull(d.ClubCode,'') when '' then '' else a.ClubDateFinish end ClubEndPeriod
   ,d.IsActive ClubStatus
   ,case isnull(d.ClubCode,'')
      when '' then ''
      else (case d.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
    end ClubStatusDesc
   ,isnull(i.TaxCode,'') TaxCode
   ,isnull(j.TaxPct,0) TaxPct
  from svMstCustomerVehicle a with (nowait,nolock)
  left join gnMstCustomer b with (nowait,nolock)
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join svMstContract c with (nowait,nolock)
    on c.IsActive = 1
   and c.CompanyCode = a.CompanyCode
   and c.ContractNo = a.ContractNo
   and c.BeginPeriod <= @TransPeriod
  left join svMstClub d with (nowait,nolock)
    on d.IsActive = 1
   and d.CompanyCode = a.CompanyCode
   and d.ClubCode = a.ClubCode
  left join gnMstLookupDtl e with (nowait,nolock)
    on e.CompanyCode = a.CompanyCode
   and e.CodeID = 'CITY'
   and e.LookUpValue = b.CityCode
  left join omMstRefference f with (nowait,nolock)
    on f.CompanyCode = a.CompanyCode
   and f.RefferenceCode = 'COLO'
   and f.RefferenceCode = a.ColourCode
  left join gnMstCustomerProfitCenter g with (nowait,nolock)
    on g.CompanyCode = a.CompanyCode
   and g.BranchCode = @BranchCode
   and g.CustomerCode = a.CustomerCode
   and g.ProfitCenterCode = '200'
  left join gnMstCustomerProfitCenter i with (nowait,nolock)
    on i.CompanyCode = a.CompanyCode
   and i.BranchCode = @BranchCode
   and i.CustomerCode = a.CustomerCode
   and i.ProfitCenterCode = '200'
  left join gnMstTax j with (nowait,nolock)
    on j.CompanyCode = a.CompanyCode
   and j.TaxCode = i.TaxCode
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.ChassisCode = @ChassisCode
   and a.ChassisNo = @ChassisNo
   and a.ClubDateStart <= @TransPeriod
GO

if object_id('uspfn_TaxRecalculatePPN') is not null
	drop procedure uspfn_TaxRecalculatePPN
GO
 CREATE procedure [dbo].[uspfn_TaxRecalculatePPN]
	@CompanyCode nvarchar(15),
	@BranchCode nvarchar(15),
	@ProductType nvarchar(2),
	@PeriodYear int,
	@PeriodMonth int,
	@ProfitCenter nvarchar(15),
	@DocumentType nvarchar(2)

  as
  begin

update gnTaxPPN
set DPPStd=	(
            select 
                isnull(sum(DPPAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 1
        )
,DPPSdh= (
            select 
                isnull(sum(DPPAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 0
        )
,PPNStd= (
            select 
                isnull(sum(PPNAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 1
        )
,PPNSdh= (
            select 
                isnull(sum(PPNAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 0
        )
where
CompanyCode= @CompanyCode and BranchCode= @BranchCode
and ProductType= @ProductType and PeriodYear= @PeriodYear
and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
and TaxType= case when @DocumentType= 'F' then '3' else '4' end
end
GO

if object_id('uspfn_TaxUpdateTotal') is not null
	drop procedure uspfn_TaxUpdateTotal
GO
 CREATE procedure [dbo].[uspfn_TaxUpdateTotal]
	@CompanyCode nvarchar(25),
	@BranchCode nvarchar(25),
	@ProductType nvarchar(2),
	@Period datetime 

  as
  begin

update gnTaxPPN
set PPNStd= (
                isnull((	select	case when PPNStd > 0 then 0 else PPNStd end PPNStd
			                from	gnTaxPPN
			                where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(dateadd(month,-1,@Period))
					                and PeriodMonth = month(dateadd(month,-1,@Period)) 
					                and TaxType= '5'),0) +
                isnull((	select	sum(PPNStd)
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('1','2')),0)-
                isnull((	select	sum(PPNStd) 
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('3','4')),0)
            )
,PPNSdh= (
                isnull((	select	case when PPNSdh > 0 then 0 else PPNSdh end PPNSdh
			                from	gnTaxPPN
			                where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(dateadd(month,-1,@Period))
					                and PeriodMonth = month(dateadd(month,-1,@Period)) 
					                and TaxType= '5'),0) +
                isnull((	select	sum(PPNSdh)
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('1','2')),0)-
                isnull((	select	sum(PPNSdh) 
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('3','4')),0)
            )
from gnTaxPPN a
where
    CompanyCode= @CompanyCode
	AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    and ProductType= @ProductType and PeriodYear = year(@Period)
    and PeriodMonth = month(@Period) and TaxType = '5'
	end
GO

if object_id('usprpt_GnGenerateSeqTaxWoBranchUnion') is not null
	drop procedure usprpt_GnGenerateSeqTaxWoBranchUnion
GO
CREATE procedure [dbo].[usprpt_GnGenerateSeqTaxWoBranchUnion]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@StartDate as varchar(8)
	,@FPJDate as varchar(8)
	,@ProfitCenterCode as varchar(3)
	,@UserId as varchar(15)
	,@DocNo as varchar(5000)
AS
BEGIN

--declare @CompanyCode as varchar(15)
--	,@BranchCode as varchar(15)
--	,@StartDate as varchar(8)
--	,@FPJDate as varchar(8)
--	,@ProfitCenterCode as varchar(3)
--	,@UserId as varchar(15)
--	,@DocNo as varchar(5000)

--set @CompanyCode = '6115204001'
--set @BranchCode = '6115204301'
--set @StartDate = '20140901'
--set @FPJDate = '20140909'
--set @ProfitCenterCode = '300'
--set @UserId = 'ga'
--set @DocNo = '|6115204301 INV/14/102569|'

declare @IsUnion as varchar(1)
set @IsUnion = '0'

if(select count(LookUpValue) from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH') > 0
	set @IsUnion = '1'

declare @t_tax table(
	CompanyCode varchar(15)
	,BranchCode varchar(15)
	,ProfitCenterCode varchar(3)
	,DocNo varchar(15)
	,DocDate varchar(15)
	,DueDate datetime 
	,RefNo varchar(15)
	,RefDate datetime
	,TaxTransCode varchar(2)
	,CustomerCodeBill varchar(15)
)

if @ProfitCenterCode='' or @ProfitCenterCode='300'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '300' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, convert(varchar,DueDate,112) DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
						AND CustomerCode = a.CustomerCodeBill AND ProfitCenterCode = '300'
			) AS TaxTransCode
			, CustomerCodeBill
	FROM	SpTrnSFPJHdr a
	WHERE	CompanyCode = @CompanyCode  
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end) = BranchCode+' '+InvoiceNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|'+BranchCode+' '+InvoiceNo+'|%')
	GROUP BY CompanyCode, BranchCode, InvoiceNo, CustomerCodeBill,convert(varchar,InvoiceDate,112),convert(varchar,DueDate,112), CustomerCodeBill
end

if @ProfitCenterCode='' or @ProfitCenterCode='200'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '200' AS ProfitCenterCode, FPJNo AS DocNo, convert(varchar,FPJDate,112) AS DocDate, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = SVTrnFakturPajak.CompanyCode AND BranchCode = SVTrnFakturPajak.BranchCode 
						AND CustomerCode = SVTrnFakturPajak.CustomerCodeBill AND ProfitCenterCode = '200'
			) AS TaxTransCode
			, CustomerCodeBill
	FROM	SVTrnFakturPajak
	WHERE	CompanyCode = @CompanyCode 
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND IsLocked= 0
			AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+FPJNo end)=BranchCode+' '+FPJNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+FPJNo + '|%'
			)
end

if @ProfitCenterCode='' or @ProfitCenterCode='100'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '100' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = OmFakturPajakHdr.CompanyCode AND BranchCode = OmFakturPajakHdr.BranchCode 
						AND CustomerCode = OmFakturPajakHdr.CustomerCode AND ProfitCenterCode = '100') AS TaxTransCode
			, CustomerCode
	FROM	OmFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
		AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
			or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
		)
end

if @ProfitCenterCode='' or @ProfitCenterCode='000'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '000' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, DueDate
			, FPJNo AS RefNo, FPJDate AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = ARFakturPajakHdr.CompanyCode AND BranchCode = ARFakturPajakHdr.BranchCode 
						AND CustomerCode = ARFakturPajakHdr.CustomerCode AND ProfitCenterCode = '000'
			) AS TaxTransCode
			, CustomerCode
	FROM	ARFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode 
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
		AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
			or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
		)
end

select * into #f1
from (
	select row_number() over(order by a.BranchCode,a.DocDate,b.LookupValue,a.CustomerCodeBill,a.ProfitCenterCode asc) OrderNo,a.*,isnull(b.LookupValue,'')LookupValue
	from @t_tax a
	left join gnMstLookupDtl b on b.CompanyCode = a.CompanyCode
		and b.CodeID = 'FPJG'
		and b.LookupValue = a.CustomerCodeBill	
) #f1  order by LookupValue desc
		
SELECT	* INTO #f2 
FROM 
	( 
		SELECT  TaxCabCode 
		FROM	GnMstCoProfile  
		WHERE	CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
) #f2 

-- create FPJGovNo
select * into #f3 
from (
	select 
		a.OrderNo,a.CompanyCode,a.BranchCode,year(DocDate) PeriodTaxYear
		,month(DocDate) PeriodTaxMonth,ProfitCenterCode
		,DocDate as FPJGovDate,DocNo,convert(datetime,DocDate) DocDate,RefNo,RefDate,@UserId CreatedBy,getDate() CreatedDate
		,TaxTransCode
		,CustomerCodeBill
		,LookupValue
	from 
		#f1 a	
) #f3

--drop table #f3, #f1, #f2

if convert(varchar,@FPJDate,112) < '20130401'
begin
	select * into #f4 from(
		select * 		
			, LEFT(TaxTransCode+'000',3)+'.'+
			RIGHT('000'+isnull((select TaxCabCode from #f2),'000'),3)+'-'+
			RIGHT( isnull(convert(varchar(4),year(DocDate)),year(getDate())),2 )+'.'+ 
			RIGHT( '00000000'+convert(varchar,isnull(
												(select	isnull(FPJSeqNo,0)
												from	GnMstFPJSeqNo
												where	CompanyCode= a.CompanyCode and BranchCode= @BranchCode
														and Year= year(DocDate)
														and convert(varchar,EffectiveDate,112) < '20130401'), 0)+a.OrderNo
												),8 )FPJGovNo
			from #f3 a
	)#f4
	
	--insert to tabel GenerateTax
	insert into
		GnGenerateTax(
			CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
			FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	) 
	select 
		CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
		FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	from 
		#f4
	
	drop table #f1
	drop table #f2

	-- update Master Sequence
	update	GnMstFPJSeqNo
	set		FPJSeqNo = FPJSeqNo + isnull((select max(OrderNo) from #f4),0)
	from	GnMstFPJSeqNo
	where	CompanyCode= @CompanyCode and BranchCode= @BranchCode and Year= (select top 1 PeriodTaxYear from #f3)
	
	-- update Sparepart
	update	SPTrnSFPJHdr
	set		FPJGovNo= a.FPJGovNo
			,FPJSignature= a.FPJGovDate
	from	#f4 a, SPTrnSFPJHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Service
	update	SVTrnFakturPajak
	set		FPJGovNo= a.FPJGovNo
			,SignedDate= a.FPJGovDate
	from	#f4 a, SVTrnFakturPajak b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.FPJNo

	-- update Sales
	update	OmFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate 
	from	#f4 a, OmFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Finance
	update	ArFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate
	from	#f4 a, ArFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	--select top 1 convert(decimal,right(FPJGovNo,8)) from #f4 order by right(FPJGovNo,8) desc
	drop table #f3,#f4
end
else
begin
 ---------------------------------------------------------------------------------------------------
 --									Region Setelah Tanggal 1 April 2013                           --
 ---------------------------------------------------------------------------------------------------
	Declare @TotalFPJ				varchar(25)
	Declare @TotalFPJX				varchar(25)
	Declare @EndFPJ					varchar(25)
	Declare @CurrentFPJ				varchar(25)
	Declare @CountFPJNo				int
	Declare @CountUnValidFPJ		int
	Declare @CurrentDocNo			varchar(100)
	Declare @CurrentCompanyCode		varchar(15)
	Declare @CurrentBranchCode		varchar(15)
	Declare @CurrentTaxTransCode	varchar(2)
	Declare @CurrentCustCodeBill	varchar(15)			
			
	select * into #tblSeqNoFPJ from (
		select row_number() over(order by CompanyCode, BranchCode ,Year ,SeqNo asc) OrderNo, *
		  from GnMstFPJSeqNo with (NOLOCK, NOWAIT)
		 where CompanyCode = @CompanyCode 
			and 
			(
				(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
					or (case when @IsUnion = 1 then BranchCode end) = 
						(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
			)
			and Year = YEAR(getdate()) 
			and isActive = 1
			and EffectiveDate <= getdate()
			and isnull(BeginTaxNo,'') <> '' 
			and isnull(EndTaxNo,'') <> ''
	)#tblSeqNoFPJ	
				
	set @TotalFPJ = isnull((select TOP 1 FPJSeqNo from #tblSeqNoFPJ order by SeqNo Asc),'')
	set @EndFPJ = isnull((select TOP 1 EndTaxNo from #tblSeqNoFPJ order by SeqNo asc),'')
	set @CountFPJNo = (select SUM(convert(bigint,EndTaxNo) - convert(bigint,FPJSeqNo)) from #tblSeqNoFPJ where LEN(FPJSeqNo) <= 11) 			
						
	if (@TotalFPJ = '0' or @TotalFPJ = '')
	begin
		drop table #f1, #f2, #f3, #tblSeqNoFPJ
		raiserror('Tidak terdapat No Faktur Pajak yang aktif. Silahkan setting No Faktur Pajak terlebih dahulu',16 ,1);
		return
	end
	else
	begin
		if @CountFPJNo - isnull((select max(OrderNo) from #f1),0) < 0
		begin
			drop table #f1, #f2, #f3, #tblSeqNoFPJ
			raiserror('Faktur Pajak Aktif tidak mencukupi jumlah dokumen yang diperlukan. Silahkan setting No Faktur Pajak dengan no seq aktif selanjutnya.',16 ,1);
			return
		end
	end
	
	declare @Awal as bit
	declare @CCodeBill as varchar(15)
	set @Awal = 1	
									
	DECLARE temp CURSOR FOR
	SELECT	CompanyCode, BranchCode, DocNo, TaxTransCode, CustomerCodeBill
	FROM	#f3 

	OPEN temp
	FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode,@CurrentCustCodeBill
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		if @Awal = 1
		begin -- -1
			print 'Nothing to do'
			set @Awal = 0
			set @CCodeBill = @CurrentCustCodeBill
		end	--	-1		
		else
		begin	-- 0			
			if @CurrentCustCodeBill = (select top 1 LookupValue from gnMstLookupDtl where CompanyCode = @CurrentCompanyCode and CodeID = 'FPJG' and LookupValue = @CurrentCustCodeBill)
			begin --1
				if @CCodeBill = @CurrentCustCodeBill
				begin
					print @CurrentFPJ + ' for ' + @CurrentCustCodeBill				
				end
				else
				begin
					print 'update ' + convert(varchar, convert(bigint,@TotalFPJ) + 1)
					-- update Master Sequence
					if convert(bigint,@TotalFPJ) + 1 < convert(bigint,@EndFPJ)
					begin
						update	GnMstFPJSeqNo
						set		FPJSeqNo = convert(bigint,@TotalFPJ) + 1
						where	CompanyCode= @CompanyCode
							and 
							(
								(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
							)
						  and	Year = YEAR(getdate())
						  and	SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
											and 
											(
												(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
											)
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end
					else
					begin
						update GnMstFPJSeqNo
						set FPJSeqNo = convert(bigint,@TotalFPJ) + 1, isActive = 0
						where CompanyCode = @CompanyCode
							and 
							(
								(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
							)
						  and Year = YEAR(getdate())
						  and SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
											and 
											(
												(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
											)
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end
				end
			end
			else
			begin
				if @CCodeBill = @CurrentCustCodeBill
				begin
					print @CurrentFPJ + ' for ' + @CurrentCustCodeBill					
				end
				else
				begin					
					print 'update ' + convert(varchar, convert(bigint,@TotalFPJ) + 1)
					 --update Master Sequence
					if convert(bigint,@TotalFPJ) + 1 < convert(bigint,@EndFPJ)
					begin --3
						update	GnMstFPJSeqNo
						set		FPJSeqNo = convert(bigint,@TotalFPJ) + 1
						where	CompanyCode= @CompanyCode
						  and	(
									(case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								) 
						  and	Year = YEAR(getdate())
						  and	SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
										  and	(
													(case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
												) 
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end --3
					else
					begin --4
						update GnMstFPJSeqNo
						set FPJSeqNo = convert(bigint,@TotalFPJ) + 1, isActive = 0
						where CompanyCode = @CompanyCode
						  and	(
									(case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								) 
						  and Year = YEAR(getdate())
						  and SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
										  and	(
													(case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
												) 
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end --4
				end				
			end
		end
		
		set @CCodeBill = @CurrentCustCodeBill
		set @TotalFPJ =   (select FPJSeqNo
							  from GnMstFPJSeqNo
							 where CompanyCode = @CompanyCode 
								and 
								(
									(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
										or (case when @IsUnion = 1 then BranchCode end) = 
											(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								)
							   and Year = YEAR(getdate()) 
							   and isActive = 1
							   and EffectiveDate <= getdate()
							   and isnull(BeginTaxNo,'') <> '' 
							   and isnull(EndTaxNo,'') <> ''
							   and SeqNo = (select MIN(SeqNo)
											  from GnMstFPJSeqNo 
											 where CompanyCode = @CompanyCode 
												and 
												(
													(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
														or (case when @IsUnion = 1 then BranchCode end) = 
															(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
												)
												and Year = YEAR(getdate()) 
												and isActive = 1 
												and EffectiveDate <= getdate()
												and isnull(BeginTaxNo,0) <> 0 
												and isnull(EndTaxNo,0) <> 0))
		set @EndFPJ = (select EndTaxNo
							  from GnMstFPJSeqNo
							 where CompanyCode = @CompanyCode 
								and 
								(
									(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
										or (case when @IsUnion = 1 then BranchCode end) = 
											(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								)
								and Year = YEAR(getdate()) 
							   and isActive = 1
							   and EffectiveDate <= getdate()
							   and isnull(BeginTaxNo,'') <> '' 
							   and isnull(EndTaxNo,'') <> ''
							   and SeqNo = (select MIN(SeqNo)
											  from GnMstFPJSeqNo 
											 where CompanyCode = @CompanyCode 
											   and BranchCode = @BranchCode
											   and Year = YEAR(getdate()) 
											   and isActive = 1 
											   and EffectiveDate <= getdate()
											   and isnull(BeginTaxNo,0) <> 0 
											   and isnull(EndTaxNo,0) <> 0))
											   
     
        set @TotalFPJX  = RIGHT('00000000000'+convert(varchar(11),@TotalFPJ),11)
		set @CurrentFPJ = (select LEFT (convert(varchar,@CurrentTaxTransCode) + '000',3)+'.'+
						   	      LEFT (convert(varchar,@TotalFPJX),3) + '-' +
								  RIGHT(convert(varchar,YEAR(getdate())),2) + '.' +
								  RIGHT('00000000'+convert(varchar,(convert(bigint,@TotalFPJ)+1)),8))											  		
		
		--insert to tabel GenerateTax
		insert into
			GnGenerateTax(
				CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
				FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
		) 
		select 
			CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode
			, @CurrentFPJ FPJGovNo
			, FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
		from 
			#f3
		where CompanyCode = @CurrentCompanyCode
		  and BranchCode = @CurrentBranchCode
		  and DocNo = @CurrentDocNo
		  and TaxTransCode = @CurrentTaxTransCode			
			  						
			---- update Sparepart
			update	SPTrnSFPJHdr
			set		FPJGovNo= @CurrentFPJ
					,FPJSignature= a.FPJGovDate
			from	#f3 a, SPTrnSFPJHdr b
			where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo 
				and b.CompanyCode = @CurrentCompanyCode and b.BranchCode = @CurrentBranchCode and b.InvoiceNo = @CurrentDocNo

			-- update Service
			update	SVTrnFakturPajak
			set		FPJGovNo= @CurrentFPJ
					,SignedDate= a.FPJGovDate
			from	#f3 a, SVTrnFakturPajak b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.FPJNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.FPJNo = @CurrentDocNo

			-- update Sales
			update	OmFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.FPJGovDate 
			from	#f3 a, OmFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo

			-- update Finance
			update	ArFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.FPJGovDate
			from	#f3 a, ArFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo
				
			FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode,@CurrentCustCodeBill
		END
	CLOSE temp
	DEALLOCATE temp

	declare @countLoop as int = 0
	set @countLoop = (SELECT COUNT(*) FROM #f3)
	IF @countLoop = 1
	begin --4
		update GnMstFPJSeqNo
		set FPJSeqNo = convert(bigint,@TotalFPJ) + 1, isActive = 0
		where CompanyCode = @CompanyCode
		  and	(
					(case when @IsUnion = 0 then BranchCode end)= @BranchCode
					or (case when @IsUnion = 1 then BranchCode end) = 
						(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
				) 
		  and Year = YEAR(getdate())
		  and SeqNo = (select MIN(SeqNo)
						   from GnMstFPJSeqNo 
						  where CompanyCode = @CompanyCode 
						  and	(
									(case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								) 
							and Year = YEAR(getdate())
							and isActive = 1
							and EffectiveDate <= getdate()
							and isnull(BeginTaxNo,0) <> 0 
							and isnull(EndTaxNo,0) <> 0)
	end --4
					
	--select convert(varchar,convert(bigint,@TotalFPJ) + 1) FPJGovNo	
	drop table #f1, #f2, #f3, #tblSeqNoFPJ		
end	
	-- update TransDate Sparepart
	update GnMstCoProfileSpare 
	set TransDate = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDate, 112) < @FPJDate

	-- update TransDate Service
	update GnMstCoProfileService 
	set TransDate = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDate, 112) < @FPJDate 

	-- update TransDate Sales
	update GnMstCoProfileSales 
	set TransDate = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDate, 112) < @FPJDate 

	-- update TransDate Finance
	update GnMstCoProfileFinance 
	set TransDateAR = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDateAR, 112) < @FPJDate
	
END

GO

if object_id('usprpt_OmRpSalRgs033C') is not null
	drop procedure usprpt_OmRpSalRgs033C
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE usprpt_OmRpSalRgs033C 
	@companycode varchar(max),
	@branchcode varchar(max),
	@period1 varchar(max),
	@period2 varchar(max),
	@tipe varchar(1)
AS
BEGIN
	declare @1 varchar(max)
	declare @2 int
	declare @seq int
	declare @columns varchar(max)
	declare @columns2 varchar(max)
	declare @columns3 varchar(max)
	declare @query varchar(max)

	-- TABLE I --
	select companygovname company, isnull(address1,'-') addr1, isnull(address2,'-') addr2, isnull(address3,'-') addr3, phoneno telp 
	from gnmstcoprofile where companycode = @companycode and branchcode = @branchcode

	-- TABLE II --
	select distinct convert(varchar, right(branchcode,2)) code from gnmstorganizationdtl where companycode = @companycode
	
	if(@tipe='A')

	begin
	-- TABLE III --

	--declare @1 varchar(max)
	--declare @2 int
	--declare @seq int
	--declare @columns varchar(max)
	--declare @columns2 varchar(max)
	--declare @columns3 varchar(max)
	--declare @query varchar(max)

	set @columns = ''
	set @columns2 = ''
	set @columns3 = ''

	set @2 = (select count(*) from gnmstorganizationdtl)
	set @seq = 1

	declare data cursor for
		select distinct cast(right(branchcode,2) as varchar) code from gnmstorganizationdtl
	open data
	fetch next from data into @1
	while @@fetch_status = 0 
	begin
		set @columns = @columns+'['+@1+']'	
		set @columns2 = @columns2+'isnull(['+@1+'],0) ['+@1+']'
		set @columns3 = @columns3+'isnull(['+@1+'],0)'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columns = @columns+', '
			set @columns2 = @columns2+', '
			set @columns3 = @columns3+'+'
		end
	 
		fetch next from data into @1
	end
	close data
	deallocate data

	set @columns2 = @columns2+', '+@columns3+' as Total'

	set @query = '
	select model, '+@columns2+'
	from (
		select code,model,sum(nilai) nilai
		from (
			select cast(right(a.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = '''+@companycode+''' 
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between '''+@period1+''' and '''+@period2+'''
			group by a.BranchCode, ltrim(c.salesmodeldesc)
			union ALL
			select cast(right(e.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = '''+@companycode+''' 
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between '''+@period1+''' and '''+@period2+'''
			group by e.BranchCode, ltrim(c.salesmodeldesc)
		) x
		group by code,model
	)p pivot
	(
	sum(nilai) for code in ('+@columns+')
	) as pvt 
	'
	print (@query)
	exec (@query)
	end
	
	else
	begin
		-- TABLE III --
	--declare @1 varchar(max)
	--declare @2 int
	--declare @seq int
	--declare @columns varchar(max)
	--declare @columns2 varchar(max)
	--declare @columns3 varchar(max)
	--declare @query varchar(max)

	set @columns = ''
	set @columns2 = ''
	set @columns3 = ''

	set @2 = (select count(*) from gnmstorganizationdtl)
	set @seq = 1

	declare data cursor for
		select distinct cast(right(branchcode,2) as varchar) code from gnmstorganizationdtl
	open data
	fetch next from data into @1
	while @@fetch_status = 0 
	begin
		set @columns = @columns+'['+@1+']'	
		set @columns2 = @columns2+'isnull(['+@1+'],0) ['+@1+']'
		set @columns3 = @columns3+'isnull(['+@1+'],0)'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columns = @columns+', '
			set @columns2 = @columns2+', '
			set @columns3 = @columns3+'+'
		end
	 
		fetch next from data into @1
	end
	close data
	deallocate data

	set @columns2 = @columns2+', '+@columns3+' as Total'

	set @query = '
	select model, '+@columns2+'
	from (
		select code,model,sum(nilai) nilai
		from (
			select cast(right(a.branchcode,2) as varchar) code
				, ltrim(a.salesmodelcode) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = '''+@companycode+''' 
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between '''+@period1+''' and '''+@period2+'''
			group by a.BranchCode, a.salesmodelcode
			union
			select cast(right(e.branchcode,2) as varchar) code
				, ltrim(e.salesmodelcode) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = '''+@companycode+''' 
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between '''+@period1+''' and '''+@period2+'''
			group by e.BranchCode, e.salesmodelcode
		) x
		group by code,model
	)p pivot
	(
	sum(nilai) for code in ('+@columns+')
	) as pvt 
	'
	print (@query)
	exec (@query) 
	end
	
	
	-- Table IV --
	select distinct cast(right(branchcode,2) as varchar)+' : '+branchname keterangan from gnmstorganizationdtl 
		where companycode = @companycode

	-- Table V -- Total Per Branch
	set @query = '
	select '+@columns2+'
	from (
		select code,sum(nilai) nilai
		from (
			select cast(right(a.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = '''+@companycode+''' 
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between '''+@period1+''' and '''+@period2+'''
			group by a.BranchCode, a.salesmodelcode, c.salesmodeldesc
			union ALL
			select cast(right(e.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = '''+@companycode+''' 
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between '''+@period1+''' and '''+@period2+'''
			group by e.BranchCode, e.salesmodelcode, c.salesmodeldesc
		) x
		group by code
	)p pivot
	(
	sum(nilai) for code in ('+@columns+')
	) as pvt 
	'
	print (@query)
	exec (@query)
END

GO

if object_id('usprpt_OmRpSalRgs033D') is not null
	drop procedure usprpt_OmRpSalRgs033D
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usprpt_OmRpSalRgs033D]
	(
	@companycode varchar(max),
	@branchcode varchar(max),
	@period1 varchar(max),
	@period2 varchar(max),
	@ID int,
	@tipe varchar(1)
	)
AS
BEGIN
	
	if(@tipe='A')
		begin
			--table 1--
			insert into TempDailySales1
			select @ID, CompanyCode Company, BranchCode Branch, BranchName 
			from gnmstorganizationdtl where companycode = @companycode order by BranchCode;

			--table 2--
			insert into TempDailySales2
			select @ID ,a.CompanyCode Company
							, a.branchcode Branch
							, ltrim(isnull(c.salesmodeldesc,'')) Model
							, isnull(count(a.invoiceno),0) Nilai
						from omtrsalesinvoicevin a
						inner join omtrsalesinvoice b on b.companycode = a.companycode 
							and b.branchcode = a.branchcode
							and b.invoiceno = a.invoiceno 
						left join ommstmodel c on c.companycode = a.companycode 
							and c.salesmodelcode = a.salesmodelcode	
						where a.companycode = @companycode
							and b.status in (2,5)
							and convert(varchar, b.invoicedate, 112) between @period1 and @period2
						group by a.CompanyCode, a.BranchCode, ltrim(isnull(c.salesmodeldesc,''))
						union all
						select @ID,d.CompanyCode Company
							, e.branchcode Branch
							, ltrim(isnull(c.salesmodeldesc,'')) Model
							, isnull(sum(e.quantity),0)*-1 Nilai
						from omtrsalesreturn d
						left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
							and d.branchcode = e.branchcode
							and d.returnno = e.returnno 
						left join ommstmodel c on c.companycode = e.companycode 
							and c.salesmodelcode = e.salesmodelcode	
						where d.companycode =  @companycode
							and d.status in (2,5)
							and convert(varchar, d.returndate, 112) between @period1 and @period2
						group by d.CompanyCode, e.BranchCode, ltrim(isnull(c.salesmodeldesc,'')) ;
			end
	else
		begin
			--table 1--
			insert into TempDailySales1
			select @ID, CompanyCode Company, BranchCode Branch, BranchName 
			from gnmstorganizationdtl where companycode = @companycode order by BranchCode;

			--table 2--
			insert into TempDailySales2
			select @ID,a.CompanyCode Company
                        , a.branchcode Branch
                        , ltrim(a.salesmodelcode) Model
                        , isnull(count(a.invoiceno),0) Nilai
                    from omtrsalesinvoicevin a
                    inner join omtrsalesinvoice b on b.companycode = a.companycode 
                        and b.branchcode = a.branchcode
                        and b.invoiceno = a.invoiceno 
                    left join ommstmodel c on c.companycode = a.companycode 
                        and c.salesmodelcode = a.salesmodelcode	
                    where a.companycode = @companycode
                        and b.status in (2,5)
                        and convert(varchar, b.invoicedate, 112)  between @period1 and @period2
                    group by a.CompanyCode, a.BranchCode, ltrim(a.salesmodelcode)
                    union all
                    select @ID , d.CompanyCode Company
                        , e.branchcode Branch
                        , ltrim(e.salesmodelcode) Model
                        , isnull(sum(e.quantity),0)*-1 Nilai
                    from omtrsalesreturn d
                    left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
                        and d.branchcode = e.branchcode
                        and d.returnno = e.returnno 
                    left join ommstmodel c on c.companycode = e.companycode 
                        and c.salesmodelcode = e.salesmodelcode	
                    where d.companycode = @companycode
                        and d.status in (2,5)
                        and convert(varchar, d.returndate, 112) between @period1 and @period2
                    group by d.CompanyCode, e.BranchCode, ltrim(e.salesmodelcode)  ;
		end

	-- TABLE I --
	select companygovname company, isnull(address1,'-') addr1, isnull(address2,'-') addr2, isnull(address3,'-') addr3, phoneno telp 
	from gnmstcoprofile where companycode = @companycode and branchcode = @branchcode

	-- TABLE II --
	select * into #tBranch from (
	select distinct companycode company, branchcode branch from gnmstorganizationdtl where companycode = @companycode
	union all
	select company, branch from TempDailySales1 where ID=@ID) #tBranch
	
	select * from #tBranch order by company, branch 
	
	declare @tabModel AS table
	(
		company varchar(50),
		branch varchar(50),
		model varchar(max),
		nilai int
	)
	
	if (@tipe ='A')
	begin
		insert into @tabModel 
			select a.CompanyCode company
				, a.branchcode branch
				, ltrim(isnull(c.salesmodeldesc,'')) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = @companycode
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between @period1 and @period2
			group by a.CompanyCode, a.BranchCode, ltrim(isnull(c.salesmodeldesc,''))
			union all
			select d.CompanyCode company
				, e.branchcode branch
				, ltrim(isnull(c.salesmodeldesc,'')) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = @companycode
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between @period1 and @period2
			group by d.CompanyCode, e.BranchCode, ltrim(isnull(c.salesmodeldesc,''))
				
		insert into @tabModel
			select company, branch, model, nilai from TempDailySales2 where ID=@ID		
	end
	else
	begin
		insert into @tabModel 
			select a.CompanyCode company
				, a.branchcode branch
				, ltrim(a.salesmodelcode) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = @companycode
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between @period1 and @period2
			group by a.CompanyCode, a.BranchCode, ltrim(a.salesmodelcode)
			union all
			select d.CompanyCode company
				, e.branchcode branch
				, ltrim(e.salesmodelcode) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = @companycode
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between @period1 and @period2
			group by d.CompanyCode, e.BranchCode, ltrim(e.salesmodelcode)
	
		insert into @tabModel
			select company, branch, model, nilai from TempDailySales2 where ID=@ID
	end
	
	select * into #tModel from (
		select * from @tabModel 
	) #tModel	
	
	-- Per Branch --
	----------------
	declare @1 varchar(max)
	declare @2 int
	declare @seq int
	declare @columns varchar(max)
	
	declare @colResult varchar(max)
	declare @columnsResult2 varchar(max)
	
	declare @columns2 varchar(max)
	declare @columns3 varchar(max)
	declare @columns4 varchar(max)
	declare @query varchar(max)

	set @columns = ''
	set @columns2 = ''
	set @columns3 = ''
	set @columns4 = ''

	set @2 = (select count(*) from #tBranch)
	set @seq = 1

	declare data cursor for
		select distinct branch from #tBranch
	open data
	fetch next from data into @1
	while @@fetch_status = 0 
	begin
		set @columns = @columns+'['+@1+']'	
		set @columns2 = @columns2+'isnull(['+@1+'],0) ['+@1+']'
		set @columns3 = @columns3+'isnull(['+@1+'],0)'
		set @columns4 = @columns4+'isnull(a.['+@1+'],0)'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columns = @columns+','
			set @columns2 = @columns2+', '
			set @columns3 = @columns3+'+'
			set @columns4 = @columns4+'+'
		end	 
		fetch next from data into @1
	end
	close data
	deallocate data;

	--set @columns2 = @columns3
	set @columns2 = @columns3+' AS GRAND TOTAL'+','+@columns2
	
	-- Per Company --
	-----------------
	declare @columnsSub varchar(max)
	declare @columnsSubDesc varchar(max)
	declare @columnsSub2 varchar(max)
	
	set @columnsSub = ''
	set @columnsSubDesc = ''
	set @columnsSub2 = ''
	
	set @2 = (select count( distinct company) from #tBranch)
	set @seq = 1

	declare dataCom cursor for
		select distinct company from #tBranch
	open dataCom
	
	fetch next from dataCom into @1
	while @@fetch_status = 0 
	begin
		set @columnsSub = @columnsSub+'['+@1+']'	
		set @columnsSubDesc = @columnsSubDesc+'['+@1+'] as Total ('+@1+')'	
		set @columnsSub2 = @columnsSub2+'isnull(['+@1+'],0) ['+@1+']'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columnsSub = @columnsSub+', '
			set @columnsSubDesc = @columnsSubDesc+', '
			set @columnsSub2 = @columnsSub2+', '
		end	 
		fetch next from dataCom into @1
	end
	close dataCom
	deallocate dataCom
	
	declare data1 cursor for
		select distinct company from #tBranch order by company
	
	declare @var1 varchar(max)
	declare @var2 varchar(max)
	set @colResult=''
	
	open data1
	fetch next from data1 into @var1
	while @@fetch_status=0
	begin
		declare @tot int
		set @tot = (select count(branch) from #tBranch where company=@var1)		
		set @seq=1
		
		declare data2 cursor for
			select branch from #tBranch where company=@var1 order by branch			
		open data2
		fetch next from data2 into @var2
		while @@fetch_status=0
		begin
			set @colResult = @colResult+'a.['+@var2+']'
			
			set @seq=@seq+1			
			if (@seq<=@tot)
				set @colresult=@colresult+','
			else
				set @colresult=@colresult+',b.['+@var1+'] as TOTAL ['+@var1+'],'
				
			fetch next from data2 into @var2
		end
		close data2
		deallocate data2		
		fetch next from data1 into @var1
	end
	
	close data1
	deallocate data1
	
	set @colResult = (select left(@colResult,len(@colResult)-1))
	
	-- TABLE III --	
	set @query = '
	select * into #tbl1 from (
	select model, '''+@columns2+null+'''
	from (
		select branch, model, sum(nilai) nilai
		from (
			select * from #tModel
		) x
		group by branch, model
	)p pivot
	(
		sum(nilai) for branch in ('''+@columns+null+''')
	)AS pvt 
	)#tbl1	
	
	select * into #tbl2 from (
	select model, '''+@columnsSub2+'''
	from (
		select company, model, sum(nilai) nilai
		from (
			select * from #tModel
		) x
		group by company, model 
	)p pivot
	(
		sum(nilai) for company in ('''+@columnsSub+''')
	) AS pvt 
	)#tbl2
	
	select a.model, '''+@columns4+''' as ''GRAND TOTAL'''+', '''+@colResult+'''
	from #tbl1 a
	left join #tbl2 b on a.model=b.model	
	
	drop table #tbl1
	drop table #tbl2
	'
	print (@query)
	exec (@query)
	
	-- Table IV --
	select branchcode+' : '+branchname keterangan from gnmstorganizationdtl 
		where companycode = @companycode
	union
	select Branch+' : '+BranchName keterangan from TempDailySales1 

	-- Table V -- Total Per Branch
	set @query = 'select '''+@columns2+null+'''
	from (
		select branch, sum(nilai) nilai
		from (
			select * from #tModel
		) x
		group by branch
	)p pivot
	(
	sum(nilai) for branch in ('''+@columns+null+''')
	) AS pvt '
	print (@query)
	exec (@query)
	
	-- Table VI --
	select company, sum(nilai) nilai from #tModel group by company order by company
	
	drop table #tBranch
	drop table #tModel
	
	delete TempDailySales1 where ID=@ID
	delete TempDailySales2 where ID=@ID

END


GO

if object_id('usprpt_SpCheckType') is not null
	drop procedure usprpt_SpCheckType
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE usprpt_SpCheckType
	@Type varchar(50)
AS
BEGIN
	declare @Query varchar(MAX)
	set @Query='
	select LookUpValue,LookUpValueName  
	from GnMstLookUpDtl 
	where CodeID=''GTGO'' and LookUpValue in ('+@Type+')'

	print(@Query)
	exec(@Query)
END

GO

if object_id('usprpt_SpRpSum024_Rev01') is not null
	drop procedure usprpt_SpRpSum024_Rev01
GO
-- =========================================================================
-- Author:		Seandy A.K, Revision By: Osen Kusnadi (Convert to PivotGrid)
-- Create date: 19-7-2012, Revision On 2014-07-01
-- Description:	Sparepart Analysis Report
-- Query Activation : usprpt_SpRpSum024_Rev01 '','','','2012','1'
-- exec usprpt_SpRpSum024_Rev01 @Area=N'',@CompanyCode=N'', 
-- @BranchCode=N'',@Year=N'2013',@S1=N'''5'',''0'',''1'',''2'',''3'',''4'''
-- =========================================================================
CREATE procedure [dbo].[usprpt_SpRpSum024_Rev01]
	@Area			varchar(100),
	@CompanyCode	varchar(15),
	@BranchCode		varchar(15),
	@Year			varchar(4),
	@S1				varchar(50)
AS
BEGIN

declare @Query varchar(MAX), @Query1 varchar(MAX), @Query2 varchar(MAX)
declare @code varchar(15), @name varchar(250), @nCount INT, @nNum INT, @sDate varchar(10)

CREATE TABLE #TmpFilterEnum(
	[display]	[varchar](120),
	[value]		[varchar](32),
	[iconCls]	[varchar](22),
	[type]		[varchar](12) 
)

CREATE TABLE #TmpSalesSummary(
	id int,
	AccountID int,
	Account varchar(32),
	BranchCode varchar(15),
	BranchName varchar(64),
	[JAN] [decimal](18, 2) NOT NULL DEFAULT(0),
	[FEB] [decimal](18, 2) NOT NULL DEFAULT(0),
	[MAR] [decimal](18, 2) NOT NULL DEFAULT(0),
	[APR] [decimal](18, 2) NOT NULL DEFAULT(0),
	[MAY] [decimal](18, 2) NOT NULL DEFAULT(0),
	[JUN] [decimal](18, 2) NOT NULL DEFAULT(0),
	[JUL] [decimal](18, 2) NOT NULL DEFAULT(0),
	[AUG] [decimal](18, 2) NOT NULL DEFAULT(0),
	[SEP] [decimal](18, 2) NOT NULL DEFAULT(0),
	[OCT] [decimal](18, 2) NOT NULL DEFAULT(0),
	[NOV] [decimal](18, 2) NOT NULL DEFAULT(0),
	[DEC] [decimal](18, 2) NOT NULL DEFAULT(0)
)

CREATE TABLE #RawData(
	PeriodYear int,
	PeriodMonth int,
	BranchCode varchar(15),
	[N01] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N02] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N03] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N04] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N05] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N06] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N07] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N08] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N09] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N10] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N11] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N12] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N13] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N14] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N15] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N16] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N17] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N18] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N19] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N20] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N21] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N22] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N23] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N24] [decimal](18, 2) NOT NULL DEFAULT(0)
)

-- STARTING TO PREPARE METADATA --

set @Query = '
	select distinct 
	a.BranchCode,
	b.OutletAbbreviation, ''active'',''outlet''
	from spHstSparePartAnalysis a
	left join GnMstDealerMapping c on a.CompanyCode = c.DealerCode
	left join GnMStDealerOutletMapping b on a.CompanyCode = b.DealerCode
		and a.BranchCode = b.OutletCode
	where a.PeriodYear = ''' + @Year + ''' and convert(varchar,a.TypeOfGoods) in (' + @S1 + ') '

	if @Area <> '' 
	begin
		IF (@Area = 'JABODETABEK' or @Area = 'CABANG')
			set @Query = @Query + ' AND c.Area IN (''JABODETABEK'',''CABANG'') '
		else
			set @Query = @Query + ' AND c.Area like ''' + @Area + ''' '
	end

	if @CompanyCode <> ''
	BEGIN
		set @Query = @Query + ' AND a.CompanyCode like ''' + @CompanyCode + ''' '
	END

	IF @BranchCode <> ''
	BEGIN
		set @Query = @Query + ' AND a.BranchCode like ''' + @BranchCode + ''' '
	END
									
	set @Query = @Query + ' order by a.BranchCode '

	select @Query1 = 'INSERT INTO #TmpFilterEnum ([value],display,iconCls,[type])  ' + @Query , @nNum=0

	print(@Query1)
	exec(@Query1)


WHILE @nNum < 12
BEGIN
	SET @nNum=@nNum+1
	SET @sDate = @Year + '-' +  RIGHT('0' + convert(varchar,@nnum),2) + '-01'
	SET @name = upper(datename(mm,@sDate))
	SET @code = SUBSTRING(@name,1,3)
	INSERT INTO #TmpFilterEnum ([value],display,iconCls,[type]) values ( @code,@name + ', ' + @Year,'active','period')	
END
-- PREPARING METADATA DONE

-- PREPARING ACCOUNT LIST --
DECLARE @AccountList table(id INT,name VARCHAR(32))
INSERT INTO @AccountList VALUES 
(1,'Penjualan Kotor'),(2,'Penjualan Bersih'),(3,'Penjualan ke 3S + 2S'),(4,'Penjualan ke Parts Shop'),
(5,'Penjualan ke Lain-lain'),(6,'Harga Pokok'),(7,'Penerimaan Pembelian'),(8,'Nilai Stock'),(9,'ITO'),
(10,'ITO (AVG)'),(11,'Ratio'),(12,'Ration Suzuki'),(13,'Demand Line'),(14,'Demand Qty'),
(15,'Demand Nilai'),(16,'Supply Line'),(17,'Supply Qty'),(18,'Supply Nilai'),(19,'Service Ratio Line'),
(20,'Service Ratio Qty'),(21,'Service Ratio Nilai'),(22,'Stock MC4'),(23,'Stock MC5'),(24,'Slow Moving')
-- ACCOUNT LIST DONE --

-- PREPARING PIVOT GRID --
select @Query1 = 'DECLARE BRANCH_CR CURSOR FOR ' + @Query
print(@Query1)
exec(@Query1)

DECLARE ACCOUNT_CR CURSOR FOR SELECT ID,NAME FROM @AccountList
DECLARE @gBranchCode varchar(15), @gBranchName varchar(108), @iconCls varchar(7), @gType varchar(17)

SET @nNum = 0

OPEN ACCOUNT_CR
FETCH NEXT FROM ACCOUNT_CR
INTO @code, @name

WHILE @@FETCH_STATUS = 0
BEGIN

	OPEN BRANCH_CR
	FETCH NEXT FROM BRANCH_CR
	INTO  @gBranchCode,@gBranchName,@iconCls,@gType 

	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		SET @nNum = @nNum + 1

		INSERT INTO #TmpSalesSummary(id,AccountID,Account,BranchCode,BranchName)
		VALUES (@nNum,@code, @name,@gBranchCode,@gBranchName)

		FETCH NEXT FROM BRANCH_CR 
		INTO @gBranchCode,@gBranchName,@iconCls,@gType 
	END

	CLOSE BRANCH_CR

	FETCH NEXT FROM ACCOUNT_CR 
	INTO @code, @name
END

CLOSE ACCOUNT_CR
DEALLOCATE ACCOUNT_CR
DEALLOCATE BRANCH_CR

-- PIVOT GRID TEMPLATE DONE --

-- STARTING TO PREPARE DATA SUMMARY
set @Query = ' select * into #Summary from(
select c.GroupNo
		, c.Area
		, a.CompanyCode
		, c.DealerAbbreviation
		, a.BranchCode
		, b.OutletAbbreviation
		, a.PeriodYear
		, a.PeriodMonth
		, JumlahJaringan
		, SUM(isnull(PenjualanKotor,0)) PenjualanKotor
		, SUM(isnull(PenjualanBersih,0)) PenjualanBersih
		, isnull((select SUM(isnull(PenjualanBersih,0))
			 from spHstSparePartAnalysisDtl
			where CompanyCode = a.CompanyCode
			  and BranchCode = a.BranchCode
			  and PeriodYear = a.PeriodYear
			  and PeriodMonth = a.PeriodMonth
			  and TypeOfGoods = a.TypeOfGoods
			  and CustomerCategory in (''00'',''01'')),0) Penjualan3S2S
		, isnull((select SUM(isnull(PenjualanBersih,0))
			 from spHstSparePartAnalysisDtl
			where CompanyCode = a.CompanyCode
			  and BranchCode = a.BranchCode
			  and PeriodYear = a.PeriodYear
			  and PeriodMonth = a.PeriodMonth
			  and TypeOfGoods = a.TypeOfGoods
			  and CustomerCategory in (''15'')),0) PenjualanPartShop
		, isnull((select SUM(isnull(PenjualanBersih,0))
			 from spHstSparePartAnalysisDtl
			where CompanyCode = a.CompanyCode
			  and BranchCode = a.BranchCode
			  and PeriodYear = a.PeriodYear
			  and PeriodMonth = a.PeriodMonth
			  and TypeOfGoods = a.TypeOfGoods
			  and CustomerCategory not in (''00'',''01'',''15'')),0) PenjualanOthers
		, SUM(isnull(HargaPokok,0)) HargaPokok
		, SUM(isnull(PenerimaanPembelian,0))PenerimaanPembelian
		, SUM(isnull(NilaiStock,0)) NilaiStock
		, (select SUM(isnull(e.NilaiStock,0))
				 from spHstSparepartAnalysis e
				where e.CompanyCode = a.CompanyCode
				  and e.BranchCode = a.BranchCode
				  and e.PeriodYear = a.PeriodYear
				  and e.PeriodMonth = a.PeriodMonth
				  '
set @Query = @Query + ' and convert(varchar,e.TypeOfGoods) in (' + @S1 + ')
				Group by CompanyCode, BranchCode,PeriodYear,PeriodMonth
				  ) test
		, case when SUM(isnull(HargaPokok,0)) = 0 
				then 0
				else (SUM(isnull(NilaiStock,0)) / case when SUM(isnull(HargaPokok,0)) = 0 then 1 else SUM(isnull(HargaPokok,0)) end) 
				end ITO
		, isnull((select case when SUM(isnull(d.HargaPokok,0)) = 0 
				then 0
				else (SUM(isnull(a.NilaiStock,0))
					/ (SUM(isnull(d.HargaPokok,0)) / (select distinct Count(d.PeriodYear)
					from spHstSparepartAnalysis e
								where e.CompanyCode = a.CompanyCode
								  and e.BranchCode = a.BranchCode
								  and convert(int,convert(varchar,e.PeriodYear) + RIGHT(''0'' + convert(varchar,e.PeriodMonth),2))
										between convert(int,convert(varchar, case when a.PeriodMonth < 7 
																	  then  
																			(a.PeriodYear - 1)
																	  else 
																			a.PeriodYear
																	  end) +
												RIGHT(''0'' + convert(varchar, case when a.PeriodMonth < 7
																	  then 
																		(12 + (a.PeriodMonth - 5))
																	  else
																		(a.PeriodMonth - 5)
																	  end), 2))
										and convert(int,convert(varchar,a.PeriodYear) + RIGHT(''0'' + convert(varchar,a.PeriodMonth),2))
										'
					set @Query = @Query + ' and TypeOfGoods in (' + @S1 + ') Group by CompanyCode,BranchCode)
					 ))
				end
			from spHstSparepartAnalysis d
			where d.CompanyCode = a.CompanyCode
			  and d.BranchCode = a.BranchCode
			  and convert(int,convert(varchar,d.PeriodYear) + RIGHT(''0'' + convert(varchar,d.PeriodMonth),2))
										between convert(int,convert(varchar, case when a.PeriodMonth < 7 
																	  then  
																			(a.PeriodYear - 1)
																	  else 
																			a.PeriodYear
																	  end) +
												RIGHT(''0'' + convert(varchar, case when a.PeriodMonth < 7
																	  then 
																		(12 + (a.PeriodMonth - 5))
																	  else
																		(a.PeriodMonth - 5)
																	  end), 2))
										and convert(int,convert(varchar,a.PeriodYear) + RIGHT(''0'' + convert(varchar,a.PeriodMonth),2))
										'
					set @Query = @Query + ' and d.TypeOfGoods in (' + @S1 + ') Group by CompanyCode,BranchCode
		  ),0) AVGITO
		, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(HargaPokok,0)) = 0 then 1 else SUM(HargaPokok) end * 100 Ratio
		, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(PenjualanBersih,0)) = 0 then 1 else SUM(PenjualanBersih) end * 100 RatioSuzuki
		, SUM(isnull(DemandLine,0)) DemandLine
		, SUM(isnull(DemandQuantity,0)) DemandQuantity
		, SUM(isnull(DemandNilai,0)) DemandNilai
		, SUM(isnull(SupplyLine,0)) SupplyLine
		, SUM(isnull(SupplyQuantity,0)) SupplyQuantity
		, SUM(isnull(SupplyNilai,0)) SupplyNilai
		, (SUM(isnull(SupplyLine,0)) / case when SUM(isnull(DemandLine,0)) = 0 then 1 else SUM(isnull(DemandLine,0)) end) * 100 ServiceRatioLine
		, (SUM(isnull(SupplyQuantity,0)) / case when SUM(isnull(DemandQuantity,0)) = 0 then 1 else SUM(isnull(DemandQuantity,0)) end) * 100 ServiceRatioQuantity
		, (SUM(isnull(SupplyNilai,0)) / case when SUM(isnull(DemandNilai,0)) = 0 then 1 else SUM(isnull(DemandNilai,0)) end) * 100 ServiceRatioNilai
		, SUM(isnull(DataStockMC4,0)) DataStockMC4
		, SUM(isnull(DataStockMC5,0)) DataStockMC5
		, (SUM(isnull(SlowMoving,0)) / case when SUM(isnull(NilaiStock,0)) = 0 then 1 else SUM(isnull(NilaiStock,0)) end) * 100 SlowMoving
	from spHstSparePartAnalysis a
	left join GnMstDealerMapping c on a.CompanyCode = c.DealerCode
	left join GnMStDealerOutletMapping b on a.CompanyCode = b.DealerCode
		and a.BranchCode = b.OutletCode
	where (c.Area like '
	set @Query = @Query + Case when @Area <> '' 
								then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
										then '''JABODETABEK'''
										else @Area end
								else '''%%''' end
	set @Query = @Query + ' or c.Area like ' + Case when @Area <> '' 
													then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
															then '''CABANG'''
															else @Area end
													else '''%%''' end
set @Query = @Query + ') and a.CompanyCode like ' 
set @Query = @Query + case when @CompanyCode <> '' then '''' + @CompanyCode + '''' else '''%%''' end
set @Query = @Query + ' and a.BranchCode like '
set @Query = @Query + case when @BranchCode <> '' then '''' + @BranchCode + '''' else '''%%''' end
set @Query = @Query + ' and a.PeriodYear = ''' + @Year + ''''
set @Query = @Query + ' and convert(varchar,a.TypeOfGoods) in (' + @S1 + ')'
set @Query = @Query + ' group by c.GroupNo
		, c.Area
		, a.CompanyCode
		, c.DealerAbbreviation
		, a.BranchCode
		, b.OutletAbbreviation
		, a.PeriodYear
		, a.PeriodMonth
		, a.JumlahJaringan
		, a.TypeOfGoods
)#Summary

select * into #PivotData from (
select PeriodYear
	, PeriodMonth
	, BranchCode
	, SUM(PenjualanKotor) PenjualanKotor
	, SUM(PenjualanBersih) PenjualanBersih
	, SUM(Penjualan3S2S) Penjualan3S2S
	, SUM(PenjualanPartShop) PenjualanPartShop
	, SUM(PenjualanOthers) PenjualanOthers
	, SUM(HargaPokok) HargaPokok
	, SUM(PenerimaanPembelian) PenerimaanPembelian
	, SUM(NilaiStock) NilaiStock
	, SUM(ITO) ITO
	, isnull((case when SUM(isnull(HargaPokok,0)) = 0 
				then 0
				else (SUM(isnull(NilaiStock,0))/ (SUM(isnull(HargaPokok,0)) / 6))
				end
		  ),0) AVGITO
	, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(HargaPokok,0)) = 0 then 1 else SUM(HargaPokok) end * 100 Ratio
	, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(PenjualanBersih,0)) = 0 then 1 else SUM(PenjualanBersih) end * 100 RatioSuzuki
	, SUM(DemandLine) DemandLine
	, SUM(DemandQuantity) DemandQuantity
	, SUM(DemandNilai) DemandNilai
	, SUM(SupplyLine) SupplyLine
	, SUM(SupplyQuantity) SupplyQuantity
	, SUM(SupplyNilai) SupplyNilai
	, (SUM(isnull(SupplyLine,0)) / case when SUM(isnull(DemandLine,0)) = 0 then 1 else SUM(isnull(DemandLine,0)) end) * 100 ServiceRatioLine
	, (SUM(isnull(SupplyQuantity,0)) / case when SUM(isnull(DemandQuantity,0)) = 0 then 1 else SUM(isnull(DemandQuantity,0)) end) * 100 ServiceRatioQuantity
	, (SUM(isnull(SupplyNilai,0)) / case when SUM(isnull(DemandNilai,0)) = 0 then 1 else SUM(isnull(DemandNilai,0)) end) * 100 ServiceRatioNilai
	, SUM(DataStockMC4) DataStockMC4
	, SUM(DataStockMC5) DataStockMC5
	, (SUM(isnull(SlowMoving,0)) / case when SUM(isnull(NilaiStock,0)) = 0 then 1 else SUM(isnull(NilaiStock,0)) end) * 100 SlowMoving
from #Summary
group by 
	 PeriodYear
	, PeriodMonth
	, BranchCode) a

insert into #RawData select * from #PivotData

'
print(@Query)
exec(@Query)

select * from #TmpFilterEnum
select* from #TmpSalesSummary
select* from #RawData





END


GO

if object_id('usprpt_SvRpCrm002V3') is not null
	drop procedure usprpt_SvRpCrm002V3
GO
-- ===================================================
-- Query Activation : 
-- usprpt_SvRpCrm002V2 '6006406','6006405','20110706','REMINDER',3,0
-- ===================================================

CREATE PROCEDURE [dbo].[usprpt_SvRpCrm002V3]
	@CompanyCode	Varchar(15),
	@BranchCode		Varchar(15),
	@DateParam		Datetime,
	@OptionType		Varchar(100), 
	@Range			int, 
	@Interval		int
	
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;

IF (@OptionType = 'REMINDER')
BEGIN
select ROW_NUMBER()OVER(order BY a.PoliceRegNo) as No, * from (
	select distinct 
		  case when b.LastServiceDate is null then 'New' else case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then 'NEW' else 'Walk In' end end KategoriPelanggan
		 , b.BasicModel typeA
		 , b.PoliceRegNo
		 , case when b.TransmissionType is null then 'MT' else case when b.TransmissionType = ' ' then 'MT' else b.TransmissionType end end TM
		 , b.ProductionYear ProdYear
		 , b.EngineCode
		 , b.EngineNo
		 , b.ChassisCode
		 , b.ChassisNo
		 , c.CustomerName
		 , c.PhoneNo
		 , c.OfficePhoneNo
		 , c.HPNo
		 , case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then null else b.LastServiceDate end VisitDate
		 , case when (convert(varchar, c.BirthDate, 112) = '19000101') then null else c.BirthDate end BirthDate
		 , case(c.Gender) when 'M' then 'Pria' else 'Wanita' end Gender
		 , isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') Address
		 , case when b.ContactName is null then c.CustomerName else b.ContactName end ContactName
		 , case when b.ContactAddress is null then isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') else b.ContactAddress end ContactAddress
		 , case when b.ContactPhone is null then c.PhoneNo else b.ContactPhone end ContactPhone
		 , b.RemainderDescription LastRemark
		 , ISNULL((SELECT TOP 1 CompanyName FROM gnMstCoProfile WHERE CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) ,'') CompanyName
		 , YEAR(getdate()) PeriodYear
		 , DateName( month , DateAdd( month , month(GetDate()) , 0 ) - 1 ) PeriodMonth 
		 , c.Address1
		 , c.Address2
		 , c.Address3
		 , c.Address4
	  from svTrnService a
	  left join SvMstCustomerVehicle b	on a.Companycode = b.CompanyCode 
			and a.ChassisCode = b.ChassisCode 
			and a.ChassisNo = b.ChassisNo
	  left join GnMstCustomer c on a.CompanyCode = c.CompanyCode
			and a.CustomerCode = c.CustomerCode
	  left join svTrnDailyRetention d on d.CompanyCode = a.CompanyCode
			and d.BranchCode = a.BranchCode and d.PeriodYear = year(a.JobOrderDate)
			and d.PeriodMonth = month(a.JobOrderDate) and d.CustomerCode = a.CustomerCode
	  left join gnMstLookupDtl e on e.CompanyCode = a.CompanyCode
			and e.CodeID = 'CIRS'
			and e.LookupValue = d.VisitInitial
	  left join gnMstLookUpDtl f on b.CompanyCode = a.CompanyCode
			and f.CodeId = 'CCRS'
			and f.LookUpValue = d.CustomerCategory
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode	= @BranchCode
	   ) a
END
ELSE
BEGIN
select ROW_NUMBER()OVER(order BY b.PoliceRegNo) as No, * from (
	select distinct 
		case when b.LastServiceDate is null then 'New' else case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then 'NEW' else 'Walk In' end end KategoriPelanggan
		 , b.BasicModel typeA
		 , b.PoliceRegNo
		 , case when b.TransmissionType is null then 'MT' else case when b.TransmissionType = ' ' then 'MT' else b.TransmissionType end end TM 
		 , b.ProductionYear ProdYear
		 , b.EngineCode
		 , b.EngineNo
		 , b.ChassisCode
		 , b.ChassisNo
		 , c.CustomerName
		 , c.PhoneNo
		 , c.OfficePhoneNo
		 , c.HPNo
		 , case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then null else b.LastServiceDate end VisitDate
		 , case when (convert(varchar, c.BirthDate, 112) = '19000101') then null else c.BirthDate end BirthDate
		 , case(c.Gender) when 'M' then 'Pria' else 'Wanita' end Gender
		 , isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') Address
		 , case when b.ContactName is null then c.CustomerName else b.ContactName end ContactName
		 , case when b.ContactAddress is null then isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') else b.ContactAddress end ContactAddress
		 , case when b.ContactPhone is null then c.PhoneNo else b.ContactPhone end ContactPhone
		 , b.RemainderDescription LastRemark
		 , ISNULL((SELECT TOP 1 CompanyName FROM gnMstCoProfile WHERE CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) ,'') CompanyName
		 , YEAR(getdate()) PeriodYear
		 , DateName( month , DateAdd( month , month(GetDate()) , 0 ) - 1 ) PeriodMonth
		 , c.Address1
		 , c.Address2
		 , c.Address3
		 , c.Address4
	  from svTrnService a
	  left join SvMstCustomerVehicle b	on a.Companycode = b.CompanyCode 
			and a.ChassisCode = b.ChassisCode 
			and a.ChassisNo = b.ChassisNo
	  left join GnMstCustomer c on a.CompanyCode = c.CompanyCode
			and a.CustomerCode = c.CustomerCode
	  left join svTrnDailyRetention d on d.CompanyCode = a.CompanyCode
			and d.BranchCode = a.BranchCode and d.PeriodYear = year(a.JobOrderDate)
			and d.PeriodMonth = month(a.JobOrderDate) and d.CustomerCode = a.CustomerCode
	  left join gnMstLookupDtl e on e.CompanyCode = a.CompanyCode
			and e.CodeID = 'CIRS'
			and e.LookupValue = d.VisitInitial
	  left join gnMstLookUpDtl f on b.CompanyCode = a.CompanyCode
			and f.CodeId = 'CCRS'
			and f.LookUpValue = d.CustomerCategory
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode	= @BranchCode
	   ) b
END
END

GO

if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
create procedure [uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6006400001'
--set	@BranchCode		= '6006400101'
--set	@JobOrderNo		= 'SPK/14/101589'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '2105885'
--set	@TransType		= '20'
--set	@UserID			= '9a'
--set	@DocDate		= '3/2/2015 4:03:01 PM'

--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderNo
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

INSERT INTO @TempAvailStock
exec(@query)

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, a.PartNo
	, '00' WarehouseCode
	, a.PartNo PartNoOriginal
	, @JobOrderNo ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) ReferenceDate
	, (SELECT LocationCode FROM SpMstItemLoc WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND WarehouseCode = '00'
		AND PartNo = a.PartNo) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT MovingCode FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT ABCClass FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		ABCClass
	, @ProductType ProductType
	, (SELECT PartCategory FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		PartCategory
	, '2' Status
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, @UserID StockAllocatedBy
	, GetDate() StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
inner join spMstItemPrice b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = @TypeOfGoods

--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '' PickingSlipNo	
	, @JobOrderNo ReferenceNo
	, @DefaultDate ReferenceDate
	, '00' WarehouseCode
	, (SELECT LocationCode FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND WarehouseCode = '00'
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT AvailStock FROM @TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT MovingCode FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT ABCClass FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		ABCClass
	, @ProductType ProductType
	, (SELECT PartCategory FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		PartCategory
	, '1' Status
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, @UserID StockAllocatedBy
	, GetDate() StockAllocatedDate
FROM #SrvOrder a
inner join spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = @TypeOfGoods
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================
UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(GetDate())
	AND a.Month  = Month(GetDate())
	AND a.PartNo = b.PartNo
	AND b.DocNo = @TempDocNo

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(GetDate())
	AND a.Month  = Month(GetDate())
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = @CustomerCode
	AND b.DocNo = @TempDocNo

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, Year(GetDate()) Year
	, Month(GetDate()) Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= @CompanyCode AND a.BranchCode= @BranchCode AND a.DocNo = @TempDocNo -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = Month(GetDate())
	AND Year = Year(GetDate())
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, Year(GetDate()) Year
	, Month(GetDate()) Month
	, @CustomerCode CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= @CompanyCode and a.BranchCode= @BranchCode AND a.DocNo = @TempDocNo -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = Month(GetDate())
	AND Year = Year(GetDate())
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================
UPDATE SpMstItems 
SET LastDemandDate = GetDate()
FROM SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyMD
	AND a.BranchCode = @BranchMD
	AND a.PartNo = b.PartNo
	AND b.DocNo = @TempDocNo

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyMD
	AND a.BranchCode = @BranchMD
	AND a.PartNo = b.PartNo

UPDATE spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyMD 
	AND a.BranchCode = @BranchMD
	AND a.WarehouseCode = @WarehouseMD
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  @CompanyCode 
		AND BranchCode = @BranchCode AND DocNo = @TempDocNo AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, 'OUT' SignCode
	, 'SA-NPJUAL' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo <> '' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns

UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),@DefaultDate)
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType	

--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0

DROP TABLE #TempSOSupply

--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item
END
GO


CREATE procedure [dbo].[uspfn_BrowseParameter] @companycode varchar(50)
as
declare @BACKUP_DBNAME varchar(50),
@BACKUP_FILEEXT varchar(50),
@BACKUP_FILENAME varchar(50),
@BACKUP_FOLDERPATH varchar(50),
@DCS_URL varchar(50),
@TAX_URL varchar(50)
--declare @tblParam as table  (
--	DBName varchar(50),
--	Extensions varchar(50),
--	Prefix varchar(50),
--	FolderPath varchar(500),
--	DCSURL varchar(500),
--	TAXURL varchar(500)
--)

--insert @tblParam (DBName, Extensions, Prefix, FolderPath, DCSURL, TAXURL   )
set @BACKUP_DBNAME= (select ParamValue from sysParameter where ParamId='BACKUP_DBNAME')
set @BACKUP_FILEEXT= (select ParamValue from sysParameter where ParamId='BACKUP_FILEEXT')
set @BACKUP_FILENAME= (select ParamValue from sysParameter where ParamId='BACKUP_FILENAME')
set @BACKUP_FOLDERPATH= (select ParamValue from sysParameter where ParamId='BACKUP_FOLDERPATH')
set @DCS_URL= (select ParamValue from sysParameter where ParamId='DCS_URL')
set @TAX_URL= (select ParamValue from sysParameter where ParamId='TAX_URL')

if exists(Select companycode from sysParam ) begin
	update sysParam
	set dbname = @BACKUP_DBNAME, Extensions=@BACKUP_FILEEXT, Prefix=@BACKUP_FILENAME, FolderPath=@BACKUP_FOLDERPATH, DCSURL=@DCS_URL, TAXURL=@TAX_URL
	where companycode=@companycode
end else begin
	insert sysParam (CompanyCode, DBName, Extensions, Prefix, FolderPath, DCSURL, TAXURL)
	select  @companycode, @BACKUP_DBNAME, @BACKUP_FILEEXT, @BACKUP_FILENAME, @BACKUP_FOLDERPATH, @DCS_URL, @TAX_URL
end
select * from sysParam
GO

CREATE procedure [dbo].[uspfn_CreditLimitView] @CompanyCode varchar(50), @BranchCode varchar(50), @ProfitCenterCode varchar(50), @customerCode varchar(50)
as
SELECT 
convert(varchar(50),(row_number() over(order by b.CustomerCode))) AS  Nomor,
d.LookUpValueName AS ProfitCenterCode,
b.CustomerCode, e.CustomerName,
convert(varchar(50),ISNULL(b.CreditLimit,0)) AS CreditLimit,
convert(varchar(50),ISNULL(c.SalesAmt, 0)) AS SalesAmt,
convert(varchar(50),ISNULL(c.ReceivedAmt,0)) AS ReceivedAmt,
convert(varchar(50),ISNULL(b.CreditLimit,0)-(ISNULL(c.SalesAmt, 0) - ISNULL(c.ReceivedAmt,0))) AS BalanceAmt,
convert(varchar(50),(ISNULL(c.SalesAmt, 0) - ISNULL(c.ReceivedAmt,0))) AS Credit,
ISNULL((Select LookUpValueName From GnMstlookUpDtl x where x.CompanyCode = b.CompanyCode AND x.LookUpValue = b.PaymentCode AND CodeID ='PYBY'),'-') AS PaymentBy
FROM gnMstCustomerProfitCenter b
LEFT JOIN GnTrnBankBook c  ON  c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode AND b.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = b.ProfitCenterCode
LEFT JOIN GnMstlookUpDtl d ON  d.CompanyCode = b.CompanyCode AND d.CodeId = 'PFCN' AND b.ProfitCenterCode = d.LookUpValue
LEFT JOIN GnMstCustomer e  ON  e.CompanyCode = b.CompanyCode AND e.CustomerCode = b.CustomerCode 
WHERE 
b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode AND b.ProfitCenterCode = @ProfitCenterCode 
and b.CustomerCode = case when isnull(@customerCode,'')='' then b.CustomerCode else @customerCode end
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_CustomerUtilityView]  @flag int
AS

if @flag =1 SELECT * , case when Isautogenerate=1 then 'Automatis' else 'Manual' end GenarateNo from GnMstCustomerUtility
if @flag =2 SELECT * , case when Isautogenerate=1 then 'Automatis' else 'Manual' end GenarateNo from gnMstSupplierUtility
GO

Create procedure [dbo].[uspfn_GetAreaDealerOutlet] @companyCode varchar(50), @BranchCode varchar(50)
as
--declare @companyCode varchar(50)='', @BranchCode varchar(50)=''
select top 1 --case when @GroupNo='' then 'All' else AreaDealer end Area , 
		case when @companyCode='' then 'All' else b.CompanyName end Dealer, 
		case when @BranchCode='' then 'All' else a.BranchName end Showroom
from gnMstOrganizationDtl a
inner join gnMstOrganizationHdr b
	on a.CompanyCode=b.CompanyCode
where 1=1 --a.GroupNo= case when isnull(@GroupNo,'')<>'' then @GroupNo else a.GroupNo end --@GroupNo 
and a.companyCode=case when isnull(@companyCode,'')<>'' then @companyCode else a.companyCode end --@dealercode 
and a.BranchCode= case when isnull(@BranchCode,'')<>'' then @BranchCode else a.BranchCode end --@BranchCode
GO
CREATE procedure [dbo].[uspfn_getBrowseEntryRtrPenjualan] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(5)
as
select	 a.CompanyCode, a.BranchCode,   a.ReturnNo, a.ReturnDate, a.FPJNo, b.FPJDate, a.ReferenceNo, a.ReferenceDate, a.CustomerCode
                from	    spTrnSRturHdr a
                left join  spTrnSFPJHdr b on
	                a.CompanyCode = b.CompanyCode
	                and a.BranchCode = b.BranchCode
	                and a.FPJNo = b.FPJNo
                where	    a.CompanyCode = @CompanyCode
                            and a.BranchCode = @BranchCode	
                            and a.FPJNo = b.FPJNo
                            and a.TypeOfGoods = @TypeOfGoods
                            and a.Status in ('0', '1')
                order by    a.ReturnNo desc
GO
CREATE procedure [dbo].[uspfn_GetSODetails] @CompanyCode varchar(15), @BranchCode varchar(15), @POSNo varchar(20)  
as   
SELECT   
    A.CompanyCode,  
    A.BranchCode,  
    A.POSNo,   
    A.SupplierCode,   
    B.PartNo,   
    B.OrderQty,   
    B.PurchasePrice,  
    B.CostPrice,   
    B.ABCClass,   
    B.MovingCode,   
    B.ProductType,  
    B.PartCategory,   
    A.TypeOfGoods,  
    B.DiscPct,  
    B.Note,  
    C.PartName,
    B.TotalAmount  
FROM spTrnPPOSHdr A   
INNER JOIN spTrnPPOSDtl B ON (A.CompanyCode = B.CompanyCode)  
    AND (A.BranchCode = B.BranchCode)  
    AND (A.POSNo = B.POSNo)  
left JOIN spMstItemInfo C  
on C.CompanyCode = B.CompanyCode  
and C.PartNo = B.PartNo  
WHERE A.CompanyCode = @CompanyCode  
    AND A.BranchCode = @BranchCode  
    AND A.POSNo = @POSNo
GO
CREATE PROCEDURE [dbo].[uspfn_GetSPKForApprovalPdiFsc]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@IsPdi bit
AS
BEGIN
--	declare @CompanyCode as varchar(15)
--	declare @BranchCode as varchar(15)
--	declare @ProductType as varchar(15)
--	declare @IsPDI as bit
--
--	set @CompanyCode = '6014401'
--	set @BranchCode = '601440100'
--	set @ProductType = '4W'
--	set @IsPDI = 0
	
	select convert(bit, 0) IsSelected, row_number() over(order by a.ServiceNo asc) as No,a.BranchCode, a.ServiceNo, a.JobOrderNo, a.JobOrderDate
	, a.ServiceBookNo, a.ChassisNo, a.BasicModel, a.JobType, (isnull(srv.ValItem, 0) + isnull(task.valTask,0)) TotalApprove
	from SvTrnService a
	left join (select CompanyCode, BranchCode, ServiceNo, sum((OperationHour * OperationCost)) valTask
		from svTrnSrvTask
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) task on task.CompanyCode = a.CompanyCode
											and task.BranchCode = a.BranchCode
											and task.ServiceNo = a.ServiceNo
	left join (select CompanyCode, BranchCode, ServiceNo, sum(((SupplyQty - ReturnQty) * RetailPrice)) valItem 
		from svTrnSrvItem 
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) srv on srv.CompanyCode = a.CompanyCode
											and srv.BranchCode = a.BranchCode
											and srv.ServiceNo = a.ServiceNo
	where a.CompanyCode = @CompanyCode
	and a.BranchCode = @BranchCode
	and a.ProductType = @ProductType
	and a.ServiceStatus = '5 '
	and a.IsLocked = 0
	and a.JobType like (case when @IsPDI = 1 then 'PDI%' else 'FS%' end )
	
END
GO
CREATE PROCEDURE [dbo].[uspfn_GetSPKForUnApprovalPdiFsc]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@IsPdi bit
AS
BEGIN
	--declare @CompanyCode as varchar(15)
	--declare @BranchCode as varchar(15)
	--declare @ProductType as varchar(15)
	--declare @IsPDI as bit

	--set @CompanyCode = '6058401'
	--set @BranchCode = '605840103'
	--set @ProductType = '4W'
	--set @IsPDI = 0
	
	select convert(bit, 0) IsSelected, row_number() over(order by a.ServiceNo asc) as No,a.BranchCode, a.ServiceNo, a.JobOrderNo, a.JobOrderDate
	, a.ServiceBookNo, a.ChassisNo, a.BasicModel, a.JobType, (isnull(srv.ValItem, 0) + isnull(task.valTask,0)) TotalApprove
	from SvTrnService a
	left join (select CompanyCode, BranchCode, ServiceNo, sum((OperationHour * OperationCost)) valTask
		from svTrnSrvTask
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) task on task.CompanyCode = a.CompanyCode
											and task.BranchCode = a.BranchCode
											and task.ServiceNo = a.ServiceNo
	left join (select CompanyCode, BranchCode, ServiceNo, sum(((SupplyQty - ReturnQty) * RetailPrice)) valItem 
		from svTrnSrvItem 
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) srv on srv.CompanyCode = a.CompanyCode
											and srv.BranchCode = a.BranchCode
											and srv.ServiceNo = a.ServiceNo
	where a.CompanyCode = @CompanyCode
	and a.BranchCode = @BranchCode
	and a.ProductType = @ProductType
	and a.ServiceStatus = '5 '
	and a.IsLocked = 1
	and a.JobType like (case when @IsPDI = 1 then 'PDI%' else 'FS%' end )
END
GO
CREATE procedure [dbo].[uspfn_gnBrowseSupplier] @CompanyCode varchar(15)    
as    
SELECT    
 DISTINCT(a.SupplierCode)    
 , a.SupplierName    
FROM gnMstSupplier a WITH(NOLOCK, NOWAIT)    
LEFT JOIN gnMstSupplierProfitCenter b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode     
    AND a.SupplierCode = b.SupplierCode AND b.IsBlackList = 0  
--LEFT JOIN  gnMstLookUpDtl c ON c.CompanyCode = a.CompanyCode and c.LookUpValue = a.ProvinceCode  
--and c.CodeID = 'PROV'  
--left JOIN gnMstLookUpDtl d ON d.CompanyCode = a.CompanyCode and d.LookUpValue = a.AreaCode  
--and d.CodeID = 'AREA'  
--left JOIN gnMstLookUpDtl e ON e.CompanyCode = a.CompanyCode and e.LookUpValue = a.CityCode  
--and e.CodeID = 'CITY'  
WHERE a.CompanyCode = @CompanyCode AND a.Status = 1
GO
create procedure [dbo].[uspfn_gnGetSegmentAcc] @CompanyCode varchar(15), @BranchCode varchar(15), 
@TipeSegAcc varchar(3)
as
SELECT TipeSegAcc, SegAccNo, Parent, Description  FROM gnMstSegmentAcc 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND 
TipeSegAcc = @TipeSegAcc ORDER BY TipeSegAcc ASC, SegAccNo ASC
GO
CREATE procedure [dbo].[uspfn_PostingReturnService]    
 @CompanyCode VARCHAR(MAX),    
 @BranchCode  VARCHAR(MAX),    
 @ProductType VARCHAR(MAX),    
 @InvoiceNo  VARCHAR(MAX),    
 @UserID   VARCHAR(MAX)    
AS    
BEGIN    
    
DECLARE @ReturnNo VARCHAR(MAX)    
DECLARE currReturn CURSOR FOR    
SELECT ReturnNo FROM spTrnSRturSrvHdr    
WHERE CompanyCode = @CompanyCode    
 AND BranchCode = @BranchCode    
 AND InvoiceNo = @InvoiceNo    
    
OPEN currReturn    
FETCH NEXT FROM currReturn INTO @ReturnNo    
WHILE @@FETCH_STATUS = 0    
 BEGIN    
 --==========================================================================================================    
 -- AVERAGE COST PRICE (UPDATE MASTER ITEM PRICE AND HISTORY)    
 --==========================================================================================================    
 SELECT * INTO #TempAvgPrice FROM (     
 SELECT    
  a.CompanyCode    
  , a.BranchCode    
  , a.PartNo    
  , ROUND((((b.OnHand * c.CostPrice) + ((a.QtyReturn * a.CostPrice) * (1-(a.DiscPct/100))))     
   / (a.QtyReturn + b.OnHand)),2,2  )AvgCost     
  , c.CostPrice    
 FROM SpTrnSRturSrvDtl a    
  LEFT JOIN SpMstItems b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo    
  LEFT JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo ) #TempAvgPrice    
    
 INSERT INTO [spHstItemPrice]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[PartNo]    
           ,[UpdateDate]    
           ,[RetailPrice]    
           ,[RetailPriceInclTax]    
           ,[PurchasePrice]    
           ,[CostPrice]    
           ,[Discount]    
           ,[OldRetailPrice]    
           ,[OldPurchasePrice]    
           ,[OldCostPirce]    
           ,[OldDiscount]    
           ,[LastPurchaseUpdate]    
           ,[LastRetailPriceUpdate]    
           ,[CreatedBy]    
           ,[CreatedDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT a.CompanyCode    
  , a.BranchCode    
  , a.PartNo    
  , DATEADD(ss,row_number() over (order by a.PartNo ASC), GetDate()) UpdateDate    
  , a.RetailPrice     
  , a.RetailPriceInclTax    
  , a.PurchasePrice    
  , b.AvgCost CostPrice    
  , ISNULL((    
   SELECT TOP 1 Discount     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ),0) Discount    
  , a.RetailPrice OldRetailPrice    
  , a.PurchasePrice OldPurchasePrice    
  , a.CostPrice OldCostPrice    
  , ISNULL((    
   SELECT TOP 1 Discount     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ),0) Discount    
  , ISNULL((    
   SELECT TOP 1 LastPurchaseUpdate     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ), NULL)LastPurchaseUpdate    
  , ISNULL((    
   SELECT TOP 1 LastRetailPriceUpdate     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ), NULL) LastRetailPriceUpdate     
  , @UserID CreatedBy    
  , GetDate() CreatedDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM spMstItemPrice a    
  INNER JOIN #TempAvgPrice b ON a.CompanyCode = b.CompanyCode     
   AND a.BranchCode = b.BranchCode     
   AND a.PartNo = b.PartNo    
     
 UPDATE SpMstItemPrice    
 SET CostPrice = b.AvgCost    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 FROM SpMstItemPrice a, #TempAvgPrice b    
 WHERE a.CompanyCode = b.CompanyCode    
  AND a.BranchCode = b.BranchCode    
  AND a.PartNo = b.PartNo    
 DROP TABLE #TempAvgPrice    
    
 --==========================================================================================================    
 -- UPDATE STOCK AND MOVEMENT    
 --==========================================================================================================    
 UPDATE SpMstItems    
 SET Onhand = Onhand + b.QtyReturn    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 FROM SpMstItems a, SpTrnSRturSrvDtl b    
 WHERE a.CompanyCode = b.CompanyCode    
  AND a.BranchCode = b.BranchCode    
  AND a.PartNo = b.PartNo    
  AND b.CompanyCode = @CompanyCode    
  AND b.BranchCode = @BranchCode    
  AND b.ReturnNo = @ReturnNo     
     
    
 UPDATE SpMstItemLoc    
 SET Onhand = Onhand + b.QtyReturn    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 FROM SpMstItemLoc a, SpTrnSRturSrvDtl b    
 WHERE a.CompanyCode = b.CompanyCode    
  AND a.BranchCode = b.BranchCode    
  AND a.PartNo = b.PartNo    
  AND a.WarehouseCode = '00'    
  AND b.CompanyCode = @CompanyCode    
  AND b.BranchCode = @BranchCode    
  AND b.ReturnNo = @ReturnNo     
    
 INSERT INTO [spTrnIMovement]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[DocDate]    
           ,[CreatedDate]    
           ,[WarehouseCode]    
           ,[LocationCode]    
           ,[PartNo]    
           ,[SignCode]    
           ,[SubSignCode]    
           ,[Qty]    
           ,[Price]    
           ,[CostPrice]    
           ,[ABCClass]    
           ,[MovingCode]    
           ,[ProductType]    
           ,[PartCategory]    
           ,[CreatedBy])    
 SELECT a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , (    
   SELECT ReturnDate     
   FROM SpTrnSRturSrvHdr     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode     
    AND ReturnNo = a.ReturnNo    
    ) DocDate    
  , DATEADD(ss,row_number() over (order by a.PartNo ASC), GetDate()) CreatedDate    
  , '00' WarehouseCode    
  , (    
   SELECT LocationCode    
   FROM SpMstItemLoc     
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND WarehouseCode = '00'    
    AND PartNo = a.PartNo    
    ) LocationCode    
  , a.PartNo    
  , 'IN' SignCode    
  , 'RSRV' SubSignCode    
  , a.QtyReturn Qty    
  , a.RetailPrice Price    
  , a.CostPrice     
  , a.ABCClass    
  , a.MovingCode    
  , @ProductType ProductType    
  , a.PartCategory    
  , @UserID CreatedBy    
 FROM SpTrnSRturSrvDtl a     
 WHERE CompanyCode = @CompanyCode    
  AND BranchCode = @BranchCode    
  AND ReturnNo = @ReturnNo     
     
 --==========================================================================================================    
 -- INSERT GLINTERFACE (JOURNAL) AND ARINTERFACE    
 --==========================================================================================================    
 INSERT INTO [arInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[NettAmt]    
           ,[ReceiveAmt]    
           ,[CustomerCode]    
           ,[TOPCode]    
           ,[TypeTrans]    
           ,[BlockAmt]    
           ,[DebetAmt]    
           ,[CreditAmt]    
           ,[SalesCode]    
           ,[AccountNo]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate])     
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , a.ReturnDate DocDate    
  , '300' ProfitCenterCode     
  , a.TotCostAmt NettAmt    
  , 0 ReceiveAmt    
  , a.CustomerCode    
  , (    
   SELECT TOPCode     
   FROM GnMstCustomerProfitCenter    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND CustomerCode = a.CustomerCode    
    AND ProfitCenterCode = '200'    
   ) TOPCode    
  , 'SRETURN' TypeTrans    
  , 0 BlockAmt    
  , 0 DebetAmt    
  , 0 CreditAmt    
  , (    
   SELECT SalesCode     
   FROM GnMstCustomerProfitCenter    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND CustomerCode = a.CustomerCode    
    AND ProfitCenterCode = '200'    
   ) SalesCode    
  , ISNULL((    
   SELECT b.ReceivableAccNo     
   FROM GnMstCustomerClass b    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    --AND TypeOfGoods = a.TypeOfGoods    
    AND ProfitCenterCode = '200'    
    AND CustomerCode = a.CustomerCode    
    AND CustomerClass = ISNULL((SELECT CustomerClass    
           FROM gnMstCustomerProfitCenter    
           WHERE CompanyCode = a.CompanyCode    
            AND BranchCode = a.BranchCode    
            AND CustomerCode = a.CustomerCode    
            AND ProfitCenterCode = '200'),'')    
    ),'') AccountNo    
  , '0' StatusFlag    
  , @UserId CreatedBy    
  , GetDate() CreatedDate    
 FROM SpTrnSRturSrvHdr a    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
    
 -- CHECK FOR THE AMOUNT IF EXIST     
 -- ================================    
 DECLARE @counterGL INT    
 DECLARE @TypeReturn VARCHAR(100)    
    
 SET @counterGL = 1    
 SET @TypeReturn = CASE WHEN ISNULL((select ParaValue from gnMstLookupDtl     
        where codeid = 'gtgo'    
         and lookupvalue = isnull((    
          select typeofgoods     
          from sptrnsrtursrvdtl     
          where CompanyCode = @CompanyCode    
           AND BranchCode = @BranchCode    
           AND ReturnNo = @ReturnNo),''))    
       ,'') <> 'SPAREPART' THEN 'MATERIAL' ELSE 'SPAREPART' END    
    
     
 -- INSERT GLINTERFACE NO.1 (RETURN)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotReturAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.ReturnAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , a.TotReturAmt AmountDB    
  , 0 AmountCR    
  , 'RETURN' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END     
    
 -- INSERT GLINTERFACE NO.2 (TAX OUT)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotPPNAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 IF(ISNULL((    
   SELECT a.TaxOutAccNo    
   FROM GnMstCustomerClass a    
   WHERE CompanyCode = @CompanyCode    
    AND BranchCode = @BranchCode    
    AND TypeOfGoods = isnull((    
          select typeofgoods     
  from sptrnsrtursrvhdr     
          where CompanyCode = @CompanyCode    
           AND BranchCode = @BranchCode    
           AND ReturnNo = @ReturnNo),'')    
    AND ProfitCenterCode = '200'    
    AND CustomerClass = ISNULL((SELECT CustomerClass    
           FROM gnMstCustomerProfitCenter    
           WHERE CompanyCode = @CompanyCode    
            AND BranchCode = @BranchCode    
            AND CustomerCode = isnull((    
                 select CustomerCode    
                 from sptrnsrtursrvhdr     
                 where CompanyCode = @CompanyCode    
                  AND BranchCode = @BranchCode    
                  AND ReturnNo = @ReturnNo),'')    
            AND ProfitCenterCode = '200'),'')),'') = '')    
 BEGIN    
  DECLARE @errmsg VARCHAR(MAX)    
  SET @errmsg = char(13) + 'Error Message: Customer ini belum mempuyai customer class, Harap periksa kembali setting-an customer class untuk customer ini !'    
  RAISERROR (@errmsg,16,1);    
 END    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , ISNULL((    
   SELECT b.TaxOutAccNo    
   FROM GnMstCustomerClass b    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND TypeOfGoods = c.TypeOfGoods    
    AND ProfitCenterCode = '200'    
    AND CustomerCode = a.CustomerCode    
    AND CustomerClass = ISNULL((SELECT CustomerClass    
           FROM gnMstCustomerProfitCenter    
           WHERE CompanyCode = a.CompanyCode    
            AND BranchCode = a.BranchCode    
            AND CustomerCode = a.CustomerCode    
            AND ProfitCenterCode = '200'),'')),'')    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , a.TotPPNAmt AmountDB    
  , 0 AmountCR    
  , 'TAX OUT' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
    
 SET @counterGL = @counterGL + 1    
 END    
 -- INSERT GLINTERFACE NO.3 (HRETURN)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotFinalReturAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
         ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.ReturnPybAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , 0 AmountDB    
  , a.TotFinalReturAmt AmountCR    
  , 'HRETURN' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
    
 SET @counterGL = @counterGL + 1    
 END    
     
 -- INSERT GLINTERFACE NO.4 (DISC1)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotDiscAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.DiscAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , 0 AmountDB    
  , a.TotDiscAmt AmountCR    
  , 'DISC1' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
 LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END    
    
 -- INSERT GLINTERFACE NO.5 (INVENTORY)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotCostAmt      
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.InventoryAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , a.TotCostAmt AmountDB    
  , 0 AmountCR    
  , 'INVENTORY' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END    
    
 -- INSERT GLINTERFACE NO.6 (COGS)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotCostAmt      
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.COGSAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , 0 AmountDB    
  , a.TotCostAmt AmountCR    
  , 'COGS' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
 LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END    
     
 --==========================================================================================================    
 -- UPDATE STATUS HEADER    
 --==========================================================================================================    
 UPDATE spTrnSRturSrvHdr    
 SET Status = '2'    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 WHERE CompanyCode = @CompanyCode    
  AND BranchCode = @BranchCode    
  AND ReturnNo = @ReturnNo    
 FETCH NEXT FROM currReturn INTO @ReturnNo    
 END    
CLOSE currReturn    
DEALLOCATE currReturn    
    
END
GO
create procedure [dbo].[uspfn_QueryFPJGenerated]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@ProfitCenter varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @ProfitCenter  = '300'
--set @IsFPJCentral  = '1'

as
begin

select 
    y.No,y.chkSelect,y.CompanyCode,y.BranchCode,y.ProfitCenter,y.FPJGovNo
    ,y.FPJGovDate,y.DocNo,convert(datetime,y.DocDate) DocDate
from(
    select 
        row_number() over(order by DocDate, BranchCode,ProfitCenter asc) as No
        , Convert(bit, 0) chkSelect, x.CompanyCode, x.BranchCode
        , a.LookUpValueName ProfitCenter, x.FPJGovNo, x.FPJGovDate
        , x.DocNo, x.DocDate
    from (
	    SELECT	CompanyCode, BranchCode,'300' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	SpTrnSFPJHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 
                AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'200' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,FPJNo as DocNo,convert(varchar,FPJDate,112) AS DocDate
	    FROM	SvTrnFakturPajak
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'100' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	OmFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        ) 
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'000' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	ArFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
                AND DPPAMt > 0
    ) x 
    left join gnMstLookUpDtl a on a.CompanyCode= x.CompanyCode and a.CodeID='PFCN' and a.LookUpValue= x.ProfitCenter
    where x.ProfitCenter like ''+@ProfitCenter+''
) y
end
GO
create procedure [dbo].[uspfn_SpcekprosesSuggor] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@MovingCode varchar(5),@SupplierCode  varchar(10),@TypeOfGoods  varchar(15))
 as
SELECT 
 a.PartNo
,ISNULL(a.DemandAverage, 0) AS DemandAverage
,ISNULL(c.LeadTime, 0) AS LeadTime
,ISNULL(c.OrderCycle, 0) AS OrderCycle
,ISNULL(c.SafetyStock, 0) AS SafetyStock
,CAST(0 AS int) AS No
,CAST(0 AS Numeric(4,0)) AS SeqNo
,CAST(ISNULL(a.OnHand, 0) - (
    ISNULL(a.AllocationSP, 0) 
    + ISNULL(a.AllocationSL, 0) 
    + ISNULL(a.AllocationSR, 0)
    + ISNULL(a.ReservedSP, 0) 
    + ISNULL(a.ReservedSL, 0) 
    + ISNULL(a.ReservedSR, 0)
) AS decimal(18,2)) AS AvailableQty
,CAST(0 AS Numeric(4,0)) AS SuggorQty
,CAST(0 AS Numeric(4,0)) AS SuggorCorrecQty
,CAST('' AS varchar(3)) AS ProductType
,a.PartCategory
,CAST(0 AS Numeric(18,0)) AS PurchasePrice
,CAST(0 AS Numeric(18,0)) AS CostPrice
,ISNULL(a.OrderPointQty, 0) AS OrderPoint
,ISNULL(a.OnHand, 0) AS OnHand
,ISNULL(a.OnOrder, 0) AS OnOrder
,ISNULL(a.InTransit, 0) AS InTransit
,ISNULL(a.AllocationSP, 0) AS AllocationSP
,ISNULL(a.AllocationSR, 0) AS AllocationSR
,ISNULL(a.AllocationSL, 0) AS AllocationSL
,ISNULL(a.BackOrderSP, 0) AS BackOrderSP
,ISNULL(a.BackOrderSR, 0) AS BackOrderSR
,ISNULL(a.BackOrderSL, 0) AS BackOrderSL
,ISNULL(a.ReservedSP, 0) AS ReservedSP
,ISNULL(a.ReservedSR, 0) AS ReservedSR
,ISNULL(a.ReservedSL, 0) AS ReservedSL
FROM spMstItems a with(nolock, nowait)
INNER JOIN spMstItemInfo b with(nolock, nowait) ON b.CompanyCode=a.CompanyCode AND b.PartNo=a.PartNo
INNER JOIN SpMstOrderParam c with(nolock, nowait) ON c.CompanyCode=a.CompanyCode AND c.BranchCode=a.BranchCode AND 
		   c.SupplierCode=b.SupplierCode AND c.MovingCode=a.MovingCode
WHERE a.CompanyCode=@CompanyCode 
AND a.BranchCode=@BranchCode
AND a.MovingCode=@MovingCode
AND b.SupplierCode=@SupplierCode
AND a.TypeOfGoods=@TypeOfGoods
AND a.Status = '1'
GO
-- =============================================
-- Author:		David L.
-- Create date: 22 Sep 2014
-- Description:	Get Customer For Report Register 011 & 017B
--              (Report Register Penjualan Per Pelanggan (Tunai&Kredit))
-- =============================================
create PROCEDURE [dbo].[uspfn_spCustRptRgs] 
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@DateFrom datetime,
	@DateTo datetime,
	@PartType varchar(2),
	@PaymentCode nchar(1)
AS
BEGIN
	declare @TOPC varchar(15)
	set @TOPC = 'TOPC'

	if(@PaymentCode = '0')
	begin	
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     = 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else if(@PaymentCode = '1')
	begin 
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     > 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else
	begin
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
END
GO
CREATE procedure [dbo].[uspfn_spGet4FakturRetur] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(15)
as
select a.FPJNo
    , a.FPJDate
    , a.CustomerCode
    , isnull((
			select CustomerName from gnMstCustomer
			 where CompanyCode = a.CompanyCode and CustomerCode = a.CustomerCode
			), '') as CustomerName  
 from spTrnSFpjHdr a, gnMstCoProfileSpare b
where 1 = 1
  and b.CompanyCode = a.CompanyCode
  and b.BranchCode = a.BranchCode
  and a.CompanyCode = @CompanyCode
  and a.BranchCode  = @BranchCode 
  and a.TypeOfGoods = @TypeOfGoods
GO
create procedure [dbo].[uspfn_spGetDcsUploadFile] @ProductType varchar(2), @ProductType1 varchar(2),
   @DataID varchar(6), @DateFrom datetime, @DateTo datetime 
   as
   select ID, DataID, CustomerCode, ProductType, Contents
     , CASE WHEN Status = 'A' THEN 'BARU' ELSE CASE WHEN Status = 'X' THEN 'GAGAL' ELSE CASE WHEN Status = 'P' THEN 'BERHASIL' END END END Status
     , CreatedDate, UpdatedDate, Header
  from gnDcsUploadFile
 where 1 = 1
   and DataID = @DataID
   and (convert(varchar, CreatedDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112)) 
   and ProductType in (@ProductType,@ProductType1)
   and Status = 'A'
GO
CREATE PROCEDURE [dbo].[uspfn_spGetDcsUploadFileAllStatus] @ProductType varchar(2), @ProductType1 varchar(2),
   @DataID varchar(6), @DateFrom datetime, @DateTo datetime 
   as
   select ID, DataID, CustomerCode, ProductType, Contents
     , CASE WHEN Status = 'A' THEN 'BARU' ELSE CASE WHEN Status = 'X' THEN 'GAGAL' ELSE CASE WHEN Status = 'P' THEN 'BERHASIL' END END END Status
     , CreatedDate, UpdatedDate, Header
  from gnDcsUploadFile
 where 1 = 1
   and DataID = @DataID
   and (convert(varchar, CreatedDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112)) 
   and ProductType in (@ProductType,@ProductType1)
GO
CREATE procedure [dbo].[uspfn_spGetMaxQtyReturPenjualan] 
@CompanyCode varchar(15), @BranchCode varchar(15), @PartNo varchar(25), 
@PartNoOriginal  varchar(25), @ReturnNo varchar(15), @DocNo varchar(25), @FPJNo varchar(15)
as
SELECT 
            ISNULL((SELECT QtyBill FROM spTrnSFPJDtl WHERE FPJNo = @FPJNo AND 
                PartNo = @PartNo AND 
                PartNoOriginal = @PartNoOriginal AND
				DocNo = @DocNo AND
                CompanyCode = @CompanyCode AND
                BranchCode = @BranchCode
             ) -
            ISNULL(SUM (QtyReturn),0), 0) AS MaxQtyRetur FROM spTrnSRturdtl
            LEFT JOIN spTrnSRturHdr ON spTrnSRturHdr.ReturnNo = spTrnSRturdtl.ReturnNo AND
                spTrnSRturHdr.CompanyCode = spTrnSRturdtl.CompanyCode AND
                spTrnSRturHdr.BranchCode = spTrnSRturdtl.BranchCode
            WHERE spTrnSRturdtl.CompanyCode = @CompanyCode
                AND spTrnSRturdtl.BranchCode = @BranchCode
                AND spTrnSRturHdr.FPJNo = @FPJNo
                AND spTrnSRturdtl.PartNo = @PartNo
                AND spTrnSRturdtl.PartNoOriginal = @PartNoOriginal
				AND spTrnSRturDtl.DocNo = @DocNo
                AND spTrnSRturHdr.Status NOT IN ('3')
                AND spTrnSRturdtl.ReturnNo <> @ReturnNo
GO
CREATE procedure [dbo].[uspfn_spGetPartReturDetails] @CompanyCode varchar(15), @BranchCode varchar(15), @FPJNo varchar(25),
@TypeOfGoods varchar(3), @ProductType varchar(3)
as
select distinct a.PartNo, a.PartNoOriginal, a.QtyBill, a.DocNo
from	spTrnSFPJDtl a, spTrnSFPJHdr c with(nolock, nowait)
where	a.CompanyCode = @CompanyCode
        and a.BranchCode = @BranchCode
        and c.CompanyCode = @CompanyCode
        and c.BranchCode = @BranchCode
        and a.FPJNo = c.FPJNo
        and a.FPJNo = @FPJNo
		and TypeOfGoods = @TypeOfGoods
		and ProductType = @ProductType
        and (a.QtyBill - 
(select ISNULL(SUM (QtyReturn),0) AS MaxQtyRetur FROM spTrnSRturdtl
LEFT JOIN spTrnSRturHdr ON spTrnSRturHdr.ReturnNo = spTrnSRturdtl.ReturnNo AND
spTrnSRturHdr.CompanyCode = spTrnSRturdtl.CompanyCode AND
spTrnSRturHdr.BranchCode = spTrnSRturdtl.BranchCode
WHERE spTrnSRturdtl.CompanyCode = @CompanyCode
AND spTrnSRturdtl.BranchCode = @BranchCode
AND spTrnSRturHdr.FPJNo = a.FPJNo --''FPJ/08/000003''
AND spTrnSRturdtl.PartNo = a.PartNo --''P002''
AND spTrnSRturdtl.PartNoOriginal = a.PartNoOriginal -- ''Y-001''
AND spTrnSRturDtl.DocNo = a.DocNo --''SOC/08/000095''
AND TypeOfGoods = @TypeOfGoods
AND ProductType = @ProductType
AND spTrnSRturHdr.Status = 2)) > 0
GO
CREATE procedure [dbo].[uspfn_spGetReturnDtlByReturnNo] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(20)
as
select row_number () OVER (ORDER BY spTrnSRturDtl.CreatedDate ASC) AS NoUrut, 
spTrnSRturDtl.PartNo, spTrnSRturDtl.PartNoOriginal, spTrnSRturDtl.DocNo, spTrnSRturDtl.QtyReturn, spTrnSFPJDtl.QtyBill
                from	spTrnSRturDtl
                left join spTrnSRturHdr on spTrnSRturHdr.CompanyCode = spTrnSRturDtl.CompanyCode and
                    spTrnSRturHdr.BranchCode = spTrnSRturDtl.BranchCode and
                    spTrnSRturHdr.ReturnNo = spTrnSRturDtl.ReturnNo
                left join spTrnSFPJDtl on spTrnSFPJDtl.CompanyCode = spTrnSRturDtl.CompanyCode and
                    spTrnSFPJDtl.BranchCode = spTrnSRturDtl.BranchCode and
                    spTrnSFPJDtl.FPJNo = spTrnSRturHdr.FPJNo and
                    spTrnSFPJDtl.DocNo = spTrnSRturDtl.DocNo and
                    spTrnSFPJDtl.PartNo = spTrnSRturDtl.PartNo and
                    spTrnSFPJDtl.PartNoOriginal = spTrnSRturDtl.PartNoOriginal
                where	spTrnSRturDtl.CompanyCode = @CompanyCode and 
                        spTrnSRturDtl.BranchCode = @BranchCode and
                        spTrnSRturDtl.ReturnNo = @ReturnNo
GO
CREATE procedure [dbo].[uspfn_spGetRturSumAmt] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(20)
as  
 SELECT	ReturnNo, sum(QtyReturn) as TotReturQty, sum(ReturAmt) as TotReturAmt,
                        sum(DiscAmt) as TotDiscAmt, sum(NetReturAmt) as TotDPPAmt,
                        sum(PPNAmt) as TotPPNAmt, sum(TotReturAmt) as TotFinalReturAmt,
                        sum(CostAmt) as TotCostAmt 
                FROM	spTrnSRturDtl with (nolock, nowait)
                WHERE	CompanyCode = @CompanyCode
                        and BranchCode = @BranchCode
                        and ReturnNo = @ReturnNo
                GROUP BY ReturnNo
GO
create procedure [dbo].[uspfn_spGetTrnSFPJDtl] @CompanyCode varchar(15), @BranchCode varchar(15), @FPJNo varchar(25)
as
SELECT 
 row_number () OVER (ORDER BY spTrnSFPJDtl.CreatedDate ASC) AS NoUrut,
 spTrnSFPJDtl.PartNo,
 spTrnSFPJDtl.PartNoOriginal,
 spTrnSFPJDtl.DocNo,
 CONVERT(VARCHAR, spTrnSFPJDtl.DocDate, 106) AS DocDate,
 spTrnSORDHdr.OrderNo,
 spTrnSORDHdr.OrderDate,
 spTrnSFPJDtl.QtyBill
FROM spTrnSFPJDtl
INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.CompanyCode = spTrnSFPJDtl.CompanyCode
    AND spTrnSORDHdr.BranchCode = spTrnSFPJDtl.BranchCode  
	AND spTrnSORDHdr.DocNo = spTrnSFPJDtl.DocNo
WHERE spTrnSFPJDtl.CompanyCode=@CompanyCode AND 
spTrnSFPJDtl.BranchCode=@BranchCode AND 
FPJNo = @FPJNo
GO
create procedure [dbo].[uspfn_spGetTrnSInvoiceDtl] @CompanyCode varchar(15),
	@BranchCode varchar(15), @InvoiceNo varchar(25)
as
SELECT 
 row_number () OVER (ORDER BY spTrnSInvoiceDtl.CreatedDate ASC) AS NoUrut,
 spTrnSInvoiceDtl.PartNo,
 spTrnSInvoiceDtl.PartNoOriginal,
 spTrnSInvoiceDtl.DocNo,
 CONVERT(VARCHAR, spTrnSInvoiceDtl.DocDate, 106) AS DocDate,
 spTrnSORDHdr.OrderNo,
 spTrnSORDHdr.OrderDate,
 spTrnSInvoiceDtl.QtyBill
FROM spTrnSInvoiceDtl
INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSInvoiceDtl.DocNo AND
spTrnSORDHdr.CompanyCode = spTrnSInvoiceDtl.CompanyCode AND
spTrnSORDHdr.BranchCode = spTrnSInvoiceDtl.BranchCode
WHERE spTrnSInvoiceDtl.CompanyCode=@CompanyCode AND 
spTrnSInvoiceDtl.BranchCode=@BranchCode AND 
InvoiceNo = @InvoiceNo
GO
CREATE procedure [dbo].[uspfn_spInquiry_ListADO]
	@ParentCode		varchar(100),
	@Detail			int 
AS
Begin

	if (@Detail = 1)
	begin
		select distinct convert(varchar,a.GroupNo) [value], a.Area [text]
		from gnMstDealerMapping a
		where a.isActive = 1
		order by [value] asc
	end
	else if(@Detail = 2)
	begin
		
		declare @JBDTB INT
		SET @JBDTB = 0

		if @ParentCode <> ''
		begin
			if (@ParentCode='JABODETABEK' or @ParentCode = 'CABANG')
				SET @JBDTB = 1
		end 
		ELSE
			SET @ParentCode = '%%'

		IF @JBDTB = 1
		BEGIN
			select distinct a.DealerCode [value], a.DealerName [text], convert(varchar,a.GroupNo) [parent]
			from gnMstDealerMapping a
			where a.Area IN ('JABODETABEK', 'CABANG') and a.isActive = 1
			order by a.DealerCode
		END
		ELSE
			select distinct a.DealerCode [value], a.DealerName [text], convert(varchar,a.GroupNo) [parent]
			from gnMstDealerMapping a
			where (a.Area like @ParentCode) and a.isActive = 1
			order by a.DealerCode
	end
	else if(@Detail = 3)
	begin

		select distinct  b.OutletCode [value], b.OutletName [text],a.DealerCode [parent]
		from gnMstDealerMapping a
		left join gnMstDealerOutletMapping b on a.DealerCode = b.DealerCode
		where (a.DealerCode like case when @ParentCode <> '' then @ParentCode else '%%' end) and a.isActive = 1
		order by b.OutletName
	end
end
GO
-- =============================================
-- Author:		David Leonardo
-- Create date: 6 November 2014
-- Description:	Select Lampiran for Print
-- =============================================
create PROCEDURE [dbo].[uspfn_spLampiranForPrint]
	-- Add the parameters for the stored procedure here
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@JobOrderNo varchar(50)
AS
BEGIN
	SELECT a.LmpNo,a.PickingSlipNo, a.TypeOfGoods, a.TransType,
                SubString(a.TransType,1,1) SalesType,
                (SELECT TOP 1 DocNo FROM SpTrnSPickingDtl 
                    WHERE CompanyCode = a.CompanyCode 
                    AND BranchCode = a.BranchCode 
                    AND PickingSlipNo = a.PickingSlipNo) DocNo 
               FROM spTrnSLmpHdr a WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND 
                    a.PickingSlipNo IN (@JobOrderNo)
END
GO
-- =============================================
-- Author:		David Leonardo
-- Create date: 23 October 2014
-- Description:	Log Header
-- Sementara ini baru dipakai di Pembelian - Entry Order
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spLogHeader]
	(
	@DataID varchar(20),
	@CustomerCode varchar(20),
	@ProductType varchar(20),
	@Status varchar(10),
	@CreatedDate datetime,
	@Header varchar(max)
	)
AS
BEGIN
declare 	
@ID numeric(18,0), 
@Range numeric(18,0)

	 select @ID = (select isnull(max(id), 0) from gnDcsUploadFile), @Range = 9000000000
	 if (@ID < @range)
	 set @ID = @Range + 1
     else
	 set @ID = @ID + 1

     insert into gnDcsUploadFile
           ( ID, DataID, CustomerCode, ProductType, Status, CreatedDate, Header)
     values(@ID,@DataID,@CustomerCode,@ProductType,@Status,@CreatedDate,@Header)
END
GO
-- =============================================
-- Author:		David Leonardo
-- Create date: 6 November 2014
-- Description:	Select Supply Slip for Print
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spPickingSlipForPrint]
	-- Add the parameters for the stored procedure here
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@ProductType varchar(5),
	@JobOrderNo varchar(50)
AS
BEGIN
	SELECT * INTO #t1 FROM (
                SELECT
                    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
                    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
                    d.PickedBy
                FROM
                    svTrnService a
                LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
	                AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
                LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
	                AND c.DocNo = b.SupplySlipNo
                LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
	                AND d.PickingSlipNo = c.ExPickingSlipNo
                LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
	                AND e.PickingSlipNo = d.PickingSlipNo
                LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
                    AND f.LookUpValue = c.TransType
                LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
                    AND g.PickingSlipNo = d.PickingSlipNo
                WHERE 
                    a.CompanyCode     = @CompanyCode
                    AND a.BranchCode  = @BranchCode
                    AND a.ProductType = @ProductType
                    AND a.jobOrderNo  = @JobOrderNo
                    AND b.SupplySlipNo <> ''
                    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode =  @CompanyCode AND BranchCode = @BranchCode
		                   AND ProductType = '4W' AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
                    AND d.Status < 2
            )#t1
            
            select a.PickingSlipNo, a.TypeOfGoods, a.TransType, a.SalesType,
            (SELECT TOP 1 DocNo FROM SpTrnSPickingDtl 
                WHERE CompanyCode = a.CompanyCode 
                    AND BranchCode = a.BranchCode 
                    AND PickingSlipNo = a.PickingSlipNo) DocNo 
            from spTrnSpickingHdr a
            where  CompanyCode =  @CompanyCode
				AND BranchCode = @BranchCode
				AND a.pickingSlipNo IN 
                (SELECT DISTINCT PickingSlipNo FROM #t1)
				AND Salestype = 2
            DROP TABLE #t1
END
GO
create procedure [dbo].[uspfn_spPPOSDtl4Table] @CompanyCode varchar(15), @BranchCode varchar(15), @POSNo varchar(25)
as
SELECT 
    row_number () OVER (ORDER BY a.CreatedDate desc) AS NoUrut,
    a.PartNo,
    a.OrderQty, 
    a.DiscPct, 
    a.PurchasePrice, 
    (SELECT PartName FROM spMstItemInfo WHERE PartNo = a.PartNo AND CompanyCode = a.CompanyCode) PartName,
    a.CostPrice, a.ABCClass, a.MovingCode, a.TotalAmount
	,case 
		when isnull(b.LockingBy,'')='' then a.CompanyCode
		else b.LockingBy
	end ShipTo
    , (select TOP 1 isnull(ParaValue, '') from gnMstLookUpDtl where companyCode = @CompanyCode and CodeId = 'PORDS') ParaValue
    ,case 
        when isnull(b.LockingBy,'')='' then a.BranchCode
        else b.LockingBy
	end Dealer
    , a.Note
FROM spTrnPPOSDtl a
	left join gnMstCoProfileSpare b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
WHERE a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.POSNo = @POSNo
GO
CREATE procedure [dbo].[uspfn_spProcessSuggor] 
(  
		@CompanyCode varchar(10),
		@BranchCode varchar(10),
		@MovingCode varchar(5),
		@SupplierCode  varchar(10),
		@TypeOfGoods  varchar(15)
)
 as
SELECT
 a.PartNo
,ISNULL(a.DemandAverage, 0) AS DemandAverage
,ISNULL(c.LeadTime, 0) AS LeadTime
,ISNULL(c.OrderCycle, 0) AS OrderCycle
,ISNULL(c.SafetyStock, 0) AS SafetyStock
,CAST(0 AS int) AS No
,CAST(0 AS Numeric(4,0)) AS SeqNo
,CAST(ISNULL(a.OnHand, 0) - (
    ISNULL(a.AllocationSP, 0) 
    + ISNULL(a.AllocationSL, 0) 
    + ISNULL(a.AllocationSR, 0)
    + ISNULL(a.ReservedSP, 0) 
    + ISNULL(a.ReservedSL, 0) 
    + ISNULL(a.ReservedSR, 0)
) AS decimal(18,2)) AS AvailableQty
,CAST(0 AS Numeric(4,0)) AS SuggorQty
,CAST(0 AS Numeric(4,0)) AS SuggorCorrecQty
,CAST('' AS varchar(3)) AS ProductType
,a.PartCategory
,CAST(0 AS Numeric(18,0)) AS PurchasePrice
,CAST(0 AS Numeric(18,0)) AS CostPrice
,ISNULL(a.OrderPointQty, 0) AS OrderPoint
,ISNULL(a.OnHand, 0) AS OnHand
,ISNULL(a.OnOrder, 0) AS OnOrder
,ISNULL(a.InTransit, 0) AS InTransit
,ISNULL(a.AllocationSP, 0) AS AllocationSP
,ISNULL(a.AllocationSR, 0) AS AllocationSR
,ISNULL(a.AllocationSL, 0) AS AllocationSL
,ISNULL(a.BackOrderSP, 0) AS BackOrderSP
,ISNULL(a.BackOrderSR, 0) AS BackOrderSR
,ISNULL(a.BackOrderSL, 0) AS BackOrderSL
,ISNULL(a.ReservedSP, 0) AS ReservedSP
,ISNULL(a.ReservedSR, 0) AS ReservedSR
,ISNULL(a.ReservedSL, 0) AS ReservedSL
FROM spMstItems a with(nolock, nowait)
INNER JOIN spMstItemInfo b with(nolock, nowait) ON b.CompanyCode=a.CompanyCode AND b.PartNo=a.PartNo
INNER JOIN SpMstOrderParam c with(nolock, nowait) ON c.CompanyCode=a.CompanyCode AND c.BranchCode=a.BranchCode AND 
		   c.SupplierCode=b.SupplierCode AND c.MovingCode=a.MovingCode
WHERE a.CompanyCode=@CompanyCode 
AND a.BranchCode=@BranchCode
AND a.MovingCode=@MovingCode
AND b.SupplierCode=@SupplierCode
AND a.TypeOfGoods=@TypeOfGoods
AND a.Status = '1'
GO
CREATE procedure [dbo].[uspfn_spTrnPPOSHdrView] 
@CompanyCode varchar(10),@BranchCode varchar(10),
@TypeOfGoods varchar(10),
 @Status  int
as               
				
				SELECT a.POSNo, a.PosDate , a.Status ,a.SupplierCode ,b.SupplierName
                FROM spTrnPPOSHdr a
                INNER JOIN gnMstSupplier b ON b.SupplierCode = a.SupplierCode and b.CompanyCode = a.CompanyCode
                WHERE a.CompanyCode=@CompanyCode 
                AND a.BranchCode=@BranchCode
                AND a.TypeOfGoods=@TypeOfGoods
GO
CREATE procedure [dbo].[uspfn_SvGetWRcvClaimDtlFile]
	@CompanyCode  varchar(15),
	@BranchCode   varchar(15),
	@ProductType varchar(15),
	@Reimbursement varchar(15),
	@ReceivedDate datetime,
	@ReceivedDealerCode varchar(15) 	
as
set nocount on
begin
	select 
		a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateSeq
		,a.SuzukiRefferenceNo, a.ReceivedDate, a.DivisionCode, a.JudgementCode
		,a.PaymentOprAmt, a.PaymentOprHour, a.PaymentSubletAmt, a.PaymentSubletHour
		, ActualLaborTime = right('000'+convert(varchar(3),convert(int,a.PaymentOprHour * 10)),3)
		, SubletWorkTime = right('000'+convert(varchar(3),convert(int,a.PaymentSubletHour * 10)),3)
		,(a.PaymentOprAmt + a.PaymentSubletAmt + d.PaymentTotalPrice) TotalClaimAmt
		,d.PaymentTotalPrice PartCost
		,b.SenderDealerCode, b.LotNo 	
		,SUBSTRING(c.IssueNo, 1, PATINDEX('%-%', c.IssueNo) - 1) IssueNo
		, c.ServiceBookNo, c.ChassisCode, c.ChassisNo, c.EngineCode
		,c.EngineNo, c.OperationNo, c.TechnicalModel
	from 
		SvTrnClaimJudgement a
		inner join SvTrnClaim b on a.CompanyCode = b.CompanyCode 
			and a.BranchCode = b.BranchCode and a.ProductType = b.ProductType
			and a.GenerateNo = b.GenerateNo
		inner join SvTrnClaimApplication c on a.CompanyCode = c.CompanyCode
			and a.BranchCode = c.BranchCode and a.ProductType = c.ProductType 
			and a.GenerateNo = c.GenerateNo and a.GenerateSeq = c.GenerateSeq		
		inner join (	
			Select 
				a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateSeq
				,sum(b.PaymentTotalPrice) PaymentTotalPrice
			from 
			SvTrnClaimJudgement a
				inner join SvTrnClaimPart b on a.CompanyCode = b.CompanyCode 
					and a.BranchCode = b.BranchCode and a.ProductType = b.ProductType
					and a.GenerateNo = b.GenerateNo and a.GenerateSeq = b.GenerateSeq
				inner join SvTrnClaim c on a.CompanyCode = c.CompanyCode 
					and a.BranchCode = b.BranchCode and a.ProductType = c.ProductType
					and a.GenerateNo = c.GenerateNo
			where 
				a.CompanyCode = @CompanyCode
				and a.BranchCode = @BranchCode
				and a.ProductType = @ProductType
				and a.SuzukiRefferenceNo = @Reimbursement
				and Convert(varchar, a.ReceivedDate, 110) = @ReceivedDate
				and c.SenderDealerCode = @ReceivedDealerCode			
			group by a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateSeq
		) as d on a.CompanyCode = d.CompanyCode and a.BranchCode = d.BranchCode 
			and a.ProductType = d.ProductType and a.GenerateNo = d.GenerateNo 
			and a.GenerateSeq = d.GenerateSeq
	where 
		a.CompanyCode = @CompanyCode
		and a.BranchCode = @BranchCode
		and a.ProductType = @ProductType
		and a.SuzukiRefferenceNo = @Reimbursement
		and Convert(varchar, a.ReceivedDate, 110) = @ReceivedDate
		and b.SenderDealerCode = @ReceivedDealerCode
end
GO
CREATE procedure [dbo].[uspfn_SvGetWRcvClaimHdrFile]
	@CompanyCode  varchar(15),
	@BranchCode   varchar(15),
	@ProductType varchar(15),
	@DataID varchar(15),
	@ReimbursementNo varchar(15),
	@ReceiveDealerCode varchar(15),
	@ReceiveDate datetime,
	@SenderDealerName varchar(50) 	
as

set nocount on
begin
	select
		RecordID, DataID, DealerCode, ReceivedDealerCode, ReceivedDealerName
		, DealerName, TotalItems = (		
			select 
				count(app.GenerateSeq)	
			from 
				SvTrnClaim cla 
				inner join SvTrnClaimJudgement jud on cla.CompanyCode = jud.CompanyCode 
					and cla.BranchCode = jud.BranchCode and cla.ProductType = jud.ProductType
					and cla.GenerateNo = jud.GenerateNo
				inner join SvtrnClaimApplication app on cla.CompanyCode = app.CompanyCode 
					and cla.BranchCode = app.BranchCode and cla.ProductType = app.ProductType
					and cla.GenerateNo = app.GenerateNo and app.GenerateSeq = jud.GenerateSeq
			where
				cla.CompanyCode = @CompanyCode
				and cla.BranchCode = @BranchCode
				and cla.ProductType = @ProductType
				and jud.SuzukiRefferenceNo = @ReimbursementNo
				and cla.SenderDealerCode = @ReceiveDealerCode
				and Convert(varchar, jud.ReceivedDate , 110) = @ReceiveDate	
		), ProductType = '4W' , ReimbursementNo
		, ReimbursementDate , BlankFiller = ''
	from (
		select TOP 1
			RecordID = 'H'
			, DataID = @DataID
			, DealerCode = a.CompanyCode
			, a.SenderDealerCode ReceivedDealerCode
			, a.SenderDealerName ReceivedDealerName
			, DealerName = @SenderDealerName
			, ProductType = a.ProductType
			, b.SuzukiRefferenceNo ReimbursementNo
			, SuzukiRefferenceDate ReimbursementDate
			, BlankFiller = ''
		from 
			SvTrnClaim a
			inner join SvTrnClaimJudgement b on a.CompanyCode = b.CompanyCode 
				and a.BranchCode = b.BranchCode and a.ProductType = b.ProductType
				and a.GenerateNo = b.GenerateNo
		where
			a.CompanyCode = @CompanyCode
			and a.BranchCode = @BranchCode
			and a.ProductType = @ProductType
			and b.SuzukiRefferenceNo = @ReimbursementNo
			and a.SenderDealerCode = @ReceiveDealerCode
			and Convert(varchar, b.ReceivedDate, 110) = @ReceiveDate	
	) as Header
end
GO
create procedure [dbo].[uspfn_SyncCsCustomerViewInitialize]
as
begin
	;with x as (
	select a.CompanyCode
		 , BranchCode = isnull((
			select top 1 BranchCode from OmTrSalesSo
			 where CompanyCode = a.CompanyCode
			  and CustomerCode = a.CustomerCode
			order by SODate desc), '')
		 , a.CustomerCode
		 , a.CustomerName
		 , a.CustomerType
		 , rtrim(a.Address1) + ' ' + rtrim(a.Address2) + rtrim(a.Address3) as Address
		 , a.PhoneNo
		 , a.HPNo
		 , b.AddPhone1
		 , b.AddPhone2
		 , a.BirthDate
		 , b.ReligionCode
		 , a.CreatedDate
		 , a.LastUpdateDate
	  from GnMstCustomer a
	  left join CsCustData b
		on b.CompanyCode = a.CompanyCode
	   and b.CustomerCode = a.CustomerCode
	 where 1 = 1
	   and a.CustomerType = 'I'
	   and a.BirthDate is not null
	   and a.BirthDate > '1900-01-01'
	   and (year(getdate() - year(a.BirthDate))) > 5
	   and year(a.LastUpdateDate) = year(getdate())
	)
	select * into #t1 from (select * from x where BranchCode != '')#

--	delete CsCustomerView
--	 where exists (
--		select top 1 1 from #t1
--		 where #t1.CompanyCode = CsCustomerView.CompanyCode
--		   and #t1.BranchCode = CsCustomerView.BranchCode
--		   and #t1.CustomerCode = CsCustomerView.CustomerCode
--	 )
--	insert into CsCustomerView (CompanyCode, BranchCode, CustomerCode, CustomerName, CustomerType, Address, PhoneNo, HPNo, AddPhone1, AddPhone2, BirthDate, ReligionCode, CreatedDate, LastUpdateDate)
--	select * from #t1

--	drop table CsCustomerView
	select * into CsCustomerView from #t1


	drop table #t1
end
GO
create procedure [dbo].[uspfn_TaxCheckPendingDocument]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @IsFPJCentral  = '1'

AS
BEGIN
SELECT InvoiceNo , InvoiceDate 
FROM OmTrSalesInvoice 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		)
	AND isStandard = '1' 
	AND isnull ( FakturPajakNo , '' ) = '' 
	AND Status <> '3' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 
EXCEPT 
SELECT InvoiceNo , InvoiceDate 
FROM OmFakturPajakHdr 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		)
	AND TaxType = 'Standard' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 

UNION 

SELECT InvoiceNo , InvoiceDate 
FROM ARTrnInvoiceHdr 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		) 
	AND StatusTax = '1' 
	AND isnull ( FPJNo , '' ) = '' 
	AND Status <> '1' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 
EXCEPT 
SELECT InvoiceNo , InvoiceDate 
FROM ARFakturPajakHdr 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		)
	AND TaxType = 'Standard' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate
END
GO
create procedure [dbo].[uspfn_TaxCheckPendingDocumentFPJ]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@IsFPJCentral bit,
@DocNo varchar(max)

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit
--declare @DocNo as varchar(max)

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @IsFPJCentral  = '1'
--set @DocNo = ''

as
begin
select x.*
from(
    SELECT	BranchCode,InvoiceNo, convert(varchar,InvoiceDate,112) InvoiceDate
    FROM	OmFakturPajakHdr
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND TaxType = 'Standard'
		    AND CONVERT(VARCHAR, InvoiceDate, 112) >= @StartDate AND CONVERT(VARCHAR, InvoiceDate, 112) < @FPJDate
	    UNION
    SELECT	BranchCode,InvoiceNo, convert(varchar,InvoiceDate,112) InvoiceDate
    FROM	ARFakturPajakHdr
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND TaxType = 'Standard'
		    AND CONVERT(VARCHAR, InvoiceDate, 112) >= @StartDate AND CONVERT(VARCHAR, InvoiceDate, 112) < @FPJDate
	    UNION
    SELECT	BranchCode,InvoiceNo, convert(varchar,InvoiceDate,112) InvoiceDate
    FROM	SPTrnSFPJHdr
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND isPKP = 1
		    AND CONVERT(VARCHAR, InvoiceDate, 112) >= @StartDate AND CONVERT(VARCHAR, InvoiceDate, 112) < @FPJDate
	    UNION
    SELECT	BranchCode,FPJNO AS  InvoiceNo, convert(varchar,FPJDate,112) AS InvoiceDate 
    FROM	SVTrnFakturPajak
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND isPKP = 1
		    AND CONVERT(VARCHAR, FPJDate, 112) >= @StartDate AND CONVERT(VARCHAR, FPJDate, 112) < @FPJDate
		    AND (select TOP 1 TotalSrvAmt 
				   from svTrnInvoice 
				  where CompanyCode = @CompanyCode 
				    AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
							or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
							) 
					and FPJNo = SVTrnFakturPajak.FPJNo) <> 0
    EXCEPT
    SELECT	BranchCode,DocNo AS InvoiceNo, convert(varchar,DocDate,112) AS InvoiceDate 
    FROM	GnGenerateTax
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
		    AND CONVERT(VARCHAR, DocDate, 112) >= @StartDate AND CONVERT(VARCHAR, DocDate, 112) < @FPJDate
) x
where (case when @DocNo != '' then @DocNo else '' end) not like '%|'+x.BranchCode+' '+x.InvoiceNo+'|%'
end
GO
create procedure [dbo].[uspfn_TaxCheckValidTransaction]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @IsFPJCentral  = '1'

AS
BEGIN
SELECT TR.* FROM 
( 
    SELECT 
		CompanyCode , BranchCode , '300' AS ProfitCenterCode , InvoiceNo AS DocNo , 
		InvoiceDate AS DocDate , DueDate , FPJNo AS RefNo , FPJDate AS RefDate 
    FROM 
		SPTrnSFPJHdr 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND isPKP = 1 
		AND isnull ( FPJGovNo , '' ) = '' 
		AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate
    UNION 

    SELECT 
		CompanyCode , BranchCode , '200' AS ProfitCenterCode , FPJNo AS DocNo , 
		FPJDate AS DocDate , DueDate , '' AS RefNo , NULL AS RefDate 
    FROM 
		SVTrnFakturPajak 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND isPKP = 1 
		AND isnull ( FPJGovNo , '' ) = '' 
		AND convert ( varchar , FPJDate , 112 ) BETWEEN @StartDate AND @FPJDate
    UNION 

    SELECT 
		CompanyCode , BranchCode , '100' AS ProfitCenterCode , InvoiceNo AS DocNo , 
		InvoiceDate AS DocDate , DueDate , '' AS RefNo , NULL AS RefDate 
    FROM 
		OmFakturPajakHdr 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND TaxType = 'Standard' 
		AND isnull ( FakturPajakNo , '' ) = '' 
		AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate
    UNION 

    SELECT 
		CompanyCode , BranchCode , '000' AS ProfitCenterCode , InvoiceNo AS DocNo , 
		InvoiceDate AS DocDate , DueDate , FPJNo AS RefNo , FPJDate AS RefDate 
    FROM 
		ARFakturPajakHdr 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND TaxType = 'Standard' 
		AND isnull ( FakturPajakNo , '' ) = '' 
		AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 
) 
AS TR
END
GO
-- =============================================
-- Author:		<yo>
-- Create date: <5 Agust 14>
-- Description:	<Query FPJ Generated>
-- =============================================

CREATE procedure [dbo].[uspfn_TaxQueryFPJGenerated]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@ProfitCenter varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @ProfitCenter  = '300'
--set @IsFPJCentral  = '1'

as
begin

select 
    y.No,y.chkSelect,y.CompanyCode,y.BranchCode,y.ProfitCenter,y.FPJGovNo
    ,isnull(y.FPJGovDate,'')FPJGovDate,y.DocNo, convert(varchar, convert(datetime,y.DocDate), 106) DocDate
from(
    select 
        row_number() over(order by DocDate, BranchCode,ProfitCenter asc) as No
        , Convert(bit, 0) chkSelect, x.CompanyCode, x.BranchCode
        , a.LookUpValueName ProfitCenter, x.FPJGovNo, x.FPJGovDate
        , x.DocNo, x.DocDate
    from (
	    SELECT	CompanyCode, BranchCode,'300' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	SpTrnSFPJHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 
                AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'200' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,FPJNo as DocNo,convert(varchar,FPJDate,112) AS DocDate
	    FROM	SvTrnFakturPajak
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'100' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	OmFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        ) 
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'000' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	ArFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
                AND DPPAMt > 0
    ) x 
    left join gnMstLookUpDtl a on a.CompanyCode= x.CompanyCode and a.CodeID='PFCN' and a.LookUpValue= x.ProfitCenter
    where x.ProfitCenter like ''+@ProfitCenter+''
) y
end
GO
create procedure [dbo].[uspsys_SaveMessageBoard]
	@MessageID     int,
	@MessageHeader varchar(255),
	@MessageText   varchar(max),
	@MessageTo     varchar(10),
	@MessageTarget varchar(max),
    @MessageParams varchar(50),
	@CreatedBy     varchar(20)
as

insert into SysMessageBoards
select (isnull((select max(MessageID) from SysMessageBoards), 0) + 1)
	 , @MessageHeader, @MessageText, @MessageTo, @MessageTarget, @MessageParams,null,null,@CreatedBy, getdate(), null, null
GO
if object_id('uspfn_GenerateBPSLampiran') is not null
	drop procedure uspfn_GenerateBPSLampiran
GO
CREATE procedure [dbo].[uspfn_GenerateBPSLampiran]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl


UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================

SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	
--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	
	SELECT * INTO #Valid_2 FROM(
	SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND b.PickingSlipNo = @PickingSlipNo
		AND a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo) #Valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM #Valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM #Valid_2 WHERE QtyValidOnhand < 0),0)

	DROP TABLE #Valid_2

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		RAISERROR (@errmsg,16,1);
		RETURN
	END
--===============================================================================================================================

UPDATE SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo

UPDATE SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.WarehouseCode = '00'
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END
CLOSE db_cursor
DEALLOCATE db_cursor 


--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
END
GO

if object_id('uspfn_GenerateLampiranNP') is not null
	drop procedure uspfn_GenerateLampiranNP
GO
-- uspfn_GenerateLampiranNP '6092401', '609240100', 'PLS/11/014757', '2011-04-28 08:25:59.060', '2W', 'ARYO', '1'
CREATE procedure [dbo].[uspfn_GenerateLampiranNP]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@PickingSlipNo	VARCHAR(MAX),
	@LmpDate		DATETIME,
	@ProductType	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@TypeOfGoods	VARCHAR(MAX)
AS
BEGIN
	BEGIN TRY
		DECLARE @MaxLmpNo INT
		SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
			CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode
				AND DocumentType = 'LMP' 
				AND ProfitCenterCode = '300' 
				AND DocumentYear = YEAR(GetDate())),0)

		DECLARE @errmsg VARCHAR(MAX)
		DECLARE @TempLmpNo	VARCHAR(MAX)
		DECLARE @TempBPSFNo	VARCHAR(MAX)
		DECLARE @CustomerCode VARCHAR(MAX)

		SET @TempLmpNo  = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')
		SET @TempBPSFNo = ISNULL((SELECT BPSFNo FROM SpTrnSBPSFHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo),'')
		SET @CustomerCode = ISNULL((SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo),'')

		IF (ISNULL((SELECT Status FROM SpTrnSBPSFhdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFno), '0') = '2')
		BEGIN
			SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Nomor picking ini sudah pernah di-proses, hubungi IT support untuk pemerikasaan data lebih lanjut !'
			RAISERROR (@errmsg,16,1);
			RETURN
		END

		UPDATE SpTrnSBPSFHdr
		SET Status = '2'
			, LastUpdateDate = GetDate()
			, LastUpdateBy = @UserID
		WHERE CompanyCode = @CompanyCode
			AND BranchCode = @BranchCode
			AND BPSFNo = @TempBPSFNo

		--===============================================================================================================================
		IF (ISNULL((SELECT LmpNo FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo), '') <> '')
		BEGIN
			SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Nomor lampiran sudah ada, periksa setting-an sequence dokumen (LMP) pada general module !'
			RAISERROR (@errmsg,16,1);
			RETURN
		END

		DECLARE @isLocked BIT
		SET @isLocked = (SELECT IsLocked FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

		INSERT INTO SpTrnSLmpHdr
		SELECT
			CompanyCode
			, BranchCode
			, @TempLmpNo LmpNo	
			, GetDate() LmpDate
			, @TempBPSFNo BPSFNo
			, (SELECT BPSFDate FROM SpTrnSBPSFHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
				BPSFDate
			, PickingSlipNo
			, PickingSlipDate
			, TransType
			, CustomerCode
			, CustomerCodeBill
			, CustomerCodeShip
			, TotSalesQty
			, TotSalesAmt
			, TotDiscAmt
			, TotDPPAmt
			, TotPPNAmt
			, TotFinalSalesAmt
			, CONVERT(BIT, 0) isPKP
			, '0' Status
			, 0 PrintSeq
			, TypeOfGoods
			, @UserID CreatedBy
			, GetDate() CreatedDate
			, @UserID LastUpdateBy
			, GetDate() LastUpdateDate
			, @isLocked IsLocked	
			, NULL LockingBy
			, NULL LockingDate
		FROM SpTrnSPickingHdr 
		WHERE 
			1 = 1
			AND CompanyCode = @CompanyCode
			AND BranchCode = @BranchCode
			AND PickingSlipNo = @PickingSlipNo

		UPDATE GnMstDocument
		SET DocumentSequence = DocumentSequence + 1
			, LastUpdateDate = GetDate()
			, LastUpdateBy = @UserID
		WHERE
			1 = 1
			AND CompanyCode = @CompanyCode
			AND BranchCode = @BranchCode
			AND DocumentType = 'LMP'
			AND ProfitCenterCode = '300'
			AND DocumentYear = Year(GetDate())

		--===============================================================================================================================
		-- INSERT LAMPIRAN DETAIL
		--===============================================================================================================================
		INSERT INTO SpTrnSLmpDtl
		SELECT
			a.CompanyCode
			, a.BranchCode
			, @TempLmpNo LmpNo
			, a.WarehouseCode
			, a.PartNo
			, a.PartNoOriginal
			, a.DocNo
			, a.DocDate
			, a.ReferenceNo
			, a.ReferenceDate
			, a.LocationCode
			, a.QtyBill
			, a.RetailPriceInclTax
			, a.RetailPrice
			, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
			, a.DiscPct
			, a.SalesAmt
			, a.DiscAmt
			, a.NetSalesAmt
			, 0 PPNAmt
			, a.TotSalesAmt
			, a.ProductType
			, a.PartCategory 
			, a.MovingCode
			, a.ABCClass
			, @UserID CreatedBy
			, GetDate() CreatedDate
			, @UserID LastUpdateBy
			, GetDate() LastUpdateDate
		FROM SpTrnSPickingDtl a
		WHERE 
			1 = 1
			AND a.CompanyCode = @CompanyCode
			AND a.BranchCode = @BranchCode
			AND a.PickingSlipNo = @PickingSlipNo
			AND a.QtyPicked > 0


		--===============================================================================================================================
		-- UPDATE STOCK
		-- NOTES : Transtype = 11 --> + BorrowedQty
		--         Transtype = 12 --> - BorrowQty
		--===============================================================================================================================
		DECLARE @TempTransType VARCHAR (MAX) 
		SET @TempTransType = ISNULL((SELECT SUBSTRING(TransType,1,1) FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo),0)

		--===============================================================================================================================
		-- VALIDATION QTY
		--===============================================================================================================================
		DECLARE @Onhand_Valid NUMERIC(18,2)	
		DECLARE @Allocation_SRValid NUMERIC(18,2)
		DECLARE @Allocation_SLValid NUMERIC(18,2)
		DECLARE @Allocation_SPValid NUMERIC(18,2)
		
		SELECT * INTO #Valid_2 FROM(
			SELECT a.PartNo
				, b.AllocationSR - a.QtyBill QtyValidSR
				, b.AllocationSL - a.QtyBill QtyValidSL
				, b.AllocationSP - a.QtyBill QtyValidSP
				, b.Onhand - a.QtyBill QtyValidOnhand
			FROM SpTrnSPickingDtl a
			INNER JOIN SpMstItems b ON b.CompanyCode = a.CompanyCode 
				AND b.BranchCode = a.BranchCode 
				AND b.PartNo = a.PartNo		
			WHERE 1 = 1
				AND a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.PickingSlipNo = @PickingSlipNo 
		) #Valid_2
		
		SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM #Valid_2 WHERE QtyValidSR < 0),0)
		SET @Allocation_SPValid = ISNULL((SELECT TOP 1 QtyValidSP FROM #Valid_2 WHERE QtyValidSP < 0),0)
		SET @Allocation_SLValid = ISNULL((SELECT TOP 1 QtyValidSL FROM #Valid_2 WHERE QtyValidSL < 0),0)
		SET @Onhand_Valid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM #Valid_2 WHERE QtyValidOnhand < 0),0)

		DROP TABLE #Valid_2
		IF (@TempTransType = '2')
		BEGIN
			IF (@Onhand_Valid < 0 OR @Allocation_SRValid < 0)
			BEGIN
				SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
				RAISERROR (@errmsg,16,1);
				RETURN
			END 
		END
		
		IF (@TempTransType = '1')
		BEGIN
			IF (@Onhand_Valid < 0 OR @Allocation_SPValid < 0)
			BEGIN
				SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
				RAISERROR (@errmsg,16,1);
				RETURN
			END 
		END	

		IF (@TempTransType = '3')
		BEGIN
			IF (@Onhand_Valid < 0 OR @Allocation_SLValid < 0)
			BEGIN
				SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
				RAISERROR (@errmsg,16,1);
				RETURN
			END 
		END	
		--===============================================================================================================================
		IF (ISNULL((SELECT TransType FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo),0) = '11')
		BEGIN
		UPDATE SpMstItems
		SET
			BorrowedQty = BorrowedQty + b.QtyBill
		FROM SpMstItems a, SpTrnSPickingDtl b
		WHERE
			1 = 1
			AND a.CompanyCode = @CompanyCode
			AND a.BranchCode = @BranchCode
			AND b.PickingSlipNo = @PickingSlipNo
			AND a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.PartNo = b.PartNo
		END

		IF (ISNULL((SELECT TransType FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo),0) = '12')
		BEGIN
			UPDATE SpMstItems
			SET
				BorrowQty = BorrowQty - b.QtyBill
			FROM SpMstItems a, SpTrnSPickingDtl b
			WHERE
				1 = 1
				AND a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND b.PickingSlipNo = @PickingSlipNo
				AND a.CompanyCode = b.CompanyCode
				AND a.BranchCode = b.BranchCode
				AND a.PartNo = b.PartNo
		END

		IF (@TempTransType = '2')
		BEGIN
		UPDATE SpMstItems
		SET
			AllocationSR = AllocationSR - b.QtyBill
			, Onhand = Onhand - b.QtyBill
			, LastUpdateBy = @UserID
			, LastUpdateDate = GetDate()
			, LastSalesDate = GetDate()
		FROM SpMstItems a, SpTrnSPickingDtl b
		WHERE
			1 = 1
			AND a.CompanyCode = @CompanyCode
			AND a.BranchCode = @BranchCode
			AND b.PickingSlipNo = @PickingSlipNo
			AND a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.PartNo = b.PartNo

		UPDATE SpMstItemLoc
		SET
			AllocationSR = AllocationSR - b.QtyBill
			, Onhand = Onhand - b.QtyBill
			, LastUpdateBy = @UserID
			, LastUpdateDate = GetDate()
		FROM SpMstItemLoc a, SpTrnSPickingDtl b
		WHERE
			1 = 1
			AND a.CompanyCode = @CompanyCode
			AND a.BranchCode = @BranchCode
			AND a.WarehouseCode = '00'
			AND b.PickingSlipNo = @PickingSlipNo
			AND a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.PartNo = b.PartNo
		END

		IF (@TempTransType = '1')
		BEGIN
			UPDATE SpMstItems
			SET
				AllocationSP = AllocationSP - b.QtyBill
				, Onhand = Onhand - b.QtyBill
				, LastUpdateBy = @UserID
				, LastUpdateDate = GetDate()
				, LastSalesDate = GetDate()
			FROM SpMstItems a, SpTrnSPickingDtl b
			WHERE
				1 = 1
				AND a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND b.PickingSlipNo = @PickingSlipNo
				AND a.CompanyCode = b.CompanyCode
				AND a.BranchCode = b.BranchCode
				AND a.PartNo = b.PartNo

			UPDATE SpMstItemLoc
			SET
				AllocationSP = AllocationSP - b.QtyBill
				, Onhand = Onhand - b.QtyBill
				, LastUpdateBy = @UserID
				, LastUpdateDate = GetDate()
			FROM SpMstItemLoc a, SpTrnSPickingDtl b
			WHERE
				1 = 1
				AND a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.WarehouseCode = '00'
				AND b.PickingSlipNo = @PickingSlipNo
				AND a.CompanyCode = b.CompanyCode
				AND a.BranchCode = b.BranchCode
			AND a.PartNo = b.PartNo
		END

		IF (@TempTransType = '3')
		BEGIN
			UPDATE SpMstItems
			SET
				AllocationSL = AllocationSL - b.QtyBill
				, Onhand = Onhand - b.QtyBill
				, LastUpdateBy = @UserID
				, LastUpdateDate = GetDate()
				, LastSalesDate = GetDate()
			FROM SpMstItems a, SpTrnSPickingDtl b
			WHERE
				1 = 1
				AND a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND b.PickingSlipNo = @PickingSlipNo
				AND a.CompanyCode = b.CompanyCode
				AND a.BranchCode = b.BranchCode
				AND a.PartNo = b.PartNo

			UPDATE SpMstItemLoc
			SET
				AllocationSL = AllocationSL - b.QtyBill
				, Onhand = Onhand - b.QtyBill
				, LastUpdateBy = @UserID
				, LastUpdateDate = GetDate()
			FROM SpMstItemLoc a, SpTrnSPickingDtl b
			WHERE
				1 = 1
				AND a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.WarehouseCode = '00'
				AND b.PickingSlipNo = @PickingSlipNo
				AND a.CompanyCode = b.CompanyCode
				AND a.BranchCode = b.BranchCode
				AND a.PartNo = b.PartNo
		END
		--===============================================================================================================================
		-- UPDATE DEMAND CUST AND DEMAND ITEM
		--===============================================================================================================================

		UPDATE SpHstDemandCust
		SET SalesFreq = SalesFreq + 1
			, SalesQty = SalesQty + b.QtyBill
			, LastUpdateBy = @UserID 
			, LastUpdateDate = GetDate()
		FROM SpHstDemandCust a, SpTrnSPickingDtl b
		WHERE
			1 = 1
			AND a.CompanyCode = @CompanyCode
			AND a.BranchCode = @BranchCode
			AND b.CompanyCode = @CompanyCode
			AND b.BranchCode = @BranchCode
			AND b.PickingSlipNo = @PickingSlipNo
			AND a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.Year = Year(b.DocDate)
			AND a.Month = Month(b.DocDate)
			AND a.CustomerCode = @CustomerCode
			AND a.PartNo = b.PartNo
			
		UPDATE SpHstDemandItem
		SET SalesFreq = SalesFreq + 1
			, SalesQty = SalesQty + b.QtyBill
			, LastUpdateBy = @UserID 
			, LastUpdateDate = GetDate()
		FROM SpHstDemandItem a, SpTrnSPickingDtl b
		WHERE
			1 = 1
			AND a.CompanyCode = @CompanyCode
			AND a.BranchCode = @BranchCode
			AND b.CompanyCode = @CompanyCode
			AND b.BranchCode = @BranchCode
			AND b.PickingSlipNo = @PickingSlipNo
			AND a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.Year = Year(b.DocDate)
			AND a.Month = Month(b.DocDate)
			AND a.PartNo = b.PartNo

		----=============================================================================================================================
		---- INSERT TO ITEM MOVEMENT
		----=============================================================================================================================
		INSERT INTO SpTrnIMovement
		SELECT
			@CompanyCode CompanyCode
			, @BranchCode BranchCode
			, a.LmpNo DocNo
			, (SELECT LmPDate FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
			  DocDate
			, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
			, '00' WarehouseCode
			, LocationCode 
			, a.PartNo
			, 'OUT' SignCode
			, 'LAMPIRAN' SubSignCode
			, a.QtyBill
			, a.RetailPrice
			, a.CostPrice
			, a.ABCClass
			, a.MovingCode
			, a.ProductType
			, a.PartCategory
			, @UserID CreatedBy
		FROM SpTrnSLmpDtl a
		WHERE
			1 = 1
			AND CompanyCode = @CompanyCode
			AND BranchCode = @BranchCode
			AND LmpNo = @TempLmpNo


		--===============================================================================================================================
		-- UPDATE AVERAGE COST
		-- NOTES : Transtype = 2% (SERVICE) CHECK ISLINKTOSERVICE
		--===============================================================================================================================
		IF (ISNULL((SELECT SUBSTRING(TransType,1,1) FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo),0) = '2')
		BEGIN
			IF (CONVERT(VARCHAR,ISNULL((SELECT IsLinkToService FROM gnMstCoProfile WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode),0),0) = '1')
			BEGIN
				SELECT
					a.CompanyCode
					, a.BranchCode
					, d.ProductType
					, ISNULL(d.ServiceNo, 0) ServiceNo
					, a.PartNo
					, a.DocNo SupplySlipNo
					, ISNULL(a.CostPrice, 0) CostPrice
  					, ISNULL(a.RetailPrice, 0) RetailPrice
				INTO #1
				FROM spTrnSLmpDtl a 
					INNER JOIN spTrnSORDHdr c ON a.CompanyCode = c.CompanyCode
						AND a.BranchCode = c.BranchCode
						AND a.DocNo = c.DocNo
					INNER JOIN svTrnService d ON a.CompanyCode = d.CompanyCode
						AND a.BranchCode = d.BranchCode
				WHERE a.CompanyCode = @CompanyCode
					AND a.BranchCode = @BranchCode
					AND d.ProductType = @ProductType
					AND c.UsageDocNo = d.JobOrderNo
					AND a.LmpNo = @TempLmpNo

				UPDATE svTrnSrvItem 
				SET	CostPrice = b.CostPrice
					, LastUpdateBy = @UserID
					, LastUpdateDate = GETDATE()
				FROM svTrnSrvItem a, #1 b
				WHERE a.CompanyCode = b.CompanyCode
					AND a.BranchCode = b.BranchCode
					AND a.ProductType = b.ProductType
					AND a.ServiceNo = b.ServiceNo  
					AND a.PartNo = b.PartNo
					AND a.SupplySlipNo = b.SupplySlipNo	

				--===============================================================================================================================
				-- SERVICE PART
				--===============================================================================================================================
				SELECT * INTO #TempServiceItem FROM (
				SELECT 
					a.CompanyCode
					, a.BranchCode
					, a.ProductType
					, a.ServiceNo
					, a.PartNo
					, a.PartSeq
					, a.DemandQty
					, a.SupplyQty
					, b.QtyBill
					, b.DocNo
					, a.CostPrice
					, a.RetailPrice
					, a.TypeOfGoods
					, a.BillType
					, a.DiscPct
				FROM SvTrnSrvItem a 
				INNER JOIN SpTrnSPickingDtl b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
				WHERE
					1 = 1
					AND a.CompanyCode = @CompanyCode
					AND a.BranchCode = @BranchCode
					AND a.ProductType = @ProductType
					AND a.ServiceNo IN (SELECT ServiceNo 
										FROM SvTrnService 
										WHERE 1 = 1 AND CompanyCode = @CompanyCode 
											AND BranchCode = @BranchCode 
											AND JobOrderNo IN (SELECT ReferenceNo 
																FROM SpTrnSPickingDtl 
																WHERE 1= 1 AND CompanyCode = @CompanyCode 
																	AND  BranchCode = @BranchCode 
																	AND PickingSlipNo = @PickingSlipNo))
					AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
						AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
					AND a.SupplySlipNo = b .DocNo
				) #TempServiceItem 

				UPDATE svTrnSrvItem
				SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
								THEN 
									CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
								ELSE b.QtyBill END)
					, LastUpdateBy = @UserID
					, LastUpdateDate = Getdate()
				FROM svTrnSrvItem a, #TempServiceItem b
				WHERE
					1 = 1
					AND a.CompanyCode = b.CompanyCode
					AND a.BranchCode = b.BranchCode
					AND a.ProductType = b.ProductType
					AND a.ServiceNo = b.ServiceNo
					AND a.PartNo = b.PartNo
					AND a.PartSeq = b.PartSeq
					AND a.SupplySlipNo = b.DocNo

				UPDATE svTrnSrvItem
				SET CostPrice = b.CostPrice
					, LastUpdateBy = @UserID
					, LastUpdateDate = Getdate()
				FROM svTrnSrvItem a, #TempServiceItem b
				WHERE
					1 = 1
					AND a.CompanyCode = b.CompanyCode
					AND a.BranchCode = b.BranchCode
					AND a.ProductType = b.ProductType
					AND a.ServiceNo = b.ServiceNo
					AND a.PartNo = b.PartNo
					AND a.SupplySlipNo = b.DocNo

				--===============================================================================================================================
				-- INSERT NEW SRV ITEM BASED PICKING LIST
				--===============================================================================================================================
				INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
				SELECT 
					a.CompanyCode
					, a.BranchCode
					, a.ProductType
					, a.ServiceNo
					, a.PartNo
					, (select max(PartSeq)+1 from svTrnSrvItem b where b.CompanyCode = a.CompanyCode and b.BranchCode = a.BranchCode and 
						b.ProductType = a.ProductType and b.ServiceNo = a.ServiceNo) PartSeq
					, 0 DemandQty
					, a.QtyBill - a.DemandQty SupplyQty
					, 0 ReturnQty
					, a.CostPrice
					, a.RetailPrice
					, a.TypeOfGoods
					, a.BillType
					, a.DocNo SupplySlipNo
					, (SELECT TOP 1 DocDate FROM SpTrnSORDHdr WHERE 1= 1 AND CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
						AND DocNo = a.DocNo) SupplySlipDate
					, NULL SSReturnNo
					, NULL SSReturnDate
					, @UserID CreatedBy
					, GetDate() CreatedDate
					, @UserID LastUpdateBy
					, GetDate() LastUpdateDate
					, a.DiscPct
				FROM #TempServiceItem a 
				WHERE
					1 = 1
					AND a.CompanyCode = @CompanyCode
					AND a.BranchCode = @BranchCode
					AND a.ProductType = @ProductType
					AND a.DemandQty < a.QtyBill
					AND a.QtyBill > 0
					AND a.DemandQty > 0

				DROP TABLE #TempServiceItem 	
				DROP TABLE #1
			END
		END

		--===============================================================================================================================
		-- GENERATE JOURNAL AND AUTOMATE TRANSFER STOCK
		-- NOTES : Transtype = 10 (TRANSFER STOCK)
		--===============================================================================================================================
		DECLARE @TempJournalPrefix	VARCHAR(MAX)
		DECLARE @MaxTempJournal		INT

		DECLARE @TempJournal		VARCHAR(MAX)
		DECLARE @Amount				NUMERIC(18,2)
		DECLARE @TempFiscalMonth	INT
		DECLARE @TempFiscalYear		INT

		DECLARE @PeriodeNum			NUMERIC(18,0)
		DECLARE @Periode			VARCHAR(MAX)
		DECLARE @PeriodeName		VARCHAR(MAX)
		DECLARE @GLDate				DATETIME

		SET @TempFiscalYear = ISNULL((SELECT FiscalYear FROM GnMstCoProfileSpare WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode),0) 
		SET @TempFiscalMonth  = ISNULL((SELECT FiscalMonth FROM GnMstCoProfileSpare WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode),0) 

		SET @PeriodeNum = ISNULL((SELECT  TOP 1 PeriodeNum
				FROM gnMstPeriode 
				WHERE CompanyCode = @CompanyCode
					AND BranchCode = @BranchCode AND FiscalYear = @TempFiscalYear
					AND FiscalMonth = @TempFiscalMonth AND StatusSparepart = 1
					AND (MONTH(FromDate) = MONTH(@LmpDate) AND YEAR(FromDate) = YEAR(@LmpDate))
					AND FiscalStatus = 1 ), NULL) 

		SET @Periode = ISNULL((SELECT  TOP 1 CONVERT(varchar, FiscalYear) + RIGHT('00' + CONVERT(varchar, PeriodeNum), 2) AS Periode
				FROM gnMstPeriode 
				WHERE CompanyCode = @CompanyCode
					AND BranchCode = @BranchCode AND FiscalYear = @TempFiscalYear
					AND FiscalMonth = @TempFiscalMonth AND StatusSparepart = 1
					AND (MONTH(FromDate) = MONTH(@LmpDate) AND YEAR(FromDate) = YEAR(@LmpDate))
					AND FiscalStatus = 1 ), NULL) 

		SET @PeriodeName =  ISNULL((SELECT  TOP 1 PeriodeName
				FROM gnMstPeriode 
				WHERE CompanyCode = @CompanyCode
					AND BranchCode = @BranchCode AND FiscalYear = @TempFiscalYear
					AND FiscalMonth = @TempFiscalMonth AND StatusSparepart = 1
					AND (MONTH(FromDate) = MONTH(@LmpDate) AND YEAR(FromDate) = YEAR(@LmpDate))
					AND FiscalStatus = 1 ), NULL)

		DECLARE @AccountTypeInTran	VARCHAR(MAX)
		DECLARE @AccountTypeInvent	VARCHAR(MAX)

		SET @AccountTypeInTran = ISNULL((SELECT b.AccountType FROM GnMstAccount b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode AND b.AccountNo = 
				ISNULL((SELECT InTransitAccNo FROM SpMstAccount WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND TypeOfGoods = @TypeOfGoods),'')
				),'')
		SET @AccountTypeInvent = ISNULL((SELECT b.AccountType FROM GnMstAccount b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode AND b.AccountNo = 
				ISNULL((SELECT InventoryAccNo FROM SpMstAccount WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND TypeOfGoods = @TypeOfGoods),'')
				),'')

		--===============================================================================================================================
		-- SET ACCOUNT FOR GENERATE JOURNAL
		--===============================================================================================================================
		DECLARE @CustCode VARCHAR(MAX)
		SET @CustCode = (SELECT CustomerCode FROM spTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)
		
		Declare @TPGO VARCHAR(MAX)
		SET @TPGO = (SELECT TypeOfGoods FROM spTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

		DECLARE @InventoryAccNo VARCHAR(MAX)
		DECLARE @InTransitAccNo VARCHAR(MAX)

		IF (@isLocked = '1')
		BEGIN
			DECLARE @CompTo VARCHAR(MAX)
			SET @CompTo = (SELECT ISNULL(CompanyCodeTo,'') FROM spMstCompanyAccount WHERE CompanyCode = @CompanyCode AND BranchCodeTo = @CustCode)
			
			SET @InTransitAccNo =  (SELECT ISNULL(IntercompanyAccNoTo,'') FROM spMstCompanyAccountDtl WHERE CompanyCode = @CompanyCode AND CompanyCodeTo = @CompTo AND TPGO = @TPGO)
		END
		ELSE
			SET @InTransitAccNo =  ISNULL((SELECT InTransitAccNo FROM SpMstAccount WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND TypeOfGoods = @TypeOfGoods),'')

		SET @InventoryAccNo = ISNULL((SELECT InventoryAccNo FROM SpMstAccount WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND TypeOfGoods = @TypeOfGoods),'')
		SET @Amount = ISNULL((SELECT SUM(QtyBill * CostPrice) FROM SpTrnSLmpDtl WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo),0)

		--===============================================================================================================================
		-- GENERATE JOURNAL
		-- NOTES : Transtype = 1O (TRANSFER STOCK)
		--===============================================================================================================================
		IF (ISNULL((SELECT TransType FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo),0) = '10')
		BEGIN
			IF (@isLocked != '1')
			BEGIN
				--===============================================================================================================================
				-- AUTOMATE TRANSFER STOCK
				--===============================================================================================================================
				INSERT INTO SpUtlStockTrfHdr
				SELECT
					a.CompanyCode
					, a.CustomerCode BranchCode
					, a.BranchCode DealerCode
					, a.LmpNo LampiranNo
					, a.CustomerCode RcvDealerCode
					, '' InvoiceNo 
					, '' BinningNo 
					, '1900-01-01 00:00:00.000' BinningDate
					, 0 Status
					, @UserID CreatedBy
					, GetDate() CreatedDate
					, @UserID LastUpdateBy
					, GetDate() LastUpdateDate
					, null TypeOfGoods
				FROM SpTrnSLmpHdr a
				WHERE a.CompanyCode = @CompanyCode
					AND a.BranchCode = @BranchCode
					AND a.LmpNo = @TempLmpNo

				INSERT INTO SpUtlStockTrfDtl
				SELECT
					a.CompanyCode CompanyCode
					, b.CustomerCode BranchCode
					, a.BranchCode DealerCode
					, a.LmpNo LampiranNo
					, a.DocNo OrderNo
					, a.PartNo PartNo
					, b.BPSFno SalesNo
					, a.PartNo PartNoShip
					, a.QtyBill QtyShipped 
					, 1.00 SalesUnit
					, a.CostPrice PurchasePrice
					, a.CostPrice costPrice
					, '1900-01-01 00:00:00.000' ProcessDate
					, @ProductType Producttype
					, '' partCategory
					, @UserID CreatedBy
					, GetDate() CreatedDate
					, @UserID LastUpdateBy
					, GetDate() LastUpdateDate 
				FROM SpTrnSLmpDtl a
				INNER JOIN SpTrnSLmpHdr b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.LmpNo = b.LmpNo
				WHERE a.CompanyCode = @CompanyCode
					AND a.BranchCode = @BranchCode
					AND a.LmpNo = @TempLmpNo
			END

			--===============================================================================================================================
			-- GENERATE GLINTERFACE
			--===============================================================================================================================
			IF (ISNULL((SELECT TOP 1 DocNo FROM glInterface WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND DocNo = @TempLmpNo), '') <> '')
			BEGIN
				SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Nomor lampiran sudah ada dalam glInterface, periksa setting-an sequence dokumen (LMP) !'
				RAISERROR (@errmsg,16,1);
				RETURN
			END
			 
			INSERT INTO GLInterface
			SELECT
				a.CompanyCode
				, a.BranchCode
				, a.LmpNo DocNo
				, 1 SeqNo
				, a.LmpDate DocDate
				, '300' ProfitCenterCode
				, GetDate() AccDate
				, @InTransitAccNo AccountNo
				, 'SPAREPART' JournalCode
				, 'BPS' TypeJournal
				, a.LmpNo ApplyTo
				, @Amount AmountDB
				, 0 AmountCR
				, 'INTRANSIT' TypeTrans
				, '' BatchNo
				, '1900-01-01 00:00:00.000' BatchDate
				, 3 StatusFlag
				, @UserID CreateBy 
				, GetDate() CreateDate
				, @UserID UpdateBy
				, GetDate() LastUpdateDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			INSERT INTO GLInterface
			SELECT
				a.CompanyCode
				, a.BranchCode
				, a.LmpNo DocNo
				, 2 SeqNo
				, a.LmpDate DocDate
				, '300' ProfitCenterCode
				, GetDate() AccDate
				, @InventoryAccNo AccountNo
				, 'SPAREPART' JournalCode
				, 'BPS' TypeJournal
				, a.LmpNo ApplyTo
				, 0 AmountDB	
				, @Amount AmountCR
				, 'INVENTORY' TypeTrans
				, '' BatchNo
				, '1900-01-01 00:00:00.000' BatchDate
				, 3 StatusFlag
				, @UserID CreateBy 
				, GetDate() CreateDate
				, @UserID UpdateBy
				, GetDate() LastUpdateDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			SET @GLDate = ISNULL((SELECT TOP 1 DocDate FROM GlInterface WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND DocNo = @TempLmpNo), NULL)

			--===============================================================================================================================
			-- GENERATE GLJOURNAL
			--===============================================================================================================================
			SET @MaxTempJournal = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
				CompanyCode = @CompanyCode
					AND BranchCode = @BranchCode
					AND DocumentType = 'JTS' 
					AND ProfitCenterCode = '300' 
					AND DocumentYear = YEAR(GetDate())),0)

			SET @TempJournalPrefix = ISNULL((SELECT DocumentPrefix FROM GnMstDocument WHERE 
				CompanyCode = @CompanyCode
					AND BranchCode = @BranchCode
					AND DocumentType = 'JTS' 
					AND ProfitCenterCode = '300' 
					AND DocumentYear = YEAR(GetDate())),'XXX')

			SET @TempJournal = ISNULL((SELECT @TempJournalPrefix + '/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxTempJournal, 1), 6)),'XXX/YY/XXXXXX')

			IF (ISNULL((SELECT TOP 1 JournalNo FROM GlJournal WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND JournalNo = @TempJournal), '') <> '')
			BEGIN
				SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Nomor journal sudah terpakai, periksa setting-an sequence dokumen (JTS) !'
				RAISERROR (@errmsg,16,1);
				RETURN
			END

			INSERT INTO GLJournal
			SELECT
				CompanyCode
				, BranchCode
				, @TempFiscalYear FiscalYear
				, '300' ProfitCenterCode
				, @TempJournal JournalNo
				, 'Harian' JournalType
				, GetDate() JournalDate
				, 'SP' DocSource
				, @TempLmpNo + ',' + @TempBPSFNo ReffNo
				, GetDate() ReffDate
				, @TempFiscalMonth FiscalMonth
				, @PeriodeNum
				, @Periode
				, @PeriodeName
				, @GLDate
				, 1 BalanceType
				, @Amount AmountDB 
				, @Amount AmountCR
				, 1 Status
				, '' StatusRecon
				, NULL BatchNo
				, '1900-01-01 00:00:00.000' PostingDate 
				, 0 StatusReverse
				, '1900-01-01 00:00:00.000' ReverseDate
				, 1 Printseq
				, 0 FSend
				, '' SendBy
				, '1900-01-01 00:00:00.000' SendDate
				, @UserID CreatedBy
				, GetDate() CreatedDate
				, @UserID LastUpdateBy
				, GetDate() LastUpdateDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			--===============================================================================================================================
			-- GENERATE GLJOURNALDTL
			--===============================================================================================================================
			INSERT INTO GLJournalDtl
			SELECT
				a.CompanyCode CompanyCode
				, a.BranchCode BranchCode
				, @TempFiscalYear FiscalYear
				, @TempJournal JournalNo
				, 1 SeqNo
				, @InTransitAccNo AccountNo
				, @TempLmpNo + ',' + @TempBPSFNo Description
				, 'Harian' JournalType
				, @Amount AmountDB 
				, 0 AmountCR
				, 'INTRANSIT' TypeTrans
				, @AccountTypeIntran
				, @TempLmpNo  DocNo
				, 0 StatusReverse
				, '1900-01-01 00:00:00.000' ReverseDate
				, 0 FSend
				, @UserID CreatedBy 
				, GetDate() CreatedDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			INSERT INTO GLJournalDtl
			SELECT
				a.CompanyCode CompanyCode
				, a.BranchCode BranchCode
				, @TempFiscalYear FiscalYear
				, @TempJournal JournalNo
				, 2 SeqNo
				, @InventoryAccNo AccountNo
				, @TempLmpNo + ',' + @TempBPSFNo Description
				, 'Harian' JournalType
				, 0 AmountDB
				, @Amount AmountCR
				, 'INVENTORY' TypeTrans
				, @AccountTypeInvent
				, @TempLmpNo  DocNo
				, 0 StatusReverse
				, '1900-01-01 00:00:00.000' ReverseDate
				, 0 FSend
				, @UserID CreatedBy 
				, GetDate() CreatedDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			UPDATE GnMstDocument
			SET DocumentSequence = DocumentSequence + 1
				, LastUpdateDate = GetDate()
				, LastUpdateBy = @UserID
			WHERE
				1 = 1
				AND CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode
				AND DocumentType = 'JTS'
				AND ProfitCenterCode = '300'
				AND DocumentYear = Year(GetDate())
		END
		--===============================================================================================================================
		-- END GENERATE JOURNAL Transtype = 1O (TRANSFER STOCK) --
		--===============================================================================================================================
		
		--===============================================================================================================================
		-- GENERATE JOURNAL
		-- NOTES : Transtype = 14 (OTHERS)
		--===============================================================================================================================
		IF (ISNULL((SELECT TransType FROM SpTrnSLmpHdr WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND LmpNo = @TempLmpNo),0) = '14')
		BEGIN
			--===============================================================================================================================
			-- GENERATE GLINTERFACE
			--===============================================================================================================================
			IF (ISNULL((SELECT TOP 1 DocNo FROM GlInterface WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND DocNo = @TempLmpNo), '') <> '')
			BEGIN
				SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Nomor lampiran sudah ada dalam glInterface, periksa setting-an sequence dokumen (LMP) !'
				RAISERROR (@errmsg,16,1);
				RETURN
			END

			INSERT INTO GLInterface
			SELECT
				a.CompanyCode
				, a.BranchCode
				, a.LmpNo DocNo
				, 1 SeqNo
				, a.LmpDate DocDate
				, '300' ProfitCenterCode
				, GetDate() AccDate
				, @InTransitAccNo AccountNo
				, 'SPAREPART' JournalCode
				, 'BPS' TypeJournal
				, a.LmpNo ApplyTo
				, @Amount AmountDB
				, 0 AmountCR
				, 'INTRANSIT' TypeTrans
				, '' BatchNo
				, '1900-01-01 00:00:00.000' BatchDate
				, 3 StatusFlag
				, @UserID CreateBy 
				, GetDate() CreateDate
				, @UserID UpdateBy
				, GetDate() LastUpdateDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			INSERT INTO GLInterface
			SELECT
				a.CompanyCode
				, a.BranchCode
				, a.LmpNo DocNo
				, 2 SeqNo
				, a.LmpDate DocDate
				, '300' ProfitCenterCode
				, GetDate() AccDate
				, @InventoryAccNo AccountNo
				, 'SPAREPART' JournalCode
				, 'BPS' TypeJournal
				, a.LmpNo ApplyTo
				, 0 AmountDB	
				, @Amount AmountCR
				, 'INVENTORY' TypeTrans
				, '' BatchNo
				, '1900-01-01 00:00:00.000' BatchDate
				, 3 StatusFlag
				, @UserID CreateBy 
				, GetDate() CreateDate
				, @UserID UpdateBy
				, GetDate() LastUpdateDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			--===============================================================================================================================
			-- GENERATE GLJOURNAL
			--===============================================================================================================================
			SET @MaxTempJournal = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
				CompanyCode = @CompanyCode
					AND BranchCode = @BranchCode
					AND DocumentType = 'JTI' 
					AND ProfitCenterCode = '300' 
					AND DocumentYear = YEAR(GetDate())),0)

			SET @TempJournalPrefix = ISNULL((SELECT DocumentPrefix FROM GnMstDocument WHERE 
				CompanyCode = @CompanyCode
					AND BranchCode = @BranchCode
					AND DocumentType = 'JTI' 
					AND ProfitCenterCode = '300' 
					AND DocumentYear = YEAR(GetDate())),'XXX')

			SET @TempJournal = ISNULL((SELECT @TempJournalPrefix + '/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxTempJournal, 1), 6)),'XXX/YY/XXXXXX')
			SET @TempFiscalYear = ISNULL((SELECT FiscalYear FROM GnMstCoProfileSpare WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode),0) 
			SET @TempFiscalMonth  = ISNULL((SELECT FiscalMonth FROM GnMstCoProfileSpare WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode),0) 
			IF (ISNULL((SELECT TOP 1 JournalNo FROM GlJournal WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND JournalNo = @TempJournal), '') <> '')
			BEGIN
				SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Nomor journal sudah terpakai, periksa setting-an sequence dokumen (JTS) !'
				RAISERROR (@errmsg,16,1);
				RETURN
			END

			INSERT INTO GLJournal
			SELECT
				CompanyCode
				, BranchCode
				, @TempFiscalYear FiscalYear
				, '300' ProfitCenterCode
				, @TempJournal JournalNo
				, 'Harian' JournalType
				, GetDate() JournalDate
				, 'SP' DocSource
				, @TempLmpNo ReffNo
				, GetDate() ReffDate
				, @TempFiscalMonth FiscalMonth
				, @PeriodeNum
				, @Periode
				, @PeriodeName
				, @GLDate
				, 1 BalanceType
				, @Amount AmountDB 
				, @Amount AmountCR
				, 1 Status
				, '' StatusRecon
				, NULL BatchNo
				, '1900-01-01 00:00:00.000' PostingDate 
				, '' StatusReverse
				, '1900-01-01 00:00:00.000' ReverseDate
				, 1 Printseq
				, 0 FSend
				, '' SendBy
				, '1900-01-01 00:00:00.000' SendDate
				, @UserID CreatedBy
				, GetDate() CreatedDate
				, @UserID LastUpdateBy
				, GetDate() LastUpdateDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			--===============================================================================================================================
			-- GENERATE GLJOURNALDTL
			--===============================================================================================================================
			INSERT INTO GLJournalDtl
			SELECT
				a.CompanyCode CompanyCode
				, a.BranchCode BranchCode
				, @TempFiscalYear FiscalYear
				, @TempJournal JournalNo
				, 1 SeqNo
				, @InTransitAccNo AccountNo
				, @TempLmpNo Description
				, 'Harian' JournalType
				, @Amount AmountDB 
				, 0 AmountCR
				, 'INTRANSIT' TypeTrans
				, @AccountTypeIntran
				, @TempLmpNo  DocNo
				, 0 StatusReverse
				, '1900-01-01 00:00:00.000' ReverseDate
				, 0 FSend
				, @UserID CreatedBy 
				, GetDate() CreatedDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			INSERT INTO GLJournalDtl
			SELECT
				a.CompanyCode CompanyCode
				, a.BranchCode BranchCode
				, @TempFiscalYear FiscalYear
				, @TempJournal JournalNo
				, 2 SeqNo
				, @InventoryAccNo AccountNo
				, @TempLmpNo  Description
				, 'Harian' JournalType
				, 0 AmountDB
				, @Amount AmountCR
				, 'INVENTORY' TypeTrans
				, @AccountTypeInvent
				, @TempLmpNo  DocNo
				, 0 StatusReverse
				, '1900-01-01 00:00:00.000' ReverseDate
				, 0 FSend
				, @UserID CreatedBy 
				, GetDate() CreatedDate
			FROM SpTrnSLmpHdr a
			WHERE a.CompanyCode = @CompanyCode
				AND a.BranchCode = @BranchCode
				AND a.LmpNo = @TempLmpNo

			UPDATE GnMstDocument
			SET DocumentSequence = DocumentSequence + 1
				, LastUpdateDate = GetDate()
				, LastUpdateBy = @UserID
			WHERE
				1 = 1
				AND CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode
				AND DocumentType = 'JTI'
				AND ProfitCenterCode = '300'
				AND DocumentYear = Year(GetDate())
		END
		--===============================================================================================================================
		-- END GENERATE JOURNAL Transtype = 14 (OTHERS) --
		--===============================================================================================================================

		--===============================================================================================================================
		-- UPDATE TRANSDATE
		--===============================================================================================================================
		update gnMstCoProfileSpare
		set TransDate=getdate()
			, LastUpdateBy=@UserID
			, LastUpdateDate=getdate()
		where CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		
	END TRY
	BEGIN CATCH
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat proses yang mem-block proses, harap tunggu beberapa saat kemudian coba lagi !'
		RAISERROR (@errmsg,16,1);
		RETURN
	END CATCH
END
GO
if object_id('uspfn_GenerateSSPickingslip') is not null
	drop procedure uspfn_GenerateSSPickingslip
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslip]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6006406'
--set	@BranchCode		= '6006402'
--set	@JobOrderNo		= 'SPK/12/003020'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '1443'
--set	@TransType		= '20'
--set	@UserID			= 'sa'
--set	@DocDate		= getdate()


--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder


--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderNo
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, a.PartNo
	, '00' WarehouseCode
	, a.PartNo PartNoOriginal
	, @JobOrderNo ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) ReferenceDate
	, (SELECT LocationCode FROM SpMstItemLoc WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND WarehouseCode = '00'
		AND PartNo = a.PartNo) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
				FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
				AND PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
				FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
				AND PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
				FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
				AND PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
				FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
				AND PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
					FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
					AND PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
				FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
				AND PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
					FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
					AND PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT MovingCode FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT ABCClass FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		ABCClass
	, @ProductType ProductType
	, (SELECT PartCategory FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		PartCategory
	, '2' Status
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, @UserID StockAllocatedBy
	, GetDate() StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
inner join spMstItemPrice b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = @TypeOfGoods

--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '' PickingSlipNo	
	, @JobOrderNo ReferenceNo
	, @DefaultDate ReferenceDate
	, '00' WarehouseCode
	, (SELECT LocationCode FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND WarehouseCode = '00'
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
			FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
			AND PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR
				FROM SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode =@BranchCode AND WarehouseCode = '00'	
				AND PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT MovingCode FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT ABCClass FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		ABCClass
	, @ProductType ProductType
	, (SELECT PartCategory FROM SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo) 
		PartCategory
	, '1' Status
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, @UserID StockAllocatedBy
	, GetDate() StockAllocatedDate
FROM #SrvOrder a
inner join spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = @TypeOfGoods
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================
UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(GetDate())
	AND a.Month  = Month(GetDate())
	AND a.PartNo = b.PartNo
	AND b.DocNo = @TempDocNo

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(GetDate())
	AND a.Month  = Month(GetDate())
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = @CustomerCode
	AND b.DocNo = @TempDocNo

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, Year(GetDate()) Year
	, Month(GetDate()) Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= @CompanyCode AND a.BranchCode= @BranchCode AND a.DocNo = @TempDocNo -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = Month(GetDate())
	AND Year = Year(GetDate())
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, Year(GetDate()) Year
	, Month(GetDate()) Month
	, @CustomerCode CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= @CompanyCode and a.BranchCode= @BranchCode AND a.DocNo = @TempDocNo -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = Month(GetDate())
	AND Year = Year(GetDate())
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================
UPDATE SpMstItems 
SET LastDemandDate = GetDate()
FROM SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	AND b.DocNo = @TempDocNo

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo

UPDATE spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.WarehouseCode = '00'
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  @CompanyCode 
		AND BranchCode = @BranchCode AND DocNo = @TempDocNo AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, 'OUT' SignCode
	, 'SA-NPJUAL' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo <> '' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns

UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),@DefaultDate)
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType	

--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')
INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0

DROP TABLE #TempSOSupply

--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item
END
GO

if object_id('uspfn_GetCustomerByProfitCenterCodeId') is not null
	drop procedure uspfn_GetCustomerByProfitCenterCodeId
GO
CREATE procedure [dbo].[uspfn_GetCustomerByProfitCenterCodeId]  
@CompanyCode varchar(15),  
@BranchCode varchar(15),  
@ProfitCenterCode varchar(15)  
as  
SELECT a.CustomerCode, a.CustomerName  
     , a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 +' ' + a.Address4 as Address, 
     a.Address1, a.Address2, a.Address3, a.Address4  
  , c.LookupValue, c.LookUpValueName as ProfitCenter  
     , b.Salesman  
  FROM gnMstCustomer a with(nolock, nowait)  
 INNER JOIN gnMstCustomerProfitCenter b with(nolock, nowait)  
 ON b.CompanyCode = a.CompanyCode  
   AND b.CustomerCode = a.CustomerCode  
 INNER JOIN gnMstLookUpDtl c  
 ON c.CompanyCode = a.CompanyCode  
   AND c.CodeID = 'PFCN'  
   AND c.LookupValue = b.ProfitCenterCode  
 WHERE 1 = 1  
   AND a.CompanyCode = @CompanyCode  
   AND b.BranchCode = @BranchCode 
   AND b.ProfitCenterCode = @ProfitCenterCode  
   AND b.isBlackList = 0  
   AND c.LookupValue= b.ProfitCenterCode   
 AND a.Status = 1 order by a.CustomerCode
GO


if object_id('uspfn_GetLmpDoc') is not null
	drop procedure uspfn_GetLmpDoc
GO
CREATE procedure [dbo].[uspfn_GetLmpDoc] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(5), @TransType varchar(5), @CodeID varchar(6),@BeginDate datetime, @EndDate datetime  
as  
--declare @CompanyCode varchar(15)  
--declare @BranchCode varchar(15)  
--declare @TypeOfGoods varchar(15)  
--declare @TransType varchar(5)  
--declare @BeginDate Datetime  
--declare @EndDate datetime  
--set @CompanyCode = '6006406'  
--set @BranchCode = '6006401'  
--set @TypeOfGoods = '0'  
--set @TransType = '1%'  
--set @BeginDate = '2014/03/01'  
--set @EndDate = '2014/05/30'  
SELECT  
  
 spTrnSLmpHdr.CompanyCode,  
 spTrnSLmpHdr.BranchCode,  
 spTrnSLmpHdr.LmpNo  
,spTrnSLmpHdr.LmpDate  
,spTrnSLmpHdr.BPSFNo  
,spTrnSLmpHdr.BPSFDate  
,spTrnSLmpHdr.PickingSlipNo  
,spTrnSLmpHdr.PickingSlipDate  
,spTrnSLmpHdr.TypeOfGoods  
,spTrnSLmpHdr.CustomerCodeShip  
,spTrnSLmpHdr.CustomerCode  
,spTrnSLmpHdr.CustomerCodeBill  
,spTrnSLmpHdr.TotSalesQty  
,spTrnSLmpHdr.TotSalesAmt  
,spTrnSLmpHdr.TotDiscAmt  
,spTrnSLmpHdr.TotDPPAmt  
,spTrnSLmpHdr.TotPPNAmt  
,spTrnSLmpHdr.CreatedBy  
,spTrnSLmpHdr.CreatedDate  
,spTrnSLmpHdr.LastUpdateBy  
,spTrnSLmpHdr.LastUpdateDate  
,spTrnSLmpHdr.LastUpdateBy  
,spTrnSLmpHdr.LastUpdateDate  
,spTrnSLmpHdr.isPKP  
,spTrnSLmpHdr.isLocked  
,spTrnSLmpHdr.LockingBy  
,spTrnSLmpHdr.LockingDate,  
 spTrnSLmpHdr.CustomerCode,  
 spTrnSLmpHdr.CustomerCodeShip,
 spTrnSLmpHdr.CustomerCodeBill as CustomerCodeTagih,
 b.CustomerName,  
 b.Address1,  
 b.Address2,  
 b.Address3,  
 b.Address4,  
 b.CustomerName CustomerNameTagih,  
 b.Address1 Address1Tagih,  
 b.Address2 Address2Tagih,  
 b.Address3 Address3Tagih,  
 b.Address4 Address4Tagih,  
 c.LookUpValueName TransType    
  
FROM spTrnSLmpHdr  
left join gnMstCustomer b  
ON spTrnSLmpHdr.CompanyCode = b.CompanyCode  
AND spTrnSLmpHdr.CustomerCode = b.CustomerCode   
left join gnMstLookupDtl c on  
spTrnSLmpHdr.CompanyCode = c.CompanyCode  
and spTrnSLmpHdr.TransType= c.LookupValue   
AND c.CodeID = @CodeID  
WHERE spTrnSLmpHdr.CompanyCode=@CompanyCode  
  AND spTrnSLmpHdr.BranchCode=@BranchCode  
  AND spTrnSLmpHdr.TypeOfGoods = @TypeOfGoods   
  AND Convert(Varchar, spTrnSLmpHdr.LmpDate, 111) between @BeginDate and @EndDate  
  AND TransType LIKE @TransType  
ORDER BY spTrnSLmpHdr.LmpNo DESC
GO


if object_id('uspfn_GetLookupLMP') is not null
	drop procedure uspfn_GetLookupLMP
GO
CREATE PROCEDURE [dbo].[uspfn_GetLookupLMP] @CompanyCode varchar(15), @BranchCode varchar(15), @SalesType varchar(15), @CodeID varchar(6),  
@TypeOfGoods varchar(15), @ProductType varchar(15)  
as  
SELECT * FROM   
(  
SELECT  
 PickingSlipNo, PickingSlipDate,  
 BPSFNo, BPSFDate,  
 (  
   SELECT TOP 1 PRODUCTTYPE FROM spTrnSBPSFDtl  
  WHERE spTrnSBPSFHdr.CompanyCode = spTrnSBPSFDtl.CompanyCode  
  AND spTrnSBPSFHdr.BranchCode = spTrnSBPSFDtl.BranchCode  
  AND spTrnSBPSFHdr.BPSFNo = spTrnSBPSFDtl.BPSFNo  
 ) AS ProductType,
 spTrnSBPSFHdr.CustomerCode,
 spTrnSBPSFHdr.CustomerCodeShip,
 spTrnSBPSFHdr.CustomerCodeBill as CustomerCodeTagih,
 b.CustomerName,
 b.Address1,
 b.Address2,
 b.Address3,
 b.Address4,
 b.CustomerName CustomerNameTagih,
 b.Address1 Address1Tagih,
 b.Address2 Address2Tagih,
 b.Address3 Address3Tagih,
 b.Address4 Address4Tagih,
 c.LookUpValueName TransType  
FROM spTrnSBPSFHdr  
left join gnMstCustomer b
ON spTrnSBPSFHdr.CompanyCode = b.CompanyCode
AND spTrnSBPSFHdr.CustomerCode = b.CustomerCode 
left join gnMstLookupDtl c on
spTrnSBPSFHdr.CompanyCode = c.CompanyCode
and spTrnSBPSFHdr.TransType= c.LookupValue 
AND c.CodeID = @CodeID
WHERE spTrnSBPSFHdr.CompanyCode = @CompanyCode  
AND spTrnSBPSFHdr.BranchCode    = @BranchCode  
AND spTrnSBPSFHdr.SalesType     = @SalesType  
AND spTrnSBPSFHdr.TypeOfGoods   = @TypeOfGoods  
AND (spTrnSBPSFHdr.Status = '1' OR spTrnSBPSFHdr.Status = '0')  
AND (spTrnSBPSFHdr.PickingSlipNo NOT IN (SELECT PickingSlipNo FROM spTrnSLmpHdr where CompanyCode = @CompanyCode AND BranchCode = @BranchCode))  
) A  
WHERE A.ProductType = @ProductType  
ORDER BY A.PickingSlipNo DESC
GO


if object_id('uspfn_GetLookupLMP4Srv') is not null
	drop procedure uspfn_GetLookupLMP4Srv
GO
CREATE procedure [dbo].[uspfn_GetLookupLMP4Srv]   
@CompanyCode varchar(15), @BranchCode varchar(15),  
@SalesType varchar(5), @TypeOfGoods varchar(15), @ProductType varchar(15)  
as  
SELECT * FROM   
(  
SELECT  
 PickingSlipNo,   
 PickingSlipDate,  
 BPSFNo,   
 BPSFDate,  
 (  
   SELECT TOP 1 PRODUCTTYPE FROM spTrnSBPSFDtl  
  WHERE spTrnSBPSFHdr.CompanyCode = spTrnSBPSFDtl.CompanyCode  
  AND spTrnSBPSFHdr.BranchCode = spTrnSBPSFDtl.BranchCode  
  AND spTrnSBPSFHdr.BPSFNo = spTrnSBPSFDtl.BPSFNo  
 ) AS ProductType,
 spTrnSBPSFHdr.CustomerCode,
 spTrnSBPSFHdr.CustomerCodeShip,
 spTrnSBPSFHdr.CustomerCodeBill as CustomerCodeTagih,
 b.CustomerName,
 b.Address1,
 b.Address2,
 b.Address3,
 b.Address4,
 b.CustomerName CustomerNameTagih,
 b.Address1 Address1Tagih,
 b.Address2 Address2Tagih,
 b.Address3 Address3Tagih,
 b.Address4 Address4Tagih,
 c.LookUpValueName TransType  
FROM spTrnSBPSFHdr  
join gnMstCustomer b
ON spTrnSBPSFHdr.CompanyCode = b.CompanyCode
AND spTrnSBPSFHdr.CustomerCode = b.CustomerCode
join gnMstLookupDtl c on
spTrnSBPSFHdr.CompanyCode = c.CompanyCode
and spTrnSBPSFHdr.TransType= c.LookupValue 
AND c.CodeID = 'TTSR'
WHERE spTrnSBPSFHdr.CompanyCode = @CompanyCode  
AND spTrnSBPSFHdr.BranchCode    = @BranchCode  
AND spTrnSBPSFHdr.SalesType     = @SalesType  
AND spTrnSBPSFHdr.TypeOfGoods   = @TypeOfGoods  
AND (spTrnSBPSFHdr.Status = '1' OR spTrnSBPSFHdr.Status = '0')  
AND (spTrnSBPSFHdr.PickingSlipNo NOT IN (SELECT PickingSlipNo FROM spTrnSLmpHdr where CompanyCode = @CompanyCode AND BranchCode = @BranchCode))  
) A  
WHERE A.ProductType = @ProductType
GO


if object_id('uspfn_GnUpdateTax') is not null
	drop procedure uspfn_GnUpdateTax
GO
/****** Object:  StoredProcedure [dbo].[uspfn_GnUpdateTax]    Script Date: 12/15/2011 16:56:31 ******/
-- uspfn_GnUpdateTax '6051401','010.000-13.00000004','INV: 0','FPS/13/000003','ga'
CREATE procedure [dbo].[uspfn_GnUpdateTax]
   @CompanyCode	varchar(15),
   @FPJGovNo	varchar(50),
   @FPJGovNoNew	varchar(50),
   @DocNo    	varchar(20),
   @UserID      varchar(15)

as

declare @errmsg varchar(max)

if exists (select * from gnGenerateTax
		where 1 = 1
		  and CompanyCode = @CompanyCode
		  and right(FPJGovNo, 8) = right(@FPJGovNoNew, 8)
		  and right(FPJGovNo, 8) <> right(@FPJGovNo, 8)
		  and @FPJGovNoNew not like 'IN%'
		)
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'No Pajak ' + @FPJGovNoNew + ' sudah pernah digunakan untuk generate pajak'
				+ char(13) + 'Silahkan di coba nomor yang lain'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	select @errmsg
	return
end

if (@FPJGovNoNew not like 'IN%')
begin
	-- update gnGenerateTax
	;with x as (
	select 'TAX' code, FPJGovNo, @FPJGovNoNew FPJNew, DocNo, DocDate, CreatedDate
	  from gnGenerateTax 
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and FPJGovNo = @FPJGovNo
	   and DocNo = @DocNo
	)
	update x set FPJGovNo = FPJNew
end
else
begin
	delete GnGenerateTax where CompanyCode = @CompanyCode and FPJGovNo = @FPJGovNo and DocNo = @Docno
end

-- update Sparepart
;with x as (
select 'SP' code, FPJGovNo, @FPJGovNoNew FPJNew, InvoiceNo, InvoiceDate, CreatedDate
  from SPTrnSFPJHdr
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FPJGovNo = @FPJGovNo
   and InvoiceNo = @DocNo
)
update x set FPJGovNo = FPJNew

-- update Service
;with x as (
select 'SV' code, FPJGovNo, @FPJGovNoNew FPJNew, FPJNo, FPJDate, CreatedDate
  from svTrnFakturPajak
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FPJGovNo = @FPJGovNo
   and FPJNo = @DocNo
)
--select * from x
update x set FPJGovNo = FPJNew

-- update Sales
;with x as (
select 'SL' code, FakturPajakNo, @FPJGovNoNew FPJNew, InvoiceNo, InvoiceDate, CreatedDate
  from OmFakturPajakHdr
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FakturPajakNo = @FPJGovNo
   and InvoiceNo = @DocNo
)
--select * from x
update x set FakturPajakNo = FPJNew

-- update Finance
;with x as (
select 'FN' code, FakturPajakNo, @FPJGovNoNew FPJNew, InvoiceNo, InvoiceDate, CreatedDate
  from ArFakturPajakHdr
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FakturPajakNo = @FPJGovNo
   and InvoiceNo = @DocNo
)
--select * from x
update x set FakturPajakNo = FPJNew

-- update Konsolidasi Pajak Keluaran
;with x as (
select 'KPK' code, TaxNo FakturPajakNo, @FPJGovNoNew FPJNew, FPJNo
	, case when TaxNo = FPJNo then @FPJGovNoNew
		else FPJNo
	end FPJNoNew
	, case when ProfitCenter='200' then FPJNo 
		else ReferenceNo
	end InvoiceNo
	, case when ProfitCenter='200' then FPJDate 
		else ReferenceDate
	end InvoiceDate
	, CreatedDate
  from gnTaxOut
 where 1 = 1
   and CompanyCode = @CompanyCode
   and TaxNo = @FPJGovNo
   and (case when ProfitCenter='200' then FPJNo else ReferenceNo end) = @DocNo
)
--select * from x
update x 
set FakturPajakNo = FPJNew
	,FPJNo= FPJNoNew

insert into gnTaxHistUpd(CompanyCode,FPJGovNo,FPJGovNoNew,DocNo,UpdateBy,UpdateDate)
     values(@CompanyCode, @FPJGovNo, @FPJGovNoNew, @DocNo, @UserID, getdate())
GO



if object_id('uspfn_LookupCustomer') is not null
	drop procedure uspfn_LookupCustomer
GO
create procedure [dbo].[uspfn_LookupCustomer]
	@CompanyCode varchar(13),
	@BranchCode varchar(13)
as
begin
	SELECT distinct 
	       a.CustomerCode
		 , a.CustomerName
	     , isnull(a.Address1,'') + ' ' + isnull(a.Address2,'') + ' ' + isnull(a.Address3,'') +' ' + isnull(a.Address4,'') as Address
		 , a.Address1
		 , a.Address2
		 , a.Address3
		 , a.Address4
		 , '' as LookupValue
		 , '' as ProfitCenter
	  FROM gnMstCustomer a with(nolock, nowait)
	  left JOIN gnMstCustomerProfitCenter b with(nolock, nowait)
		ON b.CompanyCode = a.CompanyCode
	   AND b.CustomerCode = a.CustomerCode
	   AND b.BranchCode = @BranchCode
	   AND b.isBlackList = 0
	  left JOIN gnMstLookUpDtl c
		ON c.CompanyCode = a.CompanyCode
	   AND c.CodeID = 'PFCN'
	   AND c.LookupValue = b.ProfitCenterCode
	 WHERE 1 = 1
	   AND a.CompanyCode = @CompanyCode
end
GO


if object_id('uspfn_LookupCustomerview') is not null
	drop procedure uspfn_LookupCustomerview
GO
CREATE procedure [dbo].[uspfn_LookupCustomerview] (  @CompanyCode varchar(10), @BranchCode varchar(10) )
 as
SELECT distinct a.CustomerCode, a.CustomerName
     , isnull(a.Address1,'') + ' ' + isnull(a.Address2,'') + ' ' + isnull(a.Address3,'') +' ' + isnull(a.Address4,'') as Address
	 , '' LookupValue, '' as ProfitCenter
  FROM gnMstCustomer a with(nolock, nowait)
 left JOIN gnMstCustomerProfitCenter b with(nolock, nowait)
	ON b.CompanyCode = a.CompanyCode
   AND b.CustomerCode = a.CustomerCode
   AND b.BranchCode = @BranchCode
   AND b.isBlackList = 0
 left JOIN gnMstLookUpDtl c
	ON c.CompanyCode = a.CompanyCode
   AND c.CodeID = 'PFCN'
   AND c.LookupValue = b.ProfitCenterCode
 WHERE 1 = 1
   AND a.CompanyCode = @CompanyCode
GO

if object_id('uspfn_OmGetJournalDebetCredit') is not null
	drop procedure uspfn_OmGetJournalDebetCredit
GO
--declare @CompanyCode varchar(20)
--declare @BranchCode  varchar(20)
--declare @TypeJournal  varchar(20)
--declare @DocNo   varchar(20)

--set @CompanyCode = '6558201'
--set @BranchCode  = '655820100'
--set @TypeJournal = 'invoice'
--set @DocNo       = 'IVU/13/001280'

-- =============================================
-- Author:		<xxxxxx>
-- Create date: <xxxxxx>
-- Description:	<Get Journal>
-- Last Update By:	<yo - 29 Nov 2013>
-- =============================================

CREATE procedure [dbo].[uspfn_OmGetJournalDebetCredit]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@TypeJournal varchar(50),
	@DocNo       varchar(50)
as 

declare @t_journal as table (
	SeqCode     varchar(50),
	TypeTrans   varchar(50),
	AccountNo   varchar(50),
	AccountDesc varchar(100),
	AmountDb    decimal,
	AmountCr    decimal
)

--#region TypeJournal = 'TRANSFEROUT'
if @TypeJournal = 'TRANSFEROUT'
begin
	declare @t_trans_out as table (
		CompanyCode varchar(50),
		BranchCode  varchar(50),
		DocInfo     varchar(50),
		Amount      decimal
	)

	insert into @t_trans_out
	select a.CompanyCode, a.BranchCode, a.SalesModelCode 
		 , isnull(b.CogsUnit, 0) + isnull(b.COGSKaroseri, 0) + isnull(b.COGSOthers, 0)
	  from omTrInventTransferOutDetail a
	  left join omMstVehicle b on 1 = 1
	   and b.CompanyCode = a.CompanyCode
	   and b.ChassisCode = a.ChassisCode
	   and b.ChassisNo   = a.ChassisNo
	   and b.EngineCode  = a.EngineCode
	   and b.EngineNo    = a.EngineNo
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	 where 1 = 1 
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode  = @BranchCode
	   and a.TransferOutNo = @DocNo

	insert into @t_journal
	select '01', 'PSEMENTARA'
		 , isnull(b.InTransitTransferStockAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_out a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InTransitTransferStockAccNo= c.AccountNo

	insert into @t_journal
	select '02', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	  from @t_trans_out a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo
end

--#region TypeJournal = 'TRANSFERIN'
if @TypeJournal = 'TRANSFERIN'
begin
	declare @t_trans_in as table (
		CompanyCode varchar(50),
		BranchCode  varchar(50),
		BranchCodeFrom varchar(50),
		BranchCodeTo varchar(50),
		DocInfo     varchar(50),
		Amount      decimal
	)

	insert into @t_trans_in
	select a.CompanyCode, a.BranchCode, c.BranchCodeFrom, c.BranchCodeTo, a.SalesModelCode 
		 , isnull(b.CogsUnit, 0) + isnull(b.COGSKaroseri, 0) + isnull(b.COGSOthers, 0)
	  from omTrInventTransferInDetail a
	  left join omMstVehicle b on 1 = 1
	   and b.CompanyCode = a.CompanyCode
	   and b.ChassisCode = a.ChassisCode
	   and b.ChassisNo   = a.ChassisNo
	   and b.EngineCode  = a.EngineCode
	   and b.EngineNo    = a.EngineNo
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	  left join omTrInventTransferIn c on 1 = 1
	   and c.CompanyCode = a.CompanyCode
	   and c.BranchCode  = a.BranchCode
	   and c.TransferInNo = a.TransferInNo
	 where 1 = 1 
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode  = @BranchCode
	   and a.TransferInNo = @DocNo

	insert into @t_journal
	select '01', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_in a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeTo=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo

	insert into @t_journal
	select '02', 'PSEMENTARA'
		 , isnull(b.InTransitTransferStockAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	  from @t_trans_in a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeFrom=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InTransitTransferStockAccNo= c.AccountNo

end
--#endregion

--#region TypeJournal = 'TRANSFEROUTMULTIBRANCH'
if @TypeJournal = 'TRANSFEROUTMULTIBRANCH'
begin
	declare @t_trans_outMB as table (
	CompanyCode		varchar(50),
	BranchCode		varchar(50),
	CompanyCodeTo	varchar(50),
	DocInfo			varchar(50),
	Amount			decimal
	)

	insert into @t_trans_outMB
		select a.CompanyCode
			, a.BranchCode
			, b.CompanyCodeTo
			, a.SalesModelCode 
			, isnull(a.CogsUnit, 0) + isnull(a.COGSKaroseri, 0) + isnull(a.COGSOthers, 0)
		from omTrInventTransferOutDetailMultiBranch a
		left join omTrInventTransferOutMultiBranch b on b.CompanyCode = a.CompanyCode
			and b.BranchCode = a.BranchCode
			and b.TransferOutNo = a.TransferOutNo
		where 1 = 1 
		   and a.CompanyCode = @CompanyCode
		   and a.BranchCode  = @BranchCode
		   and a.TransferOutNo = @DocNo
		   
	insert into @t_journal
	select '01', 'PSEMENTARA'
		 , isnull(b.InterCompanyAccNoTo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	from @t_trans_outMB a
	left join omMstCompanyAccount b on b.CompanyCode = a.CompanyCode
		and b.CompanyCodeTo = a.CompanyCodeTo
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
		and b.InterCompanyAccNoTo = c.AccountNo

	insert into @t_journal
	select '02', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	from @t_trans_outMB a
	left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.DocInfo=b.SalesModelCode
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
		and b.InventoryAccNo= c.AccountNo
end
--#endregion

--#region TypeJournal = 'TRANSFERINMULTIBRANCH'
if @TypeJournal = 'TRANSFERINMULTIBRANCH'
begin
	declare @t_trans_inMB as table (
	CompanyCode		varchar(50),
	BranchCode		varchar(50),
	CompanyCodeFrom	varchar(50),
	BranchCodeFrom	varchar(50),
	BranchCodeTo	varchar(50),
	DocInfo			varchar(50),
	Amount			decimal
)

insert into @t_trans_inMB
	select a.CompanyCode
		, a.BranchCode
		, b.CompanyCodeFrom
		, b.BranchCodeFrom
		, b.BranchCodeTo
		, a.SalesModelCode 
		, isnull(a.CogsUnit, 0) + isnull(a.COGSKaroseri, 0) + isnull(a.COGSOthers, 0)
	from omTrInventTransferInDetailMultiBranch a
	left join omTrInventTransferInMultiBranch b on 1 = 1
	   and b.CompanyCode	= a.CompanyCode
	   and b.BranchCode		= a.BranchCode
	   and b.TransferInNo	= a.TransferInNo
	where 1 = 1 
	   and a.CompanyCode	= @CompanyCode
	   and a.BranchCode		= @BranchCode
	   and a.TransferInNo	= @DocNo

	insert into @t_journal
	select '01', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_inMB a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeTo=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo
			
	insert into @t_journal
	select '02', 'PSEMENTARA'
		 , isnull(b.InterCompanyAccNoTo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	from @t_trans_inMB a
	left join omMstCompanyAccount b on b.CompanyCode = a.CompanyCode
		and b.CompanyCodeTo = a.CompanyCodeFrom
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
		and b.InterCompanyAccNoTo = c.AccountNo

end
--#endregion

--#region TypeJournal = 'KAROSERI'
if @TypeJournal = 'KAROSERI'
begin
	declare @t_karoseri as table (
		SeqCode     varchar(50),
		TypeTrans   varchar(50),
		AccountNo   varchar(50),
		AmountDb    decimal,
		AmountCr    decimal
	)
	
	insert into @t_karoseri
	select '01', 'INVENTORY'
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCodeNew
			), '')
		 , sum(isnull(c.COGSKaroseri, 0) + (isnull(c.COGsUnit, 0) + isnull(c.COGsOthers, 0)))
		 , 0
	  from OmTrPurchaseKaroseriTerima a, OmTrPurchaseKaroseriTerimaDetail b, OmMstVehicle c
	 where 1 = 1
	   and c.CompanyCode = b.CompanyCode 
	   and c.ChassisCode = b.ChassisCode
	   and c.ChassisNo = b.ChassisNo 
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode = a.BranchCode
	   and b.KaroseriTerimaNo = a.KaroseriTerimaNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeNew
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '02', 'PPN'
		 , isnull((
			select cls.TaxInAccNo
			  from gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and cls.CompanyCode   = sup.CompanyCode
			   and cls.BranchCode    = sup.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = a.CompanyCode
			   and sup.BranchCode    = a.BranchCode
			   and sup.SupplierCode  = a.SupplierCode
			   and sup.ProfitCenterCode = '100'
			), '')
		 , sum(isnull(a.Quantity, 0) * isnull(a.PPn, 0))
		 , 0
	  from OmTrPurchaseKaroseriTerima a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeNew, a.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '03', 'INVENTORY'
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCodeOld
			), '')
		 , 0
		 , sum((isnull (c.COGsUnit, 0) + isnull (c.COGsOthers, 0 )))
	  from OmTrPurchaseKaroseriTerima a, OmTrPurchaseKaroseriTerimaDetail b, OmMstVehicle c
	 where 1 = 1
	   and c.CompanyCode = b.CompanyCode 
	   and c.ChassisCode = b.ChassisCode
	   and c.ChassisNo = b.ChassisNo 
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode = a.BranchCode
	   and b.KaroseriTerimaNo = a.KaroseriTerimaNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeOld
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '04', 'AP'
		 , isnull((
			select cls.PayableAccNo
			  from gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and cls.CompanyCode   = sup.CompanyCode
			   and cls.BranchCode    = sup.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = a.CompanyCode
			   and sup.BranchCode    = a.BranchCode
			   and sup.SupplierCode  = a.SupplierCode
			   and sup.ProfitCenterCode = '100'
			), '')
		 , 0
		 , sum(isnull(a.Quantity, 0) * isnull(a.Total, 0))
	  from OmTrPurchaseKaroseriTerima a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_journal
	select a.SeqCode, a.TypeTrans, a.AccountNo
		 , b.Description AccountDesc, a.AmountDb, a.AmountCr    
	  from @t_karoseri a, gnMstAccount b
	 where b.CompanyCode = @CompanyCode
	   and b.BranchCode = @BranchCode 
	   and b.AccountNo = a.AccountNo
end
--#endregion

--#region TRANS TYPE PURCHASE
IF @TypeJournal = 'PURCHASE'
	BEGIN	
	Select * into #t1 from
	(
		select distinct a.CompanyCode
				, a.BranchCode
				, a.HPPNo
				, a.BPUNo
				, a.SalesModelCode
				, a.SalesModelYear
				, a.OthersCode
				, isnull(b.OthersNonInventoryAccNo,'') AccountNo
				, SUM(a.OthersDPP) DPP
				, SUM(a.OthersPPN) PPN
		from omTrPurchaseHPPDetailModelOthers a
		left join omMstOthersNonInventory b on a.CompanyCode = b.CompanyCode
			and a.BranchCode = b.BranchCode
			--and a.OthersCode = b.OthersNonInventory
		where a.CompanyCode = @CompanyCode
			and a.BranchCode = @BrancHCode
			and a.HPPNo = @DocNo
			and isnull(b.OthersNonInventoryAccNo,'') <> ''
		group by a.CompanyCode, a.BranchCode, a.HPPNo, a.BPUNo, a.SalesModelCode, a.SalesModelYear, a.OthersCode,b.OthersNonInventoryAccNo		
	)#t1


	select * into #Inventory from(
	select 'INVENTORY' CodeTrans
		 , @DocNo DocNo
		 , a.SalesModelCode DocInfo
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCode
			), '') AccountNo
		 , isnull(a.Quantity, 0) Quantity
		 , isnull(a.AfterDiscDPP, 0) AfterDiscDPP	 
		 , case when (select COUNT(*) from #t1 where HPPNo = a.HppNo and BPUNo = a.BPUNo and SalesModelCode = a.SalesModelCode and SalesModelYear = SalesModelYear) > 0 
			   then isnull((select distinct (b.DPP)
					from #t1 b
					where b.CompanyCode = a.CompanyCode
						and b.BranchCode = a.BranchCode
						and b.HPPNo = a.HPPNo
						and b.SalesModelCode = a.SalesModelCode
						and b.SalesModelYear = a.SalesModelYear
						and b.OthersCode not in (select distinct OthersNonInventory 
								from omMstOthersNonInventory))
				, 0) else a.OthersDPP end OthersDPP
		 , isnull(a.AfterDiscPPnBM, 0) AfterDiscPPnBM
		 , 0 AmountCr
	  from omTrPurchaseHPPDetailModel a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	)#Inventory

	insert into @t_journal
	select	1
			, a.CodeTrans
			, a.AccountNo
			, '' AccountDesc
			, sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) as DPP
			, 0
	  from #Inventory a
	 group by a.CodeTrans, a.DocNo, a.DocInfo, a.AccountNo
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0

	select * into #OthersInv from(
	select 'OTHERS' CodeTrans 		
		 , isnull((
			select acc.OthersNonInventoryAccNo
			  from omMstOthersNonInventory acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.OthersNonInventory = b.OthersCode
			), '') AccountNo
		 , '' AccountDesc
		 , sum(isnull(a.Quantity, 0) * isnull(b.DPP, 0)) as DPP
		 , 0 AmountCr
	  from omTrPurchaseHPPDetailModel a, #t1 b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	   and a.SalesModelCode = b.SalesModelCode
	   and a.SalesModelYear = b.SalesModelYear
	   and a.BPUNo = b.BPUNo
	   and b.OthersCode in (select distinct OthersNonInventory 
									from omMstOthersNonInventory) 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, a.SalesModelCode,a.SalesModelYear,b.OthersCode,b.AccountNo
	having sum(isnull(a.Quantity, 0) * isnull(b.DPP, 0)) > 0
	)#OthersInv
	
	insert into @t_journal
	select 2, CodeTrans			
			, AccountNo
			, '' AccountDesc
			, SUM(DPP)
			, AmountCr
	  from #OthersInv a
	 group by a.CodeTrans, a.AccountNo,a.AmountCr
	having sum(DPP) > 0

	insert into @t_journal
	select 3, 'PPN'
		 , isnull((
			select cls.TaxInAccNo
			  from omTrPurchaseHPP pur, gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and sup.CompanyCode   = pur.CompanyCode
			   and sup.BranchCode    = pur.BranchCode
			   and sup.SupplierCode  = pur.SupplierCode
			   and sup.ProfitCenterCode = '100'
			   and cls.CompanyCode   = pur.CompanyCode
			   and cls.BranchCode    = pur.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = @CompanyCode
			   and sup.BranchCode    = @BranchCode
			   and pur.HPPNo         = @DocNo
			), '')
		 , '' AccountDesc
		 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0))) as PPN
		 , 0
	  from omTrPurchaseHPPDetailModel a, omTrPurchaseHPP b
	 where 1 = 1
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode  = a.BranchCode
	   and b.HPPNo       = a.HPPNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, b.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0

	insert into @t_journal
	select 4, 'AP'
		 , isnull((
			select cls.PayableAccNo
			  from omTrPurchaseHPP pur, gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and sup.CompanyCode   = pur.CompanyCode
			   and sup.BranchCode    = pur.BranchCode
			   and sup.SupplierCode  = pur.SupplierCode
			   and sup.ProfitCenterCode = '100'
			   and cls.CompanyCode   = pur.CompanyCode
			   and cls.BranchCode    = pur.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = @CompanyCode
			   and sup.BranchCode    = @BranchCode
			   and pur.HPPNo         = @DocNo
			), '')
		 , '' AccountDesc
		 , 0
		 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0)))
		 + sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0))) as TotalTransAmt
	  from omTrPurchaseHPPDetailModel a, omTrPurchaseHPP b
	 where 1 = 1
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode  = a.BranchCode
	   and b.HPPNo       = a.HPPNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, b.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0	

	drop table #t1
	drop table #Inventory
	drop table #OthersInv
		
	END
--#endregion

--#region TypeJournal = 'INVOICE'
IF @TypeJournal = 'INVOICE'
BEGIN
	insert into @t_journal
		select 1, 'AR'
			 , isnull((
				select cls.ReceivableAccNo
				  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
				 where 1 = 1
				   and cus.CompanyCode   = ivu.CompanyCode
				   and cus.BranchCode    = ivu.BranchCode
				   and cus.CustomerCode  = ivu.CustomerCode
				   and cus.ProfitCenterCode = '100'
				   and cls.CompanyCode   = ivu.CompanyCode
				   and cls.BranchCode    = ivu.BranchCode
				   and cls.CustomerClass = cus.CustomerClass
				   and cus.CompanyCode   = @CompanyCode
				   and cus.BranchCode    = @BranchCode
				   and ivu.InvoiceNo     = @DocNo
				), '') AccounNo
			 , '' AccountDesc
			 , isnull((
				select sum(isnull(Quantity, 0) * (AfterDiscDPP + AfterDiscPPn + AfterDiscPPnBm))
				  from omTrSalesInvoiceModel
				 where 1 = 1
				   and CompanyCode = @CompanyCode 
				   and BranchCode  = @BranchCode
				   and InvoiceNo   = @DocNo
				), 0)
			 + isnull((
				select sum(mdl.Quantity * (oth.AfterDiscDPP + oth.AfterDiscPPn))
				  from omTrSalesInvoiceOthers oth left join omTrSalesInvoiceModel mdl
					on oth.BranchCode = mdl.BranchCode
					and oth.InvoiceNo = mdl.InvoiceNo
					and oth.BPKNo = mdl.BPKNo
					and oth.SalesModelCode = mdl.SalesModelCode
				 where 1 = 1
				   and oth.CompanyCode = @CompanyCode 
				   and oth.BranchCode  = @BranchCode
				   and oth.InvoiceNo   = @DocNo
				), 0)
			 + isnull((
				select sum(DPP + PPN)
				  from omTrSalesInvoiceAccs
				 where 1 = 1
				   and CompanyCode = @CompanyCode 
				   and BranchCode  = @BranchCode
				   and InvoiceNo   = @DocNo
				), 0)
			 + (select isnull(sum(isnull(Quantity,0)*isnull(Total,0)),0) from omTrSalesInvoiceAccsSeq where CompanyCode=@CompanyCode
				   and BranchCode=@BranchCode and InvoiceNo=@DocNo) 
			 , 0

insert into @t_journal
select 2, 'DISCOUNT UNIT'
	 , isnull((
		select acc.DiscountAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) as Discount
	 , 0
  from omTrSalesInvoiceModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) > 0

insert into @t_journal
select 3, 'DISCOUNT AKSESORIS'
	 , isnull((
		select acc.DiscountAccNoAks
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull(a.DiscExcludePPn, 0)) as Discount
	 , 0
  from omTrSalesInvoiceOthers a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull(a.DiscExcludePPn, 0)) > 0

insert into @t_journal
select distinct 4, 'DISCOUNT SPAREPART['+a.TypeOfGoods+']'
	, (select top 1 DiscAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, (select sum(isnull(Quantity,0)*isnull(DiscExcludePPn,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
		and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountDb
	, 0 AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
where a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

insert into @t_journal
select 5, 'SALES UNIT'
	 , isnull((
		select acc.SalesAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull(a.Quantity, 0) * isnull (a.AfterDiscDPP, 0))
	 + sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) 
  from omTrSalesInvoiceModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having (sum(isnull(a.Quantity, 0) * isnull (a.AfterDiscDPP, 0)) +
	    sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0))) > 0

insert into @t_journal
select 6, 'SALES AKSESORIS'
	 , isnull((
		select acc.SalesAccNoAks
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull(b.Quantity, 0) * isnull (a.AfterDiscDPP, 0))
	 + sum(isnull(b.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) 
  from omTrSalesInvoiceOthers a, omTrSalesInvoiceModel b
 where 1 = 1
   and b.BranchCode = a.BranchCode 
   and b.InvoiceNo = a.InvoiceNo 
   and b.BPKNo = a.BPKNo 
   and b.SalesModelCode = a.SalesModelCode 
   and b.SalesModelYear = a.SalesModelYear 
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having (sum(isnull(b.Quantity, 0) * isnull (a.AfterDiscDPP, 0)) +
	    sum(isnull(b.Quantity, 0) * isnull (a.DiscExcludePPn, 0))) > 0

insert into @t_journal
select distinct 7, 'SALES SPAREPART ['+a.typeOfGoods+']'
	, (select top 1 SalesAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, 0 AmountDb
	, (select sum(isnull(Quantity,0) * isnull(RetailPrice,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
		and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.TypeOfGoods

insert into @t_journal
select 8, 'PPN'
	 , isnull((
		select cls.TaxOutAccNo
		  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
		 where 1 = 1
		   and cus.CompanyCode   = ivu.CompanyCode
		   and cus.BranchCode    = ivu.BranchCode
		   and cus.CustomerCode  = ivu.CustomerCode
		   and cus.ProfitCenterCode = '100'
		   and cls.CompanyCode   = ivu.CompanyCode
		   and cls.BranchCode    = ivu.BranchCode
		   and cls.CustomerClass = cus.CustomerClass
		   and cus.CompanyCode   = @CompanyCode
		   and cus.BranchCode    = @BranchCode
		   and ivu.InvoiceNo     = @DocNo
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , isnull((
		select sum(Quantity * AfterDiscPPn)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(mdl.Quantity * oth.AfterDiscPPn)
		  from omTrSalesInvoiceOthers oth left join omTrSalesInvoiceModel mdl
			on oth.BranchCode = mdl.BranchCode
			and oth.InvoiceNo = mdl.InvoiceNo
			and oth.BPKNo = mdl.BPKNo
			and oth.SalesModelCode = mdl.SalesModelCode
		 where 1 = 1
		   and oth.CompanyCode = @CompanyCode 
		   and oth.BranchCode  = @BranchCode
		   and oth.InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(PPN)
		  from omTrSalesInvoiceAccs
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + (select isnull(sum(isnull(Quantity,0)*isnull(PPN,0)),0) from omTrSalesInvoiceAccsSeq where companyCode = @CompanyCode 
		   and BranchCode=@BranchCode and InvoiceNo=@DocNo)
where (isnull((
		select sum(Quantity * AfterDiscPPn)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(AfterDiscPPn)
		  from omTrSalesInvoiceOthers
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(PPN)
		  from omTrSalesInvoiceAccs
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)) 
	 +(select isnull(sum(isnull(quantity,0)*isnull(PPN,0)),0) from omTrSalesInvoiceAccsSeq where companyCode = @CompanyCode 
		   and BranchCode=@BranchCode and InvoiceNo=@DocNo) > 0

insert into @t_journal
select 9, 'PPN BM'
	 , isnull((
		select cls.LuxuryTaxAccNo
		  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
		 where 1 = 1
		   and cus.CompanyCode   = ivu.CompanyCode
		   and cus.BranchCode    = ivu.BranchCode
		   and cus.CustomerCode  = ivu.CustomerCode
		   and cus.ProfitCenterCode = '100'
		   and cls.CompanyCode   = ivu.CompanyCode
		   and cls.BranchCode    = ivu.BranchCode
		   and cls.CustomerClass = cus.CustomerClass
		   and cus.CompanyCode   = @CompanyCode
		   and cus.BranchCode    = @BranchCode
		   and ivu.InvoiceNo     = @DocNo
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , isnull((
		select sum(Quantity * AfterDiscPPnBm)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
where isnull((
		select sum(Quantity * AfterDiscPPnBm)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0) > 0

insert into @t_journal
select 10, 'HPP Unit'
	 , isnull((
		select acc.COGSAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull (a.COGS, 0)) as COGS
	 , 0
  from OmTrSalesInvoiceVin a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull (a.COGS, 0)) > 0

insert into @t_journal
select 11, 'INVENTORY UNIT'
	 , isnull((
		select acc.InventoryAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull (a.COGS, 0)) as COGS
  from OmTrSalesInvoiceVin a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull (a.COGS, 0)) > 0

insert into @t_journal
select distinct 12, 'COGS SPAREPART ['+a.TypeOfGoods+']'
	, (select top 1 COGSAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, (select sum(isnull(Quantity,0)*isnull(COGS,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
			and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountDb
	, 0 AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
where a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

insert into @t_journal
select distinct 13, 'INVENTORY AKSESORIES ['+a.TypeOfGoods+']'
	, (select top 1 InventoryAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, 0 AmountDb
	, (select sum(isnull(Quantity,0)*isnull(COGS,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode and invoiceno=a.invoiceno
		and typeofgoods=a.typeofgoods group by typeofgoods) AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
WHERE a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

END
--#endregion

select sum(a.AmountDb) as AmountDb, sum(a.AmountCr) as AmountCr
  from @t_journal a
GO


if object_id('uspfn_OmInquiryChassisReq') is not null
	drop procedure uspfn_OmInquiryChassisReq
GO
-- uspfn_OmInquiryChassisReq '6007402','600740200'
CREATE procedure [dbo].[uspfn_OmInquiryChassisReq]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@Penjual as varchar(15)
	,@CBU as bit
as

declare @isDirect as bit
set @isDirect=0
if exists (
	select 1
	from gnMstCoProfile
	where CompanyCode=@CompanyCode and BranchCode=@Penjual
)
set @isDirect=1

--DECLARE @CompanyCode as varchar(15)
--	,@Penjual as varchar(15)
--
--set @CompanyCode='6117201'
--set @Penjual='6117201'

select * into #t1
from (
	select distinct isnull(b.BranchCode, e.BranchCode) BranchCode, isnull(c.CustomerCode, e.CustomerCode) CustomerCode
			,z.ChassisCode,z.BPKNo,z.SONo,e.DONo,convert(varchar,z.chassisNo) chassisNo, z.salesModelCode
			, z.salesModelYear, isnull(z.SuzukiDONo,'') RefferenceDONo,
			isnull(z.SuzukiDODate,'19000101') RefferenceDODate, isnull(z.SuzukiSJNo,'') RefferenceSJNo, 
			isnull(z.SuzukiSJDate,'19000101') RefferenceSJDate, 
			a.EndUserName, a.EndUserAddress1, a.EndUserAddress2, a.EndUserAddress3,
			c.CustomerName, c.Address1, c.Address2, c.Address3,
			c.CityCode,(SELECT LookUpValueName FROM gnMstLookUpDtl where CodeID = 'CITY' AND ParaValue = c.CityCode) as CityName, 
			c.PhoneNo, c.HPNo, c.birthDate ,b.Salesman, (SELECT EmployeeName FROM gnMstEmployee where EmployeeID = b.Salesman) SalesmanName, b.SalesType
	from omMstVehicle z 
		left join omTrSalesSOVin a 
			on a.CompanyCode = z.CompanyCode and z.SONo=a.SONo
				AND a.ChassisCode = z.ChassisCode
				AND a.ChassisNo = z.ChassisNo
		left join omTrSalesSO b
			on a.companyCode = b.companyCode 
				and a.BranchCode= b.BranchCode
				and a.SONo = b.SONo
				and b.Status = '2' 
		left join gnMstCustomer c 
			on b.CompanyCode = c.CompanyCode
				and b.CustomerCode = c.CustomerCode 
		left join OmTrSalesDODetail d 
			on d.CompanyCode = z.CompanyCode and z.DONo=d.DONo
				and d.ChassisCode = z.ChassisCode		
				and d.ChassisNo = z.ChassisNo	
		left join OmTrSalesDO e 
			on e.CompanyCode = d.CompanyCode
				and e.DONo = d.DONo
				and e.BranchCode=d.BranchCode
				and e.Status = '2'
		inner join omMstModel f
			on f.CompanyCode = z.CompanyCode
				and f.SalesModelCode = z.SalesModelCode
	where 
		z.CompanyCode = @CompanyCode
		and z.ReqOutNo = ''
		and z.status in ('3','4','5','6')
		and not exists (select 1 from omTrSalesReqdetail where ChassisCode=z.ChassisCode and ChassisNo=z.ChassisNo)
		and ((case when z.ChassisNo is not null then z.SONo end) is not null 
			or (case when z.ChassisNo is not null then z.DONo end) is not null)
		and f.IsCBU = @CBU
) #t1

select * from #t1 
where ((case when @isDirect = 1 then BranchCode end)= @Penjual
		or (case when @isDirect <> 1 then CustomerCode end)= @Penjual)
drop table #t1
GO

if object_id('uspfn_omSlsDoLkpShipto') is not null
	drop procedure uspfn_omSlsDoLkpShipto
GO
CREATE procedure [dbo].[uspfn_omSlsDoLkpShipto]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProfitCenterCode varchar(3)
) 
as begin
--exec uspfn_omSlsDoLkpShipto 6006410,600641001,300
SELECT a.CompanyCode
	,a.CustomerCode
	,a.StandardCode
	,a.CustomerName
	,a.CustomerAbbrName
	,a.CustomerGovName
	,a.CustomerType
	,a.CategoryCode
	,a.Address1
	,a.Address2
	,a.Address3
	,a.Address4
	,a.PhoneNo
	,a.HPNo
	,a.FaxNo
	,a.isPKP
	,a.NPWPNo
	,a.NPWPDate
	,a.SKPNo
	,a.SKPDate
	,a.ProvinceCode
	,a.AreaCode
	,a.CityCode
	,a.ZipNo
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.isLocked
	,a.LockingBy
	,a.LockingDate
	,a.Email
	,a.BirthDate
	,a.Spare01
	,a.Spare02
	,a.Spare03
	,a.Spare04
	,a.Spare05
	,a.Gender
	,a.OfficePhoneNo
	,a.KelurahanDesa
	,a.KecamatanDistrik
	,a.KotaKabupaten
	,a.IbuKota
	,a.CustomerStatus
	  FROM gnMstCustomer a 
	INNER JOIN gnMstCustomerProfitCenter b
	  ON a.CompanyCode = b.CompanyCode AND 
		 a.CustomerCode = b.CustomerCode AND
		 b.BranchCode = @BranchCode
	WHERE a.CompanyCode = @CompanyCode AND 
		  b.ProfitCenterCode = @ProfitCenterCode                      
end
GO

if object_id('uspfn_QueryCustomerDealer') is not null
	drop procedure uspfn_QueryCustomerDealer
GO
-- usprpt_QueryCustomerDealer '0','2012-1-1','2012-12-12','Cabang','6006406','6006401'
CREATE procedure [dbo].[uspfn_QueryCustomerDealer]
	@CheckDate	bit,
	@StartDate	Datetime,
	@EndDate	Datetime,
	@Area		varchar(15),
	@Dealer		varchar(15),
	@Outlet		varchar(15)
as 
if @Outlet = ''
begin
	select a.CompanyCode
		, b.DealerAbbreviation
		, a.CustomerCode
		, a.SuzukiCode
		, a.Suzuki2Code
		, a.CustomerName
		, a.CustomerGovName
		, a.Address1 + a.Address2 + a.Address3 + a.Address4 Address
		, a.ProvinceCode
		, a.ProvinceName
		, a.CityCode
		, a.CityName
		, a.ZipNo
		, a.KelurahanDesa
		, a.KecamatanDistrik
		, a.KotaKabupaten
		, a.IbuKota
		, a.PhoneNo
		, a.HPNo
		, a.FaxNo
		, a.OfficePhoneNo
		, a.Email
		, a.Gender
		, a.BirthDate
		, a.isPKP
		, a.NPWPNo
		, a.NPWPDate
		, a.SKPNo
		, a.SKPDate
		, a.CustomerType
		, a.CustomerTypeDesc
		, a.CategoryCode
		, a.CategoryDesc
		, a.Status
		, a.CustomerStatus
	from gnMstCustomerDealer a
	left join GnMstDealerMapping b on a.CompanyCode = b.DealerCode
	where  case when @CheckDate = 1 
				then convert(varchar,a.CreatedDate,112) 
				else convert(varchar,@StartDate,112) 
				end between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112) 
	  and isnull(b.Area,'')			like case when isnull(@Area,'') <> ''	then @Area		else '%%' end
	  and isnull(b.DealerCode,'')	like case when isnull(@Dealer,'') <> '' then @Dealer	else '%%' end
end
else
begin
	select a.CompanyCode
		, c.DealerAbbreviation
		, a.CustomerCode
		, a.SuzukiCode
		, a.Suzuki2Code
		, a.CustomerName
		, a.CustomerGovName
		, a.Address1 + a.Address2 + a.Address3 + a.Address4 Address
		, a.ProvinceCode
		, a.ProvinceName
		, a.CityCode
		, a.CityName
		, a.ZipNo
		, a.KelurahanDesa
		, a.KecamatanDistrik
		, a.KotaKabupaten
		, a.IbuKota
		, a.PhoneNo
		, a.HPNo
		, a.FaxNo
		, a.OfficePhoneNo
		, a.Email
		, a.Gender
		, a.BirthDate
		, a.isPKP
		, a.NPWPNo
		, a.NPWPDate
		, a.SKPNo
		, a.SKPDate
		, a.CustomerType
		, a.CustomerTypeDesc
		, a.CategoryCode
		, a.CategoryDesc
		, a.Status
		, a.CustomerStatus
	from gnMstCustomerDealer a
	left join GnMstDealerMapping c on a.CompanyCode = c.DealerCode
	where  case when @CheckDate = 1 
				then convert(varchar,a.CreatedDate,112) 
				else convert(varchar,@StartDate,112) 
				end between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112) 
	  and isnull(c.Area,'')			like case when isnull(@Area,'') <> ''	then @Area		else '%%' end
	  and isnull(c.DealerCode,'')	like case when isnull(@Dealer,'') <> '' then @Dealer	else '%%' end
	  and a.CustomerCode in (select distinct k.CustomerCode 
									from gnMstCustomerDealerProfitCenter k
									left join GnMstDealerMapping l on k.CompanyCode = l.DealerCode
									where isnull(l.Area,'')			 like case when isnull(@Area,'') <> ''	then @Area		else '%%' end
										and isnull(k.CompanyCode,'') like case when isnull(@Dealer,'') <> '' then @Dealer	else '%%' end
										and isnull(k.BranchCode,'')	 like case when isnull(@Outlet,'') <> '' then @Outlet	else '%%' end)
end

--select * from OmHstInquirySales
--select * from GnMstCustomerDealer
GO

if object_id('uspfn_spCustSOPickListNewOrder') is not null
	drop procedure uspfn_spCustSOPickListNewOrder
GO
CREATE procedure [dbo].[uspfn_spCustSOPickListNewOrder]   
--DECLARE
@CompanyCode varchar(15),  
@BranchCode varchar(15),  
@ProfitCenterCode varchar(3),  
@TypeOfGoods varchar(2)  
as  
--SET @CompanyCode = '6006410'
--SET @BranchCode = '600641001'
----SET @ProfitCenterCode = '000' --
--SET @TypeOfGoods = '0'
SELECT x.CustomerCode,  
                    (  
                     SELECT c.CustomerName   
                     FROM gnMstCustomer c with(nolock, nowait)  
                     where  c.CompanyCode=x.CompanyCode  
                     AND c.CustomerCode= x.CustomerCode   
                     AND c.CustomerCode=x.CustomerCode  
                    ) AS CustomerName,  
                    (  
                     SELECT c.Address1+' '+c.Address2+' '+c.Address3+' '+c.Address4   
                     FROM gnMstCustomer c with(nolock, nowait)  
                     where  c.CompanyCode=x.CompanyCode  
                     AND c.CustomerCode= x.CustomerCode   
                     AND c.CustomerCode=x.CustomerCode  
  
                    ) as Address  
                    , z.LookUpValueName as ProfitCenter  
                    FROM   
                    (  
                     SELECT DISTINCT a.CompanyCode, a.BranchCode,  
                     b.CustomerCode   
                     FROM spTrnSOSupply a WITH(nolock, nowait) INNER JOIN   
                        spTrnSOrdHdr b ON a.CompanyCode=b.CompanyCode  
                     and a.BranchCode=b.BranchCode  
                     and a.DocNo=b.DocNo  
                        and b.TypeOfGoods=@TypeOfGoods  
                     WHERE pickingslipno = ''  
                    ) x   
                    INNER JOIN gnMstCustomerProfitCenter y WITH(nolock, nowait)  
                    ON y.CompanyCode = x.CompanyCode   
                       AND y.BranchCode = x.BranchCode  
                       AND y.CustomerCode = x.CustomerCode  
                    INNER JOIN gnMstLookUpDtl z WITH(nolock, nowait)  
                    ON z.CompanyCode= x.CompanyCode  
                       AND z.CodeID='PFCN'  
                       AND z.LookupValue=y.ProfitCenterCode  
                    WHERE x.CompanyCode=@CompanyCode  
                        AND x.BranchCode=@BranchCode  
                       AND y.ProfitCenterCode=@ProfitCenterCode
GO




if object_id('uspfn_spGetLookupLMP4Srv') is not null
	drop procedure uspfn_spGetLookupLMP4Srv
GO
CREATE procedure [dbo].[uspfn_spGetLookupLMP4Srv]     
@CompanyCode varchar(15), @BranchCode varchar(15),    
@SalesType varchar(5), @TypeOfGoods varchar(15), @ProductType varchar(15)    
as    
SELECT * FROM     
(    
SELECT    
 PickingSlipNo,     
 PickingSlipDate,    
 BPSFNo,     
 BPSFDate,    
 (    
   SELECT TOP 1 PRODUCTTYPE FROM spTrnSBPSFDtl    
  WHERE spTrnSBPSFHdr.CompanyCode = spTrnSBPSFDtl.CompanyCode    
  AND spTrnSBPSFHdr.BranchCode = spTrnSBPSFDtl.BranchCode    
  AND spTrnSBPSFHdr.BPSFNo = spTrnSBPSFDtl.BPSFNo    
 ) AS ProductType,  
 spTrnSBPSFHdr.CustomerCode,
 spTrnSBPSFHdr.CustomerCodeShip,
 spTrnSBPSFHdr.CustomerCodeBill as CustomerCodeTagih, 
 b.CustomerName,  
 b.Address1,  
 b.Address2,  
 b.Address3,  
 b.Address4,  
 b.CustomerName CustomerNameTagih,  
 b.Address1 Address1Tagih,  
 b.Address2 Address2Tagih,  
 b.Address3 Address3Tagih,  
 b.Address4 Address4Tagih,  
 c.LookUpValueName TransType    
FROM spTrnSBPSFHdr    
join gnMstCustomer b  
ON spTrnSBPSFHdr.CompanyCode = b.CompanyCode  
AND spTrnSBPSFHdr.CustomerCode = b.CustomerCode  
join gnMstLookupDtl c on  
spTrnSBPSFHdr.CompanyCode = c.CompanyCode  
and spTrnSBPSFHdr.TransType= c.LookupValue   
AND c.CodeID = 'TTSR'  
WHERE spTrnSBPSFHdr.CompanyCode = @CompanyCode    
AND spTrnSBPSFHdr.BranchCode    = @BranchCode    
AND spTrnSBPSFHdr.SalesType     = @SalesType    
AND spTrnSBPSFHdr.TypeOfGoods   = @TypeOfGoods    
AND (spTrnSBPSFHdr.Status = '1' OR spTrnSBPSFHdr.Status = '0')    
AND (spTrnSBPSFHdr.PickingSlipNo NOT IN (SELECT PickingSlipNo FROM spTrnSLmpHdr where CompanyCode = @CompanyCode AND BranchCode = @BranchCode))    
) A    
WHERE A.ProductType = @ProductType
GO

if object_id('uspfn_SpOrderSparepartView') is not null
	drop procedure uspfn_SpOrderSparepartView
GO
CREATE procedure [dbo].[uspfn_SpOrderSparepartView] @CompanyCode varchar(10) ,@BranchCode varchar(10), @TypeOfGoods varchar(2), @ProductType varchar(2)
as  
SELECT    
ItemInfo.PartNo,  
Items.ABCClass,  
ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,  
Items.OnOrder,  
Items.ReservedSP,  
Items.ReservedSR,  
Items.ReservedSL,  
Items.MovingCode,  
ItemInfo.SupplierCode,  
ItemInfo.PartName,  
ItemInfo.DiscPct,
ItemPrice.RetailPrice,  
ItemPrice.RetailPriceInclTax,  
ItemPrice.PurchasePrice  
FROM SpMstItems Items  
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                            
                         AND Items.PartNo = ItemInfo.PartNo  
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode  
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo  
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode  
                        AND Items.PartNo = ItemLoc.PartNo  
WHERE Items.CompanyCode = @CompanyCode  
  AND Items.BranchCode  = @BranchCode 
  AND Items.TypeOfGoods = @TypeOfGoods
  AND Items.ProductType = @ProductType  
  AND Items.Status > 0  
  AND ItemLoc.WarehouseCode = '00'
GO


if object_id('uspfn_spPickingHdrSales') is not null
	drop procedure uspfn_spPickingHdrSales
GO
CREATE procedure [dbo].[uspfn_spPickingHdrSales] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25), @CodeID varchar(6)  
as      
SELECT DISTINCT  
                            spTrnSORDHdr.DocNo,        
                            spTrnSORDHdr.DocDate,                                                    
                            PaymentName =   
                            (select LookUpValueName from gnMstLookupDtl   
                            where LookupValue = spTrnSORDHdr.PaymentCode and CodeID = @CodeID),  
                            spTrnSORDHdr.OrderNo,                              
                            spTrnSORDHdr.OrderDate,  
                            CONVERT(bit, 1) ChkSelect,
                            spTrnSPickingHdr.Remark                            
                            FROM spTrnSPickingHdr   
                            LEFT JOIN spTrnSPickingDtl ON spTrnSPickingHdr.PickingSlipNo = spTrnSPickingDtl.PickingSlipNo AND  
                                spTrnSPickingHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND  
                                spTrnSPickingHdr.BranchCode = spTrnSPickingDtl.BranchCode      
                            INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSPickingDtl.DocNo AND  
                                spTrnSORDHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND  
                                spTrnSORDHdr.BranchCode = spTrnSPickingDtl.BranchCode  
                            WHERE spTrnSPickingHdr.PickingSlipNo = @PickingSlipNo AND  
                            spTrnSPickingHdr.CompanyCode = @CompanyCode AND  
                            spTrnSPickingHdr.BranchCode = @BranchCode
GO


if object_id('uspfn_SpposView') is not null
	drop procedure uspfn_SpposView
GO
CREATE procedure [dbo].[uspfn_SpposView] (  @CompanyCode varchar(15) ,@BranchCode varchar(15), @TypeOfGoods	 varchar(15))
   as
            SELECT 
                DISTINCT a.POSNo, a.SupplierCode, b.SupplierName 
            FROM 
                spTrnPOrderBalance a 
            INNER JOIN gnMstSupplier b 
               ON b.SupplierCode = a.SupplierCode 
              AND b.CompanyCode  = a.CompanyCode 
            WHERE a.OrderQty > a.Received
              AND a.CompanyCode = @CompanyCode
              AND a.BranchCode  = @BranchCode
			  AND a.TypeOfGoods = @TypeOfGoods	
            ORDER BY POSNo DESC
GO


if object_id('uspfn_spSelectPickingSlip') is not null
	drop procedure uspfn_spSelectPickingSlip
GO
CREATE procedure [dbo].[uspfn_spSelectPickingSlip] @CompanyCode varchar(15), @BranchCode varchar(15), 
@ProductType varchar(4), @JobOrderNo varchar(25)
as
SELECT * INTO #t1 FROM (
                SELECT
                    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
                    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
                    d.PickedBy
                FROM
                    svTrnService a
                LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
	                AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
                LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
	                AND c.DocNo = b.SupplySlipNo
                LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
	                AND d.PickingSlipNo = c.ExPickingSlipNo
                LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
	                AND e.PickingSlipNo = d.PickingSlipNo
                LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
                    AND f.LookUpValue = c.TransType
                LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
                    AND g.PickingSlipNo = d.PickingSlipNo
                WHERE 
                    a.CompanyCode     = @CompanyCode
                    AND a.BranchCode  = @BranchCode
                    AND a.ProductType = @ProductType
                    AND a.jobOrderNo  = @JobOrderNo
                    AND b.SupplySlipNo <> ''
                    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		                   AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
                    AND d.Status <= 2
            )#t1
            SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
            DROP TABLE #t1
GO


if object_id('uspfn_spSuppliers') is not null
	drop procedure uspfn_spSuppliers
GO
CREATE procedure [dbo].[uspfn_spSuppliers]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10), @ProfitCenterCode char(3)) 
	   as
	            SELECT distinct
                    a.SupplierCode, a.SupplierName, (a.address1+' '+a.address2+' '+a.address3+' '+a.address4) as Alamat,
                    b.DiscPct as Diskon, (Case a.Status when 0 then 'Tidak Aktif' else 'Aktif' end) as [Status],
                    (SELECT Lookupvaluename FROM gnmstlookupdtl WHERE codeid='PFCN' 
                     AND lookupvalue = b.ProfitCentercode) as Profit
                FROM 
                    gnMstSupplier a
                JOIN gnmstSupplierProfitCenter b ON a.CompanyCode= b.CompanyCode
	                AND a.SupplierCode = b.SupplierCode
                WHERE 
                    a.CompanyCode=@CompanyCode
                    AND b.BranchCode=@BranchCode
					AND b. ProfitCenterCode=@ProfitCenterCode
                    AND b.isBlackList=0
                    AND a.status = 1
GO

if object_id('uspfn_spTrnIAdjustDtlview') is not null
	drop procedure uspfn_spTrnIAdjustDtlview
GO
CREATE PROCEDURE [dbo].[uspfn_spTrnIAdjustDtlview]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@AdjustmentNo varchar(25) 
 
AS
SELECT 
        row_number () OVER (ORDER BY spTrnIAdjustDtl.CreatedDate) AS No,
        spTrnIAdjustDtl.PartNo,
        spMstItemInfo.PartName,
        spTrnIAdjustDtl.WarehouseCode,	
        spTrnIAdjustDtl.LocationCode,
		spTrnIAdjustDtl.AdjustmentCode,
        gnMstLookUpDtl_1.LookUpValueName AS AdjustmentDesc,
	    gnMstLookUpDtl_2.LookUpValueName AS WarehouseName,
        spTrnIAdjustDtl.QtyAdjustment,
		spTrnIAdjustDtl.ReasonCode,
        gnMstLookUpDtl.LookUpValueName AS ReasonDesc
    FROM 
        spTrnIAdjustDtl
        INNER JOIN spTrnIAdjustHdr ON spTrnIAdjustHdr.AdjustmentNo = spTrnIAdjustDtl.AdjustmentNo 
            AND spTrnIAdjustHdr.CompanyCode =  spTrnIAdjustDtl.CompanyCode
            AND spTrnIAdjustHdr.BranchCode =  spTrnIAdjustDtl.BranchCode
        INNER JOIN spMstItemInfo ON spMstItemInfo.PartNo = spTrnIAdjustDtl.PartNo
            AND spMstItemInfo.CompanyCode = spTrnIAdjustDtl.CompanyCode
        INNER JOIN gnMstLookUpDtl ON gnMstLookUpDtl.LookUpValue = spTrnIAdjustDtl.ReasonCode
            AND gnMstLookUpDtl.CompanyCode = spTrnIAdjustDtl.CompanyCode
        INNER JOIN gnMstLookUpDtl AS gnMstLookUpDtl_1 ON gnMstLookUpDtl_1.LookUpValue = spTrnIAdjustDtl.AdjustmentCode
            AND gnMstLookUpDtl_1.CompanyCode = spTrnIAdjustDtl.CompanyCode
	    INNER JOIN gnMstLookUpDtl AS gnMstLookUpDtl_2 ON gnMstLookUpDtl_2.LookUpValue = spTrnIAdjustDtl.WarehouseCode
            AND gnMstLookUpDtl_2.CompanyCode = spTrnIAdjustDtl.CompanyCode
    WHERE 
        spTrnIAdjustDtl.CompanyCode = @CompanyCode
        AND spTrnIAdjustDtl.BranchCode = @BranchCode
        AND gnMstLookUpDtl.CodeId='RSAD'
	    AND gnMstLookUpDtl_2.CodeId='WRCD'
        AND gnMstLookUpDtl_1.CodeID = 'ADJS'
        AND spTrnIAdjustDtl.AdjustmentNo =  @AdjustmentNo
    ORDER BY spTrnIAdjustDtl.CreatedDate
GO


if object_id('uspfn_spTrnPPOSHdr') is not null
	drop procedure uspfn_spTrnPPOSHdr
GO
CREATE procedure [dbo].[uspfn_spTrnPPOSHdr] 
@CompanyCode varchar(10),@BranchCode varchar(10),
@TypeOfGoods varchar(10),
 @Status  int
as 
SELECT a.POSNo, a.PosDate , a.Status ,a.SupplierCode ,b.SupplierName, a.OrderType
                FROM spTrnPPOSHdr a
                INNER JOIN gnMstSupplier b ON b.SupplierCode = a.SupplierCode and b.CompanyCode = a.CompanyCode
    WHERE a.CompanyCode=@CompanyCode 
                AND a.BranchCode=@BranchCode
                AND a.TypeOfGoods=@TypeOfGoods
                AND a.Status <=@Status           ORDER BY a.POSNo DESC
GO


if object_id('uspfn_spTrnPSUGGORHdr') is not null
	drop procedure uspfn_spTrnPSUGGORHdr
GO
CREATE procedure [dbo].[uspfn_spTrnPSUGGORHdr] (  @CompanyCode varchar(15) ,  @BranchCode varchar(15) )
 as

SELECT 
 a.SuggorNo
--,a.SuggorDate
,CONVERT(varchar(15), a.SuggorDate, 103) as SuggorDate
,a.SupplierCode
,b.SupplierName
FROM spTrnPSUGGORHdr a
LEFT JOIN gnMstSupplier b on b.CompanyCode=a.CompanyCode AND b.SupplierCode=a.SupplierCode                               
WHERE a.CompanyCode=@CompanyCode AND a.BranchCode=@BranchCode

AND a.status < 2
ORDER BY a.SuggorNo DESC
GO

if object_id('uspfn_SvGetCustVehicle') is not null
	drop procedure uspfn_SvGetCustVehicle
GO
CREATE procedure [dbo].[uspfn_SvGetCustVehicle]
   @CompanyCode varchar(15)
as

select a.ChassisCode, cast(a.ChassisNo as varchar) ChassisNo, a.EngineCode, a.SalesModelYear
     , cast(a.EngineNo as varchar) EngineNo, a.ServiceBookNo
     , case a.PoliceRegistrationDate when ('19000101') then NULL else a.PoliceRegistrationDate end as PoliceRegistrationDate
     , a.PoliceRegistrationNo
     , case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
     , b.BasicModel
     , b.TechnicalModelCode
     , b.TransmissionType
     , a.ColourCode
     , c.CustomerCode
     , c.CompanyCode
     , '' ContactName
     , '' ContactAddress
     , '' ContactPhone
  from omMstVehicle a
  left join omMstModel b
    on b.CompanyCode = a.CompanyCode
   and b.SalesModelCode = a.SalesModelCode
  left join omTrSalesInvoice c
    on c.CompanyCode = a.CompanyCode
   and c.InvoiceNo = a.InvoiceNo
 where a.CompanyCode = @CompanyCode
   and a.IsActive = 1
 order by a.ChassisCode, a.ChassisNo
 
 select * from SvChassicView
GO

if object_id('uspfn_SvInqGetClaimLku') is not null
	drop procedure uspfn_SvInqGetClaimLku
GO
CREATE procedure [dbo].[uspfn_SvInqGetClaimLku]
	 @CompanyCode		varchar(20),
	 @BranchCodeFrom    varchar(20),
	 @BranchCodeTo		varchar(20),
	 @IsSprClaim		bit = 0
	 
as

declare @prefix varchar(10)

if exists (select * from gnMstLookUpDtl 
			 where CompanyCode = @CompanyCode 
			   and CodeId = 'SRV_FLAG' 
			   and LookUpValue = 'CLM_MODE'
			   and ParaValue = '1')  -- 0: SPK, 1: INV --> Default: SPK
	set @prefix = 'INW%'
else
	set @prefix = 'SPK%'

if @BranchCodeFrom = '[All Branch]' and @BranchCodeTo = '[All Branch]'
begin
	select a.BranchCode, a.InvoiceNo, b.JobOrderDate as InvoiceDate, a.IsCbu, a.CategoryCode, a.ComplainCode, a.DefectCode  
	  , a.SubletHour, a.SubletAmt, a.CausalPartNo, a.TroubleDescription  
	  , a.ProblemExplanation, a.OperationNo, isnull(a.OperationHour,0) as OperationHour, isnull(a.OperationAmt,0) as OperationAmt    
	  from svTrnInvClaim a  
	  left join svTrnService b  
		on b.CompanyCode = a.CompanyCode  
	   and b.BranchCode = a.BranchCode  
	   and b.JobOrderNo = a.InvoiceNo  
	 where 1 = 1  
	   and a.CompanyCode = @CompanyCode  
--	   and a.BranchCode between @BranchCodeFrom and @BranchCodeTo  
	   and not exists (  
		  select 1 from svTrnClaimApplication  
		   where 1 = 1  
			 and CompanyCode = a.CompanyCode  
			 and BranchCode = a.BranchCode  
			 and ProductType = a.ProductType  
			 and InvoiceNo = a.InvoiceNo  
		  )  
	   and a.InvoiceNo like @prefix  
	   and isnull(b.IsSparepartClaim, 0) = @IsSprClaim
	 order by a.InvoiceNo  
end
else
begin
	select a.BranchCode, a.InvoiceNo, b.JobOrderDate as InvoiceDate, a.IsCbu, a.CategoryCode, a.ComplainCode, a.DefectCode  
	  , a.SubletHour, a.SubletAmt, a.CausalPartNo, a.TroubleDescription  
	  , a.ProblemExplanation, a.OperationNo, isnull(a.OperationHour,0) as OperationHour, isnull(a.OperationAmt,0) as OperationAmt  
	  from svTrnInvClaim a  
	  left join svTrnService b  
		on b.CompanyCode = a.CompanyCode  
	   and b.BranchCode = a.BranchCode  
	   and b.JobOrderNo = a.InvoiceNo  
	 where 1 = 1  
	   and a.CompanyCode = @CompanyCode  
	   and a.BranchCode between @BranchCodeFrom and @BranchCodeTo  
	   and not exists (  
		  select 1 from svTrnClaimApplication  
		   where 1 = 1  
			 and CompanyCode = a.CompanyCode  
			 and BranchCode = a.BranchCode  
			 and ProductType = a.ProductType  
			 and InvoiceNo = a.InvoiceNo  
		  )  
	   and a.InvoiceNo like @prefix  
	   and isnull(b.IsSparepartClaim, 0) = @IsSprClaim
	 order by a.InvoiceNo  
end
GO

if object_id('uspfn_SvTrnInvoiceCreate') is not null
	drop procedure uspfn_SvTrnInvoiceCreate
GO
--declare	@CompanyCode varchar(15)
--declare	@BranchCode  varchar(15)
--declare	@ProductType varchar(15)
--declare	@ServiceNo   int
--declare	@BillType    char(1)
--declare	@InvoiceNo   varchar(15)
--declare	@Remarks     varchar(max)
--declare	@UserID      varchar(15)
--
--set	@CompanyCode = '6026401'
--set	@BranchCode  = '602640100'
--set	@ProductType = '4W'
--set	@ServiceNo   = '266'
--set	@BillType    = 'C'
--set	@InvoiceNo   = 'INF/XX/123456'
--set	@Remarks     = 'REMARK 001'
--set	@UserID      = 'ws-s'

CREATE procedure [dbo].[uspfn_SvTrnInvoiceCreate]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   int,
	@BillType    char(1),
	@InvoiceNo   varchar(15),
	@Remarks     varchar(max),
	@UserID      varchar(15)
as  

declare @errmsg varchar(max)
--raiserror ('test error',16,1);

-- get data from service
select * into #srv from(
  select * from svTrnService
   where 1 = 1
     and CompanyCode = @CompanyCode
     and BranchCode  = @BranchCode
     and ProductType = @ProductType
     and ServiceNo   = @ServiceNo
 )#srv

-- get data from task
select * into #tsk from(
  select a.* from svTrnSrvTask a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#tsk

-- get data from item
select * into #mec from(
  select a.* from svTrnSrvMechanic a, #tsk b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.OperationNo = b.OperationNo
     and a.OperationNo <> ''
 )#mec

-- get data from item
select * into #itm from(
  select a.* from svTrnSrvItem a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#itm

-- create temporary table detail
create table #pre_dtl(
	BillType char(1),
	TaskPartType char(1),
	TaskPartNo varchar(20),
	TaskPartQty numeric(10,2),
	SupplySlipNo varchar(20)
)

insert into #pre_dtl
select BillType, 'L', OperationNo, OperationHour, ''
  from #tsk

insert into #pre_dtl
select BillType, TypeOfGoods, PartNo
	 , sum(SupplyQty - ReturnQty)
	 , SupplySlipNo
  from #itm
 where BillType = @BillType
   and (SupplyQty - ReturnQty) > 0
 group by BillType, TypeOfGoods, PartNo, SupplySlipNo

-- insert to table svTrnInvoice
declare @CustomerCode varchar(20)
if @BillType = 'C'
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end
else if @BillType = 'P'
begin
	set @CustomerCode = (select top 1 a.BillTo from svMstPackage a
				 inner join svMstPackageTask b
					on b.CompanyCode = a.CompanyCode
				   and b.PackageCode = a.PackageCode
				 inner join svMstPackageContract c
					on c.CompanyCode = a.CompanyCode
				   and c.PackageCode = a.PackageCode
				 inner join #srv d
					on d.CompanyCode = a.CompanyCode
				   and d.JobType = a.JobType
				   and d.ChassisCode = c.ChassisCode
				   and d.ChassisNo = c.ChassisNo)
end
else if @BillType in ('F', 'W', 'S')
begin
	set @CustomerCode = (select CustomerCode from svMstBillingType
				 where BillType in ('F', 'W', 'S')
				   and CompanyCode = @CompanyCode
				   and BillType = @BillType)
end
else
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end

--set @CustomerCode = isnull((
--				select top 1 a.BillTo from svMstPackage a
--				 inner join svMstPackageTask b
--					on b.CompanyCode = a.CompanyCode
--				   and b.PackageCode = a.PackageCode
--				 inner join svMstPackageContract c
--					on c.CompanyCode = a.CompanyCode
--				   and c.PackageCode = a.PackageCode
--				 inner join #srv d
--					on d.CompanyCode = a.CompanyCode
--				   and d.JobType = a.JobType
--				   and d.ChassisCode = c.ChassisCode
--				   and d.ChassisNo = c.ChassisNo
--				), isnull((
--				select CustomerCode from svMstBillingType
--				 where BillType in ('F')
--				   and CompanyCode = @CompanyCode
--				   and BillType = @BillType
--				), isnull((select CustomerCodeBill from #srv), '')))


if ((select count(*) from #tsk) = 0 and (select count(*) from #itm) = 0)
begin
	drop table #srv
	drop table #tsk
	drop table #mec
	drop table #itm
	drop table #pre_dtl
	return
end

if (@CustomerCode = '')
begin
	set @errmsg = N'Customer Code Bill belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

select * into #cus from (
select a.CompanyCode, a.IsPkp, b.CustomerCode, b.LaborDiscPct, b.PartDiscPct, b.MaterialDiscPct, b.TopCode, b.TaxCode
  from gnMstCustomer a, gnMstCustomerProfitCenter b
 where 1 = 1
   and b.CompanyCode  = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.CompanyCode  = @CompanyCode
   and b.BranchCode   = @BranchCode
   and b.CustomerCode = @CustomerCode
   and b.ProfitCenterCode = '200'
)#cus

if (select count(*) from #cus) <> 1
begin
	set @errmsg = N'Customer ProfitCenter belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

declare @IsPKP bit
    set @IsPKP = isnull((
				 select IsPKP from gnMstCustomer
				  where CompanyCode  = @CompanyCode
				    and CustomerCode = @CustomerCode
				  ), 0)

declare @PPnPct decimal
    set @PPnPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPN'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)

declare @PPhPct decimal
    set @PPhPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPH'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)


-- Insert Into svTrnInvoice
-----------------------------------------------------------------------------------------
insert into svTrnInvoice(
  CompanyCode, BranchCode, ProductType
, InvoiceNo, InvoiceDate, InvoiceStatus
, FPJNo, FPJDate, JobOrderNo, JobOrderDate, JobType
, ServiceRequestDesc, ChassisCode, ChassisNo, EngineCode, EngineNo
, PoliceRegNo, BasicModel, CustomerCode, CustomerCodeBill, Odometer
, IsPKP, TOPCode, TOPDays, DueDate, SignedDate
, LaborDiscPct, PartsDiscPct, MaterialDiscPct, PphPct, PpnPct, Remarks
, PrintSeq, PostingFlag, IsLocked, CreatedBy, CreatedDate
) 
select
  @CompanyCode CompanyCode
, @BranchCode BranchCode
, @ProductType ProductType
, @InvoiceNo InvoiceNo
, getdate() InvoiceDate
, case @IsPKP
	when '0' then '1'
	else (case @BillType when 'F' then '0' when 'W' then '0' else '1' end)
  end as InvoiceStatus
, '' FPJNo
, null FPJDate
, (select JobOrderNo from #srv) JobOrderNo
, (select JobOrderDate from #srv) JobOrderDate
, (select JobType from #srv) JobType
, (select ServiceRequestDesc from #srv) ServiceRequestDesc
, (select ChassisCode from #srv) ChassisCode
, (select ChassisNo from #srv) ChassisNo
, (select EngineCode from #srv) EngineCode
, (select EngineNo from #srv) EngineNo
, (select PoliceRegNo from #srv) PoliceRegNo
, (select BasicModel from #srv) BasicModel
, (select CustomerCode from #srv) CustomerCode
, @CustomerCode as CustomerCodeBill
, (select Odometer from #srv) Odometer
, (select IsPKP from #cus) as IsPKP
, (select TopCode from #cus) as TOPCode
, isnull((
	select b.ParaValue
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue = a.TopCode
	), null) as TOPDays
, isnull((
	select dateadd(day, convert(int,b.ParaValue), convert(varchar, getdate(), 112))
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue  = a.TopCode
	), null) as DueDate
, convert(varchar, getdate(), 112) SignedDate
, case @BillType
	when 'F' then (select LaborDiscPct from #cus) 
    when 'W' then (select LaborDiscPct from #cus) 
    else (select LaborDiscPct from #srv) 
  end as LaborDiscPct
, case @BillType
	when 'F' then (select PartDiscPct from #cus) 
    when 'W' then (select PartDiscPct from #cus) 
    else (select PartDiscPct from #srv) 
  end as PartsDiscPct
, case @BillType
	when 'F' then (select MaterialDiscPct from #cus) 
    when 'W' then (select MaterialDiscPct from #cus) 
    else (select MaterialDiscPct from #srv) 
  end as MaterialDiscPct
, @PPnPct as PPhPct
, @PPnPct as PPnPct
, @Remarks as Remarks
, '0' PrintSeq
, '0' PostingFlag
, '0' IsLocked
, @UserID CreatedBy
, getdate() CreatedDate

-- Insert Into svTrnInvTask
-----------------------------------------------------------------------------------------
insert into svTrnInvTask (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, OperationHour, ClaimHour, OperationCost, SubConPrice
, IsSubCon, SharingTask, DiscPct
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, isnull(OperationHour, 0) OperationHour, isnull(ClaimHour, 0) ClaimHour
, isnull(OperationCost, 0) OperationCost, isnull(SubConPrice, 0) SubConPrice
, isnull(IsSubCon, 0) IsSubCon, isnull(SharingTask, 0) SharingTask
, isnull(DiscPct, 0)
from #tsk

-- Insert Into svTrnInvMechanic
-----------------------------------------------------------------------------------------
insert into svTrnInvMechanic (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
from #mec

-- Insert Into svTrnInvItem
-----------------------------------------------------------------------------------------
select * into #itm1 from (
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, PartNo
	 , isnull((
		select MovingCode from spMstItems
		 where CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and PartNo = #itm.PartNo
		), '') as MovingCode
	 , isnull((
		select ABCClass from spMstItems
		 where CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and PartNo = #itm.PartNo
		), '') as ABCClass
	 , sum(SupplyQty - ReturnQty) as SupplyQty
	 , isnull((
		select 
		  case (sum(b.SupplyQty - b.ReturnQty))
			 when 0 then 0
			 else sum(a.CostPrice * (b.SupplyQty - b.ReturnQty)) / sum(b.SupplyQty - b.ReturnQty)
		  end 
	from SpTrnSLmpDtl a
	left join SvTrnSrvItem b on 1 = 1
	 and b.CompanyCode  = a.CompanyCode
	 and b.BranchCode   = a.BranchCode
	 and b.ProductType  = a.ProductType
	 and b.SupplySlipNo = a.DocNo
	 and b.PartNo = #itm.PartNo
	where 1 = 1
	 and a.CompanyCode = @CompanyCode
	 and a.BranchCode  = @BranchCode
	 and a.ProductType = @ProductType
	 and a.PartNo = #itm.PartNo
	 and a.DocNo in (
			select SupplySlipNo
			 from SvTrnSrvItem
			where 1 = 1
			  and CompanyCode = @CompanyCode
			  and BranchCode  = @BranchCode
			  and ProductType = @ProductType
			  and ServiceNo = @ServiceNo
			  and PartNo = #itm.PartNo
			)
	), 0) as CostPrice
, RetailPrice
, TypeOfGoods
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, RetailPrice, TypeOfGoods
)#

insert into svTrnInvItem (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo
, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice
, TypeOfGoods, DiscPct
)
select a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo
	 , MovingCode = (select top 1 MovingCode from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , ABCClass = (select top 1 ABCClass from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , sum(SupplyQty) as SupplyQty, 0 as ReturnQty
	 , CostPrice = (select top 1 CostPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by CostPrice desc)
	 , RetailPrice = (select top 1 RetailPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by RetailPrice desc)
	 , TypeOfGoods = (select top 1 TypeOfGoods from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , DiscPct = (select top 1 DiscPct from #itm where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
  from #itm1 a
 where a.SupplyQty > 0
 group by a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo


-- Insert Into svTrnInvItemDtl
-----------------------------------------------------------------------------------------
insert into svTrnInvItemDtl (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, SupplySlipNo
, SupplyQty, CostPrice, CreatedBy, CreatedDate
)
select y.* from (
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, PartNo, SupplySlipNo
, sum(SupplyQty - ReturnQty) as SupplyQty, CostPrice
, @UserID as CreatedBy, getdate() as CreatedDate
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, SupplySlipNo, CostPrice
) y
where y.SupplyQty > 0

-- Re Calculate Invoice
-----------------------------------------------------------------------------------------
exec uspfn_SvTrnInvoiceReCalculate @CompanyCode=@CompanyCode, @BranchCode=@BranchCode, @ProductType=@ProductType, @InvoiceNo=@InvoiceNo, @UserId=@UserId

drop table #srv
drop table #tsk
drop table #mec
drop table #itm
drop table #cus

drop table #pre_dtl
GO

if object_id('uspfn_SvTrnServiceSaveTask') is not null
	drop procedure uspfn_SvTrnServiceSaveTask
GO
--uspfn_SvTrnServiceSaveTask '6006410', '600641001', '4W', 4, 'C', 'PAKET GOM', 0.43, '1', 200000, 0, 'yo'

CREATE procedure [dbo].[uspfn_SvTrnServiceSaveTask]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@BillType varchar(15),
    @OperationNo varchar(50),
    @OperationHour numeric(5,2),
    @UserPrice bit = 0,
    @TaskPrice numeric(18,0) = 0,
    @DiscPct numeric(5,2) = 0,
	@UserID varchar(15)
as      

declare @errmsg varchar(max)

begin try
	-- select data svTrnService
	select * into #srv from (
	  select a.* from svTrnService a
		where 1 = 1
		  and a.CompanyCode = @CompanyCode
		  and a.BranchCode  = @BranchCode
		  and a.ProductType = @ProductType
		  and a.ServiceNo   = @ServiceNo
	)#srv

	-- check jika count svTrnSrvTask ada, maka diupdate
	if(select count(*) from svTrnSrvTask
        where 1 = 1
          and CompanyCode = @CompanyCode
          and BranchCode  = @BranchCode
          and ProductType = @ProductType
          and ServiceNo   = @ServiceNo
          and OperationNo = @OperationNo) = 1
	begin
	    print 'update svTrnSrvTask'
		select 'update svTrnSrvTask'
		-- update svTrnSrvTask
		update svTrnSrvTask set
			   OperationHour  = @OperationHour
			  ,OperationCost  =
					case @UserPrice
					 when 0 then
							isnull((
						   (select LaborPrice from svMstTaskPrice
							 where CompanyCode = @CompanyCode
							   and BranchCode  = @BranchCode
							   and ProductType = (select ProductType from #srv)
							   and BasicModel  = (select BasicModel from #srv)
							   and JobType     = (select JobType from #srv)
							   and OperationNo = @OperationNo)
							),
						   (select LaborPrice from svMstTask
							 where CompanyCode = @CompanyCode
							   and ProductType = (select ProductType from #srv)
							   and BasicModel  = (select BasicModel from #srv)
							   and JobType     = (select JobType from #srv)
							   and OperationNo = @OperationNo)
							)
					 else @TaskPrice
					end	
			  ,BillType       = @BillType
			  ,LastupdateBy   = (select LastupdateBy from #srv)
			  ,LastupdateDate = (select LastupdateDate from #srv)
			  ,DiscPct        = @DiscPct 
		 where 1 = 1
	       and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = (select ProductType from #srv)
		   and ServiceNo   = (select ServiceNo from #srv)
		   and OperationNo = @OperationNo
	end
	else
	begin
		-- select svTrnSrvTask
		-----------------------------------------------
		 print 'insert svTrnSrvTask'
		 select top 1
			 a.CompanyCode
			,a.ProductType
			,a.BasicModel
			,a.JobType
			,a.OperationNo
			,case b.JobType when 'CLAIM' then isnull(c.ClaimHour, a.ClaimHour) else isnull(c.OperationHour, a.OperationHour) end as OperationHour
			,case b.JobType
			   when 'CLAIM' then a.LaborCost
				else (case @UserPrice when 0 then isnull(c.LaborPrice, a.LaborPrice) else @TaskPrice end)
			   end as LaborPrice
			,a.IsSubCon
			,isnull(c.LaborCost, a.LaborCost) LaborCost
			,isnull(c.ClaimHour, a.ClaimHour) ClaimHour
			,a.IsCampaign
			,a.LastUpdateBy
			,a.LastUpdateDate
		  from svMstTask a
		 inner join #srv b
			on b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		  left join svMstTaskPrice c
			on c.CompanyCode = a.CompanyCode
		   and c.BranchCode  = b.BranchCode
		   and c.ProductType = a.ProductType
		   and c.BasicModel  = a.BasicModel
		   and c.JobType     = a.JobType
		   and c.OperationNo = a.OperationNo
		 where 1 = 1
		   and a.OperationNo = @OperationNo
		   and a.JobType in (b.JobType,'CLAIM','OTHER')
		   
		select * into #task from(
		select top 1
			 a.CompanyCode
			,a.ProductType
			,a.BasicModel
			,a.JobType
			,a.OperationNo
			,case b.JobType when 'CLAIM' then isnull(c.ClaimHour, a.ClaimHour) else isnull(c.OperationHour, a.OperationHour) end as OperationHour
			,case b.JobType
			   when 'CLAIM' then a.LaborCost
				else (case @UserPrice when 0 then isnull(c.LaborPrice, a.LaborPrice) else @TaskPrice end)
			   end as LaborPrice
			,a.IsSubCon
			,isnull(c.LaborCost, a.LaborCost) LaborCost
			,isnull(c.ClaimHour, a.ClaimHour) ClaimHour
			,a.IsCampaign
			,a.LastUpdateBy
			,a.LastUpdateDate
		  from svMstTask a
		 inner join #srv b
			on b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		  left join svMstTaskPrice c
			on c.CompanyCode = a.CompanyCode
		   and c.BranchCode  = b.BranchCode
		   and c.ProductType = a.ProductType
		   and c.BasicModel  = a.BasicModel
		   and c.JobType     = a.JobType
		   and c.OperationNo = a.OperationNo
		 where 1 = 1
		   and a.OperationNo = @OperationNo
		   and a.JobType in (b.JobType,'CLAIM','OTHER')
		)#task

		if (select count(*) from #task) <> 1 return

		-- insert svMstJob
		select * into #job from(
		select a.* from svMstJob a, #task b
		 where 1 = 1
		   and a.CompanyCode = b.CompanyCode
		   and a.ProductType = b.ProductType
		   and a.BasicModel  = b.BasicModel
		   and a.JobType     = b.JobType
		)#job

		-- prepare data svTrnSrvTask yg akan di Insert
		if (left(@OperationNo,3) = 'FSC' or left(@OperationNo,3) = 'PDI')
		begin
			insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
			select
				 @CompanyCode CompanyCode
				,@BranchCode BranchCode
				,@ProductType ProductType
				,@ServiceNo ServiceNo
				,a.OperationNo
				,(case @OperationHour when 0 then a.OperationHour else @OperationHour end) OperationHour
				,OperationCost = isnull((select top 1 a.RegularLaborAmount
								   from svMstPdiFscRate a, #srv b, #task c, #job d 
								  where 1 = 1
									and a.CompanyCode = b.CompanyCode
									and a.ProductType = b.ProductType
									and a.BasicModel  = b.BasicModel
									and a.IsCampaign  = c.IsCampaign
									and a.TransmissionType = a.TransmissionType
									and a.PdiFscSeq = d.PdiFscSeq
									and a.EffectiveDate <= getdate()
									and a.IsActive = 1
								 order by a.EffectiveDate desc),0)
				,a.IsSubCon
				,a.LaborCost SubConPrice
				,'' PONo
				,a.ClaimHour
				,'L' TypeOfGoods
				,'F' BillType
				,'0' SharingTask
				,'0' TaskStatus
				,null StartService
				,null FinishService
				,b.LastupdateBy CreatedBy
				,b.LastupdateDate CreatedDate
				,b.LastupdateBy
				,b.LastupdateDate
				,@DiscPct
			from #task a, #srv b
		end
		else
		begin
			insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
			select
				 @CompanyCode CompanyCode
				,@BranchCode BranchCode
				,@ProductType ProductType
				,@ServiceNo ServiceNo
				,a.OperationNo
				,(case @OperationHour when 0 then a.OperationHour else @OperationHour end) OperationHour
			    ,a.LaborPrice as OperationCost
				,a.IsSubCon
				,a.LaborCost SubConPrice
				,'' PONo
				,a.ClaimHour
				,'L' TypeOfGoods
				,@BillType BillType
				,'0' SharingTask
				,'0' TaskStatus
				,null StartService
				,null FinishService
				,b.LastupdateBy CreatedBy
				,b.LastupdateDate CreatedDate
				,b.LastupdateBy
				,b.LastupdateDate
				,@DiscPct
			from #task a, #srv b
		end

		-----------------------------------------------
		-- insert default svTrnSrvItem
		-----------------------------------------------
		select * into #part from(
		select a.* from svMstTaskPart a, #task b
		 where 1 = 1
		   and a.CompanyCode = b.CompanyCode
		   and a.ProductType = b.ProductType
		   and a.BasicModel  = b.BasicModel
		   and a.JobType     = b.JobType
		   and a.OperationNo = b.OperationNo
		)#part

		insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
		select 
			 @CompanyCode CompanyCode
			,@BranchCode BranchCode
			,@ProductType ProductType
			,@ServiceNo ServiceNo
			,a.PartNo
			,(row_number() over (order by a.PartNo)) PartSeq
			,a.Quantity DemandQty
			,'0' SupplyQty
			,'0' ReturnQty
			,c.CostPrice
			,case rtrim(a.BillType) when 'F' then a.RetailPrice else c.RetailPrice end RetailPrice
			,d.TypeOfGoods
			,a.BillType
			,null SupplySlipNo
			,null SupplySlipDate
			,null SSReturnNo
			,null SSReturnDate
			,b.LastupdateBy CreatedBy
			,b.LastupdateDate CreatedDate
			,b.LastupdateBy
			,b.LastupdateDate
			,@DiscPct
		  from #part a
		  left join #task b
			on b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		   and b.JobType     = a.JobType
		   and b.OperationNo = a.OperationNo
		  left join spMstItemPrice c
			on c.CompanyCode = a.CompanyCode
		   and c.BranchCode  = @BranchCode
		   and c.PartNo      = a.PartNo
		  left join spMstItems d
			on d.CompanyCode = a.CompanyCode
		   and d.BranchCode  = @BranchCode
		   and d.PartNo      = a.PartNo
		 where 1 = 1
		   and b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		   and b.JobType     = a.JobType
		   and b.OperationNo = a.OperationNo
		   and not exists (
				select 1 from svTrnSrvItem k, svTrnService l
				 where 1 = 1
				   and k.CompanyCode = l.CompanyCode
				   and k.BranchCode  = l.BranchCode
				   and k.ProductType = l.ProductType
				   and k.ServiceNo   = l.ServiceNo
				   and k.ServiceNo   = @ServiceNo
				   and k.PartNo      = a.PartNo
				)

		drop table #task
		drop table #part
		drop table #job
		end
	drop table #srv
end try
begin catch
	set @errmsg = error_message()
	raiserror (@errmsg,16,1);
end catch
GO


if object_id('uspfn_SvTrnServiceSelectDtl') is not null
	drop procedure uspfn_SvTrnServiceSelectDtl
GO
--declare	@CompanyCode varchar(15)
--declare	@BranchCode  varchar(15)
--declare	@ProductType varchar(15)
--declare	@ServiceNo   bigint

--set @CompanyCode = '6006400001' 
--set @BranchCode  = '6006400104'
--set @ProductType = '4W'
--set @ServiceNo   = 43543

--uspfn_SvTrnServiceSelectDtl '6006400001', '6006400104', '4w', 43543

CREATE procedure [dbo].[uspfn_SvTrnServiceSelectDtl]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   bigint
as      

begin

declare @t1 as table
(
 TaskPartSeq int
,BillType varchar(10)
,BillTypeDesc varchar(max)
,TypeOfGoods varchar(10)
,TypeOfGoodsDesc varchar(70)
,TaskPartNo varchar(50)
,OprHourDemandQty numeric(18,2)
,SupplyQty numeric(18,2)
,ReturnQty numeric(18,2)
,OprRetailPrice numeric(18,2)
,OprRetailPriceTotal numeric(18,2)
,SupplySlipNo varchar(20)
,TaskPartDesc varchar(max)
,BasicModel varchar(15)
,JobType varchar(15)
,IsSubCon bit
,Status varchar(10)
,GTGO varchar(10)
,DiscPct numeric(18,2)
,QtyAvail numeric(18,2)
,TaskStatus varchar(50)
)

declare @JobOrderNo varchar(15)
    set @JobOrderNo = isnull((select JobOrderNo from svTrnService where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ProductType = @ProductType and ServiceNo = @ServiceNo), '')

insert into @t1
select 0 TaskSeq 
      ,a.BillType
      ,b.Description BillTypeDesc
      ,a.TypeOfGoods
      ,case a.TypeOfGoods when 'L' then 'Labor (Jasa)' end TypeOfGoodsDesc
      ,a.OperationNo
      ,a.OperationHour
      ,0 OperationHourSupply
      ,0 OperationHourReturn
      ,a.OperationCost
      ,a.OperationHour * a.OperationCost * (100 - a.DiscPct) * 0.01 OprRetailPriceTotal
      ,'' SupplySlipNo
      ,rtrim(d.Description) OperationDesc 
	  ,c.BasicModel
	  ,c.JobType
	  ,a.IsSubCon
	  ,(select min(MechanicStatus) from svTrnSrvMechanic 
		where CompanyCode = a.CompanyCode 
			and BranchCode = a.BranchCode
			and ProductType = a.ProductType
			and ServiceNo = a.ServiceNo
			and OperationNo = a.OperationNo) MechanicStatus
	  ,''
	  ,a.DiscPct
	  ,0
      ,case(a.TaskStatus)
          when 0 then 'Open Task'
          when 1 then 'Work In Progress'
          when 2 then 'Close Task'
          when 9 then 'Cancel'
       end TaskStatus
  from svTrnSrvTask a with (nolock,nowait)
  left join svMstBillingType b with (nolock,nowait)
    on b.CompanyCode = a.CompanyCode
   and b.BillType = a.BillType
  left join svTrnService c with (nolock,nowait)
    on c.CompanyCode = a.CompanyCode
   and c.BranchCode = a.BranchCode
   and c.ProductType = a.ProductType
   and c.ServiceNo = a.ServiceNo
  left join svMstTask d with (nolock,nowait)
    on d.CompanyCode = a.CompanyCode
   and d.ProductType = a.ProductType
   and d.BasicModel = c.BasicModel
   and (d.JobType = c.JobType or d.JobType = 'CLAIM' or d.JobType = 'OTHER')
   and d.OperationNo = a.OperationNo 
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.BranchCode  = @BranchCode
   and a.ProductType = @ProductType
   and a.ServiceNo   = @ServiceNo

declare @tblTemp as table
(
	PartNo  varchar(15),
	QtyAvail decimal
)

declare @DealerCode as varchar(2)
declare @CompanyMD as varchar(15)
declare @BranchMD as varchar(15)

set @DealerCode = 'MD'
set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
begin	
	set @DealerCode = 'SD'
	declare @DbName as varchar(50)
	set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	
	declare @QueryTemp as varchar(max)
	
	set @QueryTemp = 'select 
			 a.PartNo
			 , (b.OnHand - (b.AllocationSP + b.AllocationSR + b.AllocationSL) - (b.ReservedSP + b.ReservedSR + b.ReservedSL)) 
		 from svTrnSrvItem a	 
		 left join ' + @DbName + '..spMstItems b on 
			a.PartNo = b.PartNo 
			and b.CompanyCode = ''' + @CompanyMD + '''
			and b.BranchCode = ''' + @BranchMD + '''
		 where a.CompanyCode = ''' + @CompanyCode + '''
		   and a.BranchCode  = ''' + @BranchCode + '''
		   and a.ProductType = ''' + @ProductType + '''
		   and a.ServiceNo   = ' + convert(varchar,@ServiceNo) + ''		   
				
		print(@QueryTemp)		
		insert into @tblTemp		
		exec (@QueryTemp)		
end

insert into @t1
select a.PartSeq
      ,a.BillType
      ,b.Description BillTypeDesc
      ,a.TypeOfGoods
      ,rtrim(c.LookupValueName) + case lower(g.ParaValue) when 'sparepart' then ' (SPR)' else ' (MTR)' end TypeOfGoodsDesc
      ,a.PartNo
      ,a.DemandQty
      ,a.SupplyQty
      ,a.ReturnQty
      ,a.RetailPrice
      ,(case isnull(a.SupplyQty, 0)
         when 0 then (isnull(a.DemandQty, 0) * isnull(a.RetailPrice, 0))
         else ((isnull(a.SupplyQty, 0) - isnull(a.ReturnQty, 0)) * isnull(a.RetailPrice, 0))
        end) * (100.0 - a.DiscPct) * 0.01
        as RetailPriceTotal
      ,a.SupplySlipNo
      ,rtrim(d.PartName) OperationDesc 
	  ,''
	  ,''
	  ,0
	  ,''
	  ,g.ParaValue
	  ,a.DiscPct
	  ,case when @DealerCode = 'MD' then (i.OnHand - (i.AllocationSP + i.AllocationSR + i.AllocationSL) - (i.ReservedSP + i.ReservedSR + i.ReservedSL)) else e.QtyAvail end QtyAvail
	  ,''
  from svTrnSrvItem a with (nolock,nowait)
  left join svMstBillingType b with (nolock,nowait)
    on b.CompanyCode = a.CompanyCode
   and b.BillType = a.BillType
  left join gnMstLookupDtl c with (nolock,nowait)
    on c.CompanyCode = a.CompanyCode
   and c.CodeID = 'TPGO'
   and c.LookupValue = TypeOfGoods
  left join spMstItemInfo d with (nolock,nowait)
    on d.CompanyCode = a.CompanyCode
   and d.PartNo = a.PartNo
  left join gnMstLookupDtl g with (nolock,nowait)
    on g.CompanyCode = a.CompanyCode
   and g.CodeID = 'GTGO'
   and g.LookupValue = TypeOfGoods
  left join svTrnService s with (nolock,nowait)
    on s.CompanyCode = a.CompanyCode
   and s.BranchCode = a.BranchCode
   and s.ServiceNo = a.ServiceNo
  left join spMstItems i
    on i.CompanyCode = a.CompanyCode 
   and i.BranchCode = a.BranchCode
   and i.ProductType = a.ProductType
   and i.PartNo = a.PartNo
   left join @tblTemp e
    on e.PartNo = a.PartNo
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.BranchCode  = @BranchCode
   and a.ProductType = @ProductType
   and a.ServiceNo   = @ServiceNo

select * into #t1 from (
select 
 a.* 
,P01 = isnull((
	select count(*) from spTrnSORDDtl with(nowait,nolock)
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and PartNo      = a.TaskPartNo
	   and DocNo in (select aa.DocNo
					   from spTrnSORDHdr aa with(nowait,nolock), svTrnService bb with(nowait,nolock)
					  where 1 = 1
						and bb.CompanyCode = aa.CompanyCode
						and bb.BranchCode  = aa.BranchCode
						and bb.JobOrderNo  = aa.UsageDocNo
						and isnull(bb.JobOrderNo, '') <> ''
						and aa.CompanyCode = @CompanyCode
						and aa.BranchCode  = @BranchCode
						and bb.ServiceNo   = @ServiceNo
					 )
	),0)
,P02 = isnull((
	select count(DocNo) from spTrnSOSupply with(nowait,nolock)
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and PartNo = a.TaskPartNo
	   and DocNo  = a.SupplySlipNo
	),0)
,P03 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSPickingHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,P04 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSPickingHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	   and bb.Status >= '2'
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,P05 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSLmpHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,P06 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSLmpHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	   and bb.Status >= '1'
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,S01 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	),0)
,S02 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '2'
	),0)
,S03 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '3'
	),0)
,S04 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '4'
	),0)
,S05 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '5'
	),0)
from @t1 a
)#t1

update #t1
   set Status = (case P01 when 0 then 0 else 1 end)
			  + (case P02 when 0 then 0 else 1 end)
			  + (case P03 when 0 then 0 else 1 end)
			  + (case P04 when 0 then 0 else 1 end)
			  + (case P05 when 0 then 0 else 1 end)
			  + (case P06 when 0 then 0 else 1 end)
 where TypeOfGoods <> 'L'

update #t1
   set Status = (case S01 when 0 then 0 else 1 end)
			  + (case S02 when 0 then 0 else 1 end)
			  + (case S03 when 0 then 0 else 1 end)
			  + (case S04 when 0 then 0 else 1 end)
			  + (case S05 when 0 then 0 else 1 end)
 where TypeOfGoods = 'L' and IsSubCon = '1'

select
 row_number() over (order by TaskPartSeq) SeqNo
,TaskPartSeq
,BillType
,BillTypeDesc
,TypeOfGoods
,TypeOfGoodsDesc
,case isnull(TypeOfGoods, '') when 'L' then 'L' else '0' end ItemType
,TaskPartNo
,OprHourDemandQty
,SupplyQty
,ReturnQty
,OprRetailPrice
,OprRetailPriceTotal
,isnull(SupplySlipNo, '')SupplySlipNo
,TaskPartDesc
,Status
,StatusDesc = 
 case IsSubCon
	when 0 then
		 case TypeOfGoods 
			when 'L' then
				case Status
					when '0' then '0 - Open Task'
					when '1' then '1 - Work In Progress'
					when '2' then '2 - Finish Task'
				end
			else
				case Status
					when '1' then '1 - Entry Stock'
					when '2' then '2 - Alokasi Stock'
					when '3' then '3 - Generate PL'
					when '4' then '4 - Generate Bill'
					when '5' then '5 - Lampiran'
					when '6' then '6 - Print Lampiran'
				end
		 end	
	else
		case Status
			when '1' then '1 - Draft PO'
			when '2' then '2 - Generate PO'
			when '3' then '3 - Draft Receiving'
			when '4' then '4 - Cancel Receiving'
			when '5' then '5 - Receiving PO'
		end
 end
,QtyAvail
,(case when (SupplyQty > 0) then (SupplyQty - ReturnQty) else OprHourDemandQty end) * OprRetailPrice Price
,DiscPct
,OprRetailPriceTotal as PriceNet
,IsSubCon
,TaskStatus
,@ServiceNo ServiceNo
from #t1

drop table #t1

end
GO


if object_id('uspfn_SyncCsCustomerVehicleViewInitialize') is not null
	drop procedure uspfn_SyncCsCustomerVehicleViewInitialize
GO

create procedure [dbo].[uspfn_SyncCsCustomerVehicleViewInitialize]
as
begin
	;with x as (
	select a.CompanyCode
		 , b.BranchCode
		 , a.CustomerCode
		 , (d.ChassisCode + convert(varchar, d.ChassisNo)) as Chassis
		 , (d.EngineCode + convert(varchar, d.EngineNo)) as Engine
		 , b.SONo
		 , c.DONo
		 , c.DODate
		 , g.BpkNo
		 , d.SalesModelCode as CarType
		 , d.ColourCode as Color
		 , b.Salesman as SalesmanCode
		 , f.EmployeeName as SalesmanName
		 , e.PoliceRegNo
		 , c.DODate as DeliveryDate
		 , d.SalesModelCode
		 , d.SalesModelYear
		 , d.ColourCode
		 , g.BPKDate
		 , b.IsLeasing
		 , b.LeasingCo
		 , h.CustomerName as LeasingName
		 , b.Installment
	  from GnMstCustomer a
	 inner join omTrSalesSO b
		on b.CompanyCode = a.CompanyCode
	   and b.CustomerCode = a.CustomerCode
	  left join omTrSalesDO c
		on c.CompanyCode = b.CompanyCode
	   and c.CustomerCode = b.CustomerCode
	   and c.SONo = b.SONo
	  left join omTrSalesDODetail d
		on d.CompanyCode = c.CompanyCode
	   and d.BranchCode = c.BranchCode
	   and d.DONo = c.DONo
	  left join svMstCustomerVehicle e
		on e.CompanyCode = d.CompanyCode
	   and e.ChassisCode = d.ChassisCode
	   and e.ChassisNo = d.ChassisNo
	  left join HrEmployee f
		on f.CompanyCode = b.CompanyCode
	   and f.EmployeeID = b.Salesman
	  left join OmTrSalesBpk g
		on g.CompanyCode = c.CompanyCode
	   and g.BranchCode = c.BranchCode
	   and g.DONo = c.DONo
	   and g.SONo = c.SONo
	  left join gnMstCustomer h
		on h.CompanyCode = b.CompanyCode
	   and h.CustomerCode = b.LeasingCo
	 where 1 = 1
	   and d.ChassisCode is not null
	   and d.EngineCode is not null
	   and b.SODate is not null
	   and c.DODate is not null
	   and g.BpkNo is not null
	   and isnull(d.StatusBPK, 3) != '3'
	   and isnull(g.Status, 3) != '3'
	   and year(c.DODate) = year(getdate())
	)

	--select * from x
	select * into #t1 from (select * from x)#

--	delete CsCustomerVehicleView
--	 where exists (
--		select top 1 1 from #t1
--		 where #t1.CompanyCode = CsCustomerVehicleView.CompanyCode
--		   and #t1.BranchCode = CsCustomerVehicleView.BranchCode
--		   and #t1.Chassis = CsCustomerVehicleView.Chassis
--	 )
--
--	insert into CsCustomerVehicleView (CompanyCode, BranchCode, CustomerCode, Chassis, Engine, SONo, DONo, DoDate, BpkNo, CarType, Color, SalesmanCode, SalesmanName, PoliceRegNo, DeliveryDate, SalesModelCode, SalesModelYear, ColourCode, BpkDate, IsLeasing, LeasingCo,
--	 LeasingName, Installment)
--	select * from #t1

--	drop table CsCustomerVehicleView
	select * into CsCustomerVehicleView from #t1

	drop table #t1
end
GO



if object_id('uspfn_TransferEmployeeToSimDMS') is not null
	drop procedure uspfn_TransferEmployeeToSimDMS
GO
create procedure [dbo].[uspfn_TransferEmployeeToSimDMS]   
 @CompanyCode varchar(17),  
 @EmployeeID varchar(25),  
 @UserID varchar(25)  
as  
  
begin  
 declare @TransactionName varchar(25);  
 set @TransactionName='TransferEmployee';  
  
 begin transaction  
  
 begin try  
  declare @NumberOfRecord bit;  
  set @NumberOfRecord = (select count(EmployeeID) from HrEmployee where EmployeeID=@EmployeeID);  
  --select @CompanyCode, @EmployeeID, @NumberOfRecord as NumberOfRecord;  
  
  if(@NumberOfRecord < 1)   
  begin  
   insert into HrEmployee ( CompanyCode  
           , EmployeeID  
           , EmployeeName  
           , Email  
           , FaxNo  
           , Handphone1  
           , Handphone2  
           , Handphone3  
           , Handphone4  
           , Telephone1  
           , Telephone2   
           , OfficeLocation  
           , IsLinkedUser  
           , RelatedUser  
           , JoinDate  
           , Department  
           , Position  
           , Grade  
           , Rank  
           , Gender  
           , TeamLeader  
           , PersonnelStatus  
           , ResignDate  
           , ResignDescription  
           , IdentityNo  
           , NPWPNo  
           , NPWPDate  
           , BirthDate  
           , BirthPlace  
           , Address1  
           , Address2  
           , Address3  
           , Address4  
           , Province  
           , District  
           , SubDistrict  
           , Village  
           , ZipCode  
           , DrivingLicense1  
           , DrivingLicense2  
           , MaritalStatus  
           , MaritalStatusCode  
           , Height  
           , Weight  
           , UniformSize  
           , UniformSizeAlt  
           , ShoesSize  
           , FormalEducation  
           , BloodCode  
           , OtherInformation  
           , CreatedBy  
           , CreatedDate  
           , UpdatedBy  
           , UpdatedDate  
           , Religion  
           , SelfPhoto  
           , IdentityCardPhoto  
           , IsDeleted   
           )  
    select @CompanyCode              
         , a.EmployeeID  
      , a.EmployeeName  
      , Email = (  
       select top 1  
           x.Email  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )  
      , a.FaxNo  
      , Handphone1 = (  
       select top 1  
           x.Phone2  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Handphone2 = (  
       select top 1  
           x.Phone2  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Handphone3 = (  
       select top 1  
           x.Phone3  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Handphone4 = (  
       select top 1  
           x.Phone4  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Telephone1 = a.HpNo  
      , Telephone2 = a.PhoneNo  
      , OfficeLocation = ''  
      , IsLinkedUser = 0  
      , RelatedUser = ''  
      , Convert(datetime, a.JoinDate)  
      , Department = isnull( (  
       select top 1  
              x.HistoryDeptCode  
         from SfEmployeeTitleHistory x  
        where x.CompanyCode=a.CompanyCode  
          and a.EmployeeID=@EmployeeID  
        order by x.AssignedDate desc  
        ), (  
       select top 1  
           x.OrgCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) )  
      , Position = isnull( (  
       select top 1  
              x.HistoryPosCode  
         from SfEmployeeTitleHistory x  
        where x.CompanyCode=a.CompanyCode  
          and a.EmployeeID=@EmployeeID  
        order by x.AssignedDate desc  
        ), (  
       select top 1  
           x.PosCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) )  
      , Grade = isnull( (  
       select top 1  
              x.HistoryGrade  
         from SfEmployeeGradeHistory x  
        where x.CompanyCode=a.CompanyCode  
          and a.EmployeeID=@EmployeeID  
        order by x.AssignedDate desc  
        ), (  
       select top 1  
           x.GradeCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) )  
      , (  
       select top 1  
           x.RankCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) as RankCode  
      , a.GenderCode              
      , TeamLeader = (  
          select top 1  
           x.TeamLeaderID  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , PersonnelStatus = a.PersonnelStatus  
      , Convert(datetime, a.ResignDate)  
      , ResignDescription = (  
          select top 1  
           x.ResignReason  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.IdentityNo  
      , NPWPNo = (  
       select top 1  
           x.NPWPNo  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , NPWPDate = (  
       select top 1  
           x.NpwpDate  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.BirthDate  
      , a.BirthPlace  
      , a.Address1  
      , a.Address2  
      , a.Address3  
      , a.Address4  
      , a.ProvinceCode  
      , a.CityCode as District  
      , a.AreaCode as SubDistrict   
      , '' as Village  
      , a.ZipNo as ZipCode  
      , DrivingLicense1 = (  
       select top 1  
           x.DrivingLicense1  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , DrivingLicense1 = (  
       select top 1  
           x.DrivingLicense2  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.MaritalStatusCode as MaritalStatus  
      , '' as MaritalStatusCode  
      , a.Height  
      , a.Weight  
      , a.UniformSize  
      , UniformSizeAlt = (  
       select top 1  
           x.SizeAlt  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.ShoesSize  
      , a.FormalEducation  
      , a.BloodCode  
      , '' as OtherInformation  
      , @UserID as CreatedBy  
      , getdate()  
      , @UserID as UpdatedBy  
      , getdate()  
      , a.ReligionCode  
      , a.EmpImageID  
      , a.EmpIdentityCardImageID  
      , convert(bit, 0) as IsDeleted  
      from gnMstEmployee a  
     where 1=1  
       --and a.CompanyCode=@CompanyCode  
       and a.EmployeeID=@EmployeeID  
  
     
   insert into HrEmployeeAchievement  
   select   
       a.CompanyCode  
     , a.EmployeeID  
     , a.AssignedDate  
     , a.HistoryDeptCode  
     , a.HistoryPosCode  
     , ''  
     , 0  
     , @UserID  
     , getdate()  
     , @UserID  
     , getdate()  
     , 0  
     from SfEmployeeTitleHistory a  
    where a.CompanyCode=@CompanyCode  
      and a.EmployeeID=@EmployeeID  
  
  
  
   insert into HrEmployeeTraining  
   select   
     a.CompanyCode  
     , a.EmployeeID  
     , a.TrnCode  
     , a.TrnDate  
     , a.TrnSeq  
     , 0  
     , a.PreTest  
     , ''  
     , a.PostTest  
     , ''  
     , 'system'  
     , getdate()  
     , 'system'  
     , getdate()  
     , 0  
     from SfEmployeeTraining a  
    where a.CompanyCode=@CompanyCode  
      and a.EmployeeID=@EmployeeID  
  
  
   insert into HrEmployeeMutation  
   select a.CompanyCode  
     , a.EmployeeID  
     , a.MutationDate  
     , a.MutationTo  
     , 0  
     , 'system'  
     , getdate()  
     , 'system'  
     , getdate()  
     , 0  
     from gnMstEmployeeMutation a  
    where a.CompanyCode=@CompanyCode  
      and a.EmployeeID=@EmployeeID  
  
   insert into HrEmployeeSales  
   select @CompanyCode  
        , @EmployeeID  
     , SalesID=(  
      select top 1  
             x.SalesID  
        from gnMstEmployeeData x  
       where x.CompanyCode=@CompanyCode  
         and x.EmployeeID=@EmployeeID  
         and x.SalesID is not null  
       )  
     , @UserID  
     , getdate()  
     , convert(bit, 0)  
     , convert(bit, 0)  
     , null  
     , null  
     , convert(bit, 0)  
	 , @UserID  
     , getdate() 
   select convert(bit, 1) as Result;  
  end  
  else  
  begin  
   select convert(bit, 0) as Result;  
  end  
  
  commit transaction;  
 end try  
 begin catch  
  rollback transaction;  
  select convert(bit, 0) as Result;  
 end catch  
end  
  
--select * from HrEmployeeSAles
GO

if object_id('uspfn_omSlsDoLkpShipto') is not null
	drop procedure uspfn_omSlsDoLkpShipto
GO
CREATE procedure [dbo].[uspfn_omSlsDoLkpShipto]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProfitCenterCode varchar(3)
) 
as begin
--exec uspfn_omSlsDoLkpShipto 6006410,600641001,300
SELECT a.CompanyCode
	,a.CustomerCode
	,a.StandardCode
	,a.CustomerName
	,a.CustomerAbbrName
	,a.CustomerGovName
	,a.CustomerType
	,a.CategoryCode
	,a.Address1
	,a.Address2
	,a.Address3
	,a.Address4
	,a.PhoneNo
	,a.HPNo
	,a.FaxNo
	,a.isPKP
	,a.NPWPNo
	,a.NPWPDate
	,a.SKPNo
	,a.SKPDate
	,a.ProvinceCode
	,a.AreaCode
	,a.CityCode
	,a.ZipNo
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.isLocked
	,a.LockingBy
	,a.LockingDate
	,a.Email
	,a.BirthDate
	,a.Spare01
	,a.Spare02
	,a.Spare03
	,a.Spare04
	,a.Spare05
	,a.Gender
	,a.OfficePhoneNo
	,a.KelurahanDesa
	,a.KecamatanDistrik
	,a.KotaKabupaten
	,a.IbuKota
	,a.CustomerStatus
	  FROM gnMstCustomer a 
	INNER JOIN gnMstCustomerProfitCenter b
	  ON a.CompanyCode = b.CompanyCode AND 
		 a.CustomerCode = b.CustomerCode AND
		 b.BranchCode = @BranchCode
	WHERE a.CompanyCode = @CompanyCode AND 
		  b.ProfitCenterCode = @ProfitCenterCode                      
end
GO

IF NOT EXISTS(select * from sysParameter where paramid='SPSRV')
BEGIN
	insert into sysParameter
	values ('SPSRV','OFF','SPAREPART & SERVICE DAILY POSTING PROTECTION')
END

IF NOT EXISTS(select * from sysParameter where paramid='PAJAK')
BEGIN
	insert into sysParameter
	values ('PAJAK','OFF','TAX MODULE')
END

IF NOT EXISTS(select * from sysParameter where paramid='SLS')
BEGIN
	insert into sysParameter
	values ('SLS','OFF','SALES DAILY POSTING PROTECTION')
END

if object_id('uspfn_gnCheckPostingStatus') is not null
	drop procedure uspfn_gnCheckPostingStatus
GO
CREATE PROCEDURE uspfn_gnCheckPostingStatus
AS
BEGIN
	declare @checklasttrans datetime, @retValue int, @tax int,
			@procStatus int,@retValue2 int, @prmValue varchar(20)	

	select @prmValue=ParamValue from sysParameter where paramid='SPSRV'
	
	set @tax = 1
	
	IF @prmValue='ON'
	BEGIN
		SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM [svSDMovement] with(nolock,nowait) order by docdate desc
	
		IF (@checklasttrans IS NULL)
			set @retValue=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				select @retValue=0, @tax = 0
			ELSE
				set @retValue=1
		END
	END
	ELSE
		set @retValue=2

	SELECT @checklasttrans = NULL, @procStatus = 0

	select @prmValue=ParamValue from sysParameter where paramid='SLS'
	IF @prmValue='ON'
	BEGIN
		SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM [omSDMovement] with(nolock,nowait) order by docdate desc

		IF (@checklasttrans IS NULL)
			set @retValue2=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				BEGIN
					select @retValue2=0, @tax = 0	
					IF @retValue <> 2
						set @retValue=0
				END
			ELSE
				BEGIN
					set @retValue2=1
				END
		END
		
		IF @retValue2=1 and @retValue=0 
			set @retValue2=0
		
	END
	ELSE
		set @retValue2=1
		
	IF @retValue = 2
		set @retValue=1
		
	SELECT @retValue [SPSRV], @retValue2 [SALES], 
	(select top 1 replace(ParamDescription, char(13),'</BR>') from sysParameter where ParamId='POSTING_STATUS') INFO, 
	(select top 1 case when ISNULL(ParamValue,'OFF')='OFF' then 1 else @tax end from sysParameter where paramid='PAJAK') TAX

END
GO

if object_id('usprpt_PostingMultiCompany4DocNo') is not null
	drop procedure usprpt_PostingMultiCompany4DocNo
GO
-- POSTING TRANSACTION MULTI COMPANY - DOCUMENT NUMBER
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------------------------
-- declare @DocNo varchar(15)  
-- execute [usprpt_PostingMultiCompany4DocNo] '6006400001','6006400131','SBTSBY','INV',@DocNo output
-- -------------------------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompany4DocNo]
	@Company	varchar(15),
	@Branch		varchar(15),
	@DBName		varchar(50),
	@DocID		varchar(15),
	@DocNo		varchar(15) output
AS	

--BEGIN TRANSACTION
--BEGIN TRY

BEGIN
 -- Document Number sequence
  --declare @Company		varchar(15)  = '6006400001'
  --declare @Branch			varchar(15)  = '6006400131'
  --declare @DBName			varchar(50)  = 'SBTSBY'
  --declare @DocID			varchar(15)  = 'INV'
  --declare @DocNo			varchar(15)
	declare @DocPrefix		varchar(15)
	declare @DocYear		integer
	declare @DocSeq			integer
	declare @sqlString		nvarchar(max)

	set @sqlString = N'select @DocPrefix=DocumentPrefix, @DocYear=DocumentYear, @DocSeq=DocumentSequence from '+@DBName+'..gnMstDocument ' +
						'where CompanyCode='''+@Company+''' and BranchCode='''+@Branch+''' and DocumentType='''+@DocID+''''

		execute sp_executesql @sqlString, 
			N'@DocPrefix varchar(15) output, @DocYear integer output, @DocSeq integer output', @DocPrefix output, @DocYear output, @DocSeq output

	set @DocSeq = @DocSeq + 1
	set @sqlString = 'update ' +@DBName+ '..gnMstDocument' +
						' set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
						' where CompanyCode=''' +@Company+ ''' and BranchCode=''' +@Branch+ ''' and DocumentType='''+@DocID+''''
		execute sp_executesql @sqlString 

	set @DocNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
					replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
/*
END TRY

BEGIN CATCH
    select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		   ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		rollback transaction
	select '0' [STATUS], 'Posting fail !!!' [INFO]
	return
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting Done !!!' [INFO]
		--rollback transaction
		commit transaction
	end
*/
END
GO

if object_id('usprpt_PostingMultiCompanySparePartService') is not null
	drop procedure usprpt_PostingMultiCompanySparePartService
GO
-- POSTING TRANSACTION MULTI COMPANY - SPARE PART & SERVICE
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- ----------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySparePartService] '6006400001','2014/11/08','0'
-- ----------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompanySparePartService]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN 
  -- Check Tax/Seri Pajak online
		declare @TaxCompany					varchar(15)
		declare @TaxBranch					varchar(15)
		declare @TaxDB						varchar(50)
		declare @TaxTransCode				varchar(3)
		declare @swTaxBranch				varchar(15) = ''
		declare @swTaxDoc					varchar(15) = ''
		declare @TaxSeq						bigint
		declare @TaxSeqNo					int
		declare @SeriPajakNo				varchar(50) = ''

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			return

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode				varchar(15)
		declare @curBranchCode				varchar(15)
		declare @curDocNo					varchar(20)
		declare @curDocDate					datetime
		declare @curPartNo					varchar(20)
		declare @curPartSeq					integer
		declare @curWarehouseCode			varchar(15)
		declare @curQtyOrder				numeric(18,2)
		declare @curQty						numeric(18,2)
		declare @curDiscPct					numeric(06,2)
		declare @curCostPrice				numeric(18,2)
		declare @curRetailPrice				numeric(18,2)
		declare @curTypeOfGoods				varchar(15)
		declare @curCompanyMD				varchar(15)
		declare @curBranchMD				varchar(15)
		declare @curWarehouseMD				varchar(15)
		declare @curRetailPriceInclTaxMD	numeric(18,2)
		declare @curRetailPriceMD			numeric(18,2)
		declare @curCostPriceMD				numeric(18,2)
		declare @curQtyFlag					char(1)
		declare @curProductType				varchar(15)
		declare @curProfitCenterCode		varchar(15)
		declare @curStatus					char(1)
		declare @curProcessStatus			char(1)
		declare @curProcessDate				datetime
		declare @curCreatedBy				varchar(15)
		declare @curCreatedDate				datetime
		declare @curLastUpdateBy			varchar(15)
		declare @curLastUpdateDate			datetime
		declare @DocPrefix					varchar(15)
		declare @SONo						varchar(15)
		declare @PLNo						varchar(15)
		declare @INVNo						varchar(15)
		declare @FPJNo						varchar(15)
		declare @POSNo						varchar(15)
		declare @BINNo						varchar(15)
		declare @WRSNo						varchar(15)
		declare @HPPNo						varchar(15)
		declare @APNo						varchar(15)
		declare @DocYear					numeric(4,0)
		declare @DocSeq						numeric(15,0)
		declare @SeqNo						integer
		declare @DBName						varchar(50)
		declare @DBNameMD					varchar(50)
		declare @sqlSelect					nvarchar(max)
		declare @sqlInsert					nvarchar(max)
		declare @sqlUpdate					nvarchar(max)
		declare @swCompanyCode				varchar(15) = ''
		declare @swBranchCode				varchar(15) = ''
		declare @swDocNo 					varchar(15) = ''
		declare @TotPurchaseAmt				numeric(18,0)
		declare @TotPurchaseNetAmt			numeric(18,0)
		declare @TotTaxAmt					numeric(18,0)
		declare @RetailPriceNet				numeric(18,0)
		declare @SalesAmt					numeric(18,0)
		declare @DiscAmt					numeric(18,0)
		declare @NetSales					numeric(18,0)
		declare @PPNAmt						numeric(18,0)
		declare @TotSalesAmt				numeric(18,0)
		declare @CostAmt 					numeric(18,0)
		declare @MovingCode					varchar(15)
		declare @ABCClass					char(1)
		declare @PartCategory				varchar(15)
		declare @LocationCode				varchar(10)
		declare @MovingCodeMD				varchar(15)
		declare @ABCClassMD					char(1)
		declare @PartCategoryMD				varchar(3)
		declare @LocationCodeMD				varchar(10)
		declare @ProductTypeMD				varchar(15)	
		declare @TypeOfGoodsMD				varchar(5)
		declare @PaymentCodeMD				varchar(15)
		declare @SalesCodeMD				varchar(15)
		declare @CustomerNameMD				varchar(100)
		declare @Address1MD					varchar(100)
		declare @Address2MD					varchar(100)
		declare @Address3MD					varchar(100)
		declare @Address4MD					varchar(100)
		declare @isPKPMD					varchar(100)
		declare @NPWPNoMD					varchar(100)
		declare @SKPNoMD					varchar(100)
		declare @SKPDateMD					datetime
		declare @NPWPDateMD					datetime
		declare @TopCodeMD					varchar(15)
		declare @TopDaysMD					integer
		declare @DueDateMD					date
		declare @AccNoArMD					varchar(50)
		declare @AccNoSalesMD				varchar(50)
		declare @AccNoTaxOutMD				varchar(50)
		declare @AccNoDisc1MD				varchar(50)
		declare @AccNoCogsMD				varchar(50)
		declare @AccNoInventoryMD			varchar(50)
		declare @AccNoInventory				varchar(50)
		declare @AccNoTaxIn					varchar(50)
		declare @AccNoAP					varchar(50)
		declare @SeqNoGlMD					numeric(10,0)
		declare @SeqNoGl					numeric(10,0)
		declare @DiscFlag					integer
		declare @CurrentDate				varchar(100) = convert(varchar,getdate(),121)
        declare cursvSDMovement cursor for
			select * from svSDMovement
             where left(DocNo,3) in ('LMP')--,'FPJ') 
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by CompanyCode, BranchCode, DocNo, TypeOfGoods, PartNo, PartSeq
		open cursvSDMovement

		fetch next from cursvSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
			       @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
				   @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
				   @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin
			 -- MD: MovingCode, ABCClass, PartCategory, Location Code, ProducType
				set @sqlSelect = N'select @MovingCodeMD=MovingCode from ' +@DBNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@MovingCodeMD varchar(15) output', @MovingCodeMD = @MovingCodeMD output
				set @sqlSelect = N'select @ABCClassMD=ABCClass from ' +@DBNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ABCClassMD char(1) output', @ABCClassMD = @ABCClassMD output
				set @sqlSelect = N'select @PartCategoryMD=PartCategory from ' +@DBNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@PartCategoryMD varchar(3) output', @PartCategoryMD = @PartCategoryMD output
				set @sqlSelect = N'select @LocationCodeMD=LocationCode from ' +@DBNameMD+ '..spMstItemLoc where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PartNo=''' +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @query=@sqlSelect, @params= N'@LocationCodeMD varchar(10) output', @LocationCodeMD = @LocationCodeMD output
				set @sqlSelect = N'select @ProductTypeMD=ProductType from ' +@DBNameMD+ '..gnMstCoProfile where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ProductTypeMD varchar(15) output', @ProductTypeMD = @ProductTypeMD output
				set @sqlSelect = N'select @TopCodeMD=TopCode from ' +@DBNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@TopCodeMD varchar(15) output', @TopCodeMD = @TopCodeMD output
				set @sqlSelect = N'select @PaymentCodeMD=PaymentCode from ' +@DBNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@PaymentCodeMD varchar(15) output', @PaymentCodeMD = @PaymentCodeMD output
				set @sqlSelect = N'select @SalesCodeMD=SalesCode from ' +@DBNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@SalesCodeMD varchar(15) output', @SalesCodeMD = @SalesCodeMD output
				set @sqlSelect = N'select @TopDaysMD=ParaValue from ' +@DBNameMD+ '..gnMstLookUpDtl 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' +@TopCodeMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@TopDaysMD integer output', @TopDaysMD = @TopDaysMD output
				set @sqlSelect = N'select @TypeOfGoodsMD=TypeOfGoods from ' +@DBNameMD+ '..spMstItems
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PartNo=''' +@curPartNo+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@TypeOfGoodsMD varchar(15) output', @TypeOfGoodsMD = @TypeOfGoodsMD output
				-- AR Account
				set @sqlSelect = N'select @AccNoArMD=c.ReceivableAccNo from ' 
				                          +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ 
								  ''' and c.BranchCode      =''' +@curBranchMD+ 
								  ''' and c.ProfitCenterCode=''300''
								      and c.TypeOfGoods     =''' +@TypeOfGoodsMD+
								  ''' and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoArMD varchar(50) output', @AccNoArMD = @AccNoArMD output
				-- Sales Account
				set @sqlSelect = N'select @AccNoSalesMD=SalesAccNo from ' 
										  +@DBNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoSalesMD varchar(50) output', @AccNoSalesMD = @AccNoSalesMD output
				-- Tax Account
				set @sqlSelect = N'select @AccNoTaxOutMD=c.TaxOutAccNo from ' 
										  +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ ''' 
									  and c.BranchCode      =''' +@curBranchMD+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@TypeOfGoodsMD+ '''
									  and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoTaxOutMD varchar(50) output', @AccNoTaxOutMD = @AccNoTaxOutMD output
				-- Discount Account
				set @sqlSelect = N'select @AccNoDisc1MD=DiscAccNo from ' 
										  +@DBNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoDisc1MD varchar(50) output', @AccNoDisc1MD = @AccNoDisc1MD output
				-- COGS Account
				set @sqlSelect = N'select @AccNoCogsMD=COGSAccNo from ' 
										  +@DBNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoCogsMD varchar(50) output', @AccNoCogsMD = @AccNoCogsMD output
				-- Inventory Account
				set @sqlSelect = N'select @AccNoInventoryMD=InventoryAccNo from ' 
										  +@DBNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoInventoryMD varchar(50) output', @AccNoInventoryMD = @AccNoInventoryMD output

				set @SalesAmt    = @curQty*@curRetailPriceInclTaxMD 
				set @DiscAmt     = round((@SalesAmt*@curDiscPct / 100),0)
				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt
				set @CostAmt     = @curQty*@curCostPriceMD 
				set @DueDateMD   = dateadd(day,isnull(@TopDaysMD,0),@curDocDate)

			 -- SD: MovingCode, ABCClass, PartCategory, Location Code
				-- A/P Account
				set @sqlSelect = N'select @AccNoAP=c.PayableAccNo from ' 
										  +@DBName+ '..gnMstSupplierClass c,' 
										  +@DBName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoAP varchar(50) output', @AccNoAP = @AccNoAP output

				-- TAX IN Account
				set @sqlSelect = N'select @AccNoTaxIn=c.TaxInAccNo from ' 
										  +@DBName+ '..gnMstSupplierClass c,' 
										  +@DBName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoTaxIn varchar(50) output', @AccNoTaxIn = @AccNoTaxIn output

				-- Inventory Account
				set @sqlSelect = N'select @AccNoInventory=InventoryAccNo from ' 
										  +@DBName+ '..spMstAccount
									where CompanyCode=''' +@curCompanyCode+ ''' 
									  and BranchCode =''' +@curBranchCode+ '''
									  and TypeOfGoods=''' +@CurTypeOfGoods+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoInventory varchar(50) output', @AccNoInventory = @AccNoInventory output

				set @sqlSelect = N'select @MovingCode=MovingCode from ' +@DBName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@MovingCode varchar(15) output', @MovingCode = @MovingCode output
				set @sqlSelect = N'select @ABCClass=ABCClass from ' +@DBName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ABCClass varchar(15) output', @ABCClass = @ABCClass output
				set @sqlSelect = N'select @PartCategory=PartCategory from ' +@DBName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@PartCategory varchar(15) output', @PartCategory = @PartCategory output
				set @sqlSelect = N'select @LocationCode=LocationCode from ' +@DBName+ '..spMstItemLoc where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and PartNo=''' +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @query=@sqlSelect, @params= N'@LocationCode varchar(15) output', @LocationCode = @LocationCode output

				set @RetailPriceNet    = round(@curRetailPriceMD * (100.00-@curDiscPct) / 100.00,0)
				set @TotPurchaseNetAmt = @CurQty * @RetailPriceNet
				set @TotTaxAmt         = round(@TotPurchaseNetAmt * 0.1,0)
			    set @TotPurchaseAmt    = @TotPurchaseNetAmt + @TotTaxAmt

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0

					 -- MD : Database Name, Company Code & Branch Code MD
					    set @DBNameMD = (select DbMD from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode)

					 -- SD : Database Name 
						set @DBName = (select DbName from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)

					 -- Discount Flag
						set @sqlSelect = N'select top 1 @DiscFlag=1 from ' +@DBName+ '..svSDMovement where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocNo=''' +@curDocNo+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@DiscFlag integer output', @DiscFlag = @DiscFlag output

					 -- SD : Insert data to table spTrnPPOSHdr
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'POS', @POSNo output
						set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPPOSHdr 
										(CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, isBO, isSubstution, isSuggorProcess, 
										 Remark, ProductType, PrintSeq, ExPickingSlipNo, ExPickingSlipDate, Status, Transportation, TypeOfGoods, 
										 isGenPORDD, isDeleted, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
										 LockingDate, isDropSign, DropSignReffNo)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''S'',0,0,0,''' 
												   +@curDocNo+ ''',''' +@curProductType+ ''',1,'''',NULL,7,NULL,''' 
												   +@curTypeOfGoods+ ''',0,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL,0,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD : Insert data to table spTrnSORDHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'SOC', @SONo output
						set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSORDHdr 
										(CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill,
										 CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, isPORDD, OrderNo, OrderDate,
										 TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt,
										 TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate, isDropSign)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''' +@curBranchCode+ ''',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',0,0,1,''00'',''0'',0,''' 
												   +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@TopCodeMD+ ''',''' 
												   +convert(varchar,@TopDaysMD)+ ''',''' +@PaymentCodeMD+ ''',NULL,0.00,0,0,0,0,0,1,NULL,NULL,5,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,''' +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSPickingHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'PLS', @PLNo output
						set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSPickingHdr 
										(CompanyCode, BranchCode, PickingSlipNo, PickingSlipDate, CustomerCode, CustomerCodeBill, 
										 CustomerCodeShip, PickedBy, isBORelease, isSubstitution, isIncludePPN, TransType, SalesType, 
										 TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Remark, Status, 
										 PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchCode+
											   ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''POSTING'',0,0,1,''00'',''0'',0,0,0,0,0,0,NULL,2,1,'''
											           +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSInvoiceHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'INV', @INVNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'FPJ', @FPJNo output
						set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceHdr 
										(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, PickingSlipNo, PickingSlipDate, FPJNo, FPJDate,
										 TransType, SalesType, CustomerCode, CustomerCodeBill, CustomerCodeShip, TotSalesQty, TotSalesAmt, 
										 TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@PLNo+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''0'','''
													   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ 
											   ''',0,0,0,0,0,0,''2'',1,''' +left(@TypeOfGoodsMD,1)+
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSFPJHdr 
						--Tax / Seri Pajak Numbering

						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>@swTaxDoc
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlSelect = N'select top 1 @TaxSeq=FPJSeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlSelect, @params= N'@TaxSeq bigint output', @TaxSeq = @TaxSeq output

								set @sqlSelect = N'select top 1 @TaxSeqNo=SeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ '''and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlSelect, @params= N'@TaxSeqNo int output', @TaxSeqNo = @TaxSeqNo output

								set @sqlSelect = N'select top 1 @TaxTransCode=TaxTransCode from ' 
												+@TaxDb+ '..gnMstCoProfile where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch+ ''''
									execute sp_executesql @query=@sqlSelect, @params= N'@TaxTransCode varchar(3) output', @TaxTransCode = @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlUpdate = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlUpdate 

								set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
													+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
													+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
							end

						set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSFPJHdr 
										(CompanyCode, BranchCode, FPJNo, FPJDate, TPTrans, FPJGovNo, FPJSignature, 
										 FPJCentralNo, FPJCentralDate, DeliveryNo, InvoiceNo, InvoiceDate, PickingSlipNo, 
										 PickingSlipDate, TransType, CustomerCode, CustomerCodeBill, CustomerCodeShip, 
										 TOPCode, TOPDays, DueDate, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, 
										 TotFinalSalesAmt, isPKP, Status, PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, 
										 LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''P'',''' +@SeriPajakNo+ ''','''
											       +convert(varchar,@curDocDate,121)+ ''',NULL,'''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''',''' 
												   +@INVNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@PLNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' 
												   +@TopCodeMD+ ''',''' +convert(varchar,@TopDaysMD)+ ''',''' 
												   +convert(varchar,@DueDateMD,121)+ ''',0,0,0,0,0,0,1,1,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSFPJInfo
						set @sqlSelect = N'select @CustomerNameMD=CustomerGovName from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@CustomerNameMD varchar(100) output', @CustomerNameMD = @CustomerNameMD output
						set @sqlSelect = N'select @Address1MD=Address1 from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address1MD varchar(100) output', @Address1MD = @Address1MD output
						set @sqlSelect = N'select @Address2MD=Address1 from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address2MD varchar(100) output', @Address2MD = @Address2MD output
						set @sqlSelect = N'select @Address3MD=Address1 from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address3MD varchar(100) output', @Address3MD = @Address3MD output
						set @sqlSelect = N'select @Address4MD=Address1 from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address4MD varchar(100) output', @Address4MD = @Address4MD output
						set @sqlSelect = N'select @isPKPMD=isPKP from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@isPKPMD bit output', @isPKPMD = @isPKPMD output
						set @sqlSelect = N'select @NPWPNoMD=NPWPNo from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@NPWPNoMD varchar(100) output', @NPWPNoMD = @NPWPNoMD output
						set @sqlSelect = N'select @SKPNoMD=SKPNo from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@SKPNoMD varchar(100) output', @SKPNoMD = @SKPNoMD output
						set @sqlSelect = N'select @SKPDateMD=SKPDate from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@SKPDateMD datetime output', @SKPDateMD = @SKPDateMD output
						set @sqlSelect = N'select @NPWPDateMD=NPWPDate from ' +@DBNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@NPWPDateMD datetime output', @NPWPDateMD = @NPWPDateMD output

						set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSFPJInfo 
										(CompanyCode, BranchCode, FPJNo, CustomerName, Address1, Address2, 
										 Address3, Address4, isPKP, NPWPNo, SKPNo, SKPDate, NPWPDate, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +@CustomerNameMD+ ''',''' +@Address1MD+ ''',''' 
											   +@Address2MD+ ''',''' +@Address3MD+ ''',''' +@Address4MD+ 
											   ''',''' +@isPKPMD+ ''',''' +@NPWPNoMD+ ''',''' +@SKPNoMD+ 
											   ''',''' +convert(varchar,@SKPDateMD,121)+ ''',''' 
											   +convert(varchar,@NPWPDateMD,121)+ ''',''POSTING'',''' 
											   +convert(varchar,@PostingDate,121)+ ''',''POSTING'',''' 
											   +@currentDate+ ''')'
							execute sp_executesql @sqlInsert

					 -- SD : Insert data to table spTrnPBinnHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNL', @BINNo output
						set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPBinnHdr 
										(CompanyCode, BranchCode, BinningNo, BinningDate, ReceivingType, DNSupplierNo, DNSupplierDate, TransType, 
										 SupplierCode, ReferenceNo, ReferenceDate, TotItem, TotBinningAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''','''
												   +@FPJNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' 
												   +@curTypeOfGoods+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert
					
					 -- SD : Insert data to table spTrnPRcvHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'WRL', @WRSNo output
						set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPRcvHdr 
										(CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate, ReceivingType, 
										 DNSupplierNo, DNSupplierDate, TransType, SupplierCode, ReferenceNo, ReferenceDate, 
										 TotItem, TotWRSAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' 
												   +@curCompanyMD+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- SD : Insert data to spTrnPHPP 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'HPP', @HPPNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNP', @APNo output
						set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPHPP 
										(CompanyCode, BranchCode, HPPNo, HPPDate, WRSNo, WRSDate, ReferenceNo, ReferenceDate,
										 TotPurchAmt, TotNetPurchAmt, TotTaxAmt, TaxNo, TaxDate, MonthTax, YearTax, DueDate,
										 DiffNetPurchAmt, DiffTaxAmt, TotHppAmt, CostPrice, PrintSeq, TypeOfGoods, Status, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,0,''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,month(@curDocDate),121)+ ''',''' 
												   +convert(varchar,year(@curDocDate),121)+ ''',''' 
												   +convert(varchar,@DueDateMD,111)+ ''',0,0,0,0,1,''' 
												   +@curTypeOfGoods+ ''',2,''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''')'
							execute sp_executesql @sqlInsert
					end   

				set @SeqNo = @SeqNo + 1
			 -- SD: Insert data to table spTrnPPOSDtl 
				set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPPOSDtl
										(CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, PurchasePrice, DiscPct,
										 PurchasePriceNett, CostPrice, TotalAmount, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, Note)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' +@curPartNo+ 
										  ''',' +convert(varchar,@SeqNo)+ ',' +convert(varchar,@curQty)+ 
										  ',' +convert(varchar,@curQtyOrder)+ ',' +convert(varchar,@curRetailPrice)+ 
										  ',' +convert(varchar,@curDiscPct)+ ',' +convert(varchar,@RetailPriceNet)+ 
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@TotPurchaseNetAmt)+ 
										  ',''' +@ABCClass+ ''',''' +@MovingCode+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curDocNo+ ''')'
					execute sp_executesql @sqlInsert  

			 -- SD: Insert data to table spTrnPOrderBalance
				set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPOrderBalance
										(CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
										 POSDate, OrderQty, OnOrder, Intransit, Received, Located, DiscPct, PurchasePrice, 
										 CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
											  +@curBranchMD+ ''',''' +@curPartNo+ ''',' +convert(varchar,@SeqNo)+ ','''
											  +@curPartNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','
											  +convert(varchar,@curQty)+ ',0,0,' +convert(varchar,@curQty)+ ','
											  +convert(varchar,@curQty)+ ',' +convert(varchar,@curDiscPct)+ ','
											  +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+ ','''
											  +@ABCClass+ ''',''' +@MovingCode+ ''',''' +@WRSNo+ ''',''' 
											  +convert(varchar,@curDocDate,121)+ ''',''' +@curTypeOfGoods+ ''',''' 
											  +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											  +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Insert data to table spTrnSORDDtl
				set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSORDDtl
										(CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, 
										 ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, 
										 QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice,
										 CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, 
										 MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
										 StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +@curPartNo+ ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',0,0,0,'''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ ''','''
										  +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ ''','''
										  +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ ''','''
										  +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ ''','''
										  +@MovingCode+ ''',''' +left(@ABCClass,1)+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',5,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +convert(varchar,@curQtyOrder)+ ''')'
					execute sp_executesql @sqlInsert
print @sqlInsert

			 -- MD: Insert data to table spTrnSOSupply  --select * from spTrnSOSupply where left(docNo,3)='SOC' order by DocNo desc
				set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSOSupply
										(CompanyCode, BranchCode, DocNo, SupSeq, PartNo, PartNoOriginal, PTSeq, 
										 PickingSlipNo, ReferenceNo, ReferenceDate, WarehouseCode, LocationCode, 
										 QtySupply, QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, 
										 DiscPct, MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',0,''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +convert(varchar,@SeqNo)+ ''',''' +@PLNo+
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curCreatedDate,121)+
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +@MovingCode+ ''',''' +@ABCClass+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',2,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Update data to table spTrnSORDHdr
				set @sqlUpdate = 'update ' +@DBNameMD+ '..spTrnSORDHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocNo=''' +@SONo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlInsert

			 -- MD: Insert/Update data to table spHstDemandItem 
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..spHstDemandItem as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
						                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert
			 --MD: Insert/Update data to table spHstDemandcust 
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..spHstDemandcust as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curBranchCode+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.CustomerCode= SRC.NewCustomer
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, CustomerCode, PartNo, DemandFreq, DemandQty, SalesFreq, 
									    SalesQty, MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

			 -- MD: Insert Data to table spTrnSPickingDtl
				set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSPickingDtl
										(CompanyCode, BranchCode, PickingSlipNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, 
										 QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, 
										 SalesAmt, DiscAmt, NetSalesAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, 
										 PartCategory, ExPickingSlipNo, ExPickingSlipDate, isClosed, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQtyOrder)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@TotSalesAmt)+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ 
										  ''',NULL,NULL,0,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert
print @sqlInsert

			 -- MD: Update data to table spTrnSPickingHdr
				set @sqlUpdate = 'update ' +@DBNameMD+ '..spTrnSPickingHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert Data to table spTrnSInvoiceDtl
				set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceDtl
										(CompanyCode, BranchCode, InvoiceNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, 
										 MovingCode, ABCClass, ExPickingListNo, ExPickingListDate, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',NULL,NULL,''' 
										          +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert
print @sqlInsert

			 -- MD: Update data to table spTrnSInvoiceHdr
				set @sqlUpdate = 'update ' +@DBNameMD+ '..spTrnSInvoiceHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert Data to table spTrnSFPJDtl
				set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnSFPJDtl
										(CompanyCode, BranchCode, FPJNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, MovingCode, 
										 ABCClass, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Update data to table spTrnSFPJHdr
				set @sqlUpdate = 'update ' +@DBNameMD+ '..spTrnSFPJHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlInsert = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''FAKTUR'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlInsert

			 -- MD: Insert/Update data to table arInterface
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..arInterface as ar using ( values(''' 
								 +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
								 +convert(varchar,@curDocDate,121)+ ''',''300'',''' 
								 +convert(varchar,@TotSalesAmt)+ ''',0,''' 
								 +convert(varchar,@curBranchCode)+ ''',''' +@TopCodeMD+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',''INVOICE'',0,0,0,'''
								 +@SalesCodeMD+ ''',NULL,0,''POSTING'',''' 
								 +convert(varchar,@PostingDate,111)+ ''',''' 
								 +@AccNoArMD+ ''',NULL,''' +convert(varchar,@curDocDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
								NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
								NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate)
						on ar.CompanyCode = SRC.NewCompany
					   and ar.BranchCode  = SRC.NewBranch
					   and ar.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NettAmt = NettAmt + NewNettAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode, NettAmt, ReceiveAmt, 
										 CustomerCode, TOPCode, DueDate, TypeTrans, BlockAmt, DebetAmt, CreditAmt, SalesCode, 
										 LeasingCode, StatusFlag, CreateBy, CreateDate, AccountNo, FakturPajakNo, FakturPajakDate)
								values (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
										NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
										NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate);'
					execute sp_executesql @sqlInsert

			 -- MD: Insert/Update data to table glInterface
				-- glInterface - AR
				set @SeqNoGLMD = 1
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoArMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@TotSalesAmt)+ 
											   ''',0,''AR'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AR''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - SALES
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoSalesMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@SalesAmt)+ 
											   ''',''SALES'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''SALES''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - TAX OUT
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoTaxOutMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@PPNAmt)+ 
											   ''',''TAX OUT'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX OUT''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - DISC1
				if isnull(@DiscFlag,0) = 1
				begin
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoDisc1MD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@DiscAmt)+ 
											   ''',0,''DISC1'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''DISC1''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert
				end

				-- glInterface - COGS
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoCogsMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@CostAmt)+ 
											   ''',0,''COGS'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''COGS''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - INVENTORY
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoInventoryMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@CostAmt)+ 
											   ''',''INVENTORY'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

			 -- SD: Insert data to table spTrnPBinnDtl 
				set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPBinnDtl
										(CompanyCode, BranchCode, BinningNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert  
print @sqlInsert

			 -- SD: Update data to table spTrnPBinnHdr
				set @sqlUpdate = 'update ' +@DBName+ '..spTrnPBinnHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotBinningAmt = TotBinningAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- SD: Insert data to table spTrnPRcvDtl 
				set @sqlInsert = 'insert into ' +@DBName+ '..spTrnPRcvDtl
										(CompanyCode, BranchCode, WRSNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert  
print @sqlInsert

			 -- SD: Update data to table spTrnPRcvHdr
				set @sqlUpdate = 'update ' +@DBName+ '..spTrnPRcvHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotWRSAmt = TotWRSAmt + ' +convert(varchar,@TotPurchaseNetAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- SD: Update data to table spTrnPHPP
				set @sqlUpdate = 'update ' +@DBName+ '..spTrnPHPP
								     set TotPurchAmt     = TotPurchAmt     + ' +convert(varchar,@TotPurchaseAmt)+ 
									  ', TotNetPurchAmt  = TotNetPurchAmt  + ' +convert(varchar,@TotPurchaseNetAmt)+ 
									  ', TotTaxAmt       = TotTaxAmt       + ' +convert(varchar,@TotTaxAmt)+ 
									  ', DiffNetPurchAmt = DiffNetPurchAmt   ' +
									  ', DiffTaxAmt      = DiffTaxAmt        ' +
									  ', TotHPPAmt       = TotHPPAmt       + ' +convert(varchar,@TotPurchaseAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and HPPNo=''' +@HPPNo + ''''
					execute sp_executesql @sqlUpdate 

				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt

			 -- SD: Insert/Update data to table apInterface
				set @sqlInsert = 'merge into ' +@DBName+ '..apInterface as ap using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +@curProfitCenterCode+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +@WRSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''' +@curCompanyMD+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''' +@AccNoAP+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',NULL,0,0,''POSTING'','''
								 +convert(varchar,@PostingDate,111)+ ''',0,''' +@SeriPajakNo+ ''','''
								 +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
								NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
								NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo)
						on ap.CompanyCode = SRC.NewCompany
					   and ap.BranchCode  = SRC.NewBranch
					   and ap.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NetAmt = NetAmt + NewNetAmt
										 , PPNAmt = PPNAmt + NewPPNAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, ProfitCenterCode, DocDate, Reference, 
										ReferenceDate, NetAmt, PPHAmt, SupplierCode, PPNAmt, PPnBM, AccountNo, 
										TermsDate, TermsName, TotalAmt, StatusFlag, CreateBy, CreateDate, 
										ReceiveAmt, FakturPajakNo, FakturPajakDate, RefNo)
								values (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
										NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
										NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo);'
					execute sp_executesql @sqlInsert

			 -- SD: Insert/Update data to table glInterface
				-- glInterface - INVENTORY
				set @SeqNoGL = 1
				set @sqlInsert = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoInventory+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''INVENTORY'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - TAX IN
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlInsert = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoTaxIn+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''TAX IN'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX IN''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - AP
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlInsert = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoAP+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',0,'''
								 +convert(varchar,@TotPurchaseAmt)+ ''',''AP'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AP''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

			 -- SD: Insert data to table glJournal 
			 -- SD: Insert data to table glJournalDtl
				--select * from spTrnPRcvHdr where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPRcvDtl where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPHPP    where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from apInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and Reference in ('WRL/14/102818','WRL/14/102819') --DocNo='HPP/14/102793'
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and DocNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournal    where CompanyCode='6006400001' and BranchCode='6006400131' and ProfitCenterCode='300' order by JournalNo desc --and ReffNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournalDtl where CompanyCode='6006400001' and BranchCode='6006400131' and Description in ('HPP/14/102808','HPP/14/102815')
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and left(DocNo,3) in ('FPJ','HPP') order by BatchNo desc

			 -- Update Daily Posting Process Status
				update svSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and PartNo     =@curPartNo
					  and PartSeq    =@curPartSeq

			 -- Read next record
				fetch next from cursvSDMovement
					into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
						 @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
						 @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
						 @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 
/*
	 -- Move data which already processed from table svSDMovement to table svHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[svHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[svHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[PartNo] [varchar](20) NOT NULL,
				[PartSeq] [int] NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[QtyOrder] [numeric](18, 2) NOT NULL,
				[Qty] [numeric](18, 2) NOT NULL,
				[DiscPct] [numeric](5, 2) NOT NULL,
				[CostPrice] [numeric](18, 2) NOT NULL,
				[RetailPrice] [numeric](18, 2) NOT NULL,
				[TypeOfGoods] [varchar](5) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[RetailPriceInclTaxMD] [numeric](18, 2) NOT NULL,
				[RetailPriceMD] [numeric](18, 2) NOT NULL,
				[CostPriceMD] [numeric](18, 2) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[ProductType] [varchar](15) NOT NULL,
				[ProfitCenterCode] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NULL,
				[LastUpdateDate] [datetime] NULL)

		insert into svHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  svSDMovement
							  where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		delete svSDMovement   where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))
*/
		close cursvSDMovement
		deallocate cursvSDMovement

/*
		--delete sbtsby..spTrnPHPP
		--delete sbtsby..spTrnPRcvDtl
		--delete sbtsby..spTrnPRcvHdr
		--delete sbtsby..spTrnPBinnDtl
		--delete sbtsby..spTrnPBinnHdr
		--delete sbtsby..spTrnPOrderBalance
		--delete sbtsby..spTrnPPOSDtl
		--delete sbtsby..spTrnPPOSHdr
		--delete sbtsby..apInterface where left(DocNo,3)='HPP'
		--delete sbtsby..glInterface where left(DocNo,3)='HPP'

		--delete bitsby..spTrnSFPJInfo 
		--delete bitsby..spTrnSFPJDtl
		--delete bitsby..spTrnSFPJHdr
		--delete bitsby..spTrnSInvoiceDtl
		--delete bitsby..spTrnSInvoiceHdr
		--delete bitsby..spTrnSPickingDtl
		--delete bitsby..spTrnSPickingHdr
		--delete bitsby..spTrnSOSupply
		--delete bitsby..spTrnSORDDtl
		--delete bitsby..spTrnSORDHdr
		--delete sbtsby..arInterface where left(DocNo,3)='FPJ'
		--delete sbtsby..glInterface where left(DocNo,3)='FPJ'

		declare @MDComp varchar(15) = '6006408'
		declare @MDBran varchar(15) = '6006431'
		declare @SDComp varchar(15) = '6006400001'
		declare @SDBran varchar(15) = '6006400131'

		select * from svSDMovement m where not exists (select 1 from bitsby..spMstItems
														where CompanyCode=@MDComp
														  and BranchCode =@MDBran
														  and PartNo     =m.PartNo)

		select top 1 * from sbtsby..spTrnPPOSHdr       where CompanyCode=@SDComp and BranchCode=@SDBran order by POSNo desc
		select top 1 * from sbtsby..spTrnPPOSDtl       where CompanyCode=@SDComp and BranchCode=@SDBran order by POSNo desc
		select top 1 * from sbtsby..spTrnPOrderBalance where CompanyCode=@SDComp and BranchCode=@SDBran order by POSNo desc

		select top 1 * from sbtsby..spTrnPBinnHdr      where CompanyCode=@SDComp and BranchCode=@SDBran order by BinningNo desc
		select top 1 * from sbtsby..spTrnPBinnDtl      where CompanyCode=@SDComp and BranchCode=@SDBran order by BinningNo desc

		select top 1 * from sbtsby..spTrnPRcvHdr       where CompanyCode=@SDComp and BranchCode=@SDBran order by WRSNo desc
		select top 1 * from sbtsby..spTrnPRcvDtl       where CompanyCode=@SDComp and BranchCode=@SDBran order by WRSNo desc
		select top 1 * from sbtsby..spTrnPHPP          where CompanyCode=@SDComp and BranchCode=@SDBran order by HPPNo desc
		select top 1 * from sbtsby..apInterface        where CompanyCode=@SDComp and BranchCode=@SDBran and left(DocNo,3)='HPP' order by DocNo desc
		select top 3 * from sbtsby..glInterface        where CompanyCode=@SDComp and BranchCode=@SDBran and left(DocNo,3)='HPP' order by DocNo desc

		select top 1 * from bitsby..spTrnSORDHdr       where CompanyCode=@MDComp and BranchCode=@MDBran order by DOCNo desc
		select top 1 * from bitsby..spTrnSORDDtl       where CompanyCode=@MDComp and BranchCode=@MDBran order by DOCNo desc
		select top 1 * from bitsby..spTrnSOSupply      where CompanyCode=@MDComp and BranchCode=@MDBran order by DOCNo desc

		select top 1 * from bitsby..spTrnSPickingHdr   where CompanyCode=@MDComp and BranchCode=@MDBran order by PickingSlipNo desc
		select top 1 * from bitsby..spTrnSPickingDtl   where CompanyCode=@MDComp and BranchCode=@MDBran order by PickingSlipNo desc

		select top 1 * from bitsby..spTrnSInvoiceHdr   where CompanyCode=@MDComp and BranchCode=@MDBran order by InvoiceNo desc
		select top 1 * from bitsby..spTrnSInvoiceDtl   where CompanyCode=@MDComp and BranchCode=@MDBran order by InvoiceNo desc

		select top 1 * from bitsby..spTrnSFPJHdr       where CompanyCode=@MDComp and BranchCode=@MDBran order by FPJNo desc
		select top 1 * from bitsby..spTrnSFPJDtl       where CompanyCode=@MDComp and BranchCode=@MDBran order by FPJNo desc
		select top 1 * from bitsby..spTrnSFPJInfo      where CompanyCode=@MDComp and BranchCode=@MDBran order by FPJNo desc

		select top 1 * from bitsby..arInterface        where CompanyCode=@MDComp and BranchCode=@MDBran and left(DocNo,3)='FPJ' order by DocNo desc
		select top 6 * from bitsby..glInterface        where CompanyCode=@MDComp and BranchCode=@MDBran and left(DocNo,3)='FPJ' order by DocNo desc

*/
END
GO

if object_id('usprpt_PostingMultiCompanyMainProcess') is not null
	drop procedure usprpt_PostingMultiCompanyMainProcess
GO
-- POSTING TRANSACTION MULTI COMPANY - MAIN PROCESS
-- ---------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ---------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST , UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanyMainProcess] '6006400001','2014/11/14','HTO'
-- update sysParaMeter set ParamValue='2014/11/01' where ParamId='POSTING_STATUS'
-- -------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompanyMainProcess]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@UserId			varchar(20)
AS	

--BEGIN TRANSACTION
--BEGIN TRY

BEGIN
 -- Check Posting Multi Company Date in table sysParameter
	declare @PostDate	varchar(10)
	declare @PostStatus	integer
	set @PostDate   = (select ParamValue from sysParaMeter where ParamId='POSTING_STATUS')
	set @PostStatus = (case when @PostDate is null                             then 0
	                        when @PostDate < convert(varchar,@PostingDate,111) then 1
					        else                                                    2
					   end)
	if @PostStatus = 0
		insert sysParaMeter values('POSTING_STATUS',convert(varchar,@PostingDate,111),'Posting Multi Company')
	else
		if @PostStatus = 1
			update sysParaMeter set ParamValue=convert(varchar,@PostingDate,111) where ParamId='POSTING_STATUS'
		else
			begin
				select '0' [STATUS], 'Daily Posting tertanggal ' + convert(varchar,@PostingDate,106) + ' sudah pernah dilakukan sebelumnya....' [INFO]
				return
			end

	declare @Status	varchar(1)
/*
	execute [usprpt_PostingMultiCompanySales]	@CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales fail...' [INFO]
			return
		end
*/

	execute [usprpt_PostingMultiCompanySparepartService] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting SparePart & Service fail...' [INFO]
			return
		end

--END TRY

--BEGIN CATCH
--    select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
--		   ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
--	if @@TRANCOUNT > 0
--		rollback transaction
--	return
--END CATCH

--IF @@TRANCOUNT > 0
--	begin
--		select '1' [STATUS], 'Posting Done !!!' [INFO]
--		--rollback transaction
--		commit transaction
--	end

END
GO


delete from SysMenuDms where menuid='omdealerpricelist'
insert into SysMenuDms (MenuId, menucaption,menuheader,MenuIndex, MenuLevel,MenuUrl)
values ('omdealerpricelist','Price List Branches','slsmaster',1,2,'master/listpricebranches')

delete from sysRoleMenu where menuid='omdealerpricelist'
insert into sysRoleMenu (RoleId,MenuId) values ('ADM','omdealerpricelist')
insert into sysRoleMenu (RoleId,MenuId) values ('ADMIN','omdealerpricelist')
insert into sysRoleMenu (RoleId,MenuId) values ('Sales','omdealerpricelist')

CREATE TABLE [dbo].[omPriceListBranches](
	[CompanyCode] [varchar](15) NOT NULL,
	[BranchCode] [varchar](15) NOT NULL,
	[SupplierCode] [varchar](15) NOT NULL,
	[GroupPrice] [varchar](15) NOT NULL,
	[SalesModelCode] [varchar](20) NOT NULL,
	[SalesModelYear] [numeric](4, 0) NOT NULL,
	[EffectiveDate] [datetime] NOT NULL,
	[RetailPriceIncludePPN] [numeric](18, 0) NULL,
	[DiscPriceIncludePPN] [numeric](18, 0) NULL,
	[NetSalesIncludePPN] [numeric](18, 0) NULL,
	[RetailPriceExcludePPN] [numeric](18, 0) NULL,
	[DiscPriceExcludePPN] [numeric](18, 0) NULL,
	[NetSalesExcludePPN] [numeric](18, 0) NULL,
	[PPNBeforeDisc] [numeric](18, 0) NULL,
	[PPNAfterDisc] [numeric](18, 0) NULL,
	[PPNBMPaid] [numeric](18, 0) NULL,
	[isStatus] [bit] NULL,
	[CreatedBy] [varchar](20) NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar](20) NULL,
	[LastUpdateDate] [datetime] NULL,
 CONSTRAINT [PK_omPriceListBranches] PRIMARY KEY CLUSTERED 
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[SupplierCode] ASC,
	[GroupPrice] ASC,
	[SalesModelCode] ASC,
	[SalesModelYear] ASC,
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

CREATE TABLE [dbo].[omPriceListBranchesLog](
	[CompanyCode] [varchar](15) NOT NULL,
	[BranchCode] [varchar](15) NOT NULL,
	[SupplierCode] [varchar](15) NOT NULL,
	[GroupPrice] [varchar](15) NOT NULL,
	[SalesModelCode] [varchar](20) NOT NULL,
	[SalesModelYear] [numeric](4, 0) NOT NULL,
	[EffectiveDate] [datetime] NOT NULL,
	[RetailPriceIncludePPN] [numeric](18, 0) NULL,
	[DiscPriceIncludePPN] [numeric](18, 0) NULL,
	[NetSalesIncludePPN] [numeric](18, 0) NULL,
	[RetailPriceExcludePPN] [numeric](18, 0) NULL,
	[DiscPriceExcludePPN] [numeric](18, 0) NULL,
	[NetSalesExcludePPN] [numeric](18, 0) NULL,
	[PPNBeforeDisc] [numeric](18, 0) NULL,
	[PPNAfterDisc] [numeric](18, 0) NULL,
	[PPNBMPaid] [numeric](18, 0) NULL,
	[isStatus] [bit] NULL,
	[LastUpdateBy] [varchar](20) NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]

GO

if object_id('uspfn_omGetPriceList') is not null
	drop procedure uspfn_omGetPriceList
GO
CREATE procedure [dbo].[uspfn_omGetPriceList]
	@CompanyCode varchar(20)='',
	@BranchCode varchar(20)='',
	@salesmodelcode varchar(32)='',
	@salesmodelyear int=0,
	@Status int=2
AS
SELECT 
       a.[SalesModelCode]
      ,a.[SalesModelYear]
      ,b.[SalesModelDesc]
      ,a.[GroupPrice]
      ,a.[RetailPriceIncludePPN]
      ,a.[DiscPriceIncludePPN]
      ,a.[NetSalesIncludePPN]
      ,a.[RetailPriceExcludePPN]
      ,a.[DiscPriceExcludePPN]
      ,a.[NetSalesExcludePPN]
      ,a.[PPNBeforeDisc]
      ,a.[PPNAfterDisc]
      ,a.[PPNBMPaid]
      ,a.[EffectiveDate]
      ,a.[isStatus]
  FROM [dbo].[omPriceListBranches] a inner join omMstModel b 
  on (a.CompanyCode=b.CompanyCode and a.SalesModelCode=b.SalesModelCode)
where a.companycode=@CompanyCode and a.BranchCode=@BranchCode
and a.SalesModelCode like case when @salesmodelcode='' then '%%' else @salesmodelcode end
and a.SalesModelYear = case when @salesmodelyear=0 then a.SalesModelYear else @salesmodelyear end
and a.isStatus = case when @Status=2 then a.isstatus else @Status end
GO

if object_id('uspfn_omUpdatePriceList') is not null
	drop procedure uspfn_omUpdatePriceList
GO
CREATE Procedure [dbo].[uspfn_omUpdatePriceList]
	@CompanyCode varchar(15)='' ,
	@BranchCode varchar(15)='' ,
	@SupplierCode varchar(15)='' ,
	@GroupPrice varchar(15)='' ,
	@SalesModelCode varchar(20) ='',
	@SalesModelYear numeric(4, 0)=2015 ,
	@EffectiveDate datetime=null ,
	@RetailPriceIncludePPN numeric(18, 0)=0 ,
	@DiscPriceIncludePPN numeric(18, 0) =0,
	@NetSalesIncludePPN numeric(18, 0)=0 ,
	@RetailPriceExcludePPN numeric(18, 0)=0 ,
	@DiscPriceExcludePPN numeric(18, 0) =0,
	@NetSalesExcludePPN numeric(18, 0) =0,
	@PPNBeforeDisc numeric(18, 0) =0,
	@PPNAfterDisc numeric(18, 0) =0,
	@PPNBMPaid numeric(18, 0)=0 ,
	@isStatus bit = 1,
	@UserId varchar(20)=''
AS
BEGIN
	
	IF @BranchCode=''
	BEGIN
		declare @loopbranch varchar(20)
		declare crBranch  cursor local for
		select branchcode from gnMstCoProfile
		where companycode=@companycode

		open crBranch
		fetch next from crBranch into @loopbranch

		while @@FETCH_STATUS=0
		begin
			exec uspfn_omUpdatePriceList @companycode,@loopbranch,@SupplierCode,@GroupPrice,@SalesModelCode,@SalesModelYear,@EffectiveDate,@RetailPriceIncludePPN,@DiscPriceIncludePPN,@NetSalesIncludePPN,@RetailPriceExcludePPN,@DiscPriceExcludePPN,@NetSalesExcludePPN,@PPNBeforeDisc,@PPNAfterDisc,@PPNBMPaid,@isStatus,@UserId
			fetch next from crBranch into @loopbranch
		end

		close crbranch
		deallocate crbranch
	END
	ELSE
	BEGIN

		INSERT INTO [dbo].[omPriceListBranchesLog]
				([CompanyCode],[BranchCode],[SupplierCode],[GroupPrice],[SalesModelCode],[SalesModelYear]
				,[EffectiveDate],[RetailPriceIncludePPN],[DiscPriceIncludePPN],[NetSalesIncludePPN]
				,[RetailPriceExcludePPN],[DiscPriceExcludePPN],[NetSalesExcludePPN],[PPNBeforeDisc],[PPNAfterDisc]
				,[PPNBMPaid],[isStatus],[LastUpdateBy],[LastUpdateDate])
			VALUES
				(@companycode,@BranchCode,@SupplierCode,@GroupPrice
				,@SalesModelCode,@SalesModelYear,@EffectiveDate,@RetailPriceIncludePPN,@DiscPriceIncludePPN,@NetSalesIncludePPN,@RetailPriceExcludePPN
				,@DiscPriceExcludePPN,@NetSalesExcludePPN,@PPNBeforeDisc,@PPNAfterDisc,@PPNBMPaid,@isStatus,@UserId,getdate()) 

		IF  EXISTS(select * from omPriceListBranches	
		where companycode=@companycode and branchcode=@branchcode
		and suppliercode=@suppliercode and groupprice=@groupprice
		and SalesModelCode=@SalesModelCode and SalesModelYear=@SalesModelYear
		and EffectiveDate = @EffectiveDate)
		BEGIN
			UPDATE [omPriceListBranches] 
			SET 
				RetailPriceIncludePPN=@RetailPriceIncludePPN,
				DiscPriceIncludePPN=@DiscPriceIncludePPN,NetSalesIncludePPN=@NetSalesIncludePPN,
				RetailPriceExcludePPN=@RetailPriceExcludePPN,DiscPriceExcludePPN=@DiscPriceExcludePPN,
				NetSalesExcludePPN=@NetSalesExcludePPN,PPNBeforeDisc=@PPNBeforeDisc,
				PPNAfterDisc=@PPNAfterDisc,PPNBMPaid=@PPNBMPaid,isStatus=@isStatus,
				[LastUpdateBy]=@userid,LastUpdateDate=getdate()
			where companycode=@companycode and branchcode=@branchcode
			and suppliercode=@suppliercode and groupprice=@groupprice
			and SalesModelCode=@SalesModelCode and SalesModelYear=@SalesModelYear
			and EffectiveDate = @EffectiveDate
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[omPriceListBranches]
				   ([CompanyCode],[BranchCode],[SupplierCode],[GroupPrice],[SalesModelCode],[SalesModelYear]
				   ,[EffectiveDate],[RetailPriceIncludePPN],[DiscPriceIncludePPN],[NetSalesIncludePPN]
				   ,[RetailPriceExcludePPN],[DiscPriceExcludePPN],[NetSalesExcludePPN],[PPNBeforeDisc],[PPNAfterDisc]
				   ,[PPNBMPaid],[isStatus],CreatedBy,[CreatedDate])
			 VALUES
				   (@companycode,@BranchCode,@SupplierCode,@GroupPrice
				   ,@SalesModelCode,@SalesModelYear,@EffectiveDate,@RetailPriceIncludePPN,@DiscPriceIncludePPN,@NetSalesIncludePPN,@RetailPriceExcludePPN
				   ,@DiscPriceExcludePPN,@NetSalesExcludePPN,@PPNBeforeDisc,@PPNAfterDisc,@PPNBMPaid,@isStatus,@UserId,getdate()) 

		END


	END

END
GO
delete from SysMenuDms where MenuId in ('svinqpivot','svinqpivotsvccsv','svinqpivotsvcinv','svinqpivotsvcjrn','svinqpivotsvcmsi','svinqpivotsvctrans')
insert into sysmenudms (menuid,MenuCaption, MenuHeader, MenuIndex,MenuLevel,MenuUrl)
values ('svinqpivot','Pivot Service','svinquiry',8,2,'')
insert into sysmenudms (menuid,MenuCaption, MenuHeader, MenuIndex,MenuLevel,MenuUrl)
values ('svinqpivotsvctrans','Service Trans','svinqpivot',1,3,'inquiry/pvttrans')	
insert into sysmenudms (menuid,MenuCaption, MenuHeader, MenuIndex,MenuLevel,MenuUrl)
values ('svinqpivotsvcinv','Service Invoice','svinqpivot',2,3,'inquiry/pvtinv')
insert into sysmenudms (menuid,MenuCaption, MenuHeader, MenuIndex,MenuLevel,MenuUrl)
values ('svinqpivotsvcjrn','Service Journal','svinqpivot',3,3,'inquiry/pvtjournal')
insert into sysmenudms (menuid,MenuCaption, MenuHeader, MenuIndex,MenuLevel,MenuUrl)
values ('svinqpivotsvccsv','Customer Vehicle','svinqpivot',4,3,'inquiry/pvtcustomer')
insert into sysmenudms (menuid,MenuCaption, MenuHeader, MenuIndex,MenuLevel,MenuUrl)
values ('svinqpivotsvcmsi','Pivot Suzuki MSI','svinqpivot',5,3,'inquiry/pvtmsi')

delete from sysRoleMenu where MenuId in 
('svinqpivot','svinqpivotsvccsv','svinqpivotsvcinv','svinqpivotsvcjrn','svinqpivotsvcmsi','svinqpivotsvctrans')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivot','ADM')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivot','ADMIN')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivot','SERVICE')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvccsv','ADM')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvccsv','ADMIN')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvccsv','SERVICE')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcinv','ADM')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcinv','ADMIN')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcinv','SERVICE')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcjrn','ADM')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcjrn','ADMIN')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcjrn','SERVICE')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcmsi','ADM')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcmsi','ADMIN')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvcmsi','SERVICE')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvctrans','ADM')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvctrans','ADMIN')
insert into sysRoleMenu (MenuId,RoleId) values ('svinqpivotsvctrans','SERVICE')
GO

create view [dbo].[LookUpSO]
as
               SELECT a.CompanyCode, a.BranchCode,
                a.SONo, a.SODate, a.SalesType, a.CustomerCode, a.TOPCode, a.Installment, a.FinalPaymentDate,
                a.TOPDays, a.BillTo, a.ShipTo, a.ProspectNo, a.SKPKNo, a.Salesman, a.WareHouseCode, a.isLeasing, 
                a.LeasingCo, a.GroupPriceCode, a.Insurance, a.PaymentType, a.PrePaymentAmt, a.PrePaymentBy, 
                a.CommissionBy, a.CommissionAmt, a.PONo, a.ContractNo, a.Remark, a.Status,
                a.SalesCoordinator, a.SalesHead, a.BranchManager, a.RefferenceNo,
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
                then '' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDates, 
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
                CASE convert(varchar, a.RequestDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.RequestDate, 111) end as RequestDate,
                CASE convert(varchar, a.PrePaymentDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.PrePaymentDate, 111) end as PrePaymentDate,
                e.Address1 + ' ' + e.Address2 + ' ' + e.Address3 + ' ' + e.Address4 as Address,
                case when year(a.RefferenceDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC1,
                case when a.SKPKNo <> '' then convert(bit,1) else convert(bit,0) end isC2,
                case when year(a.PrePaymentDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC3,
                case when year(a.RequestDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC4,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS CustomerName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID) as SalesmanName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.Shipto = b.CustomerCode)  
						AS ShipName,
                (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.LeasingCo = b.CustomerCode)  
						AS LeasingCoName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.PrePaymentby = c.EmployeeID) as PrePaymentName,
				(SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = 'GRPR' 
                        AND d.RefferenceCode = a.GroupPriceCode) AS GroupPriceName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS BillName,
				(SELECT b.lookupvaluename
                        FROM gnMstLookUpDtl b
                        WHERE a.WareHouseCode = b.LookUpValue
						AND a.WareHouseCode = b.LookUpValue and CodeID ='MPWH')  
						AS WareHouseName,
                (a.CustomerCode
                    + ' || '
                    + (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode))  
						AS Customer, 
                (a.Salesman
                    + ' || '
                    + (SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID))  AS Sales, 
                (a.GroupPriceCode
                    + ' || '
                    + (SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = 'GRPR' 
                        AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPrice, 
                CASE a.Status when 0 then 'OPEN'
                                when 1 then 'PRINTED'
                                when 2 then 'APPROVED'
                                when 3 then 'DELETED'
                                when 4 then 'REJECTED'
                                when 9 then 'FINISHED' END as Stat
                , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales
                ,(select distinct x.TipeKendaraan
                    from pmKDP x
	                    left join gnMstEmployee b on x.CompanyCode=b.CompanyCode and x.BranchCode=b.BranchCode
		                    and x.EmployeeID=b.EmployeeID
	                    left join omTrSalesSO c on c.CompanyCode = x.CompanyCode 
		                    and c.BranchCode = x.BranchCode
		                    and c.ProspectNo = x.InquiryNumber
	                    left join omTrSalesInvoice d on d.CompanyCode = x.CompanyCode
		                    and d.BranchCode = x.BranchCode
		                    and d.SONo = c.SONo
	                    left join omTrSalesReturn e on e.CompanyCode = x.CompanyCode
		                    and e.BranchCode = x.BranchCode
		                    and e.InvoiceNo = d.InvoiceNo
                    where x.InquiryNumber=a.ProspectNo) as VehicleType
                FROM omTrSalesSO a
                INNER JOIN gnMstCustomer e
                ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode
GO
create view [dbo].[ITSBrowse]
as
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
where --a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) and not exists (select * from omTrSalesSO c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.ProspectNo = a.InquiryNumber and c.Status = 2)	 
union
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
		and c.Status = 2
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
	left join omTrSalesSOVin f on f.CompanyCode = c.CompanyCode	--Penambahan
		and f.BranchCode = c.BranchCode	--Penambahan
		and f.SONo = c.SONo	--Penambahan
	left join omMstVehicle g on g.CompanyCode = f.CompanyCode --Penambahan
		and g.ChassisNo = f.ChassisNo	--Penambahan
where 
--a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) 
--	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status = 2)		
	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status in (2,5))	--Perubahan	
	and g.InvoiceNo = '' --Penambahan

union
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
		and c.Status = 2
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
	left join omTrSalesSOVin f on f.CompanyCode = c.CompanyCode	--Penambahan
		and f.BranchCode = c.BranchCode	--Penambahan
		and f.SONo = c.SONo	--Penambahan
	left join omMstVehicle g on g.CompanyCode = f.CompanyCode --Penambahan
		and g.ChassisNo = f.ChassisNo	--Penambahan
where 
	--a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) 
--	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status = 2)	
	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status in (2,5))	--Perubahan		
	and (select count(*) from omTrSalesSO c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.ProspectNo = a.InquiryNumber and c.Status = 2) = 1
	and g.InvoiceNo = ''	--Penambahan

union
select a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
where --a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress = 'SPK'
	and c.ProspectNo is null
GO
if object_id('SvCustomerVehicleView') is not null
	drop view SvCustomerVehicleView

go
CREATE VIEW [dbo].[SvCustomerVehicleView]
AS
SELECT  
                         a.CompanyCode, c.BranchCode, a.ChassisCode, a.ChassisNo, a.ChassisCode + CONVERT(varchar, a.ChassisNo) AS VinNo, a.BasicModel, a.PoliceRegNo, 
                         a.ServiceBookNo, a.CustomerCode, b.CustomerName, a.ContractNo, a.IsContractStatus, CASE d .ContractDate WHEN ('19000101') THEN NULL 
                         ELSE d .ContractDate END AS ContractDate, a.ClubNo, CASE a.ClubDateFinish WHEN ('19000101') THEN NULL ELSE a.ClubDateFinish END AS ClubDateFinish, 
                         a.IsClubStatus, b.Address1, b.Address2, b.Address3, b.Address4, b.CityCode, e.LookUpValueName AS CityName, b.PhoneNo, b.HPNo, b.FaxNo, a.TransmissionType, 
                         a.TechnicalModelCode, CASE a.LastServiceDate WHEN ('19000101') THEN NULL ELSE a.LastServiceDate END AS LastServiceDate, a.LastJobType, a.ColourCode, 
                         a.EngineCode, a.EngineNo, c.MaterialDiscPct, c.PartDiscPct, c.LaborDiscPct
FROM            dbo.svMstCustomerVehicle AS a LEFT OUTER JOIN
                         dbo.gnMstCustomer AS b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode INNER JOIN
                         dbo.gnMstCustomerProfitCenter AS c ON c.CompanyCode = b.CompanyCode AND c.CustomerCode = b.CustomerCode AND 
                         c.ProfitCenterCode = '200' LEFT OUTER JOIN
                         dbo.svMstContract AS d ON d.CompanyCode = b.CompanyCode AND d.CustomerCode = b.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstLookUpDtl AS e ON e.CompanyCode = b.CompanyCode AND e.CodeID = 'CITY' AND e.LookUpValue = b.CityCode
WHERE        (ISNULL(a.BasicModel, '') <> '') AND (a.IsActive = 1)
GO

if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        
  
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6006400001'  
--set @BranchCode = '6006400101'  
--set @ProductType = '4W'  
--set @ServiceNo = 43545  
--set @BillType = 'C'  
--set @PartNo = '99000-990C5-A03'  
--set @DemandQty = 2  
--set @PartSeq = -1  
--set @UserID = 'demo'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin  
  select * into #part from (  
  select   
    a.CostPrice   
   ,a.RetailPrice  
    from spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
  )#part  
    
  set @CostPrice = (select CostPrice from #part)  
  set @RetailPrice = (select RetailPrice from #part)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = @PartNo  
            and b.BillType = 'F'  
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from spMstItemPrice  
           where 1 = 1  
             and CompanyCode = @CompanyCode  
             and BranchCode = @BranchCode  
             and PartNo = @PartNo  
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq  
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    --if (@DealerCode = 'SD')  
	 --begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  --end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    @CompanyCode CompanyCode  
   ,@BranchCode BranchCode  
   ,@ProductType ProductType  
   ,@ServiceNo ServiceNo  
   ,a.PartNo  
   ,@PartSeqNew  
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,@DemandQty DemandQty  
   ,'0' SupplyQty  
   ,'0' ReturnQty  
   ,@CostPrice  
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,@BillType BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,@DiscPct  
   ,(select MechanicID from svTrnService where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ServiceNo = @ServiceNo)  
    from spMstItemPrice a,spMstItems b, #srv c  
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
        and b.CompanyCode = c.CompanyCode  
     and b.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
       
  --select   @CostPrice   
  --if (@DealerCode = 'SD')  
  --begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
   
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,'0'  
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  --end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 --if (@DealerCode = 'SD')  
 --begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 --end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  
GO

if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN 

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001748'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '0028729'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'

--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
inner join '+ @DbMD+'..spMstItemPrice b ON a.CompanyCode = '''+@CompanyCode +''' AND a.BranchCode ='''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

--select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================

declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


if(@md = 0)
begin

set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct, a.CostPrice, a.RetailPrice, b.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from spTrnSORDDtl a 
join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
and a.BranchCode = b.BranchCode 
and a.DocNo = b.DocNo
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ReferenceNo = '''+ @JobOrderNo +''''

exec (@Query)
--print (@QUERY)

end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO

CREATE FUNCTION [dbo].[GetBranchMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @BranchMD AS VARCHAR(15)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @BranchMD
END
GO

---=========== alter uspfn_sp_partinquiry dynamic query MD/SD ===============
if object_id('uspfn_sp_partinquiry') is not null
	drop procedure uspfn_sp_partinquiry
GO
---=========== alter uspfn_sp_partinquiry dynamic query MD/SD ===============

create procedure [dbo].[uspfn_sp_partinquiry]
@CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(2), @ProductType varchar(2)
AS
begin

--declare @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(2), @ProductType varchar(2)
--set @CompanyCode = '6159401000'
--set @BranchCode = '6159401001'
--set @TypeOfGoods = '0'
--set @ProductType = '4W'

DECLARE @Query varchar(max);
SET @Query = 'SELECT 
		 Items.PartNo,ItemInfo.PartName,ItemLoc.WarehouseCode
		,ItemLoc.LocationCode
		,(ItemLoc.OnHand - (ItemLoc.AllocationSP + ItemLoc.AllocationSR + ItemLoc.AllocationSL + ItemLoc.ReservedSP + ItemLoc.ReservedSR + ItemLoc.ReservedSL)) AS QtyAvail
		,Items.OnOrder,ItemPrice.RetailPriceInclTax
		,CASE ItemInfo.IsGenuinePart WHEN 1 THEN ''Ya'' ELSE ''Tidak'' END AS IsGenuinePart
		,ItemInfo.SupplierCode,ItemPrice.RetailPrice
		,Items.ProductType,Items.PartCategory
		,(SELECT LookupValueName 
			FROM gnMstLookupDtl 
		   WHERE CodeID = ''PRCT'' AND 
				 LookUpValue = Items.PartCategory AND 
				 CompanyCode = ''' + @CompanyCode + ''') AS CategoryName
		,CASE Items.Status WHEN 1 THEN ''Aktif'' ELSE ''Tidak'' END AS IsActive
		,ItemInfo.OrderUnit
		,Supplier.SupplierName
		,(SELECT LookupValueName 
			FROM gnMstLookupDtl 
		  WHERE CodeID = ''TPGO'' AND 
				LookUpValue = Items.TypeOfGoods AND 
				CompanyCode =  ''' + @CompanyCode + ''') AS TypeOfGoods
		FROM ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItems Items
		INNER JOIN ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
								 AND Items.PartNo = ItemInfo.PartNo
		INNER JOIN ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItemLoc ItemLoc ON Items.CompanyCode  = ItemLoc.CompanyCode
			AND Items.BranchCode = ItemLoc.BranchCode	
			AND Items.PartNo = ItemLoc.PartNo
		INNER JOIN ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItemPrice ItemPrice ON Items.CompanyCode  = ItemPrice.CompanyCode
			AND Items.BranchCode = ItemPrice.BranchCode	
			AND Items.PartNo = ItemPrice.PartNo		 
		LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
								 AND Supplier.SupplierCode = ItemInfo.SupplierCode
		WHERE Items.CompanyCode =  ''' + dbo.GetCompanyMD(@CompanyCode, @BranchCode) + '''
		AND Items.BranchCode  = ''' + dbo.GetBranchMD(@CompanyCode, @BranchCode) + '''    
		  AND Items.TypeOfGoods =''' +  @TypeOfGoods + '''
		  AND Items.ProductType = ''' + @ProductType + ''' 
		  AND ItemLoc.WarehouseCode = ''00''';

		print(@Query)
		exec (@Query);
END
GO
CREATE FUNCTION [dbo].[GetWarehouseMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @WarehouseMD AS VARCHAR(15)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @WarehouseMD
END
GO

CREATE FUNCTION [dbo].[GetDbMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @DbMD varchar(20);
	SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @DbMD
END
GO

CREATE FUNCTION [dbo].[GetCompanyMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @CompanyMD AS VARCHAR(15)
	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @CompanyMD
END
GO

if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
create procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        
  
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6006400001'  
--set @BranchCode = '6006400101'  
--set @ProductType = '4W'  
--set @ServiceNo = 43545  
--set @BillType = 'C'  
--set @PartNo = '99000-990C5-A03'  
--set @DemandQty = 2  
--set @PartSeq = -1  
--set @UserID = 'demo'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin  
  select * into #part from (  
  select   
    a.CostPrice   
   ,a.RetailPrice  
    from spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
  )#part  
    
  set @CostPrice = (select CostPrice from #part)  
  set @RetailPrice = (select RetailPrice from #part)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = @PartNo  
            and b.BillType = 'F'  
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from spMstItemPrice  
           where 1 = 1  
             and CompanyCode = @CompanyCode  
             and BranchCode = @BranchCode  
             and PartNo = @PartNo  
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq  
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    if (@DealerCode = 'SD')  
	 begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    @CompanyCode CompanyCode  
   ,@BranchCode BranchCode  
   ,@ProductType ProductType  
   ,@ServiceNo ServiceNo  
   ,a.PartNo  
   ,@PartSeqNew  
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,@DemandQty DemandQty  
   ,'0' SupplyQty  
   ,'0' ReturnQty  
   ,@CostPrice  
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,@BillType BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,@DiscPct  
   ,(select MechanicID from svTrnService where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ServiceNo = @ServiceNo)  
    from spMstItemPrice a,spMstItems b, #srv c  
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
        and b.CompanyCode = c.CompanyCode  
     and b.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
       
  --select   @CostPrice   
  if (@DealerCode = 'SD')  
  begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
  
  
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,'0'  
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 if (@DealerCode = 'SD')  
 begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  
GO
if object_id('uspfn_SvTrnServiceSelectEstimationData') is not null
	drop procedure uspfn_SvTrnServiceSelectEstimationData
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSelectEstimationData]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15),
	@ShowAll bit
AS

declare @Query varchar(max)
declare @Condition varchar(4000);

set @Condition = ' ORDER BY svTrnService.EstimationNo DESC';
if(@ShowAll = 0) begin
	set @Condition = ' AND svTrnService.ServiceStatus IN (0,1,2,3,4,5) ORDER BY svTrnService.EstimationNo DESC';
end 

set @Query = '
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + '' '' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + '' '' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + '' - '' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + '' - '' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus=''4'' then
            case when ''' + @ProductType + '''=''4W'' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '''' + custBill.Address2 + '''' + custBill.Address3 + '''' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = ''SERVSTAS''
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = ''' + @CompanyCode + '''
    AND svTrnService.BranchCode = ''' + @BranchCode + '''
 AND svTrnService.ServiceType in (''0'',''2'') and svTrnService.EstimationNo <> '''''
 + @Condition;
 
 exec (@Query); 
 GO
 if object_id('sp_updateOmMstVehicleSO') is not null
	drop procedure sp_updateOmMstVehicleSO
GO
create procedure [dbo].[sp_updateOmMstVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@ChassisCode varchar(25),
	@ChassisNo varchar(25),
	@SONO varchar(25),
	@userId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	declare @dbMD varchar(25), @sqlStr varchar(max);
	
	--set @Month = (select FiscalPeriod from gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		if exists (select * from '+ @dbMD +'.dbo.omMstVehicle where ChassisCode = '''+@ChassisCode+''' and ChassisNo = '''+@ChassisNo+''')
		begin
			update '+ @dbMD +'.dbo.omMstVehicle
			set status=3, SONo = '''+@SONO+''', LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate()
			where ChassisCode = '''+@ChassisCode+''' and ChassisNo= '''+@ChassisNo+'''

			select convert(bit, 1) as Status
		end
		else select convert(bit, 0) as Status
	'
	
	--if exists (select * from BAT_UAT.dbo.omMstVehicle where ChassisCode = @ChassisCode and ChassisNo =@ChassisNo)
	--begin
		--update BAT_UAT.dbo.omMstVehicle
		--set status=3, SONo = @SONO, LastUpdateBy = @userId, LastUpdateDate =getdate()
		--where ChassisCode = @ChassisCode and ChassisNo=@ChassisNo

		--select convert(bit, 1) as Status
	--end
	--else select convert(bit, 0) as Status
	--select	@sqlStr
	exec(@sqlStr)
end

GO
if object_id('sp_updateOmTrInventQtyVehicleSO') is not null
	drop procedure sp_updateOmTrInventQtyVehicleSO
GO
create procedure [dbo].[sp_updateOmTrInventQtyVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear varchar(25),
	@ColourCode varchar(25),
	@WarehouseCode varchar(25),
	@Quantity varchar,
	@UserId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	--declare @Month int;
	--declare @Alocation int, @EndingOH int, @EndingAV int
	declare @dbMD varchar(25), @sqlStr varchar(max), @companyMD varchar(25),@branchMD varchar(25);
	
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @companyMD = (select companyMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @branchMD = (select unitBranchMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	
	--set @Month = (select FiscalPeriod from BAT_UAT.dbo.gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		declare @Month int;
		declare @Alocation int, @EndingOH int, @EndingAV int;
		
		set @Month = (select FiscalPeriod from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')
		
		if exists (select * from '+@dbMD+'.dbo.OmTrInventQtyVehicle 
		where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' )
	begin
		set @Alocation = (select Alocation + '+@Quantity+' from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month )
        set @EndingOH = (select BeginningOH + QtyIn - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month )
        set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month )
		
		if (@EndingAV < 0) select 1 as Status
		else begin
			update '+@dbMD+'.dbo.OmTrInventQtyVehicle
			set LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month

			select 2 as Status
		end
	end
	else select 0 as Status
	'
	--if exists (select * from BAT_UAT.dbo.OmTrInventQtyVehicle 
		--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode )
	--begin
		--set @Alocation = (select Alocation + @Quantity from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingOH = (select BeginningOH + QtyIn - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
		
		--if (@EndingAV < 0) select 1 as Status
		--else begin
			--update BAT_UAT.dbo.OmTrInventQtyVehicle
			--set LastUpdateBy = @userId, LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month

			--select 2 as Status
		--end
	--end
	--else select 0 as Status
--select @sqlStr
exec(@sqlStr)
end

GO
if object_id('uspfn_GetVehicleInfo_New') is not null
	drop procedure uspfn_GetVehicleInfo_New
GO
CREATE procedure [dbo].[uspfn_GetVehicleInfo_New]  
 @CompanyCode  varchar(20),  
 @BranchCode   varchar(20),  
 @ProductType  varchar(10),  
 @PoliceRegNo  varchar(20),  
 @ChassisCode  varchar(20),  
 @ChassisNo    varchar(10),  
 @BasicModel   varchar(20),  
 @JobOrderDate varchar(20),
 @CustomerCode varchar(20),
 @IsAllBranch  bit = 1
 
as  
  
select * into #t1 from (  
select 0 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , c.MechanicId+' - '+  
  (  
  select EmployeeName   
  from gnMstEmployee   
  where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and EmployeeID=c.MechanicId  
  ) MechanicId  
     , a.ForemanId  
     , b.OperationNo  
     , isnull(b.OperationHour, 0) as OperationQty  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.0) as OperationAmt  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.1) as TotalSrvAmount  
     , isnull(b.SharingTask, 0) SharingTask  
     , case when f.Description is null then (select TOP 1 Description   
    from svMstTask   
     where BasicModel = a.BasicModel  
      and OperationNo = b.OperationNo) else f.Description end Description  
    , isnull(g.EmployeeName, '') NameSA  
    , isnull(h.EmployeeName, '') NameForeman  
    , b.CreatedDate  
 from svTrnService a with(nolock, nowait)  
 left join svTrnSrvTask b with(nolock, nowait)  
   on b.CompanyCode = a.CompanyCode  
  and b.BranchCode  = a.BranchCode  
  and b.ProductType = a.ProductType  
  and b.ServiceNo   = a.ServiceNo  
 left join svTrnSrvMechanic c with(nolock, nowait)  
   on c.CompanyCode = b.CompanyCode  
  and c.BranchCode  = b.BranchCode  
  and c.ProductType = b.ProductType  
  and c.ServiceNo   = b.ServiceNo  
  and c.OperationNo = b.OperationNo  
 left join svTrnInvoice d with(nolock, nowait)  
   on d.CompanyCode = a.CompanyCode  
  and d.BranchCode  = a.BranchCode  
  and d.InvoiceNo   = a.InvoiceNo  
 left join svMstRefferenceService e with(nolock, nowait)  
   on e.CompanyCode    = a.CompanyCode  
  and e.RefferenceCode = a.jobType  
  and e.ProductType    = a.ProductType  
  and e.RefferenceType = 'JOBSTYPE'  
 left join svMstTask f with(nolock, nowait)  
   on f.CompanyCode = b.CompanyCode  
  and f.ProductType = b.ProductType  
  and f.OperationNo = b.OperationNo   
  and f.JobType     = a.JobType  
  and f.BasicModel  = a.BasicModel  
 left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
  and g.BranchCode = a.BranchCode   
  and g.EmployeeId = a.ForemanID  
 left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
  and h.BranchCode = a.BranchCode   
  and h.EmployeeId = a.MechanicID  
where a.JobOrderNo <> ''  
  and a.CompanyCode = @CompanyCode  
  and a.BranchCode  = @BranchCode  
  and a.ProductType = @ProductType  
  and a.ChassisCode = @ChassisCode  
  and a.ChassisNo   = @ChassisNo  
  and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
  and a.CustomerCode = @CustomerCode
) #t1  
  
--declare @t_spk_task as table(JobOrderNo varchar(20), OperationNo varchar(20))  
  
--insert into @t_spk_task   
--select a.JobOrderNo  
--  , isnull((  
--  select top 1 OperationNo from #t1  
--      where JobOrderNo = a.JobOrderNo  
--      order by CreatedDate   
--     ), '') OperationNo  
--  from #t1 a group by a.JobOrderNo  
  
insert into #t1  
select 1 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , ''  
     , ''  
     , b.PartNo  
     , (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) as OperationQty  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.0) as OperationAmt  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.1)
     , 1  
     , f.PartName  
     , isnull(g.EmployeeName, '') NameSA  
     , isnull(h.EmployeeName, '') NameForeman  
     , b.CreatedDate  
  from svTrnService a with(nolock, nowait)  
  left join svTrnSrvItem b with(nolock, nowait)  
    on b.CompanyCode = a.CompanyCode  
   and b.BranchCode  = a.BranchCode  
   and b.ProductType = a.ProductType  
   and b.ServiceNo   = a.ServiceNo  
  left join svTrnInvoice d with(nolock, nowait)  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode  = a.BranchCode  
   and d.InvoiceNo   = a.InvoiceNo  
  left join svMstRefferenceService e with(nolock, nowait)  
    on e.CompanyCode    = a.CompanyCode  
   and e.RefferenceCode = a.jobType  
   and e.ProductType    = a.ProductType  
   and e.RefferenceType = 'JOBSTYPE'  
  left join spMstItemInfo f with(nolock, nowait)  
    on f.CompanyCode = b.CompanyCode  
   and f.PartNo      = b.PartNo   
  left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
   and g.BranchCode = a.BranchCode   
   and g.EmployeeId = a.ForemanID  
  left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
   and h.BranchCode = a.BranchCode   
   and h.EmployeeId = a.MechanicID  
 where a.JobOrderNo <> ''  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and a.ProductType = @ProductType  
   and a.ChassisCode = @ChassisCode  
   and a.ChassisNo   = @ChassisNo  
   and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
   and a.CustomerCode = @CustomerCode
;with x as (  
select a.JobOrderNo, a.OperationNo, a.TotalSrvAmount, b.TotalSrvAmount TotalSrvAmountNew  
  from #t1 a  
  left join svTrnService b  
    on b.CompanyCode = @CompanyCode  
   and b.BranchCode  = @BranchCode  
   and b.ProductType = @ProductType  
   and b.JobOrderNo  = a.JobOrderNo  
)  
update x set TotalSrvAmount = TotalSrvAmountNew  
  
select BranchCode  
     , JobOrderNo  
     , SUM(TotalSrvAmount)  TotalSrvAmount
from #t1 
where OperationQty > 0
group BY BranchCode, JobOrderNo, TotalSrvAmount
order by JobOrderNo
  
drop table #t1  
GO
if object_id('uspfn_GetVehicleInfo_SubNew') is not null
	drop procedure uspfn_GetVehicleInfo_SubNew
GO
CREATE procedure [dbo].[uspfn_GetVehicleInfo_SubNew]  
 @CompanyCode  varchar(20),  
 @BranchCode   varchar(20),  
 @ProductType  varchar(10),  
 @PoliceRegNo  varchar(20),  
 @ChassisCode  varchar(20),  
 @ChassisNo    varchar(10),  
 @BasicModel   varchar(20),  
 @JobOrderDate varchar(20),
 @CustomerCode varchar(20),
 @IsAllBranch  bit = 1,
 @JobOrderNo   varchar(20)
 
as  
  
select * into #t1 from (  
select 0 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , c.MechanicId+' - '+  
  (  
  select EmployeeName   
  from gnMstEmployee   
  where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and EmployeeID=c.MechanicId  
  ) MechanicId  
     , a.ForemanId  
     , b.OperationNo  
     , isnull(b.OperationHour, 0) as OperationQty  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.0) as OperationAmt  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.1) as TotalSrvAmount  
     , isnull(b.SharingTask, 0) SharingTask  
     , case when f.Description is null then (select TOP 1 Description   
    from svMstTask   
     where BasicModel = a.BasicModel  
      and OperationNo = b.OperationNo) else f.Description end Description  
    , isnull(g.EmployeeName, '') NameSA  
    , isnull(h.EmployeeName, '') NameForeman  
    , b.CreatedDate  
 from svTrnService a with(nolock, nowait)  
 left join svTrnSrvTask b with(nolock, nowait)  
   on b.CompanyCode = a.CompanyCode  
  and b.BranchCode  = a.BranchCode  
  and b.ProductType = a.ProductType  
  and b.ServiceNo   = a.ServiceNo  
 left join svTrnSrvMechanic c with(nolock, nowait)  
   on c.CompanyCode = b.CompanyCode  
  and c.BranchCode  = b.BranchCode  
  and c.ProductType = b.ProductType  
  and c.ServiceNo   = b.ServiceNo  
  and c.OperationNo = b.OperationNo  
 left join svTrnInvoice d with(nolock, nowait)  
   on d.CompanyCode = a.CompanyCode  
  and d.BranchCode  = a.BranchCode  
  and d.InvoiceNo   = a.InvoiceNo  
 left join svMstRefferenceService e with(nolock, nowait)  
   on e.CompanyCode    = a.CompanyCode  
  and e.RefferenceCode = a.jobType  
  and e.ProductType    = a.ProductType  
  and e.RefferenceType = 'JOBSTYPE'  
 left join svMstTask f with(nolock, nowait)  
   on f.CompanyCode = b.CompanyCode  
  and f.ProductType = b.ProductType  
  and f.OperationNo = b.OperationNo   
  and f.JobType     = a.JobType  
  and f.BasicModel  = a.BasicModel  
 left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
  and g.BranchCode = a.BranchCode   
  and g.EmployeeId = a.ForemanID  
 left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
  and h.BranchCode = a.BranchCode   
  and h.EmployeeId = a.MechanicID  
where a.JobOrderNo <> ''  
  and a.CompanyCode = @CompanyCode  
  and a.BranchCode  = @BranchCode  
  and a.ProductType = @ProductType  
  and a.ChassisCode = @ChassisCode  
  and a.ChassisNo   = @ChassisNo  
  and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
  and a.CustomerCode = @CustomerCode
  and a.JobOrderNo = @JobOrderNo
) #t1  
  
--declare @t_spk_task as table(JobOrderNo varchar(20), OperationNo varchar(20))  
  
--insert into @t_spk_task   
--select a.JobOrderNo  
--  , isnull((  
--  select top 1 OperationNo from #t1  
--      where JobOrderNo = a.JobOrderNo  
--      order by CreatedDate   
--     ), '') OperationNo  
--  from #t1 a group by a.JobOrderNo  
  
insert into #t1  
select 1 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , ''  
     , ''  
     , b.PartNo  
     , (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) as OperationQty  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.0) as OperationAmt  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.1)
     , 1  
     , f.PartName  
     , isnull(g.EmployeeName, '') NameSA  
     , isnull(h.EmployeeName, '') NameForeman  
     , b.CreatedDate  
  from svTrnService a with(nolock, nowait)  
  left join svTrnSrvItem b with(nolock, nowait)  
    on b.CompanyCode = a.CompanyCode  
   and b.BranchCode  = a.BranchCode  
   and b.ProductType = a.ProductType  
   and b.ServiceNo   = a.ServiceNo  
  left join svTrnInvoice d with(nolock, nowait)  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode  = a.BranchCode  
   and d.InvoiceNo   = a.InvoiceNo  
  left join svMstRefferenceService e with(nolock, nowait)  
    on e.CompanyCode    = a.CompanyCode  
   and e.RefferenceCode = a.jobType  
   and e.ProductType    = a.ProductType  
   and e.RefferenceType = 'JOBSTYPE'  
  left join spMstItemInfo f with(nolock, nowait)  
    on f.CompanyCode = b.CompanyCode  
   and f.PartNo      = b.PartNo   
  left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
   and g.BranchCode = a.BranchCode   
   and g.EmployeeId = a.ForemanID  
  left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
   and h.BranchCode = a.BranchCode   
   and h.EmployeeId = a.MechanicID  
 where a.JobOrderNo <> ''  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and a.ProductType = @ProductType  
   and a.ChassisCode = @ChassisCode  
   and a.ChassisNo   = @ChassisNo  
   and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
   and a.CustomerCode = @CustomerCode
   and a.JobOrderNo = @JobOrderNo
;with x as (  
select a.JobOrderNo, a.OperationNo, a.TotalSrvAmount, b.TotalSrvAmount TotalSrvAmountNew  
  from #t1 a  
  left join svTrnService b  
    on b.CompanyCode = @CompanyCode  
   and b.BranchCode  = @BranchCode  
   and b.ProductType = @ProductType  
   and b.JobOrderNo  = a.JobOrderNo  
)  
update x set TotalSrvAmount = TotalSrvAmountNew  
  
select *  
from #t1 
where OperationQty > 0
order by JobOrderNo, TaskPartSeq, CreatedDate
  
drop table #t1  
GO
if object_id('uspfn_omSoLkp') is not null
	drop procedure uspfn_omSoLkp
GO
CREATE procedure uspfn_omSoLkp 
(
	@CompanyCode varchar(25),
	@BranchCode varchar(25)
)
as
 
 -- exec uspfn_omSoLkp '6159401000','6159401001'
 -- select * from gnMstCompanyMapping
 declare @DbMD as varchar(15)  
 declare @Sql as varchar(max) 
 declare @ssql as varchar(max) 
 
 set @DbMD = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  

set @Sql= 'SELECT a.CompanyCode, a.BranchCode,
                a.SONo, a.SODate, a.SalesType, a.CustomerCode, a.TOPCode, a.Installment, a.FinalPaymentDate,
                a.TOPDays, a.BillTo, a.ShipTo, a.ProspectNo, a.SKPKNo, a.Salesman, a.WareHouseCode, a.isLeasing, 
                a.LeasingCo, a.GroupPriceCode, a.Insurance, a.PaymentType, a.PrePaymentAmt, a.PrePaymentBy, 
                a.CommissionBy, a.CommissionAmt, a.PONo, a.ContractNo, a.Remark, a.Status,
                a.SalesCoordinator, a.SalesHead, a.BranchManager, a.RefferenceNo,
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then '''' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDates, 
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
                CASE convert(varchar, a.RequestDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RequestDate, 111) end as RequestDate,
                CASE convert(varchar, a.PrePaymentDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.PrePaymentDate, 111) end as PrePaymentDate,
                e.Address1 + '' '' + e.Address2 + '' '' + e.Address3 + '' '' + e.Address4 as Address,
                case when year(a.RefferenceDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC1,
                case when a.SKPKNo <> '''' then convert(bit,1) else convert(bit,0) end isC2,
                case when year(a.PrePaymentDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC3,
                case when year(a.RequestDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC4,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS CustomerName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID) as SalesmanName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.Shipto = b.CustomerCode)  
						AS ShipName,
                (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.LeasingCo = b.CustomerCode)  
						AS LeasingCoName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.PrePaymentby = c.EmployeeID) as PrePaymentName,
				(SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode) AS GroupPriceName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS BillName,
				(SELECT b.lookupvaluename
                        FROM '+@DbMD+'..gnMstLookUpDtl b
  WHERE a.WareHouseCode = b.LookUpValue
						AND a.WareHouseCode = b.LookUpValue and CodeID =''MPWH'')  
						AS WareHouseName,
                (a.CustomerCode
                    + '' || ''
                    + (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode))  
						AS Customer, 
                (a.Salesman
                    + '' || ''
                    + (SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID))  AS Sales, 
                (a.GroupPriceCode
                    + '' || ''
                    + (SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPrice, 
                CASE a.Status when 0 then ''OPEN''
                                when 1 then ''PRINTED''
                                when 2 then ''APPROVED''
                                when 3 then ''DELETED''
                                when 4 then ''REJECTED''
                                when 9 then ''FINISHED'' END as Stat
                , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales
                ,(select distinct x.TipeKendaraan
                    from pmKDP x
	                    left join gnMstEmployee b on x.CompanyCode=b.CompanyCode and x.BranchCode=b.BranchCode
		                    and x.EmployeeID=b.EmployeeID
	                    left join omTrSalesSO c on c.CompanyCode = x.CompanyCode 
		                    and c.BranchCode = x.BranchCode
		                    and c.ProspectNo = x.InquiryNumber
	                    left join omTrSalesInvoice d on d.CompanyCode = x.CompanyCode
		                    and d.BranchCode = x.BranchCode
		                    and d.SONo = c.SONo
	                    left join omTrSalesReturn e on e.CompanyCode = x.CompanyCode
		                    and e.BranchCode = x.BranchCode
		                    and e.InvoiceNo = d.InvoiceNo
                    where x.InquiryNumber=a.ProspectNo) as VehicleType
                FROM omTrSalesSO a
                INNER JOIN gnMstCustomer e
                ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode
				order by a.sodate desc
				'

--print @Sql

exec (@Sql)
GO

if object_id('usprpt_PmRpInqSummaryWeb') is not null
	drop procedure usprpt_PmRpInqSummaryWeb
GO
CREATE procedure [dbo].[usprpt_PmRpInqSummaryWeb] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@PeriodBegin		DATETIME,
	@PeriodEnd			DATETIME,
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@Salesman			VARCHAR(15),
	@Jns				VARCHAR(1)
	
)
AS 
BEGIN
SET NOCOUNT ON;
IF @Jns = '1'
BEGIN
	SELECT * INTO #deptSales FROM(
		SELECT 
				'4' idx,
			   a.EmployeeID,
			   a.Position,
			   a.EmployeeName,
			   a.TeamLeader,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.StatusProspek <> '20' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) NEW,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'P' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'HP' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'SPK' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) SPK,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'DO' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) DO,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'DELIVERY' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) DELIVERY,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'LOST' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) LOST
		FROM HrEmployee a WHERE a.Department = 'SALES' AND a.CompanyCode = @CompanyCode
	)#deptSales

	--Sales Coordinator
	SELECT * INTO #qryS_SC FROM(
		SELECT 
				'3' idx,
			   a.EmployeeID,
			   a.Position, 
			   a.EmployeeName,
			   a.TeamLeader,
				(SELECT ISNULL(SUM(NEW), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) NEW,
				(SELECT ISNULL(SUM(PROSPECT), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) PROSPECT, 
				(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) HOTPROSPECT,
				(SELECT ISNULL(SUM(SPK), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) SPK,
				(SELECT ISNULL(SUM(DO), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) DO,
				(SELECT ISNULL(SUM(DELIVERY), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) DELIVERY,
				(SELECT ISNULL(SUM(LOST), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) LOST
		FROM #deptSales a WHERE a.Position = 'SC'
	)#qryS_SC

	--Sales Head
	SELECT * INTO #qrySH FROM(
		SELECT 
				'2' idx,
			   a.EmployeeID,
			   a.Position, 
			   a.EmployeeName,
			   a.TeamLeader,
			   (SELECT ISNULL(SUM(NEW), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') NEW,
			   (SELECT ISNULL(SUM(PROSPECT), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') PROSPECT,
			   (SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') HOTPROSPECT,
			   (SELECT ISNULL(SUM(SPK), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') SPK,
			   (SELECT ISNULL(SUM(DO), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') DO,
			   (SELECT ISNULL(SUM(DELIVERY), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') DELIVERY,
			   (SELECT ISNULL(SUM(LOST), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') LOST
		FROM #deptSales a WHERE a.Position = 'SH'
	)#qrySH

	IF(@SalesHead = '' AND @Salesman = '')
		BEGIN
			--Branch Manager
			SELECT * INTO #qryBM FROM(
				SELECT 
					'1' idx,
					a.EmployeeID,
					a.Position, 
					a.EmployeeName,
					a.TeamLeader,
  					(SELECT ISNULL(SUM(NEW), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) NEW,
					(SELECT ISNULL(SUM(PROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) PROSPECT,
					(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) HOTPROSPECT,
					(SELECT ISNULL(SUM(SPK), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) SPK,
					(SELECT ISNULL(SUM(DO), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DO,
					(SELECT ISNULL(SUM(DELIVERY), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DELIVERY,
					(SELECT ISNULL(SUM(LOST), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) LOST
				FROM #deptSales a WHERE a.Position = 'BM' AND a.EmployeeID = @BranchManager
			)#qryBM

			SELECT * INTO #qryAll FROM(
				SELECT * FROM #qryBM
				UNION
				SELECT * FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM)     
				UNION
				SELECT * FROM #qryS_SC WHERE TeamLeader IN (SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM)) 
				UNION
				SELECT * FROM #deptSales WHERE TeamLeader IN (SELECT EmployeeID FROM #qryS_SC WHERE TeamLeader IN (SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM))) 
			)#qryAll

			SELECT 
				CASE a.Position
				WHEN 'BM' THEN 'Branch Manager'
				WHEN 'SH' THEN 'Sales Head'
				WHEN 'SC' THEN 'Sales Coordinator'
				WHEN 'S' THEN 'Salesman'
				ELSE 'Sales'
				END AS Position,
				a.EmployeeName, a.NEW, a.PROSPECT, a.HOTPROSPECT, a.SPK, a.DO, a.DELIVERY, a.LOST  
			FROM #qryAll a ORDER BY a.idx ASC
		
			DROP TABLE #qryAll
			DROP TABLE #qryBM
		END
	ELSE IF(@Salesman = '')
		BEGIN
			--Branch Manager
			SELECT * INTO #qryBM2 FROM(
				SELECT
					'1' idx, 
					a.EmployeeID,
					a.Position, 
					a.EmployeeName,
					a.TeamLeader,
  					(SELECT ISNULL(SUM(NEW), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) NEW,
					(SELECT ISNULL(SUM(PROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) PROSPECT,
					(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) HOTPROSPECT,
					(SELECT ISNULL(SUM(SPK), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) SPK,
					(SELECT ISNULL(SUM(DO), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DO,
					(SELECT ISNULL(SUM(DELIVERY), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DELIVERY,
					(SELECT ISNULL(SUM(LOST), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) LOST
				FROM #deptSales a WHERE a.Position = 'BM' AND a.EmployeeID = @BranchManager
			)#qryBM2

			SELECT * INTO #qryAll2 FROM(
				SELECT * FROM #qryBM2
				UNION
				SELECT * FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM2) AND EmployeeID = @SalesHead     
				UNION
				SELECT * FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM2) AND EmployeeID = @SalesHead) 
				UNION
				SELECT * FROM #deptSales WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM2) AND EmployeeID = @SalesHead )) 
			)#qryAll2

			SELECT 
				CASE a.Position
				WHEN 'BM' THEN 'Branch Manager'
				WHEN 'SH' THEN 'Sales Head'
				WHEN 'SC' THEN 'Sales Coordinator'
				WHEN 'S' THEN 'Salesman'
				ELSE 'Sales'
				END AS Position,
				a.EmployeeName, a.NEW, a.PROSPECT, a.HOTPROSPECT, a.SPK, a.DO, a.DELIVERY, a.LOST  
			FROM #qryAll2 a ORDER BY a.idx ASC

			DROP TABLE #qryAll2
			DROP TABLE #qryBM2
		END
	ELSE
		BEGIN
			--Branch Manager
			SELECT * INTO #qryBM3 FROM(
				SELECT
					'1' idx, 
					a.EmployeeID,
					a.Position, 
					a.EmployeeName,
					a.TeamLeader,
  					(SELECT ISNULL(SUM(NEW), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) NEW,
					(SELECT ISNULL(SUM(PROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) PROSPECT,
					(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) HOTPROSPECT,
					(SELECT ISNULL(SUM(SPK), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) SPK,
					(SELECT ISNULL(SUM(DO), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DO,
					(SELECT ISNULL(SUM(DELIVERY), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DELIVERY,
					(SELECT ISNULL(SUM(LOST), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) LOST
				FROM #deptSales a WHERE a.Position = 'BM' AND a.EmployeeID = @BranchManager
			)#qryBM3

			SELECT * INTO #qryAll3 FROM(
				SELECT * FROM #qryBM3
				UNION
				SELECT * FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM3) AND EmployeeID = @SalesHead     
				UNION
				SELECT * FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM3) AND EmployeeID = @SalesHead) 
				UNION
				SELECT * FROM #deptSales WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM3) AND EmployeeID = @SalesHead ))
				AND EmployeeID = @Salesman 
			)#qryAll3

			SELECT 
				CASE a.Position
				WHEN 'BM' THEN 'Branch Manager'
				WHEN 'SH' THEN 'Sales Head'
				WHEN 'SC' THEN 'Sales Coordinator'
				WHEN 'S' THEN 'Salesman'
				ELSE 'Sales'
				END AS Position,
				a.EmployeeName, a.NEW, a.PROSPECT, a.HOTPROSPECT, a.SPK, a.DO, a.DELIVERY, a.LOST 
			FROM #qryAll3 a ORDER BY a.idx ASC 

			DROP TABLE #qryAll3
			DROP TABLE #qryBM3
		END
		DROP TABLE #deptSales
		DROP TABLE #qryS_SC
		DROP TABLE #qrySH
	END
ELSE IF @Jns = '2'
	BEGIN
		SELECT * INTO #dByTipe FROM(
			SELECT b.EmployeeID, (b.TipeKendaraan + ' ' + b.Variant) ModelKendaraan, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND (b.InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd)
		)#dByTipe

		SELECT * INTO #dSls FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.ModelKendaraan,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.StatusProspek <> '20' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) NEW,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) SPK,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'DO' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) DO,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'DELIVERY' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) DELIVERY,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'LOST' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) LOST
			FROM #dByTipe a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.ModelKendaraan
		)#dSls

		--Kondisi SH = '' AND S = ''
		IF (@SalesHead = '' AND @Salesman = '')
		BEGIN
			SELECT * INTO #dt27_1 FROM(
				SELECT
					a.ModelKendaraan,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST 
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))   
				GROUP BY a.ModelKendaraan
			)#dt27_1

			SELECT ModelKendaraan TipeKendaraan, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt27_1 ORDER BY ModelKendaraan

			DROP TABLE #dt27_1
		END
		--Kondisi S = ''
		ELSE IF (@Salesman = '')
		BEGIN
			SELECT * INTO #dt27_2 FROM(
				SELECT
					a.ModelKendaraan,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)) -- >ID SH   
				GROUP BY a.ModelKendaraan
			)#dt27_2

			SELECT ModelKendaraan TipeKendaraan, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt27_2 ORDER BY ModelKendaraan

			DROP TABLE #dt27_2
		END
		ELSE
			SELECT * INTO #dt27_3 FROM(
				SELECT
					a.ModelKendaraan,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls a WHERE a.EmployeeID = @Salesman   
				GROUP BY a.ModelKendaraan
			)#dt27_3

			SELECT ModelKendaraan TipeKendaraan, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt27_3 ORDER BY ModelKendaraan

			DROP TABLE #dt27_3

		DROP TABLE #dSls
		DROP TABLE #dByTipe
	END
ELSE IF @Jns = '3'
	BEGIN
		SELECT * INTO #dByTipe2 FROM(
			SELECT b.EmployeeID, b.PerolehanData, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND (b.InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd)
		)#dByTipe2

		SELECT * INTO #dSls2 FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.PerolehanData,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.StatusProspek <> '20' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) NEW,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) SPK,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'DO' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) DO,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'DELIVERY' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) DELIVERY,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'LOST' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) LOST
			FROM #dByTipe2 a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.PerolehanData
		)#dSls2

		--Kondisi SH = '' AND S = ''
		IF (@SalesHead = '' AND @Salesman = '')
		BEGIN
			SELECT * INTO #dt37_1 FROM(
				SELECT
					a.PerolehanData,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST 
				FROM #dSls2 a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))   
				GROUP BY a.PerolehanData
			)#dt37_1

			SELECT PerolehanData SumberData, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt37_1 ORDER BY PerolehanData

			DROP TABLE #dt37_1
		END
		--Kondisi S = ''
		ELSE IF (@Salesman = '')
		BEGIN
			SELECT * INTO #dt37_2 FROM(
				SELECT
					a.PerolehanData,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls2 a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)) -- >ID SH   
				GROUP BY a.PerolehanData
			)#dt37_2

			SELECT PerolehanData SumberData, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt37_2 ORDER BY PerolehanData

			DROP TABLE #dt37_2
		END
		ELSE
			SELECT * INTO #dt37_3 FROM(
				SELECT
					a.PerolehanData,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls a WHERE a.EmployeeID = @Salesman   
				GROUP BY a.PerolehanData
			)#dt37_3

			SELECT PerolehanData SumberData, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt37_3 ORDER BY PerolehanData

			DROP TABLE #dt37_3

		DROP TABLE #dSls2
		DROP TABLE #dByTipe2
	END
END
GO

if object_id('usprpt_PmRpInqOutStanding_NewByData') is not null
	drop procedure usprpt_PmRpInqOutStanding_NewByData
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- [[usprpt_PmRpInqOutStanding_NewByData]] '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewByData] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;
SELECT * INTO #dByTipe FROM(
			SELECT b.EmployeeID, b.PerolehanData, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)
		)#dByTipe

		SELECT * INTO #dSls FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.PerolehanData,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) SPK
			FROM #dByTipe a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.PerolehanData
		)#dSls

		IF @COO = ''
		BEGIN
		IF @SalesHead = '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))   
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader = @SalesCoordinator
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData	
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman <> ''
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.EmployeeID = @Salesman  
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData

		DROP TABLE #dSls
		DROP TABLE #dByTipe
		END
END
GO
if object_id('usprpt_PmRpInqOutStanding_NewBySalesman') is not null
	drop procedure usprpt_PmRpInqOutStanding_NewBySalesman
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- usprpt_PmRpInqOutStanding_NewBySalesman '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewBySalesman] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;

-- TABLE INITIAL
--===============================================================================================================================
	SELECT * INTO #employee_stat_SM FROM(
		SELECT 
			a.CompanyCode,
			a.EmployeeID,
			a.EmployeeName,
			a.Position,
			'Salesman' PositionName, 
			a.TeamLeader,
			(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastProgress = 'P' AND (b.EmployeeID = a.EmployeeID) AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)) PROSPECT,
			(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastProgress = 'HP' AND (b.EmployeeID = a.EmployeeID) AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)) HOTPROSPECT,
			(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastProgress = 'SPK' AND (b.EmployeeID = a.EmployeeID) AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)) SPK
		FROM HrEmployee a
		WHERE a.CompanyCode = @CompanyCode  AND a.Department = 'SALES'
			AND a.TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @BranchManager))
	)#employee_stat_SM

	SELECT * INTO #employee_stat_SK FROM(
		SELECT
			a.CompanyCode,
			a.TeamLeader EmployeeID,
			b.EmployeeName,
			'SC' Position,
			'Sales Coordinator' PositionName, 
			b.TeamLeader ShEmployeeID,
			ISNULL(SUM(a.PROSPECT),0) PROSPECT,
			ISNULL(SUM(a.HOTPROSPECT),0) HOTPROSPECT,
			ISNULL(SUM(a.SPK),0) SPK
		FROM #employee_stat_SM a
		LEFT JOIN HrEmployee b
			ON b.CompanyCode = a.CompanyCode AND a.TeamLeader = b.EmployeeID
		WHERE b.TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE EmployeeID = @BranchManager))
		GROUP BY a.CompanyCode,
			b.EmployeeName,
			a.TeamLeader, b.TeamLeader
	)#employee_stat_SK

	SELECT * INTO #employee_stat_SH FROM(
		SELECT
			a.CompanyCode,
			a.ShEmployeeID EmployeeID,
			b.EmployeeName,
			'SH' PositionID,
			'Sales Head' PositionName, 
			b.TeamLeader BMEmployeeID,
			ISNULL(SUM(a.PROSPECT),0) PROSPECT,
			ISNULL(SUM(a.HOTPROSPECT),0) HOTPROSPECT,
			ISNULL(SUM(a.SPK),0) SPK
		FROM #employee_stat_SK a
		LEFT JOIN HrEmployee b
			ON b.CompanyCode = a.CompanyCode AND a.ShEmployeeID = b.EmployeeID
		WHERE b.TeamLeader = @BranchManager
		GROUP BY a.CompanyCode,
			b.EmployeeName,
			a.ShEmployeeID, b.TeamLeader
	)#employee_stat_SH

	SELECT * INTO #employee_stat_BM FROM(
		SELECT
			a.CompanyCode,
			a.BMEmployeeID EmployeeID,
			b.EmployeeName,
			'BM' PositionID,
			'Branch Manager' PositionName, 
			'' TeamLeader,
			ISNULL(SUM(a.PROSPECT),0) PROSPECT,
			ISNULL(SUM(a.HOTPROSPECT),0) HOTPROSPECT,
			ISNULL(SUM(a.SPK),0) SPK
		FROM #employee_stat_SH a
		LEFT JOIN HrEmployee b
			ON b.CompanyCode = a.CompanyCode AND a.BMEmployeeID = b.EmployeeID
		WHERE a.BMEmployeeID = @BranchManager
		GROUP BY a.CompanyCode,
			b.EmployeeName,
			a.BMEmployeeID
	)#employee_stat_BM

SELECT * INTO #employee_stat FROM(
	SELECT '4' PositionId, a.* FROM #employee_stat_SM a
	UNION
	SELECT '3' PositionId, a.* FROM #employee_stat_SK a
	UNION
	SELECT '2' PositionId, a.* FROM #employee_stat_SH a
	UNION
	SELECT '1' PositionId, a.* FROM #employee_stat_BM a
	) #employee_stat

	DROP TABLE #employee_stat_SM
	DROP TABLE #employee_stat_SK
	DROP TABLE #employee_stat_SH
	DROP TABLE #employee_stat_BM

IF @COO = ''
	BEGIN
-- == CASE I ==
		IF @SalesHead = '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN		
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode
		END
-- == CASE II ==
		ELSE IF @SalesHead <> '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @BranchManager
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesHead
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @SalesHead)
			UNION			
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @SalesHead))
		END
-- == CASE III ==
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman = ''
		BEGIN
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @BranchManager
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesHead
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesCoordinator
			UNION			
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @SalesCoordinator)
		END
-- == CASE IV ==
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman <> ''
		BEGIN
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @BranchManager
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesHead
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesCoordinator
			UNION			
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @Salesman
		END
	END
END
GO


if object_id('usprpt_PmRpInqOutStanding_NewByType') is not null
	drop procedure usprpt_PmRpInqOutStanding_NewByType
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- [usprpt_PmRpInqOutStanding_NewByType] '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewByType] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;
SELECT * INTO #dByTipe FROM(
			SELECT b.EmployeeID, (b.TipeKendaraan + ' ' + b.Variant) ModelKendaraan, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)
		)#dByTipe

		SELECT * INTO #dSls FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.ModelKendaraan,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) SPK
			FROM #dByTipe a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.ModelKendaraan
		)#dSls

		IF @COO = ''
		BEGIN
		IF @SalesHead = '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))  
				AND a.ModelKendaraan <> ''
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)
					AND a.ModelKendaraan <> ''
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan	
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader = @SalesCoordinator
					AND a.ModelKendaraan <> ''
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan	
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman <> ''
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.EmployeeID = @Salesman
					AND a.ModelKendaraan <> ''   
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan

		DROP TABLE #dSls
		DROP TABLE #dByTipe
		END
END
GO


if object_id('usprpt_PmRpInqOutStanding_NewPrint') is not null
	drop procedure usprpt_PmRpInqOutStanding_NewPrint
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- [[usprpt_PmRpInqOutStanding_NewPrint]] '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewPrint] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;

	EXEC usprpt_PmRpInqOutStanding_NewBySalesman @CompanyCode, @BranchCode, @Period, @COO, @BranchManager, @SalesHead, @SalesCoordinator, @Salesman

	EXEC usprpt_PmRpInqOutStanding_NewByType @CompanyCode, @BranchCode, @Period, @COO, @BranchManager, @SalesHead, @SalesCoordinator, @Salesman

	EXEC usprpt_PmRpInqOutStanding_NewByData @CompanyCode, @BranchCode, @Period, @COO, @BranchManager, @SalesHead, @SalesCoordinator, @Salesman

END
GO


if object_id('uspfn_SvInqFpjStdData') is not null
	drop procedure uspfn_SvInqFpjStdData
GO
CREATE procedure [dbo].[uspfn_SvInqFpjStdData]    
		 @CompanyCode nvarchar(20),    
		 @BranchCode nvarchar(20),    
		 @ProductType nvarchar(2),
		 @FPJNo nvarchar(20),
		 @InvoiceNoStart nvarchar(20),
		 @InvoiceNoEnd nvarchar(20)
		
    
as    

--set @CompanyCode = '6006406'
--set @BranchCode = '6006402'
--set @ProductType = '4W'
--set @FPJNo = 'FPS/13/002075'
--set @InvoiceNoStart = 'INF/13/000472'
--set @InvoiceNoEnd = 'INF/13/000472'
    
declare	 @InvoiceStatus char(1)
set @InvoiceStatus = 0
if(@FPJNo != '')
Set @InvoiceStatus = 1

select	row_number() over(order by inv.InvoiceNo) RowNum
                        , convert(bit, 1) IsSelected
						, inv.CompanyCode
						, inv.BranchCode
                        , inv.ProductType
						, inv.InvoiceNo
		                , inv.InvoiceDate
		                , inv.JobOrderNo
		                , inv.JobOrderDate
		                , inv.TotalDPPAmt
		                , inv.TotalPPHAmt + TotalPPNAmt as TotalPpnAmt
		                , inv.TotalSrvAmt
		                , inv.JobType
		                , inv.PoliceRegNo
		                , inv.BasicModel
		                , inv.ChassisCode
		                , inv.ChassisNo
		                , inv.EngineCode
		                , inv.EngineNo
                        , inv.TOPCode
                        , inv.TOPDays
                        , inv.DueDate
                        , inv.FPJNo
                        , inv.FPJDate
                        , inv.CustomerCodeBill
                        , inv.Odometer
                        , inv.IsPkp
                        , inv.CustomerCode
		                , inv.CustomerCode + ' - ' + cust.CustomerName Pelanggan
		                , inv.CustomerCodeBill + ' - ' + custBill.CustomerName Pembayar
                        , inv.DueDate
                from	svTrnInvoice inv with(nolock, nowait)
		                left join gnMstCustomer cust with(nolock, nowait) on inv.CompanyCode = cust.CompanyCode
			                and inv.CustomerCode = cust.CustomerCode
		                left join gnMstCustomer custBill with(nolock, nowait) on inv.CompanyCode = custBill.CompanyCode
			                and inv.CustomerCodeBill = custBill.CustomerCode
                where	inv.CompanyCode = @CompanyCode 
		                and inv.BranchCode = @BranchCode 
		                and inv.ProductType = @ProductType
		                and inv.InvoiceNo between @InvoiceNoStart and @InvoiceNoEnd
		                and inv.CustomerCodeBill = isnull((select top 1 CustomerCodeBill from svTrnInvoice where InvoiceNo = @InvoiceNoStart),'')
                       and (CASE WHEN inv.InvoiceStatus = 0 THEN @InvoiceStatus ELSE inv.InvoiceStatus END) = inv.InvoiceStatus
                        and inv.FPJNo = @FPJNo
                        and (inv.InvoiceNo like 'INW%' or inv.InvoiceNo like 'INF%')
GO

if object_id('uspfn_spSelectPickingSlipAfterLmp') is not null
	drop procedure uspfn_spSelectPickingSlipAfterLmp
GO
CREATE procedure [dbo].[uspfn_spSelectPickingSlipAfterLmp] 
--declare 
@CompanyCode varchar(15), @BranchCode varchar(15), 
		@ProductType varchar(4), @JobOrderNo varchar(25)
as
--set @CompanyCode = '6159401000'
--set @BranchCode = '6159401001'
--set @ProductType = '4W'
--set @JobOrderNo = 'SPK/15/002385'
SELECT * INTO #t1 FROM (
	SELECT
		DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
		e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
		d.PickedBy
	FROM
		svTrnService a
	LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
		AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
	LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
		AND c.DocNo = b.SupplySlipNo
	LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
		AND d.PickingSlipNo = c.ExPickingSlipNo
	LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
		AND e.PickingSlipNo = d.PickingSlipNo
	LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
		AND f.LookUpValue = c.TransType
	LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
		AND g.PickingSlipNo = d.PickingSlipNo
	WHERE 
		a.CompanyCode     = @CompanyCode
		AND a.BranchCode  = @BranchCode
		AND a.ProductType = @ProductType
		AND a.jobOrderNo  = @JobOrderNo
		--AND b.SupplySlipNo <> ''
		--AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			  -- AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
		--AND d.Status <= 2
)#t1
SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
DROP TABLE #t1
GO
if object_id('uspfn_spGetUtlPORDDdtl') is not null
	drop procedure uspfn_spGetUtlPORDDdtl
GO
Create procedure [dbo].[uspfn_spGetUtlPORDDdtl]   
(  
--DECLARE
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @CustomerCode varchar(15),
 @OrderNo varchar(20) 

--set @CompanyCode   = 6006400001
--set @BranchCode  = 6006400000
--set @CustomerCode ='0000028'
--set @OrderNo ='SOC/14/100143'

)  
AS  

begin

declare @md bit
declare @dbMD varchar(25)
declare @CompanyMD varchar(25)

set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

if(@md = 1)
BEGIN

SELECT  row_number () OVER (ORDER BY a.CreatedDate ASC) AS No,
	                b.DealerCode,
	                a.PartNo,
	                c.PartName,                    
	                a.Qty AS QtyOrder,
                    0.00 as QtySupply,
                    0.00 as QtyBO,
                    e.RetailPrice,
	                (e.RetailPrice * a.Qty) AS SalesAmt,
	                0.00 AS DiscPct,
                    0.00 AS NetSalesAmt
                FROM
	                spUtlPORDDDtl AS a with(nolock, nowait) , 
					spUtlPORDDHDR AS b with(nolock, nowait) ,
	                spMstItemInfo AS c with(nolock, nowait) ,
					gnMstCompanyMapping AS d with(nolock, nowait),
	                spMstItemPrice AS e with(nolock, nowait)
                WHERE
                    a.CompanyCode=b.CompanyCode AND
					a.BranchCode=b.BranchCode AND					
					a.OrderNo=b.OrderNo AND
	                a.CompanyCode = c.CompanyCode AND
	                a.PartNo = c.PartNo AND
	                a.CompanyCode = d.CompanyCode AND
	                a.BranchCode = d.BranchCode AND
					d.CompanyMD = e.CompanyCode AND
	                a.PartNo = e.PartNo AND
	                a.CompanyCode = @CompanyCode AND
	                a.BranchCode = @BranchCode AND
	                b.DealerCode = @CustomerCode AND
	                a.OrderNo = @OrderNo
                ORDER BY a.PartNo
END
ELSE
BEGIN

set @dbMD = (select DISTINCT dbmd from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

--set @CompanyMD = (select DISTINCT CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
--select @CompanyMD
declare @query varchar(max)

if(isnull(cast(@dbMD as varchar(max)),'') = '')
BEGIN
SELECT  row_number () OVER (ORDER BY a.CreatedDate ASC) AS No,
	                b.DealerCode,
	                a.PartNo,
	                c.PartName,                    
	                a.Qty AS QtyOrder,
                    0.00 as QtySupply,
                    0.00 as QtyBO,
                    d.RetailPrice,
	                (d.RetailPrice * a.Qty) AS SalesAmt,
	                0.00 AS DiscPct,
                    0.00 AS NetSalesAmt
                FROM
	                spUtlPORDDDtl AS a with(nolock, nowait) , 
					spUtlPORDDHDR AS b with(nolock, nowait) ,
	                spMstItemInfo AS c with(nolock, nowait) ,
	                spMstItemPrice AS d with(nolock, nowait) 
                WHERE
                    a.CompanyCode=b.CompanyCode AND
					a.BranchCode=b.BranchCode AND					
					a.OrderNo=b.OrderNo AND
	                a.CompanyCode = c.CompanyCode AND
	                a.PartNo = c.PartNo AND
	                a.CompanyCode = d.CompanyCode AND
	                a.BranchCode = d.BranchCode AND
	                a.PartNo = d.PartNo AND
	                a.CompanyCode = @CompanyCode AND
	                a.BranchCode = @BranchCode AND
	                b.DealerCode = @CustomerCode AND
	                a.OrderNo = @OrderNo
                ORDER BY a.PartNo
END
ELSE
BEGIN

set @query = '
SELECT  row_number () OVER (ORDER BY a.CreatedDate ASC) AS No,
	                b.DealerCode,
	                a.PartNo,
	                c.PartName,                    
	                a.Qty AS QtyOrder,
                    0.00 as QtySupply,
                    0.00 as QtyBO,
                    e.RetailPrice,
	                (e.RetailPrice * a.Qty) AS SalesAmt,
	                0.00 AS DiscPct,
                    0.00 AS NetSalesAmt
                FROM
	                spUtlPORDDDtl AS a with(nolock, nowait) , 
					spUtlPORDDHDR AS b with(nolock, nowait) ,
	                spMstItemInfo AS c with(nolock, nowait) ,
					gnMstCompanyMapping AS d with(nolock, nowait),
	                '+@dbMD+'..spMstItemPrice AS e with(nolock, nowait)
                WHERE
                    a.CompanyCode=b.CompanyCode AND
					a.BranchCode=b.BranchCode AND					
					a.OrderNo=b.OrderNo AND
	                a.CompanyCode = c.CompanyCode AND
	                a.PartNo = c.PartNo AND
	                a.CompanyCode = d.CompanyCode AND
	                a.BranchCode = d.BranchCode AND
					d.CompanyMD = e.CompanyCode AND
	                a.PartNo = e.PartNo AND
	                a.CompanyCode = '+@CompanyCode+' AND
	                a.BranchCode = '+@BranchCode +'AND
	                b.DealerCode = '''+@CustomerCode +'''AND
	                a.OrderNo = '''+@OrderNo+'''
                ORDER BY a.PartNo'
EXEC(@query)
print(@query)
				
		END	 
	END
end	
GO

if object_id('uspfn_SalesModelCode4PO') is not null
	drop procedure uspfn_SalesModelCode4PO
GO
CREATE procedure [dbo].[uspfn_SalesModelCode4PO] 
 @DB varchar(50),
 @CompanyCode varchar(50),
 @BranchCode varchar(50),
 @SupplierCode varchar(50)

 as

 declare @sqlstr varchar(max)

 set @sqlstr = 'select a.SalesModelCode, b.SalesModelDesc 
from omMstPricelistBuy a
inner join  '+@DB+'.dbo.omMstModel b
	on a.SalesModelCode = b.SalesModelCode
where a.CompanyCode = '''+ @CompanyCode +'''
 and a.BranchCode = '''+ @BranchCode +'''
 and a.SupplierCode = '''+ @SupplierCode +'''
 and b.Status = ''1'''

 --select @sqlstr
 exec (@sqlstr)
 GO

if object_id('uspfn_omSoLkp') is not null
	drop procedure uspfn_omSoLkp
GO
create procedure uspfn_omSoLkp 
(
	@CompanyCode varchar(25),
	@BranchCode varchar(25)
)
as
 
 -- exec uspfn_omSoLkp '6159401000','6159401001'
 
 declare @DbMD as varchar(15)  
 declare @Sql as varchar(max) 
 declare @ssql as varchar(max) 
 
 set @DbMD = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 


 set @ssql='select * from gnMstCompanyMapping '

set @Sql= 'SELECT a.CompanyCode, a.BranchCode,
                a.SONo, a.SODate, a.SalesType, a.CustomerCode, a.TOPCode, a.Installment, a.FinalPaymentDate,
                a.TOPDays, a.BillTo, a.ShipTo, a.ProspectNo, a.SKPKNo, a.Salesman, a.WareHouseCode, a.isLeasing, 
                a.LeasingCo, a.GroupPriceCode, a.Insurance, a.PaymentType, a.PrePaymentAmt, a.PrePaymentBy, 
                a.CommissionBy, a.CommissionAmt, a.PONo, a.ContractNo, a.Remark, a.Status,
                a.SalesCoordinator, a.SalesHead, a.BranchManager, a.RefferenceNo,
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then '''' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDates, 
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
                CASE convert(varchar, a.RequestDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RequestDate, 111) end as RequestDate,
                CASE convert(varchar, a.PrePaymentDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.PrePaymentDate, 111) end as PrePaymentDate,
                e.Address1 + '' '' + e.Address2 + '' '' + e.Address3 + '' '' + e.Address4 as Address,
                case when year(a.RefferenceDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC1,
                case when a.SKPKNo <> '''' then convert(bit,1) else convert(bit,0) end isC2,
                case when year(a.PrePaymentDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC3,
                case when year(a.RequestDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC4,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS CustomerName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID) as SalesmanName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.Shipto = b.CustomerCode)  
						AS ShipName,
                (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.LeasingCo = b.CustomerCode)  
						AS LeasingCoName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.PrePaymentby = c.EmployeeID) as PrePaymentName,
				(SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode) AS GroupPriceName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS BillName,
				(SELECT b.lookupvaluename
                        FROM '+@DbMD+'..gnMstLookUpDtl b
                        WHERE a.WareHouseCode = b.LookUpValue
						AND a.WareHouseCode = b.LookUpValue and CodeID =''MPWH'')  
						AS WareHouseName,
                (a.CustomerCode
                    + '' || ''
                    + (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode))  
						AS Customer, 
                (a.Salesman
                    + '' || ''
                    + (SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID))  AS Sales, 
                (a.GroupPriceCode
                    + '' || ''
                    + (SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPrice, 
                CASE a.Status when 0 then ''OPEN''
                                when 1 then ''PRINTED''
                                when 2 then ''APPROVED''
                                when 3 then ''DELETED''
                                when 4 then ''REJECTED''
                                when 9 then ''FINISHED'' END as Stat
                , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales
                ,(select distinct x.TipeKendaraan
                    from pmKDP x
	                    left join gnMstEmployee b on x.CompanyCode=b.CompanyCode and x.BranchCode=b.BranchCode
		                    and x.EmployeeID=b.EmployeeID
	                    left join omTrSalesSO c on c.CompanyCode = x.CompanyCode 
		                    and c.BranchCode = x.BranchCode
		                    and c.ProspectNo = x.InquiryNumber
	                    left join omTrSalesInvoice d on d.CompanyCode = x.CompanyCode
		                    and d.BranchCode = x.BranchCode
		                    and d.SONo = c.SONo
	                    left join omTrSalesReturn e on e.CompanyCode = x.CompanyCode
		                    and e.BranchCode = x.BranchCode
		                    and e.InvoiceNo = d.InvoiceNo
                    where x.InquiryNumber=a.ProspectNo) as VehicleType
                FROM omTrSalesSO a
                INNER JOIN gnMstCustomer e
                ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode'

--print @Sql

exec (@Sql)
GO

if object_id('uspfn_GetPINVDData') is not null
	drop procedure uspfn_GetPINVDData
GO
CREATE procedure [dbo].[uspfn_GetPINVDData]
 @CompanyCode varchar(15),
 @BranchCode varchar(15),
 @DNNo varchar(15),
 @SupplierCode varchar(15),
 @TypeOfGoods varchar(2),
 @PPN bit
as 
begin
SELECT  row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut,
a.CompanyCode,
a.BranchCode,
a.OrderNo AS DocNo,
a.DeliveryNo,
(
  SELECT TOP 1 DeliveryDate 
    FROM spUtlPINVDHdr d
  WHERE d.CompanyCode=a.CompanyCode AND
    d.BranchCode=a.BranchCode AND
    d.DealerCode=a.DealerCode AND
    d.DeliveryNo=a.DeliveryNo AND
	d.TypeOfGoods = a.typeOfGoods
) AS DeliveryDate,
(
  SELECT TOP 1 d.InvoiceNo 
    FROM spUtlPINVDHdr d
  WHERE d.CompanyCode=a.CompanyCode AND
    d.BranchCode=a.BranchCode AND
    d.DealerCode=a.DealerCode AND
    d.DeliveryNo=a.DeliveryNo AND
	d.TypeOfGoods = a.TypeOfGoods
) AS InvoiceNo,
a.PartNoShip as PartNo,
(
    SELECT PartName 
    FROM spMstItemInfo e
    WHERE e.CompanyCode=a.CompanyCode AND
                e.PartNo=a.PartNoShip
) AS NmPart
,
case when @PPN = 0 then a.PurchasePrice
else round(a.PurchasePrice + (a.PurchasePrice * (select (TaxPct/100) from gnMstTax
where TaxCode = (select ParaValue from gnMstLookUpDtl where CodeID = 'BINS' and SeqNo = 3))),0) end PurchasePrice
,a.DiscPct,a.QtyShipped AS ReceivedQty
,isnull(a.CaseNumber,'-') AS BoxNo,
--,'-' AS BoxNo,
a.SupplierCode,
(
  SELECT CostPrice FROM spMstItemPrice f
  WHERE f.CompanyCode=a.CompanyCode AND
        f.BranchCode=a.BranchCode AND
        f.PartNo=a.PartNoShip
) AS CostPrice, a.ProductType
FROM spUtlPINVDDtl a, spTrnPPOSDtl b
WHERE 
    a.CompanyCode=b.CompanyCode AND
    a.BranchCode=b.BranchCode AND
    a.OrderNo=b.POSNo AND
    a.PartNo=b.PartNo AND
    a.CompanyCode = @CompanyCode AND
    a.BranchCode = @BranchCode AND
    a.DeliveryNo = @DNNo AND
    a.SupplierCode = @SupplierCode AND
    a.Status IN ('0','1') AND
	a.TypeOfGoods = @TypeOfGoods
end
GO

if object_id('uspfn_GetPartNoSuppliedWeb') is not null
	drop procedure uspfn_GetPartNoSuppliedWeb
GO
CREATE procedure [dbo].[uspfn_GetPartNoSuppliedWeb]   
(  
--DECLARE
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@ProductType as varchar(15),
@JobOrderNo as varchar(15),
@DocNo as varchar(15)

--set @CompanyCode = '6006406'
--set @BranchCode = '6006400'
--set	@ProductType = '4W'
--set	@JobOrderNo = 'SPK/12/000002'
--set @DocNo = 'SSS/12/000010'

)  
AS  

begin

declare @md bit
declare @dbMD varchar(25)
declare @CompanyMD varchar(25)

set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

if(@md = 1)
BEGIN

SELECT 
DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
	, SUM(QtyOrder) QtyOrder
    , QtySupply
    , DiscPct
FROM
(
SELECT
	DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
    , c.DocDate SupplySlipDate
	, a.PartNo
	, a.RetailPrice
	, f.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, Item.QtyOrder	
    , ISNULL(e.QtySupply,0) QtySupply
    , a.DiscPct
FROM
	SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
	LEFT JOIN SvTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
		AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice,
				SUM(ISNULL(DemandQty, 0) - ISNULL(SupplyQty, 0)) QtyOrder
				FROM SvTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = a.PartNo and Item.RetailPrice = a.RetailPrice
	LEFT JOIN SpTrnSORDHdr c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.JobOrderNo = c.UsageDocNo
	LEFT JOIN SpTrnSOSupply e WITH (NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
		AND c.DocNo = e.DocNo
		AND a.PartNo = e.PartNo
    INNER JOIN gnMstCompanyMapping cm WITH(NOLOCK, NOWAIT) ON cm.CompanyCode = a.CompanyCode
    LEFT JOIN SpMstItemPrice f WITH(NOLOCK, NOWAIT) ON cm.CompanyMD = f.CompanyCode
		AND a.BranchCode = f.BranchCode
		AND a.PartNo = f.PartNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND Item.QtyOrder > 0
    AND c.DocNo = @DocNo
	AND JobOrderNo = @JobOrderNo
    AND a.RetailPrice = Item.RetailPrice
)a
LEFT JOIN SpMstItemPrice c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.PartNo = c.PartNo
GROUP BY
a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
    , QtySupply
    , DiscPct

END
ELSE
BEGIN

set @dbMD = (select DISTINCT dbmd from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

--set @CompanyMD = (select DISTINCT CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
--select @CompanyMD
declare @query varchar(max)

if(isnull(cast(@dbMD as varchar(max)),'') = '')
BEGIN

SELECT 
DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
	, SUM(QtyOrder) QtyOrder
    , QtySupply
    , DiscPct
FROM
(
SELECT
	DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
    , c.DocDate SupplySlipDate
	, a.PartNo
	, a.RetailPrice
	, f.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, Item.QtyOrder	
    , ISNULL(e.QtySupply,0) QtySupply
    , a.DiscPct
FROM
	SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
	LEFT JOIN SvTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
		AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice,
				SUM(ISNULL(DemandQty, 0) - ISNULL(SupplyQty, 0)) QtyOrder
				FROM SvTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = a.PartNo and Item.RetailPrice = a.RetailPrice
	LEFT JOIN SpTrnSORDHdr c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.JobOrderNo = c.UsageDocNo
	LEFT JOIN SpTrnSOSupply e WITH (NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
		AND c.DocNo = e.DocNo
		AND a.PartNo = e.PartNo
    LEFT JOIN SpMstItemPrice f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
		AND a.BranchCode = f.BranchCode
		AND a.PartNo = f.PartNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND Item.QtyOrder > 0
    AND c.DocNo = @DocNo
	AND JobOrderNo = @JobOrderNo
    AND a.RetailPrice = Item.RetailPrice
)a
LEFT JOIN SpMstItemPrice c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.PartNo = c.PartNo
GROUP BY
a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
    , QtySupply
    , DiscPct

END
ELSE
BEGIN

set @query = '
SELECT 
DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
	, SUM(QtyOrder) QtyOrder
    , QtySupply
    , DiscPct
FROM
(
SELECT
	DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
    , c.DocDate SupplySlipDate
	, a.PartNo
	, a.RetailPrice
	, f.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, Item.QtyOrder	
    , ISNULL(e.QtySupply,0) QtySupply
    , a.DiscPct
FROM
	SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
	LEFT JOIN SvTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
		AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice,
				SUM(ISNULL(DemandQty, 0) - ISNULL(SupplyQty, 0)) QtyOrder
				FROM SvTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = a.PartNo and Item.RetailPrice = a.RetailPrice
	LEFT JOIN SpTrnSORDHdr c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.JobOrderNo = c.UsageDocNo
	LEFT JOIN SpTrnSOSupply e WITH (NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
		AND c.DocNo = e.DocNo
		AND a.PartNo = e.PartNo
    INNER JOIN gnMstCompanyMapping cm WITH(NOLOCK, NOWAIT) ON cm.CompanyCode = a.CompanyCode
    LEFT JOIN '+@dbMD+'..SpMstItemPrice f WITH(NOLOCK, NOWAIT) ON cm.CompanyMD = f.CompanyCode
		AND a.BranchCode = f.BranchCode
		AND a.PartNo = f.PartNo
WHERE
	a.CompanyCode = '+@CompanyCode+'
	AND a.BranchCode = '+@BranchCode+'
	AND a.ProductType = '+@ProductType+'
	AND Item.QtyOrder > 0
    AND c.DocNo = '+@DocNo+'
	AND JobOrderNo = '+@JobOrderNo+'
    AND a.RetailPrice = Item.RetailPrice
)a
LEFT JOIN SpMstItemPrice c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.PartNo = c.PartNo
GROUP BY
a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
    , QtySupply
    , DiscPct
'
EXEC(@query)
print(@query)
				
		END	 
	END
end	
GO

if object_id('uspfn_SelectFakturRetur') is not null
	drop procedure uspfn_SelectFakturRetur
GO
CREATE procedure [dbo].[uspfn_SelectFakturRetur]
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@TypeOfGoods as varchar(15)
as 
begin
--set @CompanyCode = '6006406'
--set @BranchCode = '6006401'
--set	@FPJNo = 'FPJ/14/000487'
--set	@TypeOfGoods = '5'
--set	@ProductType = '4W'
	select a.FpjNo
    , a.FpjDate
    , a.CustomerCode
    , isnull((
			select CustomerName from gnMstCustomer
			 where CompanyCode = a.CompanyCode and CustomerCode = a.CustomerCode
			), '') as CustomerName  
	 from spTrnSFpjHdr a, gnMstCoProfileSpare b
	where 1 = 1
	  and b.CompanyCode = a.CompanyCode
	  and b.BranchCode = a.BranchCode
	  and a.CompanyCode = @CompanyCode
	  and a.BranchCode  = @BranchCode 
	  and a.TypeOfGoods = @TypeOfGoods 
end
GO
if object_id('uspfn_SpcekvalidTrnPOrderBalance') is not null
	drop procedure uspfn_SpcekvalidTrnPOrderBalance
GO
CREATE PROCEDURE [dbo].[uspfn_SpcekvalidTrnPOrderBalance]
@CompanyCode varchar(15),
@BranchCode varchar(15) ,
@TypeOfGoods varchar(15) ,
@POSNo varchar(15)
AS    
	SELECT 
		DISTINCT a.POSNo
	FROM 
		spTrnPOrderBalance a 
	INNER JOIN gnMstSupplier b 
	   ON b.SupplierCode = a.SupplierCode 
	  AND b.CompanyCode  = a.CompanyCode 
	WHERE a.OrderQty > a.Received
	  AND a.CompanyCode = @CompanyCode
	  AND a.BranchCode  = @BranchCode
	  AND a.TypeOfGoods = @TypeOfGoods
	  AND a.POSNo       = @POSNo
	ORDER BY POSNo DESC
GO

if object_id('uspfn_SvTrnServiceSelectEstimationData') is not null
	drop procedure uspfn_SvTrnServiceSelectEstimationData
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSelectEstimationData]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15)
AS
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + ' ' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + ' ' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + ' - ' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus='4' then
            case when @ProductType='4W' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3 + '' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = 'SERVSTAS'
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = @CompanyCode 
    AND svTrnService.BranchCode = @BranchCode
 AND svTrnService.ServiceType in ('0','2') and svTrnService.EstimationNo <> ''
 AND svTrnService.ServiceStatus IN (0,1,2,3,4,5) ORDER BY svTrnService.EstimationNo DESC
 
 GO
if object_id('uspfn_SelectAccOther') is not null
	drop procedure uspfn_SelectAccOther
GO
CREATE procedure [dbo].[uspfn_SelectAccOther]
	@CompanyCode varchar(25),
	@Reff varchar(25)
as
begin
	SELECT a.RefferenceCode
	     , a.RefferenceDesc1 RefferenceDesc1
      FROM dbo.omMstRefference a
     WHERE a.CompanyCode = @CompanyCode
       AND a.RefferenceType = @Reff
       AND a.Status != '0'
end
GO

if object_id('uspfn_OmTrSalesSoVinSend') is not null
	drop procedure uspfn_OmTrSalesSoVinSend
GO
CREATE procedure [dbo].[uspfn_OmTrSalesSoVinSend]   
 @LastUpdateDate datetime,  
 @Segment int  
as  
  
select * into #t1 from (  
select top (@Segment) *
  from omTrSalesSOVin  
 where LastUpdateDate is not null  
   and LastUpdateDate > @LastUpdateDate  
 order by LastUpdateDate asc )#t1  
  
select * from #t1  
  
  drop table #t1  
GO

if object_id('sp_updateOmTrInventQtyVehicleSO') is not null
	drop procedure sp_updateOmTrInventQtyVehicleSO
GO
create procedure [dbo].[sp_updateOmTrInventQtyVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear varchar(25),
	@ColourCode varchar(25),
	@WarehouseCode varchar(25),
	@Quantity varchar,
	@UserId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	--declare @Month int;
	--declare @Alocation int, @EndingOH int, @EndingAV int
	declare @dbMD varchar(25), @sqlStr varchar(max), @companyMD varchar(25),@branchMD varchar(25);
	
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @companyMD = (select companyMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @branchMD = (select unitBranchMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	
	--set @Month = (select FiscalPeriod from BAT_UAT.dbo.gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		declare @Month int;
		declare @Alocation int, @EndingOH int, @EndingAV int;
		
		set @Month = (select FiscalPeriod from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')
		
		if exists (select * from '+@dbMD+'.dbo.OmTrInventQtyVehicle 
		where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' )
	begin
		set @Alocation = (select Alocation + '+@Quantity+' from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month )
        set @EndingOH = (select BeginningOH + QtyIn - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month )
        set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month )
		
		if (@EndingAV < 0) select 1 as Status
		else begin
			update '+@dbMD+'.dbo.OmTrInventQtyVehicle
			set LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month

			select 2 as Status
		end
	end
	else select 0 as Status
	'
	--if exists (select * from BAT_UAT.dbo.OmTrInventQtyVehicle 
		--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode )
	--begin
		--set @Alocation = (select Alocation + @Quantity from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingOH = (select BeginningOH + QtyIn - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
		
		--if (@EndingAV < 0) select 1 as Status
		--else begin
			--update BAT_UAT.dbo.OmTrInventQtyVehicle
			--set LastUpdateBy = @userId, LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month

			--select 2 as Status
		--end
	--end
	--else select 0 as Status
--select @sqlStr
exec(@sqlStr)
end

GO



if object_id('sp_updateOmMstVehicleSO') is not null
	drop procedure sp_updateOmMstVehicleSO
GO
create procedure [dbo].[sp_updateOmMstVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@ChassisCode varchar(25),
	@ChassisNo varchar(25),
	@SONO varchar(25),
	@userId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	declare @dbMD varchar(25), @sqlStr varchar(max);
	
	--set @Month = (select FiscalPeriod from gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		if exists (select * from '+ @dbMD +'.dbo.omMstVehicle where ChassisCode = '''+@ChassisCode+''' and ChassisNo = '''+@ChassisNo+''')
		begin
			update '+ @dbMD +'.dbo.omMstVehicle
			set status=3, SONo = '''+@SONO+''', LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate()
			where ChassisCode = '''+@ChassisCode+''' and ChassisNo= '''+@ChassisNo+'''

			select convert(bit, 1) as Status
		end
		else select convert(bit, 0) as Status
	'
	
	--if exists (select * from BAT_UAT.dbo.omMstVehicle where ChassisCode = @ChassisCode and ChassisNo =@ChassisNo)
	--begin
		--update BAT_UAT.dbo.omMstVehicle
		--set status=3, SONo = @SONO, LastUpdateBy = @userId, LastUpdateDate =getdate()
		--where ChassisCode = @ChassisCode and ChassisNo=@ChassisNo

		--select convert(bit, 1) as Status
	--end
	--else select convert(bit, 0) as Status
	--select	@sqlStr
	exec(@sqlStr)
end

GO
if object_id('uspfn_SvTrnServiceSelectEstimationData') is not null
	drop procedure uspfn_SvTrnServiceSelectEstimationData
GO
create procedure [dbo].[uspfn_SvTrnServiceSelectEstimationData]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15),
	@ShowAll bit
AS

declare @Query varchar(max)
declare @Condition varchar(4000);

set @Condition = ' ORDER BY svTrnService.EstimationNo DESC';
if(@ShowAll = 0) begin
	set @Condition = ' AND svTrnService.ServiceStatus IN (0,1,2,3,4,5) ORDER BY svTrnService.EstimationNo DESC';
end 

set @Query = '
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + '' '' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + '' '' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + '' - '' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + '' - '' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus=''4'' then
            case when ''' + @ProductType + '''=''4W'' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '''' + custBill.Address2 + '''' + custBill.Address3 + '''' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = ''SERVSTAS''
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = ''' + @CompanyCode + '''
    AND svTrnService.BranchCode = ''' + @BranchCode + '''
 AND svTrnService.ServiceType in (''0'',''2'') and svTrnService.EstimationNo <> '''''
 + @Condition;
 
 exec (@Query); 
 GO
 if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
create procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        
  
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6006400001'  
--set @BranchCode = '6006400101'  
--set @ProductType = '4W'  
--set @ServiceNo = 43545  
--set @BillType = 'C'  
--set @PartNo = '99000-990C5-A03'  
--set @DemandQty = 2  
--set @PartSeq = -1  
--set @UserID = 'demo'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin  
  select * into #part from (  
  select   
    a.CostPrice   
   ,a.RetailPrice  
    from spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
  )#part  
    
  set @CostPrice = (select CostPrice from #part)  
  set @RetailPrice = (select RetailPrice from #part)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = @PartNo  
            and b.BillType = 'F'  
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from spMstItemPrice  
           where 1 = 1  
             and CompanyCode = @CompanyCode  
             and BranchCode = @BranchCode  
             and PartNo = @PartNo  
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq  
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    if (@DealerCode = 'SD')  
	 begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    @CompanyCode CompanyCode  
   ,@BranchCode BranchCode  
   ,@ProductType ProductType  
   ,@ServiceNo ServiceNo  
   ,a.PartNo  
   ,@PartSeqNew  
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,@DemandQty DemandQty  
   ,'0' SupplyQty  
   ,'0' ReturnQty  
   ,@CostPrice  
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,@BillType BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,@DiscPct  
   ,(select MechanicID from svTrnService where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ServiceNo = @ServiceNo)  
    from spMstItemPrice a,spMstItems b, #srv c  
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
        and b.CompanyCode = c.CompanyCode  
     and b.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
       
  --select   @CostPrice   
  if (@DealerCode = 'SD')  
  begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
  
  
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,'0'  
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 if (@DealerCode = 'SD')  
 begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  
GO
if object_id('usprpt_PostingMultiCompany4DocNo') is not null
	drop procedure usprpt_PostingMultiCompany4DocNo
GO
-- POSTING TRANSACTION MULTI COMPANY - DOCUMENT NUMBER
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------------------------
-- declare @DocNo varchar(15)  
-- execute [usprpt_PostingMultiCompany4DocNo] '6006400001','6006400131','SBTSBY','INV',@DocNo output
-- -------------------------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompany4DocNo]
	@Company	varchar(15),
	@Branch		varchar(15),
	@DBName		varchar(50),
	@DocID		varchar(15),
	@DocNo		varchar(15) output
AS	

--BEGIN TRANSACTION
--BEGIN TRY

BEGIN
 -- Document Number sequence
  --declare @Company		varchar(15)  = '6006400001'
  --declare @Branch			varchar(15)  = '6006400131'
  --declare @DBName			varchar(50)  = 'SBTSBY'
  --declare @DocID			varchar(15)  = 'INV'
  --declare @DocNo			varchar(15)
	declare @DocPrefix		varchar(15)
	declare @DocYear		integer
	declare @DocSeq			integer
	declare @sqlString		nvarchar(max)

	set @sqlString = N'select @DocPrefix=DocumentPrefix, @DocYear=DocumentYear, @DocSeq=DocumentSequence from '+@DBName+'..gnMstDocument ' +
						'where CompanyCode='''+@Company+''' and BranchCode='''+@Branch+''' and DocumentType='''+@DocID+''''

		execute sp_executesql @sqlString, 
			N'@DocPrefix varchar(15) output, @DocYear integer output, @DocSeq integer output', @DocPrefix output, @DocYear output, @DocSeq output

	set @DocSeq = @DocSeq + 1
	set @sqlString = 'update ' +@DBName+ '..gnMstDocument' +
						' set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
						' where CompanyCode=''' +@Company+ ''' and BranchCode=''' +@Branch+ ''' and DocumentType='''+@DocID+''''
		execute sp_executesql @sqlString 

	set @DocNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
					replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
/*
END TRY

BEGIN CATCH
    select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		   ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		rollback transaction
	select '0' [STATUS], 'Posting fail !!!' [INFO]
	return
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting Done !!!' [INFO]
		--rollback transaction
		commit transaction
	end
*/
END
GO

if object_id('sp_updateOmMstVehicleSO') is not null
	drop procedure sp_updateOmMstVehicleSO
GO
create procedure [dbo].[sp_updateOmMstVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@ChassisCode varchar(25),
	@ChassisNo varchar(25),
	@SONO varchar(25),
	@userId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	declare @dbMD varchar(25), @sqlStr varchar(max);
	
	--set @Month = (select FiscalPeriod from gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		if exists (select * from '+ @dbMD +'.dbo.omMstVehicle where ChassisCode = '''+@ChassisCode+''' and ChassisNo = '''+@ChassisNo+''')
		begin
			update '+ @dbMD +'.dbo.omMstVehicle
			set status=3, SONo = '''+@SONO+''', LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate()
			where ChassisCode = '''+@ChassisCode+''' and ChassisNo= '''+@ChassisNo+'''

			select convert(bit, 1) as Status
		end
		else select convert(bit, 0) as Status
	'
	
	--if exists (select * from BAT_UAT.dbo.omMstVehicle where ChassisCode = @ChassisCode and ChassisNo =@ChassisNo)
	--begin
		--update BAT_UAT.dbo.omMstVehicle
		--set status=3, SONo = @SONO, LastUpdateBy = @userId, LastUpdateDate =getdate()
		--where ChassisCode = @ChassisCode and ChassisNo=@ChassisNo

		--select convert(bit, 1) as Status
	--end
	--else select convert(bit, 0) as Status
	--select	@sqlStr
	exec(@sqlStr)
end


GO


if object_id('uspfn_GetVehicleInfo_New') is not null
	drop procedure uspfn_GetVehicleInfo_New
GO
create procedure [dbo].[uspfn_GetVehicleInfo_New]  
 @CompanyCode  varchar(20),  
 @BranchCode   varchar(20),  
 @ProductType  varchar(10),  
 @PoliceRegNo  varchar(20),  
 @ChassisCode  varchar(20),  
 @ChassisNo    varchar(10),  
 @BasicModel   varchar(20),  
 @JobOrderDate varchar(20),
 @CustomerCode varchar(20),
 @IsAllBranch  bit = 1
 
as  
  
select * into #t1 from (  
select 0 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , c.MechanicId+' - '+  
  (  
  select EmployeeName   
  from gnMstEmployee   
  where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and EmployeeID=c.MechanicId  
  ) MechanicId  
     , a.ForemanId  
     , b.OperationNo  
     , isnull(b.OperationHour, 0) as OperationQty  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.0) as OperationAmt  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.1) as TotalSrvAmount  
     , isnull(b.SharingTask, 0) SharingTask  
     , case when f.Description is null then (select TOP 1 Description   
    from svMstTask   
     where BasicModel = a.BasicModel  
      and OperationNo = b.OperationNo) else f.Description end Description  
    , isnull(g.EmployeeName, '') NameSA  
    , isnull(h.EmployeeName, '') NameForeman  
    , b.CreatedDate  
 from svTrnService a with(nolock, nowait)  
 left join svTrnSrvTask b with(nolock, nowait)  
   on b.CompanyCode = a.CompanyCode  
  and b.BranchCode  = a.BranchCode  
  and b.ProductType = a.ProductType  
  and b.ServiceNo   = a.ServiceNo  
 left join svTrnSrvMechanic c with(nolock, nowait)  
   on c.CompanyCode = b.CompanyCode  
  and c.BranchCode  = b.BranchCode  
  and c.ProductType = b.ProductType  
  and c.ServiceNo   = b.ServiceNo  
  and c.OperationNo = b.OperationNo  
 left join svTrnInvoice d with(nolock, nowait)  
   on d.CompanyCode = a.CompanyCode  
  and d.BranchCode  = a.BranchCode  
  and d.InvoiceNo   = a.InvoiceNo  
 left join svMstRefferenceService e with(nolock, nowait)  
   on e.CompanyCode    = a.CompanyCode  
  and e.RefferenceCode = a.jobType  
  and e.ProductType    = a.ProductType  
  and e.RefferenceType = 'JOBSTYPE'  
 left join svMstTask f with(nolock, nowait)  
   on f.CompanyCode = b.CompanyCode  
  and f.ProductType = b.ProductType  
  and f.OperationNo = b.OperationNo   
  and f.JobType     = a.JobType  
  and f.BasicModel  = a.BasicModel  
 left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
  and g.BranchCode = a.BranchCode   
  and g.EmployeeId = a.ForemanID  
 left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
  and h.BranchCode = a.BranchCode   
  and h.EmployeeId = a.MechanicID  
where a.JobOrderNo <> ''  
  and a.CompanyCode = @CompanyCode  
  and a.BranchCode  = @BranchCode  
  and a.ProductType = @ProductType  
  and a.ChassisCode = @ChassisCode  
  and a.ChassisNo   = @ChassisNo  
  and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
  and a.CustomerCode = @CustomerCode
) #t1  
  
--declare @t_spk_task as table(JobOrderNo varchar(20), OperationNo varchar(20))  
  
--insert into @t_spk_task   
--select a.JobOrderNo  
--  , isnull((  
--  select top 1 OperationNo from #t1  
--      where JobOrderNo = a.JobOrderNo  
--      order by CreatedDate   
--     ), '') OperationNo  
--  from #t1 a group by a.JobOrderNo  
  
insert into #t1  
select 1 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , ''  
     , ''  
     , b.PartNo  
     , (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) as OperationQty  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.0) as OperationAmt  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.1)
     , 1  
     , f.PartName  
     , isnull(g.EmployeeName, '') NameSA  
     , isnull(h.EmployeeName, '') NameForeman  
     , b.CreatedDate  
  from svTrnService a with(nolock, nowait)  
  left join svTrnSrvItem b with(nolock, nowait)  
    on b.CompanyCode = a.CompanyCode  
   and b.BranchCode  = a.BranchCode  
   and b.ProductType = a.ProductType  
   and b.ServiceNo   = a.ServiceNo  
  left join svTrnInvoice d with(nolock, nowait)  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode  = a.BranchCode  
   and d.InvoiceNo   = a.InvoiceNo  
  left join svMstRefferenceService e with(nolock, nowait)  
    on e.CompanyCode    = a.CompanyCode  
   and e.RefferenceCode = a.jobType  
   and e.ProductType    = a.ProductType  
   and e.RefferenceType = 'JOBSTYPE'  
  left join spMstItemInfo f with(nolock, nowait)  
    on f.CompanyCode = b.CompanyCode  
   and f.PartNo      = b.PartNo   
  left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
   and g.BranchCode = a.BranchCode   
   and g.EmployeeId = a.ForemanID  
  left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
   and h.BranchCode = a.BranchCode   
   and h.EmployeeId = a.MechanicID  
 where a.JobOrderNo <> ''  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and a.ProductType = @ProductType  
   and a.ChassisCode = @ChassisCode  
   and a.ChassisNo   = @ChassisNo  
   and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
   and a.CustomerCode = @CustomerCode
;with x as (  
select a.JobOrderNo, a.OperationNo, a.TotalSrvAmount, b.TotalSrvAmount TotalSrvAmountNew  
  from #t1 a  
  left join svTrnService b  
    on b.CompanyCode = @CompanyCode  
   and b.BranchCode  = @BranchCode  
   and b.ProductType = @ProductType  
   and b.JobOrderNo  = a.JobOrderNo  
)  
update x set TotalSrvAmount = TotalSrvAmountNew  
  
select BranchCode  
     , JobOrderNo  
     , SUM(OperationAmt)  TotalSrvAmount
from #t1 
where OperationQty > 0
group BY BranchCode, JobOrderNo, TotalSrvAmount
order by JobOrderNo
  
drop table #t1  
GO
if object_id('uspfn_GetVehicleInfo_SubNew') is not null
	drop procedure uspfn_GetVehicleInfo_SubNew
GO
  
CREATE procedure [dbo].[uspfn_GetVehicleInfo_SubNew]  
 @CompanyCode  varchar(20),  
 @BranchCode   varchar(20),  
 @ProductType  varchar(10),  
 @PoliceRegNo  varchar(20),  
 @ChassisCode  varchar(20),  
 @ChassisNo    varchar(10),  
 @BasicModel   varchar(20),  
 @JobOrderDate varchar(20),
 @CustomerCode varchar(20),
 @IsAllBranch  bit = 1,
 @JobOrderNo   varchar(20)
 
as  
  
select * into #t1 from (  
select 0 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , c.MechanicId+' - '+  
  (  
  select EmployeeName   
  from gnMstEmployee   
  where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and EmployeeID=c.MechanicId  
  ) MechanicId  
     , a.ForemanId  
     , b.OperationNo  
     , isnull(b.OperationHour, 0) as OperationQty  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.0) as OperationAmt  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.1) as TotalSrvAmount  
     , isnull(b.SharingTask, 0) SharingTask  
     , case when f.Description is null then (select TOP 1 Description   
    from svMstTask   
     where BasicModel = a.BasicModel  
      and OperationNo = b.OperationNo) else f.Description end Description  
    , isnull(g.EmployeeName, '') NameSA  
    , isnull(h.EmployeeName, '') NameForeman  
    , b.CreatedDate  
 from svTrnService a with(nolock, nowait)  
 left join svTrnSrvTask b with(nolock, nowait)  
   on b.CompanyCode = a.CompanyCode  
  and b.BranchCode  = a.BranchCode  
  and b.ProductType = a.ProductType  
  and b.ServiceNo   = a.ServiceNo  
 left join svTrnSrvMechanic c with(nolock, nowait)  
   on c.CompanyCode = b.CompanyCode  
  and c.BranchCode  = b.BranchCode  
  and c.ProductType = b.ProductType  
  and c.ServiceNo   = b.ServiceNo  
  and c.OperationNo = b.OperationNo  
 left join svTrnInvoice d with(nolock, nowait)  
   on d.CompanyCode = a.CompanyCode  
  and d.BranchCode  = a.BranchCode  
  and d.InvoiceNo   = a.InvoiceNo  
 left join svMstRefferenceService e with(nolock, nowait)  
   on e.CompanyCode    = a.CompanyCode  
  and e.RefferenceCode = a.jobType  
  and e.ProductType    = a.ProductType  
  and e.RefferenceType = 'JOBSTYPE'  
 left join svMstTask f with(nolock, nowait)  
   on f.CompanyCode = b.CompanyCode  
  and f.ProductType = b.ProductType  
  and f.OperationNo = b.OperationNo   
  and f.JobType     = a.JobType  
  and f.BasicModel  = a.BasicModel  
 left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
  and g.BranchCode = a.BranchCode   
  and g.EmployeeId = a.ForemanID  
 left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
  and h.BranchCode = a.BranchCode   
  and h.EmployeeId = a.MechanicID  
where a.JobOrderNo <> ''  
  and a.CompanyCode = @CompanyCode  
  and a.BranchCode  = @BranchCode  
  and a.ProductType = @ProductType  
  and a.ChassisCode = @ChassisCode  
  and a.ChassisNo   = @ChassisNo  
  and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
  and a.CustomerCode = @CustomerCode
  and a.JobOrderNo = @JobOrderNo
) #t1  
  
--declare @t_spk_task as table(JobOrderNo varchar(20), OperationNo varchar(20))  
  
--insert into @t_spk_task   
--select a.JobOrderNo  
--  , isnull((  
--  select top 1 OperationNo from #t1  
--      where JobOrderNo = a.JobOrderNo  
--      order by CreatedDate   
--     ), '') OperationNo  
--  from #t1 a group by a.JobOrderNo  
  
insert into #t1  
select 1 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , ''  
     , ''  
     , b.PartNo  
     , (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) as OperationQty  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.0) as OperationAmt  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.1)
     , 1  
     , f.PartName  
     , isnull(g.EmployeeName, '') NameSA  
     , isnull(h.EmployeeName, '') NameForeman  
     , b.CreatedDate  
  from svTrnService a with(nolock, nowait)  
  left join svTrnSrvItem b with(nolock, nowait)  
    on b.CompanyCode = a.CompanyCode  
   and b.BranchCode  = a.BranchCode  
   and b.ProductType = a.ProductType  
   and b.ServiceNo   = a.ServiceNo  
  left join svTrnInvoice d with(nolock, nowait)  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode  = a.BranchCode  
   and d.InvoiceNo   = a.InvoiceNo  
  left join svMstRefferenceService e with(nolock, nowait)  
    on e.CompanyCode    = a.CompanyCode  
   and e.RefferenceCode = a.jobType  
   and e.ProductType    = a.ProductType  
   and e.RefferenceType = 'JOBSTYPE'  
  left join spMstItemInfo f with(nolock, nowait)  
    on f.CompanyCode = b.CompanyCode  
   and f.PartNo      = b.PartNo   
  left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
   and g.BranchCode = a.BranchCode   
   and g.EmployeeId = a.ForemanID  
  left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
   and h.BranchCode = a.BranchCode   
   and h.EmployeeId = a.MechanicID  
 where a.JobOrderNo <> ''  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and a.ProductType = @ProductType  
   and a.ChassisCode = @ChassisCode  
   and a.ChassisNo   = @ChassisNo  
   and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
   and a.CustomerCode = @CustomerCode
   and a.JobOrderNo = @JobOrderNo
;with x as (  
select a.JobOrderNo, a.OperationNo, a.TotalSrvAmount, b.TotalSrvAmount TotalSrvAmountNew  
  from #t1 a  
  left join svTrnService b  
    on b.CompanyCode = @CompanyCode  
   and b.BranchCode  = @BranchCode  
   and b.ProductType = @ProductType  
   and b.JobOrderNo  = a.JobOrderNo  
)  
update x set TotalSrvAmount = TotalSrvAmountNew  
  
select *  
from #t1 
where OperationQty > 0
order by JobOrderNo, TaskPartSeq, CreatedDate
  
drop table #t1  
GO
if object_id('sp_updateOmTrInventQtyVehicleSO') is not null
	drop procedure sp_updateOmTrInventQtyVehicleSO
GO
create procedure [dbo].[sp_updateOmTrInventQtyVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear varchar(25),
	@ColourCode varchar(25),
	@WarehouseCode varchar(25),
	@Quantity varchar,
	@UserId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	--declare @Month int;
	--declare @Alocation int, @EndingOH int, @EndingAV int
	declare @dbMD varchar(25), @sqlStr varchar(max), @companyMD varchar(25),@branchMD varchar(25);
	
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @companyMD = (select companyMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @branchMD = (select unitBranchMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	
	--set @Month = (select FiscalPeriod from BAT_UAT.dbo.gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		declare @Month int, @Year int;
		declare @Alocation int, @EndingOH int, @EndingAV int;
		
		set @Month = (select FiscalPeriod from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')
		set @Year = (select FiscalYear from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')

		if exists (select * from '+@dbMD+'.dbo.OmTrInventQtyVehicle 
		where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' )
	begin
		set @Alocation = (select Alocation + '+@Quantity+' from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year )
        set @EndingOH = (select BeginningOH + QtyIn - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year)
        set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year)
		
		if (@EndingAV < 0) select 1 as Status
		else begin
			update '+@dbMD+'.dbo.OmTrInventQtyVehicle
			set LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month = @Month and Year = @Year

			select 2 as Status
		end
	end
	else select 0 as Status
	'
	--if exists (select * from BAT_UAT.dbo.OmTrInventQtyVehicle 
		--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode )
	--begin
		--set @Alocation = (select Alocation + @Quantity from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingOH = (select BeginningOH + QtyIn - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
		
		--if (@EndingAV < 0) select 1 as Status
		--else begin
			--update BAT_UAT.dbo.OmTrInventQtyVehicle
			--set LastUpdateBy = @userId, LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month

			--select 2 as Status
		--end
	--end
	--else select 0 as Status
--select @sqlStr
exec(@sqlStr)
end
GO

if object_id('uspfn_omSlsBPKLkpMdlYear') is not null
	drop procedure uspfn_omSlsBPKLkpMdlYear
GO
create procedure [dbo].[uspfn_omSlsBPKLkpMdlYear]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15),
 @SalesModelCode varchar(20)
)  
AS  
begin
	SELECT DISTINCT a.*
FROM omMstModelYear a
INNER JOIN OmTrSalesDODetail b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode
AND b.salesModelYear = a.SalesModelYear
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND a.Status = '1'
AND b.StatusBPK = '0'
AND b.DONo = @DONo
AND b.SalesModelCode = @SalesModelCode					 
end			
GO

if object_id('uspfn_omSlsDoBrowse') is not null
	drop procedure uspfn_omSlsDoBrowse
GO
CREATE procedure [dbo].[uspfn_omSlsDoBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS 

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 


BEGIN  
--exec uspfn_omSlsDoBrowse 6006410,600641001

 set @QRYTemp =  'SELECT Distinct a.DONo, a.DODate, d.SKPKNo, d.RefferenceNo, a.CustomerCode, c.CustomerName , a.ShipTo ,c.CustomerName as ShipToDsc,
            c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4 as Address,
            a.WareHouseCode, a.Expedition, a.SONo, f.CustomerName as ExpeditionDsc,a.Remark,
            CASE a.Status WHEN 0 THEN ''OPEN'' WHEN 1 THEN ''PRINT'' WHEN 2 THEN ''APPROVED'' WHEN 3 THEN ''CANCEL'' WHEN 9 THEN ''FINISH'' END as StatusDsc,a.Status
            , CASE ISNULL(b.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales, e.LookUpValueName as WrhDsc
            FROM omTrSalesDO a
            LEFT JOIN gnMstCustomerProfitCenter b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.CustomerCode = b.CustomerCode AND b.ProfitCenterCode = ''100''
            LEFT JOIN gnMstCustomer c ON a.CompanyCode = c.CompanyCode AND a.CustomerCode = c.CustomerCode
            LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND a.SONo = d.SONo      
            Left join ' + @DBMD + '.dbo.gnMstLookUpDtl e on a.WarehouseCode=e.LookUpValue and e.CodeID=''MPWH''
            LEFT JOIN gnMstCustomer f ON a.CompanyCode = c.CompanyCode AND a.Expedition = c.CustomerCode
            WHERE a.CompanyCode = ''' + @CompanyCode + '''
               AND a.BranchCode = ''' + @BranchCode + '''                             
            ORDER BY a.DONo DESC'

	exec (@QRYTemp);
end         

GO

if object_id('uspfn_omSlsDoUpdateSOVin') is not null
	drop procedure uspfn_omSlsDoUpdateSOVin
GO
CREATE procedure [dbo].[uspfn_omSlsDoUpdateSOVin]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15) 
)  
AS  

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode)

begin
--exec uspfn_omSlsDoUpdateSOVin 6006410,600641001,'DOS/14/000025'

set @QRYTemp =
'select a.*,b.SONo,c.ServiceBookNo,c.KeyNo from OmTrSalesDODetail a inner join OmTrSalesDO b 
	on a.companyCode = b.companyCode and a.branchCode = b.branchCode and a.DONo = b.DONo
	inner join ' + @DBMD + '.dbo.OmMstVehicle c on a.chassisCode = c.chassisCode and a.chassisNo = c.chassisNo
where a.companyCode = ''' + @CompanyCode + '''
and a.branchCode = ''' + @BranchCode + ''' and a.DONo = ''' + @DONo + ''''
				
	exec (@QRYTemp);	 
end	

GO
if object_id('uspfn_OmInquiryChassisDO') is not null
	drop procedure uspfn_OmInquiryChassisDO
GO
-- uspfn_OmInquiryChassisDO '6115202','611520200','SOA/11/000287','FU150 SCD',2011,'MH8BG41CABJ','COLO','00'
create procedure [dbo].[uspfn_OmInquiryChassisDO]
	@CompanyCode varchar(15)
	,@BranchCode varchar(15)
	,@SONo varchar(15)
	,@SalesModelCode varchar(30)
	--,@SalesModelYear int
	,@SalesModelYear varchar(15)
	,@ChassisCode varchar(15)
	,@RefType varchar(15)
	,@WarehouseCode varchar(15)

as

--declare @CompanyCode varchar(15)
--,@BranchCode varchar(15)
--,@SONo varchar(15)
--,@SalesModelCode varchar(15)
--,@SalesModelYear int
--,@ChassisCode varchar(15)
--,@RefType varchar(15)
--,@WarehouseCode varchar(15)
--
--select @CompanyCode='6115202'
--,@BranchCode='611520200'
--,@SONo='SOA/11/000287' 
--,@SalesModelCode='FU150 SCD' 
--,@SalesModelYear=2011
--,@ChassisCode='MH8BG41CABJ' 
--,@RefType='COLO'
--,@WarehouseCode='00'

declare 
@val as int,
@CompanyMD as varchar(15)
,@DBMD as varchar(15)
,@QryTemp as varchar(max)


DECLARE @columnVal TABLE (columnVal int);

set @val=0

set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 

--set @val= (
set @QryTemp = 'SELECT isnull(count (a.ChassisNo),0) jml
FROM omTrSalesSOVin a 
	INNER JOIN ' + @DBMD + '.dbo.omMstVehicle b ON 
		a.ChassisCode = b.ChassisCode 
		AND a.ChassisNo = b.ChassisNo 
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + ''' 
	AND a.SONo = ''' + @SONo + '''
	AND a.SalesModelCode = ''' + @SalesModelCode + ''' 
	AND a.SalesModelYear = ''' + @SalesModelYear + '''
	AND a.ChassisCode = ''' + @ChassisCode + '''
	and b.Status in (0,3)
	AND not exists 
	( 
		SELECT 1 
		FROM omTrSalesDODetail x
			inner join omTrSalesDO y on x.CompanyCode=y.CompanyCode and x.BranchCode=y.BranchCode
				and x.DONo=y.DONo
		WHERE x.CompanyCode = a.CompanyCode 
		AND x.BranchCode = a.BranchCode 
		AND x.SalesModelCode = a.SalesModelCode 
		AND x.ChassisCode = a.ChassisCode 
		and x.ChassisNo= a.ChassisNo
		and y.Status in (0,1)
	) 
	AND a.ChassisNo != 0 ' 

INSERT INTO @columnVal EXEC (@QryTemp);

set @val= (SELECT * FROM @columnval);

if @val = 0 
begin
	set @QryTemp =
	'SELECT 
		a.ChassisCode , a.ChassisNo , a.EngineCode , a.EngineNo , 
		a.ColourCode , b.RefferenceDesc1 AS ColourName 
	FROM ' + @DBMD + '.dbo.omMstVehicle a 
		LEFT JOIN ' + @DBMD + '.dbo.omMstRefference b ON b.CompanyCode = a.CompanyCode 
			AND b.RefferenceType = ''' + @RefType + ''' 
			AND b.RefferenceCode = a.ColourCode 
	WHERE a.CompanyCode = ''' + @CompanyMD + '''  
		AND a.SalesModelCode = ''' + @SalesModelCode + ''' 
		AND a.ChassisCode = ''' + @ChassisCode + ''' 
		AND a.Status = 0 
		AND isnull (a.SONo,'''') = ''''  
		AND a.WarehouseCode = ''' + @WarehouseCode + '''
		AND exists 
		( 
			SELECT z.colourCode FROM OmTrSalesSOModelColour z 
			WHERE z.companyCode = a.CompanyCode 
			AND z.BranchCode = ''' + @BranchCode + '''
			AND z.SONo= ''' + @SONo + ''' 
			AND z.SalesModelCode = a.SalesModelCode 
			AND z.SalesModelYear = a.SalesModelYear 
			and z.ColourCode= a.ColourCode
		)'
		Exec (@QryTemp);
end
else
begin
	set @QryTemp =
	'SELECT 
		a.ChassisNo , a.EngineCode , a.EngineNo , 
		a.ColourCode , b.RefferenceDesc1 AS ColourName 
	FROM omTrSalesSOVin a 
		LEFT JOIN omMstRefference b ON b.CompanyCode = a.CompanyCode 
			AND b.RefferenceType = ''' + @RefType + ''' 
			AND b.RefferenceCode = a.ColourCode 
		INNER JOIN ' + @DBMD + '.dbo.omMstVehicle c ON 
			a.ChassisCode = c.ChassisCode 
			AND a.ChassisNo = c.ChassisNo 
	WHERE a.CompanyCode = ''' + @CompanyCode + ''' 
		AND a.BranchCode = ''' + @BranchCode + '''  
		AND a.SONo = ''' + @SONo + ''' 
		AND a.SalesModelCode = ''' + @SalesModelCode + '''
		AND a.SalesModelYear = ''' + @SalesModelYear + ''' 
		AND a.ChassisCode = ''' + @ChassisCode + ''' 
		AND c.WarehouseCode = ''' + @WarehouseCode + '''
		and c.Status in (0,3)
		AND not exists
		( 
			SELECT 1 
			FROM omTrSalesDODetail x
				inner join omTrSalesDO y on x.CompanyCode=y.CompanyCode and x.BranchCode=y.BranchCode
					and x.DONo=y.DONo
			WHERE x.CompanyCode = a.CompanyCode 
			AND x.BranchCode = a.BranchCode 
			AND x.SalesModelCode = a.SalesModelCode 
			AND x.ChassisCode = a.ChassisCode 
			and x.ChassisNo= a.ChassisNo
			and y.Status in (0,1)
		)'
		Exec (@QryTemp);
end

GO
if object_id('uspfn_omSlsBPKBrowse') is not null
	drop procedure uspfn_omSlsBPKBrowse
GO
CREATE procedure [dbo].[uspfn_omSlsBPKBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
 
BEGIN  
--exec uspfn_omSlsBPKBrowse 6006410,600641001
 SET @QRYTemp = 
 'SELECT Distinct a.BPKNo, a.BPKDate, a.DONo, a.SONo, d.SKPKNo, d.RefferenceNo, a.CustomerCode  , c.CustomerName , a.ShipTo , e.CustomerName as ShipToDsc,
            c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4 as Address, a.WareHouseCode, f.LookUpValueName as WrhDsc, a.Expedition,g.SupplierName as ExpeditionDsc,a.Status,
            CASE a.Status WHEN ''0'' THEN ''Open'' WHEN ''1'' THEN ''Printed'' WHEN ''2'' THEN ''Approved'' WHEN ''3'' THEN ''Canceled'' WHEN ''9'' THEN ''Finished'' END as StatusDsc       
            ,b.SalesType, CASE ISNULL(b.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales, a.Remark
            FROM omTrSalesBPK a
            LEFT JOIN gnMstCustomerProfitCenter b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.CustomerCode = b.CustomerCode AND b.ProfitCenterCode = ''100''
            LEFT JOIN gnMstCustomer c ON a.CompanyCode = c.CompanyCode AND a.CustomerCode = c.CustomerCode
            LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND a.SONo = d.SONo
            LEFT JOIN gnMstCustomer e ON a.CompanyCode = e.CompanyCode AND a.shipto = e.CustomerCode
            Left join ' + @DBMD + '.dbo.gnMstLookUpDtl f on f.CompanyCode = ''' + @CompanyMD + ''' and a.WarehouseCode=f.LookUpValue and f.CodeID=''MPWH''
            LEFT JOIN gnMstSupplier g ON a.CompanyCode = g.CompanyCode AND a.Expedition = g.SupplierCode
            WHERE a.CompanyCode = ''' + @CompanyCode + '''
               AND a.BranchCode = ''' + @BranchCode + '''                             
            ORDER BY a.BPKNo DESC'

	Exec (@QRYTemp);
End


GO

if object_id('uspfn_omSlsBPKLkpDO') is not null
	drop procedure uspfn_omSlsBPKLkpDO
GO
CREATE procedure [dbo].[uspfn_omSlsBPKLkpDO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @ProfitCenterCode varchar(15)
 )  
AS 

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
 
BEGIN  
-- exec uspfn_omSlsBPKLkpDO  6006410,600641001,'100'
SET @QRYTemp =
	'SELECT Distinct a.DONo, a.DODate, a.SONo, g.SKPKNo, g.RefferenceNo, a.CustomerCode ,c.CustomerName, 
            c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4 as Address,
            a.ShipTo, c1.CustomerName as ShipName, 
            a.WareHouseCode, f.LookUpValueName as WareHouseName, a.Expedition, e.SupplierName as ExpeditionName,
            b.SalesType,(CASE ISNULL(b.SalesType, 0) WHEN 0 THEN ''WholeSales'' ELSE ''Direct'' END) AS SalesTypeDsc, a.Remark
            FROM omTrSalesDO a
            LEFT JOIN gnMstCustomerProfitCenter b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.CustomerCode = a.CustomerCode
			LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.CustomerCode
            LEFT JOIN gnMstCustomer c1 ON c1.CompanyCode = a.CompanyCode AND c1.CustomerCode = a.ShipTo
			LEFT JOIN  omTrSalesDODetail d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode AND d.DoNo = a.DoNo
			LEFT JOIN gnMstSupplier e ON e.CompanyCode = a.CompanyCode AND e.SupplierCode = a.Expedition 
			LEFT JOIN ' + @DBMD + '.dbo.gnMstLookUpDtl f ON f.CompanyCode = ''' + @CompanyMD + ''' AND f.LookUpValue = a.WareHouseCode and f.CodeID =''MPWH''
            LEFT JOIN omTrSalesSO g ON a.CompanyCode = g.CompanyCode AND a.BranchCode = g.BranchCode AND a.SONo = g.SONo            
            WHERE a.Status = ''2''
            and d.StatusBPK <> ''1''  
            AND a.CompanyCode = ''' + @CompanyCode + '''
            AND b.BranchCode = ''' + @BranchCode + '''
			AND b.ProfitCenterCode = ''' + @ProfitCenterCode + '''                   
            ORDER BY a.DONo ASC'

	EXEC (@QRYTemp);
END      
GO

if object_id('uspfn_omSlsBPKLkpMdlCode') is not null
	drop procedure uspfn_omSlsBPKLkpMdlCode
GO
create procedure [dbo].[uspfn_omSlsBPKLkpMdlCode]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpMdlCode 6006410,600641001,''
SELECT DISTINCT  
	a.CompanyCode
	,a.SalesModelCode
	,a.SalesModelDesc
	,a.FakturPolisiDesc
	,a.EngineCode
	,a.PpnBmCodeBuy
	,a.PpnBmPctBuy
	,a.PpnBmCodeSell
	,a.PpnBmPctSell
	,a.PpnBmCodePrincipal
	,a.PpnBmPctPrincipal
	,a.Remark
	,a.BasicModel
	,a.TechnicalModelCode
	,a.ProductType
	,a.TransmissionType
	,a.IsChassis
	,a.IsCbu
	,a.SMCModelCode
	,a.GroupCode
	,a.TypeCode
	,a.CylinderCapacity
	,a.fuel
	,a.ModelPrincipal
	,a.Specification
	,a.ModelLine
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.IsLocked
	,a.LockedBy
	,a.LockedDate
	,a.MarketModelCode
	,a.GroupMarketModel
	,a.ColumnMarketModel
FROM omMstModel a
INNER JOIN OmTrSalesDODetail b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND b.DONo = @DONo
AND b.StatusBPK = '0'
ORDER BY a.SalesModelCode ASC
end    
GO

if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
create procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN 

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001748'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '0028729'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'

--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
inner join '+ @DbMD+'..spMstItemPrice b ON a.CompanyCode = '''+@CompanyCode +''' AND a.BranchCode ='''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

--select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================
	declare @md bit
	set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

	if(@md = 0) begin
		declare @tmpSDMovement table(
			CompanyCode varchar(15)
		);
		
		set @Query = 'select distinct CompanyCode from ' + @DbMD +'..svSDMovement 
			where CompanyCode = ''' + @CompanyMD + '''
			 ' + ' and BranchCode = ''' + @BranchMD + '''
			 ' + ' and DocNo = ''' + @JobOrderNo + '''';
		
		
		insert into @tmpSDMovement exec(@Query);	
		if exists (select * from @tmpSDMovement) begin	  
			set @Query ='insert into '+ @DbMD +'..svSDMovement
			select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
			, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
			a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct, a.CostPrice, a.RetailPrice, b.TypeOfGoods
			, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
			,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
			,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
			from spTrnSORDDtl a 
			join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
			and a.BranchCode = b.BranchCode 
			and a.DocNo = b.DocNo
			join '+ @DbMD +'..spmstitemprice md
			on md.CompanyCode = '''+ @CompanyMD +'''
			and md.branchcode = '''+ @BranchMD +'''
			and md.PartNo = a.PartNo
			where a.ReferenceNo = '''+ @JobOrderNo +''''

			exec (@Query)
			--print (@QUERY)
		end 
	end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO

if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
create procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN 

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001748'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '0028729'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'

--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
inner join '+ @DbMD+'..spMstItemPrice b ON a.CompanyCode = '''+@CompanyCode +''' AND a.BranchCode ='''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

--select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================
	declare @md bit
	set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

	if(@md = 0) begin
		declare @tmpSDMovement table(
			CompanyCode varchar(15)
		);
		
		set @Query = 'select distinct CompanyCode from ' + @DbMD +'..svSDMovement 
			where CompanyCode = ''' + @CompanyMD + '''
			 ' + ' and BranchCode = ''' + @BranchMD + '''
			 ' + ' and DocNo = ''' + @JobOrderNo + '''';
		
		
		insert into @tmpSDMovement exec(@Query);	
		if exists (select * from @tmpSDMovement) begin	  
			set @Query ='insert into '+ @DbMD +'..svSDMovement
			select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
			, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
			a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct, a.CostPrice, a.RetailPrice, b.TypeOfGoods
			, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
			,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
			,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
			from spTrnSORDDtl a 
			join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
			and a.BranchCode = b.BranchCode 
			and a.DocNo = b.DocNo
			join '+ @DbMD +'..spmstitemprice md
			on md.CompanyCode = '''+ @CompanyMD +'''
			and md.branchcode = '''+ @BranchMD +'''
			and md.PartNo = a.PartNo
			where a.ReferenceNo = '''+ @JobOrderNo +''''

			exec (@Query)
			--print (@QUERY)
		end 
	end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO
if object_id('uspfn_omSoLkp') is not null
	drop procedure uspfn_omSoLkp
GO
create procedure [dbo].[uspfn_omSoLkp] 
(
	@CompanyCode varchar(25),
	@BranchCode varchar(25)
)
as
 
 -- exec uspfn_omSoLkp '6159401000','6159401001'
 
 declare @DbMD as varchar(15)  
 declare @Sql as varchar(max) 
 declare @ssql as varchar(max) 
 
 set @DbMD = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 


 set @ssql='select * from gnMstCompanyMapping '

set @Sql= 'SELECT a.CompanyCode, a.BranchCode,
                a.SONo, a.SODate, a.SalesType, a.CustomerCode, a.TOPCode, a.Installment, a.FinalPaymentDate,
                a.TOPDays, a.BillTo, a.ShipTo, a.ProspectNo, a.SKPKNo, a.Salesman, a.WareHouseCode, a.isLeasing, 
                a.LeasingCo, a.GroupPriceCode, a.Insurance, a.PaymentType, a.PrePaymentAmt, a.PrePaymentBy, 
                a.CommissionBy, a.CommissionAmt, a.PONo, a.ContractNo, a.Remark, a.Status,
                a.SalesCoordinator, a.SalesHead, a.BranchManager, a.RefferenceNo,
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then '''' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDates, 
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
                CASE convert(varchar, a.RequestDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RequestDate, 111) end as RequestDate,
                CASE convert(varchar, a.PrePaymentDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.PrePaymentDate, 111) end as PrePaymentDate,
                e.Address1 + '' '' + e.Address2 + '' '' + e.Address3 + '' '' + e.Address4 as Address,
                case when year(a.RefferenceDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC1,
                case when a.SKPKNo <> '''' then convert(bit,1) else convert(bit,0) end isC2,
                case when year(a.PrePaymentDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC3,
                case when year(a.RequestDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC4,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS CustomerName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID) as SalesmanName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.Shipto = b.CustomerCode)  
						AS ShipName,
                (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.LeasingCo = b.CustomerCode)  
						AS LeasingCoName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.PrePaymentby = c.EmployeeID) as PrePaymentName,
				(SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode) AS GroupPriceName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS BillName,
				(SELECT b.lookupvaluename
                        FROM '+@DbMD+'..gnMstLookUpDtl b
                        WHERE a.WareHouseCode = b.LookUpValue
						AND a.WareHouseCode = b.LookUpValue and CodeID =''MPWH'')  
						AS WareHouseName,
                (a.CustomerCode
                    + '' || ''
                    + (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode))  
						AS Customer, 
                (a.Salesman
                    + '' || ''
                    + (SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID))  AS Sales, 
                (a.GroupPriceCode
                    + '' || ''
                    + (SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPrice, 
                CASE a.Status when 0 then ''OPEN''
                                when 1 then ''PRINTED''
                                when 2 then ''APPROVED''
                                when 3 then ''DELETED''
                                when 4 then ''REJECTED''
                                when 9 then ''FINISHED'' END as Stat
                , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales
                ,(select distinct x.TipeKendaraan
                    from pmKDP x
	                    left join gnMstEmployee b on x.CompanyCode=b.CompanyCode and x.BranchCode=b.BranchCode
		                    and x.EmployeeID=b.EmployeeID
	                    left join omTrSalesSO c on c.CompanyCode = x.CompanyCode 
		                    and c.BranchCode = x.BranchCode
		                    and c.ProspectNo = x.InquiryNumber
	                    left join omTrSalesInvoice d on d.CompanyCode = x.CompanyCode
		                    and d.BranchCode = x.BranchCode
		                    and d.SONo = c.SONo
	                    left join omTrSalesReturn e on e.CompanyCode = x.CompanyCode
		                    and e.BranchCode = x.BranchCode
		                    and e.InvoiceNo = d.InvoiceNo
                    where x.InquiryNumber=a.ProspectNo) as VehicleType
                FROM omTrSalesSO a
                INNER JOIN gnMstCustomer e
                ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode
				order by a.SONo desc
				'
--print @Sql

exec (@Sql)
GO
if object_id('uspfn_spSelectPickingSlip') is not null
	drop procedure uspfn_spSelectPickingSlip
GO
create procedure [dbo].[uspfn_spSelectPickingSlip] @CompanyCode varchar(15), @BranchCode varchar(15), 
@ProductType varchar(4), @JobOrderNo varchar(25)
as
SELECT * INTO #t1 FROM (
                SELECT
                    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
                    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
                    d.PickedBy
                FROM
                    svTrnService a
                LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
	                AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
                LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
	                AND c.DocNo = b.SupplySlipNo
                LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
	                AND d.PickingSlipNo = c.ExPickingSlipNo
                LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
	                AND e.PickingSlipNo = d.PickingSlipNo
                LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
                    AND f.LookUpValue = c.TransType
                LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
                    AND g.PickingSlipNo = d.PickingSlipNo
                WHERE 
                    a.CompanyCode     = @CompanyCode
                    AND a.BranchCode  = @BranchCode
                    AND a.ProductType = @ProductType
                    AND a.jobOrderNo  = @JobOrderNo
                    AND b.SupplySlipNo <> ''
                    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		                   AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
                    AND d.Status < 2
            )#t1
            SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
            DROP TABLE #t1
GO
if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
create procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        
  
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6006400001'  
--set @BranchCode = '6006400101'  
--set @ProductType = '4W'  
--set @ServiceNo = 43545  
--set @BillType = 'C'  
--set @PartNo = '99000-990C5-A03'  
--set @DemandQty = 2  
--set @PartSeq = -1  
--set @UserID = 'demo'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin  
  select * into #part from (  
  select   
    a.CostPrice   
   ,a.RetailPrice  
    from spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
  )#part  
    
  set @CostPrice = (select CostPrice from #part)  
  set @RetailPrice = (select RetailPrice from #part)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = @PartNo  
            and b.BillType = 'F'  
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from spMstItemPrice  
           where 1 = 1  
             and CompanyCode = @CompanyCode  
             and BranchCode = @BranchCode  
             and PartNo = @PartNo  
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq  
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    --if (@DealerCode = 'SD')  
	 --begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  --end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    @CompanyCode CompanyCode  
   ,@BranchCode BranchCode  
   ,@ProductType ProductType  
   ,@ServiceNo ServiceNo  
   ,a.PartNo  
   ,@PartSeqNew  
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,@DemandQty DemandQty  
   ,'0' SupplyQty  
   ,'0' ReturnQty  
   ,@CostPrice  
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,@BillType BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,@DiscPct  
   ,(select MechanicID from svTrnService where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ServiceNo = @ServiceNo)  
    from spMstItemPrice a,spMstItems b, #srv c  
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
        and b.CompanyCode = c.CompanyCode  
     and b.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
       
  --select   @CostPrice   
  --if (@DealerCode = 'SD')  
  --begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
   
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,'0'  
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  --end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 --if (@DealerCode = 'SD')  
 --begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 --end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  
GO
if object_id('uspfn_spSelectPickingSlipLmp') is not null
	drop procedure uspfn_spSelectPickingSlipLmp
GO
create procedure [dbo].[uspfn_spSelectPickingSlipLmp] @CompanyCode varchar(15), @BranchCode varchar(15), 
@ProductType varchar(4), @JobOrderNo varchar(25)
as
SELECT * INTO #t1 FROM (
                SELECT
                    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
                    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
                    d.PickedBy
                FROM
                    svTrnService a
                LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
	                AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
                LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
	                AND c.DocNo = b.SupplySlipNo
                LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
	                AND d.PickingSlipNo = c.ExPickingSlipNo
                LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
	                AND e.PickingSlipNo = d.PickingSlipNo
                LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
                    AND f.LookUpValue = c.TransType
                LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
                    AND g.PickingSlipNo = d.PickingSlipNo
                WHERE 
                    a.CompanyCode     = @CompanyCode
                    AND a.BranchCode  = @BranchCode
                    AND a.ProductType = @ProductType
                    AND a.jobOrderNo  = @JobOrderNo
                    AND b.SupplySlipNo <> ''
                    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		                   AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
                    AND d.Status <= 2
            )#t1
            SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
            DROP TABLE #t1
GO
if object_id('SvCustomerVehicleView') is not null
	drop view SvCustomerVehicleView
GO
create view [dbo].[SvCustomerVehicleView]
as 

select distinct a.CompanyCode
,e.BranchCode
, (a.ChassisCode + convert(varchar, a.ChassisNo)) as VinNo
,a.PoliceRegNo
,isnull(b.CustomerName, '') CustomerName
,rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
,a.BasicModel
,a.ChassisNo
,a.ChassisCode
,a.EngineCode
,a.EngineNo
,a.TransmissionType
,a.ServiceBookNo
,case a.LastServiceDate when ('19000101') then '' else a.LastServiceDate end LastServiceDate
,a.LastJobType
, a.ColourCode
, a.CustomerCode
from svMstCustomerVehicle a
left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode	
inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
where a.IsActive = 1 and e.ProfitCenterCode = '200'

--select distinct a.CompanyCode 
--	 , c.BranchCode
--	 , a.ChassisCode
--     , a.ChassisNo
--     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as VinNo
--     , a.BasicModel
--     , a.PoliceRegNo
--     , a.ServiceBookNo
--     , a.CustomerCode
--     , b.CustomerName
--     , a.ContractNo
--     , a.IsContractStatus
--     , case d.ContractDate
--         when ('19000101') then null
--        else d.ContractDate
--       end ContractDate
--     , a.ClubNo
--     , case a.ClubDateFinish
--         when ('19000101') then null
--         else a.ClubDateFinish
--       end ClubDateFinish
--     , a.IsClubStatus
--     , b.Address1
--     , b.Address2
--     , b.Address3 
--     , b.Address4
--     , b.CityCode
--     , e.LookUpValueName as CityName
--     , b.PhoneNo
--     , b.HPNo
--     , b.FaxNo
--     , a.TransmissionType
--     , a.TechnicalModelCode
--     , case a.LastServiceDate
--         when ('19000101') then null
--         else a.LastServiceDate
--       end LastServiceDate
--     , a.LastJobType
--     , a.ColourCode
--     , a.EngineCode
--     , a.EngineNo
--     , c.MaterialDiscPct
--     , c.PartDiscPct
--     , c.LaborDiscPct
--  from svMstCustomerVehicle a
--  left join gnMstCustomer b
--    on b.CompanyCode = a.CompanyCode
--   and b.CustomerCode = a.CustomerCode
-- inner join gnMstCustomerProfitCenter c
--    on c.CustomerCode = b.CustomerCode 
--   and c.CompanyCode = b.CompanyCode
--   and c.ProfitCenterCode = '200'
--	LEFT JOIN svMstContract d
--	ON d.CompanyCode = b.CompanyCode
--	AND d.CustomerCode = b.CustomerCode
--	LEFT JOIN gnMstLookUpDtl e
--	ON e.CompanyCode = b.CompanyCode
--	AND e.CodeID = 'CITY'
--	AND e.LookUpValue = b.CityCode
-- where isnull(a.BasicModel, '') <> ''
 
go

if object_id('uspfn_CheckChassisNoMatch') is not null
	drop procedure uspfn_CheckChassisNoMatch
GO
create procedure [dbo].[uspfn_CheckChassisNoMatch]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SONumber varchar(50)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;

	set @CountSOVin = (
		select count(a.SONo)
		  from omTrSalesSOVin a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and a.SONo = @SONumber
		   and a.ChassisNo != 0
	);

	set @CountSOModel = (
		select SUM(QuantitySO) 
		  from omTrSalesSOModel a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and a.SONo = @SONumber
	);

	if @CountSOModel = 0
		select convert(bit, 0) as Status;
	if @CountSOModel = @CountSOVin
		select convert(bit, 1) as Status;
	else
		select convert(bit, 0) as Status
end
GO

if object_id('uspfn_GenerateBPSLampiranNew') is not null
	drop procedure uspfn_GenerateBPSLampiranNew
GO
create procedure [dbo].[uspfn_GenerateBPSLampiranNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--DECLARE	@CompanyCode	VARCHAR(MAX),
--		@BranchCode		VARCHAR(MAX),
--		@JobOrderNo		VARCHAR(MAX),
--		@ProductType	VARCHAR(MAX),
--		@CustomerCode	VARCHAR(MAX),
--		@UserID			VARCHAR(MAX),
--		@PickedBy		VARCHAR(MAX)

--SET	@CompanyCode	= '6156401000'
--SET	@BranchCode		= '6156401001'
--SET	@JobOrderNo		= 'SPK/15/001666'
--SET	@ProductType	= '4W'
--SET	@CustomerCode	= '0032710'
--SET	@UserID			= 'ga'
--SET	@PickedBy		= '0004'
		
--exec uspfn_GenerateBPSLampiranNew '6006400001','6006400101','SPK/14/101625','4W','JKT-1852626','ga','00001'

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement

DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl

UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================
SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	

--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	DECLARE @CompanyMD AS VARCHAR(15)
	DECLARE @BranchMD AS VARCHAR(15)
	DECLARE @WarehouseMD AS VARCHAR(15)

	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @validString varchar(max)

declare @valid_2 table(
PartNo varchar(15),
QtyValidSR NUMERIC(18,2),
QtyValidOnhand NUMERIC(18,2)
)
    set @validString ='SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM '+ @DbMD +'..SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = '''+ @CompanyMD +'''
		AND a.BranchCode = '''+ @BranchMD+'''
		AND b.PickingSlipNo = '''+@PickingSlipNo+'''
		--AND a.CompanyCode = b.CompanyCode
		--AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo'
	
	--print(@validString)
	insert into @valid_2 exec(@validString)

select * from @valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM @valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM @valid_2 WHERE QtyValidOnhand < 0),0)
	select @Allocation_SRValid
	select @Onhand_SRValid

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		
		CLOSE db_cursor
		DEALLOCATE db_cursor 
		
		DROP TABLE #TempPickingSlipDtl
		DROP TABLE #TempPickingSlipHdr
		
		RAISERROR (@errmsg,16,1);
		
		RETURN
	END
--===============================================================================================================================

--DECLARE @DbMD AS VARCHAR(15)
--SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'UPDATE '+@DbMD+'..SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM ' + @DbMD + '..SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
UPDATE '+ @DbMD +'..SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
FROM ' + @DbMD + '..SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND a.WarehouseCode = ' + ''''+@WarehouseMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo'

EXEC(@query)
	--print(@query)
--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

--===============================================================================================================================
-- INSERT INTO svSDMovement
--===============================================================================================================================
	set @Query = '
	insert into ' + @DbMD + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq
	, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice
	, TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD
	, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus
	, ProcessDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)  
	select h.CompanyCode, h.BranchCode, h.LmpNo, h.LmpDate, d.PartNo, ROW_NUMBER() OVER(Order by d.LmpNo)
	,d.WarehouseCode, d.QtyBill, 0, d.DiscPct, d.CostPrice, d.RetailPrice
	,h.TypeOfGoods, ''' + @CompanyMD + ''', ''' + @BranchMD + ''', ''' + @WarehouseMD + ''', d.RetailPriceInclTax, d.RetailPrice, 
	d.CostPrice,''x'', d.ProductType,''300'', ''0'',''0'',''' + convert(varchar, GETDATE()) + ''',''' + @UserID + ''',''' +
	  convert(varchar, GETDATE()) + ''',''' +  @UserID + ''',''' +  convert(varchar, GETDATE()) + '''
	 from spTrnSLmpDtl d inner join spTrnSLmpHdr h on h.LmpNo = d.LmpNo  
	  where 1 = 1   
		and d.CompanyCode = ''' + @CompanyCode + ''' 
		and d.BranchCode  = ''' + @BranchCode  + '''
		and d.ProductType = ''' + @ProductType  + '''
		and d.LmpNo = ''' + @TempLmpNo + '''';
	
	exec(@Query);

FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode


--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
end

--rollback tran
GO
if object_id('uspfn_omsdmovementsoinsert') is not null
	drop procedure uspfn_omsdmovementsoinsert
GO
create procedure uspfn_omsdmovementsoinsert
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@SONo as varchar(15)
as
--exec spfn_omsdmovementsoinsert '6159401000','6159401001','SOR/15/000233'
declare @sql varchar(max);

set @sql='insert into '+dbo.GetDbMD(@CompanyCode,@BranchCode)+'..omSDMovement
   select a.CompanyCode,a.BranchCode,a.SONo,a.SODate,b.SOSeq,b.SalesModelCode,b.SalesModelYear,
   b.ChassisCode,b.ChassisNo,b.enginecode, b.EngineNo,b.ColourCode,a.WareHouseCode,a.CustomerCode,''-'',
   dbo.getcompanymd(a.CompanyCode,a.BranchCode),dbo.GetBranchMD(a.companycode,a.branchcode),
   dbo.GetWarehouseMD(a.companyCode,a.branchcode),a.Status,''0'',GETDATE(),a.ApproveBy,GETDATE(),a.ApproveBy,GETDATE()   
   from omTrSalesSO a inner join omTrSalesSOVin b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode and a.SONo=b.SONo
   where a.companycode='+@CompanyCode+' and a.branchcode='+@BranchCode+' and a.SONo='''+@SONo+'''';
--print @sql;
exec(@sql)
GO
if object_id('uspfn_SvTrnServiceSelectBookingData') is not null
	drop procedure uspfn_SvTrnServiceSelectBookingData
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSelectBookingData]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15),
	@ShowAll bit
AS

declare @Query varchar(max)
declare @Condition varchar(4000);

set @Condition = ' ORDER BY svTrnService.BookingNo DESC';
if(@ShowAll = 0) begin
	set @Condition = ' AND svTrnService.ServiceStatus IN (0,1,2,3,4,5) ORDER BY svTrnService.BookingNo DESC';
end 

set @Query = '
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + '' '' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + '' '' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + '' - '' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + '' - '' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus=''4'' then
            case when ''' + @ProductType + '''=''4W'' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '''' + custBill.Address2 + '''' + custBill.Address3 + '''' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = ''SERVSTAS''
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = ''' + @CompanyCode + '''
    AND svTrnService.BranchCode = ''' + @BranchCode + '''
 AND svTrnService.ServiceType =''1'''
 + @Condition;
 
 exec (@Query); 
 GO
 if object_id('uspfn_gnCheckPostingStatus') is not null
	drop procedure uspfn_gnCheckPostingStatus
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN 

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001748'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '0028729'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'

--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
inner join '+ @DbMD+'..spMstItemPrice b ON a.CompanyCode = '''+@CompanyCode +''' AND a.BranchCode ='''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

--select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================

declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


if(@md = 0)
begin

set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct, a.CostPrice, a.RetailPrice, b.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from spTrnSORDDtl a 
join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
and a.BranchCode = b.BranchCode 
and a.DocNo = b.DocNo
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ReferenceNo = '''+ @JobOrderNo +''''

exec (@Query)
--print (@QUERY)

end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO
-- POSTING TRANSACTION MULTI COMPANY - SALES RETURN
-- ------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -----------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySalesReturn] '6006400001','2014/11/30','0'
-- -----------------------------------------------------------------------------

if object_id('usprpt_PostingMultiCompanySalesReturn') is not null
	drop procedure usprpt_PostingMultiCompanySalesReturn
GO
CREATE procedure [dbo].[usprpt_PostingMultiCompanySalesReturn]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN

	  --declare @CompanyCode			varchar(15) = '6006400001'
	  --declare @PostingDate			datetime	= '2014/04/30'
	  --declare @Status					varchar(1)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode			varchar(15) --= '6006400001'
		declare @curBranchCode			varchar(15) --= '6006400131'
		declare @curDocNo				varchar(15)	--= 'IU131/14/100010'
		declare @curDocDate				datetime    --= '2015/03/08'
		declare @curSeq					int			
		declare @curSalesModelCode		varchar(20)	
		declare @curSalesModelYear		numeric(4,0)	
		declare @curChassisCode			varchar(15)	
		declare @curChassisNo			numeric(10,0) 
		declare @curEngineCode			varchar(15)	
		declare @curEngineNo			numeric(10,0) 
		declare @curColourCode			varchar(15)	
		declare @curWarehouseCode		varchar(15)	
		declare @curCustomerCode		varchar(15)	
		declare @curQtyFlag				char(1)		
		declare @curCompanyMD			varchar(15)
		declare @curBranchMD			varchar(15)	
		declare @curWarehouseMD			varchar(15)	
		declare @curStatus				char(1)		
		declare @curProcessStatus		char(1)		
		declare @curProcessDate			datetime		
		declare @curCreatedBy			varchar(15)	
		declare @curCreatedDate			datetime		
		declare @curLastUpdateBy		varchar(15)	
		declare @curLastUpdateDate		datetime
		declare @sqlString				nvarchar(max)

	 -- MD
		declare @HPPNo					varchar(15)
		declare @INVNo					varchar(15)
		declare @FPJNo					varchar(25)
		declare @BPKNo					varchar(15)
		declare @BPUNo					varchar(15)
		declare @HPPDate				datetime
		declare @INVDate				datetime
		declare @FPJDate				datetime
	 -- SD
		declare @VTONo					varchar(15)
		declare @VTINo					varchar(15)
		declare @RTPNo					varchar(15)
		declare @RTSNo					varchar(15)

		declare @WHFrom					varchar(15)
		declare @WHTo					varchar(15)
		declare @RemarkHdr				varchar(100)
		declare @RemarkDtl				varchar(100)
		declare @BeforeDiscDPP			numeric(18,0)
		declare @DiscExcludePPn			numeric(18,0)
		declare @AfterDiscDPP			numeric(18,0)
		declare @AfterDiscPPn			numeric(18,0)
		declare @AfterDiscPPnBM			numeric(18,0)
		declare @AfterDiscTotal			numeric(18,0)
		declare @OthersDPP				numeric(18,0)
		declare @OthersPPn				numeric(18,0)

		declare @DBName					varchar(50)
		declare @DBNameMD				varchar(50)
		declare @CentralBranch			varchar(15)
		declare @SeqNo					integer
		declare @swCompanyCode			varchar(15)  = ' '
		declare @swBranchCode			varchar(15)  = ' '
		declare @swDocNo 				varchar(15)  = ' '
		declare @CurrentDate			varchar(100) = convert(varchar,getdate(),121)

        declare curomSDMovement cursor for
			select sd.* 
			  from omSDMovement sd, gnMstDocument doc
             where sd.CompanyCode      =doc.CompanyCode
			   and sd.BranchCode       =doc.BranchCode
			   and doc.DocumentType    ='RTS' 
			   and doc.ProfitCenterCode='100'
			   and left(sd.DocNo,len(doc.DocumentPrefix))=doc.DocumentPrefix
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by sd.CompanyCode, sd.BranchCode, sd.DocNo, sd.SalesModelCode, 
					  sd.SalesModelYear, sd.ColourCode, sd.ChassisCode, sd.ChassisNo
		open curomSDMovement

		fetch next from curomSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
				   @curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
				   @curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
				   @curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
				   @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
				  
		while (@@FETCH_STATUS =0)
			begin

			 -- MD Database & SD Database from gnMstCompanyMapping
				select @DBNameMD=DBMD, @DBName=DBName from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode

			 -- Centralize unit Purchasing & Transfer for SBT, SMG, SIT, SST dealer
				set @sqlString = N'select @CentralBranch=BranchCode from ' +@DBName+ '..gnMstOrganizationDtl ' +  
								   'where CompanyCode=''' +@curCompanyCode+ ''' and isBranch=''0'''
					execute sp_executesql @sqlString, 
							N'@CentralBranch varchar(15) output', @CentralBranch output
										
			 -- SD: Collect HPP, FPJ & INV (No & Date) information from omTrPurchaseHPP, omTrPurchaseHPPSubDetail & omTrSalesInvoice
				set @sqlString = N'select @HPPNo=h.HPPNo, @HPPDate=h.HPPDate, @FPJNo=h.RefferenceFakturPajakNo, ' +
										 '@FPJDate=h.RefferenceFakturPajakDate, @INVNo=h.RefferenceInvoiceNo, ' +
										 '@INVDate=h.RefferenceInvoiceDate, @BPUNo=d.BPUNo from ' +
										 +@DBName+ '..omTrPurchaseHPP h, ' +@DBName+ '..omTrPurchaseHPPSubDetail d ' +
										 'where h.CompanyCode=d.CompanyCode and h.BranchCode=d.BranchCode and h.HPPNo=d.HPPNo ' +
										   'and d.CompanyCode=''' +@curCompanyCode+ ''' and d.BranchCode=''' +@CentralBranch+ 
										''' and d.ChassisCode=''' +@curChassisCode+ ''' and d.ChassisNo=''' +convert(varchar,@curChassisNo)+ ''''
					execute sp_executesql @sqlString, 
							N'@HPPNo varchar(15) output, @HPPDate datetime output, 
							  @FPJNo varchar(25) output, @FPJDate datetime output,
							  @INVNo varchar(15) output, @INVDate datetime output,
							  @BPUNo varchar(15) output', 
							  @HPPNo output,             @HPPDate output, 
							  @FPJNo output,             @FPJDate output,
							  @INVNo output,			 @INVDate output,
							  @BPUNo output

				set @HPPNo   = isnull(@HPPNo,'')
				set @FPJNo   = isnull(@FPJNo,'')
				set @INVNo   = isnull(@INVNo,'')
				set @BPUNo   = isnull(@BPUNo,'')
				set @HPPDate = isnull(@HPPDate,'1900/01/01')
				set @FPJDate = isnull(@FPJDate,'1900/01/01')
				set @INVDate = isnull(@INVDate,'1900/01/01')

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0
		
					 -- SD: Collect Warehouse From & Remark Header information from Retur Sales
						set @sqlString = N'select @WHFrom=WareHouseCode, @RemarkHdr=Remark from ' +@DBName+ '..omTrSalesReturn ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+
											''' and ReturnNo=''' +@curDocNo+''''
							execute sp_executesql @sqlString, 
									N'@WHFrom varchar(15) output, @RemarkHdr varchar(100) output', @WHFrom output, @RemarkHdr output

				     -- SD: Collect Warehouse To Information from gnMstLookupDtl
						set @sqlString = N'select @WHTO=LookUpValue from ' +@DBName+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyCode+ ''' and CodeID=''MPWH'' and ParaValue=''' 
											+@CentralBranch+ ''''
							execute sp_executesql @sqlString, N'@WHTO varchar(15) output', @WHTO output

						set @RemarkHdr = isnull(@RemarkHdr,'')
						set @WHFrom    = isnull(@WHFrom,'')
						set @WHTo      = isnull(@WHTo,'')

						if @curBranchCode <> @CentralBranch
							begin
							 -- SD: Insert data to table omTrInventTransferOut
								execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'VTO', @VTONo output

								set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferOut 
														(CompanyCode, BranchCode, TransferOutNo, TransferOutDate, ReferenceNo, 
														 ReferenceDate, BranchCodeFrom, WareHouseCodeFrom, BranchCodeTo, 
														 WareHouseCodeTo, ReturnDate, Remark, Status, CreatedBy, CreatedDate, 
														 LastUpdateBy, LastUpdateDate, isLocked, LockedBy, LockedDate)
												  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
														 +@VTONo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curBranchCode+ ''',''' +@WHFrom+ ''','''
														 +@CentralBranch+ ''',''' +@WHTO+ ''','''
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@RemarkHdr+ ''',''5'',''POSTING'',''' 
														 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
														 +@CurrentDate+ ''',0,NULL,NULL)'
									execute sp_executesql @sqlString

							 -- SD: Insert data to table omTrInventTransferIn
								execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'VTI', @VTINo output
								set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferIn 
														(CompanyCode, BranchCode, TransferInNo, TransferInDate, TransferOutNo, 
													     ReferenceNo, ReferenceDate, BranchCodeFrom, WareHouseCodeFrom, 
														 BranchCodeTo, WareHouseCodeTo, ReturnDate, Remark, Status, CreatedBy, 
														 CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockedBy, LockedDate)
												  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''','''
														 +@VTINo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@VTONo+ ''',''' +@curDocNo+ ''',''' 
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curBranchCode+ ''',''' +@WHFrom+ ''','''
														 +@CentralBranch+ ''',''' +@WHTO+ ''','''
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@RemarkHdr+ ''',''2'',''POSTING'',''' 
														 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
														 +@CurrentDate+ ''',0,NULL,NULL)'
									execute sp_executesql @sqlString
							end

					 -- SD: Insert data to table omTrPurchaseReturn
					 	execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'RTP', @RTPNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseReturn 
												(CompanyCode, BranchCode, ReturnNo, ReturnDate, RefferenceNo, RefferenceDate, 
												 HPPNo, RefferenceFakturPajakNo, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
												 +@RTPNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@HPPNo+ ''',''' +convert(varchar,@HPPDate,121)+ ''',''' 
												 +@HPPNo+ ''',''' +@FPJNo+ ''',''' +@RemarkHdr+ 
												 ''',''5'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												 ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesReturn
					 	execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @RTSNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesReturn 
												(CompanyCode, BranchCode, ReturnNo, ReturnDate, ReferenceNo, ReferenceDate, 
												 InvoiceNo, InvoiceDate, CustomerCode, FakturPajakNo, FakturPajakDate, 
												 WareHouseCode, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, 
												 LastUpdateDate, isLocked, LockedBy, LockedDate)
										  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
												 +@RTSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@RTPNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@INVNo+ ''',''' +convert(varchar,@INVDate,121)+ ''','''
												 +@CentralBranch+ ''',''' +@FPJNo+ ''',''' 
												 +convert(varchar,@FPJDate,121)+ ''',''' 
												 +@WHTo+ ''',''' +@RemarkHdr+ ''',''5'',''POSTING'',''' 
												 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												 +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString
					end

-----------------------------------------------------------------------------------------  DETAIL PROCESS
				set @SeqNo = @SeqNo + 1

			 -- MD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBNameMD+ '..omMstVehicle
										set SOReturnNo='''+@RTSNo+ 
										''', Status=''0'', isActive=''1'' where CompanyCode='''
										+@curCompanyMD+ ''' and ChassisCode=''' 
										+@curChassisCode+ ''' and ChassisNo='
										+convert(varchar,@curChassisNo)+ ''
					execute sp_executesql @sqlString

			 -- SD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBName+ '..omMstVehicle
										set POReturnNo='''+@RTPNo+ 
										''', TransferOutNo='''+@VTONo+ 
										''', TransferInNo='''+@VTINo+ 
										''', Status=''2'', isActive=''0''  where CompanyCode='''+@curCompanyMD+
										''' and ChassisCode=''' +@curChassisCode+ 
										''' and ChassisNo='+convert(varchar,@curChassisNo) +''
					execute sp_executesql @sqlString

			 -- SD: Collect Remark Detail information table omTrSalesReturnVIN
				set @sqlString = N'select top 1 @RemarkDtl=Remark from ' +@DBName+ '..omTrSalesReturnVIN ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+
											''' and ReturnNo=''' +@curDocNo+ ''' and ChassisCode=''' +@curChassisCode+
											''' and ChassisNo=''' +convert(varchar,@curChassisNo)+ ''' order by ReturnNo desc'
							execute sp_executesql @sqlString, 
									N'@RemarkDtl varchar(100) output', @RemarkDtl output
				set @RemarkDtl = isnull(@RemarkDtl,'')

			 -- SD: Transfer unit from branch to holding
				if @curBranchCode <> @CentralBranch
					begin
					 -- SD: Insert data to table omTrInventTransferOutDetail
						set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferOutDetail 
												(CompanyCode, BranchCode, TransferOutNo, TransferOutSeq, 
												 SalesModelCode, SalesModelYear, ChassisCode, ChassisNo, 
												 EngineCode, EngineNo, ColourCode, Remark, StatusTransferIn, 
												 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
												 +@VTONo+ ''',''' +convert(varchar,@SeqNo)+ ''','''
												 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
												 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
												 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
												 +@curColourCode+ ''',''' +@RemarkDtl+ ''',''1'',''' 
												 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
												 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
							execute sp_executesql @sqlString

					 -- SD: Insert data to table omTrInventTransferInDetail
						set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferInDetail 
												(CompanyCode, BranchCode, TransferInNo, TransferInSeq, 
												 SalesModelCode, SalesModelYear, ChassisCode, ChassisNo, 
												 EngineCode, EngineNo, ColourCode, Remark, StatusTransferOut, 
												 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
												 +@VTINo+ ''',''' +convert(varchar,@SeqNo)+ ''','''
												 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
												 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
												 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
												 +@curColourCode+ ''',''' +@RemarkDtl+ ''',''1'',''' 
												 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
												 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
							execute sp_executesql @sqlString

					 -- SD: Insert / Update data to table omTrInventQtyVehicle - @WHFrom
						set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
													   +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
													   +convert(varchar,year(@curDocDate))+ ''',''' 
													   +convert(varchar,month(@curDocDate))+  ''',''' 
													   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
													   +@curColourCode+ ''',''' +@WHFrom+ ''',1,0,1,0,0,0,0,NULL,1,''' 
													   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
													   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
													   ''',0,NULL,NULL))
											   as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
													   NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
													   NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
													   NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
													   NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate)
												   on  VEH.CompanyCode    = SRC.NewCompany
												  and  VEH.BranchCode	  = SRC.NewBranch
												  and  VEH.Year		      = SRC.NewYear
												  and  VEH.Month		  = SRC.NewMonth
												  and  VEH.SalesModelCode = SRC.NewSalesModelCode
												  and  VEH.SalesModelYear = SRC.NewSalesModelYear 
												  and  VEH.ColourCode	  = SRC.NewColourCode
												  and  VEH.WarehouseCode  = SRC.NewWarehouseCode
										 when matched
												 then update set QtyIn  = QtyIn  - SRC.NewQtyIn
															   , QtyOut = QtyOut - SRC.NewQtyOut
															   , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
															   , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
									 when not matched by target 
												 then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
															  ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
															  EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, CreatedDate, 
															  LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
													  values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
															  NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
															  NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
															  NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
															  NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, 
															  NewLockedDate);'
							execute sp_executesql @sqlString
					end

			 -- SD: Insert / Update data to table omTrInventQtyVehicle - @WHTo
				set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
											   +convert(varchar,year(@curDocDate))+ ''',''' 
											   +convert(varchar,month(@curDocDate))+  ''',''' 
											   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
											   +@curColourCode+ ''',''' +@WHTo+ ''',1,0,1,0,0,0,0,NULL,1,''' 
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
											   ''',0,NULL,NULL))
									  as SRC  (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
											   NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
											   NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
											   NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate)
										  on   VEH.CompanyCode    = SRC.NewCompany
										 and   VEH.BranchCode	  = SRC.NewBranch
										 and   VEH.Year			  = SRC.NewYear
										 and   VEH.Month		  = SRC.NewMonth
										 and   VEH.SalesModelCode = SRC.NewSalesModelCode
										 and   VEH.SalesModelYear = SRC.NewSalesModelYear 
										 and   VEH.ColourCode	  = SRC.NewColourCode
										 and   VEH.WarehouseCode  = SRC.NewWarehouseCode
								when matched
										then  update set QtyIn  = QtyIn  + SRC.NewQtyIn
													   , QtyOut = QtyOut + SRC.NewQtyOut
													   , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
													   , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
						    when not matched by target 
										then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
													 ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
													 EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, 
													 CreatedDate, LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
											 values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
													 NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
													 NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
													 NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
													 NewIsLocked, NewLockedBy, NewLockedDate);'
						execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseReturnDetail
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseReturnDetail as RTP using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
											   +@RTPNo+ ''',''' +@BPUNo+ ''',''' +@RemarkDtl+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPUNo,  NewRemark,
											   NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
										   on  RTP.CompanyCode = SRC.NewCompany
										  and  RTP.BranchCode  = SRC.NewBranch
										  and  RTP.ReturnNo    = SRC.NewReturnNo
										  and  RTP.BPUNo       = SRC.NewBPUNo
										 when  matched 
											   then update set Remark         = SRC.NewRemark
															 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										 when  not matched by target 
											   then insert (CompanyCode, BranchCode, ReturnNo, BPUNo, Remark, 
															CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
													values (NewCompany, NewBranch, NewReturnNo, NewBPUNo,  NewRemark,
															NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString


			 -- SD: Collect price information from table omTrPurchaseHPP
				set @sqlString = N'select @BeforeDiscDPP=p.BeforeDiscDPP, @DiscExcludePPn=p.DiscExcludePPn, ' +
								  '@AfterDiscDPP=p.AfterDiscDPP, @AfterDiscPPn=p.AfterDiscPPn, ' +
								  '@AfterDiscPPnBM=p.AfterDiscPPnBM, @AfterDiscTotal=p.AfterDiscTotal, ' +
								  '@OthersDPP=p.OthersDPP, @OthersPPn=p.OthersPPn from ' +@DBName+ 
								  '..omTrPurchaseHPPSubDetail v, ' +@DBName+ '..omTrPurchaseHPPDetailModel p ' +
								  'where v.CompanyCode=p.CompanyCode and v.BranchCode=p.BranchCode ' +
									'and v.HPPNo=p.HPPNo and v.BPUNo=p.BPUNo and v.SalesModelCode=p.SalesModelCode ' +
									'and v.SalesModelYear=p.SalesModelYear and v.CompanyCode=''' +@curCompanyCode+ 
								  ''' and v.BranchCode=''' +@CentralBranch+ ''' and v.BPUNo=''' +@BPUNo+
								  ''' and ChassisCode=''' +@curChassisCode+ ''' and ChassisNo='
								  +convert(varchar,@curChassisNo)+ ''
						execute sp_executesql @sqlString, 
								N'@BeforeDiscDPP	numeric(18)	output,
								  @DiscExcludePPn	numeric(18)	output,
								  @AfterDiscDPP		numeric(18)	output,
								  @AfterDiscPPn		numeric(18) output,
								  @AfterDiscPPnBM	numeric(18) output,
								  @AfterDiscTotal	numeric(18) output,
								  @OthersDPP		numeric(18) output,
								  @OthersPPn		numeric(18) output',
								  @BeforeDiscDPP	output,
								  @DiscExcludePPn	output,
								  @AfterDiscDPP		output,
								  @AfterDiscPPn		output,
								  @AfterDiscPPnBM	output,
								  @AfterDiscTotal	output,
								  @OthersDPP		output,
								  @OthersPPn		output

			 -- SD: Insert data to table omTrPurchaseReturnDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseReturnDetailModel as RTP using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@RTPNo+ ''',''' +@BPUNo+ 
											   ''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',1,''' 
											   +convert(varchar,@BeforeDiscDPP)+ ''',''' +convert(varchar,@DiscExcludePPn)+ ''','''
											   +convert(varchar,@AfterDiscDPP)+ ''',''' +convert(varchar,@AfterDiscPPn)+ ''','''
											   +convert(varchar,@AfterDiscPPnBM)+ ''',''' +convert(varchar,@AfterDiscTotal)+ ''','''
											   +convert(varchar,@OthersDPP)+ ''',''' +convert(varchar,@OthersPPn)+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPUNo, 
											   NewSalesModelCode, NewSalesModelYear, NewQuantity, 
											   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
											   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
											   NewOthersDPP, NewOthersPPn, NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate)
										   on  RTP.CompanyCode    = SRC.NewCompany
										  and  RTP.BranchCode     = SRC.NewBranch
										  and  RTP.ReturnNo       = SRC.NewReturnNo
										  and  RTP.BPUNo          = SRC.NewBPUNo
										  and  RTP.SalesModelCode = SRC.NewSalesModelCode
										  and  RTP.SalesModelYear = SRC.NewSalesModelYear
										 when  matched 
											   then update set Quantity       = Quantity + SRC.NewQuantity
															 , BeforeDiscDPP  = BeforeDiscDPP  + SRC.NewBeforeDiscDPP
															 , DiscExcludePPn = DiscExcludePPn + SRC.NewDiscExcludePPn
															 , AfterDiscDPP   = AfterDiscDPP   + SRC.NewAfterDiscDPP
															 , AfterDiscPPn   = AfterDiscPPn   + SRC.NewAfterDiscPPn
															 , AfterDiscPPnBM = AfterDiscPPnBM + SRC.NewAfterDiscPPnBM
															 , AfterDiscTotal = AfterDiscTotal + SRC.NewAfterDiscTotal
															 , OthersDPP      = OthersDPP      + SRC.NewOthersDPP
															 , OthersPPn      = OthersPPn      + SRC.NewOthersPPn
															 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										when  not matched by target 
											  then insert (CompanyCode, BranchCode, ReturnNo, BPUNo, SalesModelCode,
														   SalesModelYear, Quantity, BeforeDiscDPP, DiscExcludePPn,
														   AfterDiscDPP, AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, 
														   OthersDPP, OthersPPn, CreatedBy, CreatedDate, LastUpdateBy, 
														   LastUpdateDate)
												   values (NewCompany, NewBranch, NewReturnNo, NewBPUNo, 
														   NewSalesModelCode, NewSalesModelYear, NewQuantity, 
														   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
														   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
														   NewOthersDPP, NewOthersPPn, NewCreatedBy, NewCreatedDate, 
														   NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseReturnSubDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseReturnSubDetail
										(CompanyCode, BranchCode, ReturnNo, BPUNo, ReturnSeq, 
										 SalesModelCode, SalesModelYear, ColourCode, ChassisCode, 
										 ChassisNo, EngineCode, EngineNo, Remark, CreatedBy, 
										 CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@RTPNo+ ''',''' 
										 +@BPUNo+ ''',''' +Convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''','''
								         +convert(varchar,@curSalesModelYear)+ ''',''' +@curColourCode+ ''',''' 
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@RemarkDtl+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- SD: Update data to table omTrPurchaseHPPSubDetail
				set @sqlString = 'update ' +@DBName+ '..omTrPurchaseHPPSubDetail ' +
										'set isReturn = 1 where CompanyCode=''' +@curCompanyCode+ 
										''' and BranchCode=''' +@CentralBranch+ ''' and HPPNo=''' +@HPPNo+ 
										''' and BPUNo=''' +@BPUNo+ ''' and ChassisCode=''' +@curChassisCode+ 
										''' and ChassisNo=''' +convert(varchar,@curChassisNo)+''''
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesReturnBPK
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesReturnBPK as RTS using (values(''' 
											   +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
											   +@RTSNo+ ''',''' +@BPKNo+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPKNo, NewCreatedBy, 
											   NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
										   on RTS.CompanyCode = SRC.NewCompany
										  and RTS.BranchCode  = SRC.NewBranch
										  and RTS.ReturnNo    = SRC.NewReturnNo
										  and RTS.BPKNo       = SRC.NewBPKNo
										 when matched 
											  then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															, LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										 when not matched by target 
											  then insert (CompanyCode, BranchCode, ReturnNo, BPKNo, CreatedBy, 
														   CreatedDate, LastUpdateBy, LastUpdateDate)
												   values (NewCompany, NewBranch, NewReturnNo, NewBPKNo, NewCreatedBy, 
														   NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
						execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesReturnDetailModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesReturnDetailModel as RTS using (values(''' 
											   +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@RTSNo+ ''',''' +@BPKNo+ ''','''
											   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
											   +convert(varchar,@BeforeDiscDPP)+ ''',''' +convert(varchar,@DiscExcludePPn)+ ''','''
											   +convert(varchar,@AfterDiscDPP)+ ''',''' +convert(varchar,@AfterDiscPPn)+ ''','''
											   +convert(varchar,@AfterDiscPPnBM)+ ''',''' +convert(varchar,@AfterDiscTotal)+ ''','''
											   +convert(varchar,@OthersDPP)+ ''',''' +convert(varchar,@OthersPPn)+ ''',1,'''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPKNo,  
											   NewSalesModelCode, NewSalesModelYear, 
											   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
											   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
											   NewOthersDPP, NewOthersPPn, NewQuantity, 
											   NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate)
										   on RTS.CompanyCode    = SRC.NewCompany
										  and RTS.BranchCode     = SRC.NewBranch
										  and RTS.ReturnNo       = SRC.NewReturnNo
									      and RTS.BPKNo          = SRC.NewBPKNo
										  and RTS.SalesModelCode = SRC.NewSalesModelCode
										  and RTS.SalesModelYear = SRC.NewSalesModelYear
										 when matched 
											  then update set Quantity       = Quantity       + SRC.NewQuantity
															, BeforeDiscDPP  = BeforeDiscDPP  + SRC.NewBeforeDiscDPP
															, DiscExcludePPn = DiscExcludePPn + SRC.NewDiscExcludePPn
															, AfterDiscDPP   = AfterDiscDPP   + SRC.NewAfterDiscDPP
															, AfterDiscPPn   = AfterDiscPPn   + SRC.NewAfterDiscPPn
															, AfterDiscPPnBM = AfterDiscPPnBM + SRC.NewAfterDiscPPnBM
															, AfterDiscTotal = AfterDiscTotal + SRC.NewAfterDiscTotal
															, OthersDPP      = OthersDPP      + SRC.NewOthersDPP
															, OthersPPn      = OthersPPn      + SRC.NewOthersPPn
															, LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															, LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										when not matched by target 
											 then insert (CompanyCode, BranchCode, ReturnNo, BPKNo, 
														  SalesModelCode, SalesModelYear, 
														  BeforeDiscDPP, DiscExcludePPn, AfterDiscDPP,
														  AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, 
														  OthersDPP, OthersPPn, Quantity, 
														  CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
												  values (NewCompany, NewBranch, NewReturnNo, NewBPKNo,  
														  NewSalesModelCode, NewSalesModelYear, 
														  NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
														  NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
														  NewOthersDPP, NewOthersPPn, NewQuantity, NewCreatedBy, 
														  NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
						execute sp_executesql @sqlString

			 -- SD: Collect price information from table omTrPurchaseHPP
				set @sqlString = N'select @BPKNo=BPKNo from ' +@DBNameMD+ '..omTrSalesInvoiceVin where CompanyCode='''
										  +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and InvoiceNo=''' 
										  +@INVNo+ ''' and ChassisCode=''' +@curChassisCode+ ''' and ChassisNo='''
										  +convert(varchar,@curChassisNo) + ''''
						execute sp_executesql @sqlString, 
								N'@BPKNo	varchar(15) output', @BPKNo	output

			 -- MD: Insert data to table omTrSalesReturnVIN
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesReturnVIN
										(CompanyCode, BranchCode, ReturnNo, BPKNo, SalesModelCode, SalesModelYear, 
										 ReturnSeq, ColourCode, ChassisCode, ChassisNo, EngineCode, EngineNo, 
										 Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
										 +@RTSNo+ ''',''' +@BPKNo+ ''',''' 
										 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
										 +convert(varchar,@SeqNo)+ ''',''' +@curColourCode+ ''',''' 
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@RemarkDtl+ ''','''  
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

/*				
			USE POSTING JOURNAL IN UTILITY SALES MODULE 
			FOR UPDATE DATA TO TABLE ARINTERFACE & GLINTERFACE
			 -- MD: Update data to table arInterface
			 -- MD: Update data to table glInterface
			 -- SD: Update data to table apInterface
			 -- SD: Update data to table glInterface
*/

   			 -- Update Daily Posting Process Status
				update omSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and DocDate    =@curDocDate
					  and Seq        =@curSeq

			 -- Read next record
				fetch next from curomSDMovement
					  into  @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
							@curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
							@curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
							@curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
							@curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table omSDMovement to table omHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[omHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[omHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[Seq] [int] NOT NULL,
				[SalesModelCode] [varchar](20) NOT NULL,
				[SalesModelYear] [numeric](4, 0) NOT NULL,
				[ChassisCode] [varchar](15) NOT NULL,
				[ChassisNo] [numeric](10, 0) NOT NULL,
				[EngineCode] [varchar](15) NOT NULL,
				[EngineNo] [numeric](10, 0) NOT NULL,
				[ColourCode] [varchar](15) NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[CustomerCode] [varchar](15) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NOT NULL,
				[LastUpdateDate] [datetime] NOT NULL)
			
		insert into omHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  omSDMovement
							  where	 ProcessStatus = 1
                                 or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		delete omSDMovement   where	 ProcessStatus = 1
                                 or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		close curomSDMovement
		deallocate curomSDMovement

END
GO
if object_id('uspfn_SvInsertDefaultTaskMovement') is not null
	drop procedure uspfn_SvInsertDefaultTaskMovement
GO
CREATE procedure [uspfn_SvInsertDefaultTaskMovement]
--declare 
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@ProductType as varchar(15),
@ServiceNo as int,
@UserID as varchar(100)
as

--set @CompanyCode = '6006400001'
--set	@BranchCode = '6006400101'
--set	@ProductType = '4W'
--set	@ServiceNo = 1
--set	@UserID = 'yo'

declare @Sql as varchar(max)

set @Sql = 
'insert into '+dbo.GetDbMD(@CompanyCode,@BranchCode)+'..svSDMovement
select a.CompanyCode, a.BranchCode, b.JobOrderNo, b.JobOrderDate, a.PartNo, a.PartSeq, dbo.GetWarehouseMD(a.CompanyCode,a.BranchCode) WarehouseCode, 
a.DemandQty, a.DemandQty, a.DiscPct, a.CostPrice, a.RetailPrice, a.TypeOfGoods, dbo.GetCompanyMD(a.CompanyCode,a.BranchCode) CompanyMD, 
dbo.GetBranchMD(a.CompanyCode,a.BranchCode) BranchMD, dbo.GetWarehouseMD(a.CompanyCode,a.BranchCode) WarehouseMD, c.RetailPriceInclTax, c.RetailPrice,
c.CostPrice, ''x'', '''+@ProductType+''', ''300'', ''0'', ''0'', ''1900/01/01'', '''+@UserID+''', GETDATE(), '''+@UserID+''', GETDATE()  
from 
svTrnSrvItem a 
inner join SvTrnService b on a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.ServiceNo = b.ServiceNo
left join '+dbo.GetDbMD(@CompanyCode,@BranchCode)+'..spMstItemPrice c ON c.CompanyCode = dbo.GetCompanyMD(a.CompanyCode,a.BranchCode) and c.BranchCode = dbo.GetBranchMD(a.CompanyCode,a.BranchCode)
and c.PartNo = a.PartNo
where a.CompanyCode = '''+@CompanyCode+''' and a.BranchCode = '''+@BranchCode+''' and a.ServiceNo = ' + convert(varchar,@ServiceNo,1)
print(@Sql)
exec(@Sql)
go
if object_id('sp_InquirDetailDataKendaraan') is not null
	drop procedure sp_InquirDetailDataKendaraan
GO
CREATE procedure [dbo].[sp_InquirDetailDataKendaraan] 
(
 @CompanyCode varchar(15),
 @BranchCode varchar(15),
 @ChassisCode varchar(100),
 @ChassisNo varchar(100)
)
AS

BEGIN

select 
	(select b.refferenceDesc1 from ommstrefference b where b.companyCode = a.companyCode
	and b.refferencetype = 'WARE' and b.refferenceCode = a.warehouseCode) as warehouseName
	,'('+a.ColourCode+') '+(select c.refferenceDesc1 from ommstrefference c where c.companyCode = a.companyCode
	and c.refferencetype = 'COLO' and c.refferenceCode = a.ColourCode) as ColourName
	, a.servicebookno
	, a.keyno
	, a.cogsunit
	, a.cogsOthers
	, a.cogsKaroseri
    , o.afterdiscdpp dpp
    , o.afterdiscppn ppn
    , p.bbn
	, j.pono
    , convert(varchar, j.podate, 106) podate
	, h.bpuno+' ('+h.RefferenceDONo+')' bpuno
    , convert(varchar, h.bpudate, 106) bpudate
	, d.sono
    , convert(varchar, d.sodate, 106) sodate
	, k.dono
    , convert(varchar, k.dodate, 106) dodate
    , case d.SKPKNo when '' then d.RefferenceNo else d.SKPKNo end as SKPKNo
    , convert(varchar, d.sodate, 106)  SKPKDate
    , l.bpkno
    , convert(varchar, l.bpkdate, 106) bpkdate
	, m.invoiceNo
    , convert(varchar, m.invoicedate, 106) invoicedate
    , q.RefferenceSJNo
	, convert(varchar, q.RefferenceSJDate, 106) RefferenceSJDate
    , i.hppno
    , convert(varchar, i.hppdate, 106) hppdate
	, n.reqNo reqOutNo
    , convert(varchar, n.reqDate, 106) reqdate
    , i.RefferenceInvoiceNo reffinv
    , convert(varchar, i.RefferenceInvoiceDate, 106) reffinvdate
    , i.RefferenceFakturPajakNo refffp
    , convert(varchar, i.RefferenceFakturPajakDate , 106) refffpdate
	, s.PoliceRegistrationNo policeregno
    , convert(varchar, s.PoliceRegistrationDate, 106) policeregdate
	, isnull(b.CustomerCode + ' - ' + c.CustomerName, 
		k.CustomerCode + ' - ' + (select CustomerName from gnMstCustomer where CompanyCode = @CompanyCode and CustomerCode = k.CustomerCode)
		) as Customer
	, isnull(c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4,
		(select Address1 + ' ' + Address2 + ' ' + Address3 + ' ' + Address4 from gnMstCustomer where CompanyCode = @CompanyCode and CustomerCode = k.CustomerCode)
		) as Address
	, d.Salesman + ' - ' + f.EmployeeName as Salesman
	, d.LeasingCo + ' - ' + g.CustomerName as Leasing
	, d.SalesCode + ' - ' + e.LookUpValueName as KelAR
    , s.BPKBNo
	, s.SPKNo
	, a.ChassisCode
	, a.SalesModelCode
	, a.ChassisNo
	, a.EngineNo
from 
	ommstvehicle a
left join omTrSalesInvoice b on a.CompanyCode = b.CompanyCode and b.BranchCode like @BranchCode 
    and a.InvoiceNo = b.InvoiceNo
left join gnMstCustomer c on a.CompanyCode = c.CompanyCode and b.Customercode = c.CustomerCode
left join omTrSalesSO d on a.CompanyCode = d.CompanyCode and d.BranchCode like @BranchCode and a.SONo = d.SONo
left join GnMstLookUpDtl e on a.CompanyCode = e.CompanyCode and CodeID = 'GPAR' and e.LookUpValue = d.SalesCode
left join gnMstEmployee f on a.CompanyCode  = f.Companycode and f.BranchCode like @BranchCode 
    and f.EmployeeID = d.Salesman
left join gnMstCustomer g on a.CompanyCode = g.CompanyCode and g.CustomerCode = d.LeasingCo
left join omTrPurchaseBPU h on a.CompanyCode= h.CompanyCode and h.BranchCode like @BranchCode 
    and a.PONo = h.PONo and a.BPUNo=h.BPUNo
left join omTrPurchaseHPP i on a.CompanyCode= i.CompanyCode and i.BranchCode like @BranchCode and a.HPPNo= i.HPPNo
left join omTrPurchasePO j on a.CompanyCode = j.CompanyCode and j.BranchCode like @BranchCode and a.PONo = j.PONo
left join omTrSalesDO k on a.CompanyCode = k.CompanyCode and k.BranchCode like @BranchCode and a.DONo = k.DONo and a.SONo= k.SONo
left join omTrSalesBPK l on a.CompanyCode = l.CompanyCode and l.BranchCode like @BranchCode and a.BPKNo = l.BPKNo
left join omTrSalesInvoice m on a.CompanyCode = m.CompanyCode and m.BranchCode like @BranchCode 
    and a.InvoiceNo = m.InvoiceNo
left join omTrSalesReq n on a.CompanyCode = n.CompanyCode and n.BranchCode like @BranchCode and a.ReqOutNo = n.ReqNo
left join omTrSalesSOModel o on a.CompanyCode = o.CompanyCode and o.BranchCode like @BranchCode and a.SONo = o.SONo 
    and a.SalesModelCode = o.SalesModelCode and a.SalesModelYear = o.SalesModelYear and a.ChassisCode = o.ChassisCode
left join omTrSalesSOVin p on a.CompanyCode = p.CompanyCode and p.BranchCode like @BranchCode and a.SONo = p.SONo
    and a.SalesModelCode = p.SalesModelCode and a.SalesModelYear = p.SalesModelYear and a.ColourCode = p.ColourCode
    and a.ChassisNo = p.ChassisNo and a.ChassisCode = p.ChassisCode
left join omTrPurchaseBPU q on a.CompanyCode = q.CompanyCode and q.BranchCode like @BranchCode and q.PONo = j.PONO 
	and q.BPUNo = a.BPUNo
left join omTrSalesSPKDetail s on s.CompanyCode = a.CompanyCode and s.BranchCode like @BranchCode
	and s.ChassisCode = a.ChassisCode and s.ChassisNo = a.ChassisNo
where 
	a.companyCode = @CompanyCode and a.chassisCode = @ChassisCode and a.chassisNo = @ChassisNo

END
GO
if object_id('SvCustomerVehicleView') is not null
	drop procedure SvCustomerVehicleView
GO
CREATE view [dbo].[SvCustomerVehicleView]
as 

select distinct a.CompanyCode
,e.BranchCode
, (a.ChassisCode + convert(varchar, a.ChassisNo)) as VinNo
,a.PoliceRegNo
,isnull(b.CustomerName, '') CustomerName
,rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
, b.Address1
, b.Address2
, b.Address3 
, b.Address4
,a.BasicModel
,a.ChassisNo
,a.ChassisCode
,a.EngineCode
,a.EngineNo
,a.TransmissionType
,a.ServiceBookNo
,case a.LastServiceDate when ('19000101') then '' else a.LastServiceDate end LastServiceDate
,a.LastJobType
, a.ColourCode
, a.CustomerCode
from svMstCustomerVehicle a
left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode	
inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
where a.IsActive = 1 and e.ProfitCenterCode = '200'

--select distinct a.CompanyCode 
--	 , c.BranchCode
--	 , a.ChassisCode
--     , a.ChassisNo
--     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as VinNo
--     , a.BasicModel
--     , a.PoliceRegNo
--     , a.ServiceBookNo
--     , a.CustomerCode
--     , b.CustomerName
--     , a.ContractNo
--     , a.IsContractStatus
--     , case d.ContractDate
--         when ('19000101') then null
--        else d.ContractDate
--       end ContractDate
--     , a.ClubNo
--     , case a.ClubDateFinish
--         when ('19000101') then null
--         else a.ClubDateFinish
--       end ClubDateFinish
--     , a.IsClubStatus
--     , b.Address1
--     , b.Address2
--     , b.Address3 
--     , b.Address4
--     , b.CityCode
--     , e.LookUpValueName as CityName
--     , b.PhoneNo
--     , b.HPNo
--     , b.FaxNo
--     , a.TransmissionType
--     , a.TechnicalModelCode
--     , case a.LastServiceDate
--         when ('19000101') then null
--         else a.LastServiceDate
--       end LastServiceDate
--     , a.LastJobType
--     , a.ColourCode
--     , a.EngineCode
--     , a.EngineNo
--     , c.MaterialDiscPct
--     , c.PartDiscPct
--     , c.LaborDiscPct
--  from svMstCustomerVehicle a
--  left join gnMstCustomer b
--    on b.CompanyCode = a.CompanyCode
--   and b.CustomerCode = a.CustomerCode
-- inner join gnMstCustomerProfitCenter c
--    on c.CustomerCode = b.CustomerCode 
--   and c.CompanyCode = b.CompanyCode
--   and c.ProfitCenterCode = '200'
--	LEFT JOIN svMstContract d
--	ON d.CompanyCode = b.CompanyCode
--	AND d.CustomerCode = b.CustomerCode
--	LEFT JOIN gnMstLookUpDtl e
--	ON e.CompanyCode = b.CompanyCode
--	AND e.CodeID = 'CITY'
--	AND e.LookUpValue = b.CityCode
-- where isnull(a.BasicModel, '') <> ''
 

GO


if object_id('SvCustomerView') is not null
	drop procedure SvCustomerView
GO
CREATE view [dbo].[SvCustomerView]
as 
select a.CompanyCode
     , b.CompanyName
     , a.CustomerCode
     , a.CustomerName
     , a.Address1 as Address1, a.Address1 as Address2, a.Address3 as Address3, a.Address4 as Address4
     , a.FaxNo, a.PhoneNo, a.HPNo, a.NPWPNo, isnull(a.NPWPDate,'19000101') NPWPDate, a.SKPNo, isnull(a.SKPDate,'19000101')SKPDate
     , a.BirthDate
  from gnMstCustomer a
  left join gnMstOrganizationHdr b
    on b.CompanyCode = a.CompanyCode



GO


if object_id('uspfn_SvTrnInvoiceDraft') is not null
	drop procedure uspfn_SvTrnInvoiceDraft
GO
CREATE procedure [dbo].[uspfn_SvTrnInvoiceDraft]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@JobOrderNo  varchar(15)
as  

declare @errmsg   varchar(max)
declare @BillType varchar(10)

begin try
--set nocount on

-- get data from SvTrnService
select * into #srv from (
  select * from svTrnService with(nowait,nolock) 
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and EstimationNo = @JobOrderNo  
      and EstimationNo!= ''
  union all
  select * from svTrnService with(nowait,nolock) 
    where 1 = 1  
      and CompanyCode = @CompanyCode  
      and BranchCode  = @BranchCode  
      and BookingNo   = @JobOrderNo  
      and BookingNo  != ''
  union all
  select * from svTrnService with(nowait,nolock) 
    where 1 = 1  
      and CompanyCode = @CompanyCode  
      and BranchCode  = @BranchCode  
      and JobOrderNo  = @JobOrderNo  
      and JobOrderNo != ''
)#srv

select BillType into #t1 from (
select b.BillType from #srv a, svTrnSrvItem b with(nowait,nolock) 
 where 1 = 1
   and b.CompanyCode = a.CompanyCode
   and b.BranchCode  = a.BranchCode
   and b.ProductType = a.ProductType
   and b.ServiceNo   = a.ServiceNo
union
select b.BillType from #srv a, svTrnSrvTask b with(nowait,nolock) 
 where 1 = 1
   and b.CompanyCode = a.CompanyCode
   and b.BranchCode  = a.BranchCode
   and b.ProductType = a.ProductType
   and b.ServiceNo   = a.ServiceNo
)#

set @BillType = (select top 1 a.BillType from svMstBillingType a with(nowait,nolock), #t1 b where b.BillType = a.BillType order by a.LockingBy)
drop table #t1

-- get dicount from Service
declare @ProductType     varchar(20)  set @ProductType     = isnull((select top 1 ProductType     from #srv),0)
declare @ServiceNo       bigint       set @ServiceNo       = isnull((select top 1 ServiceNo       from #srv),0)

-- get ppn & pph dicount from Service
declare @PPnPct decimal
    set @PPnPct = isnull((select a.TaxPct
 						    from gnMstTax a with(nowait,nolock), gnMstCustomerProfitCenter b with(nowait,nolock) , #srv c
						   where c.CompanyCode  = b.CompanyCode
						     and c.BranchCode   = b.BranchCode
						     and c.CustomerCodeBill = b.CustomerCode
						     and b.CompanyCode  = a.CompanyCode
						     and b.TaxCode      = a.TaxCode
						     and b.ProfitCenterCode = '200'
						     and b.TaxCode      = 'PPN'
							),0)

declare @PPhPct decimal
    set @PPhPct = isnull((select a.TaxPct
							from gnMstTax a with(nowait,nolock), gnMstCustomerProfitCenter b with(nowait,nolock) , #srv c
						   where c.CompanyCode  = b.CompanyCode
						     and c.BranchCode   = b.BranchCode
						     and c.CustomerCodeBill = b.CustomerCode
						     and b.CompanyCode  = a.CompanyCode
						     and b.TaxCode      = a.TaxCode
						     and b.ProfitCenterCode = '200'
						     and b.TaxCode      = 'PPH'
							),0)

-- get data gross amount
declare @LaborGrossAmt decimal
    set @LaborGrossAmt = isnull((
						select ceiling(sum(a.OperationHour * a.OperationCost))
						  from svTrnSrvTask a with(nowait,nolock), #srv b
						 where a.CompanyCode = b.CompanyCode
						   and a.BranchCode  = b.BranchCode
						   and a.ProductType = b.ProductType
						   and a.ServiceNo   = b.ServiceNo
						   and a.BillType    = @BillType
						),0)

declare @PartsGrossAmt decimal
    set @PartsGrossAmt = isnull((
						--select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice))--Sebelum Perubahan
						select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice,0)))--Sesudah Perubahan
						  from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						 where g.CompanyCode = i.CompanyCode
					 	   and g.LookUpValue = i.TypeOfGoods
						   and g.CodeID      = 'GTGO'
						   and g.ParaValue   = 'SPAREPART'
						   and i.CompanyCode = @CompanyCode
						   and i.BranchCode  = @BranchCode
						   and i.ProductType = @ProductType
						   and i.ServiceNo   = @ServiceNo
						   and i.BillType    = @BillType
						),0)

declare @MaterialGrossAmt decimal
    set @MaterialGrossAmt = isnull((
						 --select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice))--Sebelum Perubahan
						 select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice,0)))--Sesudah Perubahan
						   from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						  where g.CompanyCode = i.CompanyCode
							and g.LookUpValue = i.TypeOfGoods
							and g.CodeID      = 'GTGO'
							and g.ParaValue  in ('OLI','MATERIAL')
							and i.CompanyCode = @CompanyCode
							and i.BranchCode  = @BranchCode
							and i.ProductType = @ProductType
							and i.ServiceNo   = @ServiceNo
						    and i.BillType    = @BillType
						  ),0)

-- calculate discount
declare @LaborDiscAmt decimal
    set @LaborDiscAmt = isnull((
						 select ceiling(sum(OperationHour * OperationCost * (DiscPct/100.0)))
						   from svTrnSrvTask with(nowait,nolock)
						  where CompanyCode = @CompanyCode
							and BranchCode = @BranchCode
							and ProductType = @ProductType
							and ServiceNo = @ServiceNo
						    and BillType    = @BillType
						  ),0)

declare @PartsDiscAmt decimal
    set @PartsDiscAmt = isnull((
						 --select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0)))--Sebelum Perubahan
						 select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0),0)))--Sesudah Perubahan
						   from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						 where g.CompanyCode = i.CompanyCode
					 	   and g.LookUpValue = i.TypeOfGoods
						   and g.CodeID      = 'GTGO'
						   and g.ParaValue   = 'SPAREPART'
						   and i.CompanyCode = @CompanyCode
						   and i.BranchCode  = @BranchCode
						   and i.ProductType = @ProductType
						   and i.ServiceNo   = @ServiceNo
						   and i.BillType    = @BillType
						  ),0)

declare @MaterialDiscAmt decimal
    set @MaterialDiscAmt = isnull((
						 --select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0)))--Sebelum Perubahan
						 select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0),0)))--Sesudah Perubahan
						   from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						  where g.CompanyCode = i.CompanyCode
							and g.LookUpValue = i.TypeOfGoods
							and g.CodeID      = 'GTGO'
							and g.ParaValue  in ('OLI','MATERIAL')
							and i.CompanyCode = @CompanyCode
							and i.BranchCode  = @BranchCode
							and i.ProductType = @ProductType
							and i.ServiceNo   = @ServiceNo
						    and i.BillType    = @BillType
						  ),0)

-- calculate DPP (dasar pengenaan pajak)
--declare @LaborDppAmt     decimal	set @LaborDppAmt     = floor(@LaborGrossAmt    - @LaborDiscAmt)--Sebelum Perubahan
--declare @PartsDppAmt     decimal	set @PartsDppAmt     = floor(@PartsGrossAmt    - @PartsDiscAmt)--Sebelum Perubahan
--declare @MaterialDppAmt  decimal	set @MaterialDppAmt  = floor(@MaterialGrossAmt - @MaterialDiscAmt)--Sebelum Perubahan
--declare @TotalDppAmt     decimal	set @TotalDppAmt     = floor(@LaborDppAmt + @PartsDppAmt + @MaterialDppAmt)--Sebelum Perubahan
declare @LaborDppAmt     decimal	set @LaborDppAmt     = Round(@LaborGrossAmt    - @LaborDiscAmt,0)--Sesudah Perubahan
declare @PartsDppAmt     decimal	set @PartsDppAmt     = Round(@PartsGrossAmt    - @PartsDiscAmt,0)--Sesudah Perubahan
declare @MaterialDppAmt  decimal	set @MaterialDppAmt  = Round(@MaterialGrossAmt - @MaterialDiscAmt,0)--Sesudah Perubahan
declare @TotalDppAmt     decimal	set @TotalDppAmt     = Round(@LaborDppAmt + @PartsDppAmt + @MaterialDppAmt,0)--Sesudah Perubahan

-- calculate ppn & service amount
declare @TotalPpnAmt     decimal	set @TotalPpnAmt = floor(@TotalDppAmt * (@PpnPct / 100.0))
declare @TotalPphAmt     decimal	set @TotalPphAmt = floor(@TotalDppAmt * (@PphPct / 100.0))
declare @TotalSrvAmt     decimal	set @TotalSrvAmt = floor(@TotalDppAmt + @TotalPphAmt + @TotalPpnAmt)

    
;with t1 as (
select a.CompanyCode, a.BranchCode, a.ProductType, a.ServiceNo
     , a.EstimationNo, a.EstimationDate, a.BookingNo, a.BookingDate, a.JobOrderNo, a.JobOrderDate, a.ServiceType
     , a.PoliceRegNo, a.ServiceBookNo, a.BasicModel, a.TransmissionType
     , a.ChassisCode, a.ChassisNo, a.EngineCode, a.EngineNo, a.ColorCode
     , rtrim(rtrim(a.ColorCode)
     + case isnull(b.RefferenceDesc2,'') when '' then '' else ' - ' end
     + isnull(b.RefferenceDesc2,'')) as ColorCodeDesc
     , a.Odometer
     , a.CustomerCode, c.CustomerName, c.Address1 CustAddr1
     , c.Address2 CustAddr2, c.Address3 CustAddr3, c.Address4 CustAddr4
     , c.CityCode CityCode, d.LookupValueName CityName
     , a.InsurancePayFlag, a.InsuranceOwnRisk, a.InsuranceNo, a.InsuranceJobOrderNo
     , a.CustomerCodeBill, e.CustomerName CustomerNameBill
     , e.Address1 CustAddr1Bill, e.Address2 CustAddr2Bill
     , e.Address3 CustAddr3Bill, e.Address4 CustAddr4Bill
     , e.CityCode CityCodeBill, f.LookupValueName CityNameBill
     , e.PhoneNo, e.FaxNo, e.HPNo, a.LaborDiscPct, a.PartDiscPct
     , a.ServiceRequestDesc, a.ConfirmChangingPart, a.EstimateFinishDate
     , a.MaterialDiscPct, a.JobType, a.ForemanID, a.MechanicID
     , a.ServiceStatus
	 , @LaborDppAmt LaborDppAmt, @PartsDppAmt PartsDppAmt, @MaterialDppAmt MaterialDppAmt
	 , @TotalDppAmt TotalDppAmt, @TotalPpnAmt TotalPpnAmt
	 , @TotalSrvAmt TotalSrvAmt
	 , a.LaborDppAmt SrvLaborDppAmt, a.PartsDppAmt SrvPartsDppAmt, a.MaterialDppAmt SrvMaterialDppAmt
	 , a.TotalDppAmount SrvTotalDppAmt, a.TotalPpnAmount SrvTotalPpnAmt
	 , a.TotalSrvAmount SrvTotalSrvAmt
  from svTrnService a with (nowait,nolock)
  left join omMstRefference b with (nowait,nolock)
    on b.CompanyCode = a.CompanyCode
   and b.RefferenceType = 'COLO'
   and b.RefferenceCode = a.ColorCode
  left join gnMstCustomer c with (nowait,nolock)
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
  left join gnMstLookupDtl d with (nowait,nolock)
    on d.CompanyCode = a.CompanyCode
   and d.CodeID = 'CITY'
   and d.LookUpValue = c.CityCode
  left join gnMstCustomer e with (nowait,nolock)
    on e.CompanyCode = a.CompanyCode
   and e.CustomerCode = a.CustomerCodeBill
  left join gnMstLookupDtl f with (nowait,nolock)
    on f.CompanyCode = a.CompanyCode
   and f.CodeID = 'CITY'
   and f.LookUpValue = e.CityCode
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.BranchCode  = @BranchCode
   and a.ServiceNo   = (select ServiceNo from #srv)
) 
select a.CompanyCode, a.BranchCode, a.ProductType, JobOrderNo, a.ServiceNo, a.ServiceType
     , a.EstimationNo, a.EstimationDate, a.BookingNo, a.BookingDate, a.JobOrderNo, a.JobOrderDate
     , '' InvoiceNo
     -- Data Kendaraan
     , a.PoliceRegNo, a.ServiceBookNo, a.BasicModel, a.TransmissionType
     , a.ChassisCode, a.ChassisNo, a.EngineCode, a.EngineNo
     , a.ColorCode, a.ColorCodeDesc, a.Odometer
     -- Data Contract
     , b.IsContractStatus IsContract
     , b.ContractNo
	 , c.EndPeriod ContractEndPeriod
	 , c.IsActive ContractStatus
	 , case b.IsContractStatus 
		when 1 then (case c.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
		else ''
	   end ContractStatusDesc
     -- Data Contract
	 , b.IsClubStatus IsClub
	 , b.ClubCode
	 , b.ClubDateFinish ClubEndPeriod
	 , d.IsActive ClubStatus
	 , case b.IsClubStatus
		when 1 then (case d.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
		else ''
	   end ClubStatusDesc
     -- Data Customer
     , a.CustomerCode, a.CustomerName
     , a.CustAddr1, a.CustAddr2, a.CustAddr3, a.CustAddr4
     , a.CityCode, a.CityName
     -- Data Customer Bill
     , a.InsurancePayFlag, a.InsuranceOwnRisk, a.InsuranceNo, a.InsuranceJobOrderNo
     , a.CustomerCodeBill, a.CustomerNameBill
     , a.CustAddr1Bill, a.CustAddr2Bill, a.CustAddr3Bill, a.CustAddr4Bill
     , a.CityCodeBill, a.CityNameBill
     , a.PhoneNo, a.FaxNo, a.HPNo
     , a.LaborDiscPct, a.PartDiscPct, a.PartDiscPct PartsDiscPct, a.MaterialDiscPct
     --, IsPPnBill
     -- Data Pekerjaan
     , a.ServiceRequestDesc
     , a.JobType, e.Description JobTypeDesc
     , a.ConfirmChangingPart, a.EstimateFinishDate
     , a.ForemanID, g.EmployeeName ForemanName
	 , a.MechanicID, h.EmployeeName MechanicName
	 -- Data Total Biaya Perawatan
     , a.LaborDppAmt, a.PartsDppAmt, a.MaterialDppAmt, a.TotalDppAmt
     , a.TotalPpnAmt, a.TotalSrvAmt
     , a.SrvLaborDppAmt, a.SrvPartsDppAmt, a.SrvMaterialDppAmt, a.SrvTotalDppAmt
     , a.SrvTotalPpnAmt, a.SrvTotalSrvAmt

     , a.ServiceStatus
	 , f.Description ServiceStatusDesc
	 , isnull(i.TaxCode,'') TaxCode
	 , isnull(j.TaxPct,0) TaxPct
  from t1 a
  left join svMstCustomerVehicle b with (nowait,nolock)
    on b.CompanyCode = a.CompanyCode
   and b.ChassisCode = a.ChassisCode
   and b.ChassisNo = a.ChassisNo
  left join svMstContract c with (nowait,nolock)
    on c.CompanyCode = a.CompanyCode
   and c.ContractNo = b.ContractNo
   and b.IsContractStatus = 1
  left join svMstClub d with (nowait,nolock)
    on d.CompanyCode = a.CompanyCode
   and d.ClubCode = b.ClubCode
  left join SvMstRefferenceService e with (nowait,nolock)
    on e.CompanyCode = a.CompanyCode
   and e.ProductType = a.ProductType
   and e.RefferenceCode = a.JobType
   and e.RefferenceType = 'JOBSTYPE'
  left join SvMstRefferenceService f with (nowait,nolock)
    on f.CompanyCode = a.CompanyCode
   and f.ProductType = a.ProductType
   and f.RefferenceCode = a.ServiceStatus
   and f.RefferenceType = 'SERVSTAS'
  left join gnMstEmployee g with (nowait,nolock)
    on g.CompanyCode = a.CompanyCode
   and g.BranchCode = a.BranchCode
   and g.EmployeeID = a.ForemanID
  left join gnMstEmployee h with (nowait,nolock)
    on h.CompanyCode = a.CompanyCode
   and h.BranchCode = a.BranchCode
   and h.EmployeeID = a.MechanicID
  left join gnMstCustomerProfitCenter i with (nowait,nolock)
    on i.CompanyCode = a.CompanyCode
   and i.BranchCode = a.BranchCode
   and i.CustomerCode = a.CustomerCode
   and i.ProfitCenterCode = '200'
  left join gnMstTax j with (nowait,nolock)
    on j.CompanyCode = a.CompanyCode
   and j.TaxCode = i.TaxCode
end try
begin catch
    set @errmsg = 'Error Message:' + char(13) + error_message()
    raiserror (@errmsg,16,1);
	drop table #srv
end catch
GO
if object_id('uspfn_GenerateBPSLampiranNew') is not null
	drop procedure uspfn_GenerateBPSLampiranNew
GO
CREATE procedure [dbo].[uspfn_GenerateBPSLampiranNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--DECLARE	@CompanyCode	VARCHAR(MAX),
--		@BranchCode		VARCHAR(MAX),
--		@JobOrderNo		VARCHAR(MAX),
--		@ProductType	VARCHAR(MAX),
--		@CustomerCode	VARCHAR(MAX),
--		@UserID			VARCHAR(MAX),
--		@PickedBy		VARCHAR(MAX)

--SET	@CompanyCode	= '6156401000'
--SET	@BranchCode		= '6156401001'
--SET	@JobOrderNo		= 'SPK/15/001666'
--SET	@ProductType	= '4W'
--SET	@CustomerCode	= '0032710'
--SET	@UserID			= 'ga'
--SET	@PickedBy		= '0004'
		
--exec uspfn_GenerateBPSLampiranNew '6006400001','6006400101','SPK/14/101625','4W','JKT-1852626','ga','00001'

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement

DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl

UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================
SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	

--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	DECLARE @CompanyMD AS VARCHAR(15)
	DECLARE @BranchMD AS VARCHAR(15)
	DECLARE @WarehouseMD AS VARCHAR(15)

	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @validString varchar(max)

declare @valid_2 table(
PartNo varchar(15),
QtyValidSR NUMERIC(18,2),
QtyValidOnhand NUMERIC(18,2)
)
    set @validString ='SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM '+ @DbMD +'..SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = '''+ @CompanyMD +'''
		AND a.BranchCode = '''+ @BranchMD+'''
		AND b.PickingSlipNo = '''+@PickingSlipNo+'''
		--AND a.CompanyCode = b.CompanyCode
		--AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo'
	
	--print(@validString)
	insert into @valid_2 exec(@validString)

select * from @valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM @valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM @valid_2 WHERE QtyValidOnhand < 0),0)
	select @Allocation_SRValid
	select @Onhand_SRValid

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		
		CLOSE db_cursor
		DEALLOCATE db_cursor 
		
		DROP TABLE #TempPickingSlipDtl
		DROP TABLE #TempPickingSlipHdr
		
		RAISERROR (@errmsg,16,1);
		
		RETURN
	END
--===============================================================================================================================

--DECLARE @DbMD AS VARCHAR(15)
--SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'UPDATE '+@DbMD+'..SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM ' + @DbMD + '..SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
UPDATE '+ @DbMD +'..SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
FROM ' + @DbMD + '..SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND a.WarehouseCode = ' + ''''+@WarehouseMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo'

EXEC(@query)
	--print(@query)
--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

--===============================================================================================================================
-- INSERT INTO svSDMovement
--===============================================================================================================================
	set @Query = '
	insert into ' + @DbMD + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq
	, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice
	, TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD
	, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus
	, ProcessDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)  
	select h.CompanyCode, h.BranchCode, h.LmpNo, h.LmpDate, d.PartNo, ROW_NUMBER() OVER(Order by d.LmpNo)
	,d.WarehouseCode, d.QtyBill, d.QtyBill, d.DiscPct, d.CostPrice, d.RetailPrice
	,h.TypeOfGoods, ''' + @CompanyMD + ''', ''' + @BranchMD + ''', ''' + @WarehouseMD + ''', d.RetailPriceInclTax, d.RetailPrice, 
	d.CostPrice,''x'', d.ProductType,''300'', ''0'',''0'',''' + convert(varchar, GETDATE()) + ''',''' + @UserID + ''',''' +
	  convert(varchar, GETDATE()) + ''',''' +  @UserID + ''',''' +  convert(varchar, GETDATE()) + '''
	 from spTrnSLmpDtl d inner join spTrnSLmpHdr h on h.LmpNo = d.LmpNo  
	  where 1 = 1   
		and d.CompanyCode = ''' + @CompanyCode + ''' 
		and d.BranchCode  = ''' + @BranchCode  + '''
		and d.ProductType = ''' + @ProductType  + '''
		and d.LmpNo = ''' + @TempLmpNo + '''';
	
	exec(@Query);

FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode


--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
end

--rollback tran
GO
if object_id('uspfn_SvTrnInvoiceCreate') is not null
	drop procedure uspfn_SvTrnInvoiceCreate
GO
CREATE procedure [dbo].[uspfn_SvTrnInvoiceCreate]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   int,
	@BillType    char(1),
	@InvoiceNo   varchar(15),
	@Remarks     varchar(max),
	@UserID      varchar(15)
as  

declare @errmsg varchar(max)
--raiserror ('test error',16,1);

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)
DECLARE @DbMD AS VARCHAR(15)
declare @md bit

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


-- get data from service
select * into #srv from(
  select * from svTrnService
   where 1 = 1
     and CompanyCode = @CompanyCode
     and BranchCode  = @BranchCode
     and ProductType = @ProductType
     and ServiceNo   = @ServiceNo
 )#srv

-- get data from task
select * into #tsk from(
  select a.* from svTrnSrvTask a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#tsk

-- get data from item
select * into #mec from(
  select a.* from svTrnSrvMechanic a, #tsk b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.OperationNo = b.OperationNo
     and a.OperationNo <> ''
 )#mec

-- get data from item
select * into #itm from(
  select a.* from svTrnSrvItem a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#itm

-- create temporary table detail
create table #pre_dtl(
	BillType char(1),
	TaskPartType char(1),
	TaskPartNo varchar(20),
	TaskPartQty numeric(10,2),
	SupplySlipNo varchar(20)
)

insert into #pre_dtl
select BillType, 'L', OperationNo, OperationHour, ''
  from #tsk

insert into #pre_dtl
select BillType, TypeOfGoods, PartNo
	 , sum(SupplyQty - ReturnQty)
	 , SupplySlipNo
  from #itm
 where BillType = @BillType
   and (SupplyQty - ReturnQty) > 0
 group by BillType, TypeOfGoods, PartNo, SupplySlipNo

-- insert to table svTrnInvoice
declare @CustomerCode varchar(20)
if @BillType = 'C'
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end
else if @BillType = 'P'
begin
	set @CustomerCode = (select top 1 a.BillTo from svMstPackage a
				 inner join svMstPackageTask b
					on b.CompanyCode = a.CompanyCode
				   and b.PackageCode = a.PackageCode
				 inner join svMstPackageContract c
					on c.CompanyCode = a.CompanyCode
				   and c.PackageCode = a.PackageCode
				 inner join #srv d
					on d.CompanyCode = a.CompanyCode
				   and d.JobType = a.JobType
				   and d.ChassisCode = c.ChassisCode
				   and d.ChassisNo = c.ChassisNo)
end
else if @BillType in ('F', 'W', 'S')
begin
	set @CustomerCode = (select CustomerCode from svMstBillingType
				 where BillType in ('F', 'W', 'S')
				   and CompanyCode = @CompanyCode
				   and BillType = @BillType)
end
else
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end

--set @CustomerCode = isnull((
--				select top 1 a.BillTo from svMstPackage a
--				 inner join svMstPackageTask b
--					on b.CompanyCode = a.CompanyCode
--				   and b.PackageCode = a.PackageCode
--				 inner join svMstPackageContract c
--					on c.CompanyCode = a.CompanyCode
--				   and c.PackageCode = a.PackageCode
--				 inner join #srv d
--					on d.CompanyCode = a.CompanyCode
--				   and d.JobType = a.JobType
--				   and d.ChassisCode = c.ChassisCode
--				   and d.ChassisNo = c.ChassisNo
--				), isnull((
--				select CustomerCode from svMstBillingType
--				 where BillType in ('F')
--				   and CompanyCode = @CompanyCode
--				   and BillType = @BillType
--				), isnull((select CustomerCodeBill from #srv), '')))


if ((select count(*) from #tsk) = 0 and (select count(*) from #itm) = 0)
begin
	drop table #srv
	drop table #tsk
	drop table #mec
	drop table #itm
	drop table #pre_dtl
	return
end

if (@CustomerCode = '')
begin
	set @errmsg = N'Customer Code Bill belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

select * into #cus from (
select a.CompanyCode, a.IsPkp, b.CustomerCode, b.LaborDiscPct, b.PartDiscPct, b.MaterialDiscPct, b.TopCode, b.TaxCode
  from gnMstCustomer a, gnMstCustomerProfitCenter b
 where 1 = 1
   and b.CompanyCode  = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.CompanyCode  = @CompanyCode
   and b.BranchCode   = @BranchCode
   and b.CustomerCode = @CustomerCode
   and b.ProfitCenterCode = '200'
)#cus

if (select count(*) from #cus) <> 1
begin
	set @errmsg = N'Customer ProfitCenter belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

declare @IsPKP bit
    set @IsPKP = isnull((
				 select IsPKP from gnMstCustomer
				  where CompanyCode  = @CompanyCode
				    and CustomerCode = @CustomerCode
				  ), 0)

declare @PPnPct decimal
    set @PPnPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPN'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)

declare @PPhPct decimal
    set @PPhPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPH'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)


-- Insert Into svTrnInvoice
-----------------------------------------------------------------------------------------
insert into svTrnInvoice(
  CompanyCode, BranchCode, ProductType
, InvoiceNo, InvoiceDate, InvoiceStatus
, FPJNo, FPJDate, JobOrderNo, JobOrderDate, JobType
, ServiceRequestDesc, ChassisCode, ChassisNo, EngineCode, EngineNo
, PoliceRegNo, BasicModel, CustomerCode, CustomerCodeBill, Odometer
, IsPKP, TOPCode, TOPDays, DueDate, SignedDate
, LaborDiscPct, PartsDiscPct, MaterialDiscPct, PphPct, PpnPct, Remarks
, PrintSeq, PostingFlag, IsLocked, CreatedBy, CreatedDate
) 
select
  @CompanyCode CompanyCode
, @BranchCode BranchCode
, @ProductType ProductType
, @InvoiceNo InvoiceNo
, getdate() InvoiceDate
, case @IsPKP
	when '0' then '1'
	else (case @BillType when 'F' then '0' when 'W' then '0' else '1' end)
  end as InvoiceStatus
, '' FPJNo
, null FPJDate
, (select JobOrderNo from #srv) JobOrderNo
, (select JobOrderDate from #srv) JobOrderDate
, (select JobType from #srv) JobType
, (select ServiceRequestDesc from #srv) ServiceRequestDesc
, (select ChassisCode from #srv) ChassisCode
, (select ChassisNo from #srv) ChassisNo
, (select EngineCode from #srv) EngineCode
, (select EngineNo from #srv) EngineNo
, (select PoliceRegNo from #srv) PoliceRegNo
, (select BasicModel from #srv) BasicModel
, (select CustomerCode from #srv) CustomerCode
, @CustomerCode as CustomerCodeBill
, (select Odometer from #srv) Odometer
, (select IsPKP from #cus) as IsPKP
, (select TopCode from #cus) as TOPCode
, isnull((
	select b.ParaValue
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue = a.TopCode
	), null) as TOPDays
, isnull((
	select dateadd(day, convert(int,b.ParaValue), convert(varchar, getdate(), 112))
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue  = a.TopCode
	), null) as DueDate
, convert(varchar, getdate(), 112) SignedDate
, case @BillType
	when 'F' then (select LaborDiscPct from #cus) 
    when 'W' then (select LaborDiscPct from #cus) 
    else (select LaborDiscPct from #srv) 
  end as LaborDiscPct
, case @BillType
	when 'F' then (select PartDiscPct from #cus) 
    when 'W' then (select PartDiscPct from #cus) 
    else (select PartDiscPct from #srv) 
  end as PartsDiscPct
, case @BillType
	when 'F' then (select MaterialDiscPct from #cus) 
    when 'W' then (select MaterialDiscPct from #cus) 
    else (select MaterialDiscPct from #srv) 
  end as MaterialDiscPct
, @PPnPct as PPhPct
, @PPnPct as PPnPct
, @Remarks as Remarks
, '0' PrintSeq
, '0' PostingFlag
, '0' IsLocked
, @UserID CreatedBy
, getdate() CreatedDate

-- Insert Into svTrnInvTask
-----------------------------------------------------------------------------------------
insert into svTrnInvTask (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, OperationHour, ClaimHour, OperationCost, SubConPrice
, IsSubCon, SharingTask, DiscPct
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, isnull(OperationHour, 0) OperationHour, isnull(ClaimHour, 0) ClaimHour
, isnull(OperationCost, 0) OperationCost, isnull(SubConPrice, 0) SubConPrice
, isnull(IsSubCon, 0) IsSubCon, isnull(SharingTask, 0) SharingTask
, isnull(DiscPct, 0)
from #tsk

-- Insert Into svTrnInvMechanic
-----------------------------------------------------------------------------------------
insert into svTrnInvMechanic (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
from #mec

-- Insert Into svTrnInvItem
-----------------------------------------------------------------------------------------
Declare @Query varchar(max)

set @Query = 'select * into #itm1 from (
select CompanyCode, BranchCode, ProductType, '''+ @InvoiceNo +''' as InvoiceNo, PartNo
	 , isnull((
		select MovingCode from '+ @DbMD +'..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '') as MovingCode
	 , isnull((
		select ABCClass from '+ @DbMD +' ..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '') as ABCClass
	 , sum(SupplyQty - ReturnQty) as SupplyQty
	 , isnull((
		select 
		  case (sum(b.SupplyQty - b.ReturnQty))
			 when 0 then 0
			 else sum(a.CostPrice * (b.SupplyQty - b.ReturnQty)) / sum(b.SupplyQty - b.ReturnQty)
		  end 
	from SpTrnSLmpDtl a
	left join SvTrnSrvItem b on 1 = 1
	 and b.CompanyCode  = a.CompanyCode
	 and b.BranchCode   = a.BranchCode
	 and b.ProductType  = a.ProductType
	 and b.SupplySlipNo = a.DocNo
	 and b.PartNo = #itm.PartNo
	where 1 = 1
	 and a.CompanyCode = '''+ @CompanyCode +'''
	 and a.BranchCode  = '''+ @BranchCode +'''
	 and a.ProductType = '''+ @ProductType +'''
	 and a.PartNo = #itm.PartNo
	 and a.DocNo in (
			select SupplySlipNo
			 from SvTrnSrvItem
			where 1 = 1
			  and CompanyCode = '''+ @CompanyCode +'''
			  and BranchCode  = '''+ @BranchCode +'''
			  and ProductType = '''+ @ProductType +'''
			  and ServiceNo = '''+ Convert(varchar,@ServiceNo) +'''
			  and PartNo = #itm.PartNo
			)
	), 0) as CostPrice
, RetailPrice
, TypeOfGoods
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, RetailPrice, TypeOfGoods
)#

insert into svTrnInvItem (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo
, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice
, TypeOfGoods, DiscPct
)
select a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo
	 , MovingCode = (select top 1 MovingCode from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , ABCClass = (select top 1 ABCClass from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , sum(SupplyQty) as SupplyQty, 0 as ReturnQty
	 , CostPrice = (select top 1 CostPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by CostPrice desc)
	 , RetailPrice = (select top 1 RetailPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by RetailPrice desc)
	 , TypeOfGoods = (select top 1 TypeOfGoods from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , DiscPct = (select top 1 DiscPct from #itm where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
  from #itm1 a
 where a.SupplyQty > 0
 group by a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo'

-- Insert Into svTrnInvItemDtl
-----------------------------------------------------------------------------------------
insert into svTrnInvItemDtl (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, SupplySlipNo
, SupplyQty, CostPrice, CreatedBy, CreatedDate
)
select y.* from (
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, PartNo, SupplySlipNo
, sum(SupplyQty - ReturnQty) as SupplyQty, CostPrice
, @UserID as CreatedBy, getdate() as CreatedDate
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, SupplySlipNo, CostPrice
) y
where y.SupplyQty > 0

-- Re Calculate Invoice

-----------------------------------------------------------------------------------------
exec uspfn_SvTrnInvoiceReCalculate @CompanyCode=@CompanyCode, @BranchCode=@BranchCode, @ProductType=@ProductType, @InvoiceNo=@InvoiceNo, @UserId=@UserId
-- Insert svsdmovement
-----------------------------------------------------------------------------------------

 if(@md = 0)
 begin

 set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, '''+ convert(varchar,@InvoiceNo) +''','''+ convert(varchar,GETDATE()) +''', a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ServiceNo order by a.ServiceNo)) ,
''00'', a.DemandQty, a.DemandQty, a.DiscPct, a.CostPrice, a.RetailPrice, a.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
,''x'','''+ @producttype +''',''300'',''8'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from svTrnSrvItem a 
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ServiceNo = '''+ convert(varchar,@ServiceNo) +''''

exec (@Query)

end

drop table #srv
drop table #tsk
drop table #mec
drop table #itm
drop table #cus

drop table #pre_dtl
GO
if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        
  
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6006400001'  
--set @BranchCode = '6006400101'  
--set @ProductType = '4W'  
--set @ServiceNo = 43545  
--set @BillType = 'C'  
--set @PartNo = '99000-990C5-A03'  
--set @DemandQty = 2  
--set @PartSeq = -1  
--set @UserID = 'demo'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin  
  select * into #part from (  
  select   
    a.CostPrice   
   ,a.RetailPrice  
    from spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
  )#part  
    
  set @CostPrice = (select CostPrice from #part)  
  set @RetailPrice = (select RetailPrice from #part)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = @PartNo  
            and b.BillType = 'F'  
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from spMstItemPrice  
           where 1 = 1  
             and CompanyCode = @CompanyCode  
             and BranchCode = @BranchCode  
             and PartNo = @PartNo  
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq  
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    --if (@DealerCode = 'SD')  
	 --begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  --end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    @CompanyCode CompanyCode  
   ,@BranchCode BranchCode  
   ,@ProductType ProductType  
   ,@ServiceNo ServiceNo  
   ,a.PartNo  
   ,@PartSeqNew  
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,@DemandQty DemandQty  
   ,'0' SupplyQty  
   ,'0' ReturnQty  
   ,@CostPrice  
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,@BillType BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,@DiscPct  
   ,(select MechanicID from svTrnService where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ServiceNo = @ServiceNo)  
    from spMstItemPrice a,spMstItems b, #srv c  
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
        and b.CompanyCode = c.CompanyCode  
     and b.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.PartNo      = @PartNo  
       
  --select   @CostPrice   
  --if (@DealerCode = 'SD')  
  --begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
   
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
     	,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  --end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 --if (@DealerCode = 'SD')  
 --begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 --end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  
GO
if object_id('uspfn_SvTrnServiceSelectPesananPekerjaanLuar') is not null
	drop procedure uspfn_SvTrnServiceSelectPesananPekerjaanLuar
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSelectPesananPekerjaanLuar]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15),
	@ShowAll bit
AS
-- EXEC uspfn_SvTrnServiceSelectPesananPekerjaanLuar '6156401000', '6156401001', '4W', '0'

declare @Query varchar(max)
declare @Condition varchar(4000);

set @Condition = '';
if(@ShowAll = 0) begin
	set @Condition = ' AND svTrnService.ServiceStatus IN (0,1,2,3,4) 
		AND srvTask.PONo = '''' AND srvTask.ServiceNo IS NOT NULL AND srvTask.IsSubCon = 1 ';
end 

set @Query = '
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + '' '' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + '' '' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + '' - '' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + '' - '' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus=''4'' then
            case when ''' + @ProductType + '''=''4W'' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '''' + custBill.Address2 + '''' + custBill.Address3 + '''' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = ''SERVSTAS''
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = ''' + @CompanyCode + '''
    AND svTrnService.BranchCode = ''' + @BranchCode + '''
 AND svTrnService.ServiceType = ''2''' + @Condition+ ' ORDER BY svTrnService.JobOrderNo DESC';

EXEC (@Query)
GO
if object_id('uspfn_omSlsInvLkpSO') is not null
	drop procedure uspfn_omSlsInvLkpSO
GO
CREATE procedure [dbo].[uspfn_omSlsInvLkpSO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS  
BEGIN  
-- exec uspfn_omSlsInvLkpSO 6006410,600641001
    SELECT tableA.SONo,tableA.QtyBPK,tableA.QtyInvoice, tableB.CustomerCode, tableB.CustomerName, tableB.BillTo, tableB.BillName,
				tableB.Address,tableB.SalesType,tableB.SalesTypeDsc,tableB.TOPDays, tableB.SKPKNo, tableB.RefferenceNo				
      FROM (SELECT a.SONo, sum (b.QuantityBPK)  AS QtyBPK, sum (b.QuantityInvoice)  AS QtyInvoice                   
              FROM omTrSalesBPK a, omTrSalesBPKModel b
             WHERE a.CompanyCode = b.CompanyCode
                   AND a.BranchCode = b.BranchCode
                   AND a.BPKNo = b.BPKNo
                   AND a.CompanyCode = @CompanyCode
                   AND a.BranchCode = @BranchCode
                   AND a.Status = '2'
             GROUP BY a.SONo) tableA,
           (SELECT a.SONo, a.CustomerCode, b.CustomerName, a.BillTo, b.CustomerName as BillName,
			b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address,a.SalesType
            , (CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'WholeSales' ELSE 'Direct' END) AS SalesTypeDsc
            , ISNULL(a.TOPDays, 0) AS TOPDays, a.SKPKNo, a.RefferenceNo
              FROM omTrSalesSO a
			  LEFT JOIN gnMstCustomer b ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
             WHERE a.CompanyCode = @CompanyCode
                   AND a.BranchCode = @BranchCode
                   AND a.Status = '2') tableB
    WHERE tableA.QtyBPK > tableA.QtyInvoice AND tableA.SONo = tableB.SONo AND tableA.SONo NOT IN (SELECT z.SONo FROM omTrSalesInvoice z)
    
	ORDER BY tableA.SONo
END
GO


if object_id('uspfn_SvTrnInvoiceCreate') is not null
	drop procedure uspfn_SvTrnInvoiceCreate
GO
CREATE procedure [dbo].[uspfn_SvTrnInvoiceCreate]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   int,
	@BillType    char(1),
	@InvoiceNo   varchar(15),
	@Remarks     varchar(max),
	@UserID      varchar(15)
as  

declare @errmsg varchar(max)
--raiserror ('test error',16,1);

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)
DECLARE @DbMD AS VARCHAR(15)
declare @md bit

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

  declare @PurchaseDisc as decimal
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
   if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);   


-- get data from service
select * into #srv from(
  select * from svTrnService
   where 1 = 1
     and CompanyCode = @CompanyCode
     and BranchCode  = @BranchCode
     and ProductType = @ProductType
     and ServiceNo   = @ServiceNo
 )#srv

-- get data from task
select * into #tsk from(
  select a.* from svTrnSrvTask a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#tsk

-- get data from item
select * into #mec from(
  select a.* from svTrnSrvMechanic a, #tsk b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.OperationNo = b.OperationNo
     and a.OperationNo <> ''
 )#mec

-- get data from item
select * into #itm from(
  select a.* from svTrnSrvItem a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#itm

-- create temporary table detail
create table #pre_dtl(
	BillType char(1),
	TaskPartType char(1),
	TaskPartNo varchar(20),
	TaskPartQty numeric(10,2),
	SupplySlipNo varchar(20)
)

insert into #pre_dtl
select BillType, 'L', OperationNo, OperationHour, ''
  from #tsk

insert into #pre_dtl
select BillType, TypeOfGoods, PartNo
	 , sum(SupplyQty - ReturnQty)
	 , SupplySlipNo
  from #itm
 where BillType = @BillType
   and (SupplyQty - ReturnQty) > 0
 group by BillType, TypeOfGoods, PartNo, SupplySlipNo

-- insert to table svTrnInvoice
declare @CustomerCode varchar(20)
if @BillType = 'C'
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end
else if @BillType = 'P'
begin
	set @CustomerCode = (select top 1 a.BillTo from svMstPackage a
				 inner join svMstPackageTask b
					on b.CompanyCode = a.CompanyCode
				   and b.PackageCode = a.PackageCode
				 inner join svMstPackageContract c
					on c.CompanyCode = a.CompanyCode
				   and c.PackageCode = a.PackageCode
				 inner join #srv d
					on d.CompanyCode = a.CompanyCode
				   and d.JobType = a.JobType
				   and d.ChassisCode = c.ChassisCode
				   and d.ChassisNo = c.ChassisNo)
end
else if @BillType in ('F', 'W', 'S')
begin
	set @CustomerCode = (select CustomerCode from svMstBillingType
				 where BillType in ('F', 'W', 'S')
				   and CompanyCode = @CompanyCode
				   and BillType = @BillType)
end
else
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end

--set @CustomerCode = isnull((
--				select top 1 a.BillTo from svMstPackage a
--				 inner join svMstPackageTask b
--					on b.CompanyCode = a.CompanyCode
--				   and b.PackageCode = a.PackageCode
--				 inner join svMstPackageContract c
--					on c.CompanyCode = a.CompanyCode
--				   and c.PackageCode = a.PackageCode
--				 inner join #srv d
--					on d.CompanyCode = a.CompanyCode
--				   and d.JobType = a.JobType
--				   and d.ChassisCode = c.ChassisCode
--				   and d.ChassisNo = c.ChassisNo
--				), isnull((
--				select CustomerCode from svMstBillingType
--				 where BillType in ('F')
--				   and CompanyCode = @CompanyCode
--				   and BillType = @BillType
--				), isnull((select CustomerCodeBill from #srv), '')))


if ((select count(*) from #tsk) = 0 and (select count(*) from #itm) = 0)
begin
	drop table #srv
	drop table #tsk
	drop table #mec
	drop table #itm
	drop table #pre_dtl
	return
end

if (@CustomerCode = '')
begin
	set @errmsg = N'Customer Code Bill belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

select * into #cus from (
select a.CompanyCode, a.IsPkp, b.CustomerCode, b.LaborDiscPct, b.PartDiscPct, b.MaterialDiscPct, b.TopCode, b.TaxCode
  from gnMstCustomer a, gnMstCustomerProfitCenter b
 where 1 = 1
   and b.CompanyCode  = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.CompanyCode  = @CompanyCode
   and b.BranchCode   = @BranchCode
   and b.CustomerCode = @CustomerCode
   and b.ProfitCenterCode = '200'
)#cus

if (select count(*) from #cus) <> 1
begin
	set @errmsg = N'Customer ProfitCenter belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

declare @IsPKP bit
    set @IsPKP = isnull((
				 select IsPKP from gnMstCustomer
				  where CompanyCode  = @CompanyCode
				    and CustomerCode = @CustomerCode
				  ), 0)

declare @PPnPct decimal
    set @PPnPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPN'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)

declare @PPhPct decimal
    set @PPhPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPH'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)


-- Insert Into svTrnInvoice
-----------------------------------------------------------------------------------------
insert into svTrnInvoice(
  CompanyCode, BranchCode, ProductType
, InvoiceNo, InvoiceDate, InvoiceStatus
, FPJNo, FPJDate, JobOrderNo, JobOrderDate, JobType
, ServiceRequestDesc, ChassisCode, ChassisNo, EngineCode, EngineNo
, PoliceRegNo, BasicModel, CustomerCode, CustomerCodeBill, Odometer
, IsPKP, TOPCode, TOPDays, DueDate, SignedDate
, LaborDiscPct, PartsDiscPct, MaterialDiscPct, PphPct, PpnPct, Remarks
, PrintSeq, PostingFlag, IsLocked, CreatedBy, CreatedDate
) 
select
  @CompanyCode CompanyCode
, @BranchCode BranchCode
, @ProductType ProductType
, @InvoiceNo InvoiceNo
, getdate() InvoiceDate
, case @IsPKP
	when '0' then '1'
	else (case @BillType when 'F' then '0' when 'W' then '0' else '1' end)
  end as InvoiceStatus
, '' FPJNo
, null FPJDate
, (select JobOrderNo from #srv) JobOrderNo
, (select JobOrderDate from #srv) JobOrderDate
, (select JobType from #srv) JobType
, (select ServiceRequestDesc from #srv) ServiceRequestDesc
, (select ChassisCode from #srv) ChassisCode
, (select ChassisNo from #srv) ChassisNo
, (select EngineCode from #srv) EngineCode
, (select EngineNo from #srv) EngineNo
, (select PoliceRegNo from #srv) PoliceRegNo
, (select BasicModel from #srv) BasicModel
, (select CustomerCode from #srv) CustomerCode
, @CustomerCode as CustomerCodeBill
, (select Odometer from #srv) Odometer
, (select IsPKP from #cus) as IsPKP
, (select TopCode from #cus) as TOPCode
, isnull((
	select b.ParaValue
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue = a.TopCode
	), null) as TOPDays
, isnull((
	select dateadd(day, convert(int,b.ParaValue), convert(varchar, getdate(), 112))
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue  = a.TopCode
	), null) as DueDate
, convert(varchar, getdate(), 112) SignedDate
, case @BillType
	when 'F' then (select LaborDiscPct from #cus) 
    when 'W' then (select LaborDiscPct from #cus) 
    else (select LaborDiscPct from #srv) 
  end as LaborDiscPct
, case @BillType
	when 'F' then (select PartDiscPct from #cus) 
    when 'W' then (select PartDiscPct from #cus) 
    else (select PartDiscPct from #srv) 
  end as PartsDiscPct
, case @BillType
	when 'F' then (select MaterialDiscPct from #cus) 
    when 'W' then (select MaterialDiscPct from #cus) 
    else (select MaterialDiscPct from #srv) 
  end as MaterialDiscPct
, @PPnPct as PPhPct
, @PPnPct as PPnPct
, @Remarks as Remarks
, '0' PrintSeq
, '0' PostingFlag
, '0' IsLocked
, @UserID CreatedBy
, getdate() CreatedDate

-- Insert Into svTrnInvTask
-----------------------------------------------------------------------------------------
insert into svTrnInvTask (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, OperationHour, ClaimHour, OperationCost, SubConPrice
, IsSubCon, SharingTask, DiscPct
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, isnull(OperationHour, 0) OperationHour, isnull(ClaimHour, 0) ClaimHour
, isnull(OperationCost, 0) OperationCost, isnull(SubConPrice, 0) SubConPrice
, isnull(IsSubCon, 0) IsSubCon, isnull(SharingTask, 0) SharingTask
, isnull(DiscPct, 0)
from #tsk

-- Insert Into svTrnInvMechanic
-----------------------------------------------------------------------------------------
insert into svTrnInvMechanic (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
from #mec

-- Insert Into svTrnInvItem
-----------------------------------------------------------------------------------------
Declare @Query varchar(max)

set @Query = 'select * into #itm1 from (
select CompanyCode, BranchCode, ProductType, '''+ @InvoiceNo +''' as InvoiceNo, PartNo
	 , isnull((
		select MovingCode from '+ @DbMD +'..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '') as MovingCode
	 , isnull((
		select ABCClass from '+ @DbMD +' ..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '') as ABCClass
	 , sum(SupplyQty - ReturnQty) as SupplyQty
	 , isnull((
		select 
		  case (sum(b.SupplyQty - b.ReturnQty))
			 when 0 then 0
			 else sum(a.CostPrice * (b.SupplyQty - b.ReturnQty)) / sum(b.SupplyQty - b.ReturnQty)
		  end 
	from SpTrnSLmpDtl a
	left join SvTrnSrvItem b on 1 = 1
	 and b.CompanyCode  = a.CompanyCode
	 and b.BranchCode   = a.BranchCode
	 and b.ProductType  = a.ProductType
	 and b.SupplySlipNo = a.DocNo
	 and b.PartNo = #itm.PartNo
	where 1 = 1
	 and a.CompanyCode = '''+ @CompanyCode +'''
	 and a.BranchCode  = '''+ @BranchCode +'''
	 and a.ProductType = '''+ @ProductType +'''
	 and a.PartNo = #itm.PartNo
	 and a.DocNo in (
			select SupplySlipNo
			 from SvTrnSrvItem
			where 1 = 1
			  and CompanyCode = '''+ @CompanyCode +'''
			  and BranchCode  = '''+ @BranchCode +'''
			  and ProductType = '''+ @ProductType +'''
			  and ServiceNo = '''+ Convert(varchar,@ServiceNo) +'''
			  and PartNo = #itm.PartNo
			)
	), 0) as CostPrice
, RetailPrice
, TypeOfGoods
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, RetailPrice, TypeOfGoods
)#

insert into svTrnInvItem (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo
, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice
, TypeOfGoods, DiscPct
)
select a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo
	 , MovingCode = (select top 1 MovingCode from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , ABCClass = (select top 1 ABCClass from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , sum(SupplyQty) as SupplyQty, 0 as ReturnQty
	 , CostPrice = (select top 1 CostPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by CostPrice desc)
	 , RetailPrice = (select top 1 RetailPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by RetailPrice desc)
	 , TypeOfGoods = (select top 1 TypeOfGoods from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , DiscPct = (select top 1 DiscPct from #itm where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
  from #itm1 a
 where a.SupplyQty > 0
 group by a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo'

-- Insert Into svTrnInvItemDtl
-----------------------------------------------------------------------------------------
insert into svTrnInvItemDtl (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, SupplySlipNo
, SupplyQty, CostPrice, CreatedBy, CreatedDate
)
select y.* from (
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, PartNo, SupplySlipNo
, sum(SupplyQty - ReturnQty) as SupplyQty, CostPrice
, @UserID as CreatedBy, getdate() as CreatedDate
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, SupplySlipNo, CostPrice
) y
where y.SupplyQty > 0

-- Re Calculate Invoice

-----------------------------------------------------------------------------------------
exec uspfn_SvTrnInvoiceReCalculate @CompanyCode=@CompanyCode, @BranchCode=@BranchCode, @ProductType=@ProductType, @InvoiceNo=@InvoiceNo, @UserId=@UserId
-- Insert svsdmovement
-----------------------------------------------------------------------------------------
 if(@md = 0)
 begin


 set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, '''+ convert(varchar,@InvoiceNo) +''','''+ convert(varchar,GETDATE()) +''', a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ServiceNo order by a.ServiceNo)) ,
''00'', a.DemandQty, a.DemandQty, a.DiscPct, (md.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)), a.RetailPrice, a.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''', md.RetailPriceInclTax, md.RetailPrice, md.CostPrice
,''x'','''+ @producttype +''',''300'',''8'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from svTrnSrvItem a 
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ServiceNo = '''+ convert(varchar,@ServiceNo) +''''

exec (@Query)

end

drop table #srv
drop table #tsk
drop table #mec
drop table #itm
drop table #cus

drop table #pre_dtl
GO
if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        

 
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6156401000'  
--set @BranchCode = '6156401001'  
--set @ProductType = '4W'  
--set @ServiceNo = 49190  
--set @BillType = 'C'  
--set @PartNo = '01107-06127-000'  
--set @DemandQty = 5  
--set @PartSeq = -1  
--set @UserID = 'Trainingzzz'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select RetailPrice from @tblTemp)
  --select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin
 
 declare @tblTempPart as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  

  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
     from ' + @DbName + '..spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTempPart    
  exec (@QueryTemp)  
   
  --select * into #part from (  
  --select   
  --  a.CostPrice   
  -- ,a.RetailPrice  
  --  from spMstItemPrice a  
  -- where 1 = 1  
  --   and a.CompanyCode = @CompanyCode  
  --   and a.BranchCode  = @BranchCode  
  --   and a.PartNo      = @PartNo  
  --)#part  
    
  set @CostPrice = (select CostPrice from @tblTempPart)  
  set @RetailPrice = (select RetailPrice from @tblTempPart)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   set @Querytemp ='
   update svTrnSrvItem set  
     DemandQty      = '+ convert(varchar,@DemandQty) +'
    ,CostPrice      = '+ convert(varchar,@CostPrice) +' 
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = '''+ @PartNo +''' 
            and b.BillType = ''F'' 
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from '+ @DbName +'..spMstItemPrice  
           where 1 = 1  
             and CompanyCode = '''+ @CompanyMD +'''
             and BranchCode = '''+ @BranchMD +'''
             and PartNo = '''+ @PartNo  +'''
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = '''+ @BillType +'''
    ,DiscPct        = '+ convert(varchar,@DiscPct) +'  
    where 1 = 1  
      and CompanyCode  = '''+ @CompanyCode +''' 
      and BranchCode   = '''+ @BranchCode +''' 
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = '''+ @PartNo +''' 
      and PartSeq      = '+ convert(varchar,@PartSeq) +'' 
	  
	  exec(@QueryTemp) 
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    --if (@DealerCode = 'SD')  
	 --begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  --end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  set @QueryTemp='insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    '''+ @CompanyCode +''' CompanyCode  
   ,''' + @BranchCode +''' BranchCode  
   ,'''+ @ProductType +''' ProductType  
   ,'+ convert(varchar,@ServiceNo) +' ServiceNo  
   ,a.PartNo  
   ,'''+ convert(varchar,@PartSeqNew)  +'''
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,'+ convert(varchar,@DemandQty )+' DemandQty  
   ,''0'' SupplyQty  
   ,''0'' ReturnQty  
   ,'+ convert(varchar,isnull(@CostPrice,0))  +'
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,'''+ @BillType +''' BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,'+ convert(varchar,isnull(@DiscPct,0))  +'
   ,(select MechanicID from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo) +')  
    from '+ @DbName +'..spMstItemPrice a, '+ @DbName +'..spMstItems b, #srv c, gnmstcompanymapping d 
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
	 and d.CompanyMd = a.CompanyCode
	 and d.BranchMD = a.BranchCode
        and d.CompanyCode = c.CompanyCode  
     and d.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = '''+ @CompanyMD +'''
     and a.BranchCode  = '''+ @BranchMD +'''
     and a.PartNo      = '''+ @PartNo +''''    
	  exec(@QueryTemp)


  --select   @CostPrice   
  --if (@DealerCode = 'SD')  
  --begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
   
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
     	,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  --end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 --if (@DealerCode = 'SD')  
 --begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 --end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  
GO
if object_id('sp_updateOmTrInventQtyVehicleSO') is not null
	drop procedure sp_updateOmTrInventQtyVehicleSO
GO
CREATE procedure [dbo].[sp_updateOmTrInventQtyVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear varchar(25),
	@ColourCode varchar(25),
	@WarehouseCode varchar(25),
	@Quantity varchar,
	@UserId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	--declare @Month int;
	--declare @Alocation int, @EndingOH int, @EndingAV int
	declare @dbMD varchar(25), @sqlStr varchar(max), @companyMD varchar(25),@branchMD varchar(25);
	
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @companyMD = (select companyMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @branchMD = (select unitBranchMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	
	--set @Month = (select FiscalPeriod from BAT_UAT.dbo.gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		declare @Month int, @Year int;
		declare @Alocation int, @EndingOH int, @EndingAV int;
		
		set @Month = (select Month(PeriodeBeg) from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')
		set @Year = (select Year(PeriodeBeg) from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')

		if exists (select * from '+@dbMD+'.dbo.OmTrInventQtyVehicle 
		where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' )
	begin
		set @Alocation = (select Alocation + '+@Quantity+' from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year )
        set @EndingOH = (select BeginningOH + QtyIn - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year)
        set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year)
		
		if (@EndingAV < 0) select 1 as Status
		else begin
			update '+@dbMD+'.dbo.OmTrInventQtyVehicle
			set LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month = @Month and Year = @Year

			select 2 as Status
		end
	end
	else select 0 as Status
	'
	--if exists (select * from BAT_UAT.dbo.OmTrInventQtyVehicle 
		--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode )
	--begin
		--set @Alocation = (select Alocation + @Quantity from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingOH = (select BeginningOH + QtyIn - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
		
		--if (@EndingAV < 0) select 1 as Status
		--else begin
			--update BAT_UAT.dbo.OmTrInventQtyVehicle
			--set LastUpdateBy = @userId, LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month

			--select 2 as Status
		--end
	--end
	--else select 0 as Status
--select @sqlStr
exec(@sqlStr)
end


GO


if object_id('uspfn_omSlsBPKLkpChassisNo') is not null
	drop procedure uspfn_omSlsBPKLkpChassisNo
GO
CREATE procedure [dbo].[uspfn_omSlsBPKLkpChassisNo]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15),
 @BPKNo varchar(15),
 @ChassisCode   varchar(15) 
)  
AS  
begin
select a.ChassisNo, a.EngineCode, a.EngineNo, 
a.ColourCode, b.RefferenceDesc1 from 
omTrSalesDODetail a
left join omMstRefference b on 
b.CompanyCode = a.CompanyCode and
b.RefferenceCode = a.ColourCode and
b.RefferenceType = 'COLO'
where
a.CompanyCode = @CompanyCode
AND a.BranchCode = @BranchCode
AND a.ChassisCode = @ChassisCode
AND a.DONo = @DONo
AND a.ChassisNo not in (select isnull(ChassisNo,0) from omTrSalesBPKDetail z
where z.CompanyCode = a.CompanyCode
and z.BranchCode = a.BranchCode
--and z.BPKNo = @BPKNo
and z.ChassisCode = a.ChassisCode
AND not exists (select 1 from omTrSalesReturnVIN where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode
		and ChassisCode=a.ChassisCode and ChassisNo=a.ChassisNo))
END		
GO
if object_id('uspfn_GenerateBPSLampiranNew') is not null
	drop procedure uspfn_GenerateBPSLampiranNew
GO
CREATE procedure [dbo].[uspfn_GenerateBPSLampiranNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--DECLARE	@CompanyCode	VARCHAR(MAX),
--		@BranchCode		VARCHAR(MAX),
--		@JobOrderNo		VARCHAR(MAX),
--		@ProductType	VARCHAR(MAX),
--		@CustomerCode	VARCHAR(MAX),
--		@UserID			VARCHAR(MAX),
--		@PickedBy		VARCHAR(MAX)

--SET	@CompanyCode	= '6156401000'
--SET	@BranchCode		= '6156401001'
--SET	@JobOrderNo		= 'SPK/15/001666'
--SET	@ProductType	= '4W'
--SET	@CustomerCode	= '0032710'
--SET	@UserID			= 'ga'
--SET	@PickedBy		= '0004'
		
--exec uspfn_GenerateBPSLampiranNew '6006400001','6006400101','SPK/14/101625','4W','JKT-1852626','ga','00001'

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement

DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

  declare @PurchaseDisc as decimal
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = dbo.GetCompanyMD(@CompanyCode,@BranchCode)
       and ProfitCenterCode = '200')  
         
   if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);   

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl

UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================
SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	

--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	DECLARE @CompanyMD AS VARCHAR(15)
	DECLARE @BranchMD AS VARCHAR(15)
	DECLARE @WarehouseMD AS VARCHAR(15)

	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @validString varchar(max)

declare @valid_2 table(
PartNo varchar(15),
QtyValidSR NUMERIC(18,2),
QtyValidOnhand NUMERIC(18,2)
)
    set @validString ='SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM '+ @DbMD +'..SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = '''+ @CompanyMD +'''
		AND a.BranchCode = '''+ @BranchMD+'''
		AND b.PickingSlipNo = '''+@PickingSlipNo+'''
		--AND a.CompanyCode = b.CompanyCode
		--AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo'
	
	--print(@validString)
	insert into @valid_2 exec(@validString)

select * from @valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM @valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM @valid_2 WHERE QtyValidOnhand < 0),0)
	select @Allocation_SRValid
	select @Onhand_SRValid

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		
		CLOSE db_cursor
		DEALLOCATE db_cursor 
		
		DROP TABLE #TempPickingSlipDtl
		DROP TABLE #TempPickingSlipHdr
		
		RAISERROR (@errmsg,16,1);
		
		RETURN
	END
--===============================================================================================================================

--DECLARE @DbMD AS VARCHAR(15)
--SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'UPDATE '+@DbMD+'..SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM ' + @DbMD + '..SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
UPDATE '+ @DbMD +'..SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
FROM ' + @DbMD + '..SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND a.WarehouseCode = ' + ''''+@WarehouseMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo'

EXEC(@query)
	--print(@query)
--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

--===============================================================================================================================
-- INSERT INTO svSDMovement
--===============================================================================================================================
declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

 if(@md = 0)
 begin

	set @Query = '
	insert into ' + @DbMD + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq
	, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice
	, TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD
	, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus
	, ProcessDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)  
	select h.CompanyCode, h.BranchCode, h.LmpNo, h.LmpDate, d.PartNo, ROW_NUMBER() OVER(Order by d.LmpNo)
	,d.WarehouseCode, d.QtyBill, d.QtyBill, d.DiscPct, (d.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)), d.RetailPrice
	,h.TypeOfGoods, ''' + @CompanyMD + ''', ''' + @BranchMD + ''', ''' + @WarehouseMD + ''', d.RetailPriceInclTax, d.RetailPrice, 
	d.CostPrice,''x'', d.ProductType,''300'', ''0'',''0'',''' + convert(varchar, GETDATE()) + ''',''' + @UserID + ''',''' +
	  convert(varchar, GETDATE()) + ''',''' +  @UserID + ''',''' +  convert(varchar, GETDATE()) + '''
	 from spTrnSLmpDtl d inner join spTrnSLmpHdr h on h.LmpNo = d.LmpNo  
	  where 1 = 1   
		and d.CompanyCode = ''' + @CompanyCode + ''' 
		and d.BranchCode  = ''' + @BranchCode  + '''
		and d.ProductType = ''' + @ProductType  + '''
		and d.LmpNo = ''' + @TempLmpNo + '''';
	
	exec(@Query);
end

FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode


--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
end

GO

if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001833'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '000003'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'


--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

select * from #srvorder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


select top 10 * from spTrnSORDDtl order by createddate desc
--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================

declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


if(@md = 0)
begin

 declare @QueryTemp as varchar(max)  
 declare @PurchaseDisc as decimal  

  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            

set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct,  (md.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)) , a.RetailPrice, b.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''', md.RetailPriceInclTax, md.RetailPrice, md.CostPrice
,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from spTrnSORDDtl a 
join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
and a.BranchCode = b.BranchCode 
and a.DocNo = b.DocNo
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ReferenceNo = '''+ @JobOrderNo +''''

exec (@Query)
--print (@QUERY)

end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END

GO
if object_id('uspfn_SelectEmployeeOrganizationTree') is not null
	drop procedure uspfn_SelectEmployeeOrganizationTree
GO
CREATE PROCEDURE [dbo].[uspfn_SelectEmployeeOrganizationTree]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@EmployeeID varchar(15)

AS BEGIN
SELECT * INTO #test1 FROM(
SELECT a.BranchCode, a.EmployeeID, b.EmployeeName, b.Position
,(rtrim(a.EmployeeID) + ' - ' + rtrim(b.EmployeeName)) Employee, b.TeamLeader
FROM hrEmployeeMutation a
JOIN (
	SELECT c.EmployeeId, c.EmployeeName, c.Position, ISNULL(c.TeamLeader, '') AS TeamLeader, MAX(d.MutationDate) AS MutationDate
	FROM hrEmployee c
	JOIN hrEmployeeMutation d
	ON c.EmployeeId = d.EmployeeId
	WHERE c.Department = 'SALES' 
	GROUP BY c.EmployeeId, c.EmployeeName, c.Position, c.TeamLeader
) b
ON a.EmployeeId = b.EmployeeId AND a.MutationDate = b.MutationDate
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
)#test1

;WITH N(lvl, BranchCode, value, text, Position, Employee, TeamLeader)
AS
(
	SELECT 
		0 AS lvl,
		a.BranchCode, a.EmployeeID, a.EmployeeName, a.Position, a.Employee, a.TeamLeader
	FROM #test1 a
	WHERE a.EmployeeID = @EmployeeID
	UNION ALL
	SELECT 
		N.lvl + 1 AS lvl,
		b.BranchCode, b.EmployeeID, b.EmployeeName, b.Position, b.Employee, b.TeamLeader
	FROM #test1 b JOIN N ON N.value = b.TeamLeader
)
SELECT * FROM N 
WHERE lvl > 0
ORDER BY lvl DESC

DROP TABLE #test1
END
GO
update sysparameter
set ParamDescription='SETIAP HARI WAJIB MELAKUKAN DAILY POSTING . . .
DAILY POSTING DILAKUKAN SETELAH BERAKHIRNYA SELURUH TRANSAKSI HARIAN (SALES, SPAREPART & SERVICE).

TERIMA KASIH'
where ParamId='POSTING_STATUS'

if object_id('uspfn_gnCheckPostingStatus') is not null
	drop procedure uspfn_gnCheckPostingStatus
GO
CREATE PROCEDURE uspfn_gnCheckPostingStatus
AS
BEGIN
	declare @checklasttrans datetime, @retValue int, @tax int,
			@procStatus int,@retValue2 int, @prmValue varchar(20)	

	select @prmValue=ParamValue from sysParameter where paramid='SPSRV'
	
	set @tax = 1
	
	IF @prmValue='ON'
	BEGIN
		SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM [svSDMovement] with(nolock,nowait) order by docdate desc
	
		IF (@checklasttrans IS NULL)
			set @retValue=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				select @retValue=0, @tax = 0
			ELSE
				set @retValue=1
		END
	END
	ELSE
		set @retValue=2

	SELECT @checklasttrans = NULL, @procStatus = 0

	select @prmValue=ParamValue from sysParameter where paramid='SLS'
	IF @prmValue='ON'
	BEGIN
		SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM [omSDMovement] with(nolock,nowait) order by docdate desc

		IF (@checklasttrans IS NULL)
			set @retValue2=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				BEGIN
					select @retValue2=0, @tax = 0	
					IF @retValue <> 2
						set @retValue=0
				END
			ELSE
				BEGIN
					set @retValue2=1
				END
		END
		
		IF @retValue2=1 and @retValue=0 
			set @retValue2=0
		
	END
	ELSE
		set @retValue2=1
		
	IF @retValue = 2
		set @retValue=1
		
	SELECT @retValue [SPSRV], @retValue2 [SALES], 
	(select top 1 replace(ParamDescription, char(13),'</BR>') from sysParameter where ParamId='POSTING_STATUS') INFO, 
	(select top 1 case when ISNULL(ParamValue,'OFF')='OFF' then 1 else @tax end from sysParameter where paramid='PAJAK') TAX

END
GO
if object_id('sp_InquirDetailDataKendaraan') is not null
	drop procedure sp_InquirDetailDataKendaraan
GO
CREATE procedure [dbo].[sp_InquirDetailDataKendaraan] 
(
 @CompanyCode varchar(15),
 @BranchCode varchar(15),
 @ChassisCode varchar(100),
 @ChassisNo varchar(100)
)
AS

DECLARE
	@QRYTmp		AS varchar(max),
	@DBMD		AS varchar(25),
	@CompanyMD  AS varchar(25)


BEGIN

set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 

set @QRYTmp = 
'select 
	(select b.refferenceDesc1 from ' + @DBMD + '.dbo.ommstrefference b where b.companyCode = ''' + @CompanyMD + '''
	and b.refferencetype = ''WARE'' and b.refferenceCode = a.warehouseCode) as warehouseName
	,''('' + a.ColourCode+ '') '' +(select c.refferenceDesc1 from ommstrefference c where c.companyCode = ''' + @CompanyCode + '''
	and c.refferencetype = ''COLO'' and c.refferenceCode = a.ColourCode) as ColourName
	, a.servicebookno
	, a.keyno
	, a.cogsunit
	, a.cogsOthers
	, a.cogsKaroseri
    , o.afterdiscdpp dpp
    , o.afterdiscppn ppn
    , p.bbn
	, j.pono
    , convert(varchar, j.podate, 106) podate
	, h.bpuno+'' (''+h.RefferenceDONo+'')'' bpuno
    , convert(varchar, h.bpudate, 106) bpudate
	, d.sono
    , convert(varchar, d.sodate, 106) sodate
	, k.dono
    , convert(varchar, k.dodate, 106) dodate
    , case d.SKPKNo when '''' then d.RefferenceNo else d.SKPKNo end as SKPKNo
    , convert(varchar, d.sodate, 106)  SKPKDate
    , l.bpkno
    , convert(varchar, l.bpkdate, 106) bpkdate
	, m.invoiceNo
    , convert(varchar, m.invoicedate, 106) invoicedate
    , q.RefferenceSJNo
	, convert(varchar, q.RefferenceSJDate, 106) RefferenceSJDate
    , i.hppno
    , convert(varchar, i.hppdate, 106) hppdate
	, n.reqNo reqOutNo
    , convert(varchar, n.reqDate, 106) reqdate
    , i.RefferenceInvoiceNo reffinv
    , convert(varchar, i.RefferenceInvoiceDate, 106) reffinvdate
    , i.RefferenceFakturPajakNo refffp
    , convert(varchar, i.RefferenceFakturPajakDate , 106) refffpdate
	, s.PoliceRegistrationNo policeregno
    , convert(varchar, s.PoliceRegistrationDate, 106) policeregdate
	, isnull(b.CustomerCode + '' - '' + c.CustomerName, 
		k.CustomerCode + '' - '' + (select CustomerName from gnMstCustomer where CompanyCode = ''' + @CompanyCode + ''' and CustomerCode = k.CustomerCode)
		) as Customer
	, isnull(c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4,
		(select Address1 + '' '' + Address2 + '' '' + Address3 + '' '' + Address4 from gnMstCustomer where CompanyCode = ''' + @CompanyCode + ''' and CustomerCode = k.CustomerCode)
		) as Address
	, d.Salesman + '' - '' + f.EmployeeName as Salesman
	, d.LeasingCo + '' - '' + g.CustomerName as Leasing
	, d.SalesCode + '' - '' + e.LookUpValueName as KelAR
    , s.BPKBNo
	, s.SPKNo
	, a.ChassisCode
	, a.SalesModelCode
	, a.ChassisNo
	, a.EngineNo
from 
	' + @DBMD + '.dbo.ommstvehicle a
left join omTrSalesInvoice b on b.CompanyCode = ''' + @CompanyCode + ''' and b.BranchCode like ''' + @BranchCode + ''' 
    and a.InvoiceNo = b.InvoiceNo
left join gnMstCustomer c on c.CompanyCode = ''' + @CompanyCode + ''' and b.Customercode = c.CustomerCode
left join omTrSalesSO d on d.CompanyCode = ''' + @CompanyCode + ''' and d.BranchCode like ''' + @BranchCode + ''' and a.SONo = d.SONo
left join GnMstLookUpDtl e on e.CompanyCode = ''' + @CompanyCode + ''' and CodeID = ''GPAR'' and e.LookUpValue = d.SalesCode
left join gnMstEmployee f on f.Companycode = ''' + @CompanyCode + ''' and f.BranchCode like ''' + @BranchCode + ''' 
    and f.EmployeeID = d.Salesman
left join gnMstCustomer g on g.CompanyCode = ''' + @CompanyCode + ''' and g.CustomerCode = d.LeasingCo
left join omTrPurchaseBPU h on h.CompanyCode = ''' + @CompanyCode + ''' and h.BranchCode like ''' + @BranchCode + ''' 
    and a.PONo = h.PONo and a.BPUNo=h.BPUNo
left join omTrPurchaseHPP i on i.CompanyCode = ''' + @CompanyCode + ''' and i.BranchCode like ''' + @BranchCode + ''' and a.HPPNo= i.HPPNo
left join omTrPurchasePO j on j.CompanyCode = ''' + @CompanyCode + ''' and j.BranchCode like ''' + @BranchCode + ''' and a.PONo = j.PONo
left join omTrSalesDO k on k.CompanyCode = ''' + @CompanyCode + ''' and k.BranchCode like ''' + @BranchCode + ''' and a.DONo = k.DONo and a.SONo= k.SONo
left join omTrSalesBPK l on l.CompanyCode = ''' + @CompanyCode + ''' and l.BranchCode like ''' + @BranchCode + ''' and a.BPKNo = l.BPKNo
left join omTrSalesInvoice m on m.CompanyCode = ''' + @CompanyCode + ''' and m.BranchCode like ''' + @BranchCode + ''' 
    and a.InvoiceNo = m.InvoiceNo
left join omTrSalesReq n on n.CompanyCode = ''' + @CompanyCode + ''' and n.BranchCode like ''' + @BranchCode + ''' and a.ReqOutNo = n.ReqNo
left join omTrSalesSOModel o on o.CompanyCode = ''' + @CompanyCode + ''' and o.BranchCode like ''' + @BranchCode + ''' and a.SONo = o.SONo 
    and a.SalesModelCode = o.SalesModelCode and a.SalesModelYear = o.SalesModelYear and a.ChassisCode = o.ChassisCode
left join omTrSalesSOVin p on p.CompanyCode = ''' + @CompanyCode + ''' and p.BranchCode like ''' + @BranchCode + ''' and a.SONo = p.SONo
    and a.SalesModelCode = p.SalesModelCode and a.SalesModelYear = p.SalesModelYear and a.ColourCode = p.ColourCode
    and a.ChassisNo = p.ChassisNo and a.ChassisCode = p.ChassisCode
left join omTrPurchaseBPU q on q.CompanyCode = ''' + @CompanyCode + ''' and q.BranchCode like ''' + @BranchCode + ''' and q.PONo = j.PONO 
	and q.BPUNo = a.BPUNo
left join omTrSalesSPKDetail s on s.CompanyCode = ''' + @CompanyCode + ''' and s.BranchCode like ''' + @BranchCode + '''
	and s.ChassisCode = a.ChassisCode and s.ChassisNo = a.ChassisNo
where 
	a.companyCode = ''' + @CompanyMD + ''' and a.chassisCode = ''' + @ChassisCode + ''' and a.chassisNo = ''' + @ChassisNo + ''''

	Exec (@QRYTmp);

END
GO
if object_id('usprpt_PmRpInqFollowUpDtlNew') is not null
	drop procedure usprpt_PmRpInqFollowUpDtlNew
GO
CREATE procedure [dbo].[usprpt_PmRpInqFollowUpDtlNew] 
	-- Add the parameters for the stored procedure here
(
	@CompanyCode	VARCHAR(15),
	@BranchCode		VARCHAR(15),
	@DateAwal		VARCHAR(10),
	@DateAkhir		VARCHAR(10),
	@Outlet			VARCHAR(max),
	@EMP			VARCHAR(max),
	@Param			VARCHAR(1),
	@Head			VARCHAR(max)
)
AS
BEGIN
	SELECT * INTO #t1 FROM (
		SELECT
				f.OutletName
				,a.InquiryNumber
				,a.NamaProspek Pelanggan
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE a.InquiryDate END InquiryDate
				,a.TipeKendaraan
				,a.Variant
				,a.Transmisi
				,isnull(b.RefferenceDesc1,'') Warna
				,a.PerolehanData
				,isnull(c.EmployeeName,'') Employee
				,d.EmployeeName TeamLeader
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE e.NextFollowUpDate END NextFollowUpDate
				,a.LastProgress
				,a.AlamatProspek
				,a.TelpRumah
				,a.NamaPerusahaan
				,a.AlamatPerusahaan
				,a.Handphone
				,a.LastUpdateStatus
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE a.SPKDate END SPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE DAY(a.SPKDate) END DaySPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE MONTH(a.SPKDate) END MonthSPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE YEAR(a.SPKDate) END YearSPKDate
				,CASE(a.LostCaseDate) WHEN '19000101' THEN NULL ELSE a.LostCaseDate END LostCaseDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE DAY(a.InquiryDate) END DayInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE MONTH(a.InquiryDate) END MonthInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE YEAR(a.InquiryDate) END YearInquiryDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE DAY(e.NextFollowUpDate) END DayNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE MONTH(e.NextFollowUpDate) END MonthNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE YEAR(e.NextFollowUpDate) END YearNextFollowUpDate
				,a.QuantityInquiry
				,isnull(r.LookUpValueName, '') LostCaseCategory
				,a.LostCaseVoiceOfCustomer
				,(select LookUpValueName from gnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMOP' and LookUpValue = a.TestDrive) TestDrive
				, isnull(n.LookUpValueName,'') CaraBayar
				, isnull(o.LookUpValueName,'') Leasing
				, isnull(p.LookUpValueName,'') DownPayment
				, isnull(q.LookUpValueName,'') Tenor
				, a.MerkLain
				, a.SpvEmployeeId
			FROM
				PmKDP a
			INNER JOIN OmMstRefference b ON b.CompanyCode = a.CompanyCode 
				AND b.RefferenceType='COLO' 
				AND b.RefferenceCode=a.ColourCode
			INNER JOIN HrEmployee c ON c.CompanyCode = a.CompanyCode 
				AND c.EmployeeID = a.EmployeeID
			INNER JOIN HrEmployee d ON d.CompanyCode = a.CompanyCode 
				AND c.TeamLeader = d.EmployeeID
			INNER JOIN PmActivities e ON e.CompanyCode = a.CompanyCode 
				AND e.BranchCode = a.BranchCode 
				AND e.InquiryNumber=a.InquiryNumber
				AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
				AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
			INNER JOIN PmBranchOutlets f ON f.CompanyCode = a.CompanyCode 
				AND f.BranchCode = a.BranchCode 
				AND f.OutletID = a.OutletID
			LEFT JOIN GnMstLookUpDtl n on n.CompanyCode=a.CompanyCode
				AND n.CodeId='PMBY'
				AND n.LookUpValue = a.CaraPembayaran
			LEFT JOIN GnMstLookUpDtl o on o.CompanyCode=a.CompanyCode
				AND o.CodeId='LSNG'
				AND o.LookUpValue = a.Leasing
			LEFT JOIN GnMstLookUpDtl p on p.CompanyCode=a.CompanyCode
				AND p.CodeId='DWPM'
				AND p.LookUpValue = a.DownPayment
			LEFT JOIN GnMstLookUpDtl q on q.CompanyCode=a.CompanyCode
				AND q.CodeId='TENOR'
				AND q.LookUpValue = a.Tenor
			LEFT JOIN GnMstLookUpDtl r on r.CompanyCode=a.CompanyCode
				AND r.CodeId='PLCC'
				AND r.LookUpValue = a.LostCaseCategory			
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND CONVERT(VARCHAR, e.NextFollowUpDate, 112) BETWEEN @DateAwal AND @DateAkhir
			AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t1

	IF (@Param <> '0')
	BEGIN
		DELETE #t1
		INSERT INTO #t1
			SELECT
				f.OutletName
				,a.InquiryNumber
				,a.NamaProspek Pelanggan
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE a.InquiryDate END InquiryDate
				,a.TipeKendaraan
				,a.Variant
				,a.Transmisi
				,isnull(b.RefferenceDesc1,'') Warna
				,a.PerolehanData
				,isnull(c.EmployeeName,'') Employee
				,d.EmployeeName TeamLeader
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE e.NextFollowUpDate END NextFollowUpDate
				,a.LastProgress
				,a.AlamatProspek
				,a.TelpRumah
				,a.NamaPerusahaan
				,a.AlamatPerusahaan
				,a.Handphone
				,a.LastUpdateStatus
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE a.SPKDate END SPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE DAY(a.SPKDate) END DaySPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE MONTH(a.SPKDate) END MonthSPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE YEAR(a.SPKDate) END YearSPKDate
				,CASE(a.LostCaseDate) WHEN '19000101' THEN NULL ELSE a.LostCaseDate END LostCaseDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE DAY(a.InquiryDate) END DayInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE MONTH(a.InquiryDate) END MonthInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE YEAR(a.InquiryDate) END YearInquiryDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE DAY(e.NextFollowUpDate) END DayNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE MONTH(e.NextFollowUpDate) END MonthNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE YEAR(e.NextFollowUpDate) END YearNextFollowUpDate
				,a.QuantityInquiry
				,isnull(r.LookUpValueName, '') LostCaseCategory
				,a.LostCaseVoiceOfCustomer
				,(select LookUpValueName from gnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMOP' and LookUpValue = a.TestDrive) TestDrive
				, isnull(n.LookUpValueName,'') CaraBayar
				, isnull(o.LookUpValueName,'') Leasing
				, isnull(p.LookUpValueName,'') DownPayment
				, isnull(q.LookUpValueName,'') Tenor
				, a.MerkLain
				, a.SpvEmployeeId
			FROM
				PmKDP a
			LEFT JOIN OmMstRefference b ON b.CompanyCode = a.CompanyCode 
				AND b.RefferenceType='COLO' 
				AND b.RefferenceCode=a.ColourCode
			LEFT JOIN HrEmployee c ON c.CompanyCode = a.CompanyCode 
				AND c.EmployeeID = a.EmployeeID
			LEFT JOIN HrEmployee d ON d.CompanyCode = a.CompanyCode 
				AND c.TeamLeader = d.EmployeeID
			LEFT JOIN PmActivities e ON e.CompanyCode = a.CompanyCode 
				AND e.BranchCode = a.BranchCode 
				AND e.InquiryNumber=a.InquiryNumber
				AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
				AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
			LEFT JOIN PmBranchOutlets f ON f.CompanyCode = a.CompanyCode 
				AND f.BranchCode = a.BranchCode 
				AND f.OutletID = a.OutletID
			LEFT JOIN GnMstLookUpDtl n on n.CompanyCode=a.CompanyCode
				AND n.CodeId='PMBY'
				AND n.LookUpValue = a.CaraPembayaran
			LEFT JOIN GnMstLookUpDtl o on o.CompanyCode=a.CompanyCode
				AND o.CodeId='LSNG'
				AND o.LookUpValue = a.Leasing
			LEFT JOIN GnMstLookUpDtl p on p.CompanyCode=a.CompanyCode
				AND p.CodeId='DWPM'
				AND p.LookUpValue = a.DownPayment
			LEFT JOIN GnMstLookUpDtl q on q.CompanyCode=a.CompanyCode
				AND q.CodeId='TENOR'
				AND q.LookUpValue = a.Tenor
			LEFT JOIN GnMstLookUpDtl r on r.CompanyCode=a.CompanyCode
				AND r.CodeId='PLCC'
				AND r.LookUpValue = a.LostCaseCategory		
			WHERE
				a.CompanyCode = @CompanyCode 
				AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
				AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
				AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
				AND a.LastProgress in ('P','HP','SPK') 
				--AND not exists (select 1 from #t1 where a.InquiryNumber = #t1.InquiryNumber)
	END
	
	IF (@Head='')
	BEGIN
		SELECT * FROM #t1
		ORDER BY InquiryNumber
	END
	ELSE
	BEGIN
		SELECT * FROM #t1 
		WHERE Employee IN ( SELECT EmployeeName FROM HrEmployee where TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @Head))
		ORDER BY InquiryNumber 
	END
	DROP TABLE #t1
END
GO
-- usprpt_PmRpInqFollowUpDtl '6006406','6006404', '20080101', '20110215', '', '', ''



if object_id('usprpt_PostingMultiCompanySparePartService') is not null
	drop procedure usprpt_PostingMultiCompanySparePartService
GO
-- POSTING TRANSACTION MULTI COMPANY - SPARE PART & SERVICE
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- ----------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySparePartService] '6006400001','2014/11/08','0'
-- ----------------------------------------------------------------------------------
CREATE procedure [dbo].[usprpt_PostingMultiCompanySparePartService]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN 
  -- Check Tax/Seri Pajak online
		declare @TaxCompany					varchar(15)
		declare @TaxBranch					varchar(15)
		declare @TaxDB						varchar(50)
		declare @TaxTransCode				varchar(3)
		declare @swTaxBranch				varchar(15) = ''
		declare @swTaxDoc					varchar(15) = ''
		declare @TaxSeq						bigint
		declare @TaxSeqNo					int
		declare @SeriPajakNo				varchar(50) = ''

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			return

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode				varchar(15)
		declare @curBranchCode				varchar(15)
		declare @curDocNo					varchar(20)
		declare @curDocDate					datetime
		declare @curPartNo					varchar(20)
		declare @curPartSeq					integer
		declare @curWarehouseCode			varchar(15)
		declare @curQtyOrder				numeric(18,2)
		declare @curQty						numeric(18,2)
		declare @curDiscPct					numeric(06,2)
		declare @curCostPrice				numeric(18,2)
		declare @curRetailPrice				numeric(18,2)
		declare @curTypeOfGoods				varchar(15)
		declare @curCompanyMD				varchar(15)
		declare @curBranchMD				varchar(15)
		declare @curWarehouseMD				varchar(15)
		declare @curRetailPriceInclTaxMD	numeric(18,2)
		declare @curRetailPriceMD			numeric(18,2)
		declare @curCostPriceMD				numeric(18,2)
		declare @curQtyFlag					char(1)
		declare @curProductType				varchar(15)
		declare @curProfitCenterCode		varchar(15)
		declare @curStatus					char(1)
		declare @curProcessStatus			char(1)
		declare @curProcessDate				datetime
		declare @curCreatedBy				varchar(15)
		declare @curCreatedDate				datetime
		declare @curLastUpdateBy			varchar(15)
		declare @curLastUpdateDate			datetime
		declare @DocPrefix					varchar(15)
		declare @SONo						varchar(15)
		declare @PLNo						varchar(15)
		declare @INVNo						varchar(15)
		declare @FPJNo						varchar(15)
		declare @POSNo						varchar(15)
		declare @BINNo						varchar(15)
		declare @WRSNo						varchar(15)
		declare @HPPNo						varchar(15)
		declare @APNo						varchar(15)
		declare @DocYear					numeric(4,0)
		declare @DocSeq						numeric(15,0)
		declare @SeqNo						integer
		declare @DBName						varchar(50)
		declare @DBNameMD					varchar(50)
		declare @sqlString					nvarchar(max)
		declare @swCompanyCode				varchar(15) = ''
		declare @swBranchCode				varchar(15) = ''
		declare @swDocNo 					varchar(15) = ''
		declare @TotPurchaseAmt				numeric(18,0)
		declare @TotPurchaseNetAmt			numeric(18,0)
		declare @TotTaxAmt					numeric(18,0)
		declare @RetailPriceNet				numeric(18,0)
		declare @SalesAmt					numeric(18,0)
		declare @DiscAmt					numeric(18,0)
		declare @NetSales					numeric(18,0)
		declare @PPNAmt						numeric(18,0)
		declare @TotSalesAmt				numeric(18,0)
		declare @CostAmt 					numeric(18,0)
		declare @MovingCode					varchar(15)
		declare @ABCClass					char(1)
		declare @PartCategory				varchar(15)
		declare @LocationCode				varchar(10)
		declare @MovingCodeMD				varchar(15)
		declare @ABCClassMD					char(1)
		declare @PartCategoryMD				varchar(3)
		declare @LocationCodeMD				varchar(10)
		declare @ProductTypeMD				varchar(15)	
		declare @TypeOfGoodsMD				varchar(5)
		declare @PaymentCodeMD				varchar(15)
		declare @SalesCodeMD				varchar(15)
		declare @CustomerNameMD				varchar(100)
		declare @Address1MD					varchar(100)
		declare @Address2MD					varchar(100)
		declare @Address3MD					varchar(100)
		declare @Address4MD					varchar(100)
		declare @isPKPMD					varchar(100)
		declare @NPWPNoMD					varchar(100)
		declare @SKPNoMD					varchar(100)
		declare @SKPDateMD					datetime
		declare @NPWPDateMD					datetime
		declare @TopCodeMD					varchar(15)
		declare @TopDaysMD					integer
		declare @DueDateMD					date
		declare @AccNoArMD					varchar(50)
		declare @AccNoSalesMD				varchar(50)
		declare @AccNoTaxOutMD				varchar(50)
		declare @AccNoDisc1MD				varchar(50)
		declare @AccNoCogsMD				varchar(50)
		declare @AccNoInventoryMD			varchar(50)
		declare @AccNoInventory				varchar(50)
		declare @AccNoTaxIn					varchar(50)
		declare @AccNoAP					varchar(50)
		declare @SeqNoGlMD					numeric(10,0)
		declare @SeqNoGl					numeric(10,0)
		declare @DiscFlag					integer
		declare @CurrentDate				varchar(100) = convert(varchar,getdate(),121)

        declare cursvSDMovement cursor for
			select * from svSDMovement
             where left(DocNo,3) in ('LMP','FPJ') 
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by CompanyCode, BranchCode, DocNo, TypeOfGoods, PartNo, PartSeq
		open cursvSDMovement

		fetch next from cursvSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
			       @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
				   @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
				   @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin
			 -- MD : Database Name, Company Code & Branch Code MD
				set @DBNameMD = (select DbMD   from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode)

			 -- SD : Database Name 
				set @DBName   = (select DbName from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)

			 -- MD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCodeMD=MovingCode, @ABCClassMD=ABCClass, @PartCategoryMD=PartCategory, @TypeOfGoodsMD=TypeOfGoods from ' 
										  +@DBNameMD+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCodeMD		varchar(15) output,
										  @ABCClassMD 		char(1) 	output,
										  @PartCategoryMD 	varchar(3) 	output,
										  @TypeOfGoodsMD 	varchar(15) output', 
										  @MovingCodeMD 	output,
										  @ABCClassMD 		output,
										  @PartCategoryMD 	output,
										  @TypeOfGoodsMD 	output
										  
			 -- MD: Location Code
				set @sqlString = N'select @LocationCodeMD=LocationCode from ' 
										  +@DBNameMD+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCodeMD 	varchar(10) output', 
										  @LocationCodeMD 	output

			 -- MD: ProducType
				set @sqlString = N'select @ProductTypeMD=ProductType from ' 
										  +@DBNameMD+ '..gnMstCoProfile where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''''
					execute sp_executesql @sqlString, 
										N'@ProductTypeMD 	varchar(15) output', 
										  @ProductTypeMD 	output

			 -- MD: Top Code, Payment Code, Sales Code
				set @sqlString = N'select @TopCodeMD=TopCode, @PaymentCodeMD=PaymentCode, @SalesCodeMD from ' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and CustomerCode=''' 
										  +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @sqlString, 
										N'@TopCodeMD 		varchar(15) output,
										  @PaymentCodeMD 	varchar(15) output,
										  @SalesCodeMD 		varchar(15) output', 
										  @TopCodeMD 		output,
										  @PaymentCodeMD 	output,
										  @SalesCodeMD 		output

			 -- MD: Top Days
				set @sqlString = N'select @TopDaysMD=ParaValue from ' 
										  +@DBNameMD+ '..gnMstLookUpDtl where CompanyCode=''' 
										  +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' 
										  +@TopCodeMD+ ''''
					execute sp_executesql @sqlString, 
										N'@TopDaysMD 		integer	output', 
										  @TopDaysMD 		output
										  
				-- MD: AR Account
				set @sqlString = N'select @AccNoArMD=c.ReceivableAccNo from ' 
				                          +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ 
								  ''' and c.BranchCode      =''' +@curBranchMD+ 
								  ''' and c.ProfitCenterCode=''300''
								      and c.TypeOfGoods     =''' +@TypeOfGoodsMD+
								  ''' and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoArMD 		varchar(50) output', 
										  @AccNoArMD 		output
										  
				-- MD: Sales Account
				set @sqlString = N'select @AccNoSalesMD=SalesAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoSalesMD 	varchar(50) output', 
										  @AccNoSalesMD 	output
										  
				-- MD: Tax Account
				set @sqlString = N'select @AccNoTaxOutMD=c.TaxOutAccNo from ' 
										  +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ ''' 
									  and c.BranchCode      =''' +@curBranchMD+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@TypeOfGoodsMD+ '''
									  and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoTaxOutMD 	varchar(50) output', 
										  @AccNoTaxOutMD 	output
										  
				-- MD: Discount, COGS & Inventory Account
				set @sqlString = N'select @AccNoDisc1MD=DiscAccNo, @AccNoCogsMD=COGSAccNo, @AccNoInventoryMD=InventoryAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString,
										N'@AccNoDisc1MD 	varchar(50) output,
										  @AccNoCogsMD 		varchar(50) output,
										  @AccNoInventoryMD varchar(50) output', 
										  @AccNoDisc1MD 	output,
										  @AccNoCogsMD 		output,
										  @AccNoInventoryMD output
										  
				set @SalesAmt    = @curQty*@curRetailPriceInclTaxMD 
				set @DiscAmt     = round((@SalesAmt*@curDiscPct / 100),0)
				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt
				set @CostAmt     = @curQty*@curCostPriceMD 
				set @DueDateMD   = dateadd(day,isnull(@TopDaysMD,0),@curDocDate)

				-- SD: A/P, TAX IN  Account
				set @sqlString = N'select @AccNoAP=c.PayableAccNo, @AccNoTaxIn=c.TaxInAccNo from ' 
										  +@DBName+ '..gnMstSupplierClass c,' 
										  +@DBName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoAP 			varchar(50) output,
										  @AccNoTaxIn 		varchar(50) output', 
										  @AccNoAP 			output,
										  @AccNoTaxIn 		output

				-- SD: Inventory Account
				set @sqlString = N'select @AccNoInventory=InventoryAccNo from ' 
										  +@DBName+ '..spMstAccount
									where CompanyCode=''' +@curCompanyCode+ ''' 
									  and BranchCode =''' +@curBranchCode+ '''
									  and TypeOfGoods=''' +@CurTypeOfGoods+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoInventory 	varchar(50) output', 
										  @AccNoInventory 	output

			 -- SD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCode=MovingCode, @ABCClass=ABCClass, @PartCategory=PartCategory from ' 
										  +@DBName+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCode		varchar(15) output,
										  @ABCClass 		char(1) 	output,
										  @PartCategory 	varchar(3) 	output',
										  @MovingCode 		output,
										  @ABCClass 		output,
										  @PartCategory 	output

			 -- SD: Location Code
				set @sqlString = N'select @LocationCode=LocationCode from ' 
										  +@DBName+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCode 	varchar(15) output', 
										  @LocationCode 	output

				set @RetailPriceNet    = round(@curRetailPriceMD * (100.00-@curDiscPct) / 100.00,0)
				set @TotPurchaseNetAmt = @CurQty * @RetailPriceNet
				set @TotTaxAmt         = round(@TotPurchaseNetAmt * 0.1,0)
			    set @TotPurchaseAmt    = @TotPurchaseNetAmt + @TotTaxAmt

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0

					 -- Discount Flag
						set @sqlString = N'select top 1 @DiscFlag=1 from ' 
												  +@DBName+ '..svSDMovement where CompanyCode=''' 
												  +@curCompanyCode+ ''' and BranchCode=''' 
												  +@curBranchCode+ ''' and DocNo=''' 
												  +@curDocNo+ ''''
							execute sp_executesql @sqlString, 
												N'@DiscFlag 	integer output', 
												  @DiscFlag  	output

					 -- SD : Insert data to table spTrnPPOSHdr
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'POS', @POSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSHdr 
										(CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, isBO, isSubstution, isSuggorProcess, 
										 Remark, ProductType, PrintSeq, ExPickingSlipNo, ExPickingSlipDate, Status, Transportation, TypeOfGoods, 
										 isGenPORDD, isDeleted, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
										 LockingDate, isDropSign, DropSignReffNo)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''S'',0,0,0,''' 
												   +@curDocNo+ ''',''' +@curProductType+ ''',1,'''',NULL,7,NULL,''' 
												   +@curTypeOfGoods+ ''',0,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL,0,NULL)'
							execute sp_executesql @sqlString

					 -- MD : Insert data to table spTrnSORDHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'SOC', @SONo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDHdr 
										(CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill,
										 CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, isPORDD, OrderNo, OrderDate,
										 TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt,
										 TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate, isDropSign)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''' +@curBranchCode+ ''',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',0,0,1,''00'',''0'',0,''' 
												   +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@TopCodeMD+ ''',''' 
												   +convert(varchar,@TopDaysMD)+ ''',''' +@PaymentCodeMD+ ''',NULL,0.00,0,0,0,0,0,1,NULL,NULL,5,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,''' +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSPickingHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'PLS', @PLNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingHdr 
										(CompanyCode, BranchCode, PickingSlipNo, PickingSlipDate, CustomerCode, CustomerCodeBill, 
										 CustomerCodeShip, PickedBy, isBORelease, isSubstitution, isIncludePPN, TransType, SalesType, 
										 TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Remark, Status, 
										 PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchCode+
											   ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''POSTING'',0,0,1,''00'',''0'',0,0,0,0,0,0,NULL,2,1,'''
											           +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSInvoiceHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'INV', @INVNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'FPJ', @FPJNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceHdr 
										(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, PickingSlipNo, PickingSlipDate, FPJNo, FPJDate,
										 TransType, SalesType, CustomerCode, CustomerCodeBill, CustomerCodeShip, TotSalesQty, TotSalesAmt, 
										 TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@PLNo+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''0'','''
													   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ 
											   ''',0,0,0,0,0,0,''2'',1,''' +left(@TypeOfGoodsMD,1)+
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJHdr 
						--Tax / Seri Pajak Numbering

						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>left(@swTaxDoc,3)
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
														  +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
														  +@TaxCompany+ ''' and BranchCode=''' 
														  +@TaxBranch+ ''' and Year=''' 
														  +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
														  +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @sqlString, 
														N'@TaxSeq 		bigint  	output
														  @TaxSeqNo 	int 		output', 
														  @TaxSeq 		output,
														  @TaxSeqNo 	output

								set @sqlString = N'select top 1 @TaxTransCode=TaxTransCode from ' 
														  +@TaxDb+ '..gnMstCoProfile where CompanyCode=''' 
														  +@TaxCompany + ''' and BranchCode=''' 
														  +@TaxBranch+ ''''
									execute sp_executesql @sqlString, 
														N'@TaxTransCode varchar(3) 	output', 
														  @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlString = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' 
														+@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlString 

								set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
													+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
													+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
							end

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJHdr 
										(CompanyCode, BranchCode, FPJNo, FPJDate, TPTrans, FPJGovNo, FPJSignature, 
										 FPJCentralNo, FPJCentralDate, DeliveryNo, InvoiceNo, InvoiceDate, PickingSlipNo, 
										 PickingSlipDate, TransType, CustomerCode, CustomerCodeBill, CustomerCodeShip, 
										 TOPCode, TOPDays, DueDate, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, 
										 TotFinalSalesAmt, isPKP, Status, PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, 
										 LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''P'',''' +@SeriPajakNo+ ''','''
											       +convert(varchar,@curDocDate,121)+ ''',NULL,'''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''',''' 
												   +@INVNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@PLNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' 
												   +@TopCodeMD+ ''',''' +convert(varchar,@TopDaysMD)+ ''',''' 
												   +convert(varchar,@DueDateMD,121)+ ''',0,0,0,0,0,0,1,1,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJInfo
						set @sqlString = N'select @CustomerNameMD=CustomerGovName, @Address1MD=Address1, @Address2MD=Address2, ' +
												  '@Address3MD=Address3, @Address4MD=Address4, @isPKPMD=isPKP, @NPWPNoMD=NPWPNo, ' +
												  '@SKPNoMD=SKPNo, @SKPDateMD=SKPDate, @NPWPDateMD=NPWPDate  from ' 
												  +@DBNameMD+ '..gnMstCustomer where CompanyCode=''' 
												  +@curCompanyMD+ ''' and CustomerCode=''' 
												  +@curBranchCode+ ''''
							execute sp_executesql @sqlString, 
												N'@CustomerNameMD 	varchar(100) output,
												  @Address1MD 		varchar(100) output,
												  @Address2MD 		varchar(100) output,
												  @Address3MD 		varchar(100) output,
												  @Address4MD 		varchar(100) output,
												  @isPKPMD 			bit 		 output,
												  @NPWPNoMD 		varchar(100) output,
												  @SKPNoMD 			varchar(100) output,
												  @SKPDateMD 		datetime 	 output,
												  @NPWPDateMD 		datetime     output', 
												  @CustomerNameMD 	output,
												  @Address1MD 		output,
												  @Address2MD 		output,
												  @Address3MD 		output,
												  @Address4MD 		output,
												  @isPKPMD 			output,
												  @NPWPNoMD 		output,
												  @SKPNoMD 			output,
												  @SKPDateMD 		output,
												  @NPWPDateMD 		output

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJInfo 
										(CompanyCode, BranchCode, FPJNo, CustomerName, Address1, Address2, 
										 Address3, Address4, isPKP, NPWPNo, SKPNo, SKPDate, NPWPDate, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +@CustomerNameMD+ ''',''' +@Address1MD+ ''',''' 
											   +@Address2MD+ ''',''' +@Address3MD+ ''',''' +@Address4MD+ 
											   ''',''' +@isPKPMD+ ''',''' +@NPWPNoMD+ ''',''' +@SKPNoMD+ 
											   ''',''' +convert(varchar,@SKPDateMD,121)+ ''',''' 
											   +convert(varchar,@NPWPDateMD,121)+ ''',''POSTING'',''' 
											   +convert(varchar,@PostingDate,121)+ ''',''POSTING'',''' 
											   +@currentDate+ ''')'
							execute sp_executesql @sqlString

					 -- SD : Insert data to table spTrnPBinnHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNL', @BINNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnHdr 
										(CompanyCode, BranchCode, BinningNo, BinningDate, ReceivingType, DNSupplierNo, DNSupplierDate, TransType, 
										 SupplierCode, ReferenceNo, ReferenceDate, TotItem, TotBinningAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''','''
												   +@FPJNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' 
												   +@curTypeOfGoods+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString
					
					 -- SD : Insert data to table spTrnPRcvHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'WRL', @WRSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvHdr 
										(CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate, ReceivingType, 
										 DNSupplierNo, DNSupplierDate, TransType, SupplierCode, ReferenceNo, ReferenceDate, 
										 TotItem, TotWRSAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' 
												   +@curCompanyMD+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- SD : Insert data to spTrnPHPP 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'HPP', @HPPNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNP', @APNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPHPP 
										(CompanyCode, BranchCode, HPPNo, HPPDate, WRSNo, WRSDate, ReferenceNo, ReferenceDate,
										 TotPurchAmt, TotNetPurchAmt, TotTaxAmt, TaxNo, TaxDate, MonthTax, YearTax, DueDate,
										 DiffNetPurchAmt, DiffTaxAmt, TotHppAmt, CostPrice, PrintSeq, TypeOfGoods, Status, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,0,''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,month(@curDocDate),121)+ ''',''' 
												   +convert(varchar,year(@curDocDate),121)+ ''',''' 
												   +convert(varchar,@DueDateMD,111)+ ''',0,0,0,0,1,''' 
												   +@curTypeOfGoods+ ''',2,''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''')'
							execute sp_executesql @sqlString
					end   

				set @SeqNo = @SeqNo + 1
			 -- SD: Insert data to table spTrnPPOSDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSDtl
										(CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, PurchasePrice, DiscPct,
										 PurchasePriceNett, CostPrice, TotalAmount, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, Note)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' +@curPartNo+ 
										  ''',' +convert(varchar,@SeqNo)+ ',' +convert(varchar,@curQty)+ 
										  ',' +convert(varchar,@curQtyOrder)+ ',' +convert(varchar,@curRetailPrice)+ 
										  ',' +convert(varchar,@curDiscPct)+ ',' +convert(varchar,@RetailPriceNet)+ 
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@TotPurchaseNetAmt)+ 
										  ',''' +@ABCClass+ ''',''' +@MovingCode+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curDocNo+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Insert data to table spTrnPOrderBalance
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPOrderBalance
										(CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
										 POSDate, OrderQty, OnOrder, Intransit, Received, Located, DiscPct, PurchasePrice, 
										 CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
											  +@curBranchMD+ ''',''' +@curPartNo+ ''',' +convert(varchar,@SeqNo)+ ','''
											  +@curPartNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','
											  +convert(varchar,@curQty)+ ',0,0,' +convert(varchar,@curQty)+ ','
											  +convert(varchar,@curQty)+ ',' +convert(varchar,@curDiscPct)+ ','
											  +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+ ','''
											  +@ABCClass+ ''',''' +@MovingCode+ ''',''' +@WRSNo+ ''',''' 
											  +convert(varchar,@curDocDate,121)+ ''',''' +@curTypeOfGoods+ ''',''' 
											  +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											  +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSORDDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDDtl
										(CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, 
										 ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, 
										 QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice,
										 CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, 
										 MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
										 StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +@curPartNo+ ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',0,0,0,'''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ ''','''
										  +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ ''','''
										  +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ ''','''
										  +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ ''','''
										  +@MovingCode+ ''',''' +left(@ABCClass,1)+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',5,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +convert(varchar,@curQtyOrder)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSOSupply 
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSOSupply
										(CompanyCode, BranchCode, DocNo, SupSeq, PartNo, PartNoOriginal, PTSeq, 
										 PickingSlipNo, ReferenceNo, ReferenceDate, WarehouseCode, LocationCode, 
										 QtySupply, QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, 
										 DiscPct, MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',0,''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +convert(varchar,@SeqNo)+ ''',''' +@PLNo+
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curCreatedDate,121)+
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +@MovingCode+ ''',''' +@ABCClass+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',2,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSORDHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSORDHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocNo=''' +@SONo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table spHstDemandItem 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandItem as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
						                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
			 --MD: Insert/Update data to table spHstDemandcust 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandcust as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curBranchCode+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.CustomerCode= SRC.NewCustomer
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, CustomerCode, PartNo, DemandFreq, DemandQty, SalesFreq, 
									    SalesQty, MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert Data to table spTrnSPickingDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingDtl
										(CompanyCode, BranchCode, PickingSlipNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, 
										 QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, 
										 SalesAmt, DiscAmt, NetSalesAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, 
										 PartCategory, ExPickingSlipNo, ExPickingSlipDate, isClosed, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQtyOrder)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@TotSalesAmt)+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ 
										  ''',NULL,NULL,0,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSPickingHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSPickingHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSInvoiceDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceDtl
										(CompanyCode, BranchCode, InvoiceNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, 
										 MovingCode, ABCClass, ExPickingListNo, ExPickingListDate, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',NULL,NULL,''' 
										          +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSInvoiceHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSInvoiceHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSFPJDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJDtl
										(CompanyCode, BranchCode, FPJNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, MovingCode, 
										 ABCClass, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSFPJHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSFPJHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''FAKTUR'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table arInterface
				set @sqlString = 'merge into ' +@DBNameMD+ '..arInterface as ar using ( values(''' 
								 +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
								 +convert(varchar,@curDocDate,121)+ ''',''300'',''' 
								 +convert(varchar,@TotSalesAmt)+ ''',0,''' 
								 +convert(varchar,@curBranchCode)+ ''',''' +@TopCodeMD+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',''INVOICE'',0,0,0,'''
								 +@SalesCodeMD+ ''',NULL,0,''POSTING'',''' 
								 +convert(varchar,@PostingDate,111)+ ''',''' 
								 +@AccNoArMD+ ''',NULL,''' +convert(varchar,@curDocDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
								NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
								NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate)
						on ar.CompanyCode = SRC.NewCompany
					   and ar.BranchCode  = SRC.NewBranch
					   and ar.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NettAmt = NettAmt + NewNettAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode, NettAmt, ReceiveAmt, 
										 CustomerCode, TOPCode, DueDate, TypeTrans, BlockAmt, DebetAmt, CreditAmt, SalesCode, 
										 LeasingCode, StatusFlag, CreateBy, CreateDate, AccountNo, FakturPajakNo, FakturPajakDate)
								values (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
										NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
										NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table glInterface
				-- glInterface - AR
				set @SeqNoGLMD = 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoArMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@TotSalesAmt)+ 
											   ''',0,''AR'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AR''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - SALES
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoSalesMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@SalesAmt)+ 
											   ''',''SALES'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''SALES''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX OUT
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoTaxOutMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@PPNAmt)+ 
											   ''',''TAX OUT'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX OUT''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - DISC1
				if isnull(@DiscFlag,0) = 1
				begin
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoDisc1MD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@DiscAmt)+ 
											   ''',0,''DISC1'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''DISC1''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
				end

				-- glInterface - COGS
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoCogsMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@CostAmt)+ 
											   ''',0,''COGS'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''COGS''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - INVENTORY
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoInventoryMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@CostAmt)+ 
											   ''',''INVENTORY'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table spTrnPBinnDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnDtl
										(CompanyCode, BranchCode, BinningNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPBinnHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPBinnHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotBinningAmt = TotBinningAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Insert data to table spTrnPRcvDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvDtl
										(CompanyCode, BranchCode, WRSNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPRcvHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPRcvHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotWRSAmt = TotWRSAmt + ' +convert(varchar,@TotPurchaseNetAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Update data to table spTrnPHPP
				set @sqlString = 'update ' +@DBName+ '..spTrnPHPP
								     set TotPurchAmt     = TotPurchAmt     + ' +convert(varchar,@TotPurchaseAmt)+ 
									  ', TotNetPurchAmt  = TotNetPurchAmt  + ' +convert(varchar,@TotPurchaseNetAmt)+ 
									  ', TotTaxAmt       = TotTaxAmt       + ' +convert(varchar,@TotTaxAmt)+ 
									  ', DiffNetPurchAmt = DiffNetPurchAmt   ' +
									  ', DiffTaxAmt      = DiffTaxAmt        ' +
									  ', TotHPPAmt       = TotHPPAmt       + ' +convert(varchar,@TotPurchaseAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and HPPNo=''' +@HPPNo + ''''
					execute sp_executesql @sqlString 

				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt

			 -- SD: Insert/Update data to table apInterface
				set @sqlString = 'merge into ' +@DBName+ '..apInterface as ap using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +@curProfitCenterCode+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +@WRSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''' +@curCompanyMD+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''' +@AccNoAP+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',NULL,0,0,''POSTING'','''
								 +convert(varchar,@PostingDate,111)+ ''',0,''' +@SeriPajakNo+ ''','''
								 +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
								NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
								NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo)
						on ap.CompanyCode = SRC.NewCompany
					   and ap.BranchCode  = SRC.NewBranch
					   and ap.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NetAmt = NetAmt + NewNetAmt
										 , PPNAmt = PPNAmt + NewPPNAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, ProfitCenterCode, DocDate, Reference, 
										ReferenceDate, NetAmt, PPHAmt, SupplierCode, PPNAmt, PPnBM, AccountNo, 
										TermsDate, TermsName, TotalAmt, StatusFlag, CreateBy, CreateDate, 
										ReceiveAmt, FakturPajakNo, FakturPajakDate, RefNo)
								values (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
										NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
										NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo);'
					execute sp_executesql @sqlString

			 -- SD: Insert/Update data to table glInterface
				-- glInterface - INVENTORY
				set @SeqNoGL = 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoInventory+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''INVENTORY'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX IN
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoTaxIn+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''TAX IN'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX IN''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - AP
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoAP+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',0,'''
								 +convert(varchar,@TotPurchaseAmt)+ ''',''AP'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AP''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table glJournal 
			 -- SD: Insert data to table glJournalDtl
				--select * from spTrnPRcvHdr where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPRcvDtl where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPHPP    where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from apInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and Reference in ('WRL/14/102818','WRL/14/102819') --DocNo='HPP/14/102793'
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and DocNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournal    where CompanyCode='6006400001' and BranchCode='6006400131' and ProfitCenterCode='300' order by JournalNo desc --and ReffNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournalDtl where CompanyCode='6006400001' and BranchCode='6006400131' and Description in ('HPP/14/102808','HPP/14/102815')
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and left(DocNo,3) in ('FPJ','HPP') order by BatchNo desc

			 -- Update Daily Posting Process Status
				update svSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and PartNo     =@curPartNo
					  and PartSeq    =@curPartSeq

			 -- Read next record
				fetch next from cursvSDMovement
					into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
						 @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
						 @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
						 @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table svSDMovement to table svHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[svHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[svHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[PartNo] [varchar](20) NOT NULL,
				[PartSeq] [int] NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[QtyOrder] [numeric](18, 2) NOT NULL,
				[Qty] [numeric](18, 2) NOT NULL,
				[DiscPct] [numeric](5, 2) NOT NULL,
				[CostPrice] [numeric](18, 2) NOT NULL,
				[RetailPrice] [numeric](18, 2) NOT NULL,
				[TypeOfGoods] [varchar](5) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[RetailPriceInclTaxMD] [numeric](18, 2) NOT NULL,
				[RetailPriceMD] [numeric](18, 2) NOT NULL,
				[CostPriceMD] [numeric](18, 2) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[ProductType] [varchar](15) NOT NULL,
				[ProfitCenterCode] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NULL,
				[LastUpdateDate] [datetime] NULL)

		insert into svHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  svSDMovement
							  where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		delete svSDMovement   where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		close cursvSDMovement
		deallocate cursvSDMovement
END
GO
if object_id('usprpt_PostingMultiCompanyMainProcess') is not null
	drop procedure usprpt_PostingMultiCompanyMainProcess
GO
-- POSTING TRANSACTION MULTI COMPANY - MAIN PROCESS
-- ---------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ---------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST , UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanyMainProcess] '6006400001','2014/11/14','HTO'
-- update sysParaMeter set ParamValue='2014/11/01' where ParamId='POSTING_STATUS'
-- -------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompanyMainProcess]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@UserId			varchar(20)
AS	

BEGIN TRANSACTION
BEGIN TRY

BEGIN
 -- Check Posting Multi Company Date in table sysParameter
	declare @PostDate	varchar(10)
	declare @PostStatus	integer
	set @PostDate   = (select ParamValue from sysParaMeter where ParamId='POSTING_STATUS')
	set @PostStatus = (case when @PostDate is null                             then 0
	                        when @PostDate < convert(varchar,@PostingDate,111) then 1
					        else                                                    2
					   end)
	if @PostStatus = 0
		insert sysParaMeter values('POSTING_STATUS',convert(varchar,@PostingDate,111),'Posting Multi Company')
	else
		if @PostStatus = 1
			update sysParaMeter set ParamValue=convert(varchar,@PostingDate,111) where ParamId='POSTING_STATUS'
		else
			begin
				select '0' [STATUS], 'Daily Posting tertanggal ' + convert(varchar,@PostingDate,106) + ' sudah pernah dilakukan sebelumnya....' [INFO]
				return
			end

	declare @Status	varchar(1)

	execute [usprpt_PostingMultiCompanySales] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales fail...' [INFO]
			return
		end

	execute [usprpt_PostingMultiCompanySalesReturn] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales Return fail...' [INFO]
			return
		end


	execute [usprpt_PostingMultiCompanySparepartService] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting SparePart & Service fail...' [INFO]
			return
		end
END		

END TRY

BEGIN CATCH
    select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		   ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		rollback transaction
	return
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting Done !!!' [INFO]
		--rollback transaction
		commit transaction
	end

GO
if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001833'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '000003'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'


--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

select * from #srvorder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


select top 10 * from spTrnSORDDtl order by createddate desc
--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================

declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


if(@md = 0)
begin

 declare @PurchaseDisc as decimal  

  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            

set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct,  (md.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)) , a.RetailPrice, b.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''', md.RetailPriceInclTax, md.RetailPrice, md.CostPrice
,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from spTrnSORDDtl a 
join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
and a.BranchCode = b.BranchCode 
and a.DocNo = b.DocNo
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ReferenceNo = '''+ @JobOrderNo +''''

exec (@Query)
--print (@QUERY)

end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO
if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        

 
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6156401000'  
--set @BranchCode = '6156401001'  
--set @ProductType = '4W'  
--set @ServiceNo = 49190  
--set @BillType = 'C'  
--set @PartNo = '01107-06127-000'  
--set @DemandQty = 5  
--set @PartSeq = -1  
--set @UserID = 'Trainingzzz'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
declare @IsSPK as char(1)
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  

  set @IsSPK = isnull((select a.ServiceType from #srv a where a.ServiceType = '2'),0)
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @CompanyMD 
       and ProfitCenterCode = '200')  
         
  if (@PurchaseDisc is null) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select RetailPrice from @tblTemp)
  --select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin
 
 declare @tblTempPart as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  

  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
     from ' + @DbName + '..spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTempPart    
  exec (@QueryTemp)  
   
  --select * into #part from (  
  --select   
  --  a.CostPrice   
  -- ,a.RetailPrice  
  --  from spMstItemPrice a  
  -- where 1 = 1  
  --   and a.CompanyCode = @CompanyCode  
  --   and a.BranchCode  = @BranchCode  
  --   and a.PartNo      = @PartNo  
  --)#part  
    
  set @CostPrice = (select CostPrice from @tblTempPart)  
  set @RetailPrice = (select RetailPrice from @tblTempPart)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   set @Querytemp ='
   update svTrnSrvItem set  
     DemandQty      = '+ convert(varchar,@DemandQty) +'
    ,CostPrice      = '+ convert(varchar,@CostPrice) +' 
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = '''+ @PartNo +''' 
            and b.BillType = ''F'' 
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from '+ @DbName +'..spMstItemPrice  
           where 1 = 1  
             and CompanyCode = '''+ @CompanyMD +'''
             and BranchCode = '''+ @BranchMD +'''
             and PartNo = '''+ @PartNo  +'''
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = '''+ @BillType +'''
    ,DiscPct        = '+ convert(varchar,@DiscPct) +'  
    where 1 = 1  
      and CompanyCode  = '''+ @CompanyCode +''' 
      and BranchCode   = '''+ @BranchCode +''' 
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = '''+ @PartNo +''' 
      and PartSeq      = '+ convert(varchar,@PartSeq) +'' 
	  
	  exec(@QueryTemp) 
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    if (@DealerCode = 'SD' and @IsSPK = '2')  
	 begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  set @QueryTemp='insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    '''+ @CompanyCode +''' CompanyCode  
   ,''' + @BranchCode +''' BranchCode  
   ,'''+ @ProductType +''' ProductType  
   ,'+ convert(varchar,@ServiceNo) +' ServiceNo  
   ,a.PartNo  
   ,'''+ convert(varchar,@PartSeqNew)  +'''
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,'+ convert(varchar,@DemandQty )+' DemandQty  
   ,''0'' SupplyQty  
   ,''0'' ReturnQty  
   ,'+ convert(varchar,isnull(@CostPrice,0))  +'
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,'''+ @BillType +''' BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,'+ convert(varchar,isnull(@DiscPct,0))  +'
   ,(select MechanicID from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo) +')  
    from '+ @DbName +'..spMstItemPrice a, '+ @DbName +'..spMstItems b, #srv c, gnmstcompanymapping d 
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
	 and d.CompanyMd = a.CompanyCode
	 and d.BranchMD = a.BranchCode
        and d.CompanyCode = c.CompanyCode  
     and d.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = '''+ @CompanyMD +'''
     and a.BranchCode  = '''+ @BranchMD +'''
     and a.PartNo      = '''+ @PartNo +''''    
	  exec(@QueryTemp)


  --select   @CostPrice   
  --xxx
  
  if (@DealerCode = 'SD' and @IsSPK = '2')  
  begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
   
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
     	,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 if (@DealerCode = 'SD' and @IsSPK = '2')  
 begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  
GO
if object_id('usprpt_PostingMultiCompanySparePartService') is not null
	drop procedure usprpt_PostingMultiCompanySparePartService
GO
-- POSTING TRANSACTION MULTI COMPANY - SPARE PART & SERVICE
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- ----------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySparePartService] '6006406','2014/11/30','0'
-- ----------------------------------------------------------------------------------

create procedure [dbo].[usprpt_PostingMultiCompanySparePartService]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN 
  -- Check Tax/Seri Pajak online
		declare @TaxCompany					varchar(15)
		declare @TaxBranch					varchar(15)
		declare @TaxDB						varchar(50)
		declare @TaxTransCode				varchar(3)
		declare @swTaxBranch				varchar(15) = ''
		declare @swTaxDoc					varchar(15) = ''
		declare @TaxSeq						bigint
		declare @TaxSeqNo					int
		declare @SeriPajakNo				varchar(50) = ''

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			return

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode				varchar(15)
		declare @curBranchCode				varchar(15)
		declare @curDocNo					varchar(20)
		declare @curDocDate					datetime
		declare @curPartNo					varchar(20)
		declare @curPartSeq					integer
		declare @curWarehouseCode			varchar(15)
		declare @curQtyOrder				numeric(18,2)
		declare @curQty						numeric(18,2)
		declare @curDiscPct					numeric(06,2)
		declare @curCostPrice				numeric(18,2)
		declare @curRetailPrice				numeric(18,2)
		declare @curTypeOfGoods				varchar(15)
		declare @curCompanyMD				varchar(15)
		declare @curBranchMD				varchar(15)
		declare @curWarehouseMD				varchar(15)
		declare @curRetailPriceInclTaxMD	numeric(18,2)
		declare @curRetailPriceMD			numeric(18,2)
		declare @curCostPriceMD				numeric(18,2)
		declare @curQtyFlag					char(1)
		declare @curProductType				varchar(15)
		declare @curProfitCenterCode		varchar(15)
		declare @curStatus					char(1)
		declare @curProcessStatus			char(1)
		declare @curProcessDate				datetime
		declare @curCreatedBy				varchar(15)
		declare @curCreatedDate				datetime
		declare @curLastUpdateBy			varchar(15)
		declare @curLastUpdateDate			datetime
		declare @DocPrefix					varchar(15)
		declare @SONo						varchar(15)
		declare @PLNo						varchar(15)
		declare @INVNo						varchar(15)
		declare @FPJNo						varchar(15)
		declare @POSNo						varchar(15)
		declare @BINNo						varchar(15)
		declare @WRSNo						varchar(15)
		declare @HPPNo						varchar(15)
		declare @APNo						varchar(15)
		declare @DocYear					numeric(4,0)
		declare @DocSeq						numeric(15,0)
		declare @SeqNo						integer
		declare @DBName						varchar(50)
		declare @DBNameMD					varchar(50)
		declare @sqlString					nvarchar(max)
		declare @swCompanyCode				varchar(15) = ''
		declare @swBranchCode				varchar(15) = ''
		declare @swDocNo 					varchar(15) = ''
		declare @TotPurchaseAmt				numeric(18,0)
		declare @TotPurchaseNetAmt			numeric(18,0)
		declare @TotTaxAmt					numeric(18,0)
		declare @RetailPriceNet				numeric(18,0)
		declare @SalesAmt					numeric(18,0)
		declare @DiscAmt					numeric(18,0)
		declare @NetSales					numeric(18,0)
		declare @PPNAmt						numeric(18,0)
		declare @TotSalesAmt				numeric(18,0)
		declare @CostAmt 					numeric(18,0)
		declare @MovingCode					varchar(15)
		declare @ABCClass					char(1)
		declare @PartCategory				varchar(15)
		declare @LocationCode				varchar(10)
		declare @MovingCodeMD				varchar(15)
		declare @ABCClassMD					char(1)
		declare @PartCategoryMD				varchar(3)
		declare @LocationCodeMD				varchar(10)
		declare @ProductTypeMD				varchar(15)	
		declare @TypeOfGoodsMD				varchar(5)
		declare @PaymentCodeMD				varchar(15)
		declare @SalesCodeMD				varchar(15)
		declare @CustomerNameMD				varchar(100)
		declare @Address1MD					varchar(100)
		declare @Address2MD					varchar(100)
		declare @Address3MD					varchar(100)
		declare @Address4MD					varchar(100)
		declare @isPKPMD					varchar(100)
		declare @NPWPNoMD					varchar(100)
		declare @SKPNoMD					varchar(100)
		declare @SKPDateMD					datetime
		declare @NPWPDateMD					datetime
		declare @TopCodeMD					varchar(15)
		declare @TopDaysMD					integer
		declare @DueDateMD					date
		declare @AccNoArMD					varchar(50)
		declare @AccNoSalesMD				varchar(50)
		declare @AccNoTaxOutMD				varchar(50)
		declare @AccNoDisc1MD				varchar(50)
		declare @AccNoCogsMD				varchar(50)
		declare @AccNoInventoryMD			varchar(50)
		declare @AccNoInventory				varchar(50)
		declare @AccNoTaxIn					varchar(50)
		declare @AccNoAP					varchar(50)
		declare @SeqNoGlMD					numeric(10,0)
		declare @SeqNoGl					numeric(10,0)
		declare @DiscFlag					integer
		declare @CurrentDate				varchar(100) = convert(varchar,getdate(),121)

        declare cursvSDMovement cursor for
			select * from svSDMovement
             where left(DocNo,3) in ('LMP','FPJ') 
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus='0'
             order by CompanyCode, BranchCode, DocNo, TypeOfGoods, PartNo, PartSeq
		open cursvSDMovement

		fetch next from cursvSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
			       @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
				   @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
				   @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin
			 -- MD : Database Name, Company Code & Branch Code MD
				set @DBNameMD = (select DbMD   from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode)

			 -- SD : Database Name 
				set @DBName   = (select DbName from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)

			 -- MD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCodeMD=MovingCode, @ABCClassMD=ABCClass, @PartCategoryMD=PartCategory, @TypeOfGoodsMD=TypeOfGoods from ' 
										  +@DBNameMD+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCodeMD		varchar(15) output,
										  @ABCClassMD 		char(1) 	output,
										  @PartCategoryMD 	varchar(3) 	output,
										  @TypeOfGoodsMD 	varchar(15) output', 
										  @MovingCodeMD 	output,
										  @ABCClassMD 		output,
										  @PartCategoryMD 	output,
										  @TypeOfGoodsMD 	output
										  
			 -- MD: Location Code
				set @sqlString = N'select @LocationCodeMD=LocationCode from ' 
										  +@DBNameMD+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCodeMD 	varchar(10) output', 
										  @LocationCodeMD 	output

			 -- MD: ProducType
				set @sqlString = N'select @ProductTypeMD=ProductType from ' 
										  +@DBNameMD+ '..gnMstCoProfile where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''''
					execute sp_executesql @sqlString, 
										N'@ProductTypeMD 	varchar(15) output', 
										  @ProductTypeMD 	output

			 -- MD: Top Code, Payment Code, Sales Code
				set @sqlString = N'select @TopCodeMD=TopCode, @PaymentCodeMD=PaymentCode, @SalesCodeMD=SalesCode from ' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and CustomerCode=''' 
										  +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @sqlString, 
										N'@TopCodeMD 		varchar(15) output,
										  @PaymentCodeMD 	varchar(15) output,
										  @SalesCodeMD 		varchar(15) output', 
										  @TopCodeMD 		output,
										  @PaymentCodeMD 	output,
										  @SalesCodeMD 		output

			 -- MD: Top Days
				set @sqlString = N'select @TopDaysMD=ParaValue from ' 
										  +@DBNameMD+ '..gnMstLookUpDtl where CompanyCode=''' 
										  +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' 
										  +@TopCodeMD+ ''''
					execute sp_executesql @sqlString, 
										N'@TopDaysMD 		integer	output', 
										  @TopDaysMD 		output
										  
				-- MD: AR Account
				set @sqlString = N'select @AccNoArMD=c.ReceivableAccNo from ' 
				                          +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ 
								  ''' and c.BranchCode      =''' +@curBranchMD+ 
								  ''' and c.ProfitCenterCode=''300''
								      and c.TypeOfGoods     =''' +@TypeOfGoodsMD+
								  ''' and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoArMD 		varchar(50) output', 
										  @AccNoArMD 		output
										  
				-- MD: Sales Account
				set @sqlString = N'select @AccNoSalesMD=SalesAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoSalesMD 	varchar(50) output', 
										  @AccNoSalesMD 	output
										  
				-- MD: Tax Account
				set @sqlString = N'select @AccNoTaxOutMD=c.TaxOutAccNo from ' 
										  +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ ''' 
									  and c.BranchCode      =''' +@curBranchMD+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@TypeOfGoodsMD+ '''
									  and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoTaxOutMD 	varchar(50) output', 
										  @AccNoTaxOutMD 	output
										  
				-- MD: Discount, COGS & Inventory Account
				set @sqlString = N'select @AccNoDisc1MD=DiscAccNo, @AccNoCogsMD=COGSAccNo, @AccNoInventoryMD=InventoryAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString,
										N'@AccNoDisc1MD 	varchar(50) output,
										  @AccNoCogsMD 		varchar(50) output,
										  @AccNoInventoryMD varchar(50) output', 
										  @AccNoDisc1MD 	output,
										  @AccNoCogsMD 		output,
										  @AccNoInventoryMD output
										  
				set @SalesAmt    = @curQty*@curRetailPriceInclTaxMD 
				set @DiscAmt     = round((@SalesAmt*@curDiscPct / 100),0)
				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt
				set @CostAmt     = @curQty*@curCostPriceMD 
				set @DueDateMD   = dateadd(day,isnull(@TopDaysMD,0),@curDocDate)

				-- SD: A/P, TAX IN  Account
				set @sqlString = N'select @AccNoAP=c.PayableAccNo, @AccNoTaxIn=c.TaxInAccNo from ' 
										  +@DBName+ '..gnMstSupplierClass c,' 
										  +@DBName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoAP 			varchar(50) output,
										  @AccNoTaxIn 		varchar(50) output', 
										  @AccNoAP 			output,
										  @AccNoTaxIn 		output

				-- SD: Inventory Account
				set @sqlString = N'select @AccNoInventory=InventoryAccNo from ' 
										  +@DBName+ '..spMstAccount
									where CompanyCode=''' +@curCompanyCode+ ''' 
									  and BranchCode =''' +@curBranchCode+ '''
									  and TypeOfGoods=''' +@CurTypeOfGoods+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoInventory 	varchar(50) output', 
										  @AccNoInventory 	output

			 -- SD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCode=MovingCode, @ABCClass=ABCClass, @PartCategory=PartCategory from ' 
										  +@DBName+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCode		varchar(15) output,
										  @ABCClass 		char(1) 	output,
										  @PartCategory 	varchar(3) 	output',
										  @MovingCode 		output,
										  @ABCClass 		output,
										  @PartCategory 	output

			 -- SD: Location Code
				set @sqlString = N'select @LocationCode=LocationCode from ' 
										  +@DBName+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCode 	varchar(15) output', 
										  @LocationCode 	output

				set @RetailPriceNet    = round(@curRetailPriceMD * (100.00-@curDiscPct) / 100.00,0)
				set @TotPurchaseNetAmt = @CurQty * @RetailPriceNet
				set @TotTaxAmt         = round(@TotPurchaseNetAmt * 0.1,0)
			    set @TotPurchaseAmt    = @TotPurchaseNetAmt + @TotTaxAmt


				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0

					 -- Discount Flag
						--set @sqlString = N'select top 1 @DiscFlag=1 from ' 
						--						  +@DBName+ '..svSDMovement where CompanyCode=''' 
						--						  +@curCompanyCode+ ''' and BranchCode=''' 
						--						  +@curBranchCode+ ''' and DocNo=''' 
						--						  +@curDocNo+ ''''
						--	execute sp_executesql @sqlString, 
						--						N'@DiscFlag 	integer output', 
						--						  @DiscFlag  	output
						set @DiscFlag = 1

					 -- SD : Insert data to table spTrnPPOSHdr
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'POS', @POSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSHdr 
										(CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, isBO, isSubstution, isSuggorProcess, 
										 Remark, ProductType, PrintSeq, ExPickingSlipNo, ExPickingSlipDate, Status, Transportation, TypeOfGoods, 
										 isGenPORDD, isDeleted, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
										 LockingDate, isDropSign, DropSignReffNo)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''S'',0,0,0,''' 
												   +@curDocNo+ ''',''' +@curProductType+ ''',1,'''',NULL,7,NULL,''' 
												   +@curTypeOfGoods+ ''',0,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL,0,NULL)'
							execute sp_executesql @sqlString

					 -- MD : Insert data to table spTrnSORDHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'SOC', @SONo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDHdr 
										(CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill,
										 CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, isPORDD, OrderNo, OrderDate,
										 TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt,
										 TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate, isDropSign)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''' +@curBranchCode+ ''',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',0,0,1,''00'',''0'',0,''' 
												   +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@TopCodeMD+ ''',''' 
												   +convert(varchar,@TopDaysMD)+ ''',''' +@PaymentCodeMD+ ''',NULL,0.00,0,0,0,0,0,1,NULL,NULL,5,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,''' +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSPickingHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'PLS', @PLNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingHdr 
										(CompanyCode, BranchCode, PickingSlipNo, PickingSlipDate, CustomerCode, CustomerCodeBill, 
										 CustomerCodeShip, PickedBy, isBORelease, isSubstitution, isIncludePPN, TransType, SalesType, 
										 TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Remark, Status, 
										 PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchCode+
											   ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''POSTING'',0,0,1,''00'',''0'',0,0,0,0,0,0,NULL,2,1,'''
											           +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSInvoiceHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'INV', @INVNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'FPJ', @FPJNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceHdr 
										(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, PickingSlipNo, PickingSlipDate, FPJNo, FPJDate,
										 TransType, SalesType, CustomerCode, CustomerCodeBill, CustomerCodeShip, TotSalesQty, TotSalesAmt, 
										 TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@PLNo+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''0'','''
													   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ 
											   ''',0,0,0,0,0,0,''2'',1,''' +left(@TypeOfGoodsMD,1)+
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJHdr 
						--Tax / Seri Pajak Numbering

						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>left(@swTaxDoc,3)
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
														  +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
														  +@TaxCompany+ ''' and BranchCode=''' 
														  +@TaxBranch+ ''' and Year=''' 
														  +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
														  +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @sqlString, 
														N'@TaxSeq 		bigint  	output,
														  @TaxSeqNo 	int 		output', 
														  @TaxSeq 		output,
														  @TaxSeqNo 	output

								set @sqlString = N'select top 1 @TaxTransCode=TaxTransCode from ' 
														  +@TaxDb+ '..gnMstCoProfile where CompanyCode=''' 
														  +@TaxCompany + ''' and BranchCode=''' 
														  +@TaxBranch+ ''''
									execute sp_executesql @sqlString, 
														N'@TaxTransCode varchar(3) 	output', 
														  @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlString = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' 
														+@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlString 

								set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
													+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
													+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
							end

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJHdr 
										(CompanyCode, BranchCode, FPJNo, FPJDate, TPTrans, FPJGovNo, FPJSignature, 
										 FPJCentralNo, FPJCentralDate, DeliveryNo, InvoiceNo, InvoiceDate, PickingSlipNo, 
										 PickingSlipDate, TransType, CustomerCode, CustomerCodeBill, CustomerCodeShip, 
										 TOPCode, TOPDays, DueDate, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, 
										 TotFinalSalesAmt, isPKP, Status, PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, 
										 LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''P'',''' +@SeriPajakNo+ ''','''
											       +convert(varchar,@curDocDate,121)+ ''',NULL,'''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''',''' 
												   +@INVNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@PLNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' 
												   +@TopCodeMD+ ''',''' +convert(varchar,@TopDaysMD)+ ''',''' 
												   +convert(varchar,@DueDateMD,121)+ ''',0,0,0,0,0,0,1,1,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJInfo
						set @sqlString = N'select @CustomerNameMD=CustomerGovName, @Address1MD=Address1, @Address2MD=Address2, ' +
												  '@Address3MD=Address3, @Address4MD=Address4, @isPKPMD=isPKP, @NPWPNoMD=NPWPNo, ' +
												  '@SKPNoMD=SKPNo, @SKPDateMD=SKPDate, @NPWPDateMD=NPWPDate from ' 
												  +@DBNameMD+ '..gnMstCustomer where CompanyCode=''' 
												  +@curCompanyMD+ ''' and CustomerCode=''' 
												  +@curBranchCode+ ''''
							execute sp_executesql @sqlString, 
												N'@CustomerNameMD 	varchar(100) output,
												  @Address1MD 		varchar(100) output,
												  @Address2MD 		varchar(100) output,
												  @Address3MD 		varchar(100) output,
												  @Address4MD 		varchar(100) output,
												  @isPKPMD 			bit 		 output,
												  @NPWPNoMD 		varchar(100) output,
												  @SKPNoMD 			varchar(100) output,
												  @SKPDateMD 		datetime 	 output,
												  @NPWPDateMD 		datetime     output', 
												  @CustomerNameMD 	output,
												  @Address1MD 		output,
												  @Address2MD 		output,
												  @Address3MD 		output,
												  @Address4MD 		output,
												  @isPKPMD 			output,
												  @NPWPNoMD 		output,
												  @SKPNoMD 			output,
												  @SKPDateMD 		output,
												  @NPWPDateMD 		output

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJInfo 
										(CompanyCode, BranchCode, FPJNo, CustomerName, Address1, Address2, 
										 Address3, Address4, isPKP, NPWPNo, SKPNo, SKPDate, NPWPDate, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +@CustomerNameMD+ ''',''' +@Address1MD+ ''',''' 
											   +@Address2MD+ ''',''' +@Address3MD+ ''',''' +@Address4MD+ 
											   ''',''' +@isPKPMD+ ''',''' +@NPWPNoMD+ ''',''' +@SKPNoMD+ 
											   ''',''' +convert(varchar,@SKPDateMD,121)+ ''',''' 
											   +convert(varchar,@NPWPDateMD,121)+ ''',''POSTING'',''' 
											   +convert(varchar,@PostingDate,121)+ ''',''POSTING'',''' 
											   +@currentDate+ ''')'
							execute sp_executesql @sqlString

					 -- SD : Insert data to table spTrnPBinnHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNL', @BINNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnHdr 
										(CompanyCode, BranchCode, BinningNo, BinningDate, ReceivingType, DNSupplierNo, DNSupplierDate, TransType, 
										 SupplierCode, ReferenceNo, ReferenceDate, TotItem, TotBinningAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''','''
												   +@FPJNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' 
												   +@curTypeOfGoods+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString
					
					 -- SD : Insert data to table spTrnPRcvHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'WRL', @WRSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvHdr 
										(CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate, ReceivingType, 
										 DNSupplierNo, DNSupplierDate, TransType, SupplierCode, ReferenceNo, ReferenceDate, 
										 TotItem, TotWRSAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' 
												   +@curCompanyMD+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- SD : Insert data to spTrnPHPP 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'HPP', @HPPNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNP', @APNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPHPP 
										(CompanyCode, BranchCode, HPPNo, HPPDate, WRSNo, WRSDate, ReferenceNo, ReferenceDate,
										 TotPurchAmt, TotNetPurchAmt, TotTaxAmt, TaxNo, TaxDate, MonthTax, YearTax, DueDate,
										 DiffNetPurchAmt, DiffTaxAmt, TotHppAmt, CostPrice, PrintSeq, TypeOfGoods, Status, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,0,''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,month(@curDocDate),121)+ ''',''' 
												   +convert(varchar,year(@curDocDate),121)+ ''',''' 
												   +convert(varchar,@DueDateMD,111)+ ''',0,0,0,0,1,''' 
												   +@curTypeOfGoods+ ''',2,''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''')'
							execute sp_executesql @sqlString
					end   

				set @SeqNo = @SeqNo + 1
			 -- SD: Insert data to table spTrnPPOSDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSDtl
										(CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, PurchasePrice, DiscPct,
										 PurchasePriceNett, CostPrice, TotalAmount, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, Note)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' +@curPartNo+ 
										  ''',' +convert(varchar,@SeqNo)+ ',' +convert(varchar,@curQty)+ 
										  ',' +convert(varchar,@curQtyOrder)+ ',' +convert(varchar,@curRetailPrice)+ 
										  ',' +convert(varchar,@curDiscPct)+ ',' +convert(varchar,@RetailPriceNet)+ 
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@TotPurchaseNetAmt)+ 
										  ',''' +@ABCClass+ ''',''' +@MovingCode+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curDocNo+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Insert data to table spTrnPOrderBalance
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPOrderBalance
										(CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
										 POSDate, OrderQty, OnOrder, Intransit, Received, Located, DiscPct, PurchasePrice, 
										 CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
											  +@curBranchMD+ ''',''' +@curPartNo+ ''',' +convert(varchar,@SeqNo)+ ','''
											  +@curPartNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','
											  +convert(varchar,@curQty)+ ',0,0,' +convert(varchar,@curQty)+ ','
											  +convert(varchar,@curQty)+ ',' +convert(varchar,@curDiscPct)+ ','
											  +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+ ','''
											  +@ABCClass+ ''',''' +@MovingCode+ ''',''' +@WRSNo+ ''',''' 
											  +convert(varchar,@curDocDate,121)+ ''',''' +@curTypeOfGoods+ ''',''' 
											  +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											  +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSORDDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDDtl
										(CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, 
										 ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, 
										 QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice,
										 CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, 
										 MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
										 StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +@curPartNo+ ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',0,0,0,'''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ ''','''
										  +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ ''','''
										  +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ ''','''
										  +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ ''','''
										  +@MovingCode+ ''',''' +left(@ABCClass,1)+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',5,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +convert(varchar,@curQtyOrder)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSOSupply 
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSOSupply
										(CompanyCode, BranchCode, DocNo, SupSeq, PartNo, PartNoOriginal, PTSeq, 
										 PickingSlipNo, ReferenceNo, ReferenceDate, WarehouseCode, LocationCode, 
										 QtySupply, QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, 
										 DiscPct, MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',0,''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +convert(varchar,@SeqNo)+ ''',''' +@PLNo+
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curCreatedDate,121)+
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +@MovingCode+ ''',''' +@ABCClass+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',2,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSORDHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSORDHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocNo=''' +@SONo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table spHstDemandItem 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandItem as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
						                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
			 --MD: Insert/Update data to table spHstDemandcust 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandcust as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curBranchCode+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.CustomerCode= SRC.NewCustomer
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, CustomerCode, PartNo, DemandFreq, DemandQty, SalesFreq, 
									    SalesQty, MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert Data to table spTrnSPickingDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingDtl
										(CompanyCode, BranchCode, PickingSlipNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, 
										 QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, 
										 SalesAmt, DiscAmt, NetSalesAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, 
										 PartCategory, ExPickingSlipNo, ExPickingSlipDate, isClosed, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQtyOrder)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@TotSalesAmt)+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ 
										  ''',NULL,NULL,0,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSPickingHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSPickingHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSInvoiceDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceDtl
										(CompanyCode, BranchCode, InvoiceNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, 
										 MovingCode, ABCClass, ExPickingListNo, ExPickingListDate, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',NULL,NULL,''' 
										          +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSInvoiceHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSInvoiceHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSFPJDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJDtl
										(CompanyCode, BranchCode, FPJNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, MovingCode, 
										 ABCClass, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSFPJHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSFPJHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''FAKTUR'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table arInterface
				set @sqlString = 'merge into ' +@DBNameMD+ '..arInterface as ar using ( values(''' 
								 +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
								 +convert(varchar,@curDocDate,121)+ ''',''300'',''' 
								 +convert(varchar,@TotSalesAmt)+ ''',0,''' 
								 +convert(varchar,@curBranchCode)+ ''',''' +@TopCodeMD+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',''INVOICE'',0,0,0,'''
								 +@SalesCodeMD+ ''',NULL,0,''POSTING'',''' 
								 +convert(varchar,@PostingDate,111)+ ''',''' 
								 +@AccNoArMD+ ''',NULL,''' +convert(varchar,@curDocDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
								NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
								NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate)
						on ar.CompanyCode = SRC.NewCompany
					   and ar.BranchCode  = SRC.NewBranch
					   and ar.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NettAmt = NettAmt + NewNettAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode, NettAmt, ReceiveAmt, 
										 CustomerCode, TOPCode, DueDate, TypeTrans, BlockAmt, DebetAmt, CreditAmt, SalesCode, 
										 LeasingCode, StatusFlag, CreateBy, CreateDate, AccountNo, FakturPajakNo, FakturPajakDate)
								values (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
										NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
										NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table glInterface
				-- glInterface - AR
				set @SeqNoGLMD = 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoArMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@TotSalesAmt)+ 
											   ''',0,''AR'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AR''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - SALES
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoSalesMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@SalesAmt)+ 
											   ''',''SALES'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''SALES''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX OUT
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoTaxOutMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@PPNAmt)+ 
											   ''',''TAX OUT'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX OUT''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - DISC1
				if isnull(@DiscFlag,0) = 1
				begin
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoDisc1MD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@DiscAmt)+ 
											   ''',0,''DISC1'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''DISC1''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
				end

				-- glInterface - COGS
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoCogsMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@CostAmt)+ 
											   ''',0,''COGS'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''COGS''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - INVENTORY
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoInventoryMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@CostAmt)+ 
											   ''',''INVENTORY'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table spTrnPBinnDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnDtl
										(CompanyCode, BranchCode, BinningNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPBinnHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPBinnHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotBinningAmt = TotBinningAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Insert data to table spTrnPRcvDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvDtl
										(CompanyCode, BranchCode, WRSNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPRcvHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPRcvHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotWRSAmt = TotWRSAmt + ' +convert(varchar,@TotPurchaseNetAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Update data to table spTrnPHPP
				set @sqlString = 'update ' +@DBName+ '..spTrnPHPP
								     set TotPurchAmt     = TotPurchAmt     + ' +convert(varchar,@TotPurchaseAmt)+ 
									  ', TotNetPurchAmt  = TotNetPurchAmt  + ' +convert(varchar,@TotPurchaseNetAmt)+ 
									  ', TotTaxAmt       = TotTaxAmt       + ' +convert(varchar,@TotTaxAmt)+ 
									  ', DiffNetPurchAmt = DiffNetPurchAmt   ' +
									  ', DiffTaxAmt      = DiffTaxAmt        ' +
									  ', TotHPPAmt       = TotHPPAmt       + ' +convert(varchar,@TotPurchaseAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and HPPNo=''' +@HPPNo + ''''
					execute sp_executesql @sqlString 

				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt

			 -- SD: Insert/Update data to table apInterface
				set @sqlString = 'merge into ' +@DBName+ '..apInterface as ap using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +@curProfitCenterCode+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +@WRSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''' +@curCompanyMD+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''' +@AccNoAP+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',NULL,0,0,''POSTING'','''
								 +convert(varchar,@PostingDate,111)+ ''',0,''' +@SeriPajakNo+ ''','''
								 +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
								NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
								NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo)
						on ap.CompanyCode = SRC.NewCompany
					   and ap.BranchCode  = SRC.NewBranch
					   and ap.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NetAmt = NetAmt + NewNetAmt
										 , PPNAmt = PPNAmt + NewPPNAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, ProfitCenterCode, DocDate, Reference, 
										ReferenceDate, NetAmt, PPHAmt, SupplierCode, PPNAmt, PPnBM, AccountNo, 
										TermsDate, TermsName, TotalAmt, StatusFlag, CreateBy, CreateDate, 
										ReceiveAmt, FakturPajakNo, FakturPajakDate, RefNo)
								values (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
										NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
										NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo);'
					execute sp_executesql @sqlString

			 -- SD: Insert/Update data to table glInterface
				-- glInterface - INVENTORY
				set @SeqNoGL = 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoInventory+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''INVENTORY'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX IN
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoTaxIn+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''TAX IN'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX IN''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - AP
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoAP+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',0,'''
								 +convert(varchar,@TotPurchaseAmt)+ ''',''AP'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AP''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table glJournal 
			 -- SD: Insert data to table glJournalDtl
				--select * from spTrnPRcvHdr where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPRcvDtl where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPHPP    where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from apInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and Reference in ('WRL/14/102818','WRL/14/102819') --DocNo='HPP/14/102793'
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and DocNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournal    where CompanyCode='6006400001' and BranchCode='6006400131' and ProfitCenterCode='300' order by JournalNo desc --and ReffNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournalDtl where CompanyCode='6006400001' and BranchCode='6006400131' and Description in ('HPP/14/102808','HPP/14/102815')
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and left(DocNo,3) in ('FPJ','HPP') order by BatchNo desc

			 -- Update Daily Posting Process Status
				update svSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and PartNo     =@curPartNo
					  and PartSeq    =@curPartSeq

			 -- Read next record
				fetch next from cursvSDMovement
					into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
						 @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
						 @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
						 @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table svSDMovement to table svHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[svHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[svHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[PartNo] [varchar](20) NOT NULL,
				[PartSeq] [int] NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[QtyOrder] [numeric](18, 2) NOT NULL,
				[Qty] [numeric](18, 2) NOT NULL,
				[DiscPct] [numeric](5, 2) NOT NULL,
				[CostPrice] [numeric](18, 2) NOT NULL,
				[RetailPrice] [numeric](18, 2) NOT NULL,
				[TypeOfGoods] [varchar](5) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[RetailPriceInclTaxMD] [numeric](18, 2) NOT NULL,
				[RetailPriceMD] [numeric](18, 2) NOT NULL,
				[CostPriceMD] [numeric](18, 2) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[ProductType] [varchar](15) NOT NULL,
				[ProfitCenterCode] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NULL,
				[LastUpdateDate] [datetime] NULL)

		insert into svHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  svSDMovement
							  where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		delete svSDMovement   where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		close cursvSDMovement
		deallocate cursvSDMovement
END
GO
if object_id('usprpt_PostingMultiCompanyMainProcess') is not null
	drop procedure usprpt_PostingMultiCompanyMainProcess
GO
-- POSTING TRANSACTION MULTI COMPANY - MAIN PROCESS
-- ---------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ---------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST , UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanyMainProcess] '6006400001','2014/11/14','HTO'
-- update sysParaMeter set ParamValue='2014/11/01' where ParamId='POSTING_STATUS'
-- -------------------------------------------------------------------------------

CREATE  procedure [dbo].[usprpt_PostingMultiCompanyMainProcess]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@UserId			varchar(20)
AS	

BEGIN TRANSACTION
BEGIN TRY

BEGIN
 -- Check Posting Multi Company Date in table sysParameter
	declare @PostDate	varchar(10)
	declare @PostStatus	integer
	set @PostDate   = (select ParamValue from sysParaMeter where ParamId='POSTING_STATUS')
	set @PostStatus = (case when @PostDate is null                             then 0
	                        when @PostDate < convert(varchar,@PostingDate,111) then 1
					        else                                                    2
					   end)
	if @PostStatus = 0
		insert sysParaMeter values('POSTING_STATUS',convert(varchar,@PostingDate,111),'Posting Multi Company')
	else
		if @PostStatus = 1
			update sysParaMeter set ParamValue=convert(varchar,@PostingDate,111) where ParamId='POSTING_STATUS'
		else
			begin
				select '0' [STATUS], 'Daily Posting tertanggal ' + convert(varchar,@PostingDate,106) + ' sudah pernah dilakukan sebelumnya....' [INFO]
				return
			end

	declare @Status	varchar(1)

	execute [usprpt_PostingMultiCompanySales] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales fail...' [INFO]
			return
		end

	execute [usprpt_PostingMultiCompanySalesReturn] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales Return fail...' [INFO]
			return
		end


	execute [usprpt_PostingMultiCompanySparepartService] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting SparePart & Service fail...' [INFO]
			return
		end
END		

END TRY

BEGIN CATCH
    select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		   ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		rollback transaction
	return
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting Done !!!' [INFO]
		--rollback transaction
		commit transaction
	end

GO
CREATE VIEW [dbo].[VW_TREEMENUS]
AS
select moduleid MenuId, ModuleCaption MenuCaption,NULL MenuHeader,ModuleIndex MenuIndex,0 MenuLevel,'' MenuUrl from sysmodule
UNION
select MenuId, MenuCaption, MenuHeader,MenuIndex, MenuLevel, MenuUrl from sysmenudms
GO
if object_id('uspfn_SvTrnServiceInsertDefaultTaskNew') is not null
	drop procedure uspfn_SvTrnServiceInsertDefaultTaskNew
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceInsertDefaultTaskNew]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@ServiceBookNo varchar(15),
	@UserID varchar(15)
as      

--declare @CompanyCode varchar(15),
--		@BranchCode varchar(15),
--		@ProductType varchar(15),
--		@ServiceNo bigint,
--		@ServiceBookNo varchar(15)		

--set @CompanyCode = '6006406'
--set	@BranchCode = '6006401'
--set	@ProductType = '4W'
--set	@ServiceNo = '40655'
--set @ServiceBookNo = 'EJ06'

-- check jika count svTrnSrvTask ada maka tidak perlu insert task 
if(select count(*) from svTrnSrvTask
    where 1 = 1
      and CompanyCode = @CompanyCode
      and BranchCode  = @BranchCode
      and ProductType = @ProductType
      and ServiceNo   = @ServiceNo) > 0
	return

-- select data svTrnService
select * into #srv from (
  select a.* from svTrnService a
	where 1 = 1
	  and a.CompanyCode = @CompanyCode
	  and a.BranchCode  = @BranchCode
	  and a.ProductType = @ProductType
	  and a.ServiceNo   = @ServiceNo
)#srv

-----------------------------------------------
-- insert default svTrnSrvTask
-----------------------------------------------
select * into #task from(
select a.CompanyCode, a.ProductType, a.BasicModel, a.JobType, a.OperationNo, a.Description
	 , isnull(c.OperationHour, a.OperationHour) OperationHour
	 , isnull(c.ClaimHour, a.ClaimHour) ClaimHour
	 , isnull(c.LaborCost, a.LaborCost) LaborCost
	 , isnull(c.LaborPrice, a.LaborPrice) LaborPrice
	 , a.IsSubCon, a.IsCampaign, b.CreatedBy as LastupdateBy, getdate() as  LastupdateDate
	 , case when exists (
			select pkg.CompanyCode, pkg.PackageCode, pkg.JobType
			  from svMstPackage pkg
			 inner join svMstPackageTask tsk
				on tsk.CompanyCode = pkg.CompanyCode
			   and tsk.PackageCode = pkg.PackageCode
			 inner join svMstPackageContract con
				on con.CompanyCode = pkg.CompanyCode
			   and con.PackageCode = pkg.PackageCode
			 where pkg.CompanyCode = b.CompanyCode
			   and pkg.JobType = b.JobType
			   and tsk.OperationNo = a.OperationNo
			   and con.ChassisCode = b.ChassisCode
			   and con.ChassisNo = b.ChassisNo
		) then 'P' else (case when isnull(a.BillType, '') = '' then 'C' else a.BillType end)
		  end as BillType
  from svMstTask a
 inner join #srv b
    on b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.BasicModel  = a.BasicModel
   and b.JobType     = a.JobType
  left join svMstTaskPrice c
	on c.CompanyCode = a.CompanyCode
   and c.BranchCode  = b.BranchCode
   and c.ProductType = a.ProductType
   and c.BasicModel  = a.BasicModel
   and c.JobType     = a.JobType
   and c.OperationNo = a.OperationNo
 where 1 = 1
)#task

-- jika svMstTask tidak tepat 1 record, return
if (select count(*) from #task) <> 1 return

select * into #job from(
select a.* from svMstJob a, #task b
 where 1 = 1
   and a.CompanyCode = b.CompanyCode
   and a.ProductType = b.ProductType
   and a.BasicModel  = b.BasicModel
   and a.JobType     = b.JobType
)#job

-- jika svMstJob tidak tepat 1 record, return
if (select count(*) from #job) <> 1 return

-- prepare data svTrnSrvTask yg akan di Insert
declare @JobType varchar(15) set @JobType = (select JobType from #job)

if (left(@JobType,3) = 'FSC' or left(@JobType,3) = 'PDI')
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.OperationHour
		,OperationCost = isnull((select top 1 a.RegularLaborAmount
						   from svMstPdiFscRate a, #srv b, #task c, #job d 
						  where 1 = 1
						    and a.CompanyCode = b.CompanyCode
						    and a.ProductType = b.ProductType
						    and a.BasicModel = b.BasicModel
						    and a.IsCampaign = c.IsCampaign
						    and a.TransmissionType = a.TransmissionType
						    and a.PdiFscSeq = d.PdiFscSeq
						    and a.EffectiveDate <= getdate()
						    and a.IsActive = 1
						 order by a.EffectiveDate desc),0)
		,IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,ClaimHour
		,'L' TypeOfGoods
	    , case when isnull(a.BillType, '') = '' then 'C' else a.BillType end as BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,isnull((
			select cus.LaborDiscPct
			  from svMstBillingType bil
			 inner join gnMstCustomerProfitCenter cus
				on cus.CompanyCode = bil.CompanyCode
			   and cus.CustomerCode = bil.CustomerCode 
			 where 1 = 1
			   and bil.CompanyCode = @CompanyCode
			   and cus.BranchCode = @BranchCode
			   and cus.ProfitCenterCode = '200'
			   and bil.BillType = 'F'
			), b.LaborDiscPct) as LaborDiscPct
	from #task a, #srv b
end
else if @JobType = 'CLAIM'
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.ClaimHour OperationHour
		,a.LaborPrice OperationCost
		,a.IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,a.ClaimHour
		,'L' TypeOfGoods
		,'W' BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,b.LaborDiscPct
	from #task a, #srv b
end
else if @JobType = 'REWORK'
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.OperationHour
		,a.LaborPrice OperationCost
		,a.IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,ClaimHour
		,'L' TypeOfGoods
		,'I' BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,b.LaborDiscPct
	from #task a, #srv b
end
else
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.OperationHour
		,a.LaborPrice OperationCost
		,IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,ClaimHour
		,'L' TypeOfGoods
		, case when isnull(a.BillType, '') = '' then 'C' else a.BillType end as BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,isnull((
			select top 1 tsk.DiscPct
			  from svMstPackage pkg
			 inner join svMstPackageTask tsk
				on tsk.CompanyCode = pkg.CompanyCode
			   and tsk.PackageCode = pkg.PackageCode
			 inner join svMstPackageContract con
				on con.CompanyCode = pkg.CompanyCode
			   and con.PackageCode = pkg.PackageCode
			 where pkg.CompanyCode = b.CompanyCode
			   and pkg.JobType = b.JobType
			   and tsk.OperationNo = a.OperationNo
			   and con.ChassisCode = b.ChassisCode
			   and con.ChassisNo = b.ChassisNo
			), b.LaborDiscPct) LaborDiscPct
		
	from #task a, #srv b
end
-----------------------------------------------
-- insert default svTrnSrvItem
-----------------------------------------------
select * into #part from(
select a.* from svMstTaskPart a, #task b
 where 1 = 1
   and a.CompanyCode = b.CompanyCode
   and a.ProductType = b.ProductType
   and a.BasicModel  = b.BasicModel
   and a.JobType     = b.JobType
   and a.OperationNo = b.OperationNo
)#part

insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
select 
	 @CompanyCode CompanyCode
	,@BranchCode BranchCode
	,@ProductType ProductType
	,@ServiceNo ServiceNo
	,a.PartNo
	,(row_number() over (order by a.PartNo)) PartSeq
	,a.Quantity DemandQty
	,'0' SupplyQty
	,'0' ReturnQty
	,c.CostPrice
	,case rtrim(a.BillType) when 'F' then a.RetailPrice else c.RetailPrice end RetailPrice
	,d.TypeOfGoods
	,case when exists (
			select pkg.CompanyCode, pkg.PackageCode, pkg.JobType
			  from svMstPackage pkg
			 inner join svMstPackagePart prt
				on prt.CompanyCode = pkg.CompanyCode
			   and prt.PackageCode = pkg.PackageCode
			 inner join svMstPackageContract con
				on con.CompanyCode = pkg.CompanyCode
			   and con.PackageCode = pkg.PackageCode
			 inner join #srv srv
				on srv.CompanyCode = con.CompanyCode
			   and srv.ChassisCode = con.ChassisCode
			   and srv.ChassisNo = con.ChassisNo
			 where pkg.CompanyCode = b.CompanyCode
			   and pkg.JobType = b.JobType
			   and prt.PartNo = a.PartNo
		) then 'P' else 
		(case when isnull(a.BillType, '') = '' then 'C' else 
			(case when substring(@ServiceBookNo, 1, 2) >= 'EJ' and f.PartName like '%OIL FILTER%' and (select PdiFscSeq from #job) = 1 then 'C' else 		
			
				(case when substring(@ServiceBookNo, 1, 2) >= 'EJ' and f.PartName like '%ENGINE%' and (select PdiFscSeq from #job) = 3 then 'C' else 		
				a.BillType 
				end)
			
			end)		
		end)
		  end as BillType
	,null SupplySlipNo
	,null SupplySlipDate
	,null SSReturnNo
	,null SSReturnDate
	,b.LastupdateBy CreatedBy
	,b.LastupdateDate CreatedDate
	,b.LastupdateBy
	,b.LastupdateDate
	,isnull((
		select top 1 prt.DiscPct
		  from svMstPackage pkg
		 inner join svMstPackagePart prt
			on prt.CompanyCode = pkg.CompanyCode
		   and prt.PackageCode = pkg.PackageCode
		 inner join svMstPackageContract con
			on con.CompanyCode = pkg.CompanyCode
		   and con.PackageCode = pkg.PackageCode
		 inner join #srv srv
			on srv.CompanyCode = con.CompanyCode
		   and srv.ChassisCode = con.ChassisCode
		   and srv.ChassisNo = con.ChassisNo
		 where pkg.CompanyCode = b.CompanyCode
		   and pkg.JobType = b.JobType
		   and prt.PartNo = a.PartNo
		), 
		(case when rtrim(a.BillType) = 'F' and rtrim(e.ParaValue) = 'SPAREPART' then 0
		      when rtrim(a.BillType) = 'F' then 0
		      when rtrim(e.ParaValue) = 'SPAREPART' then (select top 1 PartDiscPct from #srv) 
			  else (select top 1 MaterialDiscPct from #srv) end)
		) as DiscPct
  from #part a
  left join #task b
    on b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.BasicModel  = a.BasicModel
   and b.JobType     = a.JobType
   and b.OperationNo = a.OperationNo
  left join spMstItemPrice c
    on c.CompanyCode = a.CompanyCode
   and c.BranchCode  = @BranchCode
   and c.PartNo      = a.PartNo
  left join spMstItems d
    on d.CompanyCode = a.CompanyCode
   and d.BranchCode  = @BranchCode
   and d.PartNo      = a.PartNo
  left join gnMstLookupDtl e
    on e.CompanyCode = d.CompanyCode
   and e.CodeID = 'GTGO'
   and e.LookupValue = d.TypeOfGoods
   left join spMstItemInfo f
	on f.CompanyCode = a.CompanyCode
	and f.PartNo = a.PartNo
 where 1 = 1
   and b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.BasicModel  = a.BasicModel
   and b.JobType     = a.JobType
   and b.OperationNo = a.OperationNo
exec uspfn_SvInsertDefaultTaskMovement @CompanyCode, @BranchCode, @ProductType, @ServiceNo, @UserID

drop table #srv
drop table #task
drop table #part
drop table #job
GO
CREATE TABLE [dbo].[SysRoleMenuAccess](
	RoleId varchar(60) NOT NULL,
	MenuId varchar(60) NOT NULL,
	Navigation	bit NOT NULL default(0),
	AllowCreate	bit NOT NULL default(0),
	AllowEdit	bit NOT NULL default(0),
	AllowDelete	bit NOT NULL default(0),
	AllowPrint bit NOT NULL default(0),
 CONSTRAINT [PK_RoleMenuAccess] PRIMARY KEY CLUSTERED 
(
	[RoleId] ASC,
	[MenuId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
) ON [PRIMARY]

GO
if object_id('uspfn_GenerateBPSLampiranNew') is not null
	drop procedure uspfn_GenerateBPSLampiranNew
GO
CREATE procedure [dbo].[uspfn_GenerateBPSLampiranNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--DECLARE	@CompanyCode	VARCHAR(MAX),
--		@BranchCode		VARCHAR(MAX),
--		@JobOrderNo		VARCHAR(MAX),
--		@ProductType	VARCHAR(MAX),
--		@CustomerCode	VARCHAR(MAX),
--		@UserID			VARCHAR(MAX),
--		@PickedBy		VARCHAR(MAX)

--SET	@CompanyCode	= '6156401000'
--SET	@BranchCode		= '6156401001'
--SET	@JobOrderNo		= 'SPK/15/001666'
--SET	@ProductType	= '4W'
--SET	@CustomerCode	= '0032710'
--SET	@UserID			= 'ga'
--SET	@PickedBy		= '0004'
		
--exec uspfn_GenerateBPSLampiranNew '6006400001','6006400101','SPK/14/101625','4W','JKT-1852626','ga','00001'

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement

DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

  declare @PurchaseDisc as decimal
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = dbo.GetBranchMD(@CompanyCode,@BranchCode)
       and ProfitCenterCode = '300')  
         
   if (@PurchaseDisc = 0) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);   

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl

UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================
SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	

--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	DECLARE @CompanyMD AS VARCHAR(15)
	DECLARE @BranchMD AS VARCHAR(15)
	DECLARE @WarehouseMD AS VARCHAR(15)

	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @validString varchar(max)

declare @valid_2 table(
PartNo varchar(15),
QtyValidSR NUMERIC(18,2),
QtyValidOnhand NUMERIC(18,2)
)
    set @validString ='SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM '+ @DbMD +'..SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = '''+ @CompanyMD +'''
		AND a.BranchCode = '''+ @BranchMD+'''
		AND b.PickingSlipNo = '''+@PickingSlipNo+'''
		--AND a.CompanyCode = b.CompanyCode
		--AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo'
	
	--print(@validString)
	insert into @valid_2 exec(@validString)

select * from @valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM @valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM @valid_2 WHERE QtyValidOnhand < 0),0)
	select @Allocation_SRValid
	select @Onhand_SRValid

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		
		CLOSE db_cursor
		DEALLOCATE db_cursor 
		
		DROP TABLE #TempPickingSlipDtl
		DROP TABLE #TempPickingSlipHdr
		
		RAISERROR (@errmsg,16,1);
		
		RETURN
	END
--===============================================================================================================================

--DECLARE @DbMD AS VARCHAR(15)
--SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'UPDATE '+@DbMD+'..SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM ' + @DbMD + '..SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
UPDATE '+ @DbMD +'..SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
FROM ' + @DbMD + '..SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND a.WarehouseCode = ' + ''''+@WarehouseMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo'

EXEC(@query)
	--print(@query)
--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

--===============================================================================================================================
-- INSERT INTO svSDMovement
--===============================================================================================================================
declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

 if(@md = 0)
 begin

	set @Query = '
	insert into ' + @DbMD + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq
	, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice
	, TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD
	, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus
	, ProcessDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)  
	select h.CompanyCode, h.BranchCode, h.LmpNo, h.LmpDate, d.PartNo, ROW_NUMBER() OVER(Order by d.LmpNo)
	,d.WarehouseCode, d.QtyBill, d.QtyBill, d.DiscPct, (d.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)), d.RetailPrice
	,h.TypeOfGoods, ''' + @CompanyMD + ''', ''' + @BranchMD + ''', ''' + @WarehouseMD + ''', d.RetailPriceInclTax, d.RetailPrice, 
	d.CostPrice,''x'', d.ProductType,''300'', ''0'',''0'',''' + convert(varchar, GETDATE()) + ''',''' + @UserID + ''',''' +
	  convert(varchar, GETDATE()) + ''',''' +  @UserID + ''',''' +  convert(varchar, GETDATE()) + '''
	 from spTrnSLmpDtl d inner join spTrnSLmpHdr h on h.LmpNo = d.LmpNo  
	  where 1 = 1   
		and d.CompanyCode = ''' + @CompanyCode + ''' 
		and d.BranchCode  = ''' + @BranchCode  + '''
		and d.ProductType = ''' + @ProductType  + '''
		and d.LmpNo = ''' + @TempLmpNo + '''';
	
	exec(@Query);
end

FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode


--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
end

--rollback tran
GO
if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001833'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '000003'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'


--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

select * from #srvorder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


select top 10 * from spTrnSORDDtl order by createddate desc
--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================

declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


if(@md = 0)
begin

 declare @QueryTemp as varchar(max)  
 declare @PurchaseDisc as decimal  

  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @BranchMD 
       and ProfitCenterCode = '300')  
         
  if (@PurchaseDisc = 0) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            

set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct,  (md.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)) , a.RetailPrice, b.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''', md.RetailPriceInclTax, md.RetailPrice, md.CostPrice
,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from spTrnSORDDtl a 
join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
and a.BranchCode = b.BranchCode 
and a.DocNo = b.DocNo
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ReferenceNo = '''+ @JobOrderNo +''''

exec (@Query)
--print (@QUERY)

end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO

--declare	@CompanyCode varchar(15)
--declare	@BranchCode  varchar(15)
--declare	@ProductType varchar(15)
--declare	@ServiceNo   int
--declare	@BillType    char(1)
--declare	@InvoiceNo   varchar(15)
--declare	@Remarks     varchar(max)
--declare	@UserID      varchar(15)
--
--set	@CompanyCode = '6026401'
--set	@BranchCode  = '602640100'
--set	@ProductType = '4W'
--set	@ServiceNo   = '266'
--set	@BillType    = 'C'
--set	@InvoiceNo   = 'INF/XX/123456'
--set	@Remarks     = 'REMARK 001'
--set	@UserID      = 'ws-s'

if object_id('uspfn_SvTrnInvoiceCreate') is not null
	drop procedure uspfn_SvTrnInvoiceCreate
GO
CREATE procedure [dbo].[uspfn_SvTrnInvoiceCreate]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   int,
	@BillType    char(1),
	@InvoiceNo   varchar(15),
	@Remarks     varchar(max),
	@UserID      varchar(15)
as  

declare @errmsg varchar(max)
--raiserror ('test error',16,1);

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)
DECLARE @DbMD AS VARCHAR(15)
declare @md bit

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


-- get data from service
select * into #srv from(
  select * from svTrnService
   where 1 = 1
     and CompanyCode = @CompanyCode
     and BranchCode  = @BranchCode
     and ProductType = @ProductType
     and ServiceNo   = @ServiceNo
 )#srv

-- get data from task
select * into #tsk from(
  select a.* from svTrnSrvTask a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#tsk

-- get data from item
select * into #mec from(
  select a.* from svTrnSrvMechanic a, #tsk b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.OperationNo = b.OperationNo
     and a.OperationNo <> ''
 )#mec

-- get data from item
select * into #itm from(
  select a.* from svTrnSrvItem a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#itm

-- create temporary table detail
create table #pre_dtl(
	BillType char(1),
	TaskPartType char(1),
	TaskPartNo varchar(20),
	TaskPartQty numeric(10,2),
	SupplySlipNo varchar(20)
)

insert into #pre_dtl
select BillType, 'L', OperationNo, OperationHour, ''
  from #tsk

insert into #pre_dtl
select BillType, TypeOfGoods, PartNo
	 , sum(SupplyQty - ReturnQty)
	 , SupplySlipNo
  from #itm
 where BillType = @BillType
   and (SupplyQty - ReturnQty) > 0
 group by BillType, TypeOfGoods, PartNo, SupplySlipNo

-- insert to table svTrnInvoice
declare @CustomerCode varchar(20)
if @BillType = 'C'
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end
else if @BillType = 'P'
begin
	set @CustomerCode = (select top 1 a.BillTo from svMstPackage a
				 inner join svMstPackageTask b
					on b.CompanyCode = a.CompanyCode
				   and b.PackageCode = a.PackageCode
				 inner join svMstPackageContract c
					on c.CompanyCode = a.CompanyCode
				   and c.PackageCode = a.PackageCode
				 inner join #srv d
					on d.CompanyCode = a.CompanyCode
				   and d.JobType = a.JobType
				   and d.ChassisCode = c.ChassisCode
				   and d.ChassisNo = c.ChassisNo)
end
else if @BillType in ('F', 'W', 'S')
begin
	set @CustomerCode = (select CustomerCode from svMstBillingType
				 where BillType in ('F', 'W', 'S')
				   and CompanyCode = @CompanyCode
				   and BillType = @BillType)
end
else
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end

--set @CustomerCode = isnull((
--				select top 1 a.BillTo from svMstPackage a
--				 inner join svMstPackageTask b
--					on b.CompanyCode = a.CompanyCode
--				   and b.PackageCode = a.PackageCode
--				 inner join svMstPackageContract c
--					on c.CompanyCode = a.CompanyCode
--				   and c.PackageCode = a.PackageCode
--				 inner join #srv d
--					on d.CompanyCode = a.CompanyCode
--				   and d.JobType = a.JobType
--				   and d.ChassisCode = c.ChassisCode
--				   and d.ChassisNo = c.ChassisNo
--				), isnull((
--				select CustomerCode from svMstBillingType
--				 where BillType in ('F')
--				   and CompanyCode = @CompanyCode
--				   and BillType = @BillType
--				), isnull((select CustomerCodeBill from #srv), '')))


if ((select count(*) from #tsk) = 0 and (select count(*) from #itm) = 0)
begin
	drop table #srv
	drop table #tsk
	drop table #mec
	drop table #itm
	drop table #pre_dtl
	return
end

if (@CustomerCode = '')
begin
	set @errmsg = N'Customer Code Bill belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

select * into #cus from (
select a.CompanyCode, a.IsPkp, b.CustomerCode, b.LaborDiscPct, b.PartDiscPct, b.MaterialDiscPct, b.TopCode, b.TaxCode
  from gnMstCustomer a, gnMstCustomerProfitCenter b
 where 1 = 1
   and b.CompanyCode  = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.CompanyCode  = @CompanyCode
   and b.BranchCode   = @BranchCode
   and b.CustomerCode = @CustomerCode
   and b.ProfitCenterCode = '200'
)#cus

if (select count(*) from #cus) <> 1
begin
	set @errmsg = N'Customer ProfitCenter belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

declare @IsPKP bit
    set @IsPKP = isnull((
				 select IsPKP from gnMstCustomer
				  where CompanyCode  = @CompanyCode
				    and CustomerCode = @CustomerCode
				  ), 0)

declare @PPnPct decimal
    set @PPnPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPN'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)

declare @PPhPct decimal
    set @PPhPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPH'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)


-- Insert Into svTrnInvoice
-----------------------------------------------------------------------------------------
insert into svTrnInvoice(
  CompanyCode, BranchCode, ProductType
, InvoiceNo, InvoiceDate, InvoiceStatus
, FPJNo, FPJDate, JobOrderNo, JobOrderDate, JobType
, ServiceRequestDesc, ChassisCode, ChassisNo, EngineCode, EngineNo
, PoliceRegNo, BasicModel, CustomerCode, CustomerCodeBill, Odometer
, IsPKP, TOPCode, TOPDays, DueDate, SignedDate
, LaborDiscPct, PartsDiscPct, MaterialDiscPct, PphPct, PpnPct, Remarks
, PrintSeq, PostingFlag, IsLocked, CreatedBy, CreatedDate
) 
select
  @CompanyCode CompanyCode
, @BranchCode BranchCode
, @ProductType ProductType
, @InvoiceNo InvoiceNo
, getdate() InvoiceDate
, case @IsPKP
	when '0' then '1'
	else (case @BillType when 'F' then '0' when 'W' then '0' else '1' end)
  end as InvoiceStatus
, '' FPJNo
, null FPJDate
, (select JobOrderNo from #srv) JobOrderNo
, (select JobOrderDate from #srv) JobOrderDate
, (select JobType from #srv) JobType
, (select ServiceRequestDesc from #srv) ServiceRequestDesc
, (select ChassisCode from #srv) ChassisCode
, (select ChassisNo from #srv) ChassisNo
, (select EngineCode from #srv) EngineCode
, (select EngineNo from #srv) EngineNo
, (select PoliceRegNo from #srv) PoliceRegNo
, (select BasicModel from #srv) BasicModel
, (select CustomerCode from #srv) CustomerCode
, @CustomerCode as CustomerCodeBill
, (select Odometer from #srv) Odometer
, (select IsPKP from #cus) as IsPKP
, (select TopCode from #cus) as TOPCode
, isnull((
	select b.ParaValue
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue = a.TopCode
	), null) as TOPDays
, isnull((
	select dateadd(day, convert(int,b.ParaValue), convert(varchar, getdate(), 112))
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue  = a.TopCode
	), null) as DueDate
, convert(varchar, getdate(), 112) SignedDate
, case @BillType
	when 'F' then (select LaborDiscPct from #cus) 
    when 'W' then (select LaborDiscPct from #cus) 
    else (select LaborDiscPct from #srv) 
  end as LaborDiscPct
, case @BillType
	when 'F' then (select PartDiscPct from #cus) 
    when 'W' then (select PartDiscPct from #cus) 
    else (select PartDiscPct from #srv) 
  end as PartsDiscPct
, case @BillType
	when 'F' then (select MaterialDiscPct from #cus) 
    when 'W' then (select MaterialDiscPct from #cus) 
    else (select MaterialDiscPct from #srv) 
  end as MaterialDiscPct
, @PPnPct as PPhPct
, @PPnPct as PPnPct
, @Remarks as Remarks
, '0' PrintSeq
, '0' PostingFlag
, '0' IsLocked
, @UserID CreatedBy
, getdate() CreatedDate

-- Insert Into svTrnInvTask
-----------------------------------------------------------------------------------------
insert into svTrnInvTask (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, OperationHour, ClaimHour, OperationCost, SubConPrice
, IsSubCon, SharingTask, DiscPct
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, isnull(OperationHour, 0) OperationHour, isnull(ClaimHour, 0) ClaimHour
, isnull(OperationCost, 0) OperationCost, isnull(SubConPrice, 0) SubConPrice
, isnull(IsSubCon, 0) IsSubCon, isnull(SharingTask, 0) SharingTask
, isnull(DiscPct, 0)
from #tsk

-- Insert Into svTrnInvMechanic
-----------------------------------------------------------------------------------------
insert into svTrnInvMechanic (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
from #mec

-- Insert Into svTrnInvItem
-----------------------------------------------------------------------------------------
Declare @Query varchar(max)

set @Query = 'select * into #itm1 from (
select CompanyCode, BranchCode, ProductType, '''+ @InvoiceNo +''' as InvoiceNo, PartNo
	 , isnull((
		select MovingCode from '+ @DbMD +'..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '') as MovingCode
	 , isnull((
		select ABCClass from '+ @DbMD +' ..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '') as ABCClass
	 , sum(SupplyQty - ReturnQty) as SupplyQty
	 , isnull((
		select 
		  case (sum(b.SupplyQty - b.ReturnQty))
			 when 0 then 0
			 else sum(a.CostPrice * (b.SupplyQty - b.ReturnQty)) / sum(b.SupplyQty - b.ReturnQty)
		  end 
	from SpTrnSLmpDtl a
	left join SvTrnSrvItem b on 1 = 1
	 and b.CompanyCode  = a.CompanyCode
	 and b.BranchCode   = a.BranchCode
	 and b.ProductType  = a.ProductType
	 and b.SupplySlipNo = a.DocNo
	 and b.PartNo = #itm.PartNo
	where 1 = 1
	 and a.CompanyCode = '''+ @CompanyCode +'''
	 and a.BranchCode  = '''+ @BranchCode +'''
	 and a.ProductType = '''+ @ProductType +'''
	 and a.PartNo = #itm.PartNo
	 and a.DocNo in (
			select SupplySlipNo
			 from SvTrnSrvItem
			where 1 = 1
			  and CompanyCode = '''+ @CompanyCode +'''
			  and BranchCode  = '''+ @BranchCode +'''
			  and ProductType = '''+ @ProductType +'''
			  and ServiceNo = '''+ Convert(varchar,@ServiceNo) +'''
			  and PartNo = #itm.PartNo
			)
	), 0) as CostPrice
, RetailPrice
, TypeOfGoods
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, RetailPrice, TypeOfGoods
)#

insert into svTrnInvItem (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo
, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice
, TypeOfGoods, DiscPct
)
select a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo
	 , MovingCode = (select top 1 MovingCode from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , ABCClass = (select top 1 ABCClass from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , sum(SupplyQty) as SupplyQty, 0 as ReturnQty
	 , CostPrice = (select top 1 CostPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by CostPrice desc)
	 , RetailPrice = (select top 1 RetailPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by RetailPrice desc)
	 , TypeOfGoods = (select top 1 TypeOfGoods from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , DiscPct = (select top 1 DiscPct from #itm where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
  from #itm1 a
 where a.SupplyQty > 0
 group by a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo'

 exec(@Query)

-- Insert Into svTrnInvItemDtl
-----------------------------------------------------------------------------------------
insert into svTrnInvItemDtl (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, SupplySlipNo
, SupplyQty, CostPrice, CreatedBy, CreatedDate
)
select y.* from (
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, PartNo, SupplySlipNo
, sum(SupplyQty - ReturnQty) as SupplyQty, CostPrice
, @UserID as CreatedBy, getdate() as CreatedDate
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, SupplySlipNo, CostPrice
) y
where y.SupplyQty > 0

-- Re Calculate Invoice

-----------------------------------------------------------------------------------------
exec uspfn_SvTrnInvoiceReCalculate @CompanyCode=@CompanyCode, @BranchCode=@BranchCode, @ProductType=@ProductType, @InvoiceNo=@InvoiceNo, @UserId=@UserId
-- Insert svsdmovement
-----------------------------------------------------------------------------------------

 if(@md = 0)
 begin

 set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, '''+ convert(varchar,@InvoiceNo) +''','''+ convert(varchar,GETDATE()) +''', a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ServiceNo order by a.ServiceNo)) ,
''00'', a.DemandQty, a.DemandQty, a.DiscPct, a.CostPrice, a.RetailPrice, a.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
,''x'','''+ @producttype +''',''300'',''8'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from svTrnSrvItem a 
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ServiceNo = '''+ convert(varchar,@ServiceNo) +''''

exec (@Query)

end

drop table #srv
drop table #tsk
drop table #mec
drop table #itm
drop table #cus

drop table #pre_dtl

GO

if object_id('uspfn_SvTrnServiceSaveItem') is not null
	drop procedure uspfn_SvTrnServiceSaveItem
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        

 
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6156401000'  
--set @BranchCode = '6156401001'  
--set @ProductType = '4W'  
--set @ServiceNo = 49190  
--set @BillType = 'C'  
--set @PartNo = '01107-06127-000'  
--set @DemandQty = 5  
--set @PartSeq = -1  
--set @UserID = 'Trainingzzz'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
declare @IsSPK as char(1)
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  

  set @IsSPK = isnull((select a.ServiceType from #srv a where a.ServiceType = '2'),0)
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @BranchMD
       and ProfitCenterCode = '300')  
         
  if (@PurchaseDisc = 0) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select RetailPrice from @tblTemp)
  --select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin
 
 declare @tblTempPart as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  

  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
     from ' + @DbName + '..spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTempPart    
  exec (@QueryTemp)  
   
  --select * into #part from (  
  --select   
  --  a.CostPrice   
  -- ,a.RetailPrice  
  --  from spMstItemPrice a  
  -- where 1 = 1  
  --   and a.CompanyCode = @CompanyCode  
  --   and a.BranchCode  = @BranchCode  
  --   and a.PartNo      = @PartNo  
  --)#part  
    
  set @CostPrice = (select CostPrice from @tblTempPart)  
  set @RetailPrice = (select RetailPrice from @tblTempPart)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   set @Querytemp ='
   update svTrnSrvItem set  
     DemandQty      = '+ convert(varchar,@DemandQty) +'
    ,CostPrice      = '+ convert(varchar,@CostPrice) +' 
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = '''+ @PartNo +''' 
            and b.BillType = ''F'' 
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from '+ @DbName +'..spMstItemPrice  
           where 1 = 1  
             and CompanyCode = '''+ @CompanyMD +'''
             and BranchCode = '''+ @BranchMD +'''
             and PartNo = '''+ @PartNo  +'''
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = '''+ @BillType +'''
    ,DiscPct        = '+ convert(varchar,@DiscPct) +'  
    where 1 = 1  
      and CompanyCode  = '''+ @CompanyCode +''' 
      and BranchCode   = '''+ @BranchCode +''' 
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = '''+ @PartNo +''' 
      and PartSeq      = '+ convert(varchar,@PartSeq) +'' 
	  
	  exec(@QueryTemp) 
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    if (@DealerCode = 'SD' and @IsSPK = '2')  
	 begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  set @QueryTemp='insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    '''+ @CompanyCode +''' CompanyCode  
   ,''' + @BranchCode +''' BranchCode  
   ,'''+ @ProductType +''' ProductType  
   ,'+ convert(varchar,@ServiceNo) +' ServiceNo  
   ,a.PartNo  
   ,'''+ convert(varchar,@PartSeqNew)  +'''
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,'+ convert(varchar,@DemandQty )+' DemandQty  
   ,''0'' SupplyQty  
   ,''0'' ReturnQty  
   ,'+ convert(varchar,isnull(@CostPrice,0))  +'
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,'''+ @BillType +''' BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,'+ convert(varchar,isnull(@DiscPct,0))  +'
   ,(select MechanicID from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo) +')  
    from '+ @DbName +'..spMstItemPrice a, '+ @DbName +'..spMstItems b, #srv c, gnmstcompanymapping d 
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
	 and d.CompanyMd = a.CompanyCode
	 and d.BranchMD = a.BranchCode
        and d.CompanyCode = c.CompanyCode  
     and d.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = '''+ @CompanyMD +'''
     and a.BranchCode  = '''+ @BranchMD +'''
     and a.PartNo      = '''+ @PartNo +''''    
	  exec(@QueryTemp)


  --select   @CostPrice   
  --xxx
  
  if (@DealerCode = 'SD' and @IsSPK = '2')  
  begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
   
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
     	,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 if (@DealerCode = 'SD' and @IsSPK = '2')  
 begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  

--rollback tran
GO
if object_id('uspfn_syscreatepermission') is not null
	drop procedure uspfn_syscreatepermission
GO
CREATE procedure uspfn_syscreatepermission 
@roleid varchar(50)
AS
BEGIN
	insert into SysRoleMenuAccess(roleid,menuid)
	select  @roleid,menuid from VW_TREEMENUS a
	WHERE NOT EXISTS 
    (SELECT 0
     FROM SysRoleMenuAccess WITH (UPDLOCK, HOLDLOCK)
     WHERE RoleId=@roleid and MenuId=a.MenuId) 
END
GO
if object_id('usprpt_PmRpInqFollowUpWeb') is not null
	drop procedure usprpt_PmRpInqFollowUpWeb
GO
CREATE procedure [dbo].[usprpt_PmRpInqFollowUpWeb] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@PeriodBegin		DATETIME,
	@PeriodEnd			DATETIME,
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@Salesman			VARCHAR(15)
)
AS 
BEGIN
SET NOCOUNT ON;
----

IF(@SalesHead ='' AND @Salesman ='')
BEGIN
	SELECT * INTO #empl1 FROM (
		--SH =ALL AND S=ALL
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.TeamLeader IN (SELECT b.EmployeeID FROM HrEmployee b WHERE b.TeamLeader IN
		(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader=@BranchManager))
	)#empl1

	SELECT * INTO #t1 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl1 g)
			--AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			--AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
			--AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t1

	DROP TABLE #empl1
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t1 ORDER BY InquiryNumber
	DROP TABLE #t1

END
ELSE IF(@Salesman = '')
BEGIN
	SELECT * INTO #empl2 FROM (
		--S=ALL
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.TeamLeader IN (SELECT b.EmployeeID FROM HrEmployee b WHERE b.TeamLeader=@SalesHead)
	)#empl2

	SELECT * INTO #t2 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl2 g)
			--AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			--AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
			--AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t2

	DROP TABLE #empl2
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t2 ORDER BY InquiryNumber
	DROP TABLE #t2
END
ELSE
BEGIN
	SELECT * INTO #empl3 FROM (
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.EmployeeID=@Salesman
	)#empl3

	SELECT * INTO #t3 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl3 g)
			--AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			--AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
			--AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t3

	DROP TABLE #empl3
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t3 ORDER BY InquiryNumber
	DROP TABLE #t3
END
----
END

GO


create view VW_ROLEMENUPERMISSION
AS
select b.MenuCaption, b.MenuHeader, b.MenuLevel, b.MenuIndex,   a.*
from SysRoleMenuAccess a
inner join vw_treemenus b on (a.menuid = b.menuid)
GO

-- POSTING TRANSACTION MULTI COMPANY - MAIN PROCESS
-- ---------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ---------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST , UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanyMainProcess] '6006400001','2014/11/14','HTO'
-- update sysParaMeter set ParamValue='2014/11/01' where ParamId='POSTING_STATUS'
-- -------------------------------------------------------------------------------

ALTER procedure [dbo].[usprpt_PostingMultiCompanyMainProcess]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@UserId			varchar(20)
AS	

BEGIN TRANSACTION
BEGIN TRY

BEGIN
 -- Check Posting Multi Company Date in table sysParameter
	declare @PostDate	varchar(10)
	declare @PostStatus	integer
	set @PostDate   = (select ParamValue from sysParaMeter where ParamId='POSTING_STATUS')
	set @PostStatus = (case when @PostDate is null                             then 0
	                        when @PostDate < convert(varchar,@PostingDate,111) then 1
					        else                                                    2
					   end)
	if @PostStatus = 0
		insert sysParaMeter values('POSTING_STATUS',convert(varchar,@PostingDate,111),'Posting Multi Company')
	else
		if @PostStatus = 1
			update sysParaMeter set ParamValue=convert(varchar,@PostingDate,111) where ParamId='POSTING_STATUS'
		else
			begin
				select '0' [STATUS], 'Daily Posting tertanggal ' + convert(varchar,@PostingDate,106) + ' sudah pernah dilakukan sebelumnya....' [INFO]
				return
			end

	declare @Status	varchar(1)

	execute [usprpt_PostingMultiCompanySales] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales fail...' [INFO]
			return
		end

	execute [usprpt_PostingMultiCompanySalesReturn] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales Return fail...' [INFO]
			return
		end


	execute [usprpt_PostingMultiCompanySparepartService] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting SparePart & Service fail...' [INFO]
			return
		end
END		

END TRY

BEGIN CATCH
    --select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		  -- ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		begin
			select '0' [STATUS], 'Posting gagal !!!' [INFO]
			rollback transaction
			return
		end
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting berhasil !!!' [INFO]
		--rollback transaction
		commit transaction
	end

GO

-- POSTING TRANSACTION MULTI COMPANY - SALES
-- -----------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- -----------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -----------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySales] '6006400001','2014/11/08','0'
-- -----------------------------------------------------------------------

ALTER procedure [dbo].[usprpt_PostingMultiCompanySales]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN

	  --declare @CompanyCode				varchar(15) = '6006400001'
	  --declare @PostingDate				datetime	= '2015/03/08'
	  --declare @Status						varchar(1)

  -- Check Tax/Seri Pajak online
		declare @TaxCompany				varchar(15)
		declare @TaxBranch				varchar(15)
		declare @TaxDB					varchar(50)
		declare @TaxTransCode			varchar(3)
		declare @swTaxBranch			varchar(15) = ''
		declare @swTaxDoc				varchar(15) = ''
		declare @TaxSeq					bigint
		declare @TaxSeqNo				int
		declare @SeriPajakNo			varchar(50) = ''
		declare @sqlString				nvarchar(max)

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			begin
				set @Status = '1'
				return
			end
		
		set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
									   +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
									   +@TaxCompany+ ''' and BranchCode=''' 
									   +@TaxBranch+ ''' and Year=''' 
									   +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
									   +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
			execute sp_executesql @sqlString, 
								N'@TaxSeq 		bigint  	output,
								  @TaxSeqNo 	int 		output', 
								  @TaxSeq 		output,
								  @TaxSeqNo 	output
		if isnull(@TaxSeq,0)=0 and isnull(@TaxSeqNo,0)=0
			begin
				set @Status = '1'
				return
			end
		set @TaxSeq   = isnull(@TaxSeq,0)
		set @TaxSeqNo = isnull(@TaxSeqNo,0)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode			varchar(15) --= '6006400001'
		declare @curBranchCode			varchar(15) --= '6006400131'
		declare @curDocNo				varchar(15)	--= 'IU131/14/100010'
		declare @curDocDate				datetime    --= '2015/03/08'
		declare @curSeq					int			
		declare @curSalesModelCode		varchar(20)	
		declare @curSalesModelYear		numeric(4,0)	
		declare @curChassisCode			varchar(15)	
		declare @curChassisNo			numeric(10,0) 
		declare @curEngineCode			varchar(15)	
		declare @curEngineNo			numeric(10,0) 
		declare @curColourCode			varchar(15)	
		declare @curWarehouseCode		varchar(15)	
		declare @curCustomerCode		varchar(15)	
		declare @curQtyFlag				char(1)		
		declare @curCompanyMD			varchar(15)
		declare @curBranchMD			varchar(15)	
		declare @curWarehouseMD			varchar(15)	
		declare @curStatus				char(1)		
		declare @curProcessStatus		char(1)		
		declare @curProcessDate			datetime		
		declare @curCreatedBy			varchar(15)	
		declare @curCreatedDate			datetime		
		declare @curLastUpdateBy		varchar(15)	
		declare @curLastUpdateDate		datetime

		declare @DBName					varchar(50)
		declare @DBNameMD				varchar(50)
		declare @CentralBranch			varchar(15)
		declare @PONo					varchar(15)
		declare @SONo					varchar(15)
		declare @DONo					varchar(15)
		declare @BPKNo					varchar(15)
		declare @INVNo					varchar(15)
		declare @BPUNo					varchar(15)
		declare @HPPNo					varchar(15)
		declare @RTPNo					varchar(15)
		declare @RTNNo					varchar(15) = ''
		declare @VTONo					varchar(15) = ''
		declare @VTINo					varchar(15) = ''
		declare @DueDate				datetime
		declare @SeqNo					integer

		declare @VehServiceBookNo		varchar(15)
		declare @VehKeyNo				varchar(15)
		declare @VehWH					varchar(15) = 'HLD'
		declare @VehCOGS				numeric(18,0)
		declare @VehCOGSOthers			numeric(18,0)
		declare @VehCOGSKaroseri		numeric(18,0)
		declare @VehPpnBmBuyPaid		numeric(18,0)
		declare @VehPpnBmBuy			numeric(18,0)
		declare @VehSalesNetAmt			numeric(18,0)
		declare @VehPpnBmSellPaid		numeric(18,0)
		declare @VehPpnBmSell			numeric(18,0)
		declare @VehWHMD				varchar(15)
		declare @VehFakturPolisiNo		varchar(15)
		declare @VehFakturPolisiDate	datetime
		declare @VehSONo				varchar(15)
		declare @VehDONo				varchar(15)
		declare @VehBPKNo				varchar(15)
		declare @VehINVNo				varchar(15)
		declare @VehREQNo				varchar(15)
		declare @VehRTNNo				varchar(15)
		declare @VehVTONo				varchar(15)
		declare @VehVTINo				varchar(15)
		declare @VehBPKDate				datetime
		declare @VehSuzukiDONo			varchar(15)
		declare @VehSuzukiDODate		datetime
		declare @VehSuzukiSJNo			varchar(15)
		declare @VehSuzukiSJDate		datetime

		declare @swCompanyCode			varchar(15)  = ' '
		declare @swBranchCode			varchar(15)  = ' '
		declare @swDocNo 				varchar(15)  = ' '
		declare @CurrentDate			varchar(100) = convert(varchar,getdate(),121)

		declare @RetailPriceIncludePPN	numeric(18,0) = 0
		declare @DiscPriceIncludePPN	numeric(18,0) = 0
		declare @NetSalesIncludePPN		numeric(18,0) = 0
		declare @RetailPriceExcludePPN	numeric(18,0) = 0
		declare @DiscPriceExcludePPN	numeric(18,0) = 0
		declare @NetSalesExcludePPN		numeric(18,0) = 0
		declare @PPNBeforeDisc			numeric(18,0) = 0
		declare @PPNAfterDisc			numeric(18,0) = 0
		declare @PPnBMPaid				numeric(18,0) = 0
		declare @EndUserName			varchar(100)
		declare @EndUserAddress1		varchar(100)
		declare @EndUserAddress2		varchar(100)
		declare @EndUserAddress3		varchar(100)
		declare @CityCode				varchar(15)
		declare @CustomerClass			varchar(15)
		declare @TopCode				varchar(15) 
		declare @GroupPriceCode			varchar(15)
		declare @SalesCode				varchar(15) 
		declare @SalesType				char(1)	
		declare @TopDays				integer
		declare @WHSD					varchar(15)

        declare curomSDMovement cursor for
			select sd.* 
			  from omSDMovement sd, gnMstDocument doc
             where sd.CompanyCode      =doc.CompanyCode
			   and sd.BranchCode       =doc.BranchCode
			   and doc.DocumentType    ='IVU' 
			   and doc.ProfitCenterCode='100'
			   and left(sd.DocNo,len(doc.DocumentPrefix))=doc.DocumentPrefix
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by sd.CompanyCode, sd.BranchCode, sd.DocNo, 
					  sd.SalesModelCode, sd.SalesModelYear, sd.ColourCode
		open curomSDMovement

		fetch next from curomSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
				   @curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
				   @curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
				   @curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
				   @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin

			 -- MD: Collect vehicle information from omMstVehicle (Main Dealer)
				set @sqlString = N'select @VehServiceBookNo=ServiceBookNo, @VehKeyNo=KeyNo, @VehCOGS=COGSUnit, 
								 @VehCOGSOthers=COGSOthers, @VehCOGSKaroseri=COGSKaroseri, @VehPpnBmBuyPaid=PpnBmBuyPaid, 
								 @VehPpnBmBuy=PpnBmBuy, @VehSalesNetAmt=SalesNetAmt, @VehPpnBmSellPaid=PpnBmSellPaid, 
								 @VehPpnBmSell=PpnBmSell, @VehWHMD=WarehouseCode, @VehFakturPolisiNo=FakturPolisiNo, 
								 @VehFakturPolisiDate=FakturPolisiDate, @VehSONo=SONo, @VehDONo=DONo, @VehBPKNo=BPKNo, 
								 @VehINVNo=InvoiceNo, @VehREQNo=ReqOutNo, @VehRTNNo=SOReturnNo, @VehVTONo=TransferOutNo, 
								 @VehVTINo=TransferInNo, @VehBPKDate=BPKDate, @VehSuzukiDONo=SuzukiDONo, 
								 @VehSuzukiDODate=SuzukiDODate, @VehSuzukiSJNo=SuzukiSJNo, 
								 @VehSuzukiSJDate=SuzukiSJDate from ' +@DBNameMD+ '..omMstVehicle where CompanyCode=''' 
								 +@curCompanyMD+ ''' and ChassisCode=''' +@curChassisCode+ 
								 ''' and ChassisNo=''' +convert(varchar,@curChassisNo)+ ''''
					execute sp_executesql @sqlString, 
							N'@VehServiceBookNo		varchar(15)		output,
							  @VehKeyNo				varchar(15)		output,
							  @VehCOGS				numeric(18,0)	output,
							  @VehCOGSOthers		numeric(18,0)	output,
							  @VehCOGSKaroseri		numeric(18,0)	output,
							  @VehPpnBmBuyPaid		numeric(18,0)	output,
							  @VehPpnBmBuy			numeric(18,0)	output,
							  @VehSalesNetAmt		numeric(18,0)	output,
							  @VehPpnBmSellPaid		numeric(18,0)	output, 
							  @VehPpnBmSell			numeric(18,0)	output,
							  @VehWHMD				varchar(15)		output,
							  @VehFakturPolisiNo	varchar(15)		output,
							  @VehFakturPolisiDate	datetime		output,
							  @VehSONo				varchar(15)		output,
							  @VehDONo				varchar(15)		output,
							  @VehBPKNo				varchar(15)		output,
							  @VehINVNo				varchar(15)		output,
							  @VehREQNo				varchar(15)		output,
							  @VehRTNNo				varchar(15)		output,
							  @VehVTONo				varchar(15)		output,
							  @VehVTINo				varchar(15)		output,
							  @VehBPKDate			datetime		output,
							  @VehSuzukiDONo		varchar(15)		output,
							  @VehSuzukiDODate		datetime		output,
							  @VehSuzukiSJNo		varchar(15)		output,
							  @VehSuzukiSJDate		datetime		output',
							  @VehServiceBookNo		output,  @VehKeyNo			output,
							  @VehCOGS				output,	 @VehCOGSOthers		output,
							  @VehCOGSKaroseri		output,	 @VehPpnBmBuyPaid	output,
							  @VehPpnBmBuy			output,  @VehSalesNetAmt	output,
							  @VehPpnBmSellPaid		output,  @VehPpnBmSell		output,
							  @VehWHMD				output,  @VehFakturPolisiNo	output,  
							  @VehFakturPolisiDate	output,  @VehSONo			output,  
							  @VehDONo				output,  @VehBPKNo			output,  
							  @VehINVNo				output,  @VehREQNo			output,
							  @VehRTNNo				output,  @VehVTONo			output,  
							  @VehVTINo				output,  @VehBPKDate		output,  
							  @VehSuzukiDONo		output,  @VehSuzukiDODate	output,  
							  @VehSuzukiSJNo		output,  @VehSuzukiSJDate	output

				set @VehServiceBookNo	 = isnull(@VehServiceBookNo,'')
				set @VehKeyNo			 = isnull(@VehKeyNo,'')
				set @VehCOGS			 = isnull(@VehCOGS,0)
				set @VehCOGSOthers		 = isnull(@VehCOGSOthers,0) 
				set @VehCOGSKaroseri	 = isnull(@VehCOGSKaroseri,0)
				set @VehPpnBmBuyPaid	 = isnull(@VehPpnBmBuyPaid,0)
				set @VehPpnBmBuy		 = isnull(@VehPpnBmBuy,0) 
				set @VehSalesNetAmt		 = isnull(@VehSalesNetAmt,0) 
				set @VehPpnBmSellPaid    = isnull(@VehPpnBmSellPaid,0)
				set @VehPpnBmSell		 = isnull(@VehPpnBmSell,0)
				set @VehWHMD			 = isnull(@VehWHMD,'')
				set @VehFakturPolisiNo	 = isnull(@VehFakturPolisiNo,'')
				set @VehFakturPolisiDate = isnull(@VehFakturPolisiDate,'1900/01/01')
				set @VehSONo			 = isnull(@VehSONo,'')
				set @VehDONo			 = isnull(@VehDONo,'') 
				set @VehBPKNo			 = isnull(@VehBPKNo,'')
				set @VehINVNo			 = isnull(@VehINVNo,'') 
				set @VehREQNo			 = isnull(@VehREQNo,'') 
				set @VehRTNNo			 = isnull(@VehRTNNo,'')
				set @VehVTONo			 = isnull(@VehVTONo,'') 
				set @VehVTINo			 = isnull(@VehVTINo,'') 
				set @VehBPKDate			 = isnull(@VehBPKDate,'1900/01/01')
				set @VehSuzukiDONo		 = isnull(@VehSuzukiDONo,'') 
				set @VehSuzukiDODate	 = isnull(@VehSuzukiDODate,'1900/01/01')
				set @VehSuzukiSJNo		 = isnull(@VehSuzukiSJNo,'')
				set @VehSuzukiSJDate	 = isnull(@VehSuzukiSJDate,'1900/01/01')

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0
		
					 -- MD Database & SD Database from gnMstCompanyMapping
						select @DBNameMD=DBMD, @DBName=DBName from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode

					 -- Centralize unit purchasing for SBT, SMG, SIT, SST dealer
						set @sqlString = N'select @CentralBranch=BranchCode from ' +@DBName+ '..gnMstOrganizationDtl ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and isBranch=''0'''
							execute sp_executesql @sqlString, 
									N'@CentralBranch varchar(15) output', @CentralBranch output

					 -- MD: Customer information in gnMstCustomer & gnMstCustomerProfitCenter
						set @sqlString = N'select @EndUserName=CustomerName, @EndUserAddress1=Address1, @EndUserAddress2=Address2, 
										 @EndUserAddress3=Address3, @CityCode=CityCode from ' 
										 +@DBNameMD+ '..gnMstCustomer where CompanyCode='''
										 +@curCompanyMD+ ''' and CustomerCode=''' +@CentralBranch+ ''''
							execute sp_executesql @sqlString, 
									N'@EndUserName		varchar(100) output,  @EndUserAddress1	varchar(100) output,
									  @EndUserAddress2	varchar(100) output,  @EndUserAddress3	varchar(100) output,
									  @CityCode			varchar(10)  output', 
									  @EndUserName		output, @EndUserAddress1	output, @EndUserAddress2 output, 
									  @EndUserAddress3	output, @CityCode           output

						set @sqlString = N'select @CustomerClass=CustomerClass, @TaxTransCode=TaxTransCode, @TopCode=TopCode, 
										 @GroupPriceCode=GroupPriceCode, @SalesCode=SalesCode, @SalesType=SalesType from ' 
										 +@DBNameMD+ '..gnMstCustomerProfitCenter where CompanyCode='''
										 +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode='''
										 +@CentralBranch+ ''' and ProfitCenterCode=''100'''
							execute sp_executesql @sqlString, 
									N'@CustomerClass	varchar(15) output,  @TaxTransCode		varchar(3)  output,
									  @TopCode			varchar(15) output,  @GroupPriceCode	varchar(15) output,
									  @SalesCode		varchar(15) output,  @SalesType		char(1)		output', 
									  @CustomerClass  output, @TaxTransCode output, @TopCode   output, 
									  @GroupPriceCode output, @SalesCode    output, @SalesType output

					 -- MD: Calculate Top of Days 
						set @sqlString = N'select @TopDays=ParaValue from ' +@DBNameMD+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' +@TopCode+ ''''
							execute sp_executesql @sqlString, N'@TopDays integer output', @TopDays output

						set @EndUserName     = isnull(@EndUserName,'')
						set @EndUserAddress1 = isnull(@EndUserAddress1,'')
						set @EndUserAddress2 = isnull(@EndUserAddress2,'')
						set @EndUserAddress3 = isnull(@EndUserAddress3,'')
						set @CityCode        = isnull(@CityCode,'')
						set @CustomerClass   = isnull(@CustomerClass,'')
						set @TaxTransCode    = isnull(@TaxTransCode,'')
						set @TopCode         = isnull(@TopCode,'')
						set @GroupPriceCode  = isnull(@GroupPriceCode,'')
						set @SalesCode       = isnull(@SalesCode,'')
						set @SalesType	  	 = isnull(@SalesType,'')
						set @SalesType		 = isnull(@TopDays,0)
						set @DueDate		 = dateadd(day,isnull(@TopDays,0),@curDocDate)

					 -- MD: Generate Sales Order No for MD
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'SOR', @SONo output

					 -- SD: Insert data to table omTrPurchasePO
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'PUR', @PONo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchasePO 
												(CompanyCode, BranchCode, PONo, PODate, RefferenceNo, RefferenceDate, SupplierCode, 
												 BillTo, ShipTo, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''' 
												   +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@curDocNo+ 
												   ''',''2'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesSO
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesSO 
												(CompanyCode, BranchCode, SONo, SODate, SalesType, RefferenceNo, RefferenceDate, CustomerCode, 
												 TOPCode, TOPDays, BillTo, ShipTo, ProspectNo, SKPKNo, Salesman, WareHouseCode, isLeasing, 
												 LeasingCo, GroupPriceCode, Insurance, PaymentType, PrePaymentAmt, PrePaymentDate, 
												 CommissionBy, CommissionAmt, PONo, ContractNo, RequestDate, Remark, Status, ApproveBy,
												 ApproveDate, RejectBy, RejectDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate, SalesCode, Installment, FinalPaymentDate, SalesCoordinator,
												 SalesHead, BranchManager)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''' +@SalesType+ ''',''' +@PONo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','''
												   +@CentralBranch+ ''',''' +@TopCode+ ''',''' +convert(varchar,@TopDays)+ ''',''' +@CentralBranch+ ''',''' 
												   +@curBranchCode+ ''',NULL,NULL,''POSTING'',''' +@VehWHMD+ ''',0,NULL,''' +@GroupPriceCode+
												   ''',NULL,NULL,0,NULL,NULL,0,''' +@PONo+ 
												   ''',NULL,NULL,NULL,2,''POSTING'',''' +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''POSTING'','''
												   +convert(varchar,@curDocDate,121)+ ''',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',0,NULL,NULL,''' +@SalesCode+ ''',0,NULL,''POSTING'',''POSTING'',''POSTING'')'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesDO
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'DOS', @DONo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesDO 
												(CompanyCode, BranchCode, DONo, DODate, SONo, CustomerCode, ShipTo,
												 WareHouseCode, Expedition, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@DONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ ''',''' 
												   +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@VehWHMD+ ''',NULL,'''
												   +@curDocNo+ ''',''2'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesBPK
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'BPK', @BPKNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesBPK 
												(CompanyCode, BranchCode, BPKNo, BPKDate, DONo, SONo, CustomerCode, 
												 ShipTo, WareHouseCode, Expedition, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@DONo+ ''',''' +@SONo+ 
												   ''',''' +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@VehWHMD+ ''',NULL,'''
												   +@curDocNo+ ''',''2'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesInvoice

						--Tax / Seri Pajak Numbering
						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>left(@swTaxDoc,3)
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlString, @params= N'@TaxSeq bigint output', @TaxSeq = @TaxSeq output

								set @sqlString = N'select top 1 @TaxSeqNo=SeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ '''and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlString, @params= N'@TaxSeqNo int output', @TaxSeqNo = @TaxSeqNo output

								set @sqlString = N'select top 1 @TaxTransCode=TaxTransCode from ' 
												+@TaxDb+ '..gnMstCoProfile where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch+ ''''
									execute sp_executesql @query=@sqlString, @params= N'@TaxTransCode varchar(3) output', @TaxTransCode = @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlString = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlString 

								--set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
								--					+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
								--					+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								if len(convert(varchar,@TaxSeq))>8
									set @SeriPajakNo =  @TaxTransCode + '0.' + replicate('0', 3-(len(convert(varchar,@TaxSeq))-8)) +
														left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) +
														'-' +right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								else
									set @SeriPajakNo =  @TaxTransCode + '0.000-'+right(convert(varchar,year(@PostingDate)),2)+ '.'
														+replicate('0',8-len(convert(varchar,@TaxSeq)))+convert(varchar,@TaxSeq)
							end

						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'IVU', @INVNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesInvoice 
												(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, SONo, CustomerCode, 
												 BillTo, FakturPajakNo, FakturPajakDate, DueDate, isStandard, Remark, 
												 Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
												   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ 
												   ''',''' +@CentralBranch+ ''','''  +@CentralBranch+ ''',''' 
												   +@SeriPajakNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,@DueDate)+ ''',1,''' +@curDocNo+ 
												   ''',''5'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesReturn, Transfer In, Transfer Out
					    --@RTNNo, @VTINo, @VTONo
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @RTNNo output
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @VTINo output
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @VTONo output

				     -- SD: Collect Warehouse Information from gnMstLookupDtl
						set @sqlString = N'select @WHSD=LookUpValue from ' +@DBName+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyCode+ ''' and CodeID=''MPWH'' and ParaValue=''' +@CentralBranch+ ''''
							execute sp_executesql @sqlString, N'@WHSD varchar(15) output', @WHSD output


					 -- SD: Insert data to table omTrPurchaseBPU  
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'BPU', @BPUNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseBPU
												(CompanyCode, BranchCode, PONo, BPUNo, BPUDate, SupplierCode, ShipTo, RefferenceDONo,
												 RefferenceDODate, RefferenceSJNo, RefferenceSJDate, WarehouseCode, Expedition, 
												 BPUType, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate, BPUSJDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ 
												   ''',''' +@BPUNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@curBranchMD+ ''',''' +@CentralBranch+ ''',''' +@DONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BPKNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WHSD+ ''','''
												   +@curBranchMD+ ''',''2'',''' +@curDocNo+ ''',''2'',''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL,''' +convert(varchar,@curDocDate,121)+ ''')' 
							execute sp_executesql @sqlString

					 -- SD: Insert data to table omTrPurchaseHPP
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'HPU', @HPPNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseHPP
												(CompanyCode, BranchCode, HPPNo, HPPDate, PONo, SupplierCode, BillTo, 
												 RefferenceInvoiceNo, RefferenceInvoiceDate, RefferenceFakturPajakNo,
												 RefferenceFakturPajakDate, DueDate, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@PONo+ ''',''' +@curBranchMD+ 
												   ''',''' +@CentralBranch+ ''',''' +@INVNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +convert(varchar,@DueDate)+ 
												   ''',NULL,''5'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)' 
							execute sp_executesql @sqlString
					end

				set @SeqNo = @SeqNo + 1
			 -- Collect Vehicle Price from omPriceListBranches
			    set @sqlString = N'select top 1 
										@RetailPriceIncludePPN = RetailPriceIncludePPN, 
										@DiscPriceIncludePPN   = DiscPriceIncludePPN,
										@NetSalesIncludePPN    = NetSalesIncludePPN, 
										@RetailPriceExcludePPN = RetailPriceExcludePPN,
										@DiscPriceExcludePPN   = DiscPriceExcludePPN, 
										@NetSalesExcludePPN    = NetSalesExcludePPN,
										@PPNBeforeDisc         = PPNBeforeDisc, 
										@PPNAfterDisc          = PPNAfterDisc, 
										@PPnBMPaid             = PPnBMPaid from '
										+@DBName+ '..omPriceListBranches where CompanyCode=''' +@curCompanyCode+ 
										''' and BranchCode=''' +@CentralBranch+ ''' and SupplierCode=''' +@curBranchMD+ 
										''' and GroupPrice=''D'' and SalesModelCode=''' +@curSalesModelCode+
										''' and SalesModelYear=''' +convert(varchar,@curSalesModelYear)+ 
										''' and EffectiveDate<='''+convert(varchar,@curDocDate,111)+ 
										''' and isStatus=1 order by EffectiveDate desc'
						execute sp_executesql @sqlString, 
								N'@RetailPriceIncludePPN numeric(18,0)	output, 
								  @DiscPriceIncludePPN numeric(18,0)	output,
								  @NetSalesIncludePPN numeric(18,0)		output, 
								  @RetailPriceExcludePPN numeric(18,0)	output, 
								  @DiscPriceExcludePPN numeric(18,0)	output, 
								  @NetSalesExcludePPN numeric(18,0)		output, 
								  @PPNBeforeDisc numeric(18,0)			output, 
								  @PPNAfterDisc numeric(18,0)			output,
								  @PPnBMPaid numeric(18,0)				output', 
								  @RetailPriceIncludePPN				output, 
								  @DiscPriceIncludePPN					output,
								  @NetSalesIncludePPN 					output, 
								  @RetailPriceExcludePPN				output, 
								  @DiscPriceExcludePPN					output, 
								  @NetSalesExcludePPN					output, 
								  @PPNBeforeDisc						output, 
								  @PPNAfterDisc							output,
								  @PPnBMPaid							output

				set @RetailPriceIncludePPN = isnull(@RetailPriceIncludePPN,0)
				set @DiscPriceIncludePPN   = isnull(@DiscPriceIncludePPN,0)
				set @NetSalesIncludePPN    = isnull(@NetSalesIncludePPN,0)
				set @RetailPriceExcludePPN = isnull(@RetailPriceExcludePPN,0)
				set @DiscPriceExcludePPN   = isnull(@DiscPriceExcludePPN,0)
				set @NetSalesExcludePPN	   = isnull(@NetSalesExcludePPN,0)
				set @PPNBeforeDisc		   = isnull(@PPNBeforeDisc,0)
				set @PPNAfterDisc		   = isnull(@PPNAfterDisc,0)
				set @PPnBMPaid			   = isnull(@PPnBMPaid,0)

			 -- SD: Insert data to table omTrPurchasePOModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchasePOModel as POM using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
									+convert(varchar,@RetailPriceExcludePPN)+ ''',''' +convert(varchar,@PPNBeforeDisc)+ 
									''',''0'',''' +convert(varchar,@RetailPriceIncludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' +convert(varchar,@DiscPriceIncludePPN)+
									''',''' +convert(varchar,@NetSalesExcludePPN)+ ''',''' +convert(varchar,@PPNAfterDisc)+
									''',''0'',''' +convert(varchar,@NetSalesIncludePPN)+ ''',''' +convert(varchar,@PPNBMPaid)+
									''',''0'',''0'',1,1,''' +@SONo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
								NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, NewBeforeDiscTotal, 
								NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, 
								NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, 
								NewOthersPPn, NewQuantityPO, NewQuantityBPU, NewRemark, NewCreatedBy, 
								NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on POM.CompanyCode    = SRC.NewCompany
					   and POM.BranchCode     = SRC.NewBranch
					   and POM.PONo           = SRC.NewPONo
					   and POM.SalesModelCode = SRC.NewSalesModelCode
					   and POM.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityPO     = QuantityPO  + SRC.NewQuantityPO
						                 , QuantityBPU    = QuantityBPU + SRC.NewQuantityBPU
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, SalesModelCode, SalesModelYear, 
										BeforeDiscDPP, BeforeDiscPPn, BeforeDiscPPnBM, BeforeDiscTotal, 
										DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, AfterDiscPPn, 
										AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, 
										OthersPPn, QuantityPO, QuantityBPU, Remark, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
										NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, NewBeforeDiscTotal, 
										NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, 
										NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, 
										NewOthersPPn, NewQuantityPO, NewQuantityBPU, NewRemark, NewCreatedBy, 
										NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchasePOModelColour
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchasePOModelColour as POC using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''' +@curColourCode+ ''',1,''' +@curDocNo+ ''','''+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
									''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, NewColourCode, 
								NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on POC.CompanyCode    = SRC.NewCompany
					   and POC.BranchCode     = SRC.NewBranch
					   and POC.PONo           = SRC.NewPONo
					   and POC.SalesModelCode = SRC.NewSalesModelCode
					   and POC.SalesModelYear = SRC.NewSalesModelYear
					   and POC.ColourCode     = SRC.NewColourCode
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, SalesModelCode, SalesModelYear, ColourCode, 
										Quantity, Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
										NewColourCode, NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModel as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
									+@curChassisCode+ ''','''+convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@PPNBeforeDisc)+ ''',''0'',''' 
									+convert(varchar,@RetailPriceIncludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceIncludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',''0'',''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''',''0'',''0'',1,1,''' 
									+@curDocNo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ ''',0,0,0))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
								NewChassisCode, NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, 
								NewBeforeDiscTotal, NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, 
								NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, NewOthersDPP, 
								NewOthersPPn, NewQuantitySO, NewQuantityDO, NewRemark, NewCreatedBy, 
								NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
								NewDepositAmt, NewOthersAmt)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantitySO     = QuantitySO + SRC.NewQuantitySO
						                 , QuantityDO     = QuantityDO + SRC.NewQuantityDO
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, 
										ChassisCode, BeforeDiscDPP, BeforeDiscPPn, BeforeDiscPPnBM, 
										BeforeDiscTotal, DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, 
										AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, OthersDPP, 
										OthersPPn, QuantitySO, QuantityDO, Remark, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate, ShipAmt, 
										DepositAmt, OthersAmt)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
										NewChassisCode, NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, 
										NewBeforeDiscTotal, NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, 
										NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, NewOthersDPP, 
										NewOthersPPn, NewQuantitySO, NewQuantityDO, NewRemark, NewCreatedBy, 
										NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
										NewDepositAmt, NewOthersAmt);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModelColour
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModelColour as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''' +@curColourCode+ ''',1,''' +@curDocNo+ ''','''+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
									''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, NewColourCode, 
								NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					   and SO.ColourCode     = SRC.NewColourCode
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, ColourCode, 
										Quantity, Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
										NewColourCode, NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOVin
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesSOVin
										(CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, 
									     ColourCode, SOSeq, ChassisCode, ChassisNo, EngineCode, EngineNo, 
										 ServiceBookNo, KeyNo, EndUserName, EndUserAddress1, EndUserAddress2, 
										 EndUserAddress3, SupplierBBN, CityCode, BBN, KIR, Remark, StatusReq, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
								         +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
										 ''',''' +@curColourCode+ ''',''' +Convert(varchar,@SeqNo)+ ''','''
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' +@EndUserName+ ''',''' 
										 +@EndUserAddress1+ ''',''' +@EndUserAddress2+ ''','''
										 +@EndUserAddress3+ ''',NULL,''' +@CityCode+ ''',0,0,NULL,0,''' 
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModelAdditional
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModelAdditional as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''A'',NULL,NULL,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, 
								NewSalesModelYear, NewStatusVehicle, NewOthersBrand, NewOthersType, 
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, 
										SalesModelYear, StatusVehicle, OthersBrand, OthersType, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, 
										NewSalesModelYear, NewStatusVehicle, NewOthersBrand, NewOthersType, 
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesDODetail
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesDODetail
										(CompanyCode, BranchCode, DONo, DOSeq, SalesModelCode, SalesModelYear, 
									     ChassisCode, ChassisNo, EngineCode, EngineNo, ColourCode, Remark, 
										 StatusBPK, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@DONo+ ''',''' 
								         +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curChassisCode+ 
										 ''',''' +convert(varchar,@curChassisNo)+ ''',''' +@curEngineCode+ 
										 ''',''' +convert(varchar,@curEngineNo)+ ''',''' +@curColourCode+ 
										 ''',NULL,''1'',''' +@curCreatedBy+ ''',''' 
										 +convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
										 ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesBPKModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesBPKModel as BPK using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,1,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewBPKNo, NewSalesModelCode, 
								NewSalesModelYear, NewQuantityBPK, NewQuantityInvoice,
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on BPK.CompanyCode    = SRC.NewCompany
					   and BPK.BranchCode     = SRC.NewBranch
					   and BPK.BPKNo           = SRC.NewBPKNo
					   and BPK.SalesModelCode = SRC.NewSalesModelCode
					   and BPK.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityBPK     = QuantityBPK     + SRC.NewQuantityBPK
						                 , QuantityInvoice = QuantityInvoice + SRC.NewQuantityInvoice
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, BPKNo, SalesModelCode, 
										SalesModelYear, QuantityBPK, QuantityInvoice, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewBPKNo, NewSalesModelCode, 
										NewSalesModelYear, NewQuantityBPK, NewQuantityInvoice,
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesBPKDetail
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesBPKDetail
										(CompanyCode, BranchCode, BPKNo, BPKSeq, SalesModelCode, SalesModelYear, 
									     ChassisCode, ChassisNo, EngineCode, EngineNo, ColourCode, ServiceBookNo,
										 KeyNo, ReqOutNo, Remark, StatusPDI, StatusInvoice, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
								         +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curChassisCode+ 
										 ''',''' +convert(varchar,@curChassisNo)+ ''',''' +@curEngineCode+ 
										 ''',''' +convert(varchar,@curEngineNo)+ ''',''' +@curColourCode+ 
										 ''',''' +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',NULL,NULL,''0'',''1'','''
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceBPK
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesInvoiceBPK as INV using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
									+@INVNo+ ''',''' +@BPKNo+ ''',NULL,''' 
									+@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
									+@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewRemark,
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on INV.CompanyCode    = SRC.NewCompany
					   and INV.BranchCode     = SRC.NewBranch
					   and INV.InvoiceNo      = SRC.NewInvoiceNo
					   and INV.BPKNo		  = SRC.NewBPKNo
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, InvoiceNo, BPKNo, Remark, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewRemark,
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesInvoiceModel as INV using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ ''',''' 
									+@BPKNo+ ''',''' +@curSalesModelCode+ ''',''' 
									+convert(varchar,@curSalesModelYear)+ ''',1,'''
									+convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceIncludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',''0'',''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''','''
									+convert(varchar,@PPNBMPaid) + ''',0,0,0,'''
									+@curDocNo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ ''',0,0,0))
					    as SRC (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewSalesModelCode, 
								NewSalesModelYear, NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, 
								NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, NewAfterDiscPPnBM, 
								NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn, 
								NewQuantityReturn, NewRemark, NewCreatedBy, NewCreatedDate, 
								NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
								NewDepositAmt, NewOthersAmt)
						on INV.CompanyCode    = SRC.NewCompany
					   and INV.BranchCode     = SRC.NewBranch
					   and INV.InvoiceNo      = SRC.NewInvoiceNo
					   and INV.BPKNo		  = SRC.NewBPKNo
					   and INV.SalesModelCode = SRC.NewSalesModelCode
					   and INV.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, SalesModelYear, 
										Quantity, BeforeDiscDPP,  DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, 
										AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, 
										OthersPPn, QuantityReturn, Remark, CreatedBy, CreatedDate, 
										LastUpdateBy, LastUpdateDate, ShipAmt, DepositAmt, OthersAmt)
								values (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewSalesModelCode, 
										NewSalesModelYear, NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, 
										NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, NewAfterDiscPPnBM, 
										NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn, 
										NewQuantityReturn, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
										NewDepositAmt, NewOthersAmt);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceVIN
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesInvoiceVIN
										(CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, 
										 SalesModelYear, InvoiceSeq, ColourCode, ChassisCode, ChassisNo,
										 EngineCode, EngineNo, COGS, IsReturn, CreatedBy, CreatedDate, 
										 LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ ''',''' +@BPKNo+ ''',''' 
										 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''  
										 +convert(varchar,@SeqNo)+ ''',''' +convert(varchar,@curColourCode)+ ''',''' 
										 +convert(varchar,@curChassisCode)+ ''',''' +convert(varchar,@curChassisNo)+ 
										 ''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +convert(varchar,@VehCOGS)+ ''',0,''' +@curCreatedBy+ ''',''' 
										 +convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
										 +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString


			 -- SD: Insert data to table omTrPurchaseBPUDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseBPUDetailModel as BPU using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@BPUNo+ ''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,1,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewBPUNo, NewSalesModelCode, NewSalesModelYear, NewQuantityBPU, 
								NewQuantityHPP, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on BPU.CompanyCode    = SRC.NewCompany
					   and BPU.BranchCode     = SRC.NewBranch
					   and BPU.PONo           = SRC.NewPONo
					   and BPU.BPUNo		  = SRC.NewBPUNo
					   and BPU.SalesModelCode = SRC.NewSalesModelCode
					   and BPU.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityBPU    = QuantityBPU + SRC.NewQuantityBPU
										 , QuantityHPP    = QuantityHPP + SRC.NewQuantityHPP
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, BPUNo, SalesModelCode, SalesModelYear, QuantityBPU, 
										QuantityHPP, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewBPUNo, NewSalesModelCode, NewSalesModelYear, NewQuantityBPU, 
										NewQuantityHPP, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
							
			 -- SD: Insert data to table omTrPurchaseBPUDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseBPUDetail 
										(CompanyCode, BranchCode, PONo, BPUNo, BPUSeq, SalesModelCode, SalesModelYear, ColourCode,
										 ChassisCode, ChassisNo, EngineCode, EngineNo, ServiceBookNo, KeyNo, Remark, StatusSJRel,
										 SJRelNo, SJRelDate, SJRelReff, SJRelReffDate, StatusDORel, DORelNo, DORelDate, StatusHPP,
										 isReturn, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' +@BPUNo+ ''','''
										 +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curColourCode+ ''','''
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
										 +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' +@curDocNo+ 
										 ''',0,NULL,NULL,NULL,NULL,0,NULL,NULL,1,0,'''
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+''')'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseHPPDetail
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseHPPDetail as HPP using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' 
									+@BPUNo+ ''',NULL,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewRemark, 
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on HPP.CompanyCode = SRC.NewCompany
					   and HPP.BranchCode  = SRC.NewBranch
					   and HPP.HPPNo       = SRC.NewHPPNo
					   and HPP.BPUNo	   = SRC.NewBPUNo
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, HPPNo, BPUNo, Remark,
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewRemark, 
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
							
			 -- SD: Insert data to table omTrPurchaseHPPDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseHPPDetailModel as HPP using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' +@BPUNo+ 
									''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,''' +convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',0,''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''',''' 
									+convert(varchar,@PPnBMPaid)+ ''',0,0,NULL,''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewSalesModelCode, NewSalesModelYear,
								NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, NewAfterDiscPPn,
								NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn,
								NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on HPP.CompanyCode    = SRC.NewCompany
					   and HPP.BranchCode     = SRC.NewBranch
					   and HPP.HPPNo          = SRC.NewHPPNo
					   and HPP.BPUNo	      = SRC.NewBPUNo
					   and HPP.SalesModelCode = SRC.NewSalesModelCode
					   and HPP.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set Quantity       = Quantity + 1
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, HPPNo, BPUNo, SalesModelCode, SalesModelYear,
										Quantity, BeforeDiscDPP, DiscExcludePPn, AfterDiscDPP, AfterDiscPPn,
										AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, OthersPPn,
										Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewSalesModelCode, NewSalesModelYear,
										NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, NewAfterDiscPPn,
										NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn,
										NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseHPPSubDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseHPPSubDetail
										(CompanyCode, BranchCode, HPPNo, BPUNo, HPPSeq, SalesModelCode, SalesModelYear,
										ColourCode, ChassisCode, ChassisNo, EngineCode, EngineNo, Remark, isReturn, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
										 +@BPUNo+ ''',''' +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +convert(varchar,@curColourCode)+ 
										 ''',''' +convert(varchar,@curChassisCode)+ ''',''' +convert(varchar,@curChassisNo)+ 
										 ''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',NULL,0,''' 
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' +
										 @curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

/*				
			 -- SD: Insert data to table omTrPurchaseReturn
			 -- SD: Insert data to table omTrPurchaseReturnDetail
			 -- SD: Insert data to table omTrPurchaseReturnDetailModel
			 -- SD: Insert data to table omTrPurchaseReturnSubDetail

			 -- MD: Insert data to table omTrSalesReturn
			 -- MD: Insert data to table omTrSalesReturnBPK
			 -- MD: Insert data to table omTrSalesReturnDetailModel
			 -- MD: Insert data to table omTrSalesReturnVIN

			USE POSTING JOURNAL IN UTILITY SALES MODULE 
			FOR UPDATE DATA TO TABLE ARINTERFACE & GLINTERFACE
			 -- MD: Update data to table arInterface
			 -- MD: Update data to table glInterface
			 -- SD: Update data to table apInterface
			 -- SD: Update data to table glInterface
*/

			 -- MD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBNameMD+ '..omMstVehicle
										set SONo='''+@SONo+ ''', SOReturnNo='''+@RTNNo+ ''', DONo='''+@DONo+ ''', BPKNo='''
											+@BPKNo+ ''', InvoiceNo='''+@INVNo+ ''', TransferOutNo='''+@VTONo+ 
											''', TransferInNo='''+@VTINo+ ''', BPKDate='''+convert(varchar,@curDocDate,121)+
									''' where CompanyCode='''+@curCompanyMD+''' and ChassisCode='''
											+@curChassisCode+ ''' and ChassisNo='+convert(varchar,@curChassisNo)
					execute sp_executesql @sqlString

			 -- SD: Insert / Update data to table omMstVehicle
				set @sqlString = 'merge into ' +@DBName+ '..omMstVehicle as VEH using (values(''' 
									+@curCompanyCode+ ''',''' +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ 
									''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
									+@curColourCode+ ''',''' +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' 
									+convert(varchar,@VehCOGS)+ ''',''' +convert(varchar,@VehCOGSOthers)+ ''',''' 
									+convert(varchar,@VehCOGSKaroseri)+ ''',''' +convert(varchar,@VehPpnBMBuyPaid)+ 
									''',''' +convert(varchar,@VehPpnBmBuy)+ ''',''' +convert(varchar,@VehSalesNetAmt)+ 
									''',''' +convert(varchar,@VehPpnBmSellPaid)+ ''',''' +convert(varchar,@VehPpnBmSell)+ 
									''',''' +@PONo+ ''',''' +@RTPNo+ ''',''' +@BPUNo+ ''',''' +@HPPNo+ ''',NULL,NULL,'''
									+@VehSONo+ ''',''' +@VehRTNNo+ ''',''' +@VehDONo+ ''',''' +@VehBPKNo+ ''','''
									+@VehINVNo+ ''',''' +@VehREQNo+ ''',''' +@VehVTONo+ 
									''',''' +@VehVTINo+ ''',''' +@WHSD+ ''',''' +@VehINVNo+ ''',''6'',0,''' 
									+convert(varchar,@curDocDate,121)+ ''',''' +@vEHFakturPolisiNo+ ''','''
									+convert(varchar,@VehFakturPolisiDate,121)+ ''',NULL,NULL,1,0,1,'''
									+@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+
									''',0,NULL,NULL,0,''' +convert(varchar,@curDocDate,121)+ ''','''
									+@VehSuzukiDONo+ ''',''' +convert(varchar,@VehSuzukiDODate,121)+ ''','''
									+@VehSuzukiSJNo+ ''',''' +convert(varchar,@VehSuzukiSJDate,121)+ ''',NULL,NULL))
					    as SRC (NewCompany, NewChassisCode, NewChassisNo, NewEngineCode, NewEngineNo, 
								NewSalesModelCode, NewSalesModelYear, NewColourCode, NewServiceBookNo, 
								NewKeyNo, NewCOGSUnit, NewCOGSOthers, NewCOGSKaroseri, NewPpnBMBuyPaid, 
								NewPpnBmBuy, NewSalesNetAmt, NewPpnBmSellPaid, NewPpnBmSell, NewPONo, 
								NewPOReturnNo, NewBPUNo, NewHPPNo, NewKaroseriSPKNo, NewKaroseriTerimaNo, 
								NewSONo, NewSOReturnNo, NewDONo, NewBPKNo, NewInvoiceNo, NewReqOutNo, 
								NewTransferOutNo, NewTransferInNo, NewWarehouseCode, NewRemark, NewStatus, 
								NewIsAlreadyPDI, NewBPKDate, NewFakturPolisiNo, NewFakturPolisiDate, 
								NewPoliceRegistrationNo, NewPoliceRegistrationDate, NewIsProfitCenterSales, 
								NewIsProfitCenterService, NewIsActive, NewCreatedBy, NewCreatedDate, 
								NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate, 
								NewIsNonRegister, NewBPUDate, NewSuzukiDONo, NewSuzukiDODate, NewSuzukiSJNo, 
								NewSuzukiSJDate, NewTransferOutMultiBranchNo, NewTransferInMultiBranchNo)
						on VEH.CompanyCode = SRC.NewCompany
					   and VEH.ChassisCode = SRC.NewChassisCode
					   and VEH.ChassisNo   = SRC.NewChassisNo
					  when matched
						   then update set PONO				= isnull(@PONo,'')
										 , POReturnNo		= isnull(@RTPNo,'')
										 , BPUNo			= isnull(@BPUNo,'')
										 , HPPNo			= isnull(@HPPNo,'')
										 , SONo             = isnull(@VehSONo,'')
										 , SOReturnNo       = isnull(@VehRTNNo,'')
										 , DONo		        = isnull(@VehDONo,'')
										 , BPKNo            = isnull(@VehBPKNo,'')
										 , InvoiceNo        = isnull(@VehINVNo,'')
										 , TransferOutNo    = isnull(@VehVTONo,'')
										 , TransferInNo     = isnull(@VehVTINo,'')
										 , BPKDate		    = isnull(@VehBPKDate,'')
										 , BPUDate			= isnull(@VehBPUDate,'')
										 , SuzukiDONo       = isnull(@VehSuzukiDONo,'')
										 , SuzukiDODate     = isnull(@VehSuzukiDODate,'')
										 , SuzukiSJNo       = isnull(@VehSuzukiSJNo,'')
										 , SuzukiSJDate     = isnull(@VehSuzukiSJDate,'')
										 , FakturPolisiNo   = isnull(FakturPolisiNo,@VehFakturPolisiNo)
										 , FakturPolisiDate = isnull(FakturPolisiDate,@VehFakturPolisiDate)
						                 , QuantityInvoice = QuantityInvoice + isnull(SRC.NewQuantityInvoice,0)
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, ChassisCode, ChassisNo, EngineCode, EngineNo, SalesModelCode, 
										SalesModelYear, ColourCode, ServiceBookNo, KeyNo, COGSUnit, COGSOthers, 
										COGSKaroseri, PpnBMBuyPaid, PpnBmBuy, SalesNetAmt, PpnBmSellPaid, PpnBmSell,
										PONo, POReturnNo, BPUNo, HPPNo, KaroseriSPKNo, KaroseriTerimaNo, SONo, 
										SOReturnNo, DONo, BPKNo, InvoiceNo, ReqOutNo, TransferOutNo, TransferInNo,
										WarehouseCode, Remark, Status, IsAlreadyPDI, BPKDate, FakturPolisiNo, 
										FakturPolisiDate, PoliceRegistrationNo, PoliceRegistrationDate, 
										IsProfitCenterSales, IsProfitCenterService, IsActive, CreatedBy, CreatedDate, 
										LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate, IsNonRegister,
										BPUDate, SuzukiDONo, SuzukiDODate, SuzukiSJNo, SuzukiSJDate, 
										TransferOutMultiBranchNo, TransferInMultiBranchNo)
								values (NewCompany, NewChassisCode, NewChassisNo, NewEngineCode, NewEngineNo, 
										NewSalesModelCode, NewSalesModelYear, NewColourCode, NewServiceBookNo, 
										NewKeyNo, NewCOGSUnit, NewCOGSOthers, NewCOGSKaroseri, NewPpnBMBuyPaid, 
										NewPpnBmBuy, NewSalesNetAmt, NewPpnBmSellPaid, NewPpnBmSell, NewPONo, 
										NewPOReturnNo, NewBPUNo, NewHPPNo, NewKaroseriSPKNo, NewKaroseriTerimaNo, 
										NewSONo, NewSOReturnNo, NewDONo, NewBPKNo, NewInvoiceNo, NewReqOutNo, 
										NewTransferOutNo, NewTransferInNo, NewWarehouseCode, NewRemark, NewStatus, 
										NewIsAlreadyPDI, NewBPKDate, NewFakturPolisiNo, NewFakturPolisiDate, 
										NewPoliceRegistrationNo, NewPoliceRegistrationDate, NewIsProfitCenterSales, 
										NewIsProfitCenterService, NewIsActive, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate, 
										NewIsNonRegister, NewBPUDate, NewSuzukiDONo, NewSuzukiDODate, NewSuzukiSJNo, 
										NewSuzukiSJDate, NewTransferOutMultiBranchNo, NewTransferInMultiBranchNo);'
					execute sp_executesql @sqlString

			 -- SD: Insert / Update data to table omTrInventQtyVehicle
				set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
									+@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
									+convert(varchar,year(@curDocDate))+ ''',''' 
									+convert(varchar,month(@curDocDate))+  ''',''' 
									+@curSalesModelCode+ ''',''' 
									+convert(varchar,@curSalesModelYear)+ ''',''' 
									+@curColourCode+ ''',''' +@WHSD+ 
									''',1,0,1,0,0,0,0,NULL,1,''' 
									+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' 
									+@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ 
									''',0,NULL,NULL))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
								NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
								NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
								NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
								NewIsLocked, NewLockedBy, NewLockedDate)
						on VEH.CompanyCode    = SRC.NewCompany
					   and VEH.BranchCode	  = SRC.NewBranch
					   and VEH.Year			  = SRC.NewYear
					   and VEH.Month		  = SRC.NewMonth
					   and VEH.SalesModelCode = SRC.NewSalesModelCode
					   and VEH.SalesModelYear = SRC.NewSalesModelYear 
					   and VEH.ColourCode	  = SRC.NewColourCode
					   and VEH.WarehouseCode  = SRC.NewWarehouseCode
					  when matched
						   then update set QtyIn  = QtyIn  + SRC.NewQtyIn
										 , QtyOut = QtyOut + SRC.NewQtyOut
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
										ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
										EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
										NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
										NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
										NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
										NewIsLocked, NewLockedBy, NewLockedDate);'
					execute sp_executesql @sqlString

			 -- SD: insert omMstVehicleTemp

   			 -- Update Daily Posting Process Status
				update omSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and DocDate    =@curDocDate
					  and Seq        =@curSeq

			 -- Read next record
				fetch next from curomSDMovement
					  into  @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
							@curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
							@curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
							@curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
							@curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table omSDMovement to table omHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[omHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[omHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[Seq] [int] NOT NULL,
				[SalesModelCode] [varchar](20) NOT NULL,
				[SalesModelYear] [numeric](4, 0) NOT NULL,
				[ChassisCode] [varchar](15) NOT NULL,
				[ChassisNo] [numeric](10, 0) NOT NULL,
				[EngineCode] [varchar](15) NOT NULL,
				[EngineNo] [numeric](10, 0) NOT NULL,
				[ColourCode] [varchar](15) NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[CustomerCode] [varchar](15) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NOT NULL,
				[LastUpdateDate] [datetime] NOT NULL)
			
		insert into omHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  omSDMovement
							  where	 ProcessStatus = 1
                              -- or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		delete omSDMovement   where	 ProcessStatus = 1
                              -- or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		close curomSDMovement
		deallocate curomSDMovement

END
GO

-- POSTING TRANSACTION MULTI COMPANY - SPARE PART & SERVICE
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- ----------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySparePartService] '6006406','2014/11/30','0'
-- ----------------------------------------------------------------------------------

ALTER procedure [dbo].[usprpt_PostingMultiCompanySparePartService]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN 
  -- Check Tax/Seri Pajak online
		declare @TaxCompany					varchar(15)
		declare @TaxBranch					varchar(15)
		declare @TaxDB						varchar(50)
		declare @TaxTransCode				varchar(3)
		declare @swTaxBranch				varchar(15) = ''
		declare @swTaxDoc					varchar(15) = ''
		declare @TaxSeq						bigint
		declare @TaxSeqNo					int
		declare @SeriPajakNo				varchar(50) = ''
		declare @sqlString					nvarchar(max)

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			begin
				set @Status = '1'
				return
			end
		
		set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
									   +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
									   +@TaxCompany+ ''' and BranchCode=''' 
									   +@TaxBranch+ ''' and Year=''' 
									   +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
									   +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
			execute sp_executesql @sqlString, 
								N'@TaxSeq 		bigint  	output,
								  @TaxSeqNo 	int 		output', 
								  @TaxSeq 		output,
								  @TaxSeqNo 	output
		if isnull(@TaxSeq,0)=0 and isnull(@TaxSeqNo,0)=0
			begin
				set @Status = '1'
				return
			end
		set @TaxSeq   = isnull(@TaxSeq,0)
		set @TaxSeqNo = isnull(@TaxSeqNo,0)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode				varchar(15)
		declare @curBranchCode				varchar(15)
		declare @curDocNo					varchar(20)
		declare @curDocDate					datetime
		declare @curPartNo					varchar(20)
		declare @curPartSeq					integer
		declare @curWarehouseCode			varchar(15)
		declare @curQtyOrder				numeric(18,2)
		declare @curQty						numeric(18,2)
		declare @curDiscPct					numeric(06,2)
		declare @curCostPrice				numeric(18,2)
		declare @curRetailPrice				numeric(18,2)
		declare @curTypeOfGoods				varchar(15)
		declare @curCompanyMD				varchar(15)
		declare @curBranchMD				varchar(15)
		declare @curWarehouseMD				varchar(15)
		declare @curRetailPriceInclTaxMD	numeric(18,2)
		declare @curRetailPriceMD			numeric(18,2)
		declare @curCostPriceMD				numeric(18,2)
		declare @curQtyFlag					char(1)
		declare @curProductType				varchar(15)
		declare @curProfitCenterCode		varchar(15)
		declare @curStatus					char(1)
		declare @curProcessStatus			char(1)
		declare @curProcessDate				datetime
		declare @curCreatedBy				varchar(15)
		declare @curCreatedDate				datetime
		declare @curLastUpdateBy			varchar(15)
		declare @curLastUpdateDate			datetime
		declare @DocPrefix					varchar(15)
		declare @SONo						varchar(15)
		declare @PLNo						varchar(15)
		declare @INVNo						varchar(15)
		declare @FPJNo						varchar(15)
		declare @POSNo						varchar(15)
		declare @BINNo						varchar(15)
		declare @WRSNo						varchar(15)
		declare @HPPNo						varchar(15)
		declare @APNo						varchar(15)
		declare @DocYear					numeric(4,0)
		declare @DocSeq						numeric(15,0)
		declare @SeqNo						integer
		declare @DBName						varchar(50)
		declare @DBNameMD					varchar(50)
		declare @swCompanyCode				varchar(15) = ''
		declare @swBranchCode				varchar(15) = ''
		declare @swDocNo 					varchar(15) = ''
		declare @TotPurchaseAmt				numeric(18,0)
		declare @TotPurchaseNetAmt			numeric(18,0)
		declare @TotTaxAmt					numeric(18,0)
		declare @RetailPriceNet				numeric(18,0)
		declare @SalesAmt					numeric(18,0)
		declare @DiscAmt					numeric(18,0)
		declare @NetSales					numeric(18,0)
		declare @PPNAmt						numeric(18,0)
		declare @TotSalesAmt				numeric(18,0)
		declare @CostAmt 					numeric(18,0)
		declare @MovingCode					varchar(15)
		declare @ABCClass					char(1)
		declare @PartCategory				varchar(15)
		declare @LocationCode				varchar(10)
		declare @MovingCodeMD				varchar(15)
		declare @ABCClassMD					char(1)
		declare @PartCategoryMD				varchar(3)
		declare @LocationCodeMD				varchar(10)
		declare @ProductTypeMD				varchar(15)	
		declare @TypeOfGoodsMD				varchar(5)
		declare @PaymentCodeMD				varchar(15)
		declare @SalesCodeMD				varchar(15)
		declare @CustomerNameMD				varchar(100)
		declare @Address1MD					varchar(100)
		declare @Address2MD					varchar(100)
		declare @Address3MD					varchar(100)
		declare @Address4MD					varchar(100)
		declare @isPKPMD					varchar(100)
		declare @NPWPNoMD					varchar(100)
		declare @SKPNoMD					varchar(100)
		declare @SKPDateMD					datetime
		declare @NPWPDateMD					datetime
		declare @TopCodeMD					varchar(15)
		declare @TopDaysMD					integer
		declare @DueDateMD					date
		declare @AccNoArMD					varchar(50)
		declare @AccNoSalesMD				varchar(50)
		declare @AccNoTaxOutMD				varchar(50)
		declare @AccNoDisc1MD				varchar(50)
		declare @AccNoCogsMD				varchar(50)
		declare @AccNoInventoryMD			varchar(50)
		declare @AccNoInventory				varchar(50)
		declare @AccNoTaxIn					varchar(50)
		declare @AccNoAP					varchar(50)
		declare @SeqNoGlMD					numeric(10,0)
		declare @SeqNoGl					numeric(10,0)
		declare @DiscFlag					integer
		declare @CurrentDate				varchar(100) = convert(varchar,getdate(),121)

        declare cursvSDMovement cursor for
			select * from svSDMovement
             where left(DocNo,3) in ('LMP','FPJ') 
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus='0'
             order by CompanyCode, BranchCode, DocNo, TypeOfGoods, PartNo, PartSeq
		open cursvSDMovement

		fetch next from cursvSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
			       @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
				   @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
				   @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin
			 -- MD : Database Name, Company Code & Branch Code MD
				set @DBNameMD = (select DbMD   from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode)

			 -- SD : Database Name 
				set @DBName   = (select DbName from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)

			 -- MD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCodeMD=MovingCode, @ABCClassMD=ABCClass, @PartCategoryMD=PartCategory, @TypeOfGoodsMD=TypeOfGoods from ' 
										  +@DBNameMD+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCodeMD		varchar(15) output,
										  @ABCClassMD 		char(1) 	output,
										  @PartCategoryMD 	varchar(3) 	output,
										  @TypeOfGoodsMD 	varchar(15) output', 
										  @MovingCodeMD 	output,
										  @ABCClassMD 		output,
										  @PartCategoryMD 	output,
										  @TypeOfGoodsMD 	output
										  
			 -- MD: Location Code
				set @sqlString = N'select @LocationCodeMD=LocationCode from ' 
										  +@DBNameMD+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCodeMD 	varchar(10) output', 
										  @LocationCodeMD 	output

			 -- MD: ProducType
				set @sqlString = N'select @ProductTypeMD=ProductType from ' 
										  +@DBNameMD+ '..gnMstCoProfile where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''''
					execute sp_executesql @sqlString, 
										N'@ProductTypeMD 	varchar(15) output', 
										  @ProductTypeMD 	output

			 -- MD: Top Code, Payment Code, Sales Code
				set @sqlString = N'select @TopCodeMD=TopCode, @PaymentCodeMD=PaymentCode, @SalesCodeMD=SalesCode from ' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and CustomerCode=''' 
										  +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @sqlString, 
										N'@TopCodeMD 		varchar(15) output,
										  @PaymentCodeMD 	varchar(15) output,
										  @SalesCodeMD 		varchar(15) output', 
										  @TopCodeMD 		output,
										  @PaymentCodeMD 	output,
										  @SalesCodeMD 		output

			 -- MD: Top Days
				set @sqlString = N'select @TopDaysMD=ParaValue from ' 
										  +@DBNameMD+ '..gnMstLookUpDtl where CompanyCode=''' 
										  +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' 
										  +@TopCodeMD+ ''''
					execute sp_executesql @sqlString, 
										N'@TopDaysMD 		integer	output', 
										  @TopDaysMD 		output
										  
				-- MD: AR Account
				set @sqlString = N'select @AccNoArMD=c.ReceivableAccNo from ' 
				                          +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ 
								  ''' and c.BranchCode      =''' +@curBranchMD+ 
								  ''' and c.ProfitCenterCode=''300''
								      and c.TypeOfGoods     =''' +@TypeOfGoodsMD+
								  ''' and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoArMD 		varchar(50) output', 
										  @AccNoArMD 		output
										  
				-- MD: Sales Account
				set @sqlString = N'select @AccNoSalesMD=SalesAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoSalesMD 	varchar(50) output', 
										  @AccNoSalesMD 	output
										  
				-- MD: Tax Account
				set @sqlString = N'select @AccNoTaxOutMD=c.TaxOutAccNo from ' 
										  +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ ''' 
									  and c.BranchCode      =''' +@curBranchMD+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@TypeOfGoodsMD+ '''
									  and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoTaxOutMD 	varchar(50) output', 
										  @AccNoTaxOutMD 	output
										  
				-- MD: Discount, COGS & Inventory Account
				set @sqlString = N'select @AccNoDisc1MD=DiscAccNo, @AccNoCogsMD=COGSAccNo, @AccNoInventoryMD=InventoryAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString,
										N'@AccNoDisc1MD 	varchar(50) output,
										  @AccNoCogsMD 		varchar(50) output,
										  @AccNoInventoryMD varchar(50) output', 
										  @AccNoDisc1MD 	output,
										  @AccNoCogsMD 		output,
										  @AccNoInventoryMD output
										  
				set @SalesAmt    = @curQty*@curRetailPriceInclTaxMD 
				set @DiscAmt     = round((@SalesAmt*@curDiscPct / 100),0)
				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt
				set @CostAmt     = @curQty*@curCostPriceMD 
				set @DueDateMD   = dateadd(day,isnull(@TopDaysMD,0),@curDocDate)

				-- SD: A/P, TAX IN  Account
				set @sqlString = N'select @AccNoAP=c.PayableAccNo, @AccNoTaxIn=c.TaxInAccNo from ' 
										  +@DBName+ '..gnMstSupplierClass c,' 
										  +@DBName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoAP 			varchar(50) output,
										  @AccNoTaxIn 		varchar(50) output', 
										  @AccNoAP 			output,
										  @AccNoTaxIn 		output

				-- SD: Inventory Account
				set @sqlString = N'select @AccNoInventory=InventoryAccNo from ' 
										  +@DBName+ '..spMstAccount
									where CompanyCode=''' +@curCompanyCode+ ''' 
									  and BranchCode =''' +@curBranchCode+ '''
									  and TypeOfGoods=''' +@CurTypeOfGoods+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoInventory 	varchar(50) output', 
										  @AccNoInventory 	output

			 -- SD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCode=MovingCode, @ABCClass=ABCClass, @PartCategory=PartCategory from ' 
										  +@DBName+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCode		varchar(15) output,
										  @ABCClass 		char(1) 	output,
										  @PartCategory 	varchar(3) 	output',
										  @MovingCode 		output,
										  @ABCClass 		output,
										  @PartCategory 	output

			 -- SD: Location Code
				set @sqlString = N'select @LocationCode=LocationCode from ' 
										  +@DBName+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCode 	varchar(15) output', 
										  @LocationCode 	output

				set @RetailPriceNet    = round(@curRetailPriceMD * (100.00-@curDiscPct) / 100.00,0)
				set @TotPurchaseNetAmt = @CurQty * @RetailPriceNet
				set @TotTaxAmt         = round(@TotPurchaseNetAmt * 0.1,0)
			    set @TotPurchaseAmt    = @TotPurchaseNetAmt + @TotTaxAmt


				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0

					 -- Discount Flag
						--set @sqlString = N'select top 1 @DiscFlag=1 from ' 
						--						  +@DBName+ '..svSDMovement where CompanyCode=''' 
						--						  +@curCompanyCode+ ''' and BranchCode=''' 
						--						  +@curBranchCode+ ''' and DocNo=''' 
						--						  +@curDocNo+ ''''
						--	execute sp_executesql @sqlString, 
						--						N'@DiscFlag 	integer output', 
						--						  @DiscFlag  	output
						set @DiscFlag = 1

					 -- SD : Insert data to table spTrnPPOSHdr
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'POS', @POSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSHdr 
										(CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, isBO, isSubstution, isSuggorProcess, 
										 Remark, ProductType, PrintSeq, ExPickingSlipNo, ExPickingSlipDate, Status, Transportation, TypeOfGoods, 
										 isGenPORDD, isDeleted, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
										 LockingDate, isDropSign, DropSignReffNo)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''S'',0,0,0,''' 
												   +@curDocNo+ ''',''' +@curProductType+ ''',1,'''',NULL,7,NULL,''' 
												   +@curTypeOfGoods+ ''',0,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL,0,NULL)'
							execute sp_executesql @sqlString

					 -- MD : Insert data to table spTrnSORDHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'SOC', @SONo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDHdr 
										(CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill,
										 CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, isPORDD, OrderNo, OrderDate,
										 TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt,
										 TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate, isDropSign)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''' +@curBranchCode+ ''',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',0,0,1,''00'',''0'',0,''' 
												   +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@TopCodeMD+ ''',''' 
												   +convert(varchar,@TopDaysMD)+ ''',''' +@PaymentCodeMD+ ''',NULL,0.00,0,0,0,0,0,1,NULL,NULL,5,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,''' +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSPickingHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'PLS', @PLNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingHdr 
										(CompanyCode, BranchCode, PickingSlipNo, PickingSlipDate, CustomerCode, CustomerCodeBill, 
										 CustomerCodeShip, PickedBy, isBORelease, isSubstitution, isIncludePPN, TransType, SalesType, 
										 TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Remark, Status, 
										 PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchCode+
											   ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''POSTING'',0,0,1,''00'',''0'',0,0,0,0,0,0,NULL,2,1,'''
											           +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSInvoiceHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'INV', @INVNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'FPJ', @FPJNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceHdr 
										(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, PickingSlipNo, PickingSlipDate, FPJNo, FPJDate,
										 TransType, SalesType, CustomerCode, CustomerCodeBill, CustomerCodeShip, TotSalesQty, TotSalesAmt, 
										 TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@PLNo+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''0'','''
													   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ 
											   ''',0,0,0,0,0,0,''2'',1,''' +left(@TypeOfGoodsMD,1)+
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJHdr 
						--Tax / Seri Pajak Numbering

						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>left(@swTaxDoc,3)
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
														  +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
														  +@TaxCompany+ ''' and BranchCode=''' 
														  +@TaxBranch+ ''' and Year=''' 
														  +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
														  +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @sqlString, 
														N'@TaxSeq 		bigint  	output,
														  @TaxSeqNo 	int 		output', 
														  @TaxSeq 		output,
														  @TaxSeqNo 	output

								set @sqlString = N'select top 1 @TaxTransCode=TaxTransCode from ' 
														  +@TaxDb+ '..gnMstCoProfile where CompanyCode=''' 
														  +@TaxCompany + ''' and BranchCode=''' 
														  +@TaxBranch+ ''''
									execute sp_executesql @sqlString, 
														N'@TaxTransCode varchar(3) 	output', 
														  @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlString = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' 
														+@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlString 

								--set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
								--					+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
								--					+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								if len(convert(varchar,@TaxSeq))>8
									set @SeriPajakNo =  @TaxTransCode + '0.' + replicate('0', 3-(len(convert(varchar,@TaxSeq))-8)) +
														left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) +
														'-' +right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								else
									set @SeriPajakNo =  @TaxTransCode + '0.000-'+right(convert(varchar,year(@PostingDate)),2)+ '.'
														+replicate('0',8-len(convert(varchar,@TaxSeq)))+convert(varchar,@TaxSeq)
							end

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJHdr 
										(CompanyCode, BranchCode, FPJNo, FPJDate, TPTrans, FPJGovNo, FPJSignature, 
										 FPJCentralNo, FPJCentralDate, DeliveryNo, InvoiceNo, InvoiceDate, PickingSlipNo, 
										 PickingSlipDate, TransType, CustomerCode, CustomerCodeBill, CustomerCodeShip, 
										 TOPCode, TOPDays, DueDate, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, 
										 TotFinalSalesAmt, isPKP, Status, PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, 
										 LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''P'',''' +@SeriPajakNo+ ''','''
											       +convert(varchar,@curDocDate,121)+ ''',NULL,'''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''',''' 
												   +@INVNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@PLNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' 
												   +@TopCodeMD+ ''',''' +convert(varchar,@TopDaysMD)+ ''',''' 
												   +convert(varchar,@DueDateMD,121)+ ''',0,0,0,0,0,0,1,1,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJInfo
						set @sqlString = N'select @CustomerNameMD=CustomerGovName, @Address1MD=Address1, @Address2MD=Address2, ' +
												  '@Address3MD=Address3, @Address4MD=Address4, @isPKPMD=isPKP, @NPWPNoMD=NPWPNo, ' +
												  '@SKPNoMD=SKPNo, @SKPDateMD=SKPDate, @NPWPDateMD=NPWPDate from ' 
												  +@DBNameMD+ '..gnMstCustomer where CompanyCode=''' 
												  +@curCompanyMD+ ''' and CustomerCode=''' 
												  +@curBranchCode+ ''''
							execute sp_executesql @sqlString, 
												N'@CustomerNameMD 	varchar(100) output,
												  @Address1MD 		varchar(100) output,
												  @Address2MD 		varchar(100) output,
												  @Address3MD 		varchar(100) output,
												  @Address4MD 		varchar(100) output,
												  @isPKPMD 			bit 		 output,
												  @NPWPNoMD 		varchar(100) output,
												  @SKPNoMD 			varchar(100) output,
												  @SKPDateMD 		datetime 	 output,
												  @NPWPDateMD 		datetime     output', 
												  @CustomerNameMD 	output,
												  @Address1MD 		output,
												  @Address2MD 		output,
												  @Address3MD 		output,
												  @Address4MD 		output,
												  @isPKPMD 			output,
												  @NPWPNoMD 		output,
												  @SKPNoMD 			output,
												  @SKPDateMD 		output,
												  @NPWPDateMD 		output

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJInfo 
										(CompanyCode, BranchCode, FPJNo, CustomerName, Address1, Address2, 
										 Address3, Address4, isPKP, NPWPNo, SKPNo, SKPDate, NPWPDate, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +@CustomerNameMD+ ''',''' +@Address1MD+ ''',''' 
											   +@Address2MD+ ''',''' +@Address3MD+ ''',''' +@Address4MD+ 
											   ''',''' +@isPKPMD+ ''',''' +@NPWPNoMD+ ''',''' +@SKPNoMD+ 
											   ''',''' +convert(varchar,@SKPDateMD,121)+ ''',''' 
											   +convert(varchar,@NPWPDateMD,121)+ ''',''POSTING'',''' 
											   +convert(varchar,@PostingDate,121)+ ''',''POSTING'',''' 
											   +@currentDate+ ''')'
							execute sp_executesql @sqlString

					 -- SD : Insert data to table spTrnPBinnHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNL', @BINNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnHdr 
										(CompanyCode, BranchCode, BinningNo, BinningDate, ReceivingType, DNSupplierNo, DNSupplierDate, TransType, 
										 SupplierCode, ReferenceNo, ReferenceDate, TotItem, TotBinningAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''','''
												   +@FPJNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' 
												   +@curTypeOfGoods+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString
					
					 -- SD : Insert data to table spTrnPRcvHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'WRL', @WRSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvHdr 
										(CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate, ReceivingType, 
										 DNSupplierNo, DNSupplierDate, TransType, SupplierCode, ReferenceNo, ReferenceDate, 
										 TotItem, TotWRSAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' 
												   +@curCompanyMD+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- SD : Insert data to spTrnPHPP 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'HPP', @HPPNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNP', @APNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPHPP 
										(CompanyCode, BranchCode, HPPNo, HPPDate, WRSNo, WRSDate, ReferenceNo, ReferenceDate,
										 TotPurchAmt, TotNetPurchAmt, TotTaxAmt, TaxNo, TaxDate, MonthTax, YearTax, DueDate,
										 DiffNetPurchAmt, DiffTaxAmt, TotHppAmt, CostPrice, PrintSeq, TypeOfGoods, Status, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,0,''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,month(@curDocDate),121)+ ''',''' 
												   +convert(varchar,year(@curDocDate),121)+ ''',''' 
												   +convert(varchar,@DueDateMD,111)+ ''',0,0,0,0,1,''' 
												   +@curTypeOfGoods+ ''',2,''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''')'
							execute sp_executesql @sqlString
					end   

				set @SeqNo = @SeqNo + 1
			 -- SD: Insert data to table spTrnPPOSDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSDtl
										(CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, PurchasePrice, DiscPct,
										 PurchasePriceNett, CostPrice, TotalAmount, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, Note)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' +@curPartNo+ 
										  ''',' +convert(varchar,@SeqNo)+ ',' +convert(varchar,@curQty)+ 
										  ',' +convert(varchar,@curQtyOrder)+ ',' +convert(varchar,@curRetailPrice)+ 
										  ',' +convert(varchar,@curDiscPct)+ ',' +convert(varchar,@RetailPriceNet)+ 
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@TotPurchaseNetAmt)+ 
										  ',''' +@ABCClass+ ''',''' +@MovingCode+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curDocNo+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Insert data to table spTrnPOrderBalance
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPOrderBalance
										(CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
										 POSDate, OrderQty, OnOrder, Intransit, Received, Located, DiscPct, PurchasePrice, 
										 CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
											  +@curBranchMD+ ''',''' +@curPartNo+ ''',' +convert(varchar,@SeqNo)+ ','''
											  +@curPartNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','
											  +convert(varchar,@curQty)+ ',0,0,' +convert(varchar,@curQty)+ ','
											  +convert(varchar,@curQty)+ ',' +convert(varchar,@curDiscPct)+ ','
											  +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+ ','''
											  +@ABCClass+ ''',''' +@MovingCode+ ''',''' +@WRSNo+ ''',''' 
											  +convert(varchar,@curDocDate,121)+ ''',''' +@curTypeOfGoods+ ''',''' 
											  +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											  +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSORDDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDDtl
										(CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, 
										 ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, 
										 QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice,
										 CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, 
										 MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
										 StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +@curPartNo+ ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',0,0,0,'''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ ''','''
										  +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ ''','''
										  +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ ''','''
										  +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ ''','''
										  +@MovingCode+ ''',''' +left(@ABCClass,1)+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',5,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +convert(varchar,@curQtyOrder)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSOSupply 
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSOSupply
										(CompanyCode, BranchCode, DocNo, SupSeq, PartNo, PartNoOriginal, PTSeq, 
										 PickingSlipNo, ReferenceNo, ReferenceDate, WarehouseCode, LocationCode, 
										 QtySupply, QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, 
										 DiscPct, MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',0,''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +convert(varchar,@SeqNo)+ ''',''' +@PLNo+
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curCreatedDate,121)+
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +@MovingCode+ ''',''' +@ABCClass+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',2,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSORDHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSORDHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocNo=''' +@SONo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table spHstDemandItem 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandItem as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
						                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
			 --MD: Insert/Update data to table spHstDemandcust 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandcust as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curBranchCode+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.CustomerCode= SRC.NewCustomer
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, CustomerCode, PartNo, DemandFreq, DemandQty, SalesFreq, 
									    SalesQty, MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert Data to table spTrnSPickingDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingDtl
										(CompanyCode, BranchCode, PickingSlipNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, 
										 QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, 
										 SalesAmt, DiscAmt, NetSalesAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, 
										 PartCategory, ExPickingSlipNo, ExPickingSlipDate, isClosed, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQtyOrder)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@TotSalesAmt)+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ 
										  ''',NULL,NULL,0,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSPickingHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSPickingHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSInvoiceDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceDtl
										(CompanyCode, BranchCode, InvoiceNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, 
										 MovingCode, ABCClass, ExPickingListNo, ExPickingListDate, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',NULL,NULL,''' 
										          +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSInvoiceHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSInvoiceHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSFPJDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJDtl
										(CompanyCode, BranchCode, FPJNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, MovingCode, 
										 ABCClass, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSFPJHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSFPJHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''FAKTUR'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table arInterface
				set @sqlString = 'merge into ' +@DBNameMD+ '..arInterface as ar using ( values(''' 
								 +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
								 +convert(varchar,@curDocDate,121)+ ''',''300'',''' 
								 +convert(varchar,@TotSalesAmt)+ ''',0,''' 
								 +convert(varchar,@curBranchCode)+ ''',''' +@TopCodeMD+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',''INVOICE'',0,0,0,'''
								 +@SalesCodeMD+ ''',NULL,0,''POSTING'',''' 
								 +convert(varchar,@PostingDate,111)+ ''',''' 
								 +@AccNoArMD+ ''',NULL,''' +convert(varchar,@curDocDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
								NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
								NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate)
						on ar.CompanyCode = SRC.NewCompany
					   and ar.BranchCode  = SRC.NewBranch
					   and ar.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NettAmt = NettAmt + NewNettAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode, NettAmt, ReceiveAmt, 
										 CustomerCode, TOPCode, DueDate, TypeTrans, BlockAmt, DebetAmt, CreditAmt, SalesCode, 
										 LeasingCode, StatusFlag, CreateBy, CreateDate, AccountNo, FakturPajakNo, FakturPajakDate)
								values (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
										NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
										NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table glInterface
				-- glInterface - AR
				set @SeqNoGLMD = 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoArMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@TotSalesAmt)+ 
											   ''',0,''AR'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AR''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - SALES
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoSalesMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@SalesAmt)+ 
											   ''',''SALES'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''SALES''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX OUT
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoTaxOutMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@PPNAmt)+ 
											   ''',''TAX OUT'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX OUT''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - DISC1
				if isnull(@DiscFlag,0) = 1
				begin
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoDisc1MD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@DiscAmt)+ 
											   ''',0,''DISC1'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''DISC1''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
				end

				-- glInterface - COGS
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoCogsMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@CostAmt)+ 
											   ''',0,''COGS'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''COGS''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - INVENTORY
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoInventoryMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@CostAmt)+ 
											   ''',''INVENTORY'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table spTrnPBinnDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnDtl
										(CompanyCode, BranchCode, BinningNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPBinnHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPBinnHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotBinningAmt = TotBinningAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Insert data to table spTrnPRcvDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvDtl
										(CompanyCode, BranchCode, WRSNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPRcvHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPRcvHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotWRSAmt = TotWRSAmt + ' +convert(varchar,@TotPurchaseNetAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Update data to table spTrnPHPP
				set @sqlString = 'update ' +@DBName+ '..spTrnPHPP
								     set TotPurchAmt     = TotPurchAmt     + ' +convert(varchar,@TotPurchaseAmt)+ 
									  ', TotNetPurchAmt  = TotNetPurchAmt  + ' +convert(varchar,@TotPurchaseNetAmt)+ 
									  ', TotTaxAmt       = TotTaxAmt       + ' +convert(varchar,@TotTaxAmt)+ 
									  ', DiffNetPurchAmt = DiffNetPurchAmt   ' +
									  ', DiffTaxAmt      = DiffTaxAmt        ' +
									  ', TotHPPAmt       = TotHPPAmt       + ' +convert(varchar,@TotPurchaseAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and HPPNo=''' +@HPPNo + ''''
					execute sp_executesql @sqlString 

				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt

			 -- SD: Insert/Update data to table apInterface
				set @sqlString = 'merge into ' +@DBName+ '..apInterface as ap using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +@curProfitCenterCode+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +@WRSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''' +@curCompanyMD+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''' +@AccNoAP+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',NULL,0,0,''POSTING'','''
								 +convert(varchar,@PostingDate,111)+ ''',0,''' +@SeriPajakNo+ ''','''
								 +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
								NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
								NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo)
						on ap.CompanyCode = SRC.NewCompany
					   and ap.BranchCode  = SRC.NewBranch
					   and ap.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NetAmt = NetAmt + NewNetAmt
										 , PPNAmt = PPNAmt + NewPPNAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, ProfitCenterCode, DocDate, Reference, 
										ReferenceDate, NetAmt, PPHAmt, SupplierCode, PPNAmt, PPnBM, AccountNo, 
										TermsDate, TermsName, TotalAmt, StatusFlag, CreateBy, CreateDate, 
										ReceiveAmt, FakturPajakNo, FakturPajakDate, RefNo)
								values (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
										NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
										NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo);'
					execute sp_executesql @sqlString

			 -- SD: Insert/Update data to table glInterface
				-- glInterface - INVENTORY
				set @SeqNoGL = 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoInventory+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''INVENTORY'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX IN
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoTaxIn+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''TAX IN'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX IN''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - AP
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoAP+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',0,'''
								 +convert(varchar,@TotPurchaseAmt)+ ''',''AP'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AP''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table glJournal 
			 -- SD: Insert data to table glJournalDtl
				--select * from spTrnPRcvHdr where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPRcvDtl where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPHPP    where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from apInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and Reference in ('WRL/14/102818','WRL/14/102819') --DocNo='HPP/14/102793'
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and DocNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournal    where CompanyCode='6006400001' and BranchCode='6006400131' and ProfitCenterCode='300' order by JournalNo desc --and ReffNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournalDtl where CompanyCode='6006400001' and BranchCode='6006400131' and Description in ('HPP/14/102808','HPP/14/102815')
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and left(DocNo,3) in ('FPJ','HPP') order by BatchNo desc

			 -- Update Daily Posting Process Status
				update svSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and PartNo     =@curPartNo
					  and PartSeq    =@curPartSeq

			 -- Read next record
				fetch next from cursvSDMovement
					into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
						 @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
						 @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
						 @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table svSDMovement to table svHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[svHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[svHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[PartNo] [varchar](20) NOT NULL,
				[PartSeq] [int] NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[QtyOrder] [numeric](18, 2) NOT NULL,
				[Qty] [numeric](18, 2) NOT NULL,
				[DiscPct] [numeric](5, 2) NOT NULL,
				[CostPrice] [numeric](18, 2) NOT NULL,
				[RetailPrice] [numeric](18, 2) NOT NULL,
				[TypeOfGoods] [varchar](5) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[RetailPriceInclTaxMD] [numeric](18, 2) NOT NULL,
				[RetailPriceMD] [numeric](18, 2) NOT NULL,
				[CostPriceMD] [numeric](18, 2) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[ProductType] [varchar](15) NOT NULL,
				[ProfitCenterCode] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NULL,
				[LastUpdateDate] [datetime] NULL)

		insert into svHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  svSDMovement
							  where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		delete svSDMovement   where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		close cursvSDMovement
		deallocate cursvSDMovement
END
GO

if object_id('uspfn_GenerateBPSLampiranNew') is not null
	drop procedure uspfn_GenerateBPSLampiranNew
GO
CREATE procedure [dbo].[uspfn_GenerateBPSLampiranNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--DECLARE	@CompanyCode	VARCHAR(MAX),
--		@BranchCode		VARCHAR(MAX),
--		@JobOrderNo		VARCHAR(MAX),
--		@ProductType	VARCHAR(MAX),
--		@CustomerCode	VARCHAR(MAX),
--		@UserID			VARCHAR(MAX),
--		@PickedBy		VARCHAR(MAX)

--SET	@CompanyCode	= '6156401000'
--SET	@BranchCode		= '6156401001'
--SET	@JobOrderNo		= 'SPK/15/001666'
--SET	@ProductType	= '4W'
--SET	@CustomerCode	= '0032710'
--SET	@UserID			= 'ga'
--SET	@PickedBy		= '0004'
		
--exec uspfn_GenerateBPSLampiranNew '6006400001','6006400101','SPK/14/101625','4W','JKT-1852626','ga','00001'

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement

DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

  declare @PurchaseDisc as decimal
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = dbo.GetBranchMD(@CompanyCode,@BranchCode)
       and ProfitCenterCode = '300')  
         
   if (@PurchaseDisc = 0) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);   

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl

UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================
SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	

--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	DECLARE @CompanyMD AS VARCHAR(15)
	DECLARE @BranchMD AS VARCHAR(15)
	DECLARE @WarehouseMD AS VARCHAR(15)

	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @validString varchar(max)

declare @valid_2 table(
PartNo varchar(15),
QtyValidSR NUMERIC(18,2),
QtyValidOnhand NUMERIC(18,2)
)
    set @validString ='SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM '+ @DbMD +'..SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = '''+ @CompanyMD +'''
		AND a.BranchCode = '''+ @BranchMD+'''
		AND b.PickingSlipNo = '''+@PickingSlipNo+'''
		--AND a.CompanyCode = b.CompanyCode
		--AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo'
	
	--print(@validString)
	insert into @valid_2 exec(@validString)

select * from @valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM @valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM @valid_2 WHERE QtyValidOnhand < 0),0)
	select @Allocation_SRValid
	select @Onhand_SRValid

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		
		CLOSE db_cursor
		DEALLOCATE db_cursor 
		
		DROP TABLE #TempPickingSlipDtl
		DROP TABLE #TempPickingSlipHdr
		
		RAISERROR (@errmsg,16,1);
		
		RETURN
	END
--===============================================================================================================================

--DECLARE @DbMD AS VARCHAR(15)
--SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'UPDATE '+@DbMD+'..SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM ' + @DbMD + '..SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
UPDATE '+ @DbMD +'..SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
FROM ' + @DbMD + '..SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND a.WarehouseCode = ' + ''''+@WarehouseMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	--AND a.CompanyCode = b.CompanyCode
	--AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo'

EXEC(@query)
	--print(@query)
--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)

--===============================================================================================================================
-- INSERT INTO svSDMovement
--===============================================================================================================================
declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

 if(@md = 0)
 begin

	set @Query = '
	insert into ' + @DbMD + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq
	, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice
	, TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD
	, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus
	, ProcessDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)  
	select h.CompanyCode, h.BranchCode, h.LmpNo, h.LmpDate, d.PartNo, ROW_NUMBER() OVER(Order by d.LmpNo)
	,d.WarehouseCode, d.QtyBill, d.QtyBill, d.DiscPct, (d.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)), d.RetailPrice
	,h.TypeOfGoods, ''' + @CompanyMD + ''', ''' + @BranchMD + ''', ''' + @WarehouseMD + ''', d.RetailPriceInclTax, d.RetailPrice, 
	d.CostPrice,''x'', d.ProductType,''300'', ''0'',''0'',''' + convert(varchar, GETDATE()) + ''',''' + @UserID + ''',''' +
	  convert(varchar, GETDATE()) + ''',''' +  @UserID + ''',''' +  convert(varchar, GETDATE()) + '''
	 from spTrnSLmpDtl d inner join spTrnSLmpHdr h on h.LmpNo = d.LmpNo  
	  where 1 = 1   
		and d.CompanyCode = ''' + @CompanyCode + ''' 
		and d.BranchCode  = ''' + @BranchCode  + '''
		and d.ProductType = ''' + @ProductType  + '''
		and d.LmpNo = ''' + @TempLmpNo + '''';
	
	exec(@Query);
end

FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode


--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
end

--rollback tran
GO
if object_id('uspfn_GenerateSSPickingslipNew') is not null
	drop procedure uspfn_GenerateSSPickingslipNew
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001833'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '000003'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'


--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

select * from #srvorder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


select top 10 * from spTrnSORDDtl order by createddate desc
--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================

declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


if(@md = 0)
begin

 declare @QueryTemp as varchar(max)  
 declare @PurchaseDisc as decimal  

  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @BranchMD 
       and ProfitCenterCode = '300')  
         
  if (@PurchaseDisc = 0) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            

set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct,  (md.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)) , a.RetailPrice, b.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''', md.RetailPriceInclTax, md.RetailPrice, md.CostPrice
,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from spTrnSORDDtl a 
join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
and a.BranchCode = b.BranchCode 
and a.DocNo = b.DocNo
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ReferenceNo = '''+ @JobOrderNo +''''

exec (@Query)
--print (@QUERY)

end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO
if object_id('uspfn_gnCheckPostingStatus') is not null
	drop procedure uspfn_gnCheckPostingStatus
GO
CREATE PROCEDURE uspfn_gnCheckPostingStatus
AS
BEGIN
	declare @checklasttrans datetime, @retValue int, @tax int,
			@procStatus int,@retValue2 int, @prmValue varchar(20),
			@sql nvarchar(2000)	

	select @prmValue=ParamValue from sysParameter where paramid='SPSRV'
	
	declare @dbmd varchar(20)
	select top 1 @dbmd=dbmd from gnMstCompanyMapping

	set @tax = 1

	IF @prmValue='ON'
	BEGIN

		set @sql = 'SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM ' + @dbmd + '..[svSDMovement] with(nolock,nowait) order by docdate desc'

		exec sp_Executesql @sql, N'@checklasttrans datetime output, @procStatus int output', @checklasttrans output, @procStatus output
	
		IF (@checklasttrans IS NULL)
			set @retValue=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				select @retValue=0, @tax = 0
			ELSE
				set @retValue=1
		END
	END
	ELSE
		set @retValue=2

	SELECT @checklasttrans = NULL, @procStatus = 0

	select @prmValue=ParamValue from sysParameter where paramid='SLS'
	IF @prmValue='ON'
	BEGIN

		set @sql = 'SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM  ' + @dbmd + '..[omSDMovement] with(nolock,nowait) order by docdate desc'

		exec sp_Executesql @sql, N'@checklasttrans datetime output, @procStatus int output', @checklasttrans output, @procStatus output

		IF (@checklasttrans IS NULL)
			set @retValue2=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				BEGIN
					select @retValue2=0, @tax = 0	
					IF @retValue <> 2
						set @retValue=0
				END
			ELSE
				BEGIN
					set @retValue2=1
				END
		END
		
		IF @retValue2=1 and @retValue=0 
			set @retValue2=0
		
	END
	ELSE
		set @retValue2=1
		
	IF @retValue = 2
		set @retValue=1
		
	SELECT @retValue [SPSRV], @retValue2 [SALES], 
	(select top 1 replace(ParamDescription, char(13),'</BR>') from sysParameter where ParamId='POSTING_STATUS') INFO, 
	(select top 1 case when ISNULL(ParamValue,'OFF')='OFF' then 1 else @tax end from sysParameter where paramid='PAJAK') TAX

END
GO

--declare	@CompanyCode varchar(15)
--declare	@BranchCode  varchar(15)
--declare	@ProductType varchar(15)
--declare	@ServiceNo   int
--declare	@BillType    char(1)
--declare	@InvoiceNo   varchar(15)
--declare	@Remarks     varchar(max)
--declare	@UserID      varchar(15)

--set	@CompanyCode = '6159401000'
--set	@BranchCode  = '6159401001'
--set	@ProductType = '4W'
--set	@ServiceNo   = '53438'
--set	@BillType    = 'C'
--set	@InvoiceNo   = 'INC/15/002778'
--set	@Remarks     = 'REMARK 001'
--set	@UserID      = 'ws-s'


if object_id('uspfn_SvTrnInvoiceCreate') is not null
	drop procedure uspfn_SvTrnInvoiceCreate
GO
CREATE procedure [dbo].[uspfn_SvTrnInvoiceCreate]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   int,
	@BillType    char(1),
	@InvoiceNo   varchar(15),
	@Remarks     varchar(max),
	@UserID      varchar(15)
as  

declare @errmsg varchar(max)
--raiserror ('test error',16,1);

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)
DECLARE @DbMD AS VARCHAR(15)
declare @md bit

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

select BillType as BillType
              from svTrnSrvTask
             where CompanyCode = @companycode
               and BranchCode  = @branchcode
               and ProductType = @productType
               and ServiceNo   = @serviceno
            union
            select BillType as BillType
              from svTrnSrvItem b
             where CompanyCode = @companycode
               and BranchCode  = @branchcode
               and ProductType = @productType
               and ServiceNo   = @serviceno
               and  (SupplyQty - ReturnQty) > 0


-- get data from service
select * into #srv from(
  select * from svTrnService
   where 1 = 1
     and CompanyCode = @CompanyCode
     and BranchCode  = @BranchCode
     and ProductType = @ProductType
     and ServiceNo   = @ServiceNo
 )#srv

 select * from #srv
 select * from svTrnSrvItem where serviceno = @serviceno
 select * from svTrnSrvTask where serviceno = @serviceno

-- get data from task
select * into #tsk from(
  select a.* from svTrnSrvTask a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#tsk

 select * from #tsk

-- get data from item
select * into #mec from(
  select a.* from svTrnSrvMechanic a, #tsk b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.OperationNo = b.OperationNo
     and a.OperationNo <> ''
 )#mec

 select * from #mec

-- get data from item
select * into #itm from(
  select a.* from svTrnSrvItem a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#itm

-- create temporary table detail
create table #pre_dtl(
	BillType char(1),
	TaskPartType char(1),
	TaskPartNo varchar(20),
	TaskPartQty numeric(10,2),
	SupplySlipNo varchar(20)
)

insert into #pre_dtl
select BillType, 'L', OperationNo, OperationHour, ''
  from #tsk

insert into #pre_dtl
select BillType, TypeOfGoods, PartNo
	 , sum(SupplyQty - ReturnQty)
	 , SupplySlipNo
  from #itm
 where BillType = @BillType
   and (SupplyQty - ReturnQty) > 0
 group by BillType, TypeOfGoods, PartNo, SupplySlipNo

-- insert to table svTrnInvoice
declare @CustomerCode varchar(20)
if @BillType = 'C'
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end
else if @BillType = 'P'
begin
	set @CustomerCode = (select top 1 a.BillTo from svMstPackage a
				 inner join svMstPackageTask b
					on b.CompanyCode = a.CompanyCode
				   and b.PackageCode = a.PackageCode
				 inner join svMstPackageContract c
					on c.CompanyCode = a.CompanyCode
				   and c.PackageCode = a.PackageCode
				 inner join #srv d
					on d.CompanyCode = a.CompanyCode
				   and d.JobType = a.JobType
				   and d.ChassisCode = c.ChassisCode
				   and d.ChassisNo = c.ChassisNo)
end
else if @BillType in ('F', 'W', 'S')
begin
	set @CustomerCode = (select CustomerCode from svMstBillingType
				 where BillType in ('F', 'W', 'S')
				   and CompanyCode = @CompanyCode
				   and BillType = @BillType)
end
else
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end

--set @CustomerCode = isnull((
--				select top 1 a.BillTo from svMstPackage a
--				 inner join svMstPackageTask b
--					on b.CompanyCode = a.CompanyCode
--				   and b.PackageCode = a.PackageCode
--				 inner join svMstPackageContract c
--					on c.CompanyCode = a.CompanyCode
--				   and c.PackageCode = a.PackageCode
--				 inner join #srv d
--					on d.CompanyCode = a.CompanyCode
--				   and d.JobType = a.JobType
--				   and d.ChassisCode = c.ChassisCode
--				   and d.ChassisNo = c.ChassisNo
--				), isnull((
--				select CustomerCode from svMstBillingType
--				 where BillType in ('F')
--				   and CompanyCode = @CompanyCode
--				   and BillType = @BillType
--				), isnull((select CustomerCodeBill from #srv), '')))


if ((select count(*) from #tsk) = 0 and (select count(*) from #itm) = 0)
begin
	drop table #srv
	drop table #tsk
	drop table #mec
	drop table #itm
	drop table #pre_dtl
	return
end

if (@CustomerCode = '')
begin
	set @errmsg = N'Customer Code Bill belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

select * into #cus from (
select a.CompanyCode, a.IsPkp, b.CustomerCode, b.LaborDiscPct, b.PartDiscPct, b.MaterialDiscPct, b.TopCode, b.TaxCode
  from gnMstCustomer a, gnMstCustomerProfitCenter b
 where 1 = 1
   and b.CompanyCode  = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.CompanyCode  = @CompanyCode
   and b.BranchCode   = @BranchCode
   and b.CustomerCode = @CustomerCode
   and b.ProfitCenterCode = '200'
)#cus

if (select count(*) from #cus) <> 1
begin
	set @errmsg = N'Customer ProfitCenter belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

declare @IsPKP bit
    set @IsPKP = isnull((
				 select IsPKP from gnMstCustomer
				  where CompanyCode  = @CompanyCode
				    and CustomerCode = @CustomerCode
				  ), 0)

declare @PPnPct decimal
    set @PPnPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPN'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)

declare @PPhPct decimal
    set @PPhPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPH'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)


-- Insert Into svTrnInvoice
-----------------------------------------------------------------------------------------
insert into svTrnInvoice(
  CompanyCode, BranchCode, ProductType
, InvoiceNo, InvoiceDate, InvoiceStatus
, FPJNo, FPJDate, JobOrderNo, JobOrderDate, JobType
, ServiceRequestDesc, ChassisCode, ChassisNo, EngineCode, EngineNo
, PoliceRegNo, BasicModel, CustomerCode, CustomerCodeBill, Odometer
, IsPKP, TOPCode, TOPDays, DueDate, SignedDate
, LaborDiscPct, PartsDiscPct, MaterialDiscPct, PphPct, PpnPct, Remarks
, PrintSeq, PostingFlag, IsLocked, CreatedBy, CreatedDate
) 
select
  @CompanyCode CompanyCode
, @BranchCode BranchCode
, @ProductType ProductType
, @InvoiceNo InvoiceNo
, getdate() InvoiceDate
, case @IsPKP
	when '0' then '1'
	else (case @BillType when 'F' then '0' when 'W' then '0' else '1' end)
  end as InvoiceStatus
, '' FPJNo
, null FPJDate
, (select JobOrderNo from #srv) JobOrderNo
, (select JobOrderDate from #srv) JobOrderDate
, (select JobType from #srv) JobType
, (select ServiceRequestDesc from #srv) ServiceRequestDesc
, (select ChassisCode from #srv) ChassisCode
, (select ChassisNo from #srv) ChassisNo
, (select EngineCode from #srv) EngineCode
, (select EngineNo from #srv) EngineNo
, (select PoliceRegNo from #srv) PoliceRegNo
, (select BasicModel from #srv) BasicModel
, (select CustomerCode from #srv) CustomerCode
, @CustomerCode as CustomerCodeBill
, (select Odometer from #srv) Odometer
, (select IsPKP from #cus) as IsPKP
, (select TopCode from #cus) as TOPCode
, isnull((
	select b.ParaValue
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue = a.TopCode
	), null) as TOPDays
, isnull((
	select dateadd(day, convert(int,b.ParaValue), convert(varchar, getdate(), 112))
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue  = a.TopCode
	), null) as DueDate
, convert(varchar, getdate(), 112) SignedDate
, case @BillType
	when 'F' then (select LaborDiscPct from #cus) 
    when 'W' then (select LaborDiscPct from #cus) 
    else (select LaborDiscPct from #srv) 
  end as LaborDiscPct
, case @BillType
	when 'F' then (select PartDiscPct from #cus) 
    when 'W' then (select PartDiscPct from #cus) 
    else (select PartDiscPct from #srv) 
  end as PartsDiscPct
, case @BillType
	when 'F' then (select MaterialDiscPct from #cus) 
    when 'W' then (select MaterialDiscPct from #cus) 
    else (select MaterialDiscPct from #srv) 
  end as MaterialDiscPct
, @PPnPct as PPhPct
, @PPnPct as PPnPct
, @Remarks as Remarks
, '0' PrintSeq
, '0' PostingFlag
, '0' IsLocked
, @UserID CreatedBy
, getdate() CreatedDate

-- Insert Into svTrnInvTask
-----------------------------------------------------------------------------------------
insert into svTrnInvTask (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, OperationHour, ClaimHour, OperationCost, SubConPrice
, IsSubCon, SharingTask, DiscPct
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, isnull(OperationHour, 0) OperationHour, isnull(ClaimHour, 0) ClaimHour
, isnull(OperationCost, 0) OperationCost, isnull(SubConPrice, 0) SubConPrice
, isnull(IsSubCon, 0) IsSubCon, isnull(SharingTask, 0) SharingTask
, isnull(DiscPct, 0)
from #tsk

-- Insert Into svTrnInvMechanic
-----------------------------------------------------------------------------------------
insert into svTrnInvMechanic (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
from #mec

-- Insert Into svTrnInvItem
-----------------------------------------------------------------------------------------
Declare @Query varchar(max)

set @Query = 'select * into #itm1 from (
select CompanyCode, BranchCode, ProductType, '''+ @InvoiceNo +''' as InvoiceNo, PartNo
	 , isnull((
		select MovingCode from '+ @DbMD +'..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '''') as MovingCode
	 , isnull((
		select ABCClass from '+ @DbMD +' ..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '''') as ABCClass
	 , sum(SupplyQty - ReturnQty) as SupplyQty
	 , isnull((
		select 
		  case (sum(b.SupplyQty - b.ReturnQty))
			 when 0 then 0
			 else sum(a.CostPrice * (b.SupplyQty - b.ReturnQty)) / sum(b.SupplyQty - b.ReturnQty)
		  end 
	from SpTrnSLmpDtl a
	left join SvTrnSrvItem b on 1 = 1
	 and b.CompanyCode  = a.CompanyCode
	 and b.BranchCode   = a.BranchCode
	 and b.ProductType  = a.ProductType
	 and b.SupplySlipNo = a.DocNo
	 and b.PartNo = #itm.PartNo
	where 1 = 1
	 and a.CompanyCode = '''+ @CompanyCode +'''
	 and a.BranchCode  = '''+ @BranchCode +'''
	 and a.ProductType = '''+ @ProductType +'''
	 and a.PartNo = #itm.PartNo
	 and a.DocNo in (
			select SupplySlipNo
			 from SvTrnSrvItem
			where 1 = 1
			  and CompanyCode = '''+ @CompanyCode +'''
			  and BranchCode  = '''+ @BranchCode +'''
			  and ProductType = '''+ @ProductType +'''
			  and ServiceNo = '''+ Convert(varchar,@ServiceNo) +'''
			  and PartNo = #itm.PartNo
			)
	), 0) as CostPrice
, RetailPrice
, TypeOfGoods
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, RetailPrice, TypeOfGoods
)#

insert into svTrnInvItem (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo
, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice
, TypeOfGoods, DiscPct
)
select a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo
	 , MovingCode = (select top 1 MovingCode from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , ABCClass = (select top 1 ABCClass from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , sum(SupplyQty) as SupplyQty, 0 as ReturnQty
	 , CostPrice = (select top 1 CostPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by CostPrice desc)
	 , RetailPrice = (select top 1 RetailPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by RetailPrice desc)
	 , TypeOfGoods = (select top 1 TypeOfGoods from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , DiscPct = (select top 1 DiscPct from #itm where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
  from #itm1 a
 where a.SupplyQty > 0
 group by a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo'

 exec(@Query)

-- Insert Into svTrnInvItemDtl
-----------------------------------------------------------------------------------------
insert into svTrnInvItemDtl (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, SupplySlipNo
, SupplyQty, CostPrice, CreatedBy, CreatedDate
)
select y.* from (
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, PartNo, SupplySlipNo
, sum(SupplyQty - ReturnQty) as SupplyQty, CostPrice
, @UserID as CreatedBy, getdate() as CreatedDate
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, SupplySlipNo, CostPrice
) y
where y.SupplyQty > 0

-- Re Calculate Invoice

-----------------------------------------------------------------------------------------
exec uspfn_SvTrnInvoiceReCalculate @CompanyCode=@CompanyCode, @BranchCode=@BranchCode, @ProductType=@ProductType, @InvoiceNo=@InvoiceNo, @UserId=@UserId
-- Insert svsdmovement
-----------------------------------------------------------------------------------------

 if(@md = 0)
 begin

 set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, '''+ convert(varchar,@InvoiceNo) +''','''+ convert(varchar,GETDATE()) +''', a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ServiceNo order by a.ServiceNo)) ,
''00'', a.DemandQty, a.DemandQty, a.DiscPct, a.CostPrice, a.RetailPrice, a.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
,''x'','''+ @producttype +''',''300'',''8'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from svTrnSrvItem a 
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ServiceNo = '''+ convert(varchar,@ServiceNo) +''''

exec (@Query)

end

drop table #srv
drop table #tsk
drop table #mec
drop table #itm
drop table #cus

drop table #pre_dtl
--rollback tran

GO
if object_id('uspfn_SvTrnJobOrderCancel') is not null
	drop procedure uspfn_SvTrnJobOrderCancel
GO
CREATE procedure [dbo].[uspfn_SvTrnJobOrderCancel]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@UserID varchar(15)
as      

declare @errmsg varchar(max)

declare @ServiceStatus varchar(10)
    set @ServiceStatus = isnull((
						 select ServiceStatus
						   from svTrnService
						  where 1 = 1
						    and CompanyCode = @CompanyCode
						    and BranchCode  = @BranchCode
						    and ProductType = @ProductType
						    and ServiceNo   = @ServiceNo
						 ),0)

if (@ServiceStatus >= '5') 
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'SPK ini sudah tidak dapat di cancel lagi karena status sudah berubah.'
				+ char(13) + 'Status SPK Terakhir = ' + @ServiceStatus + ', tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

-- cek Supply - Return Part
if (select count(*) from svtrnsrvitem where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ProductType = @ProductType
		and ServiceNo = @ServiceNo and SupplyQty-ReturnQty > 0 ) > 0
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'SPK ini tidak dapat di cancel. Disebabkan part harus di return semua !'
				+ char(13) + 'Lakukan return Sparepart dahulu, Terima kasih.'
	raiserror (@errmsg,16,1);
	return
end


begin try
	update svTrnService
	   set ServiceStatus  = '6'
          ,LastUpdateBy  = @UserID
          ,LastUpdateDate= getdate()
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo = @ServiceNo
	
	declare @CompanyMD as varchar(15)
	declare @BranchMD as varchar(15)

	set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

	if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
	begin	

	declare @Query varchar(max)
	declare @DbMD varchar(max)

	set @DbMD = dbo.GetDbMD(@CompanyCode, @BranchCode)

	set @Query = 'update '+ @DbMD +'..svSDMovement
	   set Status  = ''6''
          ,LastUpdateBy  = '''+ @UserID +'''
          ,LastUpdateDate= '''+convert(varchar,getdate())+'''
	 where 1 = 1
	   and CompanyCode = '''+ @CompanyCode +'''
	   and BranchCode = '''+ @BranchCode +'''	  
	   and DocNo = (select JobOrderNo from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo) +')'
	
	exec(@Query);

	end
end try
begin catch
	set @errmsg = N'tidak dapat konversi ke SPK pada ServiceNo = '
				+ convert(varchar,@ServiceNo)
				+ char(13) + error_message()
	raiserror (@errmsg,16,1);
end catch
GO
if object_id('uspfn_SvTrnServiceDeleteDtl') is not null
	drop procedure uspfn_SvTrnServiceDeleteDtl
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceDeleteDtl]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@TaskPartType varchar(15),
	@TaskPartNo varchar(50),
	@PartSeq numeric(4,0)
as      
--begin tran
--declare	@CompanyCode as varchar(15)
--declare	@BranchCode as varchar(15)
--declare	@ProductType as varchar(15)
--declare	@ServiceNo as bigint
--declare	@TaskPartType as varchar(15)
--declare	@TaskPartNo as varchar(20)
--declare	@PartSeq as numeric(4,0)

--set	@CompanyCode = '6159401000'
--set	@BranchCode = '6159401001'
--set	@ProductType = '4W'
--set	@ServiceNo = '52727'
--set	@TaskPartType = 'L'
--set	@TaskPartNo = 'FSC 40000'
--set	@PartSeq = '0'

declare @errmsg varchar(max)
declare @reccount int;

declare @CompanyMD as varchar(15)
declare @BranchMD as varchar(15)

declare @Query varchar(max)
declare @DbMD varchar(max)

set @DbMD = dbo.GetDbMD(@CompanyCode, @BranchCode) 

if @TaskPartType = 'L'
begin
	if ((isnull((select count(*) from svTrnSrvTask
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo   = @ServiceNo),0)) > 1)
	begin
		delete svTrnSrvTask
		 where 1 = 1
		   and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = @ProductType
		   and ServiceNo   = @ServiceNo
		   and OperationNo = @TaskPartNo
	end
	else 
	begin
		--  add validation here to delete task
		set @reccount = isnull((
				select count(b.PartNo) from spTrnSORDHdr a, spTrnSORDDtl b
				 where 1 = 1
				   and a.CompanyCode = b.CompanyCode
				   and a.BranchCode  = b.BranchCode
				   and a.DocNo       = b.DocNo
				   and a.SalesType   = '2'
				   and a.Status     <> '3' 
				   and a.UsageDocNo  = isnull((
										select JobOrderNo from svTrnService
 										 where 1 = 1
										   and CompanyCode = @CompanyCode
										   and BranchCode  = @BranchCode
										   and ProductType = @ProductType
										   and ServiceNo   = @ServiceNo											
										),'')
					and a.CompanyCode = @CompanyCode
					and a.BranchCode  = @BranchCode
				),0)
		if (@reccount > 0) 
		begin
			set @errmsg = N'Task sudah tidak dapat dihapus karena terdapat Supply Slip sudah diproses'
						+ char(13) + 'Tolong di check lagi'
						+ char(13) + 'Terima kasih'
			raiserror (@errmsg,16,1);
			return
		end

		-- delete task
		delete svTrnSrvTask
		 where 1 = 1
		   and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = @ProductType
		   and ServiceNo   = @ServiceNo
		   and OperationNo = @TaskPartNo
		-- delete all item in spk
		delete svTrnSrvItem
		 where 1 = 1
		   and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = @ProductType
		   and ServiceNo   = @ServiceNo
	
		set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
		set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

		if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
		begin	   
			set @Query = 'delete '+ @DbMD +'..svSDMovement
    		 where 1 = 1
			   and CompanyCode = '''+ @CompanyCode +'''
			   and BranchCode  = '''+ @BranchCode +'''
			   and DocNo	   = (select JobOrderNo from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode  = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo)  +')'
		exec(@Query)
		end
	end
end
else
begin
    set @reccount = isnull((
			select count(b.PartNo) from spTrnSORDHdr a, spTrnSORDDtl b
			 where 1 = 1
			   and a.CompanyCode = b.CompanyCode
			   and a.BranchCode  = b.BranchCode
			   and a.DocNo       = b.DocNo
			   and a.SalesType   = '2'
			   and a.Status     <> '3' 
			   and a.UsageDocNo  = isnull((
									select JobOrderNo from svTrnService
 									 where 1 = 1
									   and CompanyCode = @CompanyCode
									   and BranchCode  = @BranchCode
									   and ProductType = @ProductType
									   and ServiceNo   = @ServiceNo
									),'')
			  and b.PartNo      = @TaskPartNo
			   and a.CompanyCode = @CompanyCode
			   and a.BranchCode  = @BranchCode
			),0)

	declare @npartss int, @npartot int;
	set @npartot = isnull((
			select count(*) from svTrnSrvItem
			 where 1 = 1
			   and CompanyCode = @CompanyCode
			   and BranchCode  = @BranchCode
			   and ProductType = @ProductType
			   and ServiceNo   = @ServiceNo
			   and PartNo      = @TaskPartNo
			   and PartSeq     = @PartSeq
			   and isnull(SupplySlipNo, '') = ''
			), 0)
	set @npartss = isnull((
			select count(*) from svTrnSrvItem
			 where 1 = 1
			   and CompanyCode = @CompanyCode
			   and BranchCode  = @BranchCode
			   and ProductType = @ProductType
			   and ServiceNo   = @ServiceNo
			   and PartNo      = @TaskPartNo
			   and isnull(SupplySlipNo, '') <> ''
			), 0)

	if ((@reccount > 0 and @npartot <> 1 and @npartss > 0)
	 or (@reccount > 0 and @npartot  = 1 and @npartss = 0))
	begin
		set @errmsg = N'Part sudah tidak dapat dihapus karena Supply Slip sudah diproses'
					+ char(13) + 'Tolong di check lagi'
					+ char(13) + 'Terima kasih'
					+ char(13) + ''
					+ char(13) + 'Jml Part' + convert(varchar, @npartot)
					+ char(13) + 'Jml Supply Slip' + convert(varchar, @npartss)
		raiserror (@errmsg,16,1);
		return
	end

	delete svTrnSrvItem
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo   = @ServiceNo
	   and PartNo      = @TaskPartNo
	   and PartSeq     = @PartSeq
	
	set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

	if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
	begin	 
	set @Query =' 
	delete '+ @DbMD +'..svSDMovement
	 where 1 = 1
	   and CompanyCode = '''+ @CompanyCode +'''
	   and BranchCode  = '''+ @BranchCode +'''
	   and DocNo	   = (select JobOrderNo from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode  = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo)  +')
	   and PartNo      = '''+ convert(varchar,@TaskPartNo) +'''
	   and PartSeq     = '+ convert(varchar,@PartSeq)

	   exec(@Query)
	end	   
end

exec uspfn_SvTrnServiceReCalculate @CompanyCode,@BranchCode,@ProductType,@ServiceNo,0
--rollback tran
GO
if object_id('uspfn_SvTrnInvoiceCancel') is not null
	drop procedure uspfn_SvTrnInvoiceCancel
GO
CREATE procedure [dbo].[uspfn_SvTrnInvoiceCancel]
	@CompanyCode   varchar(20),
	@BranchCode    varchar(20),
	@InvoiceNo     varchar(20),
	@UserInfo      varchar(max)
as  

declare @errmsg varchar(max)
declare @JobOrderNo varchar(20) 

begin try
set nocount on
	set @JobOrderNo = (Select JobOrderNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo = @InvoiceNo)
	
	if exists (
	select * from ArInterface
	 where CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and (StatusFlag > '0' or ReceiveAmt > 0 or BlockAmt > 0 or DebetAmt > 0 or CreditAmt > 0)
	   and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	)
	begin
		raiserror('Invoice sudah ada proses Receiving, transaksi tidak bisa dilanjutkan',16 ,1 );
	end

	if exists (
	select * from svTrnFakturPajak
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and FPJNo in (select FPJNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	   and isnull(FPJGovNo, '') <> ''
	   and left(FPJGovNo, 3) <> 'SHN'
	)
	begin
		raiserror('Invoice sudah tergenerate Nomor Pajak Pemerintah, transaksi tidak bisa dilanjutkan',16 ,1 );
	end

	;with x as (
		select a.BranchCode, a.CustomerCode, a.SalesAmt, b.TotalSrvAmt
		  from gnTrnBankBook a, svTrnInvoice b
		 where 1 = 1
		   and b.CompanyCode = a.CompanyCode
		   and b.BranchCode = a.BranchCode
		   and b.CustomerCodeBill = a.CustomerCode
		   and a.ProfitCenterCode = '200'
		   and a.CompanyCode = @BranchCode
		   and a.BranchCode = @BranchCode
		   and b.JobOrderNo = @JobOrderNo
	)
	update x set SalesAmt = SalesAmt - TotalSrvAmt where SalesAmt > 0

	delete from glInterface 
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete from arInterface 
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	update svTrnService set ServiceStatus = 5, InvoiceNo = ''
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and JobOrderNo = @JobOrderNo

	delete svTrnFakturPajak
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and FPJNo in (select FPJNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	-------------------------------------------------------------------------------------------------------------------
	-- Insert into table log
	-------------------------------------------------------------------------------------------------------------------
	declare @TransID   uniqueidentifier; 
	declare @TransCode varchar(20);

	set @TransID = newid()
	set @TransCode = 'CANCEL INVOICE' 

	insert into svTrnInvoiceLog (
		TransID,TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,InvoiceDate,InvoiceStatus,
		FPJNo,FPJDate,JobOrderNo,JobOrderDate,JobType,ServiceRequestDesc,ChassisCode,ChassisNo,
		EngineCode,EngineNo,PoliceRegNo,BasicModel,CustomerCode,CustomerCodeBill,Odometer,
		IsPKP,TOPCode,TOPDays,DueDate,SignedDate,LaborDiscPct,PartsDiscPct,MaterialDiscPct,
		PphPct,PpnPct,LaborGrossAmt,PartsGrossAmt,MaterialGrossAmt,LaborDiscAmt,PartsDiscAmt,MaterialDiscAmt,
		LaborDppAmt,PartsDppAmt,MaterialDppAmt,TotalDppAmt,TotalPphAmt,TotalPpnAmt,TotalSrvAmt,
		Remarks,PrintSeq,PostingFlag,PostingDate,CreatedBy,CreatedDate
	) 
	select 
		@TransID, @TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,InvoiceDate,InvoiceStatus,
		FPJNo,FPJDate,JobOrderNo,JobOrderDate,JobType,left(ServiceRequestDesc, 200),ChassisCode,ChassisNo,
		EngineCode,EngineNo,PoliceRegNo,BasicModel,CustomerCode,CustomerCodeBill,Odometer,
		IsPKP,TOPCode,TOPDays,DueDate,SignedDate,LaborDiscPct,PartsDiscPct,MaterialDiscPct,
		PphPct,PpnPct,LaborGrossAmt,PartsGrossAmt,MaterialGrossAmt,LaborDiscAmt,PartsDiscAmt,MaterialDiscAmt,
		LaborDppAmt,PartsDppAmt,MaterialDppAmt,TotalDppAmt,TotalPphAmt,TotalPpnAmt,TotalSrvAmt,
		Remarks,PrintSeq,PostingFlag,PostingDate,@UserInfo,CreatedDate
	from svTrnInvoice
	 where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	insert into svTrnInvTaskLog(TransID,TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,OperationNo,OperationHour,ClaimHour,OperationCost,SubConPrice,IsSubCon,SharingTask)
	select @TransID,@TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,OperationNo,OperationHour,ClaimHour,OperationCost,SubConPrice,IsSubCon,SharingTask from svTrnInvTask 
	 where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	insert into svTrnInvItemLog(TransID,TransCode,CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods)
	select @TransID,@TransCode,CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods from svTrnInvItem
	 where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	delete svTrnInvItemDtl where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvItem where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvMechanic where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvTask where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	declare @CompanyMD as varchar(15)
	declare @BranchMD as varchar(15)

	set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

	if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
	begin
	declare @Query VARCHAR(MAX)
		
	set @Query ='update '+dbo.GetDbMD(@CompanyCode, @BranchCode)+'..svSDMovement 
		set Status = ''9'',
			LastUpdateBy = '''+ @UserInfo +''',
			LastUpdateDate = '''+ convert(varchar,getdate()) +'''
		where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +'''
		and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and JobOrderNo = '''+ @JobOrderNo +''')'	
	end
end try
begin catch
    set @errmsg = 'InvoiceNo : ' + @InvoiceNo + char(13) + 'Error Message:' + char(13) + error_message()
    raiserror (@errmsg,16,1);
end catch
GO
-- POSTING TRANSACTION MULTI COMPANY - SALES
-- -----------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- -----------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -----------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySales] '6006400001','2014/11/08','0'
-- -----------------------------------------------------------------------

ALTER procedure [dbo].[usprpt_PostingMultiCompanySales]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN

	  --declare @CompanyCode				varchar(15) = '6006400001'
	  --declare @PostingDate				datetime	= '2015/03/08'
	  --declare @Status						varchar(1)

  -- Check Tax/Seri Pajak online
		declare @TaxCompany				varchar(15)
		declare @TaxBranch				varchar(15)
		declare @TaxDB					varchar(50)
		declare @TaxTransCode			varchar(3)
		declare @swTaxBranch			varchar(15) = ''
		declare @swTaxDoc				varchar(15) = ''
		declare @TaxSeq					bigint
		declare @TaxSeqNo				int
		declare @SeriPajakNo			varchar(50) = ''
		declare @sqlString				nvarchar(max)

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			begin
				set @Status = '1'
				return
			end
		
		set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
									   +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
									   +@TaxCompany+ ''' and BranchCode=''' 
									   +@TaxBranch+ ''' and Year=''' 
									   +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
									   +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
			execute sp_executesql @sqlString, 
								N'@TaxSeq 		bigint  	output,
								  @TaxSeqNo 	int 		output', 
								  @TaxSeq 		output,
								  @TaxSeqNo 	output
		if isnull(@TaxSeq,0)=0 and isnull(@TaxSeqNo,0)=0
			begin
				set @Status = '1'
				return
			end
		set @TaxSeq   = isnull(@TaxSeq,0)
		set @TaxSeqNo = isnull(@TaxSeqNo,0)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode			varchar(15) --= '6006400001'
		declare @curBranchCode			varchar(15) --= '6006400131'
		declare @curDocNo				varchar(15)	--= 'IU131/14/100010'
		declare @curDocDate				datetime    --= '2015/03/08'
		declare @curSeq					int			
		declare @curSalesModelCode		varchar(20)	
		declare @curSalesModelYear		numeric(4,0)	
		declare @curChassisCode			varchar(15)	
		declare @curChassisNo			numeric(10,0) 
		declare @curEngineCode			varchar(15)	
		declare @curEngineNo			numeric(10,0) 
		declare @curColourCode			varchar(15)	
		declare @curWarehouseCode		varchar(15)	
		declare @curCustomerCode		varchar(15)	
		declare @curQtyFlag				char(1)		
		declare @curCompanyMD			varchar(15)
		declare @curBranchMD			varchar(15)	
		declare @curWarehouseMD			varchar(15)	
		declare @curStatus				char(1)		
		declare @curProcessStatus		char(1)		
		declare @curProcessDate			datetime		
		declare @curCreatedBy			varchar(15)	
		declare @curCreatedDate			datetime		
		declare @curLastUpdateBy		varchar(15)	
		declare @curLastUpdateDate		datetime

		declare @DBName					varchar(50)
		declare @DBNameMD				varchar(50)
		declare @CentralBranch			varchar(15)
		declare @PONo					varchar(15)
		declare @SONo					varchar(15)
		declare @DONo					varchar(15)
		declare @BPKNo					varchar(15)
		declare @INVNo					varchar(15)
		declare @BPUNo					varchar(15)
		declare @HPPNo					varchar(15)
		declare @RTPNo					varchar(15)
		declare @RTNNo					varchar(15) = ''
		declare @VTONo					varchar(15) = ''
		declare @VTINo					varchar(15) = ''
		declare @DueDate				datetime
		declare @SeqNo					integer

		declare @VehServiceBookNo		varchar(15)
		declare @VehKeyNo				varchar(15)
		declare @VehWH					varchar(15) = 'HLD'
		declare @VehCOGS				numeric(18,0)
		declare @VehCOGSOthers			numeric(18,0)
		declare @VehCOGSKaroseri		numeric(18,0)
		declare @VehPpnBmBuyPaid		numeric(18,0)
		declare @VehPpnBmBuy			numeric(18,0)
		declare @VehSalesNetAmt			numeric(18,0)
		declare @VehPpnBmSellPaid		numeric(18,0)
		declare @VehPpnBmSell			numeric(18,0)
		declare @VehWHMD				varchar(15)
		declare @VehFakturPolisiNo		varchar(15)
		declare @VehFakturPolisiDate	datetime
		declare @VehSONo				varchar(15)
		declare @VehDONo				varchar(15)
		declare @VehBPKNo				varchar(15)
		declare @VehINVNo				varchar(15)
		declare @VehREQNo				varchar(15)
		declare @VehRTNNo				varchar(15)
		declare @VehVTONo				varchar(15)
		declare @VehVTINo				varchar(15)
		declare @VehBPKDate				datetime
		declare @VehSuzukiDONo			varchar(15)
		declare @VehSuzukiDODate		datetime
		declare @VehSuzukiSJNo			varchar(15)
		declare @VehSuzukiSJDate		datetime

		declare @swCompanyCode			varchar(15)  = ' '
		declare @swBranchCode			varchar(15)  = ' '
		declare @swDocNo 				varchar(15)  = ' '
		declare @CurrentDate			varchar(100) = convert(varchar,getdate(),121)

		declare @RetailPriceIncludePPN	numeric(18,0) = 0
		declare @DiscPriceIncludePPN	numeric(18,0) = 0
		declare @NetSalesIncludePPN		numeric(18,0) = 0
		declare @RetailPriceExcludePPN	numeric(18,0) = 0
		declare @DiscPriceExcludePPN	numeric(18,0) = 0
		declare @NetSalesExcludePPN		numeric(18,0) = 0
		declare @PPNBeforeDisc			numeric(18,0) = 0
		declare @PPNAfterDisc			numeric(18,0) = 0
		declare @PPnBMPaid				numeric(18,0) = 0
		declare @EndUserName			varchar(100)
		declare @EndUserAddress1		varchar(100)
		declare @EndUserAddress2		varchar(100)
		declare @EndUserAddress3		varchar(100)
		declare @CityCode				varchar(15)
		declare @CustomerClass			varchar(15)
		declare @TopCode				varchar(15) 
		declare @GroupPriceCode			varchar(15)
		declare @SalesCode				varchar(15) 
		declare @SalesType				char(1)	
		declare @TopDays				integer
		declare @WHSD					varchar(15)

        declare curomSDMovement cursor for
			select sd.* 
			  from omSDMovement sd, gnMstDocument doc
             where sd.CompanyMD        =doc.CompanyCode
			   and sd.BranchMD         =doc.BranchCode
			   and doc.DocumentType    ='IVU' 
			   and doc.ProfitCenterCode='100'
			   and left(sd.DocNo,len(doc.DocumentPrefix))=doc.DocumentPrefix
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by sd.CompanyCode, sd.BranchCode, sd.DocNo, 
					  sd.SalesModelCode, sd.SalesModelYear, sd.ColourCode
		open curomSDMovement

		fetch next from curomSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
				   @curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
				   @curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
				   @curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
				   @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin

			 -- MD: Collect vehicle information from omMstVehicle (Main Dealer)
				set @sqlString = N'select @VehServiceBookNo=ServiceBookNo, @VehKeyNo=KeyNo, @VehCOGS=COGSUnit, 
								 @VehCOGSOthers=COGSOthers, @VehCOGSKaroseri=COGSKaroseri, @VehPpnBmBuyPaid=PpnBmBuyPaid, 
								 @VehPpnBmBuy=PpnBmBuy, @VehSalesNetAmt=SalesNetAmt, @VehPpnBmSellPaid=PpnBmSellPaid, 
								 @VehPpnBmSell=PpnBmSell, @VehWHMD=WarehouseCode, @VehFakturPolisiNo=FakturPolisiNo, 
								 @VehFakturPolisiDate=FakturPolisiDate, @VehSONo=SONo, @VehDONo=DONo, @VehBPKNo=BPKNo, 
								 @VehINVNo=InvoiceNo, @VehREQNo=ReqOutNo, @VehRTNNo=SOReturnNo, @VehVTONo=TransferOutNo, 
								 @VehVTINo=TransferInNo, @VehBPKDate=BPKDate, @VehSuzukiDONo=SuzukiDONo, 
								 @VehSuzukiDODate=SuzukiDODate, @VehSuzukiSJNo=SuzukiSJNo, 
								 @VehSuzukiSJDate=SuzukiSJDate from ' +@DBNameMD+ '..omMstVehicle where CompanyCode=''' 
								 +@curCompanyMD+ ''' and ChassisCode=''' +@curChassisCode+ 
								 ''' and ChassisNo=''' +convert(varchar,@curChassisNo)+ ''''
					execute sp_executesql @sqlString, 
							N'@VehServiceBookNo		varchar(15)		output,
							  @VehKeyNo				varchar(15)		output,
							  @VehCOGS				numeric(18,0)	output,
							  @VehCOGSOthers		numeric(18,0)	output,
							  @VehCOGSKaroseri		numeric(18,0)	output,
							  @VehPpnBmBuyPaid		numeric(18,0)	output,
							  @VehPpnBmBuy			numeric(18,0)	output,
							  @VehSalesNetAmt		numeric(18,0)	output,
							  @VehPpnBmSellPaid		numeric(18,0)	output, 
							  @VehPpnBmSell			numeric(18,0)	output,
							  @VehWHMD				varchar(15)		output,
							  @VehFakturPolisiNo	varchar(15)		output,
							  @VehFakturPolisiDate	datetime		output,
							  @VehSONo				varchar(15)		output,
							  @VehDONo				varchar(15)		output,
							  @VehBPKNo				varchar(15)		output,
							  @VehINVNo				varchar(15)		output,
							  @VehREQNo				varchar(15)		output,
							  @VehRTNNo				varchar(15)		output,
							  @VehVTONo				varchar(15)		output,
							  @VehVTINo				varchar(15)		output,
							  @VehBPKDate			datetime		output,
							  @VehSuzukiDONo		varchar(15)		output,
							  @VehSuzukiDODate		datetime		output,
							  @VehSuzukiSJNo		varchar(15)		output,
							  @VehSuzukiSJDate		datetime		output',
							  @VehServiceBookNo		output,  @VehKeyNo			output,
							  @VehCOGS				output,	 @VehCOGSOthers		output,
							  @VehCOGSKaroseri		output,	 @VehPpnBmBuyPaid	output,
							  @VehPpnBmBuy			output,  @VehSalesNetAmt	output,
							  @VehPpnBmSellPaid		output,  @VehPpnBmSell		output,
							  @VehWHMD				output,  @VehFakturPolisiNo	output,  
							  @VehFakturPolisiDate	output,  @VehSONo			output,  
							  @VehDONo				output,  @VehBPKNo			output,  
							  @VehINVNo				output,  @VehREQNo			output,
							  @VehRTNNo				output,  @VehVTONo			output,  
							  @VehVTINo				output,  @VehBPKDate		output,  
							  @VehSuzukiDONo		output,  @VehSuzukiDODate	output,  
							  @VehSuzukiSJNo		output,  @VehSuzukiSJDate	output

				set @VehServiceBookNo	 = isnull(@VehServiceBookNo,'')
				set @VehKeyNo			 = isnull(@VehKeyNo,'')
				set @VehCOGS			 = isnull(@VehCOGS,0)
				set @VehCOGSOthers		 = isnull(@VehCOGSOthers,0) 
				set @VehCOGSKaroseri	 = isnull(@VehCOGSKaroseri,0)
				set @VehPpnBmBuyPaid	 = isnull(@VehPpnBmBuyPaid,0)
				set @VehPpnBmBuy		 = isnull(@VehPpnBmBuy,0) 
				set @VehSalesNetAmt		 = isnull(@VehSalesNetAmt,0) 
				set @VehPpnBmSellPaid    = isnull(@VehPpnBmSellPaid,0)
				set @VehPpnBmSell		 = isnull(@VehPpnBmSell,0)
				set @VehWHMD			 = isnull(@VehWHMD,'')
				set @VehFakturPolisiNo	 = isnull(@VehFakturPolisiNo,'')
				set @VehFakturPolisiDate = isnull(@VehFakturPolisiDate,'1900/01/01')
				set @VehSONo			 = isnull(@VehSONo,'')
				set @VehDONo			 = isnull(@VehDONo,'') 
				set @VehBPKNo			 = isnull(@VehBPKNo,'')
				set @VehINVNo			 = isnull(@VehINVNo,'') 
				set @VehREQNo			 = isnull(@VehREQNo,'') 
				set @VehRTNNo			 = isnull(@VehRTNNo,'')
				set @VehVTONo			 = isnull(@VehVTONo,'') 
				set @VehVTINo			 = isnull(@VehVTINo,'') 
				set @VehBPKDate			 = isnull(@VehBPKDate,'1900/01/01')
				set @VehSuzukiDONo		 = isnull(@VehSuzukiDONo,'') 
				set @VehSuzukiDODate	 = isnull(@VehSuzukiDODate,'1900/01/01')
				set @VehSuzukiSJNo		 = isnull(@VehSuzukiSJNo,'')
				set @VehSuzukiSJDate	 = isnull(@VehSuzukiSJDate,'1900/01/01')

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0
		
					 -- MD Database & SD Database from gnMstCompanyMapping
						select @DBNameMD=DBMD, @DBName=DBName from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode

					 -- Centralize unit purchasing for SBT, SMG, SIT, SST dealer
						set @sqlString = N'select @CentralBranch=BranchCode from ' +@DBName+ '..gnMstOrganizationDtl ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and isBranch=''0'''
							execute sp_executesql @sqlString, 
									N'@CentralBranch varchar(15) output', @CentralBranch output

					 -- MD: Customer information in gnMstCustomer & gnMstCustomerProfitCenter
						set @sqlString = N'select @EndUserName=CustomerName, @EndUserAddress1=Address1, @EndUserAddress2=Address2, 
										 @EndUserAddress3=Address3, @CityCode=CityCode from ' 
										 +@DBNameMD+ '..gnMstCustomer where CompanyCode='''
										 +@curCompanyMD+ ''' and CustomerCode=''' +@CentralBranch+ ''''
							execute sp_executesql @sqlString, 
									N'@EndUserName		varchar(100) output,  @EndUserAddress1	varchar(100) output,
									  @EndUserAddress2	varchar(100) output,  @EndUserAddress3	varchar(100) output,
									  @CityCode			varchar(10)  output', 
									  @EndUserName		output, @EndUserAddress1	output, @EndUserAddress2 output, 
									  @EndUserAddress3	output, @CityCode           output

						set @sqlString = N'select @CustomerClass=CustomerClass, @TaxTransCode=TaxTransCode, @TopCode=TopCode, 
										 @GroupPriceCode=GroupPriceCode, @SalesCode=SalesCode, @SalesType=SalesType from ' 
										 +@DBNameMD+ '..gnMstCustomerProfitCenter where CompanyCode='''
										 +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode='''
										 +@CentralBranch+ ''' and ProfitCenterCode=''100'''
							execute sp_executesql @sqlString, 
									N'@CustomerClass	varchar(15) output,  @TaxTransCode		varchar(3)  output,
									  @TopCode			varchar(15) output,  @GroupPriceCode	varchar(15) output,
									  @SalesCode		varchar(15) output,  @SalesType		char(1)		output', 
									  @CustomerClass  output, @TaxTransCode output, @TopCode   output, 
									  @GroupPriceCode output, @SalesCode    output, @SalesType output

					 -- MD: Calculate Top of Days 
						set @sqlString = N'select @TopDays=ParaValue from ' +@DBNameMD+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' +@TopCode+ ''''
							execute sp_executesql @sqlString, N'@TopDays integer output', @TopDays output

						set @EndUserName     = isnull(@EndUserName,'')
						set @EndUserAddress1 = isnull(@EndUserAddress1,'')
						set @EndUserAddress2 = isnull(@EndUserAddress2,'')
						set @EndUserAddress3 = isnull(@EndUserAddress3,'')
						set @CityCode        = isnull(@CityCode,'')
						set @CustomerClass   = isnull(@CustomerClass,'')
						set @TaxTransCode    = isnull(@TaxTransCode,'')
						set @TopCode         = isnull(@TopCode,'')
						set @GroupPriceCode  = isnull(@GroupPriceCode,'')
						set @SalesCode       = isnull(@SalesCode,'')
						set @SalesType	  	 = isnull(@SalesType,'')
						set @SalesType		 = isnull(@TopDays,0)
						set @DueDate		 = dateadd(day,isnull(@TopDays,0),@curDocDate)

					 -- MD: Generate Sales Order No for MD
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'SOR', @SONo output

					 -- SD: Insert data to table omTrPurchasePO
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'PUR', @PONo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchasePO 
												(CompanyCode, BranchCode, PONo, PODate, RefferenceNo, RefferenceDate, SupplierCode, 
												 BillTo, ShipTo, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''' 
												   +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@curDocNo+ 
												   ''',''2'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesSO
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesSO 
												(CompanyCode, BranchCode, SONo, SODate, SalesType, RefferenceNo, RefferenceDate, CustomerCode, 
												 TOPCode, TOPDays, BillTo, ShipTo, ProspectNo, SKPKNo, Salesman, WareHouseCode, isLeasing, 
												 LeasingCo, GroupPriceCode, Insurance, PaymentType, PrePaymentAmt, PrePaymentDate, 
												 CommissionBy, CommissionAmt, PONo, ContractNo, RequestDate, Remark, Status, ApproveBy,
												 ApproveDate, RejectBy, RejectDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate, SalesCode, Installment, FinalPaymentDate, SalesCoordinator,
												 SalesHead, BranchManager)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''' +@SalesType+ ''',''' +@PONo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','''
												   +@CentralBranch+ ''',''' +@TopCode+ ''',''' +convert(varchar,@TopDays)+ ''',''' +@CentralBranch+ ''',''' 
												   +@curBranchCode+ ''',NULL,NULL,''POSTING'',''' +@VehWHMD+ ''',0,NULL,''' +@GroupPriceCode+
												   ''',NULL,NULL,0,NULL,NULL,0,''' +@PONo+ 
												   ''',NULL,NULL,NULL,2,''POSTING'',''' +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''POSTING'','''
												   +convert(varchar,@curDocDate,121)+ ''',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',0,NULL,NULL,''' +@SalesCode+ ''',0,NULL,''POSTING'',''POSTING'',''POSTING'')'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesDO
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'DOS', @DONo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesDO 
												(CompanyCode, BranchCode, DONo, DODate, SONo, CustomerCode, ShipTo,
												 WareHouseCode, Expedition, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@DONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ ''',''' 
												   +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@VehWHMD+ ''',NULL,'''
												   +@curDocNo+ ''',''2'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesBPK
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'BPK', @BPKNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesBPK 
												(CompanyCode, BranchCode, BPKNo, BPKDate, DONo, SONo, CustomerCode, 
												 ShipTo, WareHouseCode, Expedition, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@DONo+ ''',''' +@SONo+ 
												   ''',''' +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@VehWHMD+ ''',NULL,'''
												   +@curDocNo+ ''',''2'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesInvoice

						--Tax / Seri Pajak Numbering
						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>left(@swTaxDoc,3)
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlString, @params= N'@TaxSeq bigint output', @TaxSeq = @TaxSeq output

								set @sqlString = N'select top 1 @TaxSeqNo=SeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ '''and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlString, @params= N'@TaxSeqNo int output', @TaxSeqNo = @TaxSeqNo output

								set @sqlString = N'select top 1 @TaxTransCode=TaxTransCode from ' 
												+@TaxDb+ '..gnMstCoProfile where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch+ ''''
									execute sp_executesql @query=@sqlString, @params= N'@TaxTransCode varchar(3) output', @TaxTransCode = @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlString = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlString 

								--set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
								--					+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
								--					+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								if len(convert(varchar,@TaxSeq))>8
									set @SeriPajakNo =  @TaxTransCode + '0.' + replicate('0', 3-(len(convert(varchar,@TaxSeq))-8)) +
														left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) +
														'-' +right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								else
									set @SeriPajakNo =  @TaxTransCode + '0.000-'+right(convert(varchar,year(@PostingDate)),2)+ '.'
														+replicate('0',8-len(convert(varchar,@TaxSeq)))+convert(varchar,@TaxSeq)
							end

						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'IVU', @INVNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesInvoice 
												(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, SONo, CustomerCode, 
												 BillTo, FakturPajakNo, FakturPajakDate, DueDate, isStandard, Remark, 
												 Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
												   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ 
												   ''',''' +@CentralBranch+ ''','''  +@CentralBranch+ ''',''' 
												   +@SeriPajakNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,@DueDate)+ ''',1,''' +@curDocNo+ 
												   ''',''5'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesReturn, Transfer In, Transfer Out
					    --@RTNNo, @VTINo, @VTONo
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @RTNNo output
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @VTINo output
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @VTONo output

				     -- SD: Collect Warehouse Information from gnMstLookupDtl
						set @sqlString = N'select @WHSD=LookUpValue from ' +@DBName+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyCode+ ''' and CodeID=''MPWH'' and ParaValue=''' +@CentralBranch+ ''''
							execute sp_executesql @sqlString, N'@WHSD varchar(15) output', @WHSD output


					 -- SD: Insert data to table omTrPurchaseBPU  
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'BPU', @BPUNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseBPU
												(CompanyCode, BranchCode, PONo, BPUNo, BPUDate, SupplierCode, ShipTo, RefferenceDONo,
												 RefferenceDODate, RefferenceSJNo, RefferenceSJDate, WarehouseCode, Expedition, 
												 BPUType, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate, BPUSJDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ 
												   ''',''' +@BPUNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@curBranchMD+ ''',''' +@CentralBranch+ ''',''' +@DONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BPKNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WHSD+ ''','''
												   +@curBranchMD+ ''',''2'',''' +@curDocNo+ ''',''2'',''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL,''' +convert(varchar,@curDocDate,121)+ ''')' 
							execute sp_executesql @sqlString

					 -- SD: Insert data to table omTrPurchaseHPP
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'HPU', @HPPNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseHPP
												(CompanyCode, BranchCode, HPPNo, HPPDate, PONo, SupplierCode, BillTo, 
												 RefferenceInvoiceNo, RefferenceInvoiceDate, RefferenceFakturPajakNo,
												 RefferenceFakturPajakDate, DueDate, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@PONo+ ''',''' +@curBranchMD+ 
												   ''',''' +@CentralBranch+ ''',''' +@INVNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +convert(varchar,@DueDate)+ 
												   ''',NULL,''5'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)' 
							execute sp_executesql @sqlString
					end

				set @SeqNo = @SeqNo + 1
			 -- Collect Vehicle Price from omPriceListBranches
			    set @sqlString = N'select top 1 
										@RetailPriceIncludePPN = RetailPriceIncludePPN, 
										@DiscPriceIncludePPN   = DiscPriceIncludePPN,
										@NetSalesIncludePPN    = NetSalesIncludePPN, 
										@RetailPriceExcludePPN = RetailPriceExcludePPN,
										@DiscPriceExcludePPN   = DiscPriceExcludePPN, 
										@NetSalesExcludePPN    = NetSalesExcludePPN,
										@PPNBeforeDisc         = PPNBeforeDisc, 
										@PPNAfterDisc          = PPNAfterDisc, 
										@PPnBMPaid             = PPnBMPaid from '
										+@DBName+ '..omPriceListBranches where CompanyCode=''' +@curCompanyCode+ 
										''' and BranchCode=''' +@CentralBranch+ ''' and SupplierCode=''' +@curBranchMD+ 
										''' and GroupPrice=''D'' and SalesModelCode=''' +@curSalesModelCode+
										''' and SalesModelYear=''' +convert(varchar,@curSalesModelYear)+ 
										''' and EffectiveDate<='''+convert(varchar,@curDocDate,111)+ 
										''' and isStatus=1 order by EffectiveDate desc'
						execute sp_executesql @sqlString, 
								N'@RetailPriceIncludePPN numeric(18,0)	output, 
								  @DiscPriceIncludePPN numeric(18,0)	output,
								  @NetSalesIncludePPN numeric(18,0)		output, 
								  @RetailPriceExcludePPN numeric(18,0)	output, 
								  @DiscPriceExcludePPN numeric(18,0)	output, 
								  @NetSalesExcludePPN numeric(18,0)		output, 
								  @PPNBeforeDisc numeric(18,0)			output, 
								  @PPNAfterDisc numeric(18,0)			output,
								  @PPnBMPaid numeric(18,0)				output', 
								  @RetailPriceIncludePPN				output, 
								  @DiscPriceIncludePPN					output,
								  @NetSalesIncludePPN 					output, 
								  @RetailPriceExcludePPN				output, 
								  @DiscPriceExcludePPN					output, 
								  @NetSalesExcludePPN					output, 
								  @PPNBeforeDisc						output, 
								  @PPNAfterDisc							output,
								  @PPnBMPaid							output

				set @RetailPriceIncludePPN = isnull(@RetailPriceIncludePPN,0)
				set @DiscPriceIncludePPN   = isnull(@DiscPriceIncludePPN,0)
				set @NetSalesIncludePPN    = isnull(@NetSalesIncludePPN,0)
				set @RetailPriceExcludePPN = isnull(@RetailPriceExcludePPN,0)
				set @DiscPriceExcludePPN   = isnull(@DiscPriceExcludePPN,0)
				set @NetSalesExcludePPN	   = isnull(@NetSalesExcludePPN,0)
				set @PPNBeforeDisc		   = isnull(@PPNBeforeDisc,0)
				set @PPNAfterDisc		   = isnull(@PPNAfterDisc,0)
				set @PPnBMPaid			   = isnull(@PPnBMPaid,0)

			 -- SD: Insert data to table omTrPurchasePOModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchasePOModel as POM using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
									+convert(varchar,@RetailPriceExcludePPN)+ ''',''' +convert(varchar,@PPNBeforeDisc)+ 
									''',''0'',''' +convert(varchar,@RetailPriceIncludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' +convert(varchar,@DiscPriceIncludePPN)+
									''',''' +convert(varchar,@NetSalesExcludePPN)+ ''',''' +convert(varchar,@PPNAfterDisc)+
									''',''0'',''' +convert(varchar,@NetSalesIncludePPN)+ ''',''' +convert(varchar,@PPNBMPaid)+
									''',''0'',''0'',1,1,''' +@SONo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
								NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, NewBeforeDiscTotal, 
								NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, 
								NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, 
								NewOthersPPn, NewQuantityPO, NewQuantityBPU, NewRemark, NewCreatedBy, 
								NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on POM.CompanyCode    = SRC.NewCompany
					   and POM.BranchCode     = SRC.NewBranch
					   and POM.PONo           = SRC.NewPONo
					   and POM.SalesModelCode = SRC.NewSalesModelCode
					   and POM.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityPO     = QuantityPO  + SRC.NewQuantityPO
						                 , QuantityBPU    = QuantityBPU + SRC.NewQuantityBPU
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, SalesModelCode, SalesModelYear, 
										BeforeDiscDPP, BeforeDiscPPn, BeforeDiscPPnBM, BeforeDiscTotal, 
										DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, AfterDiscPPn, 
										AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, 
										OthersPPn, QuantityPO, QuantityBPU, Remark, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
										NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, NewBeforeDiscTotal, 
										NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, 
										NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, 
										NewOthersPPn, NewQuantityPO, NewQuantityBPU, NewRemark, NewCreatedBy, 
										NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchasePOModelColour
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchasePOModelColour as POC using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''' +@curColourCode+ ''',1,''' +@curDocNo+ ''','''+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
									''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, NewColourCode, 
								NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on POC.CompanyCode    = SRC.NewCompany
					   and POC.BranchCode     = SRC.NewBranch
					   and POC.PONo           = SRC.NewPONo
					   and POC.SalesModelCode = SRC.NewSalesModelCode
					   and POC.SalesModelYear = SRC.NewSalesModelYear
					   and POC.ColourCode     = SRC.NewColourCode
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, SalesModelCode, SalesModelYear, ColourCode, 
										Quantity, Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
										NewColourCode, NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModel as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
									+@curChassisCode+ ''','''+convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@PPNBeforeDisc)+ ''',''0'',''' 
									+convert(varchar,@RetailPriceIncludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceIncludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',''0'',''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''',''0'',''0'',1,1,''' 
									+@curDocNo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ ''',0,0,0))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
								NewChassisCode, NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, 
								NewBeforeDiscTotal, NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, 
								NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, NewOthersDPP, 
								NewOthersPPn, NewQuantitySO, NewQuantityDO, NewRemark, NewCreatedBy, 
								NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
								NewDepositAmt, NewOthersAmt)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantitySO     = QuantitySO + SRC.NewQuantitySO
						                 , QuantityDO     = QuantityDO + SRC.NewQuantityDO
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, 
										ChassisCode, BeforeDiscDPP, BeforeDiscPPn, BeforeDiscPPnBM, 
										BeforeDiscTotal, DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, 
										AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, OthersDPP, 
										OthersPPn, QuantitySO, QuantityDO, Remark, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate, ShipAmt, 
										DepositAmt, OthersAmt)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
										NewChassisCode, NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, 
										NewBeforeDiscTotal, NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, 
										NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, NewOthersDPP, 
										NewOthersPPn, NewQuantitySO, NewQuantityDO, NewRemark, NewCreatedBy, 
										NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
										NewDepositAmt, NewOthersAmt);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModelColour
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModelColour as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''' +@curColourCode+ ''',1,''' +@curDocNo+ ''','''+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
									''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, NewColourCode, 
								NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					   and SO.ColourCode     = SRC.NewColourCode
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, ColourCode, 
										Quantity, Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
										NewColourCode, NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOVin
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesSOVin
										(CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, 
									     ColourCode, SOSeq, ChassisCode, ChassisNo, EngineCode, EngineNo, 
										 ServiceBookNo, KeyNo, EndUserName, EndUserAddress1, EndUserAddress2, 
										 EndUserAddress3, SupplierBBN, CityCode, BBN, KIR, Remark, StatusReq, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
								         +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
										 ''',''' +@curColourCode+ ''',''' +Convert(varchar,@SeqNo)+ ''','''
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' +@EndUserName+ ''',''' 
										 +@EndUserAddress1+ ''',''' +@EndUserAddress2+ ''','''
										 +@EndUserAddress3+ ''',NULL,''' +@CityCode+ ''',0,0,NULL,0,''' 
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModelAdditional
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModelAdditional as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''A'',NULL,NULL,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, 
								NewSalesModelYear, NewStatusVehicle, NewOthersBrand, NewOthersType, 
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, 
										SalesModelYear, StatusVehicle, OthersBrand, OthersType, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, 
										NewSalesModelYear, NewStatusVehicle, NewOthersBrand, NewOthersType, 
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesDODetail
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesDODetail
										(CompanyCode, BranchCode, DONo, DOSeq, SalesModelCode, SalesModelYear, 
									     ChassisCode, ChassisNo, EngineCode, EngineNo, ColourCode, Remark, 
										 StatusBPK, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@DONo+ ''',''' 
								         +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curChassisCode+ 
										 ''',''' +convert(varchar,@curChassisNo)+ ''',''' +@curEngineCode+ 
										 ''',''' +convert(varchar,@curEngineNo)+ ''',''' +@curColourCode+ 
										 ''',NULL,''1'',''' +@curCreatedBy+ ''',''' 
										 +convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
										 ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesBPKModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesBPKModel as BPK using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,1,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewBPKNo, NewSalesModelCode, 
								NewSalesModelYear, NewQuantityBPK, NewQuantityInvoice,
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on BPK.CompanyCode    = SRC.NewCompany
					   and BPK.BranchCode     = SRC.NewBranch
					   and BPK.BPKNo           = SRC.NewBPKNo
					   and BPK.SalesModelCode = SRC.NewSalesModelCode
					   and BPK.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityBPK     = QuantityBPK     + SRC.NewQuantityBPK
						                 , QuantityInvoice = QuantityInvoice + SRC.NewQuantityInvoice
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, BPKNo, SalesModelCode, 
										SalesModelYear, QuantityBPK, QuantityInvoice, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewBPKNo, NewSalesModelCode, 
										NewSalesModelYear, NewQuantityBPK, NewQuantityInvoice,
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesBPKDetail
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesBPKDetail
										(CompanyCode, BranchCode, BPKNo, BPKSeq, SalesModelCode, SalesModelYear, 
									     ChassisCode, ChassisNo, EngineCode, EngineNo, ColourCode, ServiceBookNo,
										 KeyNo, ReqOutNo, Remark, StatusPDI, StatusInvoice, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
								         +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curChassisCode+ 
										 ''',''' +convert(varchar,@curChassisNo)+ ''',''' +@curEngineCode+ 
										 ''',''' +convert(varchar,@curEngineNo)+ ''',''' +@curColourCode+ 
										 ''',''' +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',NULL,NULL,''0'',''1'','''
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceBPK
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesInvoiceBPK as INV using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
									+@INVNo+ ''',''' +@BPKNo+ ''',NULL,''' 
									+@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
									+@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewRemark,
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on INV.CompanyCode    = SRC.NewCompany
					   and INV.BranchCode     = SRC.NewBranch
					   and INV.InvoiceNo      = SRC.NewInvoiceNo
					   and INV.BPKNo		  = SRC.NewBPKNo
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, InvoiceNo, BPKNo, Remark, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewRemark,
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesInvoiceModel as INV using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ ''',''' 
									+@BPKNo+ ''',''' +@curSalesModelCode+ ''',''' 
									+convert(varchar,@curSalesModelYear)+ ''',1,'''
									+convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceIncludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',''0'',''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''','''
									+convert(varchar,@PPNBMPaid) + ''',0,0,0,'''
									+@curDocNo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ ''',0,0,0))
					    as SRC (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewSalesModelCode, 
								NewSalesModelYear, NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, 
								NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, NewAfterDiscPPnBM, 
								NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn, 
								NewQuantityReturn, NewRemark, NewCreatedBy, NewCreatedDate, 
								NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
								NewDepositAmt, NewOthersAmt)
						on INV.CompanyCode    = SRC.NewCompany
					   and INV.BranchCode     = SRC.NewBranch
					   and INV.InvoiceNo      = SRC.NewInvoiceNo
					   and INV.BPKNo		  = SRC.NewBPKNo
					   and INV.SalesModelCode = SRC.NewSalesModelCode
					   and INV.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, SalesModelYear, 
										Quantity, BeforeDiscDPP,  DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, 
										AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, 
										OthersPPn, QuantityReturn, Remark, CreatedBy, CreatedDate, 
										LastUpdateBy, LastUpdateDate, ShipAmt, DepositAmt, OthersAmt)
								values (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewSalesModelCode, 
										NewSalesModelYear, NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, 
										NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, NewAfterDiscPPnBM, 
										NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn, 
										NewQuantityReturn, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
										NewDepositAmt, NewOthersAmt);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceVIN
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesInvoiceVIN
										(CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, 
										 SalesModelYear, InvoiceSeq, ColourCode, ChassisCode, ChassisNo,
										 EngineCode, EngineNo, COGS, IsReturn, CreatedBy, CreatedDate, 
										 LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ ''',''' +@BPKNo+ ''',''' 
										 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''  
										 +convert(varchar,@SeqNo)+ ''',''' +convert(varchar,@curColourCode)+ ''',''' 
										 +convert(varchar,@curChassisCode)+ ''',''' +convert(varchar,@curChassisNo)+ 
										 ''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +convert(varchar,@VehCOGS)+ ''',0,''' +@curCreatedBy+ ''',''' 
										 +convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
										 +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString


			 -- SD: Insert data to table omTrPurchaseBPUDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseBPUDetailModel as BPU using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@BPUNo+ ''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,1,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewBPUNo, NewSalesModelCode, NewSalesModelYear, NewQuantityBPU, 
								NewQuantityHPP, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on BPU.CompanyCode    = SRC.NewCompany
					   and BPU.BranchCode     = SRC.NewBranch
					   and BPU.PONo           = SRC.NewPONo
					   and BPU.BPUNo		  = SRC.NewBPUNo
					   and BPU.SalesModelCode = SRC.NewSalesModelCode
					   and BPU.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityBPU    = QuantityBPU + SRC.NewQuantityBPU
										 , QuantityHPP    = QuantityHPP + SRC.NewQuantityHPP
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, BPUNo, SalesModelCode, SalesModelYear, QuantityBPU, 
										QuantityHPP, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewBPUNo, NewSalesModelCode, NewSalesModelYear, NewQuantityBPU, 
										NewQuantityHPP, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
							
			 -- SD: Insert data to table omTrPurchaseBPUDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseBPUDetail 
										(CompanyCode, BranchCode, PONo, BPUNo, BPUSeq, SalesModelCode, SalesModelYear, ColourCode,
										 ChassisCode, ChassisNo, EngineCode, EngineNo, ServiceBookNo, KeyNo, Remark, StatusSJRel,
										 SJRelNo, SJRelDate, SJRelReff, SJRelReffDate, StatusDORel, DORelNo, DORelDate, StatusHPP,
										 isReturn, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' +@BPUNo+ ''','''
										 +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curColourCode+ ''','''
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
										 +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' +@curDocNo+ 
										 ''',0,NULL,NULL,NULL,NULL,0,NULL,NULL,1,0,'''
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+''')'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseHPPDetail
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseHPPDetail as HPP using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' 
									+@BPUNo+ ''',NULL,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewRemark, 
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on HPP.CompanyCode = SRC.NewCompany
					   and HPP.BranchCode  = SRC.NewBranch
					   and HPP.HPPNo       = SRC.NewHPPNo
					   and HPP.BPUNo	   = SRC.NewBPUNo
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, HPPNo, BPUNo, Remark,
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewRemark, 
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
							
			 -- SD: Insert data to table omTrPurchaseHPPDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseHPPDetailModel as HPP using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' +@BPUNo+ 
									''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,''' +convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',0,''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''',''' 
									+convert(varchar,@PPnBMPaid)+ ''',0,0,NULL,''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewSalesModelCode, NewSalesModelYear,
								NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, NewAfterDiscPPn,
								NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn,
								NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on HPP.CompanyCode    = SRC.NewCompany
					   and HPP.BranchCode     = SRC.NewBranch
					   and HPP.HPPNo          = SRC.NewHPPNo
					   and HPP.BPUNo	      = SRC.NewBPUNo
					   and HPP.SalesModelCode = SRC.NewSalesModelCode
					   and HPP.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set Quantity       = Quantity + 1
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, HPPNo, BPUNo, SalesModelCode, SalesModelYear,
										Quantity, BeforeDiscDPP, DiscExcludePPn, AfterDiscDPP, AfterDiscPPn,
										AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, OthersPPn,
										Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewSalesModelCode, NewSalesModelYear,
										NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, NewAfterDiscPPn,
										NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn,
										NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseHPPSubDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseHPPSubDetail
										(CompanyCode, BranchCode, HPPNo, BPUNo, HPPSeq, SalesModelCode, SalesModelYear,
										ColourCode, ChassisCode, ChassisNo, EngineCode, EngineNo, Remark, isReturn, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
										 +@BPUNo+ ''',''' +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +convert(varchar,@curColourCode)+ 
										 ''',''' +convert(varchar,@curChassisCode)+ ''',''' +convert(varchar,@curChassisNo)+ 
										 ''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',NULL,0,''' 
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' +
										 @curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

/*				
			 -- SD: Insert data to table omTrPurchaseReturn
			 -- SD: Insert data to table omTrPurchaseReturnDetail
			 -- SD: Insert data to table omTrPurchaseReturnDetailModel
			 -- SD: Insert data to table omTrPurchaseReturnSubDetail

			 -- MD: Insert data to table omTrSalesReturn
			 -- MD: Insert data to table omTrSalesReturnBPK
			 -- MD: Insert data to table omTrSalesReturnDetailModel
			 -- MD: Insert data to table omTrSalesReturnVIN

			USE POSTING JOURNAL IN UTILITY SALES MODULE 
			FOR UPDATE DATA TO TABLE ARINTERFACE & GLINTERFACE
			 -- MD: Update data to table arInterface
			 -- MD: Update data to table glInterface
			 -- SD: Update data to table apInterface
			 -- SD: Update data to table glInterface
*/

			 -- MD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBNameMD+ '..omMstVehicle
										set SONo='''+@SONo+ ''', SOReturnNo='''+@RTNNo+ ''', DONo='''+@DONo+ ''', BPKNo='''
											+@BPKNo+ ''', InvoiceNo='''+@INVNo+ ''', TransferOutNo='''+@VTONo+ 
											''', TransferInNo='''+@VTINo+ ''', BPKDate='''+convert(varchar,@curDocDate,121)+
									''' where CompanyCode='''+@curCompanyMD+''' and ChassisCode='''
											+@curChassisCode+ ''' and ChassisNo='+convert(varchar,@curChassisNo)
					execute sp_executesql @sqlString

			 -- SD: Insert / Update data to table omMstVehicle
				set @sqlString = 'merge into ' +@DBName+ '..omMstVehicle as VEH using (values(''' 
									+@curCompanyCode+ ''',''' +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ 
									''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
									+@curColourCode+ ''',''' +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' 
									+convert(varchar,@VehCOGS)+ ''',''' +convert(varchar,@VehCOGSOthers)+ ''',''' 
									+convert(varchar,@VehCOGSKaroseri)+ ''',''' +convert(varchar,@VehPpnBMBuyPaid)+ 
									''',''' +convert(varchar,@VehPpnBmBuy)+ ''',''' +convert(varchar,@VehSalesNetAmt)+ 
									''',''' +convert(varchar,@VehPpnBmSellPaid)+ ''',''' +convert(varchar,@VehPpnBmSell)+ 
									''',''' +@PONo+ ''',''' +@RTPNo+ ''',''' +@BPUNo+ ''',''' +@HPPNo+ ''',NULL,NULL,'''
									+@VehSONo+ ''',''' +@VehRTNNo+ ''',''' +@VehDONo+ ''',''' +@VehBPKNo+ ''','''
									+@VehINVNo+ ''',''' +@VehREQNo+ ''',''' +@VehVTONo+ 
									''',''' +@VehVTINo+ ''',''' +@WHSD+ ''',''' +@VehINVNo+ ''',''6'',0,''' 
									+convert(varchar,@curDocDate,121)+ ''',''' +@vEHFakturPolisiNo+ ''','''
									+convert(varchar,@VehFakturPolisiDate,121)+ ''',NULL,NULL,1,0,1,'''
									+@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+
									''',0,NULL,NULL,0,''' +convert(varchar,@curDocDate,121)+ ''','''
									+@VehSuzukiDONo+ ''',''' +convert(varchar,@VehSuzukiDODate,121)+ ''','''
									+@VehSuzukiSJNo+ ''',''' +convert(varchar,@VehSuzukiSJDate,121)+ ''',NULL,NULL))
					    as SRC (NewCompany, NewChassisCode, NewChassisNo, NewEngineCode, NewEngineNo, 
								NewSalesModelCode, NewSalesModelYear, NewColourCode, NewServiceBookNo, 
								NewKeyNo, NewCOGSUnit, NewCOGSOthers, NewCOGSKaroseri, NewPpnBMBuyPaid, 
								NewPpnBmBuy, NewSalesNetAmt, NewPpnBmSellPaid, NewPpnBmSell, NewPONo, 
								NewPOReturnNo, NewBPUNo, NewHPPNo, NewKaroseriSPKNo, NewKaroseriTerimaNo, 
								NewSONo, NewSOReturnNo, NewDONo, NewBPKNo, NewInvoiceNo, NewReqOutNo, 
								NewTransferOutNo, NewTransferInNo, NewWarehouseCode, NewRemark, NewStatus, 
								NewIsAlreadyPDI, NewBPKDate, NewFakturPolisiNo, NewFakturPolisiDate, 
								NewPoliceRegistrationNo, NewPoliceRegistrationDate, NewIsProfitCenterSales, 
								NewIsProfitCenterService, NewIsActive, NewCreatedBy, NewCreatedDate, 
								NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate, 
								NewIsNonRegister, NewBPUDate, NewSuzukiDONo, NewSuzukiDODate, NewSuzukiSJNo, 
								NewSuzukiSJDate, NewTransferOutMultiBranchNo, NewTransferInMultiBranchNo)
						on VEH.CompanyCode = SRC.NewCompany
					   and VEH.ChassisCode = SRC.NewChassisCode
					   and VEH.ChassisNo   = SRC.NewChassisNo
					  when matched
						   then update set PONO				= isnull(@PONo,'')
										 , POReturnNo		= isnull(@RTPNo,'')
										 , BPUNo			= isnull(@BPUNo,'')
										 , HPPNo			= isnull(@HPPNo,'')
										 , SONo             = isnull(@VehSONo,'')
										 , SOReturnNo       = isnull(@VehRTNNo,'')
										 , DONo		        = isnull(@VehDONo,'')
										 , BPKNo            = isnull(@VehBPKNo,'')
										 , InvoiceNo        = isnull(@VehINVNo,'')
										 , TransferOutNo    = isnull(@VehVTONo,'')
										 , TransferInNo     = isnull(@VehVTINo,'')
										 , BPKDate		    = isnull(@VehBPKDate,'')
										 , BPUDate			= isnull(@VehBPUDate,'')
										 , SuzukiDONo       = isnull(@VehSuzukiDONo,'')
										 , SuzukiDODate     = isnull(@VehSuzukiDODate,'')
										 , SuzukiSJNo       = isnull(@VehSuzukiSJNo,'')
										 , SuzukiSJDate     = isnull(@VehSuzukiSJDate,'')
										 , FakturPolisiNo   = isnull(FakturPolisiNo,@VehFakturPolisiNo)
										 , FakturPolisiDate = isnull(FakturPolisiDate,@VehFakturPolisiDate)
						                 , QuantityInvoice = QuantityInvoice + isnull(SRC.NewQuantityInvoice,0)
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, ChassisCode, ChassisNo, EngineCode, EngineNo, SalesModelCode, 
										SalesModelYear, ColourCode, ServiceBookNo, KeyNo, COGSUnit, COGSOthers, 
										COGSKaroseri, PpnBMBuyPaid, PpnBmBuy, SalesNetAmt, PpnBmSellPaid, PpnBmSell,
										PONo, POReturnNo, BPUNo, HPPNo, KaroseriSPKNo, KaroseriTerimaNo, SONo, 
										SOReturnNo, DONo, BPKNo, InvoiceNo, ReqOutNo, TransferOutNo, TransferInNo,
										WarehouseCode, Remark, Status, IsAlreadyPDI, BPKDate, FakturPolisiNo, 
										FakturPolisiDate, PoliceRegistrationNo, PoliceRegistrationDate, 
										IsProfitCenterSales, IsProfitCenterService, IsActive, CreatedBy, CreatedDate, 
										LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate, IsNonRegister,
										BPUDate, SuzukiDONo, SuzukiDODate, SuzukiSJNo, SuzukiSJDate, 
										TransferOutMultiBranchNo, TransferInMultiBranchNo)
								values (NewCompany, NewChassisCode, NewChassisNo, NewEngineCode, NewEngineNo, 
										NewSalesModelCode, NewSalesModelYear, NewColourCode, NewServiceBookNo, 
										NewKeyNo, NewCOGSUnit, NewCOGSOthers, NewCOGSKaroseri, NewPpnBMBuyPaid, 
										NewPpnBmBuy, NewSalesNetAmt, NewPpnBmSellPaid, NewPpnBmSell, NewPONo, 
										NewPOReturnNo, NewBPUNo, NewHPPNo, NewKaroseriSPKNo, NewKaroseriTerimaNo, 
										NewSONo, NewSOReturnNo, NewDONo, NewBPKNo, NewInvoiceNo, NewReqOutNo, 
										NewTransferOutNo, NewTransferInNo, NewWarehouseCode, NewRemark, NewStatus, 
										NewIsAlreadyPDI, NewBPKDate, NewFakturPolisiNo, NewFakturPolisiDate, 
										NewPoliceRegistrationNo, NewPoliceRegistrationDate, NewIsProfitCenterSales, 
										NewIsProfitCenterService, NewIsActive, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate, 
										NewIsNonRegister, NewBPUDate, NewSuzukiDONo, NewSuzukiDODate, NewSuzukiSJNo, 
										NewSuzukiSJDate, NewTransferOutMultiBranchNo, NewTransferInMultiBranchNo);'
					execute sp_executesql @sqlString

			 -- SD: Insert / Update data to table omTrInventQtyVehicle
				set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
									+@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
									+convert(varchar,year(@curDocDate))+ ''',''' 
									+convert(varchar,month(@curDocDate))+  ''',''' 
									+@curSalesModelCode+ ''',''' 
									+convert(varchar,@curSalesModelYear)+ ''',''' 
									+@curColourCode+ ''',''' +@WHSD+ 
									''',1,0,1,0,0,0,0,NULL,1,''' 
									+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' 
									+@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ 
									''',0,NULL,NULL))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
								NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
								NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
								NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
								NewIsLocked, NewLockedBy, NewLockedDate)
						on VEH.CompanyCode    = SRC.NewCompany
					   and VEH.BranchCode	  = SRC.NewBranch
					   and VEH.Year			  = SRC.NewYear
					   and VEH.Month		  = SRC.NewMonth
					   and VEH.SalesModelCode = SRC.NewSalesModelCode
					   and VEH.SalesModelYear = SRC.NewSalesModelYear 
					   and VEH.ColourCode	  = SRC.NewColourCode
					   and VEH.WarehouseCode  = SRC.NewWarehouseCode
					  when matched
						   then update set QtyIn  = QtyIn  + SRC.NewQtyIn
										 , QtyOut = QtyOut + SRC.NewQtyOut
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
										ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
										EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
										NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
										NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
										NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
										NewIsLocked, NewLockedBy, NewLockedDate);'
					execute sp_executesql @sqlString

			 -- SD: insert omMstVehicleTemp

   			 -- Update Daily Posting Process Status
				update omSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and DocDate    =@curDocDate
					  and Seq        =@curSeq

			 -- Read next record
				fetch next from curomSDMovement
					  into  @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
							@curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
							@curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
							@curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
							@curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table omSDMovement to table omHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[omHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[omHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[Seq] [int] NOT NULL,
				[SalesModelCode] [varchar](20) NOT NULL,
				[SalesModelYear] [numeric](4, 0) NOT NULL,
				[ChassisCode] [varchar](15) NOT NULL,
				[ChassisNo] [numeric](10, 0) NOT NULL,
				[EngineCode] [varchar](15) NOT NULL,
				[EngineNo] [numeric](10, 0) NOT NULL,
				[ColourCode] [varchar](15) NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[CustomerCode] [varchar](15) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NOT NULL,
				[LastUpdateDate] [datetime] NOT NULL)
			
		insert into omHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  omSDMovement
							  where	 ProcessStatus = 1
                              -- or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		delete omSDMovement   where	 ProcessStatus = 1
                              -- or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		close curomSDMovement
		deallocate curomSDMovement

END
GO

-- POSTING TRANSACTION MULTI COMPANY - SALES RETURN
-- ------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -----------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySalesReturn] '6006400001','2014/11/30','0'
-- -----------------------------------------------------------------------------

ALTER procedure [dbo].[usprpt_PostingMultiCompanySalesReturn]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN

	  --declare @CompanyCode			varchar(15) = '6006400001'
	  --declare @PostingDate			datetime	= '2014/04/30'
	  --declare @Status					varchar(1)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode			varchar(15) --= '6006400001'
		declare @curBranchCode			varchar(15) --= '6006400131'
		declare @curDocNo				varchar(15)	--= 'IU131/14/100010'
		declare @curDocDate				datetime    --= '2015/03/08'
		declare @curSeq					int			
		declare @curSalesModelCode		varchar(20)	
		declare @curSalesModelYear		numeric(4,0)	
		declare @curChassisCode			varchar(15)	
		declare @curChassisNo			numeric(10,0) 
		declare @curEngineCode			varchar(15)	
		declare @curEngineNo			numeric(10,0) 
		declare @curColourCode			varchar(15)	
		declare @curWarehouseCode		varchar(15)	
		declare @curCustomerCode		varchar(15)	
		declare @curQtyFlag				char(1)		
		declare @curCompanyMD			varchar(15)
		declare @curBranchMD			varchar(15)	
		declare @curWarehouseMD			varchar(15)	
		declare @curStatus				char(1)		
		declare @curProcessStatus		char(1)		
		declare @curProcessDate			datetime		
		declare @curCreatedBy			varchar(15)	
		declare @curCreatedDate			datetime		
		declare @curLastUpdateBy		varchar(15)	
		declare @curLastUpdateDate		datetime
		declare @sqlString				nvarchar(max)

	 -- MD
		declare @HPPNo					varchar(15)
		declare @INVNo					varchar(15)
		declare @FPJNo					varchar(25)
		declare @BPKNo					varchar(15)
		declare @BPUNo					varchar(15)
		declare @HPPDate				datetime
		declare @INVDate				datetime
		declare @FPJDate				datetime
	 -- SD
		declare @VTONo					varchar(15)
		declare @VTINo					varchar(15)
		declare @RTPNo					varchar(15)
		declare @RTSNo					varchar(15)

		declare @WHFrom					varchar(15)
		declare @WHTo					varchar(15)
		declare @RemarkHdr				varchar(100)
		declare @RemarkDtl				varchar(100)
		declare @BeforeDiscDPP			numeric(18,0)
		declare @DiscExcludePPn			numeric(18,0)
		declare @AfterDiscDPP			numeric(18,0)
		declare @AfterDiscPPn			numeric(18,0)
		declare @AfterDiscPPnBM			numeric(18,0)
		declare @AfterDiscTotal			numeric(18,0)
		declare @OthersDPP				numeric(18,0)
		declare @OthersPPn				numeric(18,0)

		declare @DBName					varchar(50)
		declare @DBNameMD				varchar(50)
		declare @CentralBranch			varchar(15)
		declare @SeqNo					integer
		declare @swCompanyCode			varchar(15)  = ' '
		declare @swBranchCode			varchar(15)  = ' '
		declare @swDocNo 				varchar(15)  = ' '
		declare @CurrentDate			varchar(100) = convert(varchar,getdate(),121)

        declare curomSDMovement cursor for
			select sd.* 
			  from omSDMovement sd, gnMstDocument doc
             where sd.CompanyMD        =doc.CompanyCode
			   and sd.BranchMD         =doc.BranchCode
			   and doc.DocumentType    ='RTS' 
			   and doc.ProfitCenterCode='100'
			   and left(sd.DocNo,len(doc.DocumentPrefix))=doc.DocumentPrefix
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by sd.CompanyCode, sd.BranchCode, sd.DocNo, sd.SalesModelCode, 
					  sd.SalesModelYear, sd.ColourCode, sd.ChassisCode, sd.ChassisNo
		open curomSDMovement

		fetch next from curomSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
				   @curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
				   @curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
				   @curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
				   @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
				  
		while (@@FETCH_STATUS =0)
			begin

			 -- MD Database & SD Database from gnMstCompanyMapping
				select @DBNameMD=DBMD, @DBName=DBName from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode

			 -- Centralize unit Purchasing & Transfer for SBT, SMG, SIT, SST dealer
				set @sqlString = N'select @CentralBranch=BranchCode from ' +@DBName+ '..gnMstOrganizationDtl ' +  
								   'where CompanyCode=''' +@curCompanyCode+ ''' and isBranch=''0'''
					execute sp_executesql @sqlString, 
							N'@CentralBranch varchar(15) output', @CentralBranch output
										
			 -- SD: Collect HPP, FPJ & INV (No & Date) information from omTrPurchaseHPP, omTrPurchaseHPPSubDetail & omTrSalesInvoice
				set @sqlString = N'select @HPPNo=h.HPPNo, @HPPDate=h.HPPDate, @FPJNo=h.RefferenceFakturPajakNo, ' +
										 '@FPJDate=h.RefferenceFakturPajakDate, @INVNo=h.RefferenceInvoiceNo, ' +
										 '@INVDate=h.RefferenceInvoiceDate, @BPUNo=d.BPUNo from ' +
										 +@DBName+ '..omTrPurchaseHPP h, ' +@DBName+ '..omTrPurchaseHPPSubDetail d ' +
										 'where h.CompanyCode=d.CompanyCode and h.BranchCode=d.BranchCode and h.HPPNo=d.HPPNo ' +
										   'and d.CompanyCode=''' +@curCompanyCode+ ''' and d.BranchCode=''' +@CentralBranch+ 
										''' and d.ChassisCode=''' +@curChassisCode+ ''' and d.ChassisNo=''' +convert(varchar,@curChassisNo)+ ''''
					execute sp_executesql @sqlString, 
							N'@HPPNo varchar(15) output, @HPPDate datetime output, 
							  @FPJNo varchar(25) output, @FPJDate datetime output,
							  @INVNo varchar(15) output, @INVDate datetime output,
							  @BPUNo varchar(15) output', 
							  @HPPNo output,             @HPPDate output, 
							  @FPJNo output,             @FPJDate output,
							  @INVNo output,			 @INVDate output,
							  @BPUNo output

				set @HPPNo   = isnull(@HPPNo,'')
				set @FPJNo   = isnull(@FPJNo,'')
				set @INVNo   = isnull(@INVNo,'')
				set @BPUNo   = isnull(@BPUNo,'')
				set @HPPDate = isnull(@HPPDate,'1900/01/01')
				set @FPJDate = isnull(@FPJDate,'1900/01/01')
				set @INVDate = isnull(@INVDate,'1900/01/01')

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0
		
					 -- SD: Collect Warehouse From & Remark Header information from Retur Sales
						set @sqlString = N'select @WHFrom=WareHouseCode, @RemarkHdr=Remark from ' +@DBName+ '..omTrSalesReturn ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+
											''' and ReturnNo=''' +@curDocNo+''''
							execute sp_executesql @sqlString, 
									N'@WHFrom varchar(15) output, @RemarkHdr varchar(100) output', @WHFrom output, @RemarkHdr output

				     -- SD: Collect Warehouse To Information from gnMstLookupDtl
						set @sqlString = N'select @WHTO=LookUpValue from ' +@DBName+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyCode+ ''' and CodeID=''MPWH'' and ParaValue=''' 
											+@CentralBranch+ ''''
							execute sp_executesql @sqlString, N'@WHTO varchar(15) output', @WHTO output

						set @RemarkHdr = isnull(@RemarkHdr,'')
						set @WHFrom    = isnull(@WHFrom,'')
						set @WHTo      = isnull(@WHTo,'')

						if @curBranchCode <> @CentralBranch
							begin
							 -- SD: Insert data to table omTrInventTransferOut
								execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'VTO', @VTONo output

								set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferOut 
														(CompanyCode, BranchCode, TransferOutNo, TransferOutDate, ReferenceNo, 
														 ReferenceDate, BranchCodeFrom, WareHouseCodeFrom, BranchCodeTo, 
														 WareHouseCodeTo, ReturnDate, Remark, Status, CreatedBy, CreatedDate, 
														 LastUpdateBy, LastUpdateDate, isLocked, LockedBy, LockedDate)
												  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
														 +@VTONo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curBranchCode+ ''',''' +@WHFrom+ ''','''
														 +@CentralBranch+ ''',''' +@WHTO+ ''','''
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@RemarkHdr+ ''',''5'',''POSTING'',''' 
														 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
														 +@CurrentDate+ ''',0,NULL,NULL)'
									execute sp_executesql @sqlString

							 -- SD: Insert data to table omTrInventTransferIn
								execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'VTI', @VTINo output
								set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferIn 
														(CompanyCode, BranchCode, TransferInNo, TransferInDate, TransferOutNo, 
													     ReferenceNo, ReferenceDate, BranchCodeFrom, WareHouseCodeFrom, 
														 BranchCodeTo, WareHouseCodeTo, ReturnDate, Remark, Status, CreatedBy, 
														 CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockedBy, LockedDate)
												  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''','''
														 +@VTINo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@VTONo+ ''',''' +@curDocNo+ ''',''' 
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curBranchCode+ ''',''' +@WHFrom+ ''','''
														 +@CentralBranch+ ''',''' +@WHTO+ ''','''
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@RemarkHdr+ ''',''2'',''POSTING'',''' 
														 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
														 +@CurrentDate+ ''',0,NULL,NULL)'
									execute sp_executesql @sqlString
							end

					 -- SD: Insert data to table omTrPurchaseReturn
					 	execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'RTP', @RTPNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseReturn 
												(CompanyCode, BranchCode, ReturnNo, ReturnDate, RefferenceNo, RefferenceDate, 
												 HPPNo, RefferenceFakturPajakNo, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
												 +@RTPNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@HPPNo+ ''',''' +convert(varchar,@HPPDate,121)+ ''',''' 
												 +@HPPNo+ ''',''' +@FPJNo+ ''',''' +@RemarkHdr+ 
												 ''',''5'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												 ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesReturn
					 	execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @RTSNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesReturn 
												(CompanyCode, BranchCode, ReturnNo, ReturnDate, ReferenceNo, ReferenceDate, 
												 InvoiceNo, InvoiceDate, CustomerCode, FakturPajakNo, FakturPajakDate, 
												 WareHouseCode, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, 
												 LastUpdateDate, isLocked, LockedBy, LockedDate)
										  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
												 +@RTSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@RTPNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@INVNo+ ''',''' +convert(varchar,@INVDate,121)+ ''','''
												 +@CentralBranch+ ''',''' +@FPJNo+ ''',''' 
												 +convert(varchar,@FPJDate,121)+ ''',''' 
												 +@WHTo+ ''',''' +@RemarkHdr+ ''',''5'',''POSTING'',''' 
												 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												 +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString
					end

-----------------------------------------------------------------------------------------  DETAIL PROCESS
				set @SeqNo = @SeqNo + 1

			 -- MD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBNameMD+ '..omMstVehicle
										set SOReturnNo='''+@RTSNo+ 
										''', Status=''0'', isActive=''1'' where CompanyCode='''
										+@curCompanyMD+ ''' and ChassisCode=''' 
										+@curChassisCode+ ''' and ChassisNo='
										+convert(varchar,@curChassisNo)+ ''
					execute sp_executesql @sqlString

			 -- SD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBName+ '..omMstVehicle
										set POReturnNo='''+@RTPNo+ 
										''', TransferOutNo='''+@VTONo+ 
										''', TransferInNo='''+@VTINo+ 
										''', Status=''2'', isActive=''0''  where CompanyCode='''+@curCompanyMD+
										''' and ChassisCode=''' +@curChassisCode+ 
										''' and ChassisNo='+convert(varchar,@curChassisNo) +''
					execute sp_executesql @sqlString

			 -- SD: Collect Remark Detail information table omTrSalesReturnVIN
				set @sqlString = N'select top 1 @RemarkDtl=Remark from ' +@DBName+ '..omTrSalesReturnVIN ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+
											''' and ReturnNo=''' +@curDocNo+ ''' and ChassisCode=''' +@curChassisCode+
											''' and ChassisNo=''' +convert(varchar,@curChassisNo)+ ''' order by ReturnNo desc'
							execute sp_executesql @sqlString, 
									N'@RemarkDtl varchar(100) output', @RemarkDtl output
				set @RemarkDtl = isnull(@RemarkDtl,'')

			 -- SD: Transfer unit from branch to holding
				if @curBranchCode <> @CentralBranch
					begin
					 -- SD: Insert data to table omTrInventTransferOutDetail
						set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferOutDetail 
												(CompanyCode, BranchCode, TransferOutNo, TransferOutSeq, 
												 SalesModelCode, SalesModelYear, ChassisCode, ChassisNo, 
												 EngineCode, EngineNo, ColourCode, Remark, StatusTransferIn, 
												 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
												 +@VTONo+ ''',''' +convert(varchar,@SeqNo)+ ''','''
												 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
												 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
												 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
												 +@curColourCode+ ''',''' +@RemarkDtl+ ''',''1'',''' 
												 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
												 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
							execute sp_executesql @sqlString

					 -- SD: Insert data to table omTrInventTransferInDetail
						set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferInDetail 
												(CompanyCode, BranchCode, TransferInNo, TransferInSeq, 
												 SalesModelCode, SalesModelYear, ChassisCode, ChassisNo, 
												 EngineCode, EngineNo, ColourCode, Remark, StatusTransferOut, 
												 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
												 +@VTINo+ ''',''' +convert(varchar,@SeqNo)+ ''','''
												 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
												 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
												 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
												 +@curColourCode+ ''',''' +@RemarkDtl+ ''',''1'',''' 
												 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
												 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
							execute sp_executesql @sqlString

					 -- SD: Insert / Update data to table omTrInventQtyVehicle - @WHFrom
						set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
													   +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
													   +convert(varchar,year(@curDocDate))+ ''',''' 
													   +convert(varchar,month(@curDocDate))+  ''',''' 
													   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
													   +@curColourCode+ ''',''' +@WHFrom+ ''',1,0,1,0,0,0,0,NULL,1,''' 
													   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
													   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
													   ''',0,NULL,NULL))
											   as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
													   NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
													   NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
													   NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
													   NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate)
												   on  VEH.CompanyCode    = SRC.NewCompany
												  and  VEH.BranchCode	  = SRC.NewBranch
												  and  VEH.Year		      = SRC.NewYear
												  and  VEH.Month		  = SRC.NewMonth
												  and  VEH.SalesModelCode = SRC.NewSalesModelCode
												  and  VEH.SalesModelYear = SRC.NewSalesModelYear 
												  and  VEH.ColourCode	  = SRC.NewColourCode
												  and  VEH.WarehouseCode  = SRC.NewWarehouseCode
										 when matched
												 then update set QtyIn  = QtyIn  - SRC.NewQtyIn
															   , QtyOut = QtyOut - SRC.NewQtyOut
															   , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
															   , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
									 when not matched by target 
												 then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
															  ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
															  EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, CreatedDate, 
															  LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
													  values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
															  NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
															  NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
															  NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
															  NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, 
															  NewLockedDate);'
							execute sp_executesql @sqlString
					end

			 -- SD: Insert / Update data to table omTrInventQtyVehicle - @WHTo
				set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
											   +convert(varchar,year(@curDocDate))+ ''',''' 
											   +convert(varchar,month(@curDocDate))+  ''',''' 
											   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
											   +@curColourCode+ ''',''' +@WHTo+ ''',1,0,1,0,0,0,0,NULL,1,''' 
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
											   ''',0,NULL,NULL))
									  as SRC  (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
											   NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
											   NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
											   NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate)
										  on   VEH.CompanyCode    = SRC.NewCompany
										 and   VEH.BranchCode	  = SRC.NewBranch
										 and   VEH.Year			  = SRC.NewYear
										 and   VEH.Month		  = SRC.NewMonth
										 and   VEH.SalesModelCode = SRC.NewSalesModelCode
										 and   VEH.SalesModelYear = SRC.NewSalesModelYear 
										 and   VEH.ColourCode	  = SRC.NewColourCode
										 and   VEH.WarehouseCode  = SRC.NewWarehouseCode
								when matched
										then  update set QtyIn  = QtyIn  + SRC.NewQtyIn
													   , QtyOut = QtyOut + SRC.NewQtyOut
													   , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
													   , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
						    when not matched by target 
										then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
													 ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
													 EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, 
													 CreatedDate, LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
											 values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
													 NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
													 NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
													 NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
													 NewIsLocked, NewLockedBy, NewLockedDate);'
						execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseReturnDetail
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseReturnDetail as RTP using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
											   +@RTPNo+ ''',''' +@BPUNo+ ''',''' +@RemarkDtl+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPUNo,  NewRemark,
											   NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
										   on  RTP.CompanyCode = SRC.NewCompany
										  and  RTP.BranchCode  = SRC.NewBranch
										  and  RTP.ReturnNo    = SRC.NewReturnNo
										  and  RTP.BPUNo       = SRC.NewBPUNo
										 when  matched 
											   then update set Remark         = SRC.NewRemark
															 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										 when  not matched by target 
											   then insert (CompanyCode, BranchCode, ReturnNo, BPUNo, Remark, 
															CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
													values (NewCompany, NewBranch, NewReturnNo, NewBPUNo,  NewRemark,
															NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString


			 -- SD: Collect price information from table omTrPurchaseHPP
				set @sqlString = N'select @BeforeDiscDPP=p.BeforeDiscDPP, @DiscExcludePPn=p.DiscExcludePPn, ' +
								  '@AfterDiscDPP=p.AfterDiscDPP, @AfterDiscPPn=p.AfterDiscPPn, ' +
								  '@AfterDiscPPnBM=p.AfterDiscPPnBM, @AfterDiscTotal=p.AfterDiscTotal, ' +
								  '@OthersDPP=p.OthersDPP, @OthersPPn=p.OthersPPn from ' +@DBName+ 
								  '..omTrPurchaseHPPSubDetail v, ' +@DBName+ '..omTrPurchaseHPPDetailModel p ' +
								  'where v.CompanyCode=p.CompanyCode and v.BranchCode=p.BranchCode ' +
									'and v.HPPNo=p.HPPNo and v.BPUNo=p.BPUNo and v.SalesModelCode=p.SalesModelCode ' +
									'and v.SalesModelYear=p.SalesModelYear and v.CompanyCode=''' +@curCompanyCode+ 
								  ''' and v.BranchCode=''' +@CentralBranch+ ''' and v.BPUNo=''' +@BPUNo+
								  ''' and ChassisCode=''' +@curChassisCode+ ''' and ChassisNo='
								  +convert(varchar,@curChassisNo)+ ''
						execute sp_executesql @sqlString, 
								N'@BeforeDiscDPP	numeric(18)	output,
								  @DiscExcludePPn	numeric(18)	output,
								  @AfterDiscDPP		numeric(18)	output,
								  @AfterDiscPPn		numeric(18) output,
								  @AfterDiscPPnBM	numeric(18) output,
								  @AfterDiscTotal	numeric(18) output,
								  @OthersDPP		numeric(18) output,
								  @OthersPPn		numeric(18) output',
								  @BeforeDiscDPP	output,
								  @DiscExcludePPn	output,
								  @AfterDiscDPP		output,
								  @AfterDiscPPn		output,
								  @AfterDiscPPnBM	output,
								  @AfterDiscTotal	output,
								  @OthersDPP		output,
								  @OthersPPn		output

			 -- SD: Insert data to table omTrPurchaseReturnDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseReturnDetailModel as RTP using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@RTPNo+ ''',''' +@BPUNo+ 
											   ''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',1,''' 
											   +convert(varchar,@BeforeDiscDPP)+ ''',''' +convert(varchar,@DiscExcludePPn)+ ''','''
											   +convert(varchar,@AfterDiscDPP)+ ''',''' +convert(varchar,@AfterDiscPPn)+ ''','''
											   +convert(varchar,@AfterDiscPPnBM)+ ''',''' +convert(varchar,@AfterDiscTotal)+ ''','''
											   +convert(varchar,@OthersDPP)+ ''',''' +convert(varchar,@OthersPPn)+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPUNo, 
											   NewSalesModelCode, NewSalesModelYear, NewQuantity, 
											   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
											   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
											   NewOthersDPP, NewOthersPPn, NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate)
										   on  RTP.CompanyCode    = SRC.NewCompany
										  and  RTP.BranchCode     = SRC.NewBranch
										  and  RTP.ReturnNo       = SRC.NewReturnNo
										  and  RTP.BPUNo          = SRC.NewBPUNo
										  and  RTP.SalesModelCode = SRC.NewSalesModelCode
										  and  RTP.SalesModelYear = SRC.NewSalesModelYear
										 when  matched 
											   then update set Quantity       = Quantity + SRC.NewQuantity
															 , BeforeDiscDPP  = BeforeDiscDPP  + SRC.NewBeforeDiscDPP
															 , DiscExcludePPn = DiscExcludePPn + SRC.NewDiscExcludePPn
															 , AfterDiscDPP   = AfterDiscDPP   + SRC.NewAfterDiscDPP
															 , AfterDiscPPn   = AfterDiscPPn   + SRC.NewAfterDiscPPn
															 , AfterDiscPPnBM = AfterDiscPPnBM + SRC.NewAfterDiscPPnBM
															 , AfterDiscTotal = AfterDiscTotal + SRC.NewAfterDiscTotal
															 , OthersDPP      = OthersDPP      + SRC.NewOthersDPP
															 , OthersPPn      = OthersPPn      + SRC.NewOthersPPn
															 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										when  not matched by target 
											  then insert (CompanyCode, BranchCode, ReturnNo, BPUNo, SalesModelCode,
														   SalesModelYear, Quantity, BeforeDiscDPP, DiscExcludePPn,
														   AfterDiscDPP, AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, 
														   OthersDPP, OthersPPn, CreatedBy, CreatedDate, LastUpdateBy, 
														   LastUpdateDate)
												   values (NewCompany, NewBranch, NewReturnNo, NewBPUNo, 
														   NewSalesModelCode, NewSalesModelYear, NewQuantity, 
														   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
														   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
														   NewOthersDPP, NewOthersPPn, NewCreatedBy, NewCreatedDate, 
														   NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseReturnSubDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseReturnSubDetail
										(CompanyCode, BranchCode, ReturnNo, BPUNo, ReturnSeq, 
										 SalesModelCode, SalesModelYear, ColourCode, ChassisCode, 
										 ChassisNo, EngineCode, EngineNo, Remark, CreatedBy, 
										 CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@RTPNo+ ''',''' 
										 +@BPUNo+ ''',''' +Convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''','''
								         +convert(varchar,@curSalesModelYear)+ ''',''' +@curColourCode+ ''',''' 
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@RemarkDtl+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- SD: Update data to table omTrPurchaseHPPSubDetail
				set @sqlString = 'update ' +@DBName+ '..omTrPurchaseHPPSubDetail ' +
										'set isReturn = 1 where CompanyCode=''' +@curCompanyCode+ 
										''' and BranchCode=''' +@CentralBranch+ ''' and HPPNo=''' +@HPPNo+ 
										''' and BPUNo=''' +@BPUNo+ ''' and ChassisCode=''' +@curChassisCode+ 
										''' and ChassisNo=''' +convert(varchar,@curChassisNo)+''''
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesReturnBPK
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesReturnBPK as RTS using (values(''' 
											   +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
											   +@RTSNo+ ''',''' +@BPKNo+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPKNo, NewCreatedBy, 
											   NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
										   on RTS.CompanyCode = SRC.NewCompany
										  and RTS.BranchCode  = SRC.NewBranch
										  and RTS.ReturnNo    = SRC.NewReturnNo
										  and RTS.BPKNo       = SRC.NewBPKNo
										 when matched 
											  then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															, LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										 when not matched by target 
											  then insert (CompanyCode, BranchCode, ReturnNo, BPKNo, CreatedBy, 
														   CreatedDate, LastUpdateBy, LastUpdateDate)
												   values (NewCompany, NewBranch, NewReturnNo, NewBPKNo, NewCreatedBy, 
														   NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
						execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesReturnDetailModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesReturnDetailModel as RTS using (values(''' 
											   +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@RTSNo+ ''',''' +@BPKNo+ ''','''
											   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
											   +convert(varchar,@BeforeDiscDPP)+ ''',''' +convert(varchar,@DiscExcludePPn)+ ''','''
											   +convert(varchar,@AfterDiscDPP)+ ''',''' +convert(varchar,@AfterDiscPPn)+ ''','''
											   +convert(varchar,@AfterDiscPPnBM)+ ''',''' +convert(varchar,@AfterDiscTotal)+ ''','''
											   +convert(varchar,@OthersDPP)+ ''',''' +convert(varchar,@OthersPPn)+ ''',1,'''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPKNo,  
											   NewSalesModelCode, NewSalesModelYear, 
											   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
											   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
											   NewOthersDPP, NewOthersPPn, NewQuantity, 
											   NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate)
										   on RTS.CompanyCode    = SRC.NewCompany
										  and RTS.BranchCode     = SRC.NewBranch
										  and RTS.ReturnNo       = SRC.NewReturnNo
									      and RTS.BPKNo          = SRC.NewBPKNo
										  and RTS.SalesModelCode = SRC.NewSalesModelCode
										  and RTS.SalesModelYear = SRC.NewSalesModelYear
										 when matched 
											  then update set Quantity       = Quantity       + SRC.NewQuantity
															, BeforeDiscDPP  = BeforeDiscDPP  + SRC.NewBeforeDiscDPP
															, DiscExcludePPn = DiscExcludePPn + SRC.NewDiscExcludePPn
															, AfterDiscDPP   = AfterDiscDPP   + SRC.NewAfterDiscDPP
															, AfterDiscPPn   = AfterDiscPPn   + SRC.NewAfterDiscPPn
															, AfterDiscPPnBM = AfterDiscPPnBM + SRC.NewAfterDiscPPnBM
															, AfterDiscTotal = AfterDiscTotal + SRC.NewAfterDiscTotal
															, OthersDPP      = OthersDPP      + SRC.NewOthersDPP
															, OthersPPn      = OthersPPn      + SRC.NewOthersPPn
															, LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															, LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										when not matched by target 
											 then insert (CompanyCode, BranchCode, ReturnNo, BPKNo, 
														  SalesModelCode, SalesModelYear, 
														  BeforeDiscDPP, DiscExcludePPn, AfterDiscDPP,
														  AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, 
														  OthersDPP, OthersPPn, Quantity, 
														  CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
												  values (NewCompany, NewBranch, NewReturnNo, NewBPKNo,  
														  NewSalesModelCode, NewSalesModelYear, 
														  NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
														  NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
														  NewOthersDPP, NewOthersPPn, NewQuantity, NewCreatedBy, 
														  NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
						execute sp_executesql @sqlString

			 -- SD: Collect price information from table omTrPurchaseHPP
				set @sqlString = N'select @BPKNo=BPKNo from ' +@DBNameMD+ '..omTrSalesInvoiceVin where CompanyCode='''
										  +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and InvoiceNo=''' 
										  +@INVNo+ ''' and ChassisCode=''' +@curChassisCode+ ''' and ChassisNo='''
										  +convert(varchar,@curChassisNo) + ''''
						execute sp_executesql @sqlString, 
								N'@BPKNo	varchar(15) output', @BPKNo	output

			 -- MD: Insert data to table omTrSalesReturnVIN
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesReturnVIN
										(CompanyCode, BranchCode, ReturnNo, BPKNo, SalesModelCode, SalesModelYear, 
										 ReturnSeq, ColourCode, ChassisCode, ChassisNo, EngineCode, EngineNo, 
										 Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
										 +@RTSNo+ ''',''' +@BPKNo+ ''',''' 
										 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
										 +convert(varchar,@SeqNo)+ ''',''' +@curColourCode+ ''',''' 
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@RemarkDtl+ ''','''  
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

/*				
			USE POSTING JOURNAL IN UTILITY SALES MODULE 
			FOR UPDATE DATA TO TABLE ARINTERFACE & GLINTERFACE
			 -- MD: Update data to table arInterface
			 -- MD: Update data to table glInterface
			 -- SD: Update data to table apInterface
			 -- SD: Update data to table glInterface
*/

   			 -- Update Daily Posting Process Status
				update omSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and DocDate    =@curDocDate
					  and Seq        =@curSeq

			 -- Read next record
				fetch next from curomSDMovement
					  into  @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
							@curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
							@curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
							@curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
							@curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table omSDMovement to table omHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[omHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[omHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[Seq] [int] NOT NULL,
				[SalesModelCode] [varchar](20) NOT NULL,
				[SalesModelYear] [numeric](4, 0) NOT NULL,
				[ChassisCode] [varchar](15) NOT NULL,
				[ChassisNo] [numeric](10, 0) NOT NULL,
				[EngineCode] [varchar](15) NOT NULL,
				[EngineNo] [numeric](10, 0) NOT NULL,
				[ColourCode] [varchar](15) NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[CustomerCode] [varchar](15) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NOT NULL,
				[LastUpdateDate] [datetime] NOT NULL)
			
		insert into omHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  omSDMovement
							  where	 ProcessStatus = 1
                                 or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		delete omSDMovement   where	 ProcessStatus = 1
                                 or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		close curomSDMovement
		deallocate curomSDMovement

END
GO
if object_id('uspfn_spSelectPickingSlip') is not null
	drop procedure uspfn_spSelectPickingSlip
GO
CREATE procedure [dbo].[uspfn_spSelectPickingSlip] 
@CompanyCode varchar(15), @BranchCode varchar(15), 
@ProductType varchar(4), @JobOrderNo varchar(25)
as
SELECT * INTO #t1 FROM (
SELECT
    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
    d.PickedBy
FROM
    svTrnService a
LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
    AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
    AND c.DocNo = b.SupplySlipNo
LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
    AND d.PickingSlipNo = c.ExPickingSlipNo
LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
    AND e.PickingSlipNo = d.PickingSlipNo
LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
    AND f.LookUpValue = c.TransType
LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
    AND g.PickingSlipNo = d.PickingSlipNo
WHERE 
    a.CompanyCode     = @CompanyCode
    AND a.BranchCode  = @BranchCode
    AND a.ProductType = @ProductType
    AND a.jobOrderNo  = @JobOrderNo
    AND b.SupplySlipNo <> ''
    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
           AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
    AND d.Status < 2
)#t1
SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
DROP TABLE #t1
GO
if object_id('uspfn_pmApplyMemberTransfer') is not null
	drop procedure uspfn_pmApplyMemberTransfer
GO
-- Created by Benedict 16 Mar 2015
CREATE PROCEDURE uspfn_pmApplyMemberTransfer
	@p0 varchar(20),  --CompanyCode
	@p1 varchar(20),  --BranchCode
	@p2 varchar(20),  --InquiryNumber IF 'S' || EmployeeID IF NOT 'S'
	@p3 varchar(20),  --EmployeeID IF 'S' || TeamLeader IF NOT 'S'
	@p4 varchar(20)	  --UserID

--DECLARE
--	@p0 varchar(20) = '6006406', --CompanyCode
--	@p1 varchar(20) = '6006401', --BranchCode
--	@p2 varchar(20) = '421468',  --InquiryNumber IF 'S' || EmployeeID IF NOT 'S'
--	@p3 varchar(20) = '52259',   --EmployeeID IF 'S' || TeamLeader IF NOT 'S'
--	@p4 varchar(20) = 'bent'     --UserID
AS
BEGIN

DECLARE @pos1 varchar(5) = (SELECT Position FROM HrEmployee WHERE CompanyCode = @p0 AND EmployeeID = @p3)
IF (@pos1 = 'S')
BEGIN
	IF (@p3 <> (SELECT TOP 1 EmployeeID 
					FROM pmKDP 
					WHERE CompanyCode = @p0
					AND BranchCode = @p1
					AND InquiryNumber = @p2))
	BEGIN
	DECLARE @spvID varchar(15) = (SELECT TeamLeader 
									FROM HrEmployee 
									WHERE CompanyCode = @p0 AND EmployeeID = @p3)
	UPDATE pmKDP
	SET EmployeeID = @p3,
		SpvEmployeeID = @spvID,
		OutletID = @p1,
		LastUpdateBy = @p4,
		LastUpdateDate = getdate()
	WHERE CompanyCode = @p0
		AND BranchCode = @p1
		AND InquiryNumber = @p2
	END
END
ELSE
	IF (@p3 <> (SELECT TeamLeader
				FROM HrEmployee
				WHERE CompanyCode = @p0 AND EmployeeID = @p2))
	BEGIN
		UPDATE HrEmployee
		SET TeamLeader = @p3,
			UpdatedBy = @p4,
			UpdatedDate = getdate()
		WHERE CompanyCode = @p0 AND EmployeeID = @p2
	END


END
GO
if object_id('uspfn_pmSelectMembers') is not null
	drop procedure uspfn_pmSelectMembers
GO
--Created by Benedict 13 Mar 2015
CREATE PROCEDURE uspfn_pmSelectMembers
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@EmployeeID varchar(20)
--DECLARE	
--	@CompanyCode varchar(20) = '6006406',
--	@BranchCode  varchar(20) = '6006401',
--	@EmployeeID varchar(20) = '51343'
AS
BEGIN
DECLARE 
	@pos1 varchar(5) = (SELECT Position FROM HrEmployee WHERE CompanyCode = @CompanyCode AND EmployeeID = @EmployeeID)

IF (@pos1 = 'S' )
BEGIN

SELECT BranchCode, CONVERT(varchar, InquiryNumber) AS KeyID, NamaProspek, PerolehanData
	 , CONVERT(varchar, InquiryNumber) + ' - ' + RTRIM(NamaProspek)
	 + CASE WHEN RTRIM(PerolehanData) = '' THEN '' ELSE 
	 ' (' + RTRIM(PerolehanData) + ')' END AS Member
  FROM pmKdp
 WHERE CompanyCode = @CompanyCode
   AND BranchCode = @BranchCode
   AND EmployeeID = @EmployeeID
END

IF (@pos1 <> 'S')
BEGIN

SELECT a.BranchCode, a.EmployeeID AS KeyID, 
	CONVERT(varchar, a.EmployeeID) + ' - ' + RTRIM(b.EmployeeName)
	 + CASE WHEN RTRIM(e.PosName) = '' THEN '' ELSE 
	 ' (' + RTRIM(e.PosName) + ')' END AS Member
FROM hrEmployeeMutation a
JOIN (
	SELECT c.EmployeeId, c.EmployeeName, c.Position, MAX(d.MutationDate) AS MutationDate
	FROM hrEmployee c
	JOIN hrEmployeeMutation d
	ON c.EmployeeId = d.EmployeeId AND c.PersonnelStatus = 1 AND c.IsDeleted = 0 AND d.IsDeleted = 0
	WHERE c.Department = 'SALES' AND c.TeamLeader = @EmployeeID
	GROUP BY c.EmployeeId, c.EmployeeName, c.Position
) b
ON a.EmployeeId = b.EmployeeId AND a.MutationDate = b.MutationDate
JOIN gnMstPosition e
ON a.CompanyCode = e.CompanyCode AND e.DeptCode = 'SALES' AND b.Position = e.PosCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode

END
END
GO
if object_id('uspfn_pmSelectOrganizationTree') is not null
	drop procedure uspfn_pmSelectOrganizationTree
GO
--created by BENEDICT 11/Mar/2015

CREATE PROCEDURE uspfn_pmSelectOrganizationTree
@CompanyCode varchar(15),
@BranchCode varchar(15)

--DECLARE @CompanyCode varchar(15) = '6006406'
--DECLARE @BranchCode varchar(15) = '6006401'

AS BEGIN
SELECT * INTO #test1 FROM(
SELECT a.BranchCode, a.EmployeeID, b.EmployeeName, e.PosLevel AS PositionID, b.Position, e.PosName AS PositionName,
(rtrim(a.EmployeeID) + ' - ' + rtrim(b.EmployeeName)) Employee,
isnull((
		select count(*) from PmKDP
		 where 1 = 1
		   and CompanyCode  = a.CompanyCode
		   and BranchCode   = a.BranchCode
		   and EmployeeID   = a.EmployeeID
		), 0) CountKDP, b.TeamLeader, ISNULL(f.OutletAbbreviation, a.BranchCode) AS BranchAbv
FROM hrEmployeeMutation a
JOIN (
	SELECT c.EmployeeId, c.EmployeeName, c.Position, ISNULL(c.TeamLeader, '') AS TeamLeader, MAX(d.MutationDate) AS MutationDate
	FROM hrEmployee c
	JOIN hrEmployeeMutation d
	ON c.EmployeeId = d.EmployeeId
	WHERE c.Department = 'SALES' AND c.PersonnelStatus = 1 AND c.IsDeleted = 0 AND d.IsDeleted = 0
	GROUP BY c.EmployeeId, c.EmployeeName, c.Position, c.TeamLeader
) b
ON a.EmployeeId = b.EmployeeId AND a.MutationDate = b.MutationDate
JOIN gnMstPosition e
ON a.CompanyCode = e.CompanyCode AND e.DeptCode = 'SALES' AND b.Position = e.PosCode
JOIN gnMstDealerOutletMapping f
ON a.CompanyCode = f.DealerCode AND a.BranchCode = f.OutletCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = CASE @BranchCode WHEN '' THEN a.BranchCode ELSE @BranchCode END
)#test1

;WITH N(id, lvl, BranchCode, EmployeeID, EmployeeName, PositionID, Position, PositionName, Employee, CountKDP, TeamLeader, BranchAbv)
AS
(
	SELECT 
		CAST(row_number() OVER(ORDER BY a.EmployeeID) AS varchar) as id,
		0 AS lvl,
		a.BranchCode, a.EmployeeID, a.EmployeeName, a.PositionID, a.Position, a.PositionName, a.Employee, a.CountKDP, a.TeamLeader, a.BranchAbv
	FROM #test1 a
	WHERE TeamLeader = '' AND EXISTS (SELECT * FROM #test1 b WHERE b.TeamLeader = a.EmployeeID)
	UNION ALL
	SELECT 
		CAST(N.id + '.' + CAST(row_number() OVER(ORDER BY b.EmployeeID) AS varchar) AS varchar) as id,
		N.lvl + 1 AS lvl,
		b.BranchCode, b.EmployeeID, b.EmployeeName, b.PositionID, b.Position, b.PositionName, b.Employee, b.CountKDP, b.TeamLeader, b.BranchAbv
	FROM #test1 b JOIN N ON N.EmployeeID = b.TeamLeader
)
SELECT * FROM N ORDER BY PositionID DESC, BranchCode, id

DROP TABLE #test1
END
GO
if object_id('usprpt_PmRpInqByPeriod') is not null
	drop procedure usprpt_PmRpInqByPeriod
GO
CREATE procedure [dbo].[usprpt_PmRpInqByPeriod] 
	-- Add the parameters for the stored procedure here
(
	@CompanyCode	VARCHAR(15),
	@BranchCode		VARCHAR(15),
	@DateAwal		VARCHAR(10),
	@DateAkhir		VARCHAR(10),
	@Outlet			VARCHAR(15),
	@SPV			VARCHAR(15),
	@EMP			VARCHAR(15)
)
AS
BEGIN
	SELECT
		f.OutletName
		,convert(varchar(20),a.InquiryNumber) InquiryNumber
		,a.NamaProspek Pelanggan
		,a.AlamatProspek
		,a.TelpRumah
		,a.NamaPerusahaan
		,a.AlamatPerusahaan
		,a.Handphone
		,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE a.InquiryDate END InquiryDate
		,a.TipeKendaraan
		,a.Variant
		,a.Transmisi
		,b.RefferenceDesc1 Warna
		,a.PerolehanData
		,c.EmployeeName Employee
		,d.EmployeeName Supervisor
		,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE e.NextFollowUpDate END NextFollowUpDate
		,a.LastProgress
		,a.LastUpdateStatus
		,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE a.SPKDate END SPKDate
		,CASE(a.LostCaseDate) WHEN '19000101' THEN NULL ELSE a.LostCaseDate END LostCaseDate
	FROM
		PmKDP a
	LEFT JOIN OmMstRefference b
		ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
	LEFT JOIN GnMstEmployee c
		ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.EmployeeID = a.EmployeeID
	LEFT JOIN GnMstEmployee d
		ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode AND d.EmployeeID = a.SpvEmployeeID
	LEFT JOIN PmActivities e
		ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
		AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
		AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
	LEFT JOIN PmBranchOutlets f
		ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode AND f.OutletID = a.OutletID
	WHERE
		a.CompanyCode = @CompanyCode 
		AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>''OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
		AND CONVERT(VARCHAR, a.InquiryDate, 112) BETWEEN @DateAwal AND @DateAkhir
		AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
		AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
		AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	ORDER BY
		a.InquiryNumber 
END
GO


if object_id('uspfn_GenerateBPSLampiranNew') is not null
	drop procedure uspfn_GenerateBPSLampiranNew
GO
create procedure [uspfn_GenerateBPSLampiranNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--DECLARE	@CompanyCode	VARCHAR(MAX),
--		@BranchCode		VARCHAR(MAX),
--		@JobOrderNo		VARCHAR(MAX),
--		@ProductType	VARCHAR(MAX),
--		@CustomerCode	VARCHAR(MAX),
--		@UserID			VARCHAR(MAX),
--		@PickedBy		VARCHAR(MAX)

--SET	@CompanyCode	= '6006400001'
--SET	@BranchCode		= '6006400101'
--SET	@JobOrderNo		= 'SPK/14/101625'
--SET	@ProductType	= '4W'
--SET	@CustomerCode	= 'JKT-1852626'
--SET	@UserID			= 'ga'
--SET	@PickedBy		= '00001'
		
--exec uspfn_GenerateBPSLampiranNew '6006400001','6006400101','SPK/14/101625','4W','JKT-1852626','ga','00001'

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl

UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================
SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	

--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	DECLARE @CompanyMD AS VARCHAR(15)
	DECLARE @BranchMD AS VARCHAR(15)
	DECLARE @WarehouseMD AS VARCHAR(15)

	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	SELECT * INTO #Valid_2 FROM(
	SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = @CompanyMD
		AND a.BranchCode = @BranchMD
		AND b.PickingSlipNo = @PickingSlipNo
		AND a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo) #Valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM #Valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM #Valid_2 WHERE QtyValidOnhand < 0),0)

	DROP TABLE #Valid_2

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		RAISERROR (@errmsg,16,1);
		RETURN
	END
--===============================================================================================================================

DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'UPDATE SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM ' + @DbMD + '..SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
UPDATE SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
FROM ' + @DbMD + '..SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND a.WarehouseCode = ' + ''''+@WarehouseMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo'

EXEC(@query)
	
--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)
FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END

CLOSE db_cursor

-- ==============================================================================================================================

DEALLOCATE db_cursor 

--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
END

GO

if object_id('uspfn_SvTrnServiceSelectEstimationData') is not null
	drop procedure uspfn_SvTrnServiceSelectEstimationData
GO
-- ==============================================================================================================================
-- Author:		<Author,,Name>
-- Create date: 2015-03-07
-- Description: Select data transaksi service tipe estimasi untuk digunakan pada lookup input spk admin
-- ==============================================================================================================================

CREATE procedure [dbo].[uspfn_SvTrnServiceSelectEstimationData]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15)
AS
-- EXEC uspfn_SvTrnServiceSelectEstimationData '6156401000', '6156401001', '4W'
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + ' ' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + ' ' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + ' - ' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus='4' then
            case when @ProductType='4W' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3 + '' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = 'SERVSTAS'
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = @CompanyCode 
    AND svTrnService.BranchCode = @BranchCode
 AND svTrnService.ServiceType in ('0','2') and svTrnService.EstimationNo <> ''
 AND svTrnService.ServiceStatus IN (0,1,2,3,4,5) ORDER BY svTrnService.EstimationNo DESC
 
 GO
 create procedure [dbo].[BrowseParameter] 
as
declare @tblParam as table  (
	DBName varchar(50),
	Extensions varchar(50),
	Prefix varchar(50),
	FolderPath varchar(500),
	DCSURL varchar(500),
	TAXURL varchar(500)
)

insert @tblParam (DBName, Extensions, Prefix, FolderPath, DCSURL, TAXURL   )
select (select ParamValue from sysParameter where ParamId='BACKUP_DBNAME'),
(select ParamValue from sysParameter where ParamId='BACKUP_FILEEXT'),
(select ParamValue from sysParameter where ParamId='BACKUP_FILENAME'),
(select ParamValue from sysParameter where ParamId='BACKUP_FOLDERPATH'),
(select ParamValue from sysParameter where ParamId='DCS_URL'),
(select ParamValue from sysParameter where ParamId='TAX_URL')

select  * from @tblParam
GO

CREATE procedure [dbo].[EmployeeTraining] @CompanyCode varchar(50), @BranchCode varchar(50), @EmployeeID varchar(50)
as
select a.CompanyCode, BranchCode, EmployeeID, IsSuzukiTraining, TrainingCode, CONVERT(VARCHAR(50),BeginTrainingDate,106) BeginTrainingDate, CONVERT(VARCHAR(50), EndTrainingDate,106) EndTrainingDate, IsActive, a.CreatedBy, a.CreatedDate, a.LastupdateBy, a.LastupdateDate,
	case when a.IsSuzukiTraining= 1 then c.LookUpValueName else b.LookUpValueName end Notes
	from gnMstEmployeeTraining a
	left join gnMstLookUpDtl b
		on a.CompanyCode = b.CompanyCode and b.CodeID = 'IEDU' and a.TrainingCode=b.LookUpValue 
	left join gnMstLookUpDtl c
		on a.CompanyCode = c.CompanyCode and c.CodeID = 'SZKT' and a.TrainingCode=c.LookUpValue 
	where a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode and a.EmployeeID=@EmployeeID
GO

CREATE procedure [dbo].[spMstModelColour] (@CompanyCode varchar(10) , @SalesModelCode varchar(10))
 as
SELECT CompanyCode, SalesModelCode, ColourCode, RefferenceDesc1, Remark
FROM omMstModelColourView
where CompanyCode=@CompanyCode and SalesModelCode=@SalesModelCode
GO

create procedure [dbo].[uspfn_AbInqAttendance]
	@CompanyCode varchar(12),
	@EmployeeID varchar(25),
	@EmployeeName varchar(100),
	@DateFrom datetime,
	@DateTo datetime
as

begin
	if dbo.uspfn_IsNullOrEmpty(@EmployeeID) = 1 
	begin
		set @EmployeeID = '';
	end

	if dbo.uspfn_IsNullOrEmpty(@EmployeeName) = 1 
	begin
		set @EmployeeName = '';
	end

	select a.EmployeeID
	     , b.EmployeeName
		 , d.OrgName as Department
		 , c.PosName as Position
		 , isnull(e.LookUpValueName, '-') as Grade
		 , AttendanceDate = convert(datetime, (
				SUBSTRING(a.AttdDate, 0, 5) +
				'-' +
				SUBSTRING(a.AttdDate, 5, 2) +
				'-' +
				SUBSTRING(a.AttdDate, 7, 2) 
		   ))
	     --, a.AttdDate
	     , a.OnDutyTime
		 , a.OffDutyTime
	     , a.ClockInTime
		 , a.ClockOutTime
		 , IsAbsence = (
				case 
					when a.ClockInTime is null and a.ClockOutTime is null then 'Yes'
					when a.ClockInTime is not null then 'No'
					when a.ClockInTime is null then 'Yes'
				end
		   )
		 , LateTime = (
				case
					when a.ClockInTime > a.OnDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.OnDutyTime), convert(char(5), a.ClockInTime)))
					else '-'
				end
		   )
		 , ReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.ClockOutTime), convert(char(5), a.OffDutyTime)))
					else '-'
				end
		   )
		 , Overtime = (
				case
					when a.ClockOutTime > a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.OffDutyTime), convert(char(5), a.ClockOutTime)))
					else '-'
				end
		   )
		 , WorkingTime = dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.ClockInTime), convert(char(5), a.ClockOutTime)))
         , Notes = ''
	  from HrEmployeeShift a
	 inner join HrEmployee b
	    on a.CompanyCode=b.CompanyCode
	   and a.EmployeeID=b.EmployeeID
	 inner join gnMstPosition c
	    on c.CompanyCode=a.CompanyCode
	   and c.DeptCode=b.Department
	   and c.PosCode=b.Position
	 inner join gnMstOrgGroup d
	    on d.CompanyCode=a.CompanyCode
	   and d.OrgCode=b.Department
	  left join gnMstLookUpDtl e
	    on e.CompanyCode=a.CompanyCode
	   and e.CodeID='ITSG'
	   and e.LookUpValue=b.Grade
 	 where a.CompanyCode=@CompanyCode 
       and a.AttdDate>=(
				convert(varchar(4), datepart(year, @DateFrom)) +
				right((replicate('0', 1) + convert(varchar(2), datepart(month, @DateFrom))), 2) +
				right((replicate('0', 1) + convert(varchar(2), datepart(day, @DateFrom))), 2)
	       )
	   and a.AttdDate<=(
				convert(varchar(4), datepart(year, @DateTo)) +
				right((replicate('0', 1) + convert(varchar(2), datepart(month, @DateTo))), 2) +
				right((replicate('0', 1) + convert(varchar(2), datepart(day, @DateTo))), 2)
	       )
	   and a.EmployeeID like '%' + @EmployeeID + '%'
	   and a.EmployeeID in (
			select x.EmployeeID
			  from HrEmployee x
			 where x.EmployeeName like '%' + @EmployeeName + '%'
			   and x.EmployeeID like '%' + @EmployeeID + '%'
	   ) 
		
	 order by a.AttdDate asc
end
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usprpt_PmRpInqLostCaseWeb]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[usprpt_PmRpInqLostCaseWeb]
GO

-- =============================================
-- Author:		<Rijal AL>
-- Create date: <26 Mar 2015>
-- Description:	<Analisis Lost Case For Web>
-- =============================================

CREATE PROCEDURE [dbo].[usprpt_PmRpInqLostCaseWeb] 
@CompanyCode		VARCHAR(15) , --= '6159401000',
	@BranchCode			VARCHAR(15) , --= '6159401001',
	@PeriodBegin		VARCHAR(15) , --= '20140101',
	@PeriodEnd			VARCHAR(15) , --= '20140330',
	@BranchManager		VARCHAR(15) , --= '3-BIT',
	@SalesHead			VARCHAR(15) , --= '028',
	@SalesCoordinator	VARCHAR(15) , --= '028',
	@Salesman			VARCHAR(15) --= ''


AS
BEGIN
	SET NOCOUNT ON;
-- Get EmployeeID
--=======================================================================
DECLARE @SalesmanID		VARCHAR(MAX);

if @SalesHead = '' and @Salesman = ''
begin
set @SalesmanID = 'select EmployeeID from HrEmployee where TeamLeader in(
	select EmployeeID from HrEmployee where TeamLeader in (
		select EmployeeID from HrEmployee where TeamLeader = '''+@BranchManager+'''))
	union
	select EmployeeID from HrEmployee where TeamLeader in (
			select EmployeeID from HrEmployee where TeamLeader = '''+@BranchManager+''')'
end
else if @SalesHead <> '' and @Salesman = ''
begin
set @SalesmanID = 'select EmployeeID from HrEmployee where TeamLeader in(
	select EmployeeID from HrEmployee where TeamLeader = '''+@SalesHead+''')
	union
	select EmployeeID from HrEmployee where TeamLeader  = '''+@SalesHead+''''
end
else
begin
set @SalesmanID = 'select EmployeeID from HrEmployee where EmployeeID  = '''+@Salesman+''''
end
--=======================================================================

-- Group By Tipe Kendaraan
--=======================================================================
DECLARE @ByTipeKendaraan		VARCHAR(MAX);
DECLARE @Query1		VARCHAR(MAX);

set @ByTipeKendaraan = 'select
	 a.CompanyCode, a.BranchCode, a.InquiryNumber, a.TipeKendaraan, a.EmployeeID, a.LastProgress
	from 
	 PMKDP a 
	where
	 a.CompanyCode = '''+@CompanyCode+'''
	 and a.BranchCode = '''+@BranchCode+'''
	 and a.InquiryNumber IN (SELECT DISTINCT InquiryNumber FROM PmStatusHistory WHERE CompanyCode = a.CompanyCode 
		and BranchCode = a.BranchCode AND LastProgress=''LOST'' AND CONVERT(VARCHAR, UpdateDate, 112) 
		BETWEEN '''+convert(varchar(30),@PeriodBegin)+''' AND '''+convert(varchar(30),@PeriodEnd)+''')
	 and EmployeeID in ('+@SalesmanID+')
	 and a.TipeKendaraan <> '''''

set @Query1 = 'SELECT 
	DISTINCT(TipeKendaraan),
	(select count(*) from ('+@ByTipeKendaraan+') b where lastprogress <> ''LOST'' AND a.TipeKendaraan = b.TipeKendaraan) Active, 
	(select count(*) from ('+@ByTipeKendaraan+') b where lastprogress = ''LOST'' AND a.TipeKendaraan = b.TipeKendaraan) NonActive
	FROM ('+@ByTipeKendaraan+') a'
	
exec (@Query1)

-- Group By Perolehan Data
--======================================================================
DECLARE @ByPerolehanData		VARCHAR(MAX);
DECLARE @Query2		VARCHAR(MAX);

set @ByPerolehanData = 'select
	 a.CompanyCode, a.BranchCode, a.InquiryNumber, a.PerolehanData, a.EmployeeID, a.LastProgress
	from 
	 PMKDP a 
	where
	 a.CompanyCode = '''+@CompanyCode+'''
	 and a.BranchCode = '''+@BranchCode+'''
	 and a.InquiryNumber IN (SELECT DISTINCT InquiryNumber FROM PmStatusHistory WHERE CompanyCode = a.CompanyCode 
		and BranchCode = a.BranchCode AND LastProgress=''LOST'' AND CONVERT(VARCHAR, UpdateDate, 112) 
		BETWEEN '''+@PeriodBegin+''' AND '''+@PeriodEnd+''')
	 and EmployeeID in ('+@SalesmanID+')'

set @Query2 = 'SELECT 
	DISTINCT(PerolehanData),
	(select count(*) from ('+@ByPerolehanData+') b where lastprogress <> ''LOST'' AND a.PerolehanData = b.PerolehanData) Active, 
	(select count(*) from ('+@ByPerolehanData+') b where lastprogress = ''LOST'' AND a.PerolehanData = b.PerolehanData) NonActive
	FROM ('+@ByPerolehanData+') a'
	
exec (@Query2)

-- Group By Salesman
--=====================================================================
DECLARE @BySalesman		VARCHAR(MAX);
DECLARE @Query3		VARCHAR(MAX);

set @BySalesman = 'select
	 a.CompanyCode, a.BranchCode, a.InquiryNumber, b.EmployeeName, a.EmployeeID, a.LastProgress
	from 
	 PMKDP a
	inner join HrEmployee b
		ON b.CompanyCode = a.CompanyCode and b.EmployeeID = a.EmployeeID
	where
	 a.CompanyCode = '''+@CompanyCode+'''
	 and a.BranchCode = '''+@BranchCode+'''
	 and a.InquiryNumber IN (SELECT DISTINCT InquiryNumber FROM PmStatusHistory WHERE CompanyCode = a.CompanyCode 
		and BranchCode = a.BranchCode AND LastProgress=''LOST'' AND CONVERT(VARCHAR, UpdateDate, 112) 
		BETWEEN '''+@PeriodBegin+''' AND '''+@PeriodEnd+''')
	 and a.EmployeeID in ('+@SalesmanID+')'

set @Query3 = 'SELECT 
	DISTINCT (EmployeeName) Karyawan,
	(select count(*) from ('+@BySalesman+') b where lastprogress <> ''LOST'' AND a.EmployeeID = b.EmployeeID) Active, 
	(select count(*) from ('+@BySalesman+') b where lastprogress = ''LOST'' AND a.EmployeeID = b.EmployeeID) NonActive
	FROM ('+@BySalesman+') a'
	
exec (@Query3)

-- Group By Sales Coordinator
--=====================================================================
DECLARE @BranchName		VARCHAR(MAX);
DECLARE @Query4		VARCHAR(MAX);
set @BranchName = 'SELECT 
	  a.CompanyCode, a.BranchCode, a.InquiryNumber, a.LastProgress, a.SpvEmployeeID, b.BranchName 
	 FROM PMKDP a 
	 LEFT JOIN GnMstOrganizationDtl b
	 ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
	 WHERE
	 a.CompanyCode = '''+@CompanyCode+'''
	 and a.BranchCode = '''+@BranchCode+'''
	 and a.InquiryNumber IN (SELECT DISTINCT InquiryNumber FROM PmStatusHistory WHERE CompanyCode = a.CompanyCode 
		and BranchCode = a.BranchCode AND LastProgress=''LOST'' AND CONVERT(VARCHAR, UpdateDate, 112) 
		BETWEEN '''+@PeriodBegin+''' AND '''+@PeriodEnd+''')
	 and a.EmployeeID in ('+@SalesmanID+')'

set @Query4 = 'SELECT 
	DISTINCT (BranchName) Supervisor,
	(select count(*) from ('+@BranchName+') b where lastprogress <> ''LOST'' AND a.BranchName = b.BranchName) Active, 
	(select count(*) from ('+@BranchName+') b where lastprogress = ''LOST'' AND a.BranchName = b.BranchName) NonActive
	FROM ('+@BranchName+') a'
	
exec (@Query4)

-- Group By Sales Head
--=====================================================================
--DECLARE @BranchName		VARCHAR(MAX);
DECLARE @Query5		VARCHAR(MAX);

set @BranchName = 'SELECT 
	  a.CompanyCode, a.BranchCode, a.InquiryNumber, a.LastProgress, a.SpvEmployeeID, b.BranchName 
	 FROM PMKDP a 
	 LEFT JOIN GnMstOrganizationDtl b
	 ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
	 WHERE
	 a.CompanyCode = '''+@CompanyCode+'''
	 and a.BranchCode = '''+@BranchCode+'''
	 and a.InquiryNumber IN (SELECT DISTINCT InquiryNumber FROM PmStatusHistory WHERE CompanyCode = a.CompanyCode 
		and BranchCode = a.BranchCode AND LastProgress=''LOST'' AND CONVERT(VARCHAR, UpdateDate, 112) 
		BETWEEN '''+@PeriodBegin+''' AND '''+@PeriodEnd+''')
	 and a.EmployeeID in ('+@SalesmanID+')'

set @Query5 = 'SELECT 
	DISTINCT (BranchName) SalesHead,
	(select count(*) from ('+@BranchName+') b where lastprogress <> ''LOST'' AND a.BranchName = b.BranchName) Active, 
	(select count(*) from ('+@BranchName+') b where lastprogress = ''LOST'' AND a.BranchName = b.BranchName) NonActive
	FROM ('+@BranchName+') a'
	
exec (@Query5)

-- Group By Branch Name
--=======================================================================
--DECLARE @BranchName		VARCHAR(MAX);
DECLARE @Query6		VARCHAR(MAX);

set @BranchName = 'SELECT 
	  a.CompanyCode, a.BranchCode, a.InquiryNumber, a.LastProgress, a.SpvEmployeeID, b.BranchName 
	 FROM PMKDP a 
	 LEFT JOIN GnMstOrganizationDtl b
	 ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
	 WHERE
	 a.CompanyCode = '''+@CompanyCode+'''
	 and a.BranchCode = '''+@BranchCode+'''
	 and a.InquiryNumber IN (SELECT DISTINCT InquiryNumber FROM PmStatusHistory WHERE CompanyCode = a.CompanyCode 
		and BranchCode = a.BranchCode AND LastProgress=''LOST'' AND CONVERT(VARCHAR, UpdateDate, 112) 
		BETWEEN '''+@PeriodBegin+''' AND '''+@PeriodEnd+''')
	 and a.EmployeeID in ('+@SalesmanID+')'

set @Query3 = 'SELECT 
	DISTINCT (BranchName),
	(select count(*) from ('+@BranchName+') b where lastprogress <> ''LOST'' AND a.BranchName = b.BranchName) Active, 
	(select count(*) from ('+@BranchName+') b where lastprogress = ''LOST'' AND a.BranchName = b.BranchName) NonActive
	FROM ('+@BranchName+') a'
	
exec (@Query3)

-- Query Utama
--=======================================================================================
DECLARE @Utama		VARCHAR(MAX);

set @Utama = 'SELECT
 a.CompanyCode, a.BranchCode, a.InquiryNumber, a.NamaProspek, a.Inquirydate, ISNULL(a.TipeKendaraan,''-'') TipeKendaraan, 
 ISNULL(a.Variant,''-'') Variant, ISNULL(a.Transmisi,''-'') Transmisi,
 b.RefferenceDesc1 Warna, a.PerolehanData, c.EmployeeName Employee, d.EmployeeName Supervisor,
 a.LastProgress, e.UpdateDate TglLost, f.LookUpValueName KategoriLost, g.LookUpValueName Reason,
 a.LostCaseVoiceofCustomer VOC, a.SpvEmployeeID
FROM
 PmKDP a
LEFT JOIN OmMstRefference b
ON b.CompanyCode = a.CompanyCode AND b.RefferenceType = ''COLO'' AND b.RefferenceCode = a.ColourCode
LEFT JOIN HrEmployee c
ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
LEFT JOIN HrEmployee d
ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
LEFT JOIN PmStatusHistory e
ON e.InquiryNumber = a.InquiryNumber AND e.CompanyCode = a.CompanyCode 
AND e.BranchCode = a.BranchCode AND e.SequenceNo = (SELECT TOP 1 SequenceNo FROM PmStatusHistory
		WHERE InquiryNumber = a.InquiryNumber AND CompanyCode = a.CompanyCode 
		AND BranchCode = a.BranchCode AND LastProgress=''LOST'' ORDER BY SequenceNo DESC)
LEFT JOIN GnMstLookUpDtl f
ON f.CompanyCode = a.CompanyCode AND f.CodeID = ''PLCC'' AND f.LookUpValue = a.LostCaseCategory
LEFT JOIN GnMstLookUpDtl g
ON g.CompanyCode = a.CompanyCode AND g.CodeID = ''ITLR'' AND g.LookUpValue = a.LostCaseReasonID
WHERE
 a.CompanyCode = '''+@CompanyCode+''' 
 AND a.BranchCode = '''+@BranchCode+'''
 AND a.LastProgress = ''LOST'' 
 AND CONVERT(VARCHAR, e.UpdateDate, 112) BETWEEN '''+@PeriodBegin+''' AND '''+@PeriodEnd+''' 
 AND a.EmployeeID in ('+@SalesmanID+')'

Exec (@Utama)

-- Pivot
--=====================================================================
declare	@columns			VARCHAR(MAX)
declare	@columns2			VARCHAR(MAX)
declare	@Pivot				VARCHAR(MAX)

select	@columns = coalesce(@columns + ',[' + cast(LookUpValue as varchar) + ']',
				'[' + cast(LookUpValue as varchar)+ ']') 
		,@columns2 = coalesce(@columns2 + ',isnull([' + cast(LookUpValue as varchar) + '],0) as '+ LookUpValue +'',
		'isnull([' + cast(LookUpValue as varchar)+ '],0) as '+ LookUpValue +'')
from
(
	select	a.LookUpValue
	from	gnMstLookUpDtl a
	where	CompanyCode=@CompanyCode and CodeID='PLCC'
) as x

set @Pivot='
select 
	p.TipeKendaraan, '+ @columns2 +'
from (
	select 
		a.TipeKendaraan
		,d.LookupValue LostCaseCategory
		,count(d.LookupValue) Quantity
	from 
		pmKDP a	
	left join PmStatusHistory b
	on b.InquiryNumber = a.InquiryNumber AND b.CompanyCode = a.CompanyCode 
	and b.BranchCode = a.BranchCode and b.SequenceNo = (select top 1 SequenceNo from PmStatusHistory
			where InquiryNumber = a.InquiryNumber and CompanyCode = a.CompanyCode 
			and BranchCode = a.BranchCode and LastProgress=''LOST'' order by SequenceNo desc)
	left join gnMstLookUpDtl d on d.CompanyCode=a.CompanyCode and CodeID=''PLCC'' 
		and LookUpValue=a.LostCaseCategory
	where
		a.LastProgress= ''LOST''
		and a.EmployeeID in ('+@SalesmanID+')
		and convert(varchar, b.UpdateDate, 112) between '''+@PeriodBegin+''' and '''+@PeriodEnd+''' 
	group by
		a.CompanyCode,a.BranchCode,d.LookupValue,a.TipeKendaraan
) as b
pivot
(
	sum(Quantity)
	for LostCaseCategory 
	in ('+@columns+')
) as p
order by p.TipeKendaraan'


exec(@Pivot)



-- Get GnMstLookUpDtl (Kategori Lost Case) 
--===========================
SELECT LookupValue+' : '+LookUpValueName AS Kategori, LookupValue FROM gnMstLookupDtl 
WHERE CompanyCode=@CompanyCode AND CodeID='PLCC'

END
GO







