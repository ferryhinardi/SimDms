UPDATE [dbo].[spMstItemTPGO] SET [TypeOfGoods] = '' WHERE [TypeOfGoods] IS NULL
GO
UPDATE [dbo].[svTrnClaimApplication] SET [TechnicalModel] = '' WHERE [TechnicalModel] IS NULL
GO
UPDATE [dbo].[pmKDP] SET [QuantityInquiry] = ((1)) WHERE [QuantityInquiry] IS NULL
GO
ALTER TABLE [dbo].[spTrnIMovement] ALTER COLUMN [SubSignCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[spTrnIMovement] ALTER COLUMN [SignCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[sysUser] ADD 
[IsMobile] [bit] NULL
GO
ALTER TABLE [dbo].[SysMessageBoards] ALTER COLUMN [MessageHeader] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[SysMessageBoards] ALTER COLUMN [MessageTo] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[sysSingleScreen] ALTER COLUMN [ComputerAddress] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[spMstItemTPGO] ALTER COLUMN [TypeOfGoods] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[spTrnIMovement] ALTER COLUMN [PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[spMstItemTPGO] DROP COLUMN [PartName]
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [UsedTime] [numeric] (9,2) NULL
GO
ALTER TABLE [dbo].[sysUserActivity] ALTER COLUMN [UserHostAddress] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[svTrnClaimBatch] ALTER COLUMN [LotNo] [numeric] (9,0) NULL
GO
ALTER TABLE [dbo].[svTrnClaimApplication] ALTER COLUMN [TechnicalModel] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[SvRcvForm] ADD 
[Body16Chk] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Body17Chk] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [TotalTime] [numeric] (9,2) NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [AvailableTime] [numeric] (9,2) NULL
GO
ALTER TABLE [dbo].[svTrnClaimBatch] ALTER COLUMN [ProcessSeq] [numeric] (9,0) NULL
GO
ALTER TABLE [dbo].[svHstSzkMSI] ADD 
[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[CreatedDate] [datetime] NULL
GO
ALTER TABLE [dbo].[arTrnReceipt] ALTER COLUMN [Description] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[SvRcvForm] ALTER COLUMN [Address1] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [IsLocked] [bit] NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [CreatedDate] [datetime] NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [TotalActiveMechanic] [numeric] (5,0) NULL
GO
ALTER TABLE [dbo].[gnMstCoProfileService] ADD 
[DealerCodeWSMR] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[svTrnService] ADD 
[JobOrderClosed] [datetime] NULL
GO
ALTER TABLE [dbo].[svTrnService] ALTER COLUMN [ServiceRequestDesc] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[tabTemp] ALTER COLUMN [pfc] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[tabTemp] ALTER COLUMN [pname] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[TempLaporanGLHQ] ALTER COLUMN [ID] [bigint] NOT NULL
GO
ALTER TABLE [dbo].[arPostingHistDtl] ALTER COLUMN [DocNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [EstimateTimeFlag] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[svHstEstimateTime] ALTER COLUMN [TotalActiveStall] [numeric] (5,0) NULL
GO
ALTER TABLE [dbo].[SvTrnReturn] ALTER COLUMN [RefferenceNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[svTrnInvoice] ALTER COLUMN [Remarks] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[svTrnInvoice] ALTER COLUMN [ServiceRequestDesc] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[gnMstApproval] DROP COLUMN [Lockingate]
GO
ALTER TABLE [dbo].[gnMstApproval] ADD 
[LockingDate] [datetime] NULL
GO
ALTER TABLE [dbo].[gnMstEmployee] ADD 
[EmpPhotoID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[EmpIdentityCardID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[EmpImageID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[EmpIdentityCardImageID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[gnMstEmployee] ALTER COLUMN [CityCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[omMstRefference] ADD 
[RefferenceDesc] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[gnMstEmployee] ALTER COLUMN [PhoneNo] [varchar] (65) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[gnMstEmployee] ALTER COLUMN [ProvinceCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[gnMstEmployee] ALTER COLUMN [AreaCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[gnMstEmployee] ALTER COLUMN [HpNo] [varchar] (65) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[gnMstEmployee] ALTER COLUMN [FaxNo] [varchar] (65) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[pmKDP] ALTER COLUMN [QuantityInquiry] [int] NOT NULL
GO
ALTER TABLE [dbo].[omTrSalesSOAccsSeq] ALTER COLUMN [PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[omTrInventTransferOut] ALTER COLUMN [ReferenceNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
ALTER TABLE [dbo].[omTrSalesInvoiceAccsSeq] ALTER COLUMN [PartNo] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[omFakturPajakDetailAccsSeq] ALTER COLUMN [PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
ALTER TABLE [dbo].[omTrSalesSOAccs] ALTER COLUMN [PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
CREATE TABLE [dbo].[sysUserGroupWeb]
(
	[UserId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GroupId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsAdmin] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstPosition]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PosName] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosHeader] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosLevel] [int] NULL,
	[StartDate] [datetime] NULL,
	[FinishDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[TitleCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsGrade] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[tempSalesModel]
(
	[SalesModelCode] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[GnMstSendScheduleDms]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DataType] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastSendDate] [datetime] NULL,
	[SegmentNo] [int] NULL,
	[SPName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Priority] [int] NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColumnLastUpdate] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstPositionPerson]
(
	[PositionPersonID] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosSeq] [int] NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[ParentID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrAbsenceFile]
(
	[FileID] [varchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FileName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FileContent] [varbinary] (max) NULL,
	[FileType] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FileSize] [int] NULL,
	[UploadedBy] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UploadedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrDepartmentTraining]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Department] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Position] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Grade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsRequired] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF__HrDepartm__IsDel__345EC57D] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployee]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeName] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FaxNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Handphone1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Handphone2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Handphone3] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Handphone4] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Telephone1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Telephone2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OfficeLocation] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsLinkedUser] [bit] NULL,
	[RelatedUser] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[Department] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Position] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Rank] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Gender] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TeamLeader] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PersonnelStatus] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ResignDate] [datetime] NULL,
	[ResignDescription] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IdentityNo] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NPWPNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NPWPDate] [datetime] NULL,
	[BirthDate] [datetime] NULL,
	[BirthPlace] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address1] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address2] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address3] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address4] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Province] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[District] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SubDistrict] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Village] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ZipCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MaritalStatus] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MaritalStatusCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Height] [numeric] (6,2) NULL,
	[Weight] [numeric] (6,2) NULL,
	[UniformSize] [numeric] (6,0) NULL,
	[UniformSizeAlt] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ShoesSize] [numeric] (6,0) NULL,
	[FormalEducation] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BloodCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OtherInformation] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[Religion] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SelfPhoto] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IdentityCardPhoto] [varchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF__HrEmploye__IsDel__1A9EF37A] DEFAULT ((0)),
	[ResignCategory] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

create trigger [dbo].[HrEmployeeUpdTrig] on HrEmployee

for update as
begin
	declare @rows int
	declare @trgdate datetime

	select @rows = @@rowcount, @trgdate = getdate()

	if @rows = 1
	begin
		update gnMstEmployee
		   set EmployeeName = (select top 1 EmployeeName from inserted)
			 , Address1 = (select top 1 Address1 from inserted)
			 , Address2 = (select top 1 Address2 from inserted)
			 , Address3 = (select top 1 Address3 from inserted)
			 , Address4 = (select top 1 Address4 from inserted)
			 , PhoneNo = (select top 1 Telephone1 from inserted)
			 , HpNo = (select top 1 Telephone2 from inserted)
			 , FaxNo = (select top 1 FaxNo from inserted)
			 , ZipNo = (select top 1 ZipCode from inserted)
			 , JoinDate = (select top 1 JoinDate from inserted)
			 , GenderCode  = (select top 1 Gender from inserted)
			 , BirthPlace = (select top 1 BirthPlace from inserted)
			 , BirthDate = (select top 1 BirthDate from inserted)
			 , MaritalStatusCode = (select top 1 MaritalStatus from inserted)
			 , ReligionCode = (select top 1 Religion from inserted)
			 , BloodCode = (select top 1 BloodCode from inserted)
			 , IdentityNo = (select top 1 IdentityNo from inserted)
			 , Height = (select top 1 Height from inserted)
			 , Weight = (select top 1 Weight from inserted)
			 , UniformSize = (select top 1 UniformSize from inserted)
			 , ShoesSize = (select top 1 ShoesSize from inserted)
			 , FormalEducation = (select top 1 FormalEducation from inserted)
			 , PersonnelStatus = (select top 1 PersonnelStatus from inserted)
		 where CompanyCode = (select top 1 CompanyCode from inserted)
		   and EmployeeID = (select top 1 EmployeeID from inserted)	
		   and CreatedBy = 'init-trg' 
		   and LastupdateBy = 'init-trg' 

    insert into gnMstEmployee (CompanyCode, BranchCode, EmployeeID, EmployeeName, Address1, Address2, Address3, Address4, PhoneNo, HpNo, FaxNo, ProvinceCode, AreaCode, CityCode, ZipNo, TitleCode, JoinDate, ResignDate, GenderCode, BirthPlace, BirthDate, MaritalStatusCode, ReligionCode, BloodCode, IdentityNo, Height, Weight, UniformSize, ShoesSize, FormalEducation, PersonnelStatus, IsLocked, LockingBy, LockingDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate)
	select a.CompanyCode
		 , b.BranchCode
		 , a.EmployeeID
		 , a.EmployeeName
		 , a.Address1
		 , a.Address2
		 , a.Address3
		 , a.Address4
		 , a.Telephone1 as PhoneNo
		 , a.Telephone2 as HPNo
		 , a.FaxNo
		 , '' ProvinceCode
		 , '' AreaCode
		 , '' CityCode
		 , a.ZipCode
		 , '' TitleCode
		 , a.JoinDate
		 , null as ResignDate
		 , Gender as GenderCode
		 , a.BirthPlace
		 , a.BirthDate
		 , a.MaritalStatus as MaritalStatusCode
		 , a.Religion as ReligionCode
		 , a.BloodCode
		 , a.IdentityNo
		 , a.Height
		 , a.Weight
		 , a.UniformSize
		 , a.ShoesSize
		 , a.FormalEducation
		 , a.PersonnelStatus
		 , 0 as IsLocked
		 , '' as LockingBy
		 , null as LockingDate
		 , 'init-trg' as CreatedBy
		 , @trgdate as CreatedDate
		 , 'init-trg' as LastUpdateBy
		 , @trgdate as LastUpdateDate
	  from inserted a
	  join gnMstCoProfile b
		on b.CompanyCode = a.CompanyCode
	 where not exists (
			select 1 from gnMstEmployee
			 where CompanyCode = a.CompanyCode
			   and EmployeeID = a.EmployeeID
		)
	end
end
GO

create trigger [dbo].[HrEmployeeInsTrig] on HrEmployee

for insert as
begin
	declare @rows int
	declare @trgdate datetime

	select @rows = @@rowcount, @trgdate = getdate()

	if @rows = 0 return

    insert into gnMstEmployee (CompanyCode, BranchCode, EmployeeID, EmployeeName, Address1, Address2, Address3, Address4, PhoneNo, HpNo, FaxNo, ProvinceCode, AreaCode, CityCode, ZipNo, TitleCode, JoinDate, ResignDate, GenderCode, BirthPlace, BirthDate, MaritalStatusCode, ReligionCode, BloodCode, IdentityNo, Height, Weight, UniformSize, ShoesSize, FormalEducation, PersonnelStatus, IsLocked, LockingBy, LockingDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate)
	select a.CompanyCode
		 , b.BranchCode
		 , a.EmployeeID
		 , a.EmployeeName
		 , a.Address1
		 , a.Address2
		 , a.Address3
		 , a.Address4
		 , a.Telephone1 as PhoneNo
		 , a.Telephone2 as HPNo
		 , a.FaxNo
		 , '' ProvinceCode
		 , '' AreaCode
		 , '' CityCode
		 , a.ZipCode
		 , '' TitleCode
		 , a.JoinDate
		 , null as ResignDate
		 , Gender as GenderCode
		 , a.BirthPlace
		 , a.BirthDate
		 , a.MaritalStatus as MaritalStatusCode
		 , a.Religion as ReligionCode
		 , a.BloodCode
		 , a.IdentityNo
		 , a.Height
		 , a.Weight
		 , a.UniformSize
		 , a.ShoesSize
		 , a.FormalEducation
		 , a.PersonnelStatus
		 , 0 as IsLocked
		 , '' as LockingBy
		 , null as LockingDate
		 , 'init-trg' as CreatedBy
		 , @trgdate as CreatedDate
		 , 'init-trg' as LastUpdateBy
		 , @trgdate as LastUpdateDate
	  from inserted a
	  join gnMstCoProfile b
		on b.CompanyCode = a.CompanyCode
	 where not exists (
			select 1 from gnMstEmployee
			 where CompanyCode = a.CompanyCode
			   and EmployeeID = a.EmployeeID
		)
        
end
GO

CREATE TABLE [dbo].[GnMstSendScheduleDms2]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DataType] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastSendDate] [datetime] NULL,
	[SegmentNo] [int] NULL,
	[SPName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Priority] [int] NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColumnLastUpdate] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TESomMstVehicle]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ChassisCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ChassisNo] [numeric] (10,0) NOT NULL,
	[EngineCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EngineNo] [numeric] (10,0) NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelYear] [numeric] (4,0) NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ServiceBookNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KeyNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[COGSUnit] [numeric] (18,0) NULL,
	[COGSOthers] [numeric] (18,0) NULL,
	[COGSKaroseri] [numeric] (18,0) NULL,
	[PpnBmBuyPaid] [numeric] (18,0) NULL,
	[PpnBmBuy] [numeric] (18,0) NULL,
	[SalesNetAmt] [numeric] (18,0) NULL,
	[PpnBmSellPaid] [numeric] (18,0) NULL,
	[PpnBmSell] [numeric] (18,0) NULL,
	[PONo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[POReturnNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BPUNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HPPNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KaroseriSPKNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KaroseriTerimaNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SONo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SOReturnNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DONo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BPKNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InvoiceNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ReqOutNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TransferOutNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TransferInNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[WarehouseCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Remark] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsAlreadyPDI] [bit] NOT NULL,
	[BPKDate] [datetime] NULL,
	[FakturPolisiNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FakturPolisiDate] [datetime] NULL,
	[PoliceRegistrationNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PoliceRegistrationDate] [datetime] NULL,
	[IsProfitCenterSales] [bit] NOT NULL,
	[IsProfitCenterService] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[IsLocked] [bit] NOT NULL,
	[LockedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LockedDate] [datetime] NULL,
	[IsNonRegister] [bit] NOT NULL,
	[BPUDate] [datetime] NULL,
	[SuzukiDONo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__TESomMstV__Suzuk__36BCDA92] DEFAULT (''),
	[SuzukiDODate] [datetime] NOT NULL CONSTRAINT [DF__TESomMstV__Suzuk__37B0FECB] DEFAULT ('19000101'),
	[SuzukiSJNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__TESomMstV__Suzuk__38A52304] DEFAULT (''),
	[SuzukiSJDate] [datetime] NOT NULL CONSTRAINT [DF__TESomMstV__Suzuk__3999473D] DEFAULT ('19000101'),
	[TransferOutMultiBranchNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__TESomMstV__Trans__3A8D6B76] DEFAULT (''),
	[TransferInMultiBranchNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__TESomMstV__Trans__3B818FAF] DEFAULT ('')
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[GnMstTransferDcs]
(
	[SalesID] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[AreaCode] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DealerCode] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OutletCode] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GradeCode] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StartDate] [datetime] NULL,
	[JobCode] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsAddJob] [nchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AddJobCode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthPlace] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[Education] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone1] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone2] [nchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Religion] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KtpNo] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Sim1] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Sim2] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TerminateStatus] [bit] NULL,
	[TerminationDate] [datetime] NULL,
	[TerminateReason] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [nchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GenderCode] [nvarchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MaritalStatus] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeaderID] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysRoleModule]
(
	[RoleID] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ModuleID] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstEmployeeIdentityCard]
(
	[DocumentID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocumentType] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocumentName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocumentContent] [varbinary] (max) NOT NULL,
	[CreatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[pmStatusHistory_Testing]
(
	[InquiryNumber] [int] NOT NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SequenceNo] [int] NOT NULL,
	[LastProgress] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUser] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstEmployeeMutationTemp]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SeqNo] [int] NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MutationTo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MutationDate] [datetime] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[EmployeeIDNew] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[pmStatusHistoryDCS_Temp]
(
	[InquiryNumber] [int] NOT NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SequenceNo] [int] NOT NULL,
	[LastProgress] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[UpdateUser] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstEmployeeData]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GradeCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JobCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ResignReason] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TeamLeaderID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[Phone1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone3] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone4] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Uniform2] [numeric] (3,0) NULL,
	[NPWPNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SizeAlt] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InActiveDate] [datetime] NULL,
	[AdditionalJob] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OrgCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RankCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ImgPath] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NPWPDate] [datetime] NULL,
	[EmpPhoto] [varbinary] (max) NULL,
	[EmpPhotoType] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmpJoinDate] [datetime] NULL,
	[EmpResignDate] [datetime] NULL,
	[MutationFrom] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutationTo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutationDate] [datetime] NULL,
	[DataSource] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmpIdentityCardID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AdditionalJob1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AdditionalJob2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ProvinceCode] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityCode] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AreaCode] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrShift]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ShiftCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ShiftName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OnDutyTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OffDutyTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OnRestTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OffRestTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[WorkingHour] [int] NULL,
	[IsActive] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrShift__IsDelet__3B0D59BA] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[GnMstEmployeeDocument]
(
	[DocumentID] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocumentType] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DocumentName] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DocumentContent] [varbinary] (max) NULL,
	[CreatedBy] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfEmployeeEducation]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EduSeq] [int] NOT NULL,
	[College] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Education] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[YearBegin] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[YearFinish] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[pmKDP_LOST_matic]
(
	[RowID] [uniqueidentifier] NULL,
	[LostDate] [datetime] NULL,
	[InquiryNumber] [int] NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpvEmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InquiryDate] [datetime] NULL,
	[OutletID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StatusProspek] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PerolehanData] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NamaProspek] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AlamatProspek] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TelpRumah] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NamaPerusahaan] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AlamatPerusahaan] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Jabatan] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Handphone] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Faximile] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TipeKendaraan] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Variant] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Transmisi] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColourCode] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CaraPembayaran] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TestDrive] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[QuantityInquiry] [int] NULL,
	[LastProgress] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateStatus] [datetime] NULL,
	[SPKDate] [datetime] NULL,
	[LostCaseDate] [datetime] NULL,
	[LostCaseCategory] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseReasonID] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseOtherReason] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseVoiceOfCustomer] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreationDate] [datetime] NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[Leasing] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DownPayment] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Tenor] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MerkLain] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnmstfpjseqno_bck]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Year] [int] NOT NULL,
	[FPJSeqNo] [bigint] NULL,
	[IsLocked] [bit] NULL,
	[LockedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LockedTime] [datetime] NULL,
	[SeqNo] [int] NOT NULL,
	[BeginTaxNo] [bigint] NULL,
	[EndTaxNo] [bigint] NULL,
	[EffectiveDate] [datetime] NULL,
	[isActive] [bit] NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omTrSalesFakturPolisi_andreas]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FakturPolisiNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelYear] [numeric] (4,0) NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChassisCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChassisNo] [numeric] (10,0) NULL,
	[EngineCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EngineNo] [numeric] (10,0) NULL,
	[IsBlanko] [bit] NOT NULL,
	[FakturPolisiDate] [datetime] NULL,
	[FakturPolisiProcess] [datetime] NULL,
	[SJImniNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DOImniNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ReqNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsManual] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstOrgGroup]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OrgGroupCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OrgCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OrgName] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OrgHeader] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OrgSeq] [int] NULL,
	[StartDate] [datetime] NULL,
	[FinishDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[pmKDP_Recovery]
(
	[RowID] [uniqueidentifier] NULL,
	[RecoveryDate] [datetime] NULL,
	[InquiryNumber] [int] NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpvEmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InquiryDate] [datetime] NULL,
	[OutletID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StatusProspek] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PerolehanData] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NamaProspek] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AlamatProspek] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TelpRumah] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NamaPerusahaan] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AlamatPerusahaan] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Jabatan] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Handphone] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Faximile] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TipeKendaraan] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Variant] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Transmisi] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColourCode] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CaraPembayaran] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TestDrive] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[QuantityInquiry] [int] NULL,
	[LastProgress] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateStatus] [datetime] NULL,
	[SPKDate] [datetime] NULL,
	[LostCaseDate] [datetime] NULL,
	[LostCaseCategory] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseReasonID] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseOtherReason] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseVoiceOfCustomer] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreationDate] [datetime] NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[Leasing] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DownPayment] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Tenor] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MerkLain] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysSession]
(
	[SessionId] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SessionUser] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[IsLogout] [bit] NULL,
	[LogoutTime] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysRoleUser]
(
	[RoleID] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[UserID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstEmployeePhoto]
(
	[DocumentID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocumentType] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocumentName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocumentContent] [varbinary] (max) NOT NULL,
	[CreatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[pmKDP_Testing]
(
	[InquiryNumber] [int] NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SpvEmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[InquiryDate] [datetime] NOT NULL,
	[OutletID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[StatusProspek] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PerolehanData] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[NamaProspek] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[AlamatProspek] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TelpRumah] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NamaPerusahaan] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AlamatPerusahaan] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Jabatan] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Handphone] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Faximile] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TipeKendaraan] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Variant] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Transmisi] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColourCode] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CaraPembayaran] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TestDrive] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[QuantityInquiry] [int] NULL,
	[LastProgress] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateStatus] [datetime] NULL,
	[SPKDate] [datetime] NULL,
	[LostCaseDate] [datetime] NULL,
	[LostCaseCategory] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseReasonID] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseOtherReason] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LostCaseVoiceOfCustomer] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreationDate] [datetime] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateDate] [datetime] NOT NULL,
	[Leasing] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__pmKDP_Tes__Leasi__52E34C9D] DEFAULT (''),
	[DownPayment] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__pmKDP_Tes__DownP__53D770D6] DEFAULT (''),
	[Tenor] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__pmKDP_Tes__Tenor__54CB950F] DEFAULT (''),
	[MerkLain] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF__pmKDP_Tes__MerkL__55BFB948] DEFAULT ('')
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrHoliday]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HolidayYear] [int] NOT NULL,
	[HolidayCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HolidayDesc] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[IsHoliday] [bit] NULL,
	[ReligionCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrHoliday__IsDel__373CC8D6] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omMstIndent_Recovery]
(
	[RowID] [uniqueidentifier] NULL,
	[RecoveryDate] [datetime] NULL,
	[IndentID] [bigint] NULL,
	[TypeCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MarketModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Variant] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ModelYear] [numeric] (4,0) NULL,
	[Year] [numeric] (4,0) NULL,
	[Month] [numeric] (2,0) NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OriginalQuotaUnits] [numeric] (9,0) NULL,
	[QuotaUnits] [numeric] (9,0) NULL,
	[AllocationUnits] [numeric] (9,0) NULL,
	[UnitStatus] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColourStatus] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[isNeedReposting] [bit] NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrLookupMapping]
(
	[CompanyCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CodeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CodeDescription] [varchar] (350) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrLookupM__IsDel__3830ED0F] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omHstSDMovement]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocDate] [datetime] NOT NULL,
	[Seq] [int] NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[ChassisCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ChassisNo] [numeric] (10,0) NOT NULL,
	[EngineCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EngineNo] [numeric] (10,0) NOT NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[QtyFlag] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProcessStatus] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProcessDate] [datetime] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateDate] [datetime] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeTemp]
(
	[NIK] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Nama] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Department] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Position] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Rank] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Leader] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KTP] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NPWP] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NPWPDate] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeShift]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[AttdDate] [char] (8) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ShiftCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ClockInTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ClockOutTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OnDutyTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OffDutyTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OnRestTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OffRestTime] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CalcOvertime] [numeric] (8,0) NULL,
	[ApprOvertime] [numeric] (8,0) NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__34605C2B] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeVehicle]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[VehSeq] [int] NOT NULL,
	[Type] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Brand] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Model] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PoliceRegNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__3648A49D] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeTraining]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingDate] [datetime] NOT NULL,
	[TrainingSeq] [int] NULL CONSTRAINT [DF_HrEmployeeTraining_TrainingSeq] DEFAULT ((0)),
	[TrainingDuration] [int] NULL,
	[PreTest] [int] NULL,
	[PreTestAlt] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PostTest] [int] NULL,
	[PostTestAlt] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__35548064] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omHstInquirySales_SDY]
(
	[Year] [numeric] (4,0) NOT NULL,
	[Month] [numeric] (2,0) NOT NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Area] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchHeadID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchHeadName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesHeadID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesHeadName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesCoordinatorID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesCoordinatorName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesmanID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesmanName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[ResignDate] [datetime] NULL,
	[GradeDate] [datetime] NULL,
	[Grade] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ModelCatagory] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesType] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SoNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SODate] [datetime] NULL,
	[InvoiceNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InvoiceDate] [datetime] NULL,
	[FakturPolisiNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FakturPolisiDate] [datetime] NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelYear] [numeric] (4,0) NULL,
	[SalesModelDesc] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FakturPolisiDesc] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MarketModel] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GroupMarketModel] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColumnMarketModel] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChassisCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChassisNo] [numeric] (10,0) NULL,
	[EngineCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EngineNo] [numeric] (10,0) NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColourName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[COGS] [numeric] (18,0) NULL,
	[BeforeDiscDPP] [numeric] (18,0) NULL,
	[DiscExcludePPn] [numeric] (18,0) NULL,
	[DiscIncludePPn] [numeric] (18,0) NULL,
	[AfterDiscDPP] [numeric] (18,0) NULL,
	[AfterDiscPPn] [numeric] (18,0) NULL,
	[AfterDiscPPnBM] [numeric] (18,0) NULL,
	[AfterDiscTotal] [numeric] (18,0) NULL,
	[PPnBMPaid] [numeric] (18,0) NULL,
	[OthersDPP] [numeric] (18,0) NULL,
	[OthersPPn] [numeric] (18,0) NULL,
	[ShipAmt] [numeric] (18,0) NULL,
	[DepositAmt] [numeric] (18,0) NULL,
	[OthersAmt] [numeric] (18,0) NULL,
	[Status] [bit] NULL,
	[DCSStatus] [bit] NULL,
	[DCSDate] [datetime] NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[CategoryCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SuzukiDODate] [datetime] NULL,
	[SuzukiFPolDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrUploadedFile]
(
	[Checksum] [varchar] (59) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FileType] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FileName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FileSize] [int] NOT NULL,
	[Contents] [varbinary] (max) NOT NULL,
	[UploadedBy] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[UploadedDate] [datetime] NOT NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrUploade__IsDel__3DE9C665] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrSetting]
(
	[Name] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Value] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrSetting__IsDel__3A193581] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrTrnAttendanceFileDtl]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FileID] [varchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GenerateId] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SequenceNo] [int] NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeName] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AttendanceTime] [datetime] NULL,
	[MachineCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IdentityCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsTransfered] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrTrnAtte__IsDel__3AF77FCA] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrTrnAttendanceFileHdr]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FileID] [varchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GenerateId] [varchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsTransfered] [int] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrTrnAtte__IsDel__390F3758] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[NsdsCityCode]
(
	[CityCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Description] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omHstInquirySales_Backup]
(
	[Year] [numeric] (4,0) NOT NULL,
	[Month] [numeric] (2,0) NOT NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Area] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchHeadID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchHeadName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesHeadID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesHeadName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesCoordinatorID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesCoordinatorName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesmanID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesmanName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[ResignDate] [datetime] NULL,
	[GradeDate] [datetime] NULL,
	[Grade] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ModelCatagory] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesType] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SoNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SODate] [datetime] NULL,
	[InvoiceNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InvoiceDate] [datetime] NULL,
	[FakturPolisiNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FakturPolisiDate] [datetime] NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelYear] [numeric] (4,0) NULL,
	[SalesModelDesc] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FakturPolisiDesc] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MarketModel] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GroupMarketModel] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColumnMarketModel] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChassisCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChassisNo] [numeric] (10,0) NULL,
	[EngineCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EngineNo] [numeric] (10,0) NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ColourName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[COGS] [numeric] (18,0) NULL,
	[BeforeDiscDPP] [numeric] (18,0) NULL,
	[DiscExcludePPn] [numeric] (18,0) NULL,
	[DiscIncludePPn] [numeric] (18,0) NULL,
	[AfterDiscDPP] [numeric] (18,0) NULL,
	[AfterDiscPPn] [numeric] (18,0) NULL,
	[AfterDiscPPnBM] [numeric] (18,0) NULL,
	[AfterDiscTotal] [numeric] (18,0) NULL,
	[PPnBMPaid] [numeric] (18,0) NULL,
	[OthersDPP] [numeric] (18,0) NULL,
	[OthersPPn] [numeric] (18,0) NULL,
	[ShipAmt] [numeric] (18,0) NULL,
	[DepositAmt] [numeric] (18,0) NULL,
	[OthersAmt] [numeric] (18,0) NULL,
	[Status] [bit] NULL,
	[DCSStatus] [bit] NULL,
	[DCSDate] [datetime] NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrMstTraining]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingName] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TrainingDescription] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrMstTrai__IsDel__39251148] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[MAPPING_SMG_SBT]
(
	[OLD_COMPANYCODE] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OLD_BRANCHCODE] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OLD_COMPANYNAME] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OLD_BRANCH] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OLD_GPAR] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[New_CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_Branchcode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_BranchName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_Branch_Account] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KET_NEW_Branch] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Initial_Customercode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_GPAR] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_KET_GPAR] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_KODE_WARE_MPWH] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_KET_WARE_MPWH] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OTHERS1] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OTHERS2] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OTHERS3] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OTHERS4] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OTHERS5] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omMstOwnershipVehicle]
(
	[Seq] [int] IDENTITY (1,1) NOT NULL,
	[ModelType] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OthersBrand] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OthersType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeEducation]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EduSeq] [int] NOT NULL,
	[College] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Education] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[YearBegin] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[YearFinish] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__2F9BA70E] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omTrPurchaseHPPDetailModel_BCK]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HPPNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BPUNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[Quantity] [numeric] (6,0) NULL,
	[BeforeDiscDPP] [numeric] (18,0) NULL,
	[DiscExcludePPn] [numeric] (18,0) NULL,
	[AfterDiscDPP] [numeric] (18,0) NULL,
	[AfterDiscPPn] [numeric] (18,0) NULL,
	[AfterDiscPPnBM] [numeric] (18,0) NULL,
	[AfterDiscTotal] [numeric] (18,0) NULL,
	[PPnBMPaid] [numeric] (18,0) NULL,
	[OthersDPP] [numeric] (18,0) NULL,
	[OthersPPn] [numeric] (18,0) NULL,
	[Remark] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeExperience]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ExpSeq] [int] NOT NULL,
	[NameOfCompany] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[ResignDate] [datetime] NULL,
	[ReasonOfResign] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeaderName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeaderPhone] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeaderHP] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__308FCB47] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[OmTrInventQtyVehicle_bak]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Year] [numeric] (4,0) NOT NULL,
	[Month] [numeric] (2,0) NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[QtyIn] [numeric] (6,0) NULL,
	[Alocation] [numeric] (6,0) NULL,
	[QtyOut] [numeric] (6,0) NULL,
	[BeginningOH] [numeric] (6,0) NULL,
	[EndingOH] [numeric] (6,0) NULL,
	[BeginningAV] [numeric] (6,0) NULL,
	[EndingAV] [numeric] (6,0) NULL,
	[Remark] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[IsLocked] [bit] NULL,
	[LockedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LockedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeAdditionalBranch]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SeqNo] [int] NOT NULL,
	[BranchCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AssignDate] [datetime] NULL,
	[ExpiredDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__2DB35E9C] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeAchievement]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[AssignDate] [datetime] NOT NULL,
	[Department] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Position] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsJoinDate] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__2CBF3A63] DEFAULT ((0))
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_859] ON [dbo].[HrEmployeeAchievement]
(
	[IsDeleted] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO


CREATE TABLE [dbo].[HrEmployeeAdditionalJob]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SeqNo] [int] NOT NULL,
	[Department] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Position] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AssignDate] [datetime] NULL,
	[ExpiredDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__2EA782D5] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omtrPurchasePOmodel_bCk]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PONo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[BeforeDiscDPP] [numeric] (18,0) NULL,
	[BeforeDiscPPn] [numeric] (18,0) NULL,
	[BeforeDiscPPnBM] [numeric] (18,0) NULL,
	[BeforeDiscTotal] [numeric] (18,0) NULL,
	[DiscExcludePPn] [numeric] (18,0) NULL,
	[DiscIncludePPn] [numeric] (18,0) NULL,
	[AfterDiscDPP] [numeric] (18,0) NULL,
	[AfterDiscPPn] [numeric] (18,0) NULL,
	[AfterDiscPPnBM] [numeric] (18,0) NULL,
	[AfterDiscTotal] [numeric] (18,0) NULL,
	[PPnBMPaid] [numeric] (18,0) NULL,
	[OthersDPP] [numeric] (18,0) NULL,
	[OthersPPn] [numeric] (18,0) NULL,
	[QuantityPO] [numeric] (6,0) NULL,
	[QuantityBPU] [numeric] (6,0) NULL,
	[Remark] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omTrIndent_Recovery]
(
	[RowID] [uniqueidentifier] NULL,
	[RecoveryDate] [datetime] NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InquiryNumber] [bigint] NULL,
	[IndentID] [bigint] NULL,
	[AllocationUnits] [numeric] (9,0) NULL,
	[DeliverySchedule] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SKPKNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SKPKDate] [datetime] NULL,
	[CustomerID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerBirthPlace] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerBirthDate] [datetime] NULL,
	[OriginalAllocationUnits] [numeric] (9,0) NULL,
	[OriginalDeliveryDate] [datetime] NULL,
	[InquiryStatus] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IndentStatus] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SPKDate] [datetime] NULL,
	[CancelDate] [datetime] NULL,
	[Notes] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeSales]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesID] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[IsSyncronized] [bit] NULL,
	[IsTransfered] [bit] NULL,
	[SyncronizedDate] [datetime] NULL,
	[TransferedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__327813B9] DEFAULT ((0)),
	[UpdatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omPriceListBranchesLog]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SupplierCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GroupPrice] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[EffectiveDate] [datetime] NOT NULL,
	[RetailPriceIncludePPN] [numeric] (18,0) NULL,
	[DiscPriceIncludePPN] [numeric] (18,0) NULL,
	[NetSalesIncludePPN] [numeric] (18,0) NULL,
	[RetailPriceExcludePPN] [numeric] (18,0) NULL,
	[DiscPriceExcludePPN] [numeric] (18,0) NULL,
	[NetSalesExcludePPN] [numeric] (18,0) NULL,
	[PPNBeforeDisc] [numeric] (18,0) NULL,
	[PPNAfterDisc] [numeric] (18,0) NULL,
	[PPNBMPaid] [numeric] (18,0) NULL,
	[isStatus] [bit] NULL,
	[LastUpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeService]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ServiceID] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[IsTransfered] [bit] NULL,
	[SyncronizedDate] [datetime] NULL,
	[TransferedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__15C5FB1B] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omPriceListBranches]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SupplierCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GroupPrice] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[EffectiveDate] [datetime] NOT NULL,
	[RetailPriceIncludePPN] [numeric] (18,0) NULL,
	[DiscPriceIncludePPN] [numeric] (18,0) NULL,
	[NetSalesIncludePPN] [numeric] (18,0) NULL,
	[RetailPriceExcludePPN] [numeric] (18,0) NULL,
	[DiscPriceExcludePPN] [numeric] (18,0) NULL,
	[NetSalesExcludePPN] [numeric] (18,0) NULL,
	[PPNBeforeDisc] [numeric] (18,0) NULL,
	[PPNAfterDisc] [numeric] (18,0) NULL,
	[PPNBMPaid] [numeric] (18,0) NULL,
	[isStatus] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeIDChangedHistory]
(
	[CompanyCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OldEmployeeID] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[NewEmployeeID] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedBy] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omSejutaRecords]
(
	[VIN] [varchar] (17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NoRangka] [varchar] (6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KodeRangka] [varchar] (11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NoMesin] [varchar] (7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KodeMesin] [varchar] (7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BasicCode] [varchar] (7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TechCode] [varchar] (4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BukuService] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KodeWarna] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DescWarna] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MisteryNo] [varchar] (8) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DoNo] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DoDate] [numeric] (18,0) NULL,
	[SJNo] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SJDate] [numeric] (18,0) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[HrEmployeeMutation]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MutationDate] [datetime] NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsJoinDate] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL CONSTRAINT [DF__HrEmploye__IsDel__3183EF80] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[omSDMovement]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocDate] [datetime] NOT NULL,
	[Seq] [int] NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[ChassisCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ChassisNo] [numeric] (10,0) NOT NULL,
	[EngineCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EngineNo] [numeric] (10,0) NOT NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[QtyFlag] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProcessStatus] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProcessDate] [datetime] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateDate] [datetime] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[GnMstDcsSdmsMapping]
(
	[CompanyCode] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GroupCode] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DcsCode] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SdmsCode] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateDate] [datetime] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[svSDMovement]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocDate] [datetime] NOT NULL,
	[PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartSeq] [int] NOT NULL,
	[WarehouseCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[QtyOrder] [numeric] (18,2) NOT NULL,
	[Qty] [numeric] (18,2) NOT NULL,
	[DiscPct] [numeric] (5,2) NOT NULL,
	[CostPrice] [numeric] (18,2) NOT NULL,
	[RetailPrice] [numeric] (18,2) NOT NULL,
	[TypeOfGoods] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[RetailPriceInclTaxMD] [numeric] (18,2) NOT NULL,
	[RetailPriceMD] [numeric] (18,2) NOT NULL,
	[CostPriceMD] [numeric] (18,2) NOT NULL,
	[QtyFlag] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProductType] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProfitCenterCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProcessStatus] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProcessDate] [datetime] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustFeedback]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Chassis] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FeedbackA] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FeedbackB] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FeedbackC] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FeedbackD] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsManual] [bit] NULL CONSTRAINT [DF__CsCustFee__IsMan__53F76C67] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[svPreJobOrder]
(
	[PreJobOrderID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PreJobOrderDate] [datetime] NOT NULL,
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PoliceRegNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ContactName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Address01] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Address02] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Address03] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PhoneNo1] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PhoneNo2] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PhoneNo3] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BasicModel] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ChassisCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ChassisNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EngineCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EngineNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProductionYear] [int] NOT NULL,
	[Odometer] [int] NOT NULL,
	[EstFinishDate] [datetime] NULL,
	[FuelPercent] [int] NOT NULL,
	[PackServiceCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FrontmanCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BodyNote01] [bit] NOT NULL,
	[BodyNote02] [bit] NOT NULL,
	[BodyNote03] [bit] NOT NULL,
	[BodyNote04] [bit] NOT NULL,
	[BodyNote05] [bit] NOT NULL,
	[CabinNote01] [bit] NOT NULL,
	[CabinNote02] [bit] NOT NULL,
	[CabinNote03] [bit] NOT NULL,
	[CabinNote04] [bit] NOT NULL,
	[CabinNote05] [bit] NOT NULL,
	[EngineRoom01] [bit] NOT NULL,
	[EngineRoom02] [bit] NOT NULL,
	[EngineRoom03] [bit] NOT NULL,
	[EngineRoom04] [bit] NOT NULL,
	[EngineRoom05] [bit] NOT NULL,
	[DocumentNote01] [bit] NOT NULL,
	[DocumentNote02] [bit] NOT NULL,
	[DocumentNote03] [bit] NOT NULL,
	[DocumentNote04] [bit] NOT NULL,
	[DocumentNote05] [bit] NOT NULL,
	[FinalExplaination01] [bit] NOT NULL,
	[FinalExplaination02] [bit] NOT NULL,
	[FinalExplaination03] [bit] NOT NULL,
	[FinalExplaination04] [bit] NOT NULL,
	[FinalExplaination05] [bit] NOT NULL,
	[FinalExplaination06] [bit] NOT NULL,
	[PreJobOrderStatus] [int] NOT NULL,
	[JobOrderNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[JobOrderDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustHoliday]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PeriodYear] [int] NOT NULL,
	[GiftSeq] [int] NOT NULL,
	[ReligionCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HolidayCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsGiftCard] [bit] NULL,
	[IsGiftLetter] [bit] NULL,
	[IsGiftSms] [bit] NULL,
	[IsGiftSouvenir] [bit] NULL,
	[SouvenirSent] [datetime] NULL,
	[SouvenirReceived] [datetime] NULL,
	[Comment] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Additional] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [int] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SyncEmployee]
(
	[SyncID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeName] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TeamLeaderID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NULL,
	[AdditionalData] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsTransfered] [bit] NULL,
	[TransferedID] [char] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TransferedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustBpkb]
(
	[CompanyCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Chassis] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BpkbReadyDate] [datetime] NULL,
	[BpkbPickUp] [datetime] NULL,
	[ReqKtp] [bit] NULL,
	[ReqSuratKuasa] [bit] NULL,
	[Comment] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Additional] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [int] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[ReqStnk] [bit] NULL,
	[ReqInfoLeasing] [bit] NULL,
	[ReqInfoCust] [bit] NULL,
	[Tenor] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeasingCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerCategory] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FinishDate] [datetime] NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysReportDms]
(
	[ReportID] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ReportPath] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ReportProc] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustData]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[AddPhone1] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AddPhone2] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ReligionCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NULL,
	[CreatedBy] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustomerVehicle]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Chassis] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[StnkDate] [datetime] NULL,
	[BpkbDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustRelation]
(
	[CompanyCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[RelationType] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FullName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PhoneNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RelationInfo] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[TypeOfGift] [varchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SentGiftDate] [datetime] NULL,
	[ReceivedGiftDate] [datetime] NULL,
	[Comment] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustomerView]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerType] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address] [varchar] (301) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PhoneNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HPNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AddPhone1] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AddPhone2] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[ReligionCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsLkuBirthdayView]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerAddress] [varchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PeriodOfYear] [int] NULL,
	[AdditionalInquiries] [varchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [bit] NULL,
	[CustomerName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerTelephone] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerBirthDate] [datetime] NULL,
	[CustomerGiftSentDate] [datetime] NULL,
	[CustomerGiftReceivedDate] [datetime] NULL,
	[CustomerTypeOfGift] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerComment] [varchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseTelephone] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseRelation] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseBirthDate] [datetime] NULL,
	[SpouseGiftSentDate] [datetime] NULL,
	[SpouseGiftReceivedDate] [datetime] NULL,
	[SpouseTypeOfGift] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseComment] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildName1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTelephone1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildRelation1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildBirthDate1] [datetime] NULL,
	[ChildGiftSentDate1] [datetime] NULL,
	[ChildGiftReceivedDate1] [datetime] NULL,
	[ChildTypeOfGift1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildComment1] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildName2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTelephone2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildRelation2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildBirthDate2] [datetime] NULL,
	[ChildGiftSentDate2] [datetime] NULL,
	[ChildGiftReceivedDate2] [datetime] NULL,
	[ChildTypeOfGift2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildComment2] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildName3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTelephone3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildRelation3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildBirthDate3] [datetime] NULL,
	[ChildGiftSentDate3] [datetime] NULL,
	[ChildGiftReceivedDate3] [datetime] NULL,
	[ChildTypeOfGift3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildComment3] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NumberOfChildren] [int] NULL,
	[NumberOfSpouse] [int] NULL,
	[Outstanding] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[spAttribute4]
(
	[BranchCode] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PartNo] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ABCClass] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustomerVehicleView]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Chassis] [varchar] (45) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Engine] [varchar] (45) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SONo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DONo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DODate] [datetime] NULL,
	[BpkNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CarType] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Color] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesmanCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesmanName] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PoliceRegNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeliveryDate] [datetime] NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelYear] [numeric] (4,0) NULL,
	[ColourCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BPKDate] [datetime] NULL,
	[IsLeasing] [bit] NULL,
	[LeasingCo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeasingName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Installment] [numeric] (3,0) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[svMstTask_temp]
(
	[CompanyCode] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ProductType] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BasicModel] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JobType] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OperationNo] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Description] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OperationHour] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ClaimHour] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LaborCost] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LaborPrice] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TechnicalModelCode] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsSubCon] [bit] NOT NULL,
	[IsCampaign] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastupdateBy] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastupdateDate] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsLocked] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LockingBy] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LockingDate] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BillType] [nvarchar] (255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[sysRole]
(
	[RoleId] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[RoleName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Themes] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsActive] [bit] NOT NULL,
	[IsAdmin] [bit] NULL,
	[IsChangeBranchCode] [bit] NULL CONSTRAINT [DF__sysRole__IsChang__208CD6FA] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[spTrnSORDDtl_BCK]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DocNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseCode] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartNoOriginal] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ReferenceNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ReferenceDate] [datetime] NULL,
	[LocationCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[QtyOrder] [numeric] (18,2) NULL,
	[QtySupply] [numeric] (18,2) NULL,
	[QtyBO] [numeric] (18,2) NULL,
	[QtyBOSupply] [numeric] (18,2) NULL,
	[QtyBOCancel] [numeric] (18,2) NULL,
	[QtyBill] [numeric] (18,2) NULL,
	[RetailPriceInclTax] [numeric] (18,0) NULL,
	[RetailPrice] [numeric] (18,0) NULL,
	[CostPrice] [numeric] (18,0) NULL,
	[DiscPct] [numeric] (5,2) NULL,
	[SalesAmt] [numeric] (18,0) NULL,
	[DiscAmt] [numeric] (18,0) NULL,
	[NetSalesAmt] [numeric] (18,0) NULL,
	[PPNAmt] [numeric] (18,0) NULL,
	[TotSalesAmt] [numeric] (18,0) NULL,
	[MovingCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ABCClass] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ProductType] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PartCategory] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[StockAllocatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StockAllocatedDate] [datetime] NULL,
	[FirstDemandQty] [numeric] (18,2) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsCustBirthDay]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PeriodYear] [int] NOT NULL,
	[TypeOfGift] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SentGiftDate] [datetime] NULL,
	[ReceivedGiftDate] [datetime] NULL,
	[Comment] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AdditionalInquiries] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[SpouseName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildName1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildName2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildName3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseBirthday] [datetime] NULL,
	[ChildBirthday1] [datetime] NULL,
	[ChildBirthday2] [datetime] NULL,
	[ChildBirthday3] [datetime] NULL,
	[SpouseComment] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildComment1] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildComment2] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildComment3] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseGiftSentDate] [datetime] NULL,
	[ChildGiftSentDate1] [datetime] NULL,
	[ChildGiftSentDate2] [datetime] NULL,
	[ChildGiftSentDate3] [datetime] NULL,
	[SpouseTypeOfGift] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTypeOfGift1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTypeOfGift2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseRelation] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildRelation1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildRelation2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildRelation3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTelephone1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTelephone2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChildTelephone3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseGiftReceivedDate] [datetime] NULL,
	[ChildGiftReceivedDate1] [datetime] NULL,
	[ChildGiftReceivedDate2] [datetime] NULL,
	[ChildGiftReceivedDate3] [datetime] NULL,
	[ChildTypeOfGift3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SpouseTelephone] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysMenuWebUser]
(
	[MenuId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[UserId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysHrEmployeeTemp]
(
	[No] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NikSdms] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Nik] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Nama] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Cabang] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[Department] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Position] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Rank] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Leader] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grading] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GradingDate] [datetime] NULL,
	[Ktp] [varchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Npwp] [varchar] (64) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NpwpDate] [datetime] NULL,
	[BirthPlace] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[Address] [varchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SubDistric] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[District] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Province] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Gender] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Religion] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MaritalStatus] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Height] [numeric] (18,0) NULL,
	[Weight] [numeric] (18,0) NULL,
	[UniformSize] [numeric] (18,0) NULL,
	[Education] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BloodCode] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[sysGroupWeb]
(
	[GroupId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GroupName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsActive] [bit] NOT NULL,
	[Themes] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MaxScreen] [int] NULL,
	[IsAdmin] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysHrEmployeeHP]
(
	[NIK] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HP1] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HP2] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HP3] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HP4] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysMenuWebAction]
(
	[MenuId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ActionName] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ControllerName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Area] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SilverlightLink] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsAjaxReady] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfEmployeeExperience]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ExpSeq] [int] NOT NULL,
	[NameOfCompany] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[ResignDate] [datetime] NULL,
	[ReasonOfResign] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[LeaderName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeaderPhone] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeaderHP] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysMenuDms]
(
	[MenuId] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MenuCaption] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MenuHeader] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MenuIndex] [int] NULL,
	[MenuLevel] [int] NULL,
	[MenuUrl] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MenuIcon] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysMenuWeb]
(
	[MenuId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MenuName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MenuHeader] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MenuIndex] [int] NOT NULL,
	[MenuIcon] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[sysGroupMenuWeb]
(
	[GroupId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MenuId] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysModule]
(
	[ModuleId] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ModuleCaption] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ModuleIndex] [int] NULL,
	[ModuleUrl] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[InternalLink] [bit] NULL,
	[IsPublish] [bit] NULL,
	[Icon] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BITomMstModelYear]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[SalesModelDesc] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ChassisCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Remark] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[isLocked] [bit] NULL,
	[LockingBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LockingDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SyncEmployeeData]
(
	[SyncID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TeamLeaderID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[ResignDate] [datetime] NULL,
	[AdditionalJob] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MaritalStatusCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ReligionCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GenderCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FormalEducation] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PersonnelStatus] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthPlace] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[Address1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ZipNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[District] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IdentityNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PhoneNo] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HpNo] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone3] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone4] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FaxNo] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Height] [numeric] (6,2) NULL,
	[Weight] [numeric] (6,2) NULL,
	[BloodCode] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UniformSize] [numeric] (3,0) NULL,
	[ShoesSize] [numeric] (3,0) NULL,
	[ResignReason] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutationTo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutationDate] [datetime] NULL,
	[EmployeeIDNew] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PromotionLevel] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PromotionDate] [datetime] NULL,
	[DemotionLevel] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DemotionDate] [datetime] NULL,
	[TrnStdpDate] [datetime] NULL,
	[TrnSilverDate] [datetime] NULL,
	[TrnGoldDate] [datetime] NULL,
	[TrnPlatinumDate] [datetime] NULL,
	[TrnSCBasicDate] [datetime] NULL,
	[TrnSCAdvDate] [datetime] NULL,
	[TrnSHBasicDate] [datetime] NULL,
	[TrnSHIntDate] [datetime] NULL,
	[TrnBMDpDate] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[IsTransfered] [bit] NULL,
	[TransferedID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TransferedDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[SizeAlt] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsBpkbRetrievalInformation]
(
	[CompanyCode] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[RetrievalEstimationDate] [datetime] NOT NULL,
	[Notes] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[UpdatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysControlDms]
(
	[CompanyCode] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MenuID] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FieldID] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RoleID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Visibility] [tinyint] NULL,
	[Type] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Title] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[sysGroupDms]
(
	[GroupId] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GroupName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsActive] [bit] NOT NULL,
	[Themes] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsAdmin] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SyncEmployeeDataTemp]
(
	[SyncID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TeamLeaderID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JoinDate] [datetime] NULL,
	[ResignDate] [datetime] NULL,
	[AdditionalJob] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MaritalStatusCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ReligionCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[GenderCode] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FormalEducation] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PersonnelStatus] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthPlace] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[Address1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ZipNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[District] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IdentityNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PhoneNo] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HpNo] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone3] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Phone4] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FaxNo] [varchar] (35) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense1] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DrivingLicense2] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Height] [numeric] (6,2) NULL,
	[Weight] [numeric] (6,2) NULL,
	[BloodCode] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UniformSize] [numeric] (3,0) NULL,
	[ShoesSize] [numeric] (3,0) NULL,
	[ResignReason] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutationTo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutationDate] [datetime] NULL,
	[EmployeeIDNew] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PromotionLevel] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PromotionDate] [datetime] NULL,
	[DemotionLevel] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DemotionDate] [datetime] NULL,
	[TrnStdpDate] [datetime] NULL,
	[TrnSilverDate] [datetime] NULL,
	[TrnGoldDate] [datetime] NULL,
	[TrnPlatinumDate] [datetime] NULL,
	[TrnSCBasicDate] [datetime] NULL,
	[TrnSCAdvDate] [datetime] NULL,
	[TrnSHBasicDate] [datetime] NULL,
	[TrnSHIntDate] [datetime] NULL,
	[TrnBMDpDate] [datetime] NULL,
	[CreatedDate] [datetime] NULL,
	[IsTransfered] [bit] NULL,
	[TransferedID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TransferedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SyncEmployeeTrainingHist]
(
	[SyncID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TrainingSeq] [int] NULL,
	[TrainingCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TrainingDate] [datetime] NULL,
	[PreTest] [int] NULL,
	[PostTest] [int] NULL,
	[Qualitatif] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[IsTransfered] [bit] NULL,
	[TransferedDate] [datetime] NULL,
	[TransferedID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmployeeName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[GnDailyPostingHist]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PostingDate] [datetime] NOT NULL,
	[PostingSeq] [int] NOT NULL,
	[PostingLog] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfHistEmplTraining]
(
	[MutationID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TrainCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TrainDate] [datetime] NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[IsTransfered] [bit] NULL,
	[TransferedDate] [datetime] NULL,
	[TransferedID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfEmployeeTitleHistory]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HistSeq] [int] NULL,
	[HistoryTitle] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AssignedDate] [datetime] NOT NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[HistoryPosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HistoryDeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HistPosCodeFrom] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HistDeptCodeFrom] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsTransfered] [bit] NULL CONSTRAINT [DF__SfEmploye__IsTra__01342732] DEFAULT ((0)),
	[IsValid] [bit] NULL CONSTRAINT [DF__SfEmploye__IsVal__02284B6B] DEFAULT ((0)),
	[IsHistory] [bit] NOT NULL CONSTRAINT [DF__SfEmploye__IsHis__031C6FA4] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsTDayCall2]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Chassis] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsDeliveredA] [bit] NULL,
	[IsDeliveredB] [bit] NULL,
	[IsDeliveredC] [bit] NULL,
	[IsDeliveredD] [bit] NULL,
	[IsDeliveredE] [bit] NULL,
	[IsDeliveredF] [bit] NULL,
	[IsDeliveredG] [bit] NULL,
	[Comment] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Additional] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [int] NULL,
	[FinishDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfMstPosTrnType]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DeptCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PosCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingType] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Required] [bit] NOT NULL,
	[CreatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsTDayCall]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Chassis] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsDeliveredA] [bit] NULL,
	[IsDeliveredB] [bit] NULL,
	[IsDeliveredC] [bit] NULL,
	[IsDeliveredD] [bit] NULL,
	[IsDeliveredE] [bit] NULL,
	[IsDeliveredF] [bit] NULL,
	[IsDeliveredG] [bit] NULL,
	[Comment] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Additional] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [int] NULL,
	[FinishDate] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfmSetting]
(
	[Name] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Value] [bit] NOT NULL CONSTRAINT [DF__SfmSettin__Value__56D3D912] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfEmployeeUniform]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[UniSeq] [int] NOT NULL,
	[Size] [numeric] (18,2) NULL,
	[SizeAlt] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsOwned] [bit] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[UniformType] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SysRoleMenuAccess]
(
	[RoleId] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MenuId] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Navigation] [bit] NOT NULL CONSTRAINT [DF__SysRoleMe__Navig__26D87CF2] DEFAULT ((0)),
	[AllowCreate] [bit] NOT NULL CONSTRAINT [DF__SysRoleMe__Allow__27CCA12B] DEFAULT ((0)),
	[AllowEdit] [bit] NOT NULL CONSTRAINT [DF__SysRoleMe__Allow__28C0C564] DEFAULT ((0)),
	[AllowDelete] [bit] NOT NULL CONSTRAINT [DF__SysRoleMe__Allow__29B4E99D] DEFAULT ((0)),
	[AllowPrint] [bit] NOT NULL CONSTRAINT [DF__SysRoleMe__Allow__2AA90DD6] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfEmployeeVehicle]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[VehSeq] [int] NOT NULL,
	[Type] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Brand] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Model] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PoliceRegNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstCompanyMapping]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DbName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MappingType] [bit] NOT NULL,
	[CompanyMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UnitBranchMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchNameMD] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DbMD] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[WarehouseMD] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[isStatus] [bit] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstCustDealerDtl]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerGovName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerStatus] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address] [varchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ProvinceName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ZipNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KelurahanDesa] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KecamatanDistrik] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KotaKabupaten] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IbuKota] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PhoneNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HpNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FaxNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OfficePhoneNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[isPkp] [bit] NULL,
	[NPWPNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NPWPDate] [datetime] NULL,
	[SKPNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SKPDate] [datetime] NULL,
	[CustomerType] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Gender] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KTP] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastTransactionDate] [datetime] NOT NULL,
	[TransType] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfEmployeeTraining]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrnSeq] [int] NOT NULL,
	[TrnCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TrnDate] [datetime] NOT NULL,
	[PreTest] [int] NULL,
	[PostTest] [int] NULL,
	[Qualitatif] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[IsValid] [bit] NULL CONSTRAINT [DF__SfEmploye__IsVal__162F4418] DEFAULT ((0)),
	[IsTransfered] [bit] NULL CONSTRAINT [DF__SfEmploye__IsTra__17236851] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstCustDealer]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SelectCode] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Year] [int] NOT NULL,
	[Month] [int] NOT NULL,
	[NoOfUnitService] [bigint] NULL,
	[NoOfUnit] [bigint] NULL,
	[NoOfService] [bigint] NULL,
	[NoOfSparePart] [bigint] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[spAttribute2]
(
	[Branchcode] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartNo] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Cost] [numeric] (18,2) NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsLkuTDayCallView]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Chassis] [varchar] (45) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Engine] [varchar] (45) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[DODate] [datetime] NULL,
	[BPKDate] [datetime] NULL,
	[PoliceRegNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OutStanding] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BirthDate] [datetime] NULL,
	[AddPhone1] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AddPhone2] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ReligionCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[spAttribute1]
(
	[PartNo] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TypeOfGoods] [varchar] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BornDate] [datetime] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[sysRoleMenu]
(
	[RoleId] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MenuId] [varchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfHistEmplMutation]
(
	[MutationID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DeptCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Grade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutaType] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutaCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[MutaDate] [datetime] NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RelationID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[IsTransfered] [bit] NULL,
	[TransferedDate] [datetime] NULL,
	[TransferedID] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[spAttribute3]
(
	[BranchCode] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartNo] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MovingCode] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsLkuBpkbView]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Chassis] [varchar] (45) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Engine] [varchar] (45) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesModelCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SalesModelYear] [numeric] (4,0) NOT NULL,
	[BpkbDate] [datetime] NULL,
	[StnkDate] [datetime] NULL,
	[BPKDate] [datetime] NULL,
	[IsLeasing] [bit] NOT NULL,
	[Category] [varchar] (7) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LeasingCo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LeasingName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Installment] [numeric] (3,0) NULL,
	[PoliceRegNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OutStanding] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DelayedRetrievalDate] [datetime] NULL,
	[DelayedRetrievalNote] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[sfMstTraining]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DeptCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PosCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TrainingType] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[GradeCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varbinary] (50) NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[SfEmployeeGradeHistory]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HistSeq] [int] NULL,
	[HistoryGrade] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AssignedDate] [datetime] NOT NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdateBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdateDate] [datetime] NULL,
	[IsValid] [bit] NULL CONSTRAINT [DF__SfEmploye__IsVal__71F1E3A2] DEFAULT ((0)),
	[IsTransfered] [bit] NULL CONSTRAINT [DF__SfEmploye__IsTra__72E607DB] DEFAULT ((0))
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsStnkExt]
(
	[CompanyCode] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Chassis] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[IsStnkExtend] [bit] NULL,
	[StnkExpiredDate] [datetime] NULL,
	[ReqKtp] [bit] NULL,
	[ReqStnk] [bit] NULL,
	[ReqBpkb] [bit] NULL,
	[ReqSuratKuasa] [bit] NULL,
	[Comment] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Additional] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [int] NULL,
	[FinishDate] [datetime] NULL,
	[CreatedBy] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdatedBy] [varchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdatedDate] [datetime] NULL,
	[Tenor] [int] NULL,
	[LeasingCode] [varchar] (17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerCategory] [varchar] (17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[StnkDate] [datetime] NULL,
	[BpkbDate] [datetime] NULL,
	[Ownership] [bit] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[gnMstCustDealerDtl1]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CustomerName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerGovName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CustomerStatus] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Address] [varchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ProvinceName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CityName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ZipNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KelurahanDesa] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KecamatanDistrik] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KotaKabupaten] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IbuKota] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PhoneNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HpNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FaxNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OfficePhoneNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Email] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[BirthDate] [datetime] NULL,
	[isPkp] [bit] NULL,
	[NPWPNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NPWPDate] [datetime] NULL,
	[SKPNo] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SKPDate] [datetime] NULL,
	[CustomerType] [varchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Gender] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[KTP] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastTransactionDate] [datetime] NOT NULL,
	[TransType] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsMstHoliday]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HolidayYear] [int] NOT NULL,
	[HolidayCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HolidayDesc] [varchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[CreatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[CsSettings]
(
	[CompanyCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SettingCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SettingDesc] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingParam1] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingParam2] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingParam3] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingParam4] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingParam5] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingLink1] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingLink2] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SettingLink3] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsDeleted] [bit] NULL,
	[CreatedBy] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[UpdatedBy] [varchar] (36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[UpdatedDate] [datetime] NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[simDmsIterator]
(
	[AttendanceFlatFileExtractionProcessed] [int] NULL,
	[AttendanceFlatFileExtractionTotal] [nchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[TempgnMstCoProfileSpare]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BOPeriod] [numeric] (2,0) NULL,
	[ABCClassAPct] [numeric] (5,2) NOT NULL,
	[ABCClassBPct] [numeric] (5,2) NOT NULL,
	[ABCClassCPct] [numeric] (5,2) NOT NULL,
	[FiscalYear] [numeric] (4,0) NULL,
	[FiscalMonth] [numeric] (2,0) NULL,
	[FiscalPeriod] [numeric] (2,0) NULL,
	[PeriodBeg] [datetime] NULL,
	[PeriodEnd] [datetime] NULL,
	[ContactPersonName] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FaxNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PhoneNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HandPhoneNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[EmailAddr] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[isPurchasePriceIncPPN] [bit] NULL,
	[isRetailPriceIncPPN] [bit] NULL,
	[IsLinkWRS] [bit] NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[isLocked] [bit] NULL CONSTRAINT [DF_gnMstCoProfileSpare_isLocked] DEFAULT ((0)),
	[LockingBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF_gnMstCoProfileSpare_LockingBy] DEFAULT (''),
	[LockingDate] [datetime] NULL,
	[TransDate] [datetime] NULL

) ON [PRIMARY]
GO

INSERT INTO [dbo].[TempgnMstCoProfileSpare] ([CompanyCode],[BranchCode],[BOPeriod],[ABCClassAPct],[ABCClassBPct],[ABCClassCPct],[FiscalYear],[FiscalMonth],[FiscalPeriod],[PeriodBeg],[PeriodEnd],[ContactPersonName],[FaxNo],[PhoneNo],[HandPhoneNo],[EmailAddr],[isPurchasePriceIncPPN],[isRetailPriceIncPPN],[IsLinkWRS],[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate],[isLocked],[LockingBy],[LockingDate],[TransDate]) SELECT [CompanyCode],[BranchCode],[BOPeriod],[ABCClassAPct],[ABCClassBPct],[ABCClassCPct],[FiscalYear],[FiscalMonth],[FiscalPeriod],[PeriodBeg],[PeriodEnd],[ContactPersonName],[FaxNo],[PhoneNo],[HandPhoneNo],[EmailAddr],[isPurchasePriceIncPPN],[isRetailPriceIncPPN],[IsLinkWRS],[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate],[isLocked],[LockingBy],[LockingDate],[TransDate] FROM [dbo].[gnMstCoProfileSpare]
DROP TABLE [dbo].[gnMstCoProfileSpare]
GO
EXEC sp_rename N'[dbo].[TempgnMstCoProfileSpare]',N'gnMstCoProfileSpare', 'OBJECT'
GO


CREATE TABLE [dbo].[TempsvTrnSrvVORDtl]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ServiceNo] [bigint] NOT NULL,
	[POSNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartQty] [numeric] (12,2) NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL

) ON [PRIMARY]
GO

INSERT INTO [dbo].[TempsvTrnSrvVORDtl] ([CompanyCode],[BranchCode],[ServiceNo],[POSNo],[PartNo],[PartQty],[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate]) SELECT [CompanyCode],[BranchCode],[ServiceNo],'',[PartNo],[PartQty],[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate] FROM [dbo].[svTrnSrvVORDtl]
DROP TABLE [dbo].[svTrnSrvVORDtl]
GO
EXEC sp_rename N'[dbo].[TempsvTrnSrvVORDtl]',N'svTrnSrvVORDtl', 'OBJECT'
GO


CREATE TABLE [dbo].[TempsvMstStall]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ProductType] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF_svMstStall_ProductType] DEFAULT (''),
	[StallCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[Description] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[HaveLift] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastupdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastupdateDate] [datetime] NULL,
	[IsLocked] [bit] NOT NULL,
	[LockingBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LockingDate] [datetime] NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL

) ON [PRIMARY]
GO

INSERT INTO [dbo].[TempsvMstStall] ([CompanyCode],[ProductType],[StallCode],[Description],[HaveLift],[IsActive],[CreatedBy],[CreatedDate],[LastupdateBy],[LastupdateDate],[IsLocked],[LockingBy],[LockingDate],[BranchCode]) SELECT [CompanyCode],[ProductType],[StallCode],[Description],[HaveLift],[IsActive],[CreatedBy],[CreatedDate],[LastupdateBy],[LastupdateDate],[IsLocked],[LockingBy],[LockingDate],'' FROM [dbo].[svMstStall]
DROP TABLE [dbo].[svMstStall]
GO
EXEC sp_rename N'[dbo].[TempsvMstStall]',N'svMstStall', 'OBJECT'
GO


CREATE TABLE [dbo].[TempsvTrnSrvVOR]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ServiceNo] [bigint] NOT NULL,
	[JobOrderNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JobDelayCode] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[JobReasonDesc] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[ClosedDate] [datetime] NULL,
	[IsActive] [bit] NOT NULL,
	[IsSparepart] [bit] NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL

) ON [PRIMARY]
GO

INSERT INTO [dbo].[TempsvTrnSrvVOR] ([CompanyCode],[BranchCode],[ServiceNo],[JobOrderNo],[JobDelayCode],[JobReasonDesc],[ClosedDate],[IsActive],[IsSparepart],[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate]) SELECT [CompanyCode],[BranchCode],[ServiceNo],[JobOrderNo],[JobDelayCode],[JobReasonDesc],[ClosedDate],[IsActive],0,[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate] FROM [dbo].[svTrnSrvVOR]
DROP TABLE [dbo].[svTrnSrvVOR]
GO
EXEC sp_rename N'[dbo].[TempsvTrnSrvVOR]',N'svTrnSrvVOR', 'OBJECT'
GO


CREATE TABLE [dbo].[TempspUtlPINVDDtl]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DealerCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DeliveryNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OrderNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PartNo] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SupplierCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesNo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesDate] [datetime] NULL,
	[CaseNumber] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PartNoShip] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[QtyShipped] [numeric] (18,2) NULL CONSTRAINT [DF__spUtlPINV__QtySh__0240876X] DEFAULT ((0)),
	[SalesUnit] [numeric] (18,2) NULL CONSTRAINT [DF__spUtlPINV__Sales__0334AB9X] DEFAULT ((0)),
	[PurchasePrice] [numeric] (18,0) NULL CONSTRAINT [DF__spUtlPINV__Purch__0428CFDX] DEFAULT ((0)),
	[CostPrice] [numeric] (18,0) NULL CONSTRAINT [DF__spUtlPINV__CostP__051CF40X] DEFAULT ((0)),
	[DiscPct] [numeric] (5,2) NULL CONSTRAINT [DF__spUtlPINV__DiscP__0611184X] DEFAULT ((0)),
	[DiscAmt] [numeric] (18,0) NULL,
	[TotInvoiceAmt] [numeric] (18,0) NULL CONSTRAINT [DF__spUtlPINV__TotIn__07053C7X] DEFAULT ((0)),
	[ProcessDate] [datetime] NULL,
	[ProductType] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PartCategory] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[Status] [char] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdateBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[LastUpdateDate] [datetime] NULL,
	[TypeOfGoods] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL

) ON [PRIMARY]
GO

INSERT INTO [dbo].[TempspUtlPINVDDtl] ([CompanyCode],[BranchCode],[DealerCode],[DeliveryNo],[OrderNo],[PartNo],[SupplierCode],[SalesNo],[SalesDate],[CaseNumber],[PartNoShip],[QtyShipped],[SalesUnit],[PurchasePrice],[CostPrice],[DiscPct],[DiscAmt],[TotInvoiceAmt],[ProcessDate],[ProductType],[PartCategory],[Status],[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate],[TypeOfGoods]) SELECT [CompanyCode],[BranchCode],[DealerCode],[DeliveryNo],[OrderNo],[PartNo],[SupplierCode],[SalesNo],[SalesDate],[CaseNumber],[PartNoShip],[QtyShipped],[SalesUnit],[PurchasePrice],[CostPrice],[DiscPct],[DiscAmt],[TotInvoiceAmt],[ProcessDate],[ProductType],[PartCategory],[Status],[CreatedBy],[CreatedDate],[LastUpdateBy],[LastUpdateDate],[TypeOfGoods] FROM [dbo].[spUtlPINVDDtl]
DROP TABLE [dbo].[spUtlPINVDDtl]
GO
EXEC sp_rename N'[dbo].[TempspUtlPINVDDtl]',N'spUtlPINVDDtl', 'OBJECT'
GO


CREATE TABLE [dbo].[TempgnMstEmployeeMutation]
(
	[CompanyCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[EmployeeID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[BranchCode] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[MutationTo] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[CreatedBy] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CreatedDate] [datetime] NULL,
	[EmployeeIDNew] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SalesID] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[IsTransfered] [bit] NULL CONSTRAINT [DF__gnMstEmpl__IsTra__38B96646] DEFAULT ((0)),
	[IsValid] [bit] NULL CONSTRAINT [DF__gnMstEmpl__IsVal__39AD8A7F] DEFAULT ((0)),
	[MutationDate] [datetime] NOT NULL CONSTRAINT [DF__gnMstEmpl__Mutat__3AA1AEB8] DEFAULT (getdate()),
	[SeqNo] [int] NULL CONSTRAINT [DF__gnMstEmpl__SeqNo__3B95D2F1] DEFAULT ((0))

) ON [PRIMARY]
GO

INSERT INTO [dbo].[TempgnMstEmployeeMutation] ([CompanyCode],[EmployeeID],[BranchCode],[MutationTo],[CreatedBy],[CreatedDate],[MutationDate],[SeqNo]) SELECT [CompanyCode],[EmployeeID],ISNULL([BranchCode],''),ISNULL([MutationTo],''),[CreatedBy],[CreatedDate],ISNULL([MutationDate],(getdate())),[SeqNo] FROM [dbo].[gnMstEmployeeMutation]
DROP TABLE [dbo].[gnMstEmployeeMutation]
GO
EXEC sp_rename N'[dbo].[TempgnMstEmployeeMutation]',N'gnMstEmployeeMutation', 'OBJECT'
GO


ALTER procedure [dbo].[uspfn_SvHstMSI]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15), 
	@PeriodYear  int,
	@PeriodMonth int,
    @Posting     bit,
	@UserID      varchar(15)
as
-- uspfn_SvHstMSI '6156401','615640100','4W',2010,07,1,'HTO'

-- A. Sales Revenue
declare	@TotalLaborSalesRevenue            numeric(18,0)
declare	@LaborRevenueChargeable            numeric(18,0)
declare	@LaborRevenueNonChargeable1        numeric(18,0)
declare	@LaborRevenueNonChargeable2        numeric(18,0)
declare	@TotalPartsSalesRevenue            numeric(18,0)
declare	@PartsRevenueChargeable            numeric(18,0)
declare	@PartsRevenueNonChargeable1        numeric(18,0)
declare	@PartsRevenueNonChargeable2        numeric(18,0)
declare	@TotalMaterialSalesRevenue         numeric(18,0)
declare	@MaterialRevenueChargeable         numeric(18,0)
declare	@MaterialRevenueNonChargeable1     numeric(18,0)
declare	@MaterialRevenueNonChargeable2     numeric(18,0)
declare @TotalServiceSalesRevenue          numeric(18,0)
declare @TotalServiceSalesChargeable       numeric(18,0)
declare @TotalServiceSalesNonChargeable1   numeric(18,0)
declare @TotalServiceSalesNonChargeable2   numeric(18,0)
declare	@HoursSold                         numeric(12,2)
declare	@ServiceRevenuePerUnit             numeric(18,0)
declare	@LaborSalesTurnoverProductiveStaff numeric(18,0)
declare	@LaborSalesTurnoverServiceAdvisors numeric(18,0)
declare	@LaborSalesTurnoverStall           numeric(18,0)
-- B. No. of Unit Intake
declare	@NoWorkOrderVehicleIntake          numeric(08,0)
declare	@PassengerCar                      numeric(08,0)
declare	@CommercialVehicle                 numeric(08,0)
declare	@PDI                               numeric(08,0)
-- C. No. of Job Type
declare @TotalChargeable                   numeric(08,0)
declare @Chargeable1                       numeric(08,0)
declare @Chargeable2                       numeric(08,0)
declare @Chargeable3                       numeric(08,0)
declare @Chargeable4                       numeric(08,0)
declare @TotalNonChargeable                numeric(08,0)
declare @NonChargeable1                    numeric(08,0)
declare @NonChargeable2                    numeric(08,0)
declare @NonChargeable3                    numeric(08,0)
declare @NonChargeable4                    numeric(08,0)
declare @NonChargeable5                    numeric(08,0)
-- D. Workshop Service Strength
declare @NoWorkingStall                    numeric(03,0)
declare @TotalStaff                        numeric(06,0)
declare @NoAdminSupportStaff               numeric(06,0)
declare @NoServiceAdvisorsStaff            numeric(06,0)
declare @NoProductiveStaff                 numeric(06,0)
declare @NoForeman                         numeric(06,0)
declare @NoTechnician                      numeric(06,0)
declare @NoPDIStaff	                       numeric(06,0)
declare @TotalAvailableHours		       numeric(08,2)
declare @OvertimeNormalWorkingHour 		   numeric(08,2)
-- E. Productivity Indicators	
declare @RepairUnitProductiveStaff         numeric(08,2)
declare @RepairUnitTechnician              numeric(08,2)
declare @RepairUnitWorkingStall            numeric(08,2)
declare @NoCustomertoServiceAdvisor        numeric(08,2)
declare @NoWorkdays	                       numeric(06,0)
declare @RepairUnitProductiveDay           numeric(06,2)
declare @RepairUnitTechnicianDay           numeric(06,2) 
declare @RepairUnitWorkingStallDay         numeric(06,2)
declare @NoCustomertoServiceAdvisorDay     numeric(06,2)
declare @HoursSoldtoAvailableHours         numeric(08,2)
-- F. Service Retention & Marketing Activity  
--> akan berlaku setelah SMR selesai di develop
declare @ServiceReminder                   numeric(08,0)
declare @ServiceFollowUp                   numeric(08,0)
declare @ServiceBookings                   numeric(08,0)
declare @ServiceRemindertoNoWorkOrder      numeric(06,2)
declare @ServiceFollowUptoNoWorkOrder      numeric(06,2)
declare @ServiceBookingstoNoWorkOrder      numeric(06,2)
-- G. CSI Performance	
--> akan berlaku setelah SMR selesai di develop
declare @CSIScore	                       numeric(06,2)
declare @DirectComplaintsReceived	       numeric(08,0)
declare @IndirectComplaintsReceived	       numeric(08,0)
declare @TotalNoFollowUpSatisfied	       numeric(08,0)
declare @TotalNoFollowUpNotSatisfied       numeric(08,0)
declare @NoNotSatisfiedService             numeric(08,0)
declare @NoNotSatisfiedTechnical           numeric(08,0)
declare @FollowUpSatisfiedtoNoWorkOrder    numeric(06,2)
declare @FollowUpNotSatisfiedtoNoWorkOrder numeric(06,2)
declare @ComplaintsFollowUpNotSatisfied    numeric(06,2)


-- select data
select * into #inv 
  from (select inv.InvoiceNo, inv.JobType, job.GroupJobType,
               isnull(inv.LaborDiscPct,0) LaborDiscPct, 
               isnull(inv.PartsDiscPct,0) PartsDiscPct, 
               isnull(inv.MaterialDiscPct,0) MaterialDiscPct
          from svTrnInvoice inv, svMstJob job
         where inv.CompanyCode=@CompanyCode
           and inv.BranchCode=@BranchCode
           and inv.ProductType=@ProductType
           and year(inv.InvoiceDate)=@PeriodYear
           and month(inv.InvoiceDate)=@PeriodMonth
           and inv.CompanyCode=job.CompanyCode
           and inv.ProductType=job.ProductType
           and inv.BasicModel=job.BasicModel
           and inv.JobType=job.JobType) inv

select * into #task
  from (select inv.InvoiceNo, isnull(sum(int.OperationHour * int.OperationCost),0) Labor
          from #inv inv, svTrnInvTask int
         where int.CompanyCode=@CompanyCode
           and int.BranchCode=@BranchCode
           and int.ProductType=@ProductType
           and int.InvoiceNo=inv.InvoiceNo
         group by inv.InvoiceNo) task

select * into #item
  from (select inv.InvoiceNo, mst.ParaValue Goods, isnull(sum(ini.SupplyQty * ini.RetailPrice),0) Part
          from #inv inv, svTrnInvItem ini, gnMstLookUpDtl mst
         where ini.CompanyCode=@CompanyCode
           and ini.BranchCode=@BranchCode
           and ini.ProductType=@ProductType
           and ini.InvoiceNo=inv.InvoiceNo
           and mst.CompanyCode=ini.CompanyCode
           and mst.CodeID='GTGO'
           and mst.LookUpValue=ini.TypeOfGoods
         group by inv.InvoiceNo, mst.ParaValue) item

set @TotalLaborSalesRevenue = (select sum(isnull(floor(int.Labor * (100 - inv.LaborDiscPct) / 100),0))
                                 from #inv inv, #task int
                                where inv.InvoiceNo=int.InvoiceNo)

set @LaborRevenueChargeable = (select sum(isnull(floor(int.Labor * (100 - inv.LaborDiscPct) / 100),0))
                                 from #inv inv, #task int
                                where inv.InvoiceNo=int.InvoiceNo
                                  and substring(inv.InvoiceNo,1,3)<>'INI'
                                  and inv.GroupJobType in ('RTN','OTH'))

set @LaborRevenueNonChargeable1 = (select sum(isnull(floor(int.Labor * (100 - inv.LaborDiscPct) / 100),0))
                                     from #inv inv, #task int
                                    where inv.InvoiceNo=int.InvoiceNo
                                      and (inv.JobType='CLAIM' or substring(inv.JobType,1,3)='FSC'))

set @LaborRevenueNonChargeable2 = (select sum(isnull(floor(int.Labor * (100 - inv.LaborDiscPct) / 100),0))
                                     from #inv inv, #task int
                                    where inv.InvoiceNo=int.InvoiceNo
                                      and (inv.JobType in ('PDI','REWORK') or substring(inv.InvoiceNo,1,3)='INI'))

set @TotalPartsSalesRevenue = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                from #inv inv, #item ini
                               where inv.InvoiceNo=ini.InvoiceNo
       and ini.Goods='SPAREPART')

set @PartsRevenueChargeable = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                 from #inv inv, #item ini
                                where inv.InvoiceNo=ini.InvoiceNo
                                  and substring(inv.InvoiceNo,1,3)<>'INI'
                                  and inv.GroupJobType in ('RTN','OTH')
                                  and ini.Goods='SPAREPART')

set @PartsRevenueNonChargeable1 = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                     from #inv inv, #item ini
                                    where inv.InvoiceNo=ini.InvoiceNo
                                      and (inv.JobType='CLAIM' or substring(inv.JobType,1,3)='FSC')
                                      and ini.Goods='SPAREPART')

set @PartsRevenueNonChargeable2 = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                     from #inv inv, #item ini
                                    where inv.InvoiceNo=ini.InvoiceNo
                                      and (inv.JobType in ('PDI','REWORK') or substring(inv.InvoiceNo,1,3)='INI')
                                      and ini.Goods='SPAREPART')

set @TotalMaterialSalesRevenue = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                    from #inv inv, #item ini
                                   where inv.InvoiceNo=ini.InvoiceNo
                                     and ini.Goods in ('MATERIAL','OLI'))

set @MaterialRevenueChargeable = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                    from #inv inv, #item ini
                                   where inv.InvoiceNo=ini.InvoiceNo
                                     and substring(inv.InvoiceNo,1,3)<>'INI'
                                     and inv.GroupJobType in ('RTN','OTH')
                                     and ini.Goods in ('MATERIAL','OLI'))

set @MaterialRevenueNonChargeable1 = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                        from #inv inv, #item ini
                                       where inv.InvoiceNo=ini.InvoiceNo
                                         and (inv.JobType='CLAIM' or substring(inv.JobType,1,3)='FSC')
                                         and ini.Goods in ('MATERIAL','OLI'))

set @MaterialRevenueNonChargeable2 = (select sum(isnull(floor(ini.Part * (100 - inv.PartsDiscPct) / 100),0))
                                        from #inv inv, #item ini
                                       where inv.InvoiceNo=ini.InvoiceNo
                                         and (inv.JobType in ('PDI','REWORK') or substring(inv.InvoiceNo,1,3)='INI')
                                         and ini.Goods in ('MATERIAL','OLI'))

set @TotalServiceSalesChargeable = @LaborRevenueChargeable + @PartsRevenueChargeable + @MaterialRevenueChargeable
set @TotalServiceSalesNonChargeable1 = @LaborRevenueNonChargeable1 + @PartsRevenueNonChargeable1 + @MaterialRevenueNonChargeable1
set @TotalServiceSalesNonChargeable2 = @LaborRevenueNonChargeable2 + @PartsRevenueNonChargeable2 + @MaterialRevenueNonChargeable2
set @TotalServiceSalesRevenue = @TotalServiceSalesChargeable + @TotalServiceSalesNonChargeable1 + @TotalServiceSalesNonChargeable2

set @HoursSold = (select sum(isnull(OperationHour,0)) from svTrnInvTask
                   where CompanyCode=@CompanyCode
                     and BranchCode=@BranchCode
                     and ProductType=@ProductType
                     and exists (select InvoiceNo from svTrnInvoice
                                  where svTrnInvoice.CompanyCode=@CompanyCode
                                    and svTrnInvoice.BranchCode=@BranchCode
                                    and svTrnInvoice.ProductType=@ProductType
            and svTrnInvoice.InvoiceNo=svTrnInvTask.InvoiceNo
                                    and year(svTrnInvoice.InvoiceDate)=@PeriodYear
                                    and month(svTrnInvoice.InvoiceDate)=@PeriodMonth))
 
set @PassengerCar = isnull((select count(*)
                              from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                                      from svTrnInvoice inv, svTrnService spk
                                     where inv.CompanyCode=@CompanyCode
                                       and inv.BranchCode=@BranchCode
                                       and inv.ProductType=@ProductType
                                       and year(inv.InvoiceDate)=@PeriodYear
                                       and month(inv.InvoiceDate)=@PeriodMonth
                                       and right(inv.BasicModel,3)<>'ANG'
                                       and inv.CompanyCode=spk.CompanyCode
                                       and inv.BranchCode=spk.BranchCode
                                       and inv.ProductType=spk.ProductType
                                       and inv.JobOrderNo=spk.JobOrderNo)pc),0)

set @CommercialVehicle = isnull((select count(*)
                                   from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                                           from svTrnInvoice inv, svTrnService spk
                                          where inv.CompanyCode=@CompanyCode
                                            and inv.BranchCode=@BranchCode
                                            and inv.ProductType=@ProductType
                                            and year(inv.InvoiceDate)=@PeriodYear
                                            and month(inv.InvoiceDate)=@PeriodMonth
                                            and right(inv.BasicModel,3)='ANG'
                                            and inv.CompanyCode=spk.CompanyCode
                                            and inv.BranchCode=spk.BranchCode
                                            and inv.ProductType=spk.ProductType
                                            and inv.JobOrderNo=spk.JobOrderNo)cv),0)

set @PDI = isnull((select count(*)
                     from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                             from svTrnInvoice inv, svTrnService spk
                            where inv.CompanyCode=@CompanyCode
                              and inv.BranchCode=@BranchCode
                              and inv.ProductType=@ProductType
                              and year(inv.InvoiceDate)=@PeriodYear
                              and month(inv.InvoiceDate)=@PeriodMonth
                              and inv.JobType='PDI'
                              and inv.CompanyCode=spk.CompanyCode
                              and inv.BranchCode=spk.BranchCode
                              and inv.ProductType=spk.ProductType
                              and inv.JobOrderNo=spk.JobOrderNo)pdi),0)

-- B. No. of Unit Intake
set @NoWorkOrderVehicleIntake = @PassengerCar + @CommercialVehicle
set @ServiceRevenuePerUnit = @TotalServiceSalesChargeable + @TotalServiceSalesNonChargeable1

-- C. No. of Job Type
set @Chargeable1 = isnull((select count(*)  -- kelipatan 10.000 > 30.000
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                 and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.CompanyCode=job.CompanyCode
                                         and inv.ProductType=job.ProductType
                                         and inv.BasicModel=job.BasicModel
                                         and inv.JobType=job.JobType
                                         and job.GroupJobType='RTN'
                                         and inv.JobType not in ('PB10000','PB20000')
                                         and substring(inv.JobType,3,15) like '%0000%'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c1),0)

set @Chargeable2 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType in ('PB10000','PB20000')
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c2),0)

set @Chargeable3 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.CompanyCode=job.CompanyCode
                                         and inv.ProductType=job.ProductType
                                         and inv.BasicModel=job.BasicModel
                                         and inv.JobType=job.JobType
                                         and job.GroupJobType='RTN'
                                         and substring(inv.JobType,3,15) like '%5000'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c3),0)

set @Chargeable4 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='OTHER'
                                         and inv.CompanyCode=int.CompanyCode
                  and inv.BranchCode=int.BranchCode
  and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c4),0)

set @TotalChargeable = @Chargeable1 + @Chargeable2 + @Chargeable3 + @Chargeable4

set @NonChargeable1 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='CLAIM'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc1),0)

set @NonChargeable2 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='FSC01'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc2),0)

set @NonChargeable3 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='REWORK'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc3),0)

set @NonChargeable4 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and substring(inv.InvoiceNo,1,3)='INI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                 and inv.ProductType=int.ProductType
             and inv.InvoiceNo=int.InvoiceNo)nc4),0)

set @NonChargeable5 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='PDI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc5),0)

set @TotalNonChargeable = @NonChargeable1 + @NonChargeable2 + @NonChargeable3 + @NonChargeable4 + @NonChargeable5

-- D. Workshop Service Strength
set @NoWorkingStall = isnull((select count(*) from svMstStall
                               where CompanyCode=@CompanyCode
                                 and ProductType=@ProductType
                                 and IsActive=1),1)

set @NoAdminSupportStaff = isnull((select count(*) from gnMstEmployee
                                    where CompanyCode=@CompanyCode
                                      and BranchCode=@BranchCode
                                      and TitleCode in ('2','4','7','10','11')
                                      and PersonnelStatus='1'),1)

set @NoServiceAdvisorsStaff = isnull((select count(*) from gnMstEmployee
                                       where CompanyCode=@CompanyCode
                                         and BranchCode=@BranchCode
                                         and TitleCode='3'
                                         and PersonnelStatus='1'),1)

set @NoForeman = isnull((select count(*) from gnMstEmployee
                          where CompanyCode=@CompanyCode
                            and BranchCode=@BranchCode
                            and TitleCode='8'
                            and PersonnelStatus='1'),1)

set @NoTechnician = isnull((select count(*) from gnMstEmployee
                             where CompanyCode=@CompanyCode
                               and BranchCode=@BranchCode
                               and TitleCode='9'
                               and PersonnelStatus='1'),1)

set @NoPDIStaff	= 0
set @NoProductiveStaff = @NoForeman + @NoTechnician
set @TotalStaff = @NoAdminSupportStaff + @NoServiceAdvisorsStaff + @NoProductiveStaff + @NoPDIStaff

set @TotalAvailableHours = isnull((select TotalWorkingDays from svMstTarget
                                    where CompanyCode=@CompanyCode
                                      and BranchCode=@BranchCode
                                      and ProductType=@ProductType
                                      and PeriodYear=@PeriodYear
                                      and PeriodMonth=@PeriodMonth),0) * 8

set @OvertimeNormalWorkingHour = 0

set @LaborSalesTurnoverProductiveStaff = @TotalLaborSalesRevenue / @NoProductiveStaff
set @LaborSalesTurnoverServiceAdvisors= @TotalLaborSalesRevenue / @NoServiceAdvisorsStaff
set @LaborSalesTurnoverStall = @TotalLaborSalesRevenue / @NoWorkingStall

-- E. Productivity Indicators	
set @RepairUnitProductiveStaff = @NoWorkOrderVehicleIntake / @NoProductiveStaff
set @RepairUnitTechnician = @NoWorkOrderVehicleIntake / @NoTechnician 
set @RepairUnitWorkingStall = @NoWorkOrderVehicleIntake / @NoWorkingStall
set @NoCustomertoServiceAdvisor = @NoWorkOrderVehicleIntake / @NoServiceAdvisorsStaff
set @NoWorkdays = isnull((select TotalWorkingDays from svMstTarget
               where CompanyCode=@CompanyCode
                       and BranchCode=@BranchCode
                             and ProductType=@ProductType
                             and PeriodYear=@PeriodYear
                             and PeriodMonth=@PeriodMonth),0)

if @NoWorkdays = 0
    begin
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff
       set @RepairUnitTechnicianDay = @RepairUnitTechnician
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff
       set @RepairUnitTechnicianDay = @RepairUnitTechnician
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor
    end
else
    begin
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff / @NoWorkdays
       set @RepairUnitTechnicianDay = @RepairUnitTechnician / @NoWorkdays
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall / @NoWorkdays
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor / @NoWorkdays
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff / @NoWorkdays
       set @RepairUnitTechnicianDay = @RepairUnitTechnician / @NoWorkdays
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall / @NoWorkdays
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor / @NoWorkdays
    end

if @TotalAvailableHours = 0
    set @HoursSoldtoAvailableHours = @HoursSold  * 100
else
    set @HoursSoldtoAvailableHours = @HoursSold * 100 / @TotalAvailableHours

-- F. Service Retention & Marketing Activity
set @ServiceReminder = 0
set @ServiceFollowUp = 0
set @ServiceBookings = 0

if @NoWorkOrderVehicleIntake = 0
   begin
       set @ServiceRemindertoNoWorkOrder = @ServiceReminder * 100
       set @ServiceFollowUptoNoWorkOrder = @ServiceFollowUp * 100
       set @ServiceBookingstoNoWorkOrder = @ServiceBookings * 100
   end
else
   begin
       set @ServiceRemindertoNoWorkOrder = @ServiceReminder * 100 / @NoWorkOrderVehicleIntake
       set @ServiceFollowUptoNoWorkOrder = @ServiceFollowUp * 100 / @NoWorkOrderVehicleIntake
       set @ServiceBookingstoNoWorkOrder = @ServiceBookings * 100 / @NoWorkOrderVehicleIntake
   end

-- G. CSI Performance	
--> akan berlaku setelah SMR selesai di develop
set @CSIScore = 0
set @DirectComplaintsReceived = 0
set @IndirectComplaintsReceived = 0
set @TotalNoFollowUpSatisfied = 0
set @NoNotSatisfiedService = 0
set @NoNotSatisfiedTechnical = 0
set @TotalNoFollowUpNotSatisfied = @NoNotSatisfiedService + @NoNotSatisfiedTechnical

if @NoWorkOrderVehicleIntake = 0
   begin
      set @FollowUpSatisfiedtoNoWorkOrder = @TotalNoFollowUpSatisfied
      set @FollowUpNotSatisfiedtoNoWorkOrder = @TotalNoFollowUpNotSatisfied
      set @ComplaintsFollowUpNotSatisfied = (@DirectComplaintsReceived + @IndirectComplaintsReceived +
                                             @TotalNoFollowUpNotSatisfied)
   end
else
   begin
      set @FollowUpSatisfiedtoNoWorkOrder = @TotalNoFollowUpSatisfied / @NoWorkOrderVehicleIntake
      set @FollowUpNotSatisfiedtoNoWorkOrder = @TotalNoFollowUpNotSatisfied / @NoWorkOrderVehicleIntake
      set @ComplaintsFollowUpNotSatisfied = (@DirectComplaintsReceived + @IndirectComplaintsReceived +
                                             @TotalNoFollowUpNotSatisfied) / @NoWorkOrderVehicleIntake
   end


-- select data field
select @CompanyCode                       CompanyCode                    --varchar(15)
      ,@BranchCode                        BranchCode                     --varchar(15)
      ,@ProductType                       ProductType                    --varchar(15)
      ,@PeriodYear                        PeriodYear --numeric(4,0)
      ,@PeriodMonth                       PeriodMonth                    --numeric(2,0)
      ,@TotalLaborSalesRevenue            TotalLaborSalesRevenue
      ,@LaborRevenueChargeable            LaborRevenueChargeable
      ,@LaborRevenueNonChargeable1        LaborRevenueNonChargeable1
      ,@LaborRevenueNonChargeable2        LaborRevenueNonChargeable2
      ,@TotalPartsSalesRevenue            TotalPartsSalesRevenue
      ,@PartsRevenueChargeable            PartsRevenueChargeable
      ,@PartsRevenueNonChargeable1        PartsRevenueNonChargeable1
      ,@PartsRevenueNonChargeable2        PartsRevenueNonChargeable2
      ,@TotalMaterialSalesRevenue         TotalMaterialSalesRevenue
      ,@MaterialRevenueChargeable         MaterialRevenueChargeable
      ,@MaterialRevenueNonChargeable1     MaterialRevenueNonChargeable1
      ,@MaterialRevenueNonChargeable2     MaterialRevenueNonChargeable2
      ,@TotalServiceSalesRevenue          TotalServiceSalesRevenue
      ,@TotalServiceSalesChargeable       TotalServiceSalesChargeable
      ,@TotalServiceSalesNonChargeable1   TotalServiceSalesNonChargeable1
      ,@TotalServiceSalesNonChargeable2   TotalServiceSalesNonChargeable2
      ,@HoursSold                         HoursSold
      ,@ServiceRevenuePerUnit             ServiceRevenuePerUnit
      ,@LaborSalesTurnoverProductiveStaff LaborSalesTurnoverProductiveStaff
      ,@LaborSalesTurnoverServiceAdvisors LaborSalesTurnoverServiceAdvisors
      ,@LaborSalesTurnoverStall           LaborSalesTurnoverStall
      ,@NoWorkOrderVehicleIntake          NoWorkOrderVehicleIntake
      ,@PassengerCar                      PassengerCar
      ,@CommercialVehicle                 CommercialVehicle
      ,@PDI                               PDI
      ,@TotalChargeable                   TotalChargeable
      ,@Chargeable1                       Chargeable1
      ,@Chargeable2                       Chargeable2
      ,@Chargeable3                       Chargeable3
      ,@Chargeable4                       Chargeable4
      ,@TotalNonChargeable                TotalNonChargeable
      ,@NonChargeable1                    NonChargeable1
      ,@NonChargeable2                    NonChargeable2
      ,@NonChargeable3                    NonChargeable3
      ,@NonChargeable4                    NonChargeable4
      ,@NonChargeable5                    NonChargeable5
      ,@NoWorkingStall                    NoWorkingStall
      ,@TotalStaff                        TotalStaff
      ,@NoAdminSupportStaff               NoAdminSupportStaff
      ,@NoServiceAdvisorsStaff            NoServiceAdvisorsStaff
      ,@NoProductiveStaff                 NoProductiveStaff
      ,@NoForeman                         NoForeman
      ,@NoTechnician                      NoTechnician
      ,@NoPDIStaff	                      NoPDIStaff
      ,@TotalAvailableHours		          TotalAvailableHours
      ,@OvertimeNormalWorkingHour 		  OvertimeNormalWorkingHour
      ,@LaborSalesTurnoverProductiveStaff LaborSalesTurnoverProductiveStaff
      ,@LaborSalesTurnoverServiceAdvisors LaborSalesTurnoverServiceAdvisors
      ,@LaborSalesTurnoverStall           LaborSalesTurnoverStall
      ,@RepairUnitProductiveStaff         RepairUnitProductiveStaff
      ,@RepairUnitTechnician              RepairUnitTechnician
      ,@RepairUnitWorkingStall            RepairUnitWorkingStall
      ,@NoCustomertoServiceAdvisor        NoCustomertoServiceAdvisor
      ,@NoWorkdays	                      NoWorkdays
      ,@RepairUnitProductiveDay           RepairUnitProductiveDay
      ,@RepairUnitTechnicianDay           RepairUnitTechnicianDay
      ,@RepairUnitWorkingStallDay         RepairUnitWorkingStallDay
      ,@NoCustomertoServiceAdvisorDay     NoCustomertoServiceAdvisorDay
      ,@HoursSoldtoAvailableHours         
      ,@ServiceReminder                   ServiceReminder
      ,@ServiceFollowUp                   ServiceFollowUp
,@ServiceBookings                   ServiceBookings
      ,@ServiceRemindertoNoWorkOrder      ServiceRemindertoNoWorkOrder
      ,@ServiceFollowUptoNoWorkOrder      ServiceFollowUptoNoWorkOrder 
      ,@ServiceBookingstoNoWorkOrder      ServiceBookingstoNoWorkOrder
      ,@CSIScore	                      CSIScore
      ,@DirectComplaintsReceived	      DirectComplaintsReceived
      ,@IndirectComplaintsReceived	      IndirectComplaintsReceived
      ,@TotalNoFollowUpSatisfied	      TotalNoFollowUpSatisfied
      ,@TotalNoFollowUpNotSatisfied       TotalNoFollowUpNotSatisfied
      ,@NoNotSatisfiedService             NoNotSatisfiedService
      ,@NoNotSatisfiedTechnical           NoNotSatisfiedTechnical
      ,@FollowUpSatisfiedtoNoWorkOrder    FollowUpSatisfiedtoNoWorkOrder
      ,@FollowUpNotSatisfiedtoNoWorkOrder FollowUpNotSatisfiedtoNoWorkOrder
      ,@ComplaintsFollowUpNotSatisfied    ComplaintsFollowUpNotSatisfied


/*
-- Insert/Update Process
select count(*) into @Flag from svHstMSI
 where CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and ProductType = @ProductType
   and PeriodYear  = @PeriodYear
   and PeriodMonth = @PeriodMonth
if  @Flag = 0
    begin
         insert svHstMSI
    end
else
    if  @Posting is TRUE
        begin
             update svHstMSI
        end

select * from svHstMSI
 order by CompanyCode, BranchCode, ProductType, PeriodYear, PeriodMonth
*/

-- drop table
drop table #task
drop table #item
drop table #inv
GO
ALTER procedure [dbo].[uspfn_SvGetCustVehicle]
   @CompanyCode varchar(15)
as

select a.ChassisCode, cast(a.ChassisNo as varchar) ChassisNo, a.EngineCode, a.SalesModelYear
     , cast(a.EngineNo as varchar) EngineNo, a.ServiceBookNo
     , case a.PoliceRegistrationDate when ('19000101') then NULL else a.PoliceRegistrationDate end as PoliceRegistrationDate
     , a.PoliceRegistrationNo
     , case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
     , b.BasicModel
     , b.TechnicalModelCode
     , b.TransmissionType
     , a.ColourCode
     , c.CustomerCode
     , c.CompanyCode
     , '' ContactName
     , '' ContactAddress
     , '' ContactPhone
  from omMstVehicle a
  left join omMstModel b
    on b.CompanyCode = a.CompanyCode
   and b.SalesModelCode = a.SalesModelCode
  left join omTrSalesInvoice c
    on c.CompanyCode = a.CompanyCode
   and c.InvoiceNo = a.InvoiceNo
 where a.CompanyCode = @CompanyCode
   and a.IsActive = 1
 order by a.ChassisCode, a.ChassisNo
 
 select * from SvChassicView
GO
ALTER procedure [dbo].[usprpt_OmRpSalRgs004] 
(
	@CompanyCode VARCHAR(15),
	@BranchCode	VARCHAR(15),
	@FromDate VARCHAR(15),
	@ToDate VARCHAR(15),
	@SalesType VARCHAR(2),
	@CustomerFrom VARCHAR(15),
	@CustomerTo VARCHAR(15),
	@ModelFrom VARCHAR(15),
	@ModelTo VARCHAR(15),
	@InvoiceFrom VARCHAR(15),
	@InvoiceTo VARCHAR(15)
--	@param CHAR(2)
)
AS
BEGIN

--usprpt_OmRpSalRgs004 '6093401','609340101','','','','','','','','IBU/13/001023','IBU/13/001023'

--declare	@CompanyCode VARCHAR(15),
--		@BranchCode	VARCHAR(15),
--		@FromDate VARCHAR(15),
--		@ToDate VARCHAR(15),
--		@SalesType VARCHAR(2),
--		@CustomerFrom VARCHAR(15),
--		@CustomerTo VARCHAR(15),
--		@ModelFrom VARCHAR(15),
--		@ModelTo VARCHAR(15),
--		@InvoiceFrom VARCHAR(15),
--		@InvoiceTo VARCHAR(15)
--
--set	@CompanyCode = '6093401'
--set	@BranchCode	= '609340101'
--set	@FromDate = ''
--set	@ToDate = ''
--set	@SalesType = ''
--set	@CustomerFrom = ''
--set	@CustomerTo = ''
--set	@ModelFrom = ''
--set	@ModelTo = ''
--set	@InvoiceFrom = 'IBU/13/001023'
--set	@InvoiceTo = 'IBU/13/001023'

SELECT 
	a.CompanyCode,a.BranchCode
	,(
		select CompanyName from gnMstCoProfile
		where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode
	) BranchName
	,a.InvoiceDate,a.InvoiceNo,a.FakturPajakNo
	,case when convert(varchar, a.FakturPajakDate, 112) = '19000101' then '' else a.FakturPajakDate end FakturPajakDate
	,g.SKPKNo + '/' + g.RefferenceNo as SKPKNo,
	f.CustomerName + ' [' + a.CustomerCode + ']' as pCustomer,e.DONo,a.SONo,b.BPKNo,c.SalesModelCode
	, h.SalesModelDesc, c.SalesModelYear,
	d.ColourCode
	,(	select RefferenceDesc1 
		from omMstRefference 
		where CompanyCode=a.CompanyCode and RefferenceType='COLO' and RefferenceCode=d.ColourCode
	) ColourName
	,d.ChassisNo,d.EngineNo
	,(
		select count(ChassisNo) from omTrSalesInvoiceVin
		where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and InvoiceNo=a.InvoiceNo
			and ChassisCode=d.ChassisCode and ChassisNo=d.ChassisNo
	) Qty
	,c.BeforeDiscDPP,c.DiscExcludePPn,c.AfterDiscDPP
	--,((ISNULL((SELECT SUM(AfterDiscDPP) FROM omTrSalesInvoiceOthers 
	--	WHERE CompanyCode = @CompanyCode
	--		AND BranchCode = @BranchCode
	--		AND InvoiceNo = a.InvoiceNo), 0) + c.AfterDiscDPP) * 0.10) AfterDiscPPn, c.AfterDiscPPnBM, v.PPnBMBuyPaid
	,((ISNULL((SELECT SUM(AfterDiscDPP) FROM omTrSalesInvoiceOthers --Perubahan
		WHERE CompanyCode = @CompanyCode --Perubahan
			AND BranchCode = @BranchCode --Perubahan
			AND InvoiceNo = a.InvoiceNo), 0) + c.AfterDiscPPn)) AfterDiscPPn, c.AfterDiscPPnBM, v.PPnBMBuyPaid --Perubahan
	, ISNULL((SELECT SUM(AfterDiscDPP) FROM omTrSalesInvoiceOthers
		WHERE CompanyCode = @CompanyCode
			AND BranchCode = @BranchCode
			AND InvoiceNo = a.InvoiceNo), 0) TotalOthers
	--, ((ISNULL((SELECT SUM(AfterDiscDPP) FROM omTrSalesInvoiceOthers 
	--	WHERE CompanyCode = @CompanyCode
	--		AND BranchCode = @BranchCode
	--		AND InvoiceNo = a.InvoiceNo), 0) + c.AfterDiscDPP) * 0.10) +
	, ((ISNULL((SELECT SUM(AfterDiscDPP) FROM omTrSalesInvoiceOthers --Perubahan
		WHERE CompanyCode = @CompanyCode --Perubahan
			AND BranchCode = @BranchCode --Perubahan
			AND InvoiceNo = a.InvoiceNo), 0) + c.AfterDiscPPn)) + --Perubahan
	  (ISNULL((SELECT SUM(AfterDiscDPP) FROM omTrSalesInvoiceOthers 
		WHERE CompanyCode = @CompanyCode
			AND BranchCode = @BranchCode
			AND InvoiceNo = a.InvoiceNo), 0) + c.AfterDiscDPP) AfterDiscTotal
	,case @SalesType when '0' then 'WHOLE SALES' when '1' then 'DIRECT' else 'All' end as pSALESTYPE,
	case when @CustomerFrom = '' then 'All'
		else @CustomerFrom + ' s/d ' + @CustomerTo 
	end as pCUST,
	case when @ModelFrom = '' then 'All'
		else @ModelFrom + ' s/d ' + @ModelTo 
	end as pMODEL,
	case when @InvoiceFrom= '' then 'All'
		else @InvoiceFrom + ' s/d ' + @InvoiceTo 
	end as pINV
FROM 
	omTrSalesInvoice a
	INNER JOIN omTrSalesInvoiceBPK b ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode AND a.InvoiceNo = b.InvoiceNo
	INNER JOIN omTrSalesInvoiceModel c ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode AND a.InvoiceNo = c.InvoiceNo
		AND b.BPKNo = c.BPKNo
	LEFT JOIN omTrSalesInvoiceVin d ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode AND a.InvoiceNo = d.InvoiceNo
		AND b.BPKNo = d.BPKNo AND c.SalesModelCode = d.SalesModelCode
		AND c.SalesModelYear = d.SalesModelYear
	LEFT JOIN omTrSalesBPK e ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode AND b.BPKNo = e.BPKNo
	LEFT JOIN gnMstCustomer f ON a.CompanyCode = f.CompanyCode
		AND a.CustomerCode = f.CustomerCode
	LEFT JOIN omTrSalesSO g ON a.CompanyCode = g.CompanyCode
		AND a.BranchCode = g.BranchCode AND a.SONo = g.SONo
	LEFT JOIN omMstModel h ON a.CompanyCode = h.CompanyCode
		AND c.SalesModelCode = h.SalesModelCode	
	LEFT JOIN OmMstVehicle v ON d.CompanyCode = v.CompanyCode 
		AND d.ChassisCode = v.ChassisCode AND d.ChassisNo = v.ChassisNo
WHERE 
	a.CompanyCode = @CompanyCode
	AND ((CASE WHEN @BranchCode = '' THEN a.BranchCode END) <> ''
			OR (CASE WHEN @BranchCode <> '' THEN a.BranchCode END) = @BranchCode)
	AND ((CASE WHEN @FromDate = '' THEN a.InvoiceDate END) <> ''
			OR (CASE WHEN @FromDate <> '' THEN CONVERT(VARCHAR, a.InvoiceDate, 112) END) BETWEEN @FromDate AND @ToDate)
	AND ((CASE WHEN @InvoiceFrom = '' THEN a.InvoiceNo END) <> ''
			OR (CASE WHEN @InvoiceFrom <> '' THEN a.InvoiceNo END) BETWEEN @InvoiceFrom AND @InvoiceTo)
	AND ((CASE WHEN @CustomerFrom = '' THEN a.CustomerCode END) <> ''
			OR (CASE WHEN @CustomerFrom <> '' THEN a.CustomerCode END) BETWEEN @CustomerFrom AND @CustomerTo)
	AND ((CASE WHEN @ModelFrom = '' THEN c.SalesModelCode END) <> ''
			OR (CASE WHEN @ModelFrom <> '' THEN c.SalesModelCode END) BETWEEN @ModelFrom AND @ModelTo)
	AND ((CASE WHEN @SalesType = '' THEN g.SalesType END) <> ''
			OR (CASE WHEN @SalesType <> '' THEN g.SalesType END) = @SalesType)
ORDER BY 
	a.BranchCode,a.InvoiceNo

SELECT DISTINCT
	a.BranchCode
	, f.CompanyName
	, c.SalesModelCode
	, h.SalesModelDesc
	, d.ColourCode
	, e.RefferenceDesc1 ColourName
	,COUNT(d.ChassisNo) Unit
	,SUM(c.AfterDiscTotal) AfterDiscTotal
FROM 
	omTrSalesInvoice a
	INNER JOIN omTrSalesInvoiceBPK b ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode AND a.InvoiceNo = b.InvoiceNo
	INNER JOIN omTrSalesInvoiceModel c ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode AND a.InvoiceNo = c.InvoiceNo
		AND b.BPKNo = c.BPKNo
	LEFT JOIN omTrSalesInvoiceVin d ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode AND a.InvoiceNo = d.InvoiceNo
		AND b.BPKNo = d.BPKNo AND c.SalesModelCode = d.SalesModelCode
		AND c.SalesModelYear = d.SalesModelYear
	LEFT JOIN omMstRefference e ON a.CompanyCode = e.CompanyCode
		AND RefferenceType='COLO' AND RefferenceCode=d.ColourCode
	LEFT JOIN gnMstCoProfile f ON a.CompanyCode = a.CompanyCode
		AND a.BranchCode = f.BranchCode
	LEFT JOIN omTrSalesSO g ON a.CompanyCode = g.CompanyCode
		AND a.BranchCode = g.BranchCode AND a.SONo = g.SONo
	LEFT JOIN omMstModel h ON a.CompanyCode = h.CompanyCode
		AND c.SalesModelCode = h.SalesModelCode
WHERE 
	a.CompanyCode = @CompanyCode
	AND ((CASE WHEN @BranchCode = '' THEN a.BranchCode END) <> ''
			OR (CASE WHEN @BranchCode <> '' THEN a.BranchCode END) = @BranchCode)
	AND ((CASE WHEN @FromDate = '' THEN a.InvoiceDate END) <> ''
			OR (CASE WHEN @FromDate <> '' THEN CONVERT(VARCHAR, a.InvoiceDate, 112) END) BETWEEN @FromDate AND @ToDate)
	AND ((CASE WHEN @InvoiceFrom = '' THEN a.InvoiceNo END) <> ''
			OR (CASE WHEN @InvoiceFrom <> '' THEN a.InvoiceNo END) BETWEEN @InvoiceFrom AND @InvoiceTo)
	AND ((CASE WHEN @CustomerFrom = '' THEN a.CustomerCode END) <> ''
			OR (CASE WHEN @CustomerFrom <> '' THEN a.CustomerCode END) BETWEEN @CustomerFrom AND @CustomerTo)
	AND ((CASE WHEN @ModelFrom = '' THEN c.SalesModelCode END) <> ''
			OR (CASE WHEN @ModelFrom <> '' THEN c.SalesModelCode END) BETWEEN @ModelFrom AND @ModelTo)
	AND ((CASE WHEN @SalesType = '' THEN g.SalesType END) <> ''
			OR (CASE WHEN @SalesType <> '' THEN g.SalesType END) = @SalesType)
GROUP BY
	c.SalesModelCode
	, h.SalesModelDesc
	, d.ColourCode	
	, e.RefferenceDesc1
	, a.BranchCode
	, f.CompanyName
ORDER BY a.BranchCode, c.SalesModelCode, d.ColourCode


END
GO
ALTER procedure [dbo].[uspfn_SvMstLbrPriceUpdInMstJob]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@UserId varchar(15),
	@Now datetime
as      

-- update <> ('FSC')
;with t_task
as
(
    select CompanyCode, ProductType, BasicModel, OperationNo, Description, LaborPrice, LastUpdateBy, LastUpdateDate,
        isnull((
         select top 1 LaborPrice from svMstlaborRate
          where CompanyCode = svMstTask.CompanyCode
            and BranchCode  = @BranchCode
            and ProductType = svMstTask.ProductType
            and LaborCode   = 'CUSTOMER'
            and IsActive    = 1
            and EffectiveDate <= getdate()
          order by EffectiveDate desc
        ),0) as CustomerPrice,
        isnull((
         select top 1 LaborPrice from svMstlaborRate
          where CompanyCode = svMstTask.CompanyCode
            and BranchCode  = @BranchCode
            and ProductType = svMstTask.ProductType
            and LaborCode   = 'AREAFACT'
            and IsActive    = 1
            and EffectiveDate <= getdate()
          order by EffectiveDate desc
        ),0) as AreaFact,
        isnull((
         select top 1 LaborPrice from svMstlaborRate
          where CompanyCode = svMstTask.CompanyCode
            and BranchCode  = @BranchCode
            and ProductType = svMstTask.ProductType
            and LaborCode   = svMstTask.BasicModel
            and IsActive    = 1
            and EffectiveDate <= getdate()
          order by EffectiveDate desc
        ),0) as ModelFact,
        isnull((
         select top 1 LaborPrice from svMstlaborRate
          where CompanyCode = svMstTask.CompanyCode
            and BranchCode  = @BranchCode
            and ProductType = svMstTask.ProductType
            and LaborCode   = 'DLRSPTYPE'
            and IsActive    = 1
            and EffectiveDate <= getdate()
          order by EffectiveDate desc
        ),0) as DealerFact
     from svMstTask
    where 1 = 1
      and CompanyCode = @CompanyCode
      and ProductType = @ProductType
      and exists (
     select * from svMstJob
      where CompanyCode  = svMstTask.CompanyCode
        and ProductType  = svMstTask.ProductType
        and BasicModel   = svMstTask.BasicModel
        and JobType      = svMstTask.JobType
        and GroupJobType not in ('FSC') -- update 23 Apr  BDR dihapus
    )
)
--select * from t_task where LaborPrice <> (CustomerPrice * AreaFact * ModelFact * DealerFact)
update t_task
   set LaborPrice = (CustomerPrice * AreaFact * ModelFact * DealerFact)
     , LastUpdateBy   = @UserID
     , LastUpdateDate = @Now
 where LaborPrice <> (CustomerPrice * AreaFact * ModelFact * DealerFact)

-- update CLM
;with t_task
as
(
    select CompanyCode, ProductType, BasicModel, OperationNo, Description, LaborCost, LastUpdateBy, LastUpdateDate,
        isnull((
         select top 1 LaborPrice from svMstlaborRate
          where CompanyCode = svMstTask.CompanyCode
            and BranchCode  = @BranchCode
            and ProductType = svMstTask.ProductType
            and LaborCode   = 'SUZUKI'
            and IsActive    = 1
            and EffectiveDate <= getdate()
          order by EffectiveDate desc
        ),0) as NewLaborCost
     from svMstTask
    where 1 = 1
      and CompanyCode = @CompanyCode
      and ProductType = @ProductType
      and exists (
     select * from svMstJob
      where CompanyCode  = svMstTask.CompanyCode
        and ProductType  = svMstTask.ProductType
        and BasicModel   = svMstTask.BasicModel
        and JobType      = svMstTask.JobType
        and GroupJobType = 'CLM'
    )
)
--select * from t_task where LaborCost <> NewLaborCost
update t_task
   set LaborCost = NewLaborCost
     , LastUpdateBy   = @UserID
     , LastUpdateDate = @Now
 where LaborCost <> NewLaborCost
GO
-- usprpt_SvRpMst014 '1234501','123450101','%','%','%',1,'%',0,0,'%'
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<MASTER PEKERJAAN>
-- =============================================
ALTER procedure [dbo].[usprpt_SvRpMst014]
 @CompanyCode varchar(15),
 @BranchCode varchar(15), 
 @BasicModel varchar(15),
 @JobType varchar(15),
 @GroupJobType varchar(15),
 @IsActive varchar(1),
 @OperationNo varchar(50),
 @IsSubCon varchar(1),
 @IsCampaign varchar(1),
 @PartNo varchar(20)  
 
as 

select 
 job.BasicModel
 ,job.JobType
 ,job.GroupJobType
 ,job.WarrantyOdometer
 ,convert(varchar, job.WarrantyTimePeriod) + ' ' + (select LookUpValueName from GnMstLookupDtl where CompanyCode = job.CompanyCode and CodeID = 'STWK' and LookUpValue = job.WarrantyTimeDim) as WarrantyTimePeriod
 ,job.ReceivableAccountNo
 ,case job.IsPdiFsc when 1 then 'Ya' else 'Tidak' end IsPdiFsc
 ,job.PdiFscSeq
 ,case job.IsActive when 1 then 'Aktif' else 'Tidak' end [Status]
 ,tsk.OperationNo
 ,tsk.Description Keterangan
 ,tsk.OperationHour
 ,tsk.ClaimHour
 ,case tsk.IsSubCon when 1 then 'Ya' else 'Tidak' end [Sub-Con]
 ,case tsk.IsCampaign when 1 then 'Ya' else 'Tidak' end [Campaign]
 ,case tsk.IsActive when 1 then 'Aktif' else 'Tidak' end [StatusTask]
 ,mtp.PartNo
 ,mtp.Quantity
 ,prc.RetailPriceInclTax
 ,(select PartName from spMstItemInfo where CompanyCode = job.CompanyCode and PartNo = mtp.PartNo) PartName
from svMstJob job
 left join svMstTask tsk
   on tsk.CompanyCode = job.CompanyCode  
  and tsk.ProductType = job.ProductType  
  and tsk.BasicModel = job.BasicModel  
  and tsk.JobType = job.JobType 
 left join svMstTaskPart mtp
   on mtp.CompanyCode = job.CompanyCode
  and mtp.ProductType = job.ProductType  
  and mtp.BasicModel = job.BasicModel  
  and mtp.JobType = job.JobType 
  and mtp.OperationNo = tsk.OperationNo
   left join spMstItemPrice prc
   on prc.CompanyCode = job.CompanyCode
  and prc.BranchCode = @BranchCode
  and prc.PartNo = mtp.PartNo
where job.CompanyCode = @CompanyCode
  and (case @BasicModel when '%' then '%' else job.BasicModel end) = @BasicModel
  and (case @JobType when '%' then '%' else job.JobType end) = @JobType
  and (case @GroupJobType when '%' then '%' else job.GroupJobType end) = @GroupJobType 
  and job.IsActive = @IsActive
  and (case @OperationNo when '%' then '%' else tsk.OperationNo end) = @OperationNo 
  and isnull(tsk.IsSubCon,0) = @IsSubCon
  and isnull(tsk.IsCampaign,0) = @IsCampaign
  and (case @PartNo when '%' then '%' else mtp.PartNo end) = @PartNo
GO
--usprpt_OmRpSalRgs002 '6043401','604340100','2009/01/01','2009/12/01',''
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<REGISTER DELIVERY ORDER>
-- =============================================
ALTER procedure [dbo].[usprpt_OmRpSalRgs002] 
(
	@CompanyCode VARCHAR(15),
	@BranchCode	VARCHAR(15),
	@FromDate DATETIME,
	@ToDate DATETIME,
	@SalesType VARCHAR(2),
	@CustomerFrom VARCHAR(15),
	@CustomerTo VARCHAR(15),
	@ModelFrom VARCHAR(15),
	@ModelTo VARCHAR(15),
	@DOFrom VARCHAR(15),
	@DOTo VARCHAR(15)
	--@param CHAR(2)
)
AS
BEGIN

--declare	@CompanyCode VARCHAR(15),
--		@BranchCode	VARCHAR(15),
--		@FromDate DATETIME,
--		@ToDate DATETIME,
--		@SalesType VARCHAR(2),
--		@CustomerFrom VARCHAR(15),
--		@CustomerTo VARCHAR(15),
--		@ModelFrom VARCHAR(15),
--		@ModelTo VARCHAR(15),
--		@DOFrom VARCHAR(15),
--		@DOTo VARCHAR(15)

--set	@CompanyCode = '6051401'
--set @BranchCode	= '6051412'
--set @FromDate = '20140101'
--set	@ToDate = '20140131'
--set	@SalesType = ''
--set	@CustomerFrom = ''
--set	@CustomerTo = ''
--set	@ModelFrom = ''
--set	@ModelTo = ''
--set	@DOFrom = ''
--set	@DOTo = ''

SELECT 
	a.BranchCode
	,(
		select CompanyName 
		from gnMstCoProfile
		where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode
	) BranchName
	,a.DODate,a.DONo,d.LookUpValueName as Expired
	,g.CustomerName + ' [' + a.CustomerCode + ']' as pCustomer,a.SONo
	--,isnull(h.InvoiceNo,'') InvoiceNo --Sebelum Perubahan
	,isnull(e.InvoiceNo,'') InvoiceNo
	,isnull(h.InvoiceDate,'')InvoiceDate,a.WareHouseCode,b.DOSeq,b.SalesModelCode,b.SalesModelYear,
	b.ColourCode,b.ChassisNo,b.EngineNo,f.BPKNo,f.BPKDate
	,case @SalesType when '0' then 'WHOLE SALES' 
		when '1' then 'DIRECT' 
		else 'All' 
	end as pSALESTYPE
	,case when @CustomerFrom = '' then 'All'
		else @CustomerFrom + ' s/d ' + @CustomerTo 
	end as pCUST
	,case when @ModelFrom = '' then 'All'
		else @ModelFrom + ' s/d ' + @ModelTo 
	end as pMODEL
	,case when @DOFrom = '' then 'All'
		else @DOFrom + ' s/d ' + @DOTo 
	end as pDO
FROM 
	OmTrSalesDO a
	INNER JOIN OmTrSalesDODetail b ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode AND a.DONo = b.DONo
	LEFT JOIN omTrSalesSO c ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode AND a.SONo = c.SONo
	LEFT JOIN gnMstLookUpDtl d ON a.CompanyCode = d.CompanyCode
		AND c.TOPCode = d.LookUpValue AND d.CodeID='TOPC'
	LEFT JOIN ommstVehicle i on a.CompanyCode=i.CompanyCode AND b.ChassisCode = i.ChassisCode
		AND b.ChassisNo = i.ChassisNo 
	LEFT JOIN omTrSalesInvoiceVin e ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode and i.InvoiceNo=e.InvoiceNo AND b.ChassisCode = e.ChassisCode
		AND b.ChassisNo = e.ChassisNo
	LEFT JOIN omTrSalesBPK f ON a.CompanyCode = f.CompanyCode
		AND a.BranchCode = f.BranchCode AND f.DONo = a.DONo	
	LEFT JOIN gnMstCustomer g ON a.CompanyCode = g.CompanyCode
		AND a.CustomerCode = g.CustomerCode
	LEFT JOIN omTrSalesInvoice h ON a.CompanyCode = h.CompanyCode
		AND a.BranchCode = h.BranchCode
		AND a.SONo = h.SONo
		AND e.InvoiceNo = h.InvoiceNo	-- Penambahan	
		
WHERE 
	a.CompanyCode = @CompanyCode
	AND ((CASE WHEN @BranchCode = '' THEN a.BranchCode END) <> ''
		OR (CASE WHEN @BranchCode <> '' THEN a.BranchCode END) = @BranchCode)
	AND --((CASE WHEN @FromDate = '' THEN a.DODate END) <> '' -- Sebelum Perubahan
			--OR (CASE WHEN @FromDate <> '' THEN convert(varchar,a.DODate,112) END) BETWEEN @FromDate AND @ToDate) -- Sebelum Perubahan
			CONVERT(varchar, a.DODate,112) BETWEEN CONVERT(VARCHAR, @FromDate, 112) AND CONVERT(VARCHAR, @ToDate, 112) -- Sesudah Perubahan
	AND ((CASE WHEN @SalesType = '' THEN c.SalesType END) <> ''
		OR (CASE WHEN @SalesType <> '' THEN c.SalesType END) = @SalesType)
	AND ((CASE WHEN @CustomerFrom = '' THEN a.CustomerCode END) <> ''
			OR (CASE WHEN @CustomerFrom <> '' THEN a.CustomerCode END) BETWEEN @CustomerFrom AND @CustomerTo)
	AND ((CASE WHEN @ModelFrom = '' THEN b.SalesModelCode END) <> ''
			OR (CASE WHEN @ModelFrom <> '' THEN b.SalesModelCode END) BETWEEN @ModelFrom AND @ModelTo)
	AND ((CASE WHEN @DOFrom = '' THEN a.DONo END) <> ''
			OR (CASE WHEN @DOFrom <> '' THEN a.DONo END) BETWEEN @DOFrom AND @DOTo)
	AND a.Status = '2' --Penambahan Data
	AND f.Status != '3' --Penambahan Data
	AND (h.Status != '3' or h.InvoiceNo is null) --Penambahan Data
	
ORDER BY
	a.DODate,a.BranchCode,b.DOSeq
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
ALTER PROCEDURE [dbo].[usprpt_GlRpRgs011]
(
	@CompanyCode  varchar(15),
	@BranchCodeFrom  varchar(15),
	@BranchCodeTo  varchar(15),
	@FiscalYear   varchar(15),
	@Status varchar(15),
	@DocSource char(2),
	@Periode varchar(15),
	@StartDate datetime,
	@EndDate datetime,
	@AccComp01 varchar(3),
	@AccComp02 varchar(3),
	@AccBranch01 varchar(3),
	@AccBranch02 varchar(3),
	@AccCostCenter01  varchar(3),
	@AccCostCenter02  varchar(3),
	@AccProdType01 varchar(5),
	@AccProdType02 varchar(5),
	@AccNatural01 varchar(6),
	@AccNatural02 varchar(6),
	@AccInterComp01 varchar(3),
	@AccInterComp02 varchar(3),	
	@AccFutureUse01 varchar(3),
	@AccFutureUse02 varchar(3),
	@Trx char(1)
)
as
begin

--declare @CompanyCode  varchar(15),
--		@BranchCodeFrom  varchar(15),
--		@BranchCodeTo  varchar(15),
--		@FiscalYear   varchar(15),	
--		@Status varchar(15),
--		@DocSource char(2),
--		@Periode varchar(15),
--		@StartDate datetime,
--		@EndDate datetime,
--		@AccComp01 varchar(3),
--		@AccComp02 varchar(3),
--		@AccBranch01 varchar(3),
--		@AccBranch02 varchar(3),
--		@AccCostCenter01  varchar(3),
--		@AccCostCenter02  varchar(3),
--		@AccProdType01 varchar(5),
--		@AccProdType02 varchar(5),
--		@AccNatural01 varchar(6),
--		@AccNatural02 varchar(6),
--		@AccInterComp01 varchar(3),
--		@AccInterComp02 varchar(3),	
--		@AccFutureUse01 varchar(3),
--		@AccFutureUse02 varchar(3),
--		@Trx char(1)
--
--set @CompanyCode = '6006406'
--set @BranchCodeFrom = '6006400'
--set @BranchCodeTo = '6006400'
--set @FiscalYear = '2011'
--set @Status = '0'
--set @DocSource = ''
--set @Periode = '1'
--set @StartDate = '20110401'
--set @EndDate = '20110430'
--set @AccComp01 = ''
--set @AccComp02 = ''
--set @AccBranch01 = ''
--set @AccBranch02 = ''
--set @AccCostCenter01 = ''
--set @AccCostCenter02 = ''
--set @AccProdType01 = ''
--set @AccProdType02 = ''
--set @AccNatural01 = ''
--set @AccNatural02 = ''
--set @AccInterComp01 = ''
--set @AccInterComp02 = ''
--set @AccFutureUse01 = ''
--set @AccFutureUse02 = ''
--set @Trx = '1'

--usprpt_GlRpRgs011 '6006406', '6006400', '6006400', '2011', '0', '', '1', '20110401', '20110430', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '1'


/* GET TOTAL SALDO AWAL HARI BERJALAN */
----------------------------------------
select * into #t3 from(
	select 
		b.CompanyCode
		, b.BranchCode
		, b.AccountNo
		--, case @ReportType when 'REKAP' then substring(b.AccountNo,19,6) else b.AccountNo end AccountNo
		, a.FiscalYear
		, a.PeriodeNum
		, isnull(sum(b.AmountDb - b.AmountCr), 0) TotalHariJalan 
	from glJournal a
	inner join glJournalDtl b on b.CompanyCode = a.CompanyCode
		and b.BranchCode  = a.BranchCode
		and b.FiscalYear  = a.FiscalYear
		and b.JournalNo   = a.JournalNo
	left join gnMstAccount c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode 
		and c.AccountNo = b.AccountNo
	left join gnMstSegmentAcc d on a.CompanyCode = d.CompanyCode
		and a.BranchCode = d.BranchCode 
		and c.NaturalAccount = d.SegAccNo
	where 1 = 1
		and a.CompanyCode = @CompanyCode
		and (case @BranchCodeFrom when '' then '' else a.BranchCode end) between @BranchCodeFrom and @BranchCodeTo
		and a.FiscalYear  = @FiscalYear
		and a.PeriodeNum = @Periode
		and convert(varchar,a.JournalDate,112) between convert(varchar,YEAR(@StartDate),1)+RIGHT(100+MONTH(@StartDate),2)+'01' 
			and convert(varchar,YEAR(@StartDate),1)+RIGHT(100+MONTH(@StartDate),2)+RIGHT(100+(DAY(@StartDate)-1),2)
		and a.DocSource = (case when @DocSource = '' then a.DocSource else @DocSource end)
		and (a.Status = (case @Status when '0' then a.Status when '1' then '2' when '2' then '0' end) 
			  or  a.Status = (case @Status when '0' then a.Status when '1' then '2' when '2' then '1' end))
		and ((case when @AccComp01 = '' then substring(b.AccountNo,1,3) end) <> ''
			  or (case when @AccComp01 <> '' then substring(b.AccountNo,1,3) end) between @AccComp01 AND @AccComp02)
		and ((case when @AccBranch01 = '' then substring(b.AccountNo,5,3) end) <> ''
			  or (case when @AccBranch01 <> '' then substring(b.AccountNo,5,3) end) between @AccBranch01 AND @AccBranch02)
		and ((case when @AccCostCenter01 = '' then substring(b.AccountNo,9,3) end) <> ''
			  or (case when @AccCostCenter01 <> '' then substring(b.AccountNo,9,3) end) between @AccCostCenter01 AND @AccCostCenter02)
		and ((case when @AccProdType01 = '' then substring(b.AccountNo,13,5) end) <> ''
			  or (case when @AccProdType01 <> '' then substring(b.AccountNo,13,5) end) between @AccProdType01 AND @AccProdType02)
		and ((case when @AccNatural01 = '' then substring(b.AccountNo,19,6) end) <> '' 
			  or (case when @AccNatural01 <> '' then substring(b.AccountNo,19,6) end) between @AccNatural01 and @AccNatural02)
		and ((case when @AccInterComp01 = '' then substring(b.AccountNo,26,3) end) <> ''
			  or (case when @AccInterComp01 <> '' then substring(b.AccountNo,26,3) end) between @AccInterComp01 AND @AccInterComp02)
		and ((case when @AccFutureUse01 = '' then substring(b.AccountNo,30,3) end) <> ''
			  or (case when @AccFutureUse01 <> '' then substring(b.AccountNo,30,3) end) between @AccFutureUse01 AND @AccFutureUse02)
		and b.AccountNo <> (select top 1 AccCurrentEarnings from fnSystemConfigDtl where CompanyCode = @CompanyCode)
		and b.AccountNo <> (select top 1 AccRetainedEarnings from fnSystemConfigDtl where CompanyCode = @CompanyCode)
	group by 
		b.CompanyCode
		, b.BranchCode
		, b.AccountNo
		--, case @ReportType when 'REKAP' then substring(b.AccountNo,19,6) else b.AccountNo end 
		, a.FiscalYear
		, a.PeriodeNum
)#t3

/* GET ALL JOURNAL BETWEEN START DATE AND END DATE */
-----------------------------------------------------
select (row_number() over (order by AccountNo, PeriodeNum, JournalDate, JournalNo)) as RecNo, * into #t1 from (
	select 
		a.CompanyCode
		, a.BranchCode
		, a.FiscalYear, a.PeriodeNum
		, a.Status
		, b.JournalNo
		, a.JournalDate
		, b.AccountNo
		--, case @ReportType when 'REKAP' then substring(b.AccountNo,19,6) else b.AccountNo end AccountNo
		, b.AmountDB
		, b.AmountCr
		, a.DocSource
		, isnull(d.Description, c.Description) AccDescription
		--, case @ReportType when 'REKAP' then isnull(d.Description, '') else isnull(c.Description, '') end AccDescription
		, a.ReffNo
		, b.Description
		, case isnull (a.status, 0) when 0 then 'UNPOSTED' when 1 then 'UNPOSTED' when 2 then 'POSTED' else '' end as pStatus
	from glJournal a
	inner join glJournalDtl b on b.CompanyCode = a.CompanyCode
		and b.BranchCode  = a.BranchCode
		and b.FiscalYear  = a.FiscalYear
		and b.JournalNo   = a.JournalNo
	left join gnMstAccount c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode 
		and c.AccountNo = b.AccountNo
	left join gnMstSegmentAcc d on a.CompanyCode = d.CompanyCode
		and a.BranchCode = d.BranchCode 
		and c.NaturalAccount = d.SegAccNo
	where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and (case @BranchCodeFrom when '' then '' else a.BranchCode end) between @BranchCodeFrom and @BranchCodeTo
	   and a.FiscalYear  = @FiscalYear
	   and a.PeriodeNum  = @Periode
	   and convert(varchar,a.JournalDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112) 
	   and a.DocSource = (case when @DocSource = '' then a.DocSource else @DocSource end)
	   and (a.Status = (case @Status when '0' then a.Status when '1' then '2' when '2' then '0' end) 
			  or  a.Status = (case @Status when '0' then a.Status when '1' then '2' when '2' then '1' end))
	   and ((case when @AccComp01 = '' then substring(b.AccountNo,1,3) end) <> ''
		      or (case when @AccComp01 <> '' then substring(b.AccountNo,1,3) end) between @AccComp01 AND @AccComp02)
	   and ((case when @AccBranch01 = '' then substring(b.AccountNo,5,3) end) <> ''
		      or (case when @AccBranch01 <> '' then substring(b.AccountNo,5,3) end) between @AccBranch01 AND @AccBranch02)
	   and ((case when @AccCostCenter01 = '' then substring(b.AccountNo,9,3) end) <> ''
		      or (case when @AccCostCenter01 <> '' then substring(b.AccountNo,9,3) end) between @AccCostCenter01 AND @AccCostCenter02)
	   and ((case when @AccProdType01 = '' then substring(b.AccountNo,13,5) end) <> ''
		      or (case when @AccProdType01 <> '' then substring(b.AccountNo,13,5) end) between @AccProdType01 AND @AccProdType02)
	   and ((case when @AccNatural01 = '' then substring(b.AccountNo,19,6) end) <> '' 
			  or (case when @AccNatural01 <> '' then substring(b.AccountNo,19,6) end) between @AccNatural01 and @AccNatural02)
	   and ((case when @AccInterComp01 = '' then substring(b.AccountNo,26,3) end) <> ''
		      or (case when @AccInterComp01 <> '' then substring(b.AccountNo,26,3) end) between @AccInterComp01 AND @AccInterComp02)
	   and ((case when @AccFutureUse01 = '' then substring(b.AccountNo,30,3) end) <> ''
		      or (case when @AccFutureUse01 <> '' then substring(b.AccountNo,30,3) end) between @AccFutureUse01 AND @AccFutureUse02)
	   and b.AccountNo <> (select top 1 AccCurrentEarnings from fnSystemConfigDtl where CompanyCode = @CompanyCode)
	   and b.AccountNo <> (select top 1 AccRetainedEarnings from fnSystemConfigDtl where CompanyCode = @CompanyCode)
) #t1

/* SUM BEGIN BALANCE WITH TOTAL HARI JALAN TO GET SALDO AWAL */
---------------------------------------------------------------
select * into #t2 from (
select RecNo
	 , CompanyCode
	 , BranchCode
	 , FiscalYear
	 , Status
	 , JournalNo
	 , JournalDate
	 , AccountNo
	 , BegBalance = (
		select isnull(sum(BeginBalance), 0) + isnull(sum(TotalHariJalan),0)
		  from GlTrAccBalance z
			Left Join #t3 y on y.CompanyCode = z.CompanyCode
				and y.BranchCode = z.BranchCode
				and y.FiscalYear = z.FiscalYear
				and y.AccountNo  = z.AccountNo
				and y.PeriodeNum = z.PeriodeNum
		 where z.CompanyCode = a.CompanyCode
		   and z.BranchCode  = a.BranchCode
		   and z.FiscalYear  = a.FiscalYear
           and z.AccountNo = a.AccountNo
		   and z.PeriodeNum = a.PeriodeNum
		)
	 , AmountDB
	 , AmountCr 
	 , DocSource
	 , AccDescription
	 , ReffNo
	 , Description
	 , pStatus
	 , EndBalance  = convert(money, 0)
	 , ReportGroup = convert(varchar(50), '')
	 , IsLastGroup = convert(bit, 0)
  from #t1 a
)#t2


/* AKUMULASI SALDO */
---------------------
CREATE UNIQUE NONCLUSTERED INDEX IDX_t2
ON #t2(RecNo);

declare @num int, @max int, @bal money, @acc varchar(50)
set @num = 0
set @max = isnull((select top 1 RecNo from #t2 order by RecNo desc), 0)
set @bal = 0
set @acc = ''

while (@num < @max)
begin
	set @num = @num + 1
	if (@acc <> isnull((select AccountNo from #t2 where RecNo = @num), ''))
	begin
		set @acc = isnull((select AccountNo from #t2 where RecNo = @num), '')
		set @bal = isnull((select BegBalance from #t2 where RecNo = @num), 0)

		if (@num > 1) update #t2 set IsLastGroup = 1 where RecNo = (@num - 1)
	end
	set @bal = @bal + isnull((select (AmountDb - AmountCr) from #t2 where RecNo = @num), 0)
	update #t2 set EndBalance = @bal where RecNo = @num
end
update #t2 set IsLastGroup = 1 where RecNo = @Max


/* SHOW RESULT */
------------------
IF  @Trx = '0'
BEGIN
	select RecNo
		 , CompanyCode
		 , BranchCode
		 , FiscalYear
		 , Status
		 , JournalNo as DocNo
		 , JournalDate as DocDate
		 , AccountNo
		 , BegBalance as SaldoAwal
		 , AmountDB
		 , AmountCr
		 , DocSource
		 , AccDescription
		 , ReffNo
	     , Description
	     , pStatus
		 , EndBalance as Saldo
		 , ReportGroup
		 , IsLastGroup
		 , SaldoTotal = (select sum(EndBalance) from #t2 where IsLastGroup = 1)
	  from #t2
	  where JournalDate <> '19000101'
 END
 ELSE 
 BEGIN
 	 select RecNo
	 , CompanyCode
	 , BranchCode
	 , FiscalYear
	 , Status
	 , JournalNo as DocNo
	 , JournalDate as DocDate
	 , AccountNo
	 , BegBalance as SaldoAwal
	 , AmountDB
	 , AmountCr
	 , DocSource
	 , AccDescription
	 , ReffNo
	 , Description
	 , pStatus
	 , EndBalance as Saldo
	 , ReportGroup
	 , IsLastGroup
	 , SaldoTotal = (select sum(EndBalance) from #t2 where IsLastGroup = 1)
  from #t2
 END

drop table #t1
drop table #t2
drop table #t3

end
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<LAPORAN PENJUALAN SERVICE TAHUNAN PER-KELOMPOK PEKERJAAN>
-- =============================================
ALTER PROCEDURE [dbo].[usprpt_SvRpReport005]  
 @CompanyCode varchar(15),    
 @BranchCode  varchar(15),    
 @ProductType varchar(15),    
 @PeriodYear  int    
AS      
    
-- Laporan Penjualan Service Tahunan Per Kelompok Pekerjaan (SvRpReport005)
-- usprpt_SvRpReport005 '6159401','615940100','4W','2010'

--declare @CompanyCode varchar(15),    
--		@BranchCode  varchar(15),    
--		@ProductType varchar(15),    
--		@PeriodYear  int    

--set @CompanyCode = '6006406'
--set @BranchCode  =  '6006406'
--set @ProductType =  '4W'
--set @PeriodYear  = 2013

BEGIN      
    
SET NOCOUNT ON;      

select * into #t1 from (    
       select h.BasicModel, d.OperationNo, h.JobType,
              h.InvoiceDate, count(d.OperationNo) Unit,
              sum(isnull(d.OperationHour,0)*isnull(d.OperationCost,0)
              *  (100-h.LaborDiscPct)/100) Dpp
         from svTrnInvoice h, svTrnInvTask d
        where 1 = 1    
          and h.CompanyCode         = d.CompanyCode    
          and h.BranchCode          = d.BranchCode    
          and h.ProductType         = d.ProductType    
          and h.InvoiceNo           = d.InvoiceNo
          and h.CompanyCode         = @CompanyCode    
          and h.BranchCode          = @BranchCode    
          and h.ProductType         = @ProductType    
          and year (h.InvoiceDate)  = @PeriodYear     
        group by d.OperationNo, h.BasicModel, h.JobType, h.InvoiceDate) #t1  

select * into #t2 from (    
       select convert(varchar(100),'') as OperationNo
             ,convert(varchar(200),'') as Description
             ,convert(varchar(50),'')  as BasicModel
             ,convert(varchar(100),'') as JobType
             ,convert(decimal,0)       as JanDpp    
             ,convert(decimal,0)       as FebDpp    
             ,convert(decimal,0)       as MarDpp    
             ,convert(decimal,0)       as AprDpp    
             ,convert(decimal,0)       as MayDpp    
             ,convert(decimal,0)       as JunDpp    
             ,convert(decimal,0)       as JulDpp    
             ,convert(decimal,0)       as AugDpp    
             ,convert(decimal,0)       as SepDpp    
             ,convert(decimal,0)       as OctDpp    
             ,convert(decimal,0)       as NovDpp    
             ,convert(decimal,0)       as DecDpp    
             ,convert(decimal,0)       as TotDpp) #t2

    
select * into #t3 from (    
       select convert(varchar(100),'') as OperationNo
             ,convert(varchar(200),'') as Description
             ,convert(varchar(50),'')  as BasicModel
             ,convert(decimal,0)       as JanDpp    
             ,convert(decimal,0)       as FebDpp    
             ,convert(decimal,0)       as MarDpp    
             ,convert(decimal,0)       as AprDpp    
             ,convert(decimal,0)       as MayDpp    
             ,convert(decimal,0)       as JunDpp    
             ,convert(decimal,0)       as JulDpp    
             ,convert(decimal,0)       as AugDpp    
             ,convert(decimal,0)       as SepDpp    
             ,convert(decimal,0)       as OctDpp    
             ,convert(decimal,0)       as NovDpp    
             ,convert(decimal,0)       as DecDpp    
             ,convert(decimal,0)       as TotDpp) #t3

delete #t2 where OperationNo = '' and TotDpp=0    
delete #t3 where OperationNo = '' and TotDpp=0    

insert into #t2  
       select OperationNo, '', BasicModel, JobType,
              sum(case month(InvoiceDate) when   1 then Dpp else 0 end) as JanDpp,
              sum(case month(InvoiceDate) when   2 then Dpp else 0 end) as FebDpp,
              sum(case month(InvoiceDate) when   3 then Dpp else 0 end) as MarDpp,
              sum(case month(InvoiceDate) when   4 then Dpp else 0 end) as AprDpp,
              sum(case month(InvoiceDate) when   5 then Dpp else 0 end) as MayDpp,
              sum(case month(InvoiceDate) when   6 then Dpp else 0 end) as JunDpp,
              sum(case month(InvoiceDate) when   7 then Dpp else 0 end) as JulDpp,
              sum(case month(InvoiceDate) when   8 then Dpp else 0 end) as AugDpp,
              sum(case month(InvoiceDate) when   9 then Dpp else 0 end) as SepDpp,
              sum(case month(InvoiceDate) when  10 then Dpp else 0 end) as OctDpp,
              sum(case month(InvoiceDate) when  11 then Dpp else 0 end) as NovDpp,
              sum(case month(InvoiceDate) when  12 then Dpp else 0 end) as DecDpp,
              sum(Dpp) as TotDpp
         from #t1  
        group by OperationNo, BasicModel, JobType


update #t2 
   set OperationNo = substring(OperationNo,1,2)
      ,Description = (select r.Description 
                        from svMstRefferenceService r
                       where r.CompanyCode   =@CompanyCode
                         and r.ProductType   =@ProductType
                         and r.RefferenceType='SECTIOCD'
                         and r.RefferenceCode=substring(#t2.OperationNo,1,2))
 where exists (select 1 from svMstTask
                where svMstTask.CompanyCode=@CompanyCode
                  and svMstTask.ProductType=@ProductType
--                and svMstTask.BasicModel =#t2.BasicModel
                  and svMstTask.JobType    ='CLAIM'
                  and svMstTask.OperationNo=#t2.OperationNo)


update #t2 set OperationNo = JobType where OperationNo like 'PB%'
update #t2 set OperationNo = 'PB5000' where OperationNo in ('PAKET FS 2','PAKET FS_2', 'PAKET 5000 KM')
update #t2 set OperationNo = 'PB10000' where OperationNo in ('PAKET 10.000 KM', 'PAKET FS_3')
update #t2 set OperationNo = 'PB20000' where OperationNo in ('PAKET 20.000 KM', 'PAKET FS_4')
update #t2 set OperationNo = (select top 1 'PB'+convert(varchar,WarrantyOdometer,100) from #t2 a
								left join svMstjob on svMstjob.BasicModel = a.BasicModel
								and svMstjob.JobType = a.JobType
								where svMstjob.CompanyCode = @CompanyCode
								and svMstjob.ProductType = @ProductType
								and a.Jobtype = 'PAKET A') where OperationNo = 'PAKET A'
update #t2 set OperationNo = (select top 1 'PB'+convert(varchar,WarrantyOdometer,100) from #t2 a
								left join svMstjob on svMstjob.BasicModel = a.BasicModel
								and svMstjob.JobType = a.JobType
								where svMstjob.CompanyCode = @CompanyCode
								and svMstjob.ProductType = @ProductType
								and a.Jobtype = 'PAKET B') where OperationNo = 'PAKET B'
update #t2 set OperationNo = (select top 1 'PB'+convert(varchar,WarrantyOdometer,100) from #t2 a
								left join svMstjob on svMstjob.BasicModel = a.BasicModel
								and svMstjob.JobType = a.JobType
								where svMstjob.CompanyCode = @CompanyCode
								and svMstjob.ProductType = @ProductType
								and a.Jobtype = 'PAKET C') where OperationNo = 'PAKET C'
update #t2 set OperationNo = (select top 1 'PB'+convert(varchar,WarrantyOdometer,100) from #t2 a
								left join svMstjob on svMstjob.BasicModel = a.BasicModel
								and svMstjob.JobType = a.JobType
								where svMstjob.CompanyCode = @CompanyCode
								and svMstjob.ProductType = @ProductType
								and a.Jobtype = 'PAKET D') where OperationNo = 'PAKET D'

update #t2
   set Description = (select m.Description 
                        from svMstTask m
                       where m.CompanyCode=@CompanyCode
                         and m.ProductType=@ProductType
                         and m.BasicModel =#t2.BasicModel
                         and m.JobType    =#t2.JobType
                         and m.OperationNo=#t2.OperationNo)
 where (Description = null or Description = '')

insert into #t3 
       select OperationNo, Description, BasicModel, 
              sum(JanDpp) JanDpp, sum(FebDpp) FebDpp, sum(MarDpp) MarDpp,
              sum(AprDpp) AprDpp, sum(MayDpp) MayDpp, sum(JunDpp) JunDpp,
              sum(JulDpp) JulDpp, sum(AugDpp) AugDpp, sum(SepDpp) SepDpp,
              sum(OctDpp) OctDpp, sum(NovDpp) NovDpp, sum(DecDpp) DecDpp,
              sum(TotDpp) TotDpp
         from #t2
        group by OperationNo, Description, BasicModel

select
 @PeriodYear PeriodYear
,rtrim(OperationNo) + '-' + rtrim(Description) OperationDesc
,* from #t3 
order by OperationNo, Description, BasicModel

drop table #t1    
drop table #t2    
drop table #t3
    
END
GO
-- ====================================================================================================================================
-- Author           : Seandy A.K
-- Create date      : 13-8-2013
-- Revision by      : Hasim
-- Revision date    : 14-11-2013
-- Description      : Summary ITS Outstanding Not Update  ==>  Inquiry Outstanding Prospek
-- Query Activation : uspfn_InquiryITSOutsNUpdate '2013-10-16','','','',0
-- exec uspfn_InquiryITSOutsNUpdate @StartDate=N'20130930',@Area=N'',@CompanyCode=N'',@BranchCode=N'',@Summary=N'0'
-- exec uspfn_InquiryITSOutsNUpdate @StartDate=N'20130930',@Area=N'',@CompanyCode=N'',@BranchCode=N'',@Summary=N'1'
-- exec uspfn_InquiryITSOutsNUpdate @StartDate=N'20130930',@Area=N'CABANG',@CompanyCode=N'6006406',@BranchCode=N'6006406',@Summary=N'0'
-- exec uspfn_InquiryITSOutsNUpdate @StartDate=N'20130930',@Area=N'CABANG',@CompanyCode=N'6006406',@BranchCode=N'',@Summary=N'0'
-- exec uspfn_InquiryITSOutsNUpdate @StartDate=N'20130930',@Area=N'CABANG',@CompanyCode=N'6006406',@BranchCode=N'',@Summary=N'1'
-- ====================================================================================================================================

ALTER procedure [dbo].[uspfn_InquiryITSOutsNUpdate]
	  @StartDate	  varchar(10),
	  @Area			  varchar(100),
	  @CompanyCode	  varchar(15),
	  @BranchCode	  varchar(15),
	  @Summary		  bit
AS

BEGIN
      declare @National varchar(10)
      set @National = (select top 1 ISNULL(ParaValue,0) from gnMstLookUpDtl
                        where CodeID='QSLS' and LookUpValue='NATIONAL')

      if (@National = 0)  -- Dealer
         begin
              select * into #t1 from(
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            upper(e.EmployeeName) "Salesman", upper(f.EmployeeName) "Koordinator", 
                            k.InquiryNumber, k.BranchCode Branch_Code, k.CompanyCode Company_Code, 
                            k.InquiryDate, a.NextFollowUpDate, 
                          --k.LastUpdateStatus, 
                           (select top 1 h.UpdateDate
                              from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress <> 'P'
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastUpdateStatus,
                            k.SPKDate, a.ActivityDate,
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, 
                          --k.LastProgess
                           (select top 1 upper(h.LastProgress) from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                              where hs.CompanyCode   = h.CompanyCode
		                                                and hs.BranchCode    = h.BranchCode
		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                and hs.LastProgress <> 'P'
		                                                and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
                    		                                                and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
                    		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastProgress,
                            k.Leasing, k.DownPayment, k.Tenor, upper(a.ActivityType) "ActivityType",
                            upper(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32))) "ActivityDetail" 
                       from pmKDP k, pmActivities a, pmBranchOutlets O, gnMstEmployee E, gnMstEmployee F
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = a.CompanyCode
                        and k.BranchCode    = a.BranchCode
                        and k.inquiryNumber = a.InquiryNumber
                        and a.ActivityId    = (select max(activityID) from pmActivities 
                                                where CompanyCode   = k.CompanyCode
                                                  and BranchCode    = k.BranchCode
                                                  and InquiryNumber = k.InquiryNumber)
                        and a.NextFollowUpDate <= @StartDate
                      --and k.CompanyCode   = o.CompanyCode
                      --and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                        and k.CompanyCode   = e.CompanyCode
                        and k.BranchCode    = e.BranchCode
                        and k.EmployeeID    = e.employeeID
                        and k.CompanyCode   = f.CompanyCode
                        and k.BranchCode    = f.BranchCode 
                        and k.SpvEmployeeId = f.EmployeeID 
                      ) #t1
                      where LastProgress is not null
                     union 
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            upper(e.EmployeeName) "Salesman", upper(F.EmployeeName) "Koordinator", 
                            k.InquiryNumber, k.BranchCode, k.CompanyCode, k.InquiryDate, '1-1-1900' "NextFollowUpDate",
                            k.LastUpdateStatus, k.SPKDate, '1-1-1900' "LastActivityDate",
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, k.LastProgress, k.Leasing, k.DownPayment, k.Tenor, '' "ActivityType", '' "ActivityDetail" 
                       from pmKDP k, pmBranchOutlets o, gnMstEmployee e, gnMstEmployee f
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = o.CompanyCode
                        and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                        and k.CompanyCode   = e.CompanyCode
                        and k.BranchCode    = e.BranchCode
                        and k.EmployeeID    = e.employeeID
                        and k.CompanyCode   = f.CompanyCode
                        and k.BranchCode    = f.BranchCode 
                        and k.SpvEmployeeId = f.EmployeeID 
                        and not exists (select 1 from pmActivities 
                                         where CompanyCode   = k.CompanyCode
                                           and BranchCode    = k.BranchCode
                                           and InquiryNumber = k.InquiryNumber)

			  if (@Summary = 0)
			     begin
		             select b.Area, b.DealerAbbreviation CompanyName, c.OutletAbbreviation BranchName, a.CompanyCode, 
					        a.BranchCode, a.OutletName, a.Salesman, a.Koordinator, a.InquiryNumber, 
			                case when convert(varchar,a.InquiryDate     ,112)='19000101' then NULL else a.InquiryDate      end InquiryDate,
			                case when convert(varchar,a.NextFollowUpDate,112)='19000101' then NULL else a.NextFollowUpDate end NextFollowUpDate,
			                case when convert(varchar,a.LastUpdateStatus,112)='19000101' then NULL else a.LastUpdateStatus end LastUpdateStatus,
			                case when convert(varchar,a.SPKDate         ,112)='19000101' then NULL else a.SPKDate          end SPKDate,
			                case when convert(varchar,a.ActivityDate    ,112)='19000101' then NULL else a.ActivityDate     end "LastActivityDate",
                            Status, a.PerolehanData, a.NamaProspek, a.TelpRumah, a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode,
                            a.CaraBayar, a.TestDrive, a.QuantityInquiry, a.LastProgress, a.Leasing, a.DownPayment, a.Tenor, a.ActivityType,
			                replace(replace(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32)),'<','('),'>',')') "ActivityDetail"
  					   from #t1 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation
                 end		 
	          else
	             begin
 	                 select * into #t2 from (
   	                        select k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName, count(k.InquiryNumber) TotalKDP
           	                  from pmKDP k, pmBranchOutlets O 
    	                     where k.InquiryDate<=@StartDate
    	                       and k.CompanyCode=o.CompanyCode
		                       and k.BranchCode=o.BranchCode
	 	                	   and k.OutletID=O.OutletID
           	                 --and LastProgress not in ('DO','DELIVERY','LOST')
             	               and not exists (select top 1 1 from pmStatusHistory
                              	                where CompanyCode   = k.CompanyCode
		                       	                  and BranchCode    = k.BranchCode
		                       	                  and InquiryNumber = k.InquiryNumber
		                       	                  and UpdateDate   <= @StartDate
		                       	                  and LastProgress in ('DO','DELIVERY','LOST'))
          	                 group by k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName) #t2

                     select * into #t3 from (
					        select t2.CompanyCode, t2.BranchCode, t2.OutletName, t2.TotalKDP, count(t1.InquiryDate) "TidakUpdate" 
                              from #t2 t2, #t1 t1
                             where t2.CompanyCode = t1.CompanyCode
                               and t2.BranchCode  = t1.BranchCode
                               and t2.OutletID    = t1.OutletID
                             group by t2.CompanyCode, t2.BranchCode, t2.OutletName, t2.TotalKDP) #t3
				 
		             select b.Area, a.CompanyCode, b.DealerAbbreviation CompanyName, a.BranchCode, 
					        c.OutletAbbreviation BranchName, a.TotalKDP, a.TidakUpdate,
			                case when a.TotalKDP <> 0 THEN (cast(a.TidakUpdate as Decimal) / cast(a.TotalKDP as Decimal)) * 100.00 ELSE 0 end Pctg
		               from #t3 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		                and a.TotalKDP <> 0
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation
                     drop table #t2
					 drop table #t3
                 end		 
			  drop table #t1
         end
	  else
      -- National
         begin
              select * into #t11 from(
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            k.Wiraniaga "Salesman", k.SalesCoordinator "Koordinator", 
                            k.InquiryNumber, k.BranchCode Branch_Code, k.CompanyCode Company_Code, 
                            k.InquiryDate, a.NextFollowUpDate, 
                          --k.LastUpdateStatus, 
                           (select top 1 h.UpdateDate
                              from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress <> 'P'
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastUpdateStatus,
                            k.SPKDate, a.ActivityDate,
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, 
                          --k.LastProgess
                           (select top 1 upper(h.LastProgress) from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                              where hs.CompanyCode   = h.CompanyCode
		                                                and hs.BranchCode    = h.BranchCode
		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                and hs.LastProgress <> 'P'
		                                                and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
                    		                                                and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
                    		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastProgress,
                            k.Leasing, k.DownPayment, k.Tenor, upper(a.ActivityType) "ActivityType",
                            upper(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32))) "ActivityDetail" 
                       from pmHstITS k, pmActivities a, pmBranchOutlets O
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = a.CompanyCode
                        and k.BranchCode    = a.BranchCode
                        and k.inquiryNumber = a.InquiryNumber
                        and a.ActivityId    = (select max(activityID) from pmActivities 
                                                where CompanyCode   = k.CompanyCode
                                                  and BranchCode    = k.BranchCode
                                                  and InquiryNumber = k.InquiryNumber)
                        and a.NextFollowUpDate <= @StartDate
                      --and k.CompanyCode   = o.CompanyCode
                      --and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                      ) #t11
                      where LastProgress is not null
                     union 
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            k.Wiraniaga "Salesman", k.SalesCoordinator "Koordinator", 
                            k.InquiryNumber, k.BranchCode, k.CompanyCode, k.InquiryDate, '1-1-1900' "NextFollowUpDate",
                            k.LastUpdateStatus, k.SPKDate, '1-1-1900' "LastActivityDate",
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, k.LastProgress, k.Leasing, k.DownPayment, k.Tenor, '' "ActivityType", '' "ActivityDetail" 
                       from pmHstITS k, pmBranchOutlets o
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = o.CompanyCode
                        and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                        and not exists (select 1 from pmActivities 
                                         where CompanyCode   = k.CompanyCode
                                           and BranchCode    = k.BranchCode
                                           and InquiryNumber = k.InquiryNumber)

			  if (@Summary = 0)
			     begin
		             select b.Area, b.DealerAbbreviation CompanyName, c.OutletAbbreviation BranchName, a.CompanyCode, 
					        a.BranchCode, a.OutletName, a.Salesman, a.Koordinator, a.InquiryNumber, 
			                case when convert(varchar,a.InquiryDate     ,112)='19000101' then NULL else a.InquiryDate      end InquiryDate,
			                case when convert(varchar,a.NextFollowUpDate,112)='19000101' then NULL else a.NextFollowUpDate end NextFollowUpDate,
			                case when convert(varchar,a.LastUpdateStatus,112)='19000101' then NULL else a.LastUpdateStatus end LastUpdateStatus,
			                case when convert(varchar,a.SPKDate         ,112)='19000101' then NULL else a.SPKDate          end SPKDate,
			                case when convert(varchar,a.ActivityDate    ,112)='19000101' then NULL else a.ActivityDate     end "LastActivityDate",
                            Status, a.PerolehanData, a.NamaProspek, a.TelpRumah, a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode,
                            a.CaraBayar, a.TestDrive, a.QuantityInquiry, a.LastProgress, a.Leasing, a.DownPayment, a.Tenor, a.ActivityType,
			                replace(replace(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32)),'<','('),'>',')') "ActivityDetail"
  					   from #t11 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation
                 end		 
	          else
	             begin
 	                 select * into #t12 from (
   	                        select k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName, count(k.InquiryNumber) TotalKDP
           	                  from pmHstITS k, pmBranchOutlets O 
    	                     where k.InquiryDate<=@StartDate
    	                       and k.CompanyCode=o.CompanyCode
		                       and k.BranchCode=o.BranchCode
	 	                	   and k.OutletID=O.OutletID
           	                 --and LastProgress not in ('DO','DELIVERY','LOST')
             	               and not exists (select top 1 1 from pmStatusHistory
                              	                where CompanyCode   = k.CompanyCode
		                       	                  and BranchCode    = k.BranchCode
		                       	                  and InquiryNumber = k.InquiryNumber
		                       	                  and UpdateDate   <= @StartDate
		                       	                  and LastProgress in ('DO','DELIVERY','LOST'))
          	                 group by k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName) #t12

                     select * into #t13 from (
					        select t12.CompanyCode, t12.BranchCode, t12.OutletName, t12.TotalKDP, count(t11.InquiryDate) "TidakUpdate" 
                              from #t12 t12, #t11 t11
                             where t12.CompanyCode = t11.CompanyCode
                               and t12.BranchCode  = t11.BranchCode
                               and t12.OutletID    = t11.OutletID
                             group by t12.CompanyCode, t12.BranchCode, t12.OutletName, t12.TotalKDP) #t13
				 
		             select b.Area, a.CompanyCode, b.DealerAbbreviation CompanyName, a.BranchCode, 
					        c.OutletAbbreviation BranchName, a.TotalKDP, a.TidakUpdate,
			                case when a.TotalKDP <> 0 THEN (cast(a.TidakUpdate as Decimal) / cast(a.TotalKDP as Decimal)) * 100.00 ELSE 0 end Pctg
		               from #t13 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		                and a.TotalKDP <> 0
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation 
                     drop table #t12
					 drop table #t13
                 end		 
			  drop table #t11
         end
END
GO
-- usprpt_OmRpSalesTrn007 '6469401','646940100','RFP/12/000005','RFP/12/000005'
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<PERMOHONAN FAKTUR POLISI>
-- =============================================
ALTER procedure [dbo].[usprpt_OmRpSalesTrn007]
	-- Add the parameters for the stored procedure here
	@CompanyCode VARCHAR(15),
	@BranchCode	 VARCHAR(15),
	@ReqNoA		 VARCHAR(15),
	@ReqNoB		 VARCHAR(15)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--declare	@CompanyCode VARCHAR(15),
--		@BranchCode	 VARCHAR(15),
--		@ReqNoA		 VARCHAR(15),
--		@ReqNoB		 VARCHAR(15)
--
--set	@CompanyCode = '6006400001'
--set	@BranchCode	 = '6006400114'
--set	@ReqNoA		 = 'FP114/14/100002'
--set	@ReqNoB		 = 'FP114/14/100002'

declare @tblTemp as table
(
ChassisCode varchar(15), 
ChassisNo decimal(10,0), 
SuzukiDONo varchar(15), 
SuzukiSJNo varchar(15)
)

declare @From as varchar(max)
set @From = isnull((select ParaValue from gnMstLookupDtl where CodeID = 'FPOLSLS' and LookupValue = 'FROM_DB'), '')

declare @QueryTemp as varchar(max)
set @QueryTemp = 'select a.ChassisCode, a.ChassisNo, b.SuzukiDONo, b.SuzukiSJNo 
				from omTrSalesReqDetail a
				left join ' + @From + 'omMstVehicle b 
					on a.ChassisCode = b.ChassisCode and
					a.ChassisNo = b.ChassisNo
				WHERE
				 a.CompanyCode	  = ''' + @CompanyCode + '''
				 AND a.BranchCode = ''' + @BranchCode + '''
				 AND a.ReqNo BETWEEN ''' + @ReqNoA + ''' AND ''' + @ReqNoB + ''''

insert into @tblTemp
exec (@QueryTemp)

declare @Comp as varchar(15)
set @Comp = isnull((select ParaValue from gnMstLookupDtl where CodeID = 'FPOLSLS' and LookupValue = 'COMP'), '')

SELECT
	row_number () OVER (ORDER BY a.ReqNo) AS No
	, a.ReqNo
	, a.SKPKNo
	, a.FakturPolisiNo
	, case when @Comp = '' then ISNULL(e.RefferenceDONo, '')
		else (case when @From = '' then ISNULL(e.RefferenceDONo, '') else ISNULL(e.RefferenceDONo, '') + ' (' + p.SuzukiDONo + ')' end) end DONo
	, (SELECT dbo.GetDateIndonesian (a.FakturPolisiDate)) AS 'Tanggal'
	, ISNULL(e.RefferenceDoDate, '') DODate
	, ISNULL(d.CompanyName, '') CompanyName
	, ISNULL(d.Address1, '') CoAdd1
	, ISNULL(d.Address2, '') CoAdd2
	, ISNULL(d.Address3, '') CoAdd3
	, case d.ProductType 
		when '2W' then 'Harap dibuatkan Faktur untuk motor SUZUKI :'
		when '4W' then 'Harap dibuatkan Faktur untuk mobil SUZUKI :'
		when 'A' then 'Harap dibuatkan Faktur untuk motor SUZUKI :'
		when 'B' then 'Harap dibuatkan Faktur untuk mobil SUZUKI :'
		else 'Harap dibuatkan Faktur untuk SUZUKI :'
		end as Note
	, case when @Comp = '' then  ISNULL(e.RefferenceSJNo, '')
		else (case when @From = '' then ISNULL(e.RefferenceSJNo, '') else ISNULL(e.RefferenceSJNo, '') + ' (' + p.SuzukiSJNo + ')' end) end SJNo
	, ISNULL(e.RefferenceSJDate, '') SJDate
	, ISNULL(c.SalesModelCode, '') Model
	, ISNULL(f.SalesModelDesc, '') ModelDesc
	, ISNULL(g.RefferenceDesc1, '') Warna
	, ISNULL(c.SalesModelYear, 0) Tahun
	, a.ChassisNo
	, ISNULL(c.EngineNo, 0) EngineNo
	, ((CASE ISNULL(a.DealerCategory, '') WHEN 'M' THEN 'Main Dealer' WHEN 'S' THEN 'Sub Dealer' WHEN 'R' THEN 'Show Room' END) + ' / ' + h.CustomerName) AS  Penjual
	, a.SalesmanName
	, a.SKPKName
	, a.SKPKAddress1 Alamat1
	, a.SKPKAddress2 Alamat2
	, a.SKPKAddress3 Alamat3
	, ISNULL(i.LookUpValueName, '') City
	, a.SKPKTelp1
	, a.SKPKTelp2
	, a.SKPKHP
	, ISNULL(a.SKPKBirthday, '') SKPKDay
	, a.FakturPolisiName
	, a.FakturPolisiAddress1
	, a.FakturPolisiAddress2
	, a.FakturPolisiAddress3
	, a.FakturPolisiTelp1
	, a.FakturPolisiTelp2
	, a.FakturPolisiHP
	, a.FakturPolisiBirthday
	, (select ISNULL(LookUpValueName, '') from gnMstLookUpDtl where CompanyCode=a.CompanyCode and CodeID='FPCT' and LookUpValue=a.DealerCategory
		) AS DealerCategory
	, ISNULL(b.Remark, '') Remark
	, ISNULL(UPPER(z.SignName), '') AS SignName1
	, ISNULL(UPPER(z.TitleSign), '') AS TitleSign1 
	, a.IDNo
FROM
 omTrSalesReqDetail a
JOIN
 omTrSalesReq b ON b.CompanyCode=a.CompanyCode AND b.BranchCode=a.BranchCode
 AND b.ReqNo=a.ReqNo 
LEFT JOIN
 omMstVehicle c ON c.CompanyCode=a.CompanyCode AND c.ChassisCode=a.ChassisCode
 AND c.ChassisNo=a.ChassisNo
LEFT JOIN
 gnMstCoProfile d ON d.CompanyCode=a.CompanyCode AND d.BranchCode=a.BranchCode
LEFT JOIN omTrPurchaseBPUDetail j on a.CompanyCode=j.CompanyCode and c.ChassisCode=j.ChassisCode
	and a.ChassisNo=j.ChassisNo
LEFT JOIN
 omTrPurchaseBPU e ON e.CompanyCode=j.CompanyCode AND e.BranchCode=j.BranchCode
	and e.BPUNo=j.BPUNo
	and e.PONo = c.PONo
LEFT JOIN
 omMstModel f ON f.CompanyCode=c.CompanyCode AND f.SalesModelCode=c.SalesModelCode
LEFT JOIN
 omMstRefference g ON g.CompanyCode=c.CompanyCode AND g.RefferenceType='COLO'
 AND g.RefferenceCode=c.ColourCode
LEFT JOIN
 gnMstCustomer h ON h.CompanyCode=b.CompanyCode AND h.CustomerCode=b.SubDealerCode
LEFT JOIN
 gnMstLookUpDtl i ON i.CompanyCode=a.CompanyCode AND i.CodeID='CITY' 
 AND i.LookUpValue=a.SKPKCity
LEFT JOIN
 @tblTemp p ON p.ChassisCode=a.ChassisCode
 AND p.ChassisNo=a.ChassisNo
LEFT JOIN gnMstSIgnature z
	ON z.CompanyCode = a.CompanyCode
	AND z.BranchCode = a.BranchCode
	AND z.ProfitCenterCode = '100'
	AND z.DocumentType = 'RFP'
	AND z.SeqNo = 1
WHERE
 a.CompanyCode	  = @CompanyCode
 AND a.BranchCode = @BranchCode
 AND a.ReqNo BETWEEN @ReqNoA AND @ReqNoB
ORDER BY ReqNo
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
ALTER procedure [dbo].[uspfn_SelectITSNo]
	@CompanyCode varchar(15),
	@BranchCode varchar(15)
AS
BEGIN

--exec uspfn_SelectITSNo '6058401', '605840100'
--declare	@CompanyCode as varchar(15)
--declare	@BranchCode as varchar(15)

--set	@CompanyCode = '6058401'
--set	@BranchCode =  '605840100'

select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
where a.CompanyCode= @CompanyCode
	and a.BranchCode= @BranchCode
	and a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) and not exists (select * from omTrSalesSO c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.ProspectNo = a.InquiryNumber and c.Status = 2)	 
union
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
		and c.Status = 2
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
	left join omTrSalesSOVin f on f.CompanyCode = c.CompanyCode	--Penambahan
		and f.BranchCode = c.BranchCode	--Penambahan
		and f.SONo = c.SONo	--Penambahan
	left join omMstVehicle g on g.CompanyCode = f.CompanyCode --Penambahan
		and g.ChassisNo = f.ChassisNo	--Penambahan
where a.CompanyCode= @CompanyCode
	and a.BranchCode= @BranchCode
	and a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) 
--	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status = 2)		
	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status in (2,5))	--Perubahan	
	and g.InvoiceNo = '' --Penambahan

union
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
		and c.Status = 2
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
	left join omTrSalesSOVin f on f.CompanyCode = c.CompanyCode	--Penambahan
		and f.BranchCode = c.BranchCode	--Penambahan
		and f.SONo = c.SONo	--Penambahan
	left join omMstVehicle g on g.CompanyCode = f.CompanyCode --Penambahan
		and g.ChassisNo = f.ChassisNo	--Penambahan
where a.CompanyCode= @CompanyCode
	and a.BranchCode= @BranchCode
	and a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) 
--	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status = 2)	
	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status in (2,5))	--Perubahan		
	and (select count(*) from omTrSalesSO c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.ProspectNo = a.InquiryNumber and c.Status = 2) = 1
	and g.InvoiceNo = ''	--Penambahan

union
select a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
where a.CompanyCode= @CompanyCode
	and a.BranchCode= @BranchCode
	and a.LastProgress = 'SPK'
	and c.ProspectNo is null
END
GO
ALTER procedure [dbo].[usprpt_SvRpTrn017]
	@CompanyCode VARCHAR(15),
	@BranchCode	 VARCHAR(15),
	@DateFrom as datetime,
	@DateTo as datetime,
	@TypeOfGoods as varchar(1)
AS
BEGIN

--declare @CompanyCode as varchar(12),
--		@BranchCode as varchar(12),
--		@DateFrom as datetime,
--		@DateTo as datetime,
--		@TypeOfGoods varchar(1)
--
--set @CompanyCode = '6159401'
--set	@BranchCode = '615940100'
--set	@DateFrom = '2011-01-03'
--set	@DateTo = '2011-09-03'
--set @TypeOfGoods = ''

SELECT     
			a.ReturnNo, 
			convert(datetime, convert(varchar, a.ReturnDate, 112)) ReturnDate, 			
			a.InvoiceNo,
			convert(datetime, convert(varchar, a.InvoiceDate, 112)) InvoiceDate,
			a.ReferenceNo , 
			convert(datetime, convert(varchar, a.ReferenceDate, 112)) ReferenceDate, 
			b.CustomerCode + ' - ' + b.CustomerName CustomerName, 
			c.PartNo, 
			d.PartName, 
			c.QtyReturn, 
			c.DiscAmt, 
			c.RetailPrice, 
			c.NetReturAmt AS SalesAmt, 
			--a.TotPPNAmt,
			c.PPNAmt as TotPPNAmt,
			--a.TotFinalReturAmt,
			c.TotReturAmt as TotFinalReturAmt,
			c.CostPrice * c.QtyReturn AS HargaPokok, 
			@DateFrom StartDate,
			@DateTo EndDate,
			e.TypeOfGoods
FROM        spTrnSRturSrvHdr a
INNER JOIN
			gnMstCustomer b ON a.CompanyCode = b.CompanyCode AND 
			a.CustomerCode = b.CustomerCode 
INNER JOIN
			spTrnSRturSrvDtl c ON a.CompanyCode = c.CompanyCode AND 
			a.BranchCode = c.BranchCode AND a.ReturnNo = c.ReturnNo 
INNER JOIN
			spMstItemInfo d ON c.CompanyCode = d.CompanyCode AND 
			c.PartNo = d.PartNo
INNER JOIN spMstItems e ON a.CompanyCode = e.CompanyCode AND
			a.BranchCode = e.BranchCode AND
			c.PartNo = e.PartNo
WHERE       
		(a.CompanyCode = @CompanyCode)
	AND (a.BranchCode = @BranchCode)
	AND (convert(varchar,c.ReturnDate,112) BETWEEN convert(varchar,convert(datetime,@DateFrom), 112) AND convert(varchar,convert(datetime,@DateTo), 112))
	AND (case when @TypeOfGoods = '' then '' else e.TypeOfGoods end) = @TypeOfGoods
ORDER BY c.ReturnDate, c.ReturnNo

END
GO
-- =============================================    
-- Author:        <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description:    -LAPORAN PERINCIAN INSENTIF (MEKANIK)    
--                -LAPORAN PERINCIAN INSENTIF (SERVICE ADVISOR)    
--                -LAPORAN REKAPITULASI PERINCIAN INSENTIF    
--                -LAPORAN REKAPITULASI PERINCIAN INSENTIF (MEKANIK)    
--                -LAPORAN REKAPITULASI PERINCIAN INSENTIF (SERVICE ADVISOR)    
-- =============================================    
ALTER procedure [dbo].[usprpt_SvRpReport010]  
  @CompanyCode varchar(15)      
 ,@BranchCode varchar(15)      
 ,@DateStart varchar(15)      
 ,@DateEnd varchar(15)      
 ,@NikFilter varchar(15)      
 ,@NameFilter varchar(15)     
 ,@ReportBy varchar(1)      
  
as      
begin      
    
set nocount on    
    
IF @ReportBy = '1'      
 BEGIN      
 -- select top 1 data yang ada di svTrnSrvTask & svTrnSrvMechanic  
    select * into #t1 from (    
    select a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.BasicModel, a.JobType, b.ServiceNo    
         , isnull((    
                select top 1 OperationNo from svTrnService srv, svTrnSrvTask tsk    
                 where 1 = 1    
                   and tsk.CompanyCode = srv.CompanyCode    
                   and tsk.BranchCode = srv.BranchCode    
                   and tsk.ServiceNo = srv.ServiceNo    
                   and srv.CompanyCode = a.CompanyCode    
                   and srv.BranchCode = a.BranchCode    
                   and srv.JobOrderNo = a.JobOrderNo    
                 order by tsk.CreatedDate    
                ), '') OperationNo    
         , isnull((    
                select top 1 mec.MechanicID from svTrnService srv, svTrnSrvTask tsk, svTrnSrvMechanic mec    
                 where 1 = 1    
                   and mec.CompanyCode = tsk.CompanyCode    
                   and mec.BranchCode = tsk.BranchCode    
                   and mec.ServiceNo = tsk.ServiceNo    
                   and mec.OperationNo = tsk.OperationNo    
                   and tsk.CompanyCode = srv.CompanyCode    
                   and tsk.BranchCode = srv.BranchCode    
                   and tsk.ServiceNo = srv.ServiceNo    
                   and srv.CompanyCode = a.CompanyCode    
                   and srv.BranchCode = a.BranchCode    
                   and srv.JobOrderNo = a.JobOrderNo    
                 order by tsk.CreatedDate, mec.CreatedBy    
                ), '') MechanicID    
         , b.ForemanID, a.InvoiceDate    
         , a.LaborDiscPct, a.PartsDiscPct, a.MaterialDiscPct    
         , a.PartsGrossAmt, a.MaterialGrossAmt    
         , a.PartsDiscAmt, a.MaterialDiscAmt    
         , a.PartsDppAmt, a.MaterialDppAmt    
         , isnull((    
            select count(OperationNo) from svTrnInvTask    
             where CompanyCode = a.CompanyCode    
               and BranchCode = a.BranchCode    
               and InvoiceNo = a.InvoiceNo    
            ), 0) NoOfTask    
      from svTrnInvoice a    
      left join svTrnService b    
        on b.CompanyCode = a.CompanyCode      
       and b.BranchCode = a.BranchCode      
       and b.JobOrderNo = a.JobOrderNo      
     where 1 = 1    
       and a.CompanyCode= @CompanyCode      
       and a.BranchCode= @BranchCode      
       and convert(varchar, a.InvoiceDate, 112) between @DateStart and @DateEnd      
    )#    
  
 declare @t_query as table  
 (  
  CompanyCode   varchar(20),   
  BranchCode    varchar(20),   
  RecNo         int,  
  MechanicGroup varchar(20),   
  MechanicId    varchar(20),   
  EmployeeName  varchar(120),   
  InvoiceNo     varchar(20),  
  InvoiceDate   datetime,  
  OperationNo   varchar(20),   
  OperationHour numeric(7,2),  
  SharingTask   numeric(5,0),  
  OperationCost numeric(18,2),   
  LaborDiscPct  numeric(7,2),  
  PartsDiscPct  numeric(7,2),  
  MaterialDiscPct numeric(7,2),  
  [Description] varchar(200),  
  Sparepart     numeric(18,2),  
  Potongan      numeric(18,2),  
  DPPart        numeric(18,2)  
 )     
   
 insert into @t_query  
 -- (1st Query) select top 1 data yang ada di svTrnSrvTask & svTrnSrvMechanic  
    select a.CompanyCode, a.BranchCode    
         , (row_number() over (order by a.InvoiceNo)) as RecNo      
         , upper(substring(b.MechanicID, 1, 1)) MechanicGroup      
         , upper(b.MechanicID) MechanicId      
         , upper(c.EmployeeName) EmployeeName      
         , a.InvoiceNo, a.InvoiceDate, a.OperationNo      
         , (case NoOfTask when 0 then 0 else d.OperationHour end) OperationHour    
         , d.SharingTask    
         , case a.JobType when 'REWORK' then 0 else   
                isnull((  
                    select OperationCost from svTrnInvTask  
                     where CompanyCode = a.CompanyCode  
                       and BranchCode = a.BranchCode  
                       and InvoiceNo = a.InvoiceNo  
                       and OperationNo = a.OperationNo  
                    ), 0)  
             end OperationCost      
         , a.LaborDiscPct, a.PartsDiscPct, a.MaterialDiscPct    
         , case a.JobType when 'REWORK' then '"REWORK"' else e.Description end Description    
         , case a.JobType when 'REWORK' then 0 else (a.PartsGrossAmt + a.MaterialGrossAmt) end Sparepart    
         , case a.JobType when 'REWORK' then 0 else (a.PartsDiscAmt + a.MaterialDiscAmt) end Potongan    
         , case a.JobType when 'REWORK' then 0 else (a.PartsDppAmt + a.MaterialDppAmt) end DPPart    
      from #t1 a    
      left join svTrnInvMechanic b      
        on b.CompanyCode = a.CompanyCode        
       and b.BranchCode = a.BranchCode        
       and b.ProductType = a.ProductType      
       and b.InvoiceNo = a.InvoiceNo      
       and b.OperationNo = a.OperationNo      
      left join gnMstEmployee c      
        on c.CompanyCode = a.CompanyCode        
       and c.BranchCode = a.BranchCode        
       and c.EmployeeId = b.MechanicID        
      left join svTrnSrvTask d    
        on d.CompanyCode = a.CompanyCode        
       and d.BranchCode = a.BranchCode        
       and d.ProductType = a.ProductType      
       and d.ServiceNo = a.ServiceNo      
       and d.OperationNo = a.OperationNo      
      left join svMstTask e      
        on e.CompanyCode = a.CompanyCode        
       and e.ProductType = a.ProductType        
       and e.BasicModel = a.BasicModel        
       and e.JobType = a.JobType        
       and e.OperationNo = a.OperationNo      
     where 1 = 1    
       and a.CompanyCode= @CompanyCode      
       and a.BranchCode= @BranchCode      
       and convert(varchar, a.InvoiceDate, 112) between @DateStart and @DateEnd     
       and a.MechanicId <> ''      
       and a.MechanicId like @NikFilter      
       and c.EmployeeName like @NameFilter      
       and a.JobType <> 'REWORK'    
       and isnull(e.IsSubCon, 0) = 0  
    
    union all    
    
 -- (2nd Query) select data dari invoice yg tidak ada pada data sebelumnya   
    select a.CompanyCode, a.BranchCode    
         , (row_number() over (order by a.InvoiceNo)) as RecNo      
         , upper(substring(c.MechanicID, 1, 1)) MechanicGroup      
         , upper(c.MechanicID) MechanicId      
         , upper(e.EmployeeName) EmployeeName      
         , a.InvoiceNo, a.InvoiceDate, b.OperationNo      
         , b.OperationHour, b.SharingTask    
         , case a.JobType when 'REWORK' then 0 else b.OperationCost end OperationCost      
         , a.LaborDiscPct, a.PartsDiscPct, a.MaterialDiscPct    
         , case a.JobType when 'REWORK' then '"REWORK"' else d.Description end Description    
         , 0 Sparepart    
         , 0 Potongan    
         , 0 DPPart    
      from svTrnInvoice a    
      left join svTrnInvTask b    
        on b.CompanyCode = a.CompanyCode      
       and b.BranchCode = a.BranchCode      
       and b.ProductType = a.ProductType    
       and b.InvoiceNo = a.InvoiceNo    
      left join svTrnInvMechanic c    
        on c.CompanyCode = b.CompanyCode      
       and c.BranchCode = b.BranchCode      
       and c.ProductType = b.ProductType    
       and c.InvoiceNo = b.InvoiceNo    
       and c.OperationNo = b.OperationNo    
      left join svMstTask d    
        on d.CompanyCode = a.CompanyCode      
       and d.ProductType = a.ProductType      
       and d.BasicModel = a.BasicModel      
       and d.JobType = a.JobType      
       and d.OperationNo = b.OperationNo      
      left join gnMstEmployee e    
        on e.CompanyCode = a.CompanyCode      
       and e.BranchCode = a.BranchCode      
       and e.EmployeeId = c.MechanicID      
     where 1 = 1    
       and a.CompanyCode= @CompanyCode      
       and a.BranchCode= @BranchCode      
       and convert(varchar, a.InvoiceDate, 112) between @DateStart and @DateEnd     
       and c.MechanicId <> ''      
       and c.MechanicId like @NikFilter      
       and e.EmployeeName like @NameFilter    
       and a.JobType <> 'REWORK'    
       and isnull(d.IsSubCon, 0) = 0  
       and not exists (    
        select 1 from #t1     
         where 1 = 1    
           and InvoiceNo = a.InvoiceNo    
           and OperationNo = b.OperationNo    
        )    
  
    union all  
  
 -- (3nd Query) select data dari invoice yg ada pemakaian part, tetapi task-nya pada invoice lain  
 -- di joinkan dengan data pada table Service  
 -- dan data tersebut belum ada pada transaksi sebelumnya  
 select * from (  
    select a.CompanyCode, a.BranchCode    
         , (row_number() over (order by a.InvoiceNo)) as RecNo      
         , isnull((    
                select top 1 upper(substring(mec.MechanicID, 1, 1)) from svTrnService srv, svTrnSrvTask tsk, svTrnSrvMechanic mec    
                 where 1 = 1    
                   and mec.CompanyCode = tsk.CompanyCode    
                   and mec.BranchCode = tsk.BranchCode    
                   and mec.ServiceNo = tsk.ServiceNo    
                   and mec.OperationNo = tsk.OperationNo    
                   and tsk.CompanyCode = srv.CompanyCode    
                   and tsk.BranchCode = srv.BranchCode    
                   and tsk.ServiceNo = srv.ServiceNo    
                   and srv.CompanyCode = a.CompanyCode    
                   and srv.BranchCode = a.BranchCode    
                   and srv.JobOrderNo = a.JobOrderNo    
                 order by tsk.CreatedDate, mec.CreatedBy    
                ), '') MechanicGroup  
           , isnull((    
                select top 1 upper(mec.MechanicID) from svTrnService srv, svTrnSrvTask tsk, svTrnSrvMechanic mec    
                 where 1 = 1    
                   and mec.CompanyCode = tsk.CompanyCode    
                   and mec.BranchCode = tsk.BranchCode    
                   and mec.ServiceNo = tsk.ServiceNo    
                   and mec.OperationNo = tsk.OperationNo    
                   and tsk.CompanyCode = srv.CompanyCode    
                   and tsk.BranchCode = srv.BranchCode    
                   and tsk.ServiceNo = srv.ServiceNo    
                   and srv.CompanyCode = a.CompanyCode    
                   and srv.BranchCode = a.BranchCode    
                   and srv.JobOrderNo = a.JobOrderNo    
                 order by tsk.CreatedDate, mec.CreatedBy    
                ), '') MechanicID    
           , isnull((    
                select top 1 upper(emp.EmployeeName)  
                  from svTrnService srv, svTrnSrvTask tsk, svTrnSrvMechanic mec, gnMstEmployee emp  
                 where 1 = 1    
                   and emp.CompanyCode = mec.CompanyCode    
                   and emp.BranchCode = mec.BranchCode    
                   and emp.EmployeeID = mec.MechanicID  
                   and mec.CompanyCode = tsk.CompanyCode    
                   and mec.BranchCode = tsk.BranchCode    
                   and mec.ServiceNo = tsk.ServiceNo    
                   and mec.OperationNo = tsk.OperationNo    
                   and tsk.CompanyCode = srv.CompanyCode    
                   and tsk.BranchCode = srv.BranchCode    
                   and tsk.ServiceNo = srv.ServiceNo    
                   and srv.CompanyCode = a.CompanyCode    
                   and srv.BranchCode = a.BranchCode    
                   and srv.JobOrderNo = a.JobOrderNo    
                 order by tsk.CreatedDate, mec.CreatedBy    
                ), '') EmployeeName      
         , a.InvoiceNo, a.InvoiceDate, b.OperationNo      
         , b.OperationHour, b.SharingTask    
         , case a.JobType when 'REWORK' then 0 else b.OperationCost end OperationCost      
         , a.LaborDiscPct, a.PartsDiscPct, a.MaterialDiscPct    
         , '' Description    
         , case a.JobType when 'REWORK' then 0 else (a.PartsGrossAmt + a.MaterialGrossAmt) end Sparepart    
         , case a.JobType when 'REWORK' then 0 else (a.PartsDiscAmt + a.MaterialDiscAmt) end Potongan    
         , case a.JobType when 'REWORK' then 0 else (a.PartsDppAmt + a.MaterialDppAmt) end DPPart    
      from svTrnInvoice a    
      left join svTrnInvTask b    
        on b.CompanyCode = a.CompanyCode      
       and b.BranchCode = a.BranchCode      
       and b.ProductType = a.ProductType    
       and b.InvoiceNo = a.InvoiceNo    
      left join svMstTask d    
        on d.CompanyCode = a.CompanyCode      
       and d.ProductType = a.ProductType      
       and d.BasicModel = a.BasicModel      
--       and d.JobType = a.JobType      
       and d.OperationNo = b.OperationNo      
     where 1 = 1    
       and a.CompanyCode= @CompanyCode      
       and a.BranchCode= @BranchCode      
       and convert(varchar, a.InvoiceDate, 112) between @DateStart and @DateEnd     
       and isnull(d.IsSubCon, 0) = 0  
       and not exists (  
        select * from svTrnInvMechanic  
         where CompanyCode = b.CompanyCode      
           and BranchCode = b.BranchCode      
           and ProductType = b.ProductType    
           and InvoiceNo = b.InvoiceNo    
           and OperationNo = b.OperationNo    
        )  
       and a.JobType <> 'REWORK'    
       and not exists (    
        select 1 from #t1     
         where 1 = 1    
           and InvoiceNo = a.InvoiceNo    
           and OperationNo = b.OperationNo    
        )) #  
  where 1 = 1  
       and MechanicId like @NikFilter      
       and EmployeeName like @NameFilter    
         
    select * from @t_query order by InvoiceDate  
      
 END      
ELSE IF @ReportBy = '2'      
 BEGIN     
  select * into #t_task1 from (
  SELECT a.CompanyCode    
  ,a.BranchCode    
  , (row_number() over (order by a.InvoiceNo)) as RecNo      
  ,UPPER(SUBSTRING(c.ForemanID, 1, 1)) MechanicGroup      
  ,UPPER(c.ForemanID) MechanicId      
  ,UPPER(d.EmployeeName) EmployeeName      
  ,a.InvoiceNo      
  ,a.InvoiceDate      
  ,b.OperationNo      
  ,b.OperationHour      
  ,b.SharingTask      
  ,b.OperationCost      
  ,a.LaborDiscPct      
--  ,isnull(f.SupplyQty, 0) as SupplyQty    
--  ,isnull(f.ReturnQty, 0) as ReturnQty    
--  ,isnull(f.RetailPrice, 0) as RetailPrice    
  ,a.PartsDiscPct    
  ,a.MaterialDiscPct    
  ,e.Description      
  ,isnull((    
    select PartsGrossAmt + MaterialGrossAmt    
      from svTrnInvoice    
     where CompanyCode = a.CompanyCode      
       AND BranchCode = a.BranchCode      
       AND ProductType = a.ProductType      
       AND InvoiceNo = a.InvoiceNo    
    ), 0) Sparepart    
  ,isnull((    
    select PartsDiscAmt + MaterialDiscAmt    
      from svTrnInvoice    
     where CompanyCode = a.CompanyCode      
       AND BranchCode = a.BranchCode      
       AND ProductType = a.ProductType      
       AND InvoiceNo = a.InvoiceNo    
    ), 0) Potongan    
  ,isnull((    
    select PartsDppAmt + MaterialDppAmt    
      from svTrnInvoice    
     where CompanyCode = a.CompanyCode      
       AND BranchCode = a.BranchCode      
       AND ProductType = a.ProductType      
       AND InvoiceNo = a.InvoiceNo    
    ), 0) DPPart    
  FROM svTrnInvoice a      
  LEFT JOIN svTrnInvTask b      
    ON b.CompanyCode = a.CompanyCode      
   AND b.BranchCode = a.BranchCode      
   AND b.ProductType = a.ProductType      
   AND b.InvoiceNo = a.InvoiceNo      
  LEFT JOIN svTrnService c      
    ON c.CompanyCode = a.CompanyCode      
   AND c.BranchCode = a.BranchCode      
   AND c.JobOrderNo = a.JobOrderNo      
  LEFT JOIN gnMstEmployee d      
    ON d.CompanyCode = a.CompanyCode      
   AND d.BranchCode = a.BranchCode      
   AND d.EmployeeId = c.ForemanId      
  LEFT JOIN svMstTask e      
    ON e.CompanyCode = a.CompanyCode      
   AND e.ProductType = a.ProductType      
   AND e.BasicModel = a.BasicModel      
   AND e.JobType = a.JobType      
   AND e.OperationNo = b.OperationNo      
  LEFT JOIN svTrnInvItem f    
    ON f.CompanyCode = a.CompanyCode      
   AND f.BranchCode = a.BranchCode      
   AND f.ProductType = a.ProductType      
   AND f.InvoiceNo = a.InvoiceNo     
  WHERE 1 = 1      
    AND a.CompanyCode= @CompanyCode      
    AND a.BranchCode= @BranchCode      
    AND c.ForemanId <> ''      
    AND CONVERT(VARCHAR, a.InvoiceDate, 112) BETWEEN @DateStart AND @DateEnd      
    AND c.ForemanId LIKE @NikFilter      
    AND d.EmployeeName LIKE @NameFilter     
    and isnull(e.IsSubCon, 0) = 0  
    and a.JobType <> 'REWORK'    
  group by a.CompanyCode    
    ,a.BranchCode    
    ,a.InvoiceNo    
    ,c.ForemanID    
    ,d.EmployeeName    
    ,a.InvoiceDate    
    ,b.OperationNo     
    ,b.OperationHour        
    ,b.SharingTask      
    ,b.OperationCost      
    ,a.LaborDiscPct      
    ,a.PartsDiscPct    
    ,a.MaterialDiscPct    
    ,e.Description    
    ,a.ProductType    
  --Order by MechanicGroup, MechanicId, EmployeeName, a.InvoiceNo    
  )#
  
  select a.CompanyCode, a.BranchCode, a.RecNo, a.MechanicGroup, a.MechanicId, a.EmployeeName
       , a.InvoiceNo, a.InvoiceDate, a.OperationNo, a.OperationHour, a.SharingTask, a.OperationCost
       , a.LaborDiscPct, a.PartsDiscPct, a.MaterialDiscPct, a.Description
       , a.Sparepart / (select count(*) from #t_task1 where InvoiceNo = a.InvoiceNo) as Sparepart
       , a.Potongan / (select count(*) from #t_task1 where InvoiceNo = a.InvoiceNo) as Potongan
       , a.DPPart / (select count(*) from #t_task1 where InvoiceNo = a.InvoiceNo) as DPPart
    from #t_task1 a

  
 END      
ELSE      
 BEGIN     
  SELECT a.CompanyCode    
  ,a.BranchCode    
  , (row_number() over (order by a.InvoiceNo)) as RecNo      
  ,UPPER(SUBSTRING(c.MechanicID, 1, 1)) MechanicGroup      
  ,UPPER(c.MechanicID) MechanicId      
  ,UPPER(d.EmployeeName) EmployeeName      
  ,a.InvoiceNo      
  ,a.InvoiceDate      
  ,b.OperationNo      
  ,b.OperationHour      
  ,b.SharingTask      
  ,b.OperationCost      
  ,a.LaborDiscPct      
--  ,isnull(f.SupplyQty, 0) as SupplyQty    
--  ,isnull(f.ReturnQty, 0) as ReturnQty    
--  ,isnull(f.RetailPrice, 0) as RetailPrice    
  ,a.PartsDiscPct    
  ,a.MaterialDiscPct    
  ,e.Description      
  ,isnull((    
    select PartsGrossAmt + MaterialGrossAmt    
      from svTrnInvoice    
     where CompanyCode = a.CompanyCode      
       AND BranchCode = a.BranchCode      
       AND ProductType = a.ProductType      
       AND InvoiceNo = a.InvoiceNo    
    ), 0) Sparepart    
  ,isnull((    
    select PartsDiscAmt + MaterialDiscAmt    
      from svTrnInvoice    
     where CompanyCode = a.CompanyCode      
       AND BranchCode = a.BranchCode      
       AND ProductType = a.ProductType      
       AND InvoiceNo = a.InvoiceNo    
    ), 0) Potongan    
  ,isnull((    
    select PartsDppAmt + MaterialDppAmt    
      from svTrnInvoice    
     where CompanyCode = a.CompanyCode      
       AND BranchCode = a.BranchCode      
       AND ProductType = a.ProductType      
       AND InvoiceNo = a.InvoiceNo    
    ), 0) DPPart    
  FROM svTrnInvoice a      
  LEFT JOIN svTrnInvTask b      
    ON b.CompanyCode = a.CompanyCode      
   AND b.BranchCode = a.BranchCode      
   AND b.ProductType = a.ProductType      
   AND b.InvoiceNo = a.InvoiceNo      
  LEFT JOIN svTrnService c      
    ON c.CompanyCode = a.CompanyCode      
   AND c.BranchCode = a.BranchCode      
   AND c.JobOrderNo = a.JobOrderNo      
  LEFT JOIN gnMstEmployee d      
    ON d.CompanyCode = a.CompanyCode      
   AND d.BranchCode = a.BranchCode      
   AND d.EmployeeId = c.MechanicID      
  LEFT JOIN svMstTask e      
    ON e.CompanyCode = a.CompanyCode      
   AND e.ProductType = a.ProductType      
   AND e.BasicModel = a.BasicModel      
   AND e.JobType = a.JobType      
   AND e.OperationNo = b.OperationNo      
  LEFT JOIN svTrnInvItem f    
    ON f.CompanyCode = a.CompanyCode      
   AND f.BranchCode = a.BranchCode      
   AND f.ProductType = a.ProductType      
   AND f.InvoiceNo = a.InvoiceNo     
  WHERE 1 = 1      
    AND a.CompanyCode= @CompanyCode      
    AND a.BranchCode= @BranchCode      
    AND c.MechanicID <> ''      
    AND CONVERT(VARCHAR, a.InvoiceDate, 112) BETWEEN @DateStart AND @DateEnd      
    AND c.MechanicID LIKE @NikFilter      
    AND d.EmployeeName LIKE @NameFilter     
    and a.JobType <> 'REWORK'    
    and isnull(e.IsSubCon, 0) = 0  
  group by a.CompanyCode    
    ,a.BranchCode    
    ,a.InvoiceNo    
    ,c.MechanicID    
    ,d.EmployeeName    
    ,a.InvoiceDate    
    ,b.OperationNo     
    ,b.OperationHour        
    ,b.SharingTask      
    ,b.OperationCost      
    ,a.LaborDiscPct      
    ,a.PartsDiscPct    
    ,a.MaterialDiscPct    
    ,e.Description    
    ,a.ProductType    
  Order by MechanicGroup, MechanicId, EmployeeName, a.InvoiceNo    
 END      
END
GO
-- * Last update by Yo, 8 Mei 2014 *
-- * No need to execute from web service, just add the database from, like SBTJKT.. *

ALTER procedure [dbo].[uspfn_GnUnLockTaxNo]
	@CompanyCode as varchar(20),
	@BranchCode as varchar(20),
	@Year as varchar(4),
	@FPJSeqNoNew as bigint,
	@UserID varchar(20)
as

--declare	@CompanyCode as varchar(20),
--	@BranchCode as varchar(20),
--	' + @Year + ' as int,
--	@FPJSeqNoNew as bigint,
--	@UserID varchar(20)

--set	@CompanyCode = ''
--set	@BranchCode = ''
--set	' + @Year + ' = 0
--set	@FPJSeqNoNew = ''
--set	@UserID = ''

declare @errmsg varchar(max)

declare @From as varchar(max)
set @From = isnull((select ParaValue from gnMstLookupDtl where CodeID = 'TXOL' and LookupValue = 'FROM_DB'), '')
if @From = ''
begin
	set @errmsg = 'Database Generate Tax On Line belum di-setup. Mohon cek para parameter FROM_DB di Master Lookup (TXOL).' 
    raiserror(@errmsg, 16 ,1 );
    return
end

exec('use ' + @From +
'
declare @IsUnion as varchar(1)
set @IsUnion = ''0''

if(select count(LookUpValue) from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+''' and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'') > 0
	set @IsUnion = ''1''

if ' + @FPJSeqNoNew + ' > 0
begin
	update gnMstFPJSeqNo set IsLocked = 0, FPJSeqNo=  ''' + @FPJSeqNoNew + '''
	 where 1 = 1
	   and CompanyCode = '''+@CompanyCode+'''
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+''' and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + ''' and IsLocked = 1
	   and isActive = 1
	   and SeqNo = (select MIN(SeqNo)
					  from GnMstFPJSeqNo 
					 where CompanyCode = '''+@CompanyCode+''' 
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+''' and LookUpValue= '''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year =  ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0)	
					   
	update gnMstFPJSeqNoHist set FPJSeqNoNew = '+@FPJSeqNoNew+', ReleaseTime = getdate()
	 where 1 = 1
	   and CompanyCode = '''+@CompanyCode+''' 
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+''' and LookUpValue = '''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + ''' and ReleaseTime is null
	   and isActive = 1
	   and SeqNo = (select MIN(SeqNo)
					  from GnMstFPJSeqNo 
					 where CompanyCode = '''+@CompanyCode+''' 
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+''' and LookUpValue= '''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year = ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0)

end					   
else
begin
	update gnMstFPJSeqNo set IsLocked = 0
	 where 1 = 1
	   and CompanyCode = '''+@CompanyCode+''' 
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue= '''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + ''' and IsLocked = 1
	   and isActive = 1
	   and SeqNo = (select MIN(SeqNo)
					  from GnMstFPJSeqNo 
					 where CompanyCode = '''+@CompanyCode+''' 
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+''' and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year = ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0)


	delete gnMstFPJSeqNoHist 
	 where 1 = 1
	   and CompanyCode = '''+@CompanyCode+''' 
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + ''' and ReleaseTime is null
	   and isActive = 1
	   and SeqNo = (select MIN(SeqNo)
					  from GnMstFPJSeqNo 
					 where CompanyCode =  '''+@CompanyCode+''' 
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+''' and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year = ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0)

end
')
GO
-- ====================================================================================================================================
-- Author           : Seandy A.K
-- Create date      : 13-8-2013
-- Revision by      : Hasim
-- Revision date    : 14-11-2013
-- Description      : Summary ITS Outstanding Not Update  ==>  Inquiry Outstanding Prospek
-- Query Activation : uspfn_InquiryITSOutsDetailNUpdate '2013-10-16','','','',0
-- exec uspfn_InquiryITSOutsDetailNUpdate @StartDate=N'20130930',@Area=N'',@CompanyCode=N'',@BranchCode=N'',@Summary=N'0'
-- exec uspfn_InquiryITSOutsDetailNUpdate @StartDate=N'20130930',@Area=N'',@CompanyCode=N'',@BranchCode=N'',@Summary=N'1'
-- exec uspfn_InquiryITSOutsDetailNUpdate @StartDate=N'20130930',@Area=N'CABANG',@CompanyCode=N'6006406',@BranchCode=N'6006406',@Summary=N'0'
-- exec uspfn_InquiryITSOutsDetailNUpdate @StartDate=N'20130930',@Area=N'CABANG',@CompanyCode=N'6006406',@BranchCode=N'',@Summary=N'0'
-- exec uspfn_InquiryITSOutsDetailNUpdate @StartDate=N'20130930',@Area=N'CABANG',@CompanyCode=N'6006406',@BranchCode=N'',@Summary=N'1'
-- ====================================================================================================================================

ALTER procedure [dbo].[uspfn_InquiryITSOutsDetailNUpdate]
	  @StartDate	  varchar(10),
	  @Area			  varchar(100),
	  @CompanyCode	  varchar(15),
	  @BranchCode	  varchar(15),
	  @Summary		  bit
AS

BEGIN
      declare @National varchar(10)
      set @National = (select top 1 ISNULL(ParaValue,0) from gnMstLookUpDtl
                        where CodeID='QSLS' and LookUpValue='NATIONAL')

      if (@National = 0)  -- Dealer
         begin
              select * into #t1 from(
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            upper(e.EmployeeName) "Salesman", upper(f.EmployeeName) "Koordinator", 
                            k.InquiryNumber, k.BranchCode Branch_Code, k.CompanyCode Company_Code, 
                            k.InquiryDate, a.NextFollowUpDate, 
                          --k.LastUpdateStatus, 
                           (select top 1 h.UpdateDate
                              from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress <> 'P'
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastUpdateStatus,
                            k.SPKDate, a.ActivityDate,
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, 
                          --k.LastProgess
                           (select top 1 upper(h.LastProgress) from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                              where hs.CompanyCode   = h.CompanyCode
		                                                and hs.BranchCode    = h.BranchCode
		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                and hs.LastProgress <> 'P'
		                                                and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
                    		                                                and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
                    		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastProgress,
                            k.Leasing, k.DownPayment, k.Tenor, upper(a.ActivityType) "ActivityType",
                            upper(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32))) "ActivityDetail" 
                       from pmKDP k, pmActivities a, pmBranchOutlets O, gnMstEmployee E, gnMstEmployee F
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = a.CompanyCode
                        and k.BranchCode    = a.BranchCode
                        and k.inquiryNumber = a.InquiryNumber
                        and a.ActivityId    = (select max(activityID) from pmActivities 
                                                where CompanyCode   = k.CompanyCode
                                                  and BranchCode    = k.BranchCode
                                                  and InquiryNumber = k.InquiryNumber)
                        and a.NextFollowUpDate <= @StartDate
                      --and k.CompanyCode   = o.CompanyCode
                      --and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                        and k.CompanyCode   = e.CompanyCode
                        and k.BranchCode    = e.BranchCode
                        and k.EmployeeID    = e.employeeID
                        and k.CompanyCode   = f.CompanyCode
                        and k.BranchCode    = f.BranchCode 
                        and k.SpvEmployeeId = f.EmployeeID 
                      ) #t1
                      where LastProgress is not null
                     union 
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            upper(e.EmployeeName) "Salesman", upper(F.EmployeeName) "Koordinator", 
                            k.InquiryNumber, k.BranchCode, k.CompanyCode, k.InquiryDate, '1-1-1900' "NextFollowUpDate",
                            k.LastUpdateStatus, k.SPKDate, '1-1-1900' "LastActivityDate",
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, k.LastProgress, k.Leasing, k.DownPayment, k.Tenor, '' "ActivityType", '' "ActivityDetail" 
                       from pmKDP k, pmBranchOutlets o, gnMstEmployee e, gnMstEmployee f
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = o.CompanyCode
                        and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                        and k.CompanyCode   = e.CompanyCode
                        and k.BranchCode    = e.BranchCode
                        and k.EmployeeID    = e.employeeID
                        and k.CompanyCode   = f.CompanyCode
                        and k.BranchCode    = f.BranchCode 
                        and k.SpvEmployeeId = f.EmployeeID 
                        and not exists (select 1 from pmActivities 
                                         where CompanyCode   = k.CompanyCode
                                           and BranchCode    = k.BranchCode
                                           and InquiryNumber = k.InquiryNumber)

			  if (@Summary = 0)
			     begin
		             select b.Area, b.DealerAbbreviation CompanyName, c.OutletAbbreviation BranchName, a.CompanyCode, 
					        a.BranchCode, a.OutletName, a.Salesman, a.Koordinator, a.InquiryNumber, 
			                case when convert(varchar,a.InquiryDate     ,112)='19000101' then NULL else a.InquiryDate      end InquiryDate,
			                case when convert(varchar,a.NextFollowUpDate,112)='19000101' then NULL else a.NextFollowUpDate end NextFollowUpDate,
			                case when convert(varchar,a.LastUpdateStatus,112)='19000101' then NULL else a.LastUpdateStatus end LastUpdateStatus,
			                case when convert(varchar,a.SPKDate         ,112)='19000101' then NULL else a.SPKDate          end SPKDate,
			                case when convert(varchar,a.ActivityDate    ,112)='19000101' then NULL else a.ActivityDate     end "LastActivityDate",
                            Status, a.PerolehanData, a.NamaProspek, a.TelpRumah, a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode,
                            a.CaraBayar, a.TestDrive, a.QuantityInquiry, a.LastProgress, a.Leasing, a.DownPayment, a.Tenor, a.ActivityType,
			                replace(replace(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32)),'<','('),'>',')') "ActivityDetail"
  					   from #t1 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation
                 end		 
	          else
	             begin
 	                 select * into #t2 from (
   	                        select k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName, count(k.InquiryNumber) TotalKDP
           	                  from pmKDP k, pmBranchOutlets O 
    	                     where k.InquiryDate<=@StartDate
    	                       and k.CompanyCode=o.CompanyCode
		                       and k.BranchCode=o.BranchCode
	 	                	   and k.OutletID=O.OutletID
           	                 --and LastProgress not in ('DO','DELIVERY','LOST')
             	               and not exists (select top 1 1 from pmStatusHistory
                              	                where CompanyCode   = k.CompanyCode
		                       	                  and BranchCode    = k.BranchCode
		                       	                  and InquiryNumber = k.InquiryNumber
		                       	                  and UpdateDate   <= @StartDate
		                       	                  and LastProgress in ('DO','DELIVERY','LOST'))
          	                 group by k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName) #t2

                     select * into #t3 from (
					        select t2.CompanyCode, t2.BranchCode, t2.OutletName, t2.TotalKDP, count(t1.InquiryDate) "TidakUpdate" 
                              from #t2 t2, #t1 t1
                             where t2.CompanyCode = t1.CompanyCode
                               and t2.BranchCode  = t1.BranchCode
                               and t2.OutletID    = t1.OutletID
                             group by t2.CompanyCode, t2.BranchCode, t2.OutletName, t2.TotalKDP) #t3
				 
		             select b.Area, a.CompanyCode, b.DealerAbbreviation CompanyName, a.BranchCode, 
					        c.OutletAbbreviation BranchName, a.TotalKDP, a.TidakUpdate,
			                case when a.TotalKDP <> 0 THEN (cast(a.TidakUpdate as Decimal) / cast(a.TotalKDP as Decimal)) * 100.00 ELSE 0 end Pctg
		               from #t3 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		                and a.TotalKDP <> 0
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation
                     drop table #t2
					 drop table #t3
                 end		 
			  drop table #t1
         end
	  else
      -- National
         begin
              select * into #t11 from(
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            k.Wiraniaga "Salesman", k.SalesCoordinator "Koordinator", 
                            k.InquiryNumber, k.BranchCode Branch_Code, k.CompanyCode Company_Code, 
                            k.InquiryDate, a.NextFollowUpDate, 
                          --k.LastUpdateStatus, 
                           (select top 1 h.UpdateDate
                              from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress <> 'P'
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastUpdateStatus,
                            k.SPKDate, a.ActivityDate,
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, 
                          --k.LastProgess
                           (select top 1 upper(h.LastProgress) from pmStatusHistory h
                             where k.InquiryNumber = h.InquiryNumber
                               and k.CompanyCode   = h.CompanyCode
                               and k.BranchCode    = h.BranchCode
                               and h.UpdateDate   <= @StartDate
                               and (h.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory hs
		                                              where hs.CompanyCode   = h.CompanyCode
		                                                and hs.BranchCode    = h.BranchCode
		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                and hs.LastProgress <> 'P'
		                                                and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
		                                                                    and hs.InquiryNumber = h.InquiryNumber
                    		                                                and hs.LastProgress not in ('P','HP')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112))
                                or  h.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory hs
		                                                                  where hs.CompanyCode   = h.CompanyCode
		                                                                    and hs.BranchCode    = h.BranchCode
                    		                                                and hs.InquiryNumber = h.InquiryNumber
		                                                                    and hs.LastProgress not in ('P','HP','SPK')
		                                                                    and convert(varchar,hs.UpdateDate,112)<=convert(varchar,@StartDate,112)))          
		                     order by len(h.LastProgress) desc) LastProgress,
                            k.Leasing, k.DownPayment, k.Tenor, upper(a.ActivityType) "ActivityType",
                            upper(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32))) "ActivityDetail" 
                       from pmHstITS k, pmActivities a, pmBranchOutlets O
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = a.CompanyCode
                        and k.BranchCode    = a.BranchCode
                        and k.inquiryNumber = a.InquiryNumber
                        and a.ActivityId    = (select max(activityID) from pmActivities 
                                                where CompanyCode   = k.CompanyCode
                                                  and BranchCode    = k.BranchCode
                                                  and InquiryNumber = k.InquiryNumber)
                        and a.NextFollowUpDate <= @StartDate
                      --and k.CompanyCode   = o.CompanyCode
                      --and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                      ) #t11
                      where LastProgress is not null
                     union 
                     select o.CompanyCode, o.BranchCode, upper(o.OutletID) "OutletID", upper(o.OutletName) "OutletName", 
                            k.Wiraniaga "Salesman", k.SalesCoordinator "Koordinator", 
                            k.InquiryNumber, k.BranchCode, k.CompanyCode, k.InquiryDate, '1-1-1900' "NextFollowUpDate",
                            k.LastUpdateStatus, k.SPKDate, '1-1-1900' "LastActivityDate",
                            case isnull(k.StatusProspek,'')
                                 when '10' then 'NEW' 
                                 when '20' then 'REPEAT ORDER' 
                                 else ''
                            end  "Status",
                            upper(k.PerolehanData) "PerolehanData", upper(k.NamaProspek) "NamaProspek", k.TelpRumah, 
                            upper(k.TipeKendaraan) "TipeKendaraan", upper(k.Variant) "Variant", 
                            upper(k.Transmisi) "Transmisi", upper(k.ColourCode) "ColourCode",
                            case 
                                 when isnull(k.CaraPembayaran,'') in ('10','TUNAI','CASH')    then 'CASH' 
                                 when isnull(k.CaraPembayaran,'') in ('20','KREDIT','CREDIT') then 'CREDIT' 
                                 else '' 
                            end  "CaraBayar",
                            case 
                                 when isnull(k.TestDrive,'') in ('10','YA','YES')   then 'YES' 
                                 when isnull(k.TestDrive,'') in ('20','TIDAK','NO') then 'NO' 
                                 else '' 
                            end  "TestDrive",
                            k.QuantityInquiry, k.LastProgress, k.Leasing, k.DownPayment, k.Tenor, '' "ActivityType", '' "ActivityDetail" 
                       from pmHstITS k, pmBranchOutlets o
                      where k.InquiryDate  <= @StartDate
                        and k.LastProgress not in ('DO','DELIVERY','LOST')
                        and k.CompanyCode   = o.CompanyCode
                        and k.BranchCode    = o.BranchCode
                        and k.OutletID      = o.OutletID
                        and not exists (select 1 from pmActivities 
                                         where CompanyCode   = k.CompanyCode
                                           and BranchCode    = k.BranchCode
                                           and InquiryNumber = k.InquiryNumber)

			  if (@Summary = 0)
			     begin
		             select b.Area, b.DealerAbbreviation CompanyName, c.OutletAbbreviation BranchName, a.CompanyCode, 
					        a.BranchCode, a.OutletName, a.Salesman, a.Koordinator, a.InquiryNumber, 
			                case when convert(varchar,a.InquiryDate     ,112)='19000101' then NULL else a.InquiryDate      end InquiryDate,
			                case when convert(varchar,a.NextFollowUpDate,112)='19000101' then NULL else a.NextFollowUpDate end NextFollowUpDate,
			                case when convert(varchar,a.LastUpdateStatus,112)='19000101' then NULL else a.LastUpdateStatus end LastUpdateStatus,
			                case when convert(varchar,a.SPKDate         ,112)='19000101' then NULL else a.SPKDate          end SPKDate,
			                case when convert(varchar,a.ActivityDate    ,112)='19000101' then NULL else a.ActivityDate     end "LastActivityDate",
                            Status, a.PerolehanData, a.NamaProspek, a.TelpRumah, a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode,
                            a.CaraBayar, a.TestDrive, a.QuantityInquiry, a.LastProgress, a.Leasing, a.DownPayment, a.Tenor, a.ActivityType,
			                replace(replace(replace(replace(a.ActivityDetail,char(10),char(32)),char(13),char(32)),'<','('),'>',')') "ActivityDetail"
  					   from #t11 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation
                 end		 
	          else
	             begin
 	                 select * into #t12 from (
   	                        select k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName, count(k.InquiryNumber) TotalKDP
           	                  from pmHstITS k, pmBranchOutlets O 
    	                     where k.InquiryDate<=@StartDate
    	                       and k.CompanyCode=o.CompanyCode
		                       and k.BranchCode=o.BranchCode
	 	                	   and k.OutletID=O.OutletID
           	                 --and LastProgress not in ('DO','DELIVERY','LOST')
             	               and not exists (select top 1 1 from pmStatusHistory
                              	                where CompanyCode   = k.CompanyCode
		                       	                  and BranchCode    = k.BranchCode
		                       	                  and InquiryNumber = k.InquiryNumber
		                       	                  and UpdateDate   <= @StartDate
		                       	                  and LastProgress in ('DO','DELIVERY','LOST'))
          	                 group by k.CompanyCode, k.BranchCode, k.OutletID, o.OutletName) #t12

                     select * into #t13 from (
					        select t12.CompanyCode, t12.BranchCode, t12.OutletName, t12.TotalKDP, count(t11.InquiryDate) "TidakUpdate" 
                              from #t12 t12, #t11 t11
                             where t12.CompanyCode = t11.CompanyCode
                               and t12.BranchCode  = t11.BranchCode
                               and t12.OutletID    = t11.OutletID
                             group by t12.CompanyCode, t12.BranchCode, t12.OutletName, t12.TotalKDP) #t13
				 
		             select b.Area, a.CompanyCode, b.DealerAbbreviation CompanyName, a.BranchCode, 
					        c.OutletAbbreviation BranchName, a.TotalKDP, a.TidakUpdate,
			                case when a.TotalKDP <> 0 THEN (cast(a.TidakUpdate as Decimal) / cast(a.TotalKDP as Decimal)) * 100.00 ELSE 0 end Pctg
		               from #t13 a
		               left join gnMstDealerMapping b 
						      on a.CompanyCode = b.DealerCode
		               left join gnMstDealerOutletMapping c 
						      on a.CompanyCode = c.DealerCode
			                 and a.BranchCode  = c.OutletCode
		              where b.Area        like case when @Area       ='' then '%%' else @Area        end
		                and a.CompanyCode like case when @CompanyCode='' then '%%' else @CompanyCode end
		                and a.BranchCode  like case when @BranchCode ='' then '%%' else @BranchCode  end
		                and a.TotalKDP <> 0
		              order by b.Area, b.DealerAbbreviation, a.BranchCode --c.OutletAbbreviation 
                     drop table #t12
					 drop table #t13
                 end		 
			  drop table #t11
         end
END
GO
ALTER procedure [dbo].[uspfn_sfEmpMutation]  
 @CompanyCode  varchar(20) = '%',  
 @BranchCode   varchar(20) = '%',  
 @pDate        char(8)  
as  
  
select a.CompanyCode, b.CompanyName, a.BranchCode, a.BranchName  
     , EmpBeg = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and m.MutaType = 'IN'  
           and left(convert(varchar, m.MutaDate, 112), 6) < left(@pDate, 6)  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)  
           and isnull(m.IsDeleted, 0) = 0
       ), 0)  
       - isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and m.MutaType = 'OUT'  
           and left(convert(varchar, m.MutaDate, 112), 6) < left(@pDate, 6)  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
           and isnull(m.IsDeleted, 0) = 0
       ), 0)  
     , EmpJoin = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and left(convert(varchar, m.MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and m.MutaType = 'IN'  
           and m.MutaCode = 'JOIN'  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)  
           and isnull(m.IsDeleted, 0) = 0
       ), 0)  
     , EmpMutaIn = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and left(convert(varchar, m.MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and m.MutaType = 'IN'  
           and m.MutaCode != 'JOIN'  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)  
           and isnull(m.IsDeleted, 0) = 0
       ), 0)  
     , EmpResign = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and left(convert(varchar, m.MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and m.MutaType = 'OUT'  
           and m.MutaCode = 'RESIGN'  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
           and isnull(m.IsDeleted, 0) = 0
       ), 0)  
     , EmpMutaOut = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and left(convert(varchar, m.MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and m.MutaType = 'OUT'  
           and m.MutaCode != 'RESIGN'  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
           and isnull(m.IsDeleted, 0) = 0
       ), 0)  
     , EmpAll = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and m.MutaType = 'IN'  
           and isnull(m.IsDeleted, 0) = 0
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)  
       ), 0)  
       - isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and m.MutaType = 'OUT'  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
           and isnull(m.IsDeleted, 0) = 0
       ), 0)         
  from GnMstOrganizationDtl a  
  left join GnMstOrganizationHdr b on b.CompanyCode = a.CompanyCode  
 where a.CompanyCode like @CompanyCode  
   and BranchCode like @BranchCode  
 order by a.BranchCode
GO
create procedure [dbo].[uspfn_SyncPmHstIts]

as

declare @CompanyCode varchar(max)
set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationDtl)

declare @BranchCode varchar(max)
set @BranchCode = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0)

declare @DealerCode varchar(max)
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileSales where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode)

declare @DealerName varchar(max)
set @DealerName = isnull((select top 1 CompanyName from gnmstorganizationhdr where companycode=@companyCode),
					(select isnull(BranchName,' ') from gnMstOrganizationDtl where companycode=@companycode and branchcode=@dealercode))

declare @LastDate datetime
declare @NoInquiry int

select * into #t2
from (
select pp.CompanyCode, pp.BranchCode, pp.EmployeeID BranchHeadID, ge.EmployeeName BranchHeadName, pt.TeamID
  from pmPosition pp
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pp.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
  left join pmMstTeamMembers pt
	on pp.CompanyCode = pt.CompanyCode
   and pp.BranchCode = pt.BranchCode
   and pp.EmployeeID = pt.EmployeeID
   and pt.IsSupervisor = 1
 where pp.PositionId = '40'
) #t2

select * into #t3
from (
select pp.CompanyCode, pp.BranchCode, pp.BranchHeadID, pp.BranchHeadName,
	   pt.EmployeeID SalesHeadID, ge.EmployeeName SalesHeadName, pd.TeamID
  from #t2 pp
  left join pmMstTeamMembers pt
	on pp.CompanyCode=pt.CompanyCode
   and pp.BranchCode=pt.BranchCode
   and pp.TeamID=pt.TeamID
   and pt.IsSupervisor=0
  left join pmMstTeamMembers pd
	on pp.CompanyCode = pd.CompanyCode
   and pp.BranchCode = pd.BranchCode
   and pt.EmployeeID = pd.EmployeeID
   and pd.IsSupervisor = 1
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pt.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
) #t3


select * into #t4
from (
select pp.CompanyCode, pp.BranchCode, pp.BranchHeadID, pp.BranchHeadName, pp.SalesHeadID, pp.SalesHeadName, 
	   pt.EmployeeID SalesCoordinatorID, ge.EmployeeName SalesCoordinatorName, pd.TeamID
  from #t3 pp
  left join pmMstTeamMembers pt
	on pp.CompanyCode=pt.CompanyCode
   and pp.BranchCode=pt.BranchCode
   and pp.TeamID=pt.TeamID
   and pt.IsSupervisor=0
  left join pmMstTeamMembers pd
	on pp.CompanyCode = pd.CompanyCode
   and pp.BranchCode = pd.BranchCode
   and pt.EmployeeID = pd.EmployeeID
   and pd.IsSupervisor = 1
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pt.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
) #t4

select * into #t5
from (
select pp.CompanyCode, pp.BranchCode, pp.BranchHeadID, pp.BranchHeadName, pp.SalesHeadID, pp.SalesHeadName, 
	   pp.SalesCoordinatorID, pp.SalesCoordinatorName, pt.EmployeeID SalesmanID, ge.EmployeeName SalesmanName
  from #t4 pp
  left join pmMstTeamMembers pt
	on pp.CompanyCode=pt.CompanyCode
   and pp.BranchCode=pt.BranchCode
   and pp.TeamID=pt.TeamID
   and pt.IsSupervisor=0
  left join pmMstTeamMembers pd
	on pp.CompanyCode = pd.CompanyCode
   and pp.BranchCode = pd.BranchCode
   and pt.EmployeeID = pd.EmployeeID
   and pd.IsSupervisor = 1
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pt.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
) #t5

insert into PmHstITS
select a.CompanyCode
	 , a.BranchCode
	 , a.InquiryNumber
	 , a.InquiryDate
	 , a.OutletID
	 , LEFT(isnull((select Top 1 BranchHeadname from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesCoordinatorID = a.SpvEmployeeID),''),50) BranchHead
	 , LEFT(isnull((select Top 1 SalesHeadName from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesCoordinatorID = a.SpvEmployeeID),''),50) SalesHead
	 , LEFT(isnull((select Top 1 SalesCoordinatorName from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesCoordinatorID = a.SpvEmployeeID),''),50) SalesCoordinator
	 , LEFT(isnull((select Top 1 SalesmanName from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesmanID = a.EmployeeID),''),50) Wiraniaga
	 , a.StatusProspek
	 , a.PerolehanData
	 , LEFT(replace(replace(isnull(a.NamaProspek,' '),CHAR(13), ' '),CHAR(10), ' '),50) NamaProspek
	 , LEFT(replace(replace(replace(isnull(a.AlamatProspek,' '),';',':'),CHAR(13), ' '),CHAR(10), ' '),200) AlamatProspek
	 , LEFT(a.TelpRumah,15) TelpRumah
	 , LEFT(isnull((select TOP 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'CITY' and LookUpValue = a.CityID),''),50) City
	 , LEFT(replace(replace(isnull(a.NamaPerusahaan,' '),CHAR(13), ' '),CHAR(10), ' '),50) NamaPerusahaan
	 , LEFT(replace(replace(replace(isnull(a.AlamatPerusahaan,' '),';',':'),CHAR(13), ' '),CHAR(10), ' '),200) AlamatPerusahaan
	 , a.Jabatan
	 , a.Handphone
	 , a.Faximile
	 , a.Email
	 , a.TipeKendaraan
	 , a.Variant
	 , a.Transmisi
	 , a.ColourCode
	 , LEFT(isnull((select TOP 1 RefferenceDesc1 from omMstRefference where CompanyCode = a.CompanyCode and RefferenceType = 'COLO' and RefferenceCode = a.ColourCode),''),50) ColourDescription
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMBY' and LookUpValue = a.CaraPembayaran),''),30) CaraPembayaran
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMOP' and LookUpValue = a.TestDrive),''),15) TestDrive
	 , a.QuantityInquiry
	 , LEFT(a.LastProgress,15) LastProgress
	 , a.LastUpdateStatus
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('P','PROSPECT')),'19000101') ProspectDate
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('HP','HOT')),'19000101') HotDate
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('SPK')),'19000101') SPKDate
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('DELIVER','DO','DELIVERY','DEAL')),'19000101') DeliveryDate
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'LSNG' and LookUpValue = a.Leasing),''),30) Leasing
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'DWPM' and LookUpValue = a.DownPayment),''),30) DownPayment
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'TENOR' and LookUpValue = a.Tenor),''),30) Tenor
	 , a.LostCaseDate
	 , LEFT(replace(replace(isnull(a.LostCaseCategory,' '),CHAR(13), ' '),CHAR(10), ' '),30) LostCaseCategory
	 , LEFT(a.LostCaseReasonID,30) LostCaseReasonID
	 , LEFT(replace(replace(isnull(a.LostCaseOtherReason,' '),CHAR(13), ' '),CHAR(10), ' '),100) LostCaseOtherReason
	 , LEFT(replace(replace(isnull(a.LostCaseVoiceOfCustomer,' '),CHAR(13), ' '),CHAR(10), ' '),200) LostCaseVoiceOfCustomer
	 , LEFT(a.MerkLain,50) MerkLain
	 , a.CreatedBy
	 , a.CreationDate CreatedDate
	 , a.LastUpdateBy
	 , a.LastUpdateDate
from pmKDP a
where 1 = 1
and not exists (select * from PmHstITS b
				 where  b.CompanyCode = a.CompanyCode
				   and b.BranchCode = a.BranchCOde
				   and b.InquiryNumber = a.InquiryNumber)
				   order by LastUpdateDate

drop table #t2
drop table #t3
drop table #t4
drop table #t5
GO
ALTER procedure [dbo].[uspfn_SvTrnJobOrderClose]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@UserID varchar(15)
as      

declare @errmsg varchar(max)

declare @ServiceStatus varchar(10)
    set @ServiceStatus = isnull((
						 select ServiceStatus
						   from svTrnService
						  where 1 = 1
						    and CompanyCode = @CompanyCode
						    and BranchCode  = @BranchCode
						    and ProductType = @ProductType
						    and ServiceNo   = @ServiceNo
						 ),0)

if (@ServiceStatus >= '5') 
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'SPK ini sudah tidak dapat ditutup lagi karena status sudah berubah.'
				+ char(13) + 'Status SPK Terakhir = ' + @ServiceStatus + ', tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

begin try
	update svTrnService
	   set ServiceStatus	= '5'
		  ,JobOrderClosed	= getdate()
          ,LastUpdateBy		= @UserID
          ,LastUpdateDate	= getdate()
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo = @ServiceNo
	update svTrnSrvVor
	   set ClosedDate		= getdate()
		  ,LastUpdateBy		= @UserID
          ,LastUpdateDate	= getdate()
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode	   
	   and ServiceNo = @ServiceNo
end try
begin catch
	set @errmsg = N'gagal ubah status SPK pada ServiceNo = '
				+ convert(varchar,@ServiceNo)
				+ char(13) + error_message()
	raiserror (@errmsg,16,1);
end catch
GO
ALTER procedure [dbo].[uspfn_IsNeedChangePassword]
	@UserId varchar(20) = ''

as

select isnull(RequiredChange, 0)
     , info = N'Demi keamanan dan IT Policy
Silahkan ubah password lama anda'
  from SysUser where UserId = @UserId
GO
ALTER procedure [dbo].[uspfn_SvTrnInvoiceCreate]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   int,
	@BillType    char(1),
	@InvoiceNo   varchar(15),
	@Remarks     varchar(max),
	@UserID      varchar(15)
as  

declare @errmsg varchar(max)
--raiserror ('test error',16,1);

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)
DECLARE @DbMD AS VARCHAR(15)
declare @md bit

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

select BillType as BillType
              from svTrnSrvTask
             where CompanyCode = @companycode
               and BranchCode  = @branchcode
               and ProductType = @productType
               and ServiceNo   = @serviceno
            union
            select BillType as BillType
              from svTrnSrvItem b
             where CompanyCode = @companycode
               and BranchCode  = @branchcode
               and ProductType = @productType
               and ServiceNo   = @serviceno
               and  (SupplyQty - ReturnQty) > 0


-- get data from service
select * into #srv from(
  select * from svTrnService
   where 1 = 1
     and CompanyCode = @CompanyCode
     and BranchCode  = @BranchCode
     and ProductType = @ProductType
     and ServiceNo   = @ServiceNo
 )#srv

 select * from #srv
 select * from svTrnSrvItem where serviceno = @serviceno
 select * from svTrnSrvTask where serviceno = @serviceno

-- get data from task
select * into #tsk from(
  select a.* from svTrnSrvTask a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#tsk

 select * from #tsk

-- get data from item
select * into #mec from(
  select a.* from svTrnSrvMechanic a, #tsk b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.OperationNo = b.OperationNo
     and a.OperationNo <> ''
 )#mec

 select * from #mec

-- get data from item
select * into #itm from(
  select a.* from svTrnSrvItem a, #srv b
   where 1 = 1
     and a.CompanyCode = b.CompanyCode
     and a.BranchCode  = b.BranchCode
     and a.ProductType = b.ProductType
     and a.ServiceNo   = b.ServiceNo
     and a.BillType    = @BillType
 )#itm

-- create temporary table detail
create table #pre_dtl(
	BillType char(1),
	TaskPartType char(1),
	TaskPartNo varchar(20),
	TaskPartQty numeric(10,2),
	SupplySlipNo varchar(20)
)

insert into #pre_dtl
select BillType, 'L', OperationNo, OperationHour, ''
  from #tsk

insert into #pre_dtl
select BillType, TypeOfGoods, PartNo
	 , sum(SupplyQty - ReturnQty)
	 , SupplySlipNo
  from #itm
 where BillType = @BillType
   and (SupplyQty - ReturnQty) > 0
 group by BillType, TypeOfGoods, PartNo, SupplySlipNo

-- insert to table svTrnInvoice
declare @CustomerCode varchar(20)
if @BillType = 'C'
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end
else if @BillType = 'P'
begin
	set @CustomerCode = (select top 1 a.BillTo from svMstPackage a
				 inner join svMstPackageTask b
					on b.CompanyCode = a.CompanyCode
				   and b.PackageCode = a.PackageCode
				 inner join svMstPackageContract c
					on c.CompanyCode = a.CompanyCode
				   and c.PackageCode = a.PackageCode
				 inner join #srv d
					on d.CompanyCode = a.CompanyCode
				   and d.JobType = a.JobType
				   and d.ChassisCode = c.ChassisCode
				   and d.ChassisNo = c.ChassisNo)
end
else if @BillType in ('F', 'W', 'S')
begin
	set @CustomerCode = (select CustomerCode from svMstBillingType
				 where BillType in ('F', 'W', 'S')
				   and CompanyCode = @CompanyCode
				   and BillType = @BillType)
end
else
begin
	set @CustomerCode = (select CustomerCodeBill from #srv)
end

--set @CustomerCode = isnull((
--				select top 1 a.BillTo from svMstPackage a
--				 inner join svMstPackageTask b
--					on b.CompanyCode = a.CompanyCode
--				   and b.PackageCode = a.PackageCode
--				 inner join svMstPackageContract c
--					on c.CompanyCode = a.CompanyCode
--				   and c.PackageCode = a.PackageCode
--				 inner join #srv d
--					on d.CompanyCode = a.CompanyCode
--				   and d.JobType = a.JobType
--				   and d.ChassisCode = c.ChassisCode
--				   and d.ChassisNo = c.ChassisNo
--				), isnull((
--				select CustomerCode from svMstBillingType
--				 where BillType in ('F')
--				   and CompanyCode = @CompanyCode
--				   and BillType = @BillType
--				), isnull((select CustomerCodeBill from #srv), '')))


if ((select count(*) from #tsk) = 0 and (select count(*) from #itm) = 0)
begin
	drop table #srv
	drop table #tsk
	drop table #mec
	drop table #itm
	drop table #pre_dtl
	return
end

if (@CustomerCode = '')
begin
	set @errmsg = N'Customer Code Bill belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

select * into #cus from (
select a.CompanyCode, a.IsPkp, b.CustomerCode, b.LaborDiscPct, b.PartDiscPct, b.MaterialDiscPct, b.TopCode, b.TaxCode
  from gnMstCustomer a, gnMstCustomerProfitCenter b
 where 1 = 1
   and b.CompanyCode  = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.CompanyCode  = @CompanyCode
   and b.BranchCode   = @BranchCode
   and b.CustomerCode = @CustomerCode
   and b.ProfitCenterCode = '200'
)#cus

if (select count(*) from #cus) <> 1
begin
	set @errmsg = N'Customer ProfitCenter belum di define...'
				+ char(13) + 'Tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

declare @IsPKP bit
    set @IsPKP = isnull((
				 select IsPKP from gnMstCustomer
				  where CompanyCode  = @CompanyCode
				    and CustomerCode = @CustomerCode
				  ), 0)

declare @PPnPct decimal
    set @PPnPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPN'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)

declare @PPhPct decimal
    set @PPhPct = isnull((
				  select a.TaxPct
				    from gnMstTax a, #cus b
				   where 1 = 1
				     and b.TaxCode     = 'PPH'
				     and a.CompanyCode = b.CompanyCode
				     and a.TaxCode     = b.TaxCode
				  ), 0)


-- Insert Into svTrnInvoice
-----------------------------------------------------------------------------------------
insert into svTrnInvoice(
  CompanyCode, BranchCode, ProductType
, InvoiceNo, InvoiceDate, InvoiceStatus
, FPJNo, FPJDate, JobOrderNo, JobOrderDate, JobType
, ServiceRequestDesc, ChassisCode, ChassisNo, EngineCode, EngineNo
, PoliceRegNo, BasicModel, CustomerCode, CustomerCodeBill, Odometer
, IsPKP, TOPCode, TOPDays, DueDate, SignedDate
, LaborDiscPct, PartsDiscPct, MaterialDiscPct, PphPct, PpnPct, Remarks
, PrintSeq, PostingFlag, IsLocked, CreatedBy, CreatedDate
) 
select
  @CompanyCode CompanyCode
, @BranchCode BranchCode
, @ProductType ProductType
, @InvoiceNo InvoiceNo
, getdate() InvoiceDate
, case @IsPKP
	when '0' then '1'
	else (case @BillType when 'F' then '0' when 'W' then '0' else '1' end)
  end as InvoiceStatus
, '' FPJNo
, null FPJDate
, (select JobOrderNo from #srv) JobOrderNo
, (select JobOrderDate from #srv) JobOrderDate
, (select JobType from #srv) JobType
, (select ServiceRequestDesc from #srv) ServiceRequestDesc
, (select ChassisCode from #srv) ChassisCode
, (select ChassisNo from #srv) ChassisNo
, (select EngineCode from #srv) EngineCode
, (select EngineNo from #srv) EngineNo
, (select PoliceRegNo from #srv) PoliceRegNo
, (select BasicModel from #srv) BasicModel
, (select CustomerCode from #srv) CustomerCode
, @CustomerCode as CustomerCodeBill
, (select Odometer from #srv) Odometer
, (select IsPKP from #cus) as IsPKP
, (select TopCode from #cus) as TOPCode
, isnull((
	select b.ParaValue
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue = a.TopCode
	), null) as TOPDays
, isnull((
	select dateadd(day, convert(int,b.ParaValue), convert(varchar, getdate(), 112))
	  from gnMstCustomerProfitCenter a, GnMstLookUpDtl b
	 where a.CompanyCode  = @CompanyCode
	   and a.BranchCode   = @BranchCode
	   and a.CustomerCode = @CustomerCode
	   and a.ProfitCenterCode = '200'
	   and b.CompanyCode  = a.CompanyCode
	   and b.CodeID = 'TOPC'
	   and b.LookUpValue  = a.TopCode
	), null) as DueDate
, convert(varchar, getdate(), 112) SignedDate
, case @BillType
	when 'F' then (select LaborDiscPct from #cus) 
    when 'W' then (select LaborDiscPct from #cus) 
    else (select LaborDiscPct from #srv) 
  end as LaborDiscPct
, case @BillType
	when 'F' then (select PartDiscPct from #cus) 
    when 'W' then (select PartDiscPct from #cus) 
    else (select PartDiscPct from #srv) 
  end as PartsDiscPct
, case @BillType
	when 'F' then (select MaterialDiscPct from #cus) 
    when 'W' then (select MaterialDiscPct from #cus) 
    else (select MaterialDiscPct from #srv) 
  end as MaterialDiscPct
, @PPnPct as PPhPct
, @PPnPct as PPnPct
, @Remarks as Remarks
, '0' PrintSeq
, '0' PostingFlag
, '0' IsLocked
, @UserID CreatedBy
, getdate() CreatedDate

-- Insert Into svTrnInvTask
-----------------------------------------------------------------------------------------
insert into svTrnInvTask (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, OperationHour, ClaimHour, OperationCost, SubConPrice
, IsSubCon, SharingTask, DiscPct
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, isnull(OperationHour, 0) OperationHour, isnull(ClaimHour, 0) ClaimHour
, isnull(OperationCost, 0) OperationCost, isnull(SubConPrice, 0) SubConPrice
, isnull(IsSubCon, 0) IsSubCon, isnull(SharingTask, 0) SharingTask
, isnull(DiscPct, 0)
from #tsk

-- Insert Into svTrnInvMechanic
-----------------------------------------------------------------------------------------
insert into svTrnInvMechanic (
  CompanyCode, BranchCode, ProductType, InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
)
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, OperationNo
, MechanicID, ChiefMechanicID, StartService, FinishService
from #mec

-- Insert Into svTrnInvItem
-----------------------------------------------------------------------------------------
Declare @Query varchar(max)

set @Query = 'select * into #itm1 from (
select CompanyCode, BranchCode, ProductType, '''+ @InvoiceNo +''' as InvoiceNo, PartNo
	 , isnull((
		select MovingCode from '+ @DbMD +'..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '''') as MovingCode
	 , isnull((
		select ABCClass from '+ @DbMD +' ..spMstItems
		 where CompanyCode = '''+ @CompanyMD +'''
		   and BranchCode = '''+ @BranchMD +'''
		   and PartNo = #itm.PartNo
		), '''') as ABCClass
	 , sum(SupplyQty - ReturnQty) as SupplyQty
	 , isnull((
		select 
		  case (sum(b.SupplyQty - b.ReturnQty))
			 when 0 then 0
			 else sum(a.CostPrice * (b.SupplyQty - b.ReturnQty)) / sum(b.SupplyQty - b.ReturnQty)
		  end 
	from SpTrnSLmpDtl a
	left join SvTrnSrvItem b on 1 = 1
	 and b.CompanyCode  = a.CompanyCode
	 and b.BranchCode   = a.BranchCode
	 and b.ProductType  = a.ProductType
	 and b.SupplySlipNo = a.DocNo
	 and b.PartNo = #itm.PartNo
	where 1 = 1
	 and a.CompanyCode = '''+ @CompanyCode +'''
	 and a.BranchCode  = '''+ @BranchCode +'''
	 and a.ProductType = '''+ @ProductType +'''
	 and a.PartNo = #itm.PartNo
	 and a.DocNo in (
			select SupplySlipNo
			 from SvTrnSrvItem
			where 1 = 1
			  and CompanyCode = '''+ @CompanyCode +'''
			  and BranchCode  = '''+ @BranchCode +'''
			  and ProductType = '''+ @ProductType +'''
			  and ServiceNo = '''+ Convert(varchar,@ServiceNo) +'''
			  and PartNo = #itm.PartNo
			)
	), 0) as CostPrice
, RetailPrice
, TypeOfGoods
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, RetailPrice, TypeOfGoods
)#

insert into svTrnInvItem (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo
, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice
, TypeOfGoods, DiscPct
)
select a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo
	 , MovingCode = (select top 1 MovingCode from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , ABCClass = (select top 1 ABCClass from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , sum(SupplyQty) as SupplyQty, 0 as ReturnQty
	 , CostPrice = (select top 1 CostPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by CostPrice desc)
	 , RetailPrice = (select top 1 RetailPrice from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo order by RetailPrice desc)
	 , TypeOfGoods = (select top 1 TypeOfGoods from #itm1 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
	 , DiscPct = (select top 1 DiscPct from #itm where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InvoiceNo = a.InvoiceNo and PartNo = a.PartNo)
  from #itm1 a
 where a.SupplyQty > 0
 group by a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo, a.PartNo'

 exec(@Query)

-- Insert Into svTrnInvItemDtl
-----------------------------------------------------------------------------------------
insert into svTrnInvItemDtl (
  CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, SupplySlipNo
, SupplyQty, CostPrice, CreatedBy, CreatedDate
)
select y.* from (
select CompanyCode, BranchCode, ProductType, @InvoiceNo as InvoiceNo, PartNo, SupplySlipNo
, sum(SupplyQty - ReturnQty) as SupplyQty, CostPrice
, @UserID as CreatedBy, getdate() as CreatedDate
from #itm
group by CompanyCode, BranchCode, ProductType, PartNo, SupplySlipNo, CostPrice
) y
where y.SupplyQty > 0

-- Re Calculate Invoice

-----------------------------------------------------------------------------------------
exec uspfn_SvTrnInvoiceReCalculate @CompanyCode=@CompanyCode, @BranchCode=@BranchCode, @ProductType=@ProductType, @InvoiceNo=@InvoiceNo, @UserId=@UserId
-- Insert svsdmovement
-----------------------------------------------------------------------------------------

 if(@md = 0)
 begin

 set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, '''+ convert(varchar,@InvoiceNo) +''','''+ convert(varchar,GETDATE()) +''', a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ServiceNo order by a.ServiceNo)) ,
''00'', a.DemandQty, a.DemandQty, a.DiscPct, a.CostPrice, a.RetailPrice, a.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''',md.RetailPriceInclTax,md.RetailPrice,md.CostPrice
,''x'','''+ @producttype +''',''300'',''8'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from svTrnSrvItem a 
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ServiceNo = '''+ convert(varchar,@ServiceNo) +''''

exec (@Query)

end

drop table #srv
drop table #tsk
drop table #mec
drop table #itm
drop table #cus

drop table #pre_dtl
--rollback tran
GO
-- uspfn_GetStockUpdateLog '6006406', '6006406', '2011-06-01 01:00:00.000','2011-08-11 08:00:00.000'

ALTER PROCEDURE [dbo].[uspfn_GetStockUpdateLog]
    @CompanyCode  varchar(20),
    @BranchCode   varchar(20),
    @DateSchedule Datetime,
	@DateNow Datetime
AS
BEGIN 
DECLARE @DateBegin  DATETIME 
DECLARE @DateEnd    DATETIME 

SET @DateBegin = @DateSchedule
SET @DateEnd   = @DateNow

SELECT '1'  AS RecordID, b.BPUDate  AS transactionDate, CASE
          WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
       THEN
             'B1'
          ELSE
             'B2'
       END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
       ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, b.RefferenceDONo AS DONo,

       (CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
        THEN '' ELSE b.SupplierCode END)  AS 'Supplier/CustomerCode', (
       SELECT c.SupplierName
       FROM gnMstSupplier c
       WHERE b.SupplierCode = c.SupplierCode)  AS 'Supplier/CustomerName'
  FROM omMstVehicle a
	LEFT JOIN omTrPurchaseBPUDetail c on a.CompanyCode = c.CompanyCode and a.ChassisCode = c.ChassisCode and a.ChassisNo = c.ChassisNo
	LEFT JOIN omTrPurchaseBPU b on b.CompanyCode = c.CompanyCode and b.BranchCode = c.BranchCode and b.BPUNo = c.BPUNo
 WHERE a.CompanyCode = b.CompanyCode
       AND a.BPUNo = b.BPUNo
       AND (b.BPUDate > @DateBegin AND b.BPUDate <= @DateEnd)
       AND b.CompanyCode = @CompanyCode 

UNION
SELECT '1'  AS RecordID, b.BPUDate  AS transactionDate, CASE
          WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
       THEN
             'B1'
          ELSE
             'B2'
       END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
       ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, b.RefferenceDONo AS DONo,
        (CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
        THEN '' ELSE b.SupplierCode END) AS 'Supplier/CustomerCode', (
       SELECT c.SupplierName
       FROM gnMstSupplier c
       WHERE b.SupplierCode = c.SupplierCode)  AS 'Supplier/CustomerName'
  FROM omMstVehicleTemp a, omTrPurchaseBPU b
 WHERE a.CompanyCode = b.CompanyCode
       AND a.BPUNo = b.BPUNo AND a.IsActive = 1
       AND b.BPUDate BETWEEN @DateBegin AND @DateEnd
       AND b.CompanyCode = @CompanyCode 
UNION
SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, CASE
          WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = x.CompanyCode AND SupplierCode = x.SupplierCode) = '2000000'
       THEN
             'R1'
          ELSE
             'R2'
       END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
       ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
        (CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = x.SupplierCode)  = '2000000'
        THEN '' ELSE x.SupplierCode END) AS 'Supplier/CustomerCode', (
       SELECT c.SupplierName
       FROM gnMstSupplier c
       WHERE x.SupplierCode = c.SupplierCode)  AS 'Supplier/CustomerName'
 FROM omMstVehicle a
 INNER JOIN omTrPurchaseReturn b ON b.CompanyCode = a.CompanyCode AND b.ReturnNo = a.POReturnNo AND b.HPPNo = a.HPPNo
 LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = a.CompanyCode AND x.BranchCode = b.BranchCode AND x.BPUNo = a.BPUNo
 WHERE b.ReturnDate BETWEEN @DateBegin AND @DateEnd
       AND a.CompanyCode = @CompanyCode 
UNION
SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, CASE
          WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = x.CompanyCode AND SupplierCode = x.SupplierCode) = '2000000'
       THEN
             'R1'
          ELSE
             'R2'
       END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
       ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, 
       (CASE WHEN charindex('-', a.RefDoNo) = 0 THEN a.RefDONo ELSE  SUBSTRING(a.RefDoNo, 0, charindex('-', a.RefDoNo) ) END) AS DONo,
        (CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = x.SupplierCode)  = '2000000'
        THEN '' ELSE x.SupplierCode END) AS 'Supplier/CustomerCode', (
       SELECT c.SupplierName
       FROM gnMstSupplier c
       WHERE x.SupplierCode = c.SupplierCode)  AS 'Supplier/CustomerName'
  FROM omMstVehicleTemp a
 INNER JOIN omTrPurchaseReturn b ON b.CompanyCode = a.CompanyCode AND b.ReturnNo = a.POReturnNo AND b.HPPNo = a.HPPNo
 LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = a.CompanyCode AND x.BranchCode = b.BranchCode AND x.BPUNo = a.BPUNo
 WHERE b.ReturnDate BETWEEN @DateBegin AND @DateEnd
       AND a.CompanyCode = @CompanyCode 

UNION
SELECT '1'  AS RecordID, b.SODate  AS transactionDate, 
       CASE WHEN b.SalesType = '1' THEN 'S1' ELSE 'S2' END AS transactionType, ''  AS ReasonCode, a.ChassisCode  AS
       ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
       ''  AS 'Supplier/CustomerCode', (
       SELECT c.CustomerName
       FROM gnMstCustomer c
       WHERE b.CustomerCode = c.CustomerCode)  AS 'Supplier/CustomerName'
  FROM omMstVehicle a 
  INNER JOIN omTrSalesSO b
  ON a.CompanyCode = b.CompanyCode
  AND a.SONo = b.SONo
  LEFT JOIN omTrPurchaseBPUDetail y ON a.CompanyCode = y.CompanyCode and a.ChassisCOde = y.ChassisCode AND a.ChassisNo = y.ChassisNo
  LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
  WHERE b.SODate BETWEEN @DateBegin AND @DateEnd  
  AND b.CompanyCode = @CompanyCode 
UNION
SELECT '1'  AS RecordID, b.ReqDate  AS transactionDate, 
CASE WHEN b.StatusFaktur = '1' AND b.SubDealerCode = b.CompanyCode THEN 'F1' ELSE 
(CASE WHEN b.StatusFaktur = '1' AND b.SubDealerCode <> b.CompanyCode THEN 'F2' ELSE 
(CASE WHEN b.StatusFaktur <> '1' AND b.SubDealerCode = b.CompanyCode THEN 'F3' ELSE 'F4' END) END) END
AS transactionType, (SELECT TOP 1 z.ReasonCode
       FROM omTrSalesReqDetail z
       WHERE z.ChassisNo = a.ChassisNo
       AND z.ChassisCode = a.ChassisCode)  AS ReasonCode, a.ChassisCode  AS
       ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
        (CASE WHEN b.SubDealerCode  = a.CompanyCode THEN '' ELSE b.SubDealerCode END) AS 'Supplier/CustomerCode'
       , (
       SELECT c.CustomerName
       FROM gnMstCustomer c
       WHERE b.SubDealerCode = c.CustomerCode)  AS 'Supplier/CustomerName'
   FROM omMstVehicle a
  INNER JOIN omTrSalesReqDetail z ON a.CompanyCode = z.CompanyCode AND a.ChassisCode = z.ChassisCode AND a.ChassisNo = z.ChassisNo
  INNER JOIN omTrSalesReq b	ON b.CompanyCode = z.CompanyCode AND b.BranchCode = z.BranchCode AND b.ReqNo = z.ReqNo
  LEFT JOIN omTrPurchaseBPUDetail y
	ON y.CompanyCode = a.CompanyCode AND y.ChassisCode = a.ChassisCode AND y.ChassisNo = a.ChassisNo
  LEFT JOIN omTrPurchaseBPU x 
	ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
  WHERE b.ReqDate BETWEEN @DateBegin AND @DateEnd
  AND b.CompanyCode = @CompanyCode 
UNION
SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, 'U1'  AS
       transactionType, ''  AS ReasonCode, a.ChassisCode  AS
       ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
	   ''  AS 'Supplier/CustomerCode', (
       SELECT c.CustomerName
       FROM gnMstCustomer c
       WHERE b.CustomerCode = c.CustomerCode)  AS 'Supplier/CustomerName'
  FROM omMstVehicle a
  INNER JOIN omTrSalesReturn b
  ON a.CompanyCode = b.CompanyCode
  AND a.SOReturnNo = b.ReturnNo
LEFT JOIN omTrPurchaseBPUDetail y ON y.CompanyCode = a.CompanyCode AND y.ChassisCode = a.ChassisCode AND y.ChassisNo = a.ChassisNo
LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
  WHERE b.ReturnDate BETWEEN @DateBegin AND @DateEnd
  AND b.CompanyCode = @CompanyCode 
END
GO
--uspfn_SvTrnServiceSaveTask '6006410', '600641001', '4W', 4, 'C', 'PAKET GOM', 0.43, '1', 200000, 0, 'yo'

ALTER procedure [dbo].[uspfn_SvTrnServiceSaveTask]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@BillType varchar(15),
    @OperationNo varchar(50),
    @OperationHour numeric(5,2),
    @UserPrice bit = 0,
    @TaskPrice numeric(18,0) = 0,
    @DiscPct numeric(5,2) = 0,
	@UserID varchar(15)
as      

declare @errmsg varchar(max)

begin try
	-- select data svTrnService
	select * into #srv from (
	  select a.* from svTrnService a
		where 1 = 1
		  and a.CompanyCode = @CompanyCode
		  and a.BranchCode  = @BranchCode
		  and a.ProductType = @ProductType
		  and a.ServiceNo   = @ServiceNo
	)#srv

	-- check jika count svTrnSrvTask ada, maka diupdate
	if(select count(*) from svTrnSrvTask
        where 1 = 1
          and CompanyCode = @CompanyCode
          and BranchCode  = @BranchCode
          and ProductType = @ProductType
          and ServiceNo   = @ServiceNo
          and OperationNo = @OperationNo) = 1
	begin
	    print 'update svTrnSrvTask'
		select 'update svTrnSrvTask'
		-- update svTrnSrvTask
		update svTrnSrvTask set
			   OperationHour  = @OperationHour
			  ,OperationCost  =
					case @UserPrice
					 when 0 then
							isnull((
						   (select LaborPrice from svMstTaskPrice
							 where CompanyCode = @CompanyCode
							   and BranchCode  = @BranchCode
							   and ProductType = (select ProductType from #srv)
							   and BasicModel  = (select BasicModel from #srv)
							   and JobType     = (select JobType from #srv)
							   and OperationNo = @OperationNo)
							),
						   (select LaborPrice from svMstTask
							 where CompanyCode = @CompanyCode
							   and ProductType = (select ProductType from #srv)
							   and BasicModel  = (select BasicModel from #srv)
							   and JobType     = (select JobType from #srv)
							   and OperationNo = @OperationNo)
							)
					 else @TaskPrice
					end	
			  ,BillType       = @BillType
			  ,LastupdateBy   = (select LastupdateBy from #srv)
			  ,LastupdateDate = (select LastupdateDate from #srv)
			  ,DiscPct        = @DiscPct 
		 where 1 = 1
	       and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = (select ProductType from #srv)
		   and ServiceNo   = (select ServiceNo from #srv)
		   and OperationNo = @OperationNo
	end
	else
	begin
		-- select svTrnSrvTask
		-----------------------------------------------
		 print 'insert svTrnSrvTask'
		 select top 1
			 a.CompanyCode
			,a.ProductType
			,a.BasicModel
			,a.JobType
			,a.OperationNo
			,case b.JobType when 'CLAIM' then isnull(c.ClaimHour, a.ClaimHour) else isnull(c.OperationHour, a.OperationHour) end as OperationHour
			,case b.JobType
			   when 'CLAIM' then a.LaborCost
				else (case @UserPrice when 0 then isnull(c.LaborPrice, a.LaborPrice) else @TaskPrice end)
			   end as LaborPrice
			,a.IsSubCon
			,isnull(c.LaborCost, a.LaborCost) LaborCost
			,isnull(c.ClaimHour, a.ClaimHour) ClaimHour
			,a.IsCampaign
			,a.LastUpdateBy
			,a.LastUpdateDate
		  from svMstTask a
		 inner join #srv b
			on b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		  left join svMstTaskPrice c
			on c.CompanyCode = a.CompanyCode
		   and c.BranchCode  = b.BranchCode
		   and c.ProductType = a.ProductType
		   and c.BasicModel  = a.BasicModel
		   and c.JobType     = a.JobType
		   and c.OperationNo = a.OperationNo
		 where 1 = 1
		   and a.OperationNo = @OperationNo
		   and a.JobType in (b.JobType,'CLAIM','OTHER')
		   
		select * into #task from(
		select top 1
			 a.CompanyCode
			,a.ProductType
			,a.BasicModel
			,a.JobType
			,a.OperationNo
			,case b.JobType when 'CLAIM' then isnull(c.ClaimHour, a.ClaimHour) else isnull(c.OperationHour, a.OperationHour) end as OperationHour
			,case b.JobType
			   when 'CLAIM' then a.LaborCost
				else (case @UserPrice when 0 then isnull(c.LaborPrice, a.LaborPrice) else @TaskPrice end)
			   end as LaborPrice
			,a.IsSubCon
			,isnull(c.LaborCost, a.LaborCost) LaborCost
			,isnull(c.ClaimHour, a.ClaimHour) ClaimHour
			,a.IsCampaign
			,a.LastUpdateBy
			,a.LastUpdateDate
		  from svMstTask a
		 inner join #srv b
			on b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		  left join svMstTaskPrice c
			on c.CompanyCode = a.CompanyCode
		   and c.BranchCode  = b.BranchCode
		   and c.ProductType = a.ProductType
		   and c.BasicModel  = a.BasicModel
		   and c.JobType     = a.JobType
		   and c.OperationNo = a.OperationNo
		 where 1 = 1
		   and a.OperationNo = @OperationNo
		   and a.JobType in (b.JobType,'CLAIM','OTHER')
		)#task

		if (select count(*) from #task) <> 1 return

		-- insert svMstJob
		select * into #job from(
		select a.* from svMstJob a, #task b
		 where 1 = 1
		   and a.CompanyCode = b.CompanyCode
		   and a.ProductType = b.ProductType
		   and a.BasicModel  = b.BasicModel
		   and a.JobType     = b.JobType
		)#job

		-- prepare data svTrnSrvTask yg akan di Insert
		if (left(@OperationNo,3) = 'FSC' or left(@OperationNo,3) = 'PDI')
		begin
			insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
			select
				 @CompanyCode CompanyCode
				,@BranchCode BranchCode
				,@ProductType ProductType
				,@ServiceNo ServiceNo
				,a.OperationNo
				,(case @OperationHour when 0 then a.OperationHour else @OperationHour end) OperationHour
				,OperationCost = isnull((select top 1 a.RegularLaborAmount
								   from svMstPdiFscRate a, #srv b, #task c, #job d 
								  where 1 = 1
									and a.CompanyCode = b.CompanyCode
									and a.ProductType = b.ProductType
									and a.BasicModel  = b.BasicModel
									and a.IsCampaign  = c.IsCampaign
									and a.TransmissionType = a.TransmissionType
									and a.PdiFscSeq = d.PdiFscSeq
									and a.EffectiveDate <= getdate()
									and a.IsActive = 1
								 order by a.EffectiveDate desc),0)
				,a.IsSubCon
				,a.LaborCost SubConPrice
				,'' PONo
				,a.ClaimHour
				,'L' TypeOfGoods
				,'F' BillType
				,'0' SharingTask
				,'0' TaskStatus
				,null StartService
				,null FinishService
				,b.LastupdateBy CreatedBy
				,b.LastupdateDate CreatedDate
				,b.LastupdateBy
				,b.LastupdateDate
				,@DiscPct
			from #task a, #srv b
		end
		else
		begin
			insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
			select
				 @CompanyCode CompanyCode
				,@BranchCode BranchCode
				,@ProductType ProductType
				,@ServiceNo ServiceNo
				,a.OperationNo
				,(case @OperationHour when 0 then a.OperationHour else @OperationHour end) OperationHour
			    ,a.LaborPrice as OperationCost
				,a.IsSubCon
				,a.LaborCost SubConPrice
				,'' PONo
				,a.ClaimHour
				,'L' TypeOfGoods
				,@BillType BillType
				,'0' SharingTask
				,'0' TaskStatus
				,null StartService
				,null FinishService
				,b.LastupdateBy CreatedBy
				,b.LastupdateDate CreatedDate
				,b.LastupdateBy
				,b.LastupdateDate
				,@DiscPct
			from #task a, #srv b
		end

		-----------------------------------------------
		-- insert default svTrnSrvItem
		-----------------------------------------------
		select * into #part from(
		select a.* from svMstTaskPart a, #task b
		 where 1 = 1
		   and a.CompanyCode = b.CompanyCode
		   and a.ProductType = b.ProductType
		   and a.BasicModel  = b.BasicModel
		   and a.JobType     = b.JobType
		   and a.OperationNo = b.OperationNo
		)#part

		insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
		select 
			 @CompanyCode CompanyCode
			,@BranchCode BranchCode
			,@ProductType ProductType
			,@ServiceNo ServiceNo
			,a.PartNo
			,(row_number() over (order by a.PartNo)) PartSeq
			,a.Quantity DemandQty
			,'0' SupplyQty
			,'0' ReturnQty
			,c.CostPrice
			,case rtrim(a.BillType) when 'F' then a.RetailPrice else c.RetailPrice end RetailPrice
			,d.TypeOfGoods
			,a.BillType
			,null SupplySlipNo
			,null SupplySlipDate
			,null SSReturnNo
			,null SSReturnDate
			,b.LastupdateBy CreatedBy
			,b.LastupdateDate CreatedDate
			,b.LastupdateBy
			,b.LastupdateDate
			,@DiscPct
		  from #part a
		  left join #task b
			on b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		   and b.JobType     = a.JobType
		   and b.OperationNo = a.OperationNo
		  left join spMstItemPrice c
			on c.CompanyCode = a.CompanyCode
		   and c.BranchCode  = @BranchCode
		   and c.PartNo      = a.PartNo
		  left join spMstItems d
			on d.CompanyCode = a.CompanyCode
		   and d.BranchCode  = @BranchCode
		   and d.PartNo      = a.PartNo
		 where 1 = 1
		   and b.CompanyCode = a.CompanyCode
		   and b.ProductType = a.ProductType
		   and b.BasicModel  = a.BasicModel
		   and b.JobType     = a.JobType
		   and b.OperationNo = a.OperationNo
		   and not exists (
				select 1 from svTrnSrvItem k, svTrnService l
				 where 1 = 1
				   and k.CompanyCode = l.CompanyCode
				   and k.BranchCode  = l.BranchCode
				   and k.ProductType = l.ProductType
				   and k.ServiceNo   = l.ServiceNo
				   and k.ServiceNo   = @ServiceNo
				   and k.PartNo      = a.PartNo
				)

		drop table #task
		drop table #part
		drop table #job
		end
	drop table #srv
end try
begin catch
	set @errmsg = error_message()
	raiserror (@errmsg,16,1);
end catch
GO
ALTER PROCEDURE [dbo].[usprpt_SpRpSum020] 
	@CompanyCode VARCHAR(15),
	@Month	INT,
	@Year INT,
	@TypeOfGoods VARCHAR(1)
	
AS
BEGIN

--usprpt_SpRpSum020 '6120201',6,2014,'0'
--
--DECLARE @CompanyCode VARCHAR(15)
--DECLARE @Month INT
--DECLARE @YEAR INT
--DECLARE @TypeOfGoods VARCHAR(15)
--declare @branchcode varchar(15)

--SET @CompanyCode = '6120201' 
--set @branchcode = '612020101' 
--SET	@Month = 6
--SET @YEAR = 2014
--SET @TypeOfGoods = '0'

SELECT * INTO #t1 FROM(
SELECT     
    a.CompanyCode  
  , a.BranchCode
  , ISNULL(SUM(b.SalesAmt), 0) PenjualanBruttoSales  
  , ISNULL(SUM(b.DiscAmt), 0) DiscountPenjualanSales   
  , ISNULL(SUM(b.NetSalesAmt), 0) PenjualanNettoSales 
  , ISNULL(SUM(b.CostPrice * b.QtyBill), 0) AS HPPBiayaSales 
  , ISNULL((SUM(b.NetSalesAmt) - SUM(b.CostPrice * b.QtyBill)), 0) LabaRugiSales 
 FROM SpTrnSFPJHdr a 
  LEFT JOIN SpTrnSFPJDtl b ON 
	a.CompanyCode = b.CompanyCode   
   AND a.BranchCode = b.BranchCode   
   AND a.FPJNo = b.FPJNo  
 WHERE  
	a.CompanyCode = @CompanyCode
	AND (MONTH(a.FPJDate) = @Month AND YEAR(a.FPJDate) = @YEAR)
	AND (CASE WHEN @TypeOfGoods <> '' THEN a.TypeOfGoods ELSE @TypeOfGoods END) = @TypeOfGoods 
GROUP BY 
	a.CompanyCode
    , a.BranchCode
) #t1

SELECT * INTO #t2 FROM(
SELECT     
   a.CompanyCode  
  , a.BranchCode
  , ISNULL(SUM(b.SalesAmt), 0) PenjualanBruttoSrv  
  , ISNULL(SUM(b.DiscAmt), 0) DiscountPenjualanSrv   
  , ISNULL(SUM(b.NetSalesAmt), 0) PenjualanNettoSrv 
  , ISNULL(SUM(b.CostPrice * b.QtyBill), 0) AS HPPBiayaSrv 
  , ISNULL((SUM(b.NetSalesAmt) - SUM(b.CostPrice * b.QtyBill)), 0) LabaRugiSrv 
 FROM spTrnSLmpHdr a 
  LEFT JOIN spTrnSLmpDtl b ON 
	a.CompanyCode = b.CompanyCode   
   AND a.BranchCode = b.BranchCode   
   AND a.LmpNo = b.LmpNo    
 WHERE  
	a.CompanyCode = @CompanyCode
	AND (MONTH(a.LmpDate) = @Month AND YEAR(a.LmpDate) = @Year)
	AND (CASE WHEN @TypeOfGoods <> '' THEN a.TypeOfGoods ELSE @TypeOfGoods END) = @TypeOfGoods 
GROUP BY 
	a.CompanyCode
    , a.BranchCode
) #t2
ORDER BY BranchCode ASC  

--select * from #t1 where BranchCode=@branchcode
--select * from #t2 where BranchCode=@branchcode
SELECT 
	row_number() over (order by org.BranchCode) No
	, BranchName
	, ISNULL(#t1.PenjualanBruttoSales, 0) PenjualanBruttoSales
	, ISNULL(#t1.DiscountPenjualanSales, 0) DiscountPenjualanSales
	, ISNULL(#t1.PenjualanNettoSales, 0) PenjualanNettoSales
	, ISNULL(#t1.HPPBiayaSales, 0) HPPBiayaSales
	, ISNULL(#t1.LabaRugiSales, 0) LabaRugiSales
	, ISNULL(#t2.PenjualanBruttoSrv, 0) PenjualanBruttoSrv
	, ISNULL(#t2.DiscountPenjualanSrv, 0) DiscountPenjualanSrv
	, ISNULL(#t2.PenjualanNettoSrv, 0) PenjualanNettoSrv
	, ISNULL(#t2.HPPBiayaSrv, 0) HPPBiayaSrv
	, ISNULL(#t2.LabaRugiSrv, 0) LabaRugiSrv
	--, ISNULL(#t1.PenjualanBruttoSales + #t2.PenjualanBruttoSrv, 0) TotPenjualanBrutto
	, ISNULL(#t1.PenjualanBruttoSales,0) + isnull(#t2.PenjualanBruttoSrv, 0) TotPenjualanBrutto
	--, ISNULL(#t1.DiscountPenjualanSales + #t2.DiscountPenjualanSrv, 0) TotDiscountPenjualan
	, ISNULL(#t1.DiscountPenjualanSales,0) + isnull(#t2.DiscountPenjualanSrv, 0) TotDiscountPenjualan
	--, ISNULL(#t1.PenjualanNettoSales + #t2.PenjualanNettoSrv, 0) TotPenjualanNetto
	, ISNULL(#t1.PenjualanNettoSales,0) + isnull(#t2.PenjualanNettoSrv, 0) TotPenjualanNetto
	--, ISNULL(#t1.HPPBiayaSales + #t2.HPPBiayaSrv, 0) TotHPPBiaya
	, ISNULL(#t1.HPPBiayaSales,0) + isnull(#t2.HPPBiayaSrv, 0) TotHPPBiaya
	--, ISNULL(#t1.LabaRugiSales + #t2.LabaRugiSrv, 0) TotLabaRugi
	, ISNULL(#t1.LabaRugiSales,0) + isnull(#t2.LabaRugiSrv, 0) TotLabaRugi
		
FROM gnMstOrganizationDtl org
	LEFT JOIN #t1 
		ON #t1.CompanyCode = org.CompanyCode
		AND #t1.BranchCode = org.BranchCode
	LEFT JOIN #t2 
		ON #t2.CompanyCode = org.CompanyCode
		AND #t2.BranchCode = org.BranchCode

DROP TABLE #t1
DROP TABLE #t2

END

--usprpt_SpRpSum020 '6114201', 11, 2010, ''
GO
ALTER procedure [dbo].[uspfn_sfEmpTrendMutationDealer]      
 @CompanyCode  varchar(20) = '%',      
 @BranchCode   varchar(20) = '%',      
 @pYear        char(4),    
 @poscode    varchar(2)    
as      
      
--declare @CompanyCode varchar(20), @BranchCode varchar(20), @pYear char(4)      
--select @CompanyCode = '%', @BranchCode = '%', @pYear = '2013'      
--uspfn_sfEmpMutationTrend default, default, '2013'      
      
select a.CompanyCode, b.CompanyName, a.BranchCode, a.BranchName   
 , CurrEmpl = 0     
     , EmpJan = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '01' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)        
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '01' + '99'      
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpFeb = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '02' + '99'     
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '02' + '99'     
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpMar = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '03' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'     
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '03' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpApr = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '04' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '04' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpMay = isnull((      
        select count(*) from SfHistEmplMutation m     
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '05' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '05' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpJun = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '06' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '06' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpJul = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '07' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '07' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpAug = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '08' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '08' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpSep = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '09' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '09' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpOct = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '10' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '10' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpNov = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '11' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '11' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)      
     , EmpDec = isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'IN'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '12' + '99'    
               
           and not exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.BranchCode = BranchCode and m.EmployeeID = EmployeeID and MutaCode = 'INACTIVE' and isnull(IsDeleted, 0) = 0)       
       ), 0)      
       - isnull((      
        select count(*) from SfHistEmplMutation m    
         where m.CompanyCode = a.CompanyCode      
           and m.BranchCode = a.BranchCode      
           and m.DeptCode = 'SALES'      
           and m.PosCode like @poscode    
           and m.MutaType = 'OUT'      
           and isnull(m.IsDeleted, 0) = 0    
           and convert(varchar, m.MutaDate, 112) <= @pYear + '12' + '99'    
               
           and exists (select 1 from SfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')      
       ), 0)          
  from GnMstOrganizationDtl a      
  left join GnMstOrganizationHdr b on b.CompanyCode = a.CompanyCode      
 where a.CompanyCode like @CompanyCode      
   and a.BranchCode like @BranchCode      
 order by a.BranchCode
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<LAMPIRAN DOKUMEN NON PENJUALAN>
-- =============================================

ALTER procedure [dbo].[usprpt_SpRpTrn028]
   @CompanyCode AS varchar (15),
   @BranchCode AS varchar (15),
   @SalesType AS varchar (1),
   @LmpNoStart AS varchar (15),
   @LmpNoEnd AS varchar (15),
   @ProfitCenter AS varchar (15),
   @TypeOfGoods AS varchar (15),
   @SeqNo AS int
AS

-- usprpt_SpRpTrn028 '6159401','615940100','2','LMP/11/003511','LMP/11/003511','300', '%'
-- usprpt_SpRpTrn028 '6115202','611520207','1','LMP/12/000807','LMP/12/000807','300','0','1'

   BEGIN
      SELECT --DISTINCT
             0  AS Nomor, LmpHdr.LmpNo, LmpHdr.CustomerCode, Cust.CustomerName, Cust.NPWPNo
             , (CASE Cust.isPKP WHEN 0 THEN 'No' ELSE 'Yes' END) AS PKP
			 , SORDHdr.UsageDocNo AS SKPNo, SORDHdr.UsageDocDate AS SKPDate
			 , SORDHdr.DocNo, SORDHdr.DocDate, LmpDtl.PartNo, ItemInfo.PartName, LmpDtl.QtyBill
			 , CASE WHEN LmpHdr.TransType = '10' 
                    THEN LmpDtl.CostPrice 
                    ELSE LmpDtl.RetailPrice 
               END RetailPrice
			 , LmpDtl.DiscPct, LmpDtl.DiscAmt
			 , CASE WHEN LmpHdr.TransType = '10' 
                    THEN LmpDtl.CostPrice * LmpDtl.QtyBill 
                    ELSE LmpDtl.NetSalesAmt 
               END NetSalesAmt
			 , BPSFHdr.SalesType
			 , CASE WHEN LmpHdr.TransType = '10' 
                    THEN ISNULL((SELECT SUM(QtyBill * CostPrice) FROM SpTrnSLmpDtl 
                                  WHERE CompanyCode = LmpHdr.CompanyCode 
                                    AND BranchCode = LmpHdr.BranchCode 
                                    AND LmpNo = LmpHdr.LmpNo),0)
			        ELSE LmpHdr.TotDPPAmt
			   END TotDPPAmt
			 , LmpHdr.TotPPNAmt
             , CASE WHEN LmpHdr.TransType = '10' 
                    THEN ISNULL((SELECT SUM(QtyBill * CostPrice) FROM SpTrnSLmpDtl 
                                  WHERE CompanyCode = LmpHdr.CompanyCode 
                                    AND BranchCode = LmpHdr.BranchCode 
                                    AND LmpNo = LmpHdr.LmpNo),0)
			        ELSE LmpHdr.TotFinalSalesAmt  
			   END TotFinalSalesAmt
			 , (SELECT isnull
                ( (SELECT lookupvaluename name FROM gnmstlookupdtl
                    WHERE CompanyCode=@CompanyCode
                      AND codeid = 'CITY'
                      AND lookupvalue = gnmstcoprofile.citycode), '')  AS city
                  FROM gnmstcoprofile
                 WHERE companycode = @CompanyCode
                   AND branchcode = @BranchCode) AS city
             , getdate ()  AS date, UPPER(mstSign.SignName) SignName, UPPER(mstSign.TitleSign) TitleSign
        FROM spTrnSLmpDtl LmpDtl
            INNER JOIN spTrnSLmpHdr LmpHdr
               ON LmpHdr.CompanyCode = LmpDtl.CompanyCode
              AND LmpHdr.BranchCode = LmpDtl.BranchCode
              AND LmpHdr.LmpNo = LmpDtl.LmpNo
            INNER JOIN gnMstCustomer Cust
               ON Cust.CompanyCode = LmpDtl.CompanyCode
              AND Cust.CustomerCode = LmpHdr.CustomerCode
            INNER JOIN spTrnSBPSFDtl BPSFDtl
               ON BPSFDtl.CompanyCode = LmpDtl.CompanyCode
              AND BPSFDtl.BranchCode = LmpDtl.BranchCode
              AND BPSFDtl.BPSFNo = LmpHdr.BPSFNo
              AND BPSFDtl.WarehouseCode = LmpDtl.WarehouseCode
              AND BPSFDtl.PartNo = LmpDtl.PartNo
              AND BPSFDtl.PartNoOriginal = LmpDtl.PartNoOriginal
              AND BPSFDtl.DocNo = LmpDtl.DocNo
            INNER JOIN spTrnSBPSFHdr BPSFHdr
               ON BPSFHdr.CompanyCode = LmpDtl.CompanyCode
              AND BPSFHdr.BranchCode = LmpDtl.BranchCode
              AND BPSFHdr.BPSFNo = BPSFDtl.BPSFNo
            INNER JOIN spTrnSORDHdr SORDHdr
               ON SORDHdr.CompanyCode = LmpDtl.CompanyCode
              AND SORDHdr.BranchCode = LmpDtl.BranchCode
              AND SORDHdr.DocNo = LmpDtl.DocNo
            INNER JOIN spMstItemInfo ItemInfo
               ON ItemInfo.CompanyCode = LmpDtl.CompanyCode
              AND ItemInfo.PartNo = LmpDtl.PartNo
            INNER JOIN gnMstSignature mstSign
               ON LmpHdr.CompanyCode = mstSign.CompanyCode
              AND LmpHdr.BranchCode = mstSign.BranchCode
              AND mstSign.ProfitCenterCode = @ProfitCenter
              AND mstSign.DocumentType = convert(varchar(3),LmpHdr.LmpNo)
              AND mstSign.SeqNo = @SeqNo
       WHERE LmpDtl.CompanyCode = @CompanyCode
         AND LmpDtl.BranchCode = @BranchCode
         AND LmpDtl.LmpNo BETWEEN @LmpNoStart AND @LmpNoEnd
		 AND LmpHdr.TypeOfGoods LIKE @TypeOfGoods
         AND BPSFHdr.SalesType = @SalesType
   END
GO
ALTER procedure [dbo].[usprpt_SvRpReport021V3]
--declare
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15), 
	@PeriodYear  int,
	@Month1      int = 1,
	@Month2      int,
	@UserID      varchar(20)
as

--select @CompanyCode=N'6026401',@BranchCode=N'602640100',@ProductType=N'4W',@PeriodYear=2012,@Month2=1,@UserID=N'ga'

set nocount on

if @Month1 > @Month2 set @Month1 = @Month2

-- A. Sales Revenue (SR)
declare @A_01 numeric(18, 4) -- Total Labor Sales Revenue ( 2 + 3 + 4 )
declare @A_02 numeric(18, 4) --   Labor Sales - Chargeable to Customer CPUS (External)
declare @A_03 numeric(18, 4) --   Labor Sales - Non Chargeable (Warranty, FS1, FS2, FS3, FS4, FS5, FS6, FS7)
declare @A_04 numeric(18, 4) --   Labor Sales - Non Chargeable (Internal, PDI)
declare @A_05 numeric(18, 4) -- Total Parts Sales Revenue ( 6 + 7 + 8 )
declare @A_06 numeric(18, 4) --   Parts Sales - Chargeable to Customer CPUS (External)
declare @A_07 numeric(18, 4) --   Parts Sales - Non Chargeable (Warranty, FS1)
declare @A_08 numeric(18, 4) --   Parts Sales - Non Chargeable (Internal, PDI)
declare @A_09 numeric(18, 4) -- Total Counter Parts Sales Revenue
declare @A_10 numeric(18, 4) -- Total Lubricant Sales Revenue ( 11 + 12 + 13 )  
declare @A_11 numeric(18, 4) --   Lubricant Sales - Chargeable to Customer CPUS (External)
declare @A_12 numeric(18, 4) --   Lubricant Sales - Non Chargeable (Warranty, FS1)
declare @A_13 numeric(18, 4) --   Lubricant Sales - Non Chargeable (Internal, PDI)
declare @A_14 numeric(18, 4) -- Total Sublet Sales Revenue
declare @A_15 numeric(18, 4) -- Total Service Sales Revenue ( 16 + 17 + 18 )    
declare @A_16 numeric(18, 4) --   Service Sales - Chargeable to Customer CPUS (External)
declare @A_17 numeric(18, 4) --   Service Sales - Non Chargeable (Warranty, FS1)
declare @A_18 numeric(18, 4) --   Service Sales - Non Chargeable (Internal, PDI)
declare @A_19 numeric(18, 4) -- Hours Sold  
declare @A_20 numeric(18, 4) -- Total Available Hours  
declare @A_21 numeric(18, 4) -- Hours Sold / Available Hours  
declare @A_22 numeric(18, 4) -- Service Revenue Targer Per Unit (Based on RKA) 
declare @A_23 numeric(18, 4) -- Service Revenue per Unit exclude PDI (CPUS, Warranty, FS1) ((16 + 17) / 29)
declare @A_24 numeric(18, 4) -- Labour  Sales Turnover / Productive staff (Technician & Foreman)  (1 / 57)
declare @A_25 numeric(18, 4) -- Labour Sales Turnover / Service Advisors (1 / 55)
declare @A_26 numeric(18, 4) -- Labour Sales Turnover / Stall (1 / 52)
declare @A_27 numeric(18, 4) -- Absorption Rate
-- B. No of Unit Intake
declare @B_28 numeric(18, 4) -- Unit Entry Target
declare @B_29 numeric(18, 4) -- No of Work Order ( 30 + 31 )
declare @B_30 numeric(18, 4) -- Passenger Car
declare @B_31 numeric(18, 4) -- Commercial Vehicle 
declare @B_32 numeric(18, 4) -- PDI
-- C. No of JobType
declare @C_33 numeric(18, 4) -- Chargeable /  Customer Paid Unit Service (CPUS) (34 + 38 + 42 + 43)
declare @C_34 numeric(18, 4) --   Periodical Maintenance under Warranty Period (= 100,000 km / = 3 Years) (sum of 35 to 37)
declare @C_35 numeric(18, 4) --     10,000*; 30,000; 50,000; 70,000; & 90,000 km
declare @C_36 numeric(18, 4) --     20,000*; 60,000 & 100,000 km
declare @C_37 numeric(18, 4) --     40,000 & 80,000 km 
declare @C_38 numeric(18, 4) --   Periodical Maintenance out of Warranty Period (> 100,000 km / >3 years) (sum of 39 to 41)
declare @C_39 numeric(18, 4) --     +10,000; +30,000; +50,000; +70,000; & +90,000 km
declare @C_40 numeric(18, 4) --     +20,000; +60,000 & +100,000 km
declare @C_41 numeric(18, 4) --     +40,000 & +80,000 km
declare @C_42 numeric(18, 4) --   5,000 km multiplier & above
declare @C_43 numeric(18, 4) --   G/R Non Periodical Maintenance and Others
declare @C_44 numeric(18, 4) -- No. of Free Service (FS 1, FS 2, and FS 3) (sum of 45 to 47)
declare @C_45 numeric(18, 4) --   KSG  1,000 km
declare @C_46 numeric(18, 4) --   KSG  5,000 km
declare @C_47 numeric(18, 4) --   KSG 10,000 km
declare @C_48 numeric(18, 4) --   KSG 20,000 km
declare @C_53 numeric(18, 4) --   KSG 30,000 km
declare @C_54 numeric(18, 4) --   KSG 40,000 km
declare @C_55 numeric(18, 4) --   KSG 50,000 km
declare @C_49 numeric(18, 4) -- Non-chargeable Repair (Warranty, Repeated Job, PDI) (Sum of 49 to 51)
declare @C_50 numeric(18, 4) --   No. of Warranty Repair
declare @C_51 numeric(18, 4) --   Repeat Job (Rework)
declare @C_52 numeric(18, 4) --   No. of PDI intake
-- D. Workshop Service Strength
declare @D_53 numeric(18, 4) -- No. of Working Stalls ( Available stalls Exclude Inspection Stall and Washing Stall)
declare @D_54 numeric(18, 4) -- Total No. of Staff (54 + 55 + 56 + 57 + 60 + 61)
declare @D_55 numeric(18, 4) --   No. of Admin & Support Staff
declare @D_56 numeric(18, 4) --   No. of Service Relation Officer (SRO)
declare @D_57 numeric(18, 4) --   No. of Service Advisors
declare @D_58 numeric(18, 4) --   No. of Productive Staff (58 + 59)
declare @D_59 numeric(18, 4) --     No. of Foreman
declare @D_60 numeric(18, 4) --     No. of Technician
declare @D_61 numeric(18, 4) --   No. of PDI Staff
declare @D_62 numeric(18, 4) --   No. of Part Staff
-- E. Productivity Indicator
declare @E_01 numeric(18, 4)
declare @E_02 numeric(18, 4)
declare @E_03 numeric(18, 4)
declare @E_04 numeric(18, 4)
declare @E_05 numeric(18, 4)
declare @E_06 numeric(18, 4)
declare @E_07 numeric(18, 4)
declare @E_08 numeric(18, 4)
declare @E_09 numeric(18, 4)
-- F. Activity
declare @F_72 numeric(18, 4)
declare @F_73 numeric(18, 4)
declare @F_74 numeric(18, 4)
declare @F_75 numeric(18, 4)
declare @F_76 numeric(18, 4)
declare @F_77 numeric(18, 4)
declare @F_78 numeric(18, 4)
declare @F_79 numeric(18, 4)
-- G. 
declare @G_01 numeric(18, 4)
declare @G_02 numeric(18, 4)
declare @G_03 numeric(18, 4)
declare @G_04 numeric(18, 4)
declare @G_05 numeric(18, 4)
declare @G_06 numeric(18, 4)
declare @G_07 numeric(18, 4)
declare @G_08 numeric(18, 4)
declare @G_09 numeric(18, 4)
declare @G_10 numeric(18, 4)
declare @G_11 numeric(18, 4)
declare @G_12 numeric(18, 4)

-- declare table msi data
declare @t_msidat as table
(
	MsiGrCode varchar(10),
	MsiCode   varchar(10),
	MsiMonth  int,
	MsiData   numeric(18, 4) 
)

-- declare table msi group
declare @t_msigrp as table
(
	MsiGroup  varchar(max),
	MsiGrDesc varchar(max)
)

declare @Month0 int set @Month0 = @Month1

while @Month0 <= @Month2
begin
	if exists (
		select * from SvHstSzkMSI
		 where CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and PeriodYear = @PeriodYear
		   and PeriodMonth = @Month0
		   and PeriodMonth < @Month2) 
	begin
		set @Month0 = @Month0 + 1
		continue
	end			   

	-- A. Calculate Sales Revenue
	-- Labor Sales Revenue @A_01 -> @P_04
	declare @t_inv_tsk as table
	(
		InvoiceNo varchar(20),
		HourSold  numeric(18,2),  
		LbrDppAmt numeric(18,0),
		IsSubCon  bit,
		JobType   varchar(20),
		KsgType   varchar(20)  
	)
   	
	insert into @t_inv_tsk
	select a.InvoiceNo, b.OperationHour
		 , ceiling(b.OperationHour * b.OperationCost * (100.0 - b.DiscPct) * 0.01) LbrDppAmt
		 , IsSubCon = isnull((
						  select top 1 IsSubCon from svMstTask
						   where CompanyCode = a.CompanyCode
							 and BasicModel = a.BasicModel
							 and OperationNo = b.OperationNo
						  ), 0)
		 , a.JobType		
		 , case 
			  when (c.JobType like 'FS%' and c.GroupJobType = 'FSC' and c.WarrantyOdometer = 1000)  then 'FSC01'
			  when (c.JobType like 'FS%' and c.GroupJobType = 'FSC' and c.WarrantyOdometer = 5000)  then 'FSC02'
			  when (c.JobType like 'FS%' and c.GroupJobType = 'FSC' and c.WarrantyOdometer = 10000) then 'FSC03'
			  when (c.JobType like 'FS%' and c.GroupJobType = 'FSC' and c.WarrantyOdometer = 20000) then 'FSC04'
			  when (c.JobType like 'FS%' and c.GroupJobType = 'FSC' and c.WarrantyOdometer = 30000) then 'FSC05'
			  when (c.JobType like 'FS%' and c.GroupJobType = 'FSC' and c.WarrantyOdometer = 40000) then 'FSC06'
			  when (c.JobType like 'FS%' and c.GroupJobType = 'FSC' and c.WarrantyOdometer = 50000) then 'FSC07'
			  else ''
		   end as KsgType
	  from svTrnInvoice a
	 inner join svTrnInvTask b
		on b.CompanyCode = a.CompanyCode
	   and b.BranchCode = a.BranchCode
	   and b.InvoiceNo = a.InvoiceNo
	  left join svMstJob c
		on c.CompanyCode = a.CompanyCode
	   and c.BasicModel = a.BasicModel
	   and c.JobType = a.JobType
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and Year(a.Invoicedate) = @PeriodYear
	   and Month(a.Invoicedate) = @Month0
	   and a.JobType != 'REWORK'

	set @A_01 = ISNULL((select sum(LbrDppAmt) from @t_inv_tsk where IsSubCon = 0),0)
	-- CLAIM & FSC
	set @A_03 = ISNULL((select sum(LbrDppAmt) from @t_inv_tsk where IsSubCon = 0 and (substring(InvoiceNo, 1 ,3) = 'INW' or substring(InvoiceNo, 1 ,3) = 'INF' and JobType != 'PDI')),0)
	-- INTERNAL & PDI
	set @A_04 = ISNULL((select sum(LbrDppAmt) from @t_inv_tsk where IsSubCon = 0 and (substring(InvoiceNo, 1 ,3) = 'INI' or substring(InvoiceNo, 1 ,3) = 'INF' and JobType = 'PDI')), 0)
	-- CPUS
	set @A_02 = @A_01 - (@A_03 + @A_04)
	
	-- Part Sales Revenue @P_06 -> @P_13 ex @P_09
	declare @t_inv_itm as table
	(
		InvoiceNo  varchar(20),
		GroupTpgo  varchar(50), 
		IsSublet   varchar(10),
		GroupJob   varchar(50),
		SprAmt     numeric(18,0)
	)	
	insert into @t_inv_itm
	select a.InvoiceNo
		 , c.ParaValue as GroupTpgo
		 , case when TypeofGoods in ('0', '1') then '0' else '1' end IsSublet
		 , case 
			 when left(a.InvoiceNo, 3) = 'INI' or a.JobType = 'PDI' then 'INT,PDI'
			 when left(a.InvoiceNo, 3) = 'INW' or left(a.InvoiceNo, 3) = 'INF' then 'CLM,FSC'
			 else 'CPUS'
		   end GroupJob
		 , (ceiling((b.SupplyQty - b.ReturnQty) * b.RetailPrice * (100.0 - b.DiscPct) * 0.01)) SprAmt
	  from svTrnInvoice a
	 inner join svTrnInvItem b
		on b.CompanyCode = a.CompanyCode
	   and b.BranchCode = a.BranchCode
	   and b.InvoiceNo = a.InvoiceNo
	  left join gnMstLookupDtl c
		on c.CompanyCode = a.CompanyCode
	   and c.CodeID = 'GTGO'
	   and c.LookupValue = b.TypeOfGoods
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and Year(a.Invoicedate) = @PeriodYear
	   and Month(a.Invoicedate) = @Month0
	   and a.JobType != 'REWORK'

	set @A_05 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo = 'SPAREPART'), 0)
	set @A_06 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo = 'SPAREPART' and GroupJob = 'CPUS'), 0)
	set @A_07 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo = 'SPAREPART' and GroupJob = 'CLM,FSC'), 0)
	set @A_08 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo = 'SPAREPART' and GroupJob = 'INT,PDI'), 0)
	set @A_09 = isnull((
	            select sum(TotDppAmt)
	              from spTrnSFPJHdr
	             where 1 = 1
	               and CompanyCode = @CompanyCode
	               and BranchCode = @BranchCode
	               and year(FPJDate) = @PeriodYear
	               and month(FPJDate) = @Month0
	               and TypeOfGoods = 0
	             ), 0)
	set @A_10 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo != 'SPAREPART'), 0)
	set @A_11 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo != 'SPAREPART' and GroupJob = 'CPUS'), 0)
	set @A_12 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo != 'SPAREPART' and GroupJob = 'CLM,FSC'), 0)
	set @A_13 = isnull((select sum(SprAmt) from @t_inv_itm where IsSublet = 0 and GroupTpgo != 'SPAREPART' and GroupJob = 'INT,PDI'), 0)

	-- Sublet --> Subcon Task + Part Non SGP & Part Non SGO
	set @A_14 = isnull((select sum(isnull(LbrDppAmt, 0)) from @t_inv_tsk where IsSubCon = 1), 0) + isnull((select sum(isnull(SprAmt, 0)) from @t_inv_itm where IsSublet = 1), 0)
	
	set @A_16 = @A_02 + @A_06 + @A_11 + @A_14
	set @A_17 = @A_03 + @A_07 + @A_12
	set @A_18 = @A_04 + @A_08 + @A_13
	set @A_15 = @A_16 + @A_17 + @A_18
	
	set @A_19 = (select sum(HourSold) from @t_inv_tsk where IsSubCon = 0)
	set @A_20 = isnull((select sum(a.WorkingHours)
						  from gnMstAbsence a
						 where 1 = 1
						   and a.CompanyCode=@CompanyCode
						   and a.BranchCode=@BranchCode
						   and Year(a.WorkingDate)=@PeriodYear
						   and Month(a.WorkingDate)=@Month0  
						   and exists (
						      select * from gnMstEmployee 
						       where CompanyCode = a.CompanyCode
						         and BranchCode = a.BranchCode
						         and EmployeeID = a.EmployeeID
						         and TitleCode = '9'
						   ) 
						 ),0)
	set @A_21 = (case isnull(@A_20, 0) when 0 then 0 else 1.0 * isnull(@A_19, 0)/ @A_20 end) * 100.0
	set @A_22 = isnull((
						select ServiceAmount
						  from svMstTarget
						 where CompanyCode=@CompanyCode
						   and BranchCode=@BranchCode
						   and ProductType=@ProductType
						   and PeriodYear=@PeriodYear
						   and PeriodMonth=@Month0
						 ),0)
						 
	-- B. No of Unit Intake					 
	set @B_28 = isnull((
						select TotalUnitService
						  from svMstTarget
						 where CompanyCode=@CompanyCode
						   and BranchCode=@BranchCode
						   and ProductType=@ProductType
						   and PeriodYear=@PeriodYear
						   and PeriodMonth=@Month0
						 ),0)
						 
	declare @t_inv_unit as table
	(
		CompanyCode  varchar(20),
		BasicModel   varchar(50), 
		Unit         varchar(50),
		InvoiceDate  varchar(50),
		JmlInvoice   int,
		GroupType    varchar(20)
	)	
	insert into @t_inv_unit
	select x.*, case y.IsLocked when 0 then 'P' else 'C' end as GroupType 
	  from (
			select a.CompanyCode, a.BasicModel
				 , a.ChassisCode + convert(varchar, a.ChassisNo) Unit
				 , convert(varchar, a.JobOrderDate, 112) JobOrderDate
				 , count(a.InvoiceNo) JmlInvoice
			  from svTrnInvoice a
			 where a.CompanyCode = @CompanyCode
			   and a.BranchCode = @BranchCode
			   and year(a.InvoiceDate) = @PeriodYear
			   and month(a.InvoiceDate) = @Month0
			   and a.JobType != 'REWORK'
			 group by a.CompanyCode, a.BasicModel, a.ChassisCode, a.ChassisNo, convert(varchar, a.JobOrderDate, 112)
			)x
	  left join svMstRefferenceService y
		on y.CompanyCode = x.CompanyCode
	   and y.RefferenceType = 'BASMODEL'
	   and y.RefferenceCode = x.BasicModel

	declare @t_inv_unit_pdi as table
	(
		CompanyCode  varchar(20),
		BasicModel   varchar(50), 
		Unit         varchar(50),
		InvoiceDate  varchar(50),
		JmlInvoice   int,
		GroupType    varchar(20)
	)	
	insert into @t_inv_unit_pdi
	select x.*, case y.IsLocked when 0 then 'P' else 'C' end as GroupType 
	  from (
			select a.CompanyCode, a.BasicModel
				 , a.ChassisCode + convert(varchar, a.ChassisNo) Unit
				 , convert(varchar, a.JobOrderDate, 112) JobOrderDate
				 , count(a.InvoiceNo) JmlInvoice
			  from svTrnInvoice a
			 where a.CompanyCode = @CompanyCode
			   and a.BranchCode = @BranchCode
			   and a.JobType = 'PDI'
			   and year(a.InvoiceDate) = @PeriodYear
			   and month(a.InvoiceDate) = @Month0
			 group by a.CompanyCode, a.BasicModel, a.ChassisCode, a.ChassisNo, convert(varchar, a.JobOrderDate, 112)
			)x
	  left join svMstRefferenceService y
		on y.CompanyCode = x.CompanyCode
	   and y.RefferenceType = 'BASMODEL'
	   and y.RefferenceCode = x.BasicModel

	declare @t_inv_unit_exc as table
	(
		CompanyCode  varchar(20),
		BasicModel   varchar(50), 
		Unit         varchar(50),
		InvoiceDate  varchar(50),
		JmlInvoice   int,
		GroupType    varchar(20)
	)	

	insert into @t_inv_unit_exc
	select a.* from @t_inv_unit a
	 where not exists (
		select * from @t_inv_unit_pdi
		 where CompanyCode = a.CompanyCode
		   and Unit = a.Unit
		   and InvoiceDate = a.InvoiceDate
		   
	 )


	set @B_29 = (select count(*) from @t_inv_unit_exc)
	set @B_30 = (select count(*) from @t_inv_unit_exc where GroupType = 'P')
	set @B_31 = (select count(*) from @t_inv_unit_exc where GroupType = 'C')
	set @B_32 = (select count(*) from @t_inv_unit_pdi)
					
	-- C. No of JobType
	declare @t_inv_job as table
	(
		JobType      varchar(20),
		ChassisCode  varchar(20),
		ChassisNo    varchar(20), 
		JobOrderDate varchar(20)
	)
	
	insert into @t_inv_job
	select JobType, ChassisCode, ChassisNo, convert(varchar, JobOrderDate, 112) JobOrderDate
	  from svTrnInvoice
	 where 1 = 1
	   and BranchCode = @BranchCode
	   and year(InvoiceDate) = @PeriodYear
	   and month(InvoiceDate) = @Month0
	   and JobType != 'REWORK'
	 group by ChassisCode, ChassisNo, JobType, convert(varchar, JobOrderDate, 112)
	 
	-- RTN Unit
	declare @t_unit_rtn as table
	(
		InvoiceDate  varchar(20),
		ChassisCode  varchar(50), 
		ChassisNo    varchar(50),
		GroupJobType varchar(50),
		JobType      varchar(50),
		Odometer     numeric(10)
	)	
	insert into @t_unit_rtn
	select distinct convert(varchar, a.InvoiceDate, 112) InvoiceDate
		 , a.ChassisCode, convert(varchar, a.ChassisNo) ChassisNo
		 , b.GroupJobType, a.JobType
		 , b.WarrantyOdometer as Odometer
	  from svTrnInvoice a
	 inner join svMstJob b
		on b.CompanyCode = a.CompanyCode
	   and b.ProductType = a.ProductType
	   and b.BasicModel = a.BasicModel
	   and b.JobType = a.JobType
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and year(a.InvoiceDate) = @PeriodYear
	   and month(a.InvoiceDate) = @Month0
	   and b.GroupJobType = 'RTN'
	   and not exists (
		select 1 from svTrnInvoice
		 where 1 = 1
		   and CompanyCode = a.CompanyCode
		   and BranchCode = a.BranchCode
		   and ChassisCode = a.ChassisCode
		   and ChassisNo = a.ChassisNo
		   and convert(varchar, InvoiceDate, 112) = convert(varchar, a.InvoiceDate, 112)
		   and (JobType = 'PDI' or JobType like 'FS%')
	   )
		 
   
	set @C_35 = (select count(*) from @t_unit_rtn where Odometer in (10000,30000,50000,70000,90000))
	set @C_36 = (select count(*) from @t_unit_rtn where Odometer in (20000,60000,100000))
	set @C_37 = (select count(*) from @t_unit_rtn where Odometer in (40000,80000))
	set @C_34 = @C_35 + @C_36 + @C_37

	set @C_39 = (select count(*) from @t_unit_rtn where Odometer in (110000,130000,150000,170000,190000,210000,230000,250000,270000,290000))
	set @C_40 = (select count(*) from @t_unit_rtn where Odometer in (120000,160000,200000,220000,260000,300000))
	set @C_41 = (select count(*) from @t_unit_rtn where Odometer in (140000,180000,240000,280000))
	set @C_38 = @C_39 + @C_40 + @C_41
	
	set @C_42 = (select count(*) from @t_unit_rtn where (Odometer % 10000) = 5000)
	
	-- FSC Job
	declare @t_unit_fsc_clm as table
	(
		InvoiceDate  varchar(20),
		ChassisCode  varchar(50), 
		ChassisNo    varchar(50),
		GroupJobType varchar(50),
		JobType      varchar(50),
		Odometer     numeric(10)
	)	
	insert into @t_unit_fsc_clm
	select distinct convert(varchar, a.InvoiceDate, 112) InvoiceDate
		 , a.ChassisCode, convert(varchar, a.ChassisNo) ChassisNo
		 , b.GroupJobType, a.JobType
		 , b.WarrantyOdometer as Odometer
	  from svTrnInvoice a
	 inner join svMstJob b
		on b.CompanyCode = a.CompanyCode
	   and b.ProductType = a.ProductType
	   and b.BasicModel = a.BasicModel
	   and b.JobType = a.JobType
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and year(a.InvoiceDate) = @PeriodYear
	   and month(a.InvoiceDate) = @Month0
	   and b.GroupJobType in ('FSC','CLM')
	   and not exists (
		select 1 from svTrnInvoice
		 where 1 = 1
		   and CompanyCode = a.CompanyCode
		   and BranchCode = a.BranchCode
		   and ChassisCode = a.ChassisCode
		   and ChassisNo = a.ChassisNo
		   and convert(varchar, InvoiceDate, 112) = convert(varchar, a.InvoiceDate, 112)
		   and a.JobType = 'PDI'
	   )
	
	set @C_45 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'FSC' and Odometer = 1000)
	set @C_46 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'FSC' and Odometer = 5000)
	set @C_47 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'FSC' and Odometer = 10000)
	set @C_48 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'FSC' and Odometer = 20000)
	set @C_53 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'FSC' and Odometer = 30000)
	set @C_54 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'FSC' and Odometer = 40000)
	set @C_55 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'FSC' and Odometer = 50000)
	set @C_44 = @C_45 + @C_46 + @C_47 + @C_48 + @C_53 + @C_54 + @C_55
	set @C_50 = (select count(*) from @t_unit_fsc_clm where GroupJobType = 'CLM')
	
	set @C_52 = (select count(*) from @t_inv_tsk where JobType = 'PDI')

	-- Unit Others
	declare @t_unit_oth as table
	(
		InvoiceDate  varchar(20),
		ChassisCode  varchar(50), 
		ChassisNo    varchar(50),
		GroupJobType varchar(50),
		JobType      varchar(50),
		Odometer     numeric(10)
	)	
	insert into @t_unit_oth
	select distinct convert(varchar, a.InvoiceDate, 112) InvoiceDate
		 , a.ChassisCode, convert(varchar, a.ChassisNo) ChassisNo
		 , b.GroupJobType, a.JobType
		 , b.WarrantyOdometer as Odometer
	  from svTrnInvoice a
	 inner join svMstJob b
		on b.CompanyCode = a.CompanyCode
	   and b.ProductType = a.ProductType
	   and b.BasicModel = a.BasicModel
	   and b.JobType = a.JobType
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and year(a.InvoiceDate) = @PeriodYear
	   and month(a.InvoiceDate) = @Month0
	   and b.GroupJobType not in ('FSC','CLM','RTN')

	set @C_51 = (select count(*) from @t_unit_oth where JobType = 'REWORK')

	-- Unit ALL
	declare @t_unit_all as table
	(
		InvoiceDate  varchar(20),
		ChassisCode  varchar(50), 
		ChassisNo    varchar(50)
	)	
	insert into @t_unit_all
	select distinct convert(varchar, a.JobOrderDate, 112) InvoiceDate
		 , a.ChassisCode, convert(varchar, a.ChassisNo) ChassisNo
	  from svTrnInvoice a
	 inner join svMstJob b
		on b.CompanyCode = a.CompanyCode
	   and b.ProductType = a.ProductType
	   and b.BasicModel = a.BasicModel
	   and b.JobType = a.JobType
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and year(a.InvoiceDate) = @PeriodYear
	   and month(a.InvoiceDate) = @Month0

	-- Unit ALL
	declare @t_job_all as table
	(
		ChassisCode  varchar(50), 
		ChassisNo    varchar(50),
		GroupJobType varchar(20),
		JobType      varchar(20),
		Odometer     numeric(18,0),
		JobOrderDate datetime
	)	
	insert into @t_job_all
	select a.ChassisCode, a.ChassisNo
		 , case b.GroupJobType 
			 when 'RTN' then 
				(case 
					when b.WarrantyOdometer in (10000,30000,50000,70000,90000) then 'PB.A.1 3 5 7 9'
					when b.WarrantyOdometer in (20000,60000,100000) then 'PB.A.2 6 10'
					when b.WarrantyOdometer in (40000,80000) then 'PB.A.4 8'
					when b.WarrantyOdometer in (110000,130000,150000,170000,190000) then 'PB.B.1 3 5 7 9'
					when b.WarrantyOdometer in (120000,160000,110000) then 'PB.B.2 6 10'
					when b.WarrantyOdometer in (140000,180000) then 'PB.B.4 8'
					when b.WarrantyOdometer in (210000,230000,250000,270000,290000) then 'PB.B.1 3 5 7 9'
					when b.WarrantyOdometer in (220000,260000,210000) then 'PB.B.2 6 10'
					when b.WarrantyOdometer in (240000,280000) then 'PB.B.4 8'
					when b.WarrantyOdometer in (  5000, 15000, 25000, 35000, 45000, 55000, 65000, 75000, 85000, 95000) then 'PB.C.5000'
					when b.WarrantyOdometer in (105000,115000,125000,135000,145000,155000,165000,175000,185000,195000) then 'PB.C.5000'
					when b.WarrantyOdometer in (205000,215000,225000,235000,245000,155000,265000,275000,285000,295000) then 'PB.C.5000'
					else 'OTHERS'
					end
				)
			 when 'FSC' then 
				(case b.PdiFscSeq when 0 then 'PDI' else 'FS' end)
			 when 'CLM' then 'CLAIM'
			 else 'OTHERS'
		   end as GroupJobType
		 , case b.GroupJobType 
			 when 'RTN' then 'PB' + right(replicate(' ', 5) + convert(varchar, b.WarrantyOdometer), 6) 
			 when 'FSC' then 
				(case b.PdiFscSeq when 0 then 'PDI' else ('FS' + right(replicate(' ', 5) + convert(varchar, b.WarrantyOdometer), 6)) end)
			 when 'CLM' then 'CLAIM'
			 else 'OTHERS'
		   end as JobType
		 , b.WarrantyOdometer
		 , convert(datetime, convert(varchar, a.JobOrderDate, 112)) JobOrderDate  
	  from svTrnInvoice a  
	  left join svMstJob b
		on b.CompanyCode = a.CompanyCode
	   and b.BasicModel = a.BasicModel
	   and b.JobType = a.JobType  
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and year(a.InvoiceDate) = @PeriodYear
	   and month(a.InvoiceDate) = @Month0
	 group by a.ChassisCode, a.ChassisNo, b.GroupJobType, b.PdiFscSeq, b.WarrantyOdometer, convert(varchar, a.JobOrderDate, 112)  

	set @C_49 = @C_50 + @C_51 + @C_52
	set @C_43 = (select count(*) from @t_job_all where GroupJobType = 'OTHERS')
	set @C_33 = @C_34 + @C_38 + @C_42 + @C_43

	-- D. Workshop Service Strength
	set @D_53 = isnull((
						select TotalStall
						  from svMstTarget
						 where CompanyCode=@CompanyCode
						   and BranchCode=@BranchCode
						   and ProductType=@ProductType
						   and PeriodYear=@PeriodYear
						   and PeriodMonth=@Month0
						 ),0)					
	set @D_55 = isnull((
					select count(*) from gnMstEmployee
					 where CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and TitleCode  in ('6', '11', '22')
					   and PersonnelStatus = '1'
					), 0)
	set @D_56 = isnull((
					select count(*) from gnMstEmployee
					 where CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and TitleCode  in ('4')
					   and PersonnelStatus = '1'
					), 0)
	set @D_57 = isnull((
					select count(*) from gnMstEmployee
					 where CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and TitleCode  in ('3')
					   and PersonnelStatus = '1'
					), 0)
	set @D_59 = isnull((
					select count(*) from gnMstEmployee
					 where CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and TitleCode  in ('8')
					   and PersonnelStatus = '1'
					), 0)
	set @D_60 = isnull((
					select count(*) from gnMstEmployee
					 where CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and TitleCode  in ('9')
					   and PersonnelStatus = '1'
					), 0)
	set @D_58 = @D_59 + @D_60
	set @D_61 = 0
	set @D_62 = isnull((
					select count(*) from gnMstEmployee
					 where CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and TitleCode  in ('7', '10')
					   and PersonnelStatus = '1'
					), 0)
	set @D_54 = @D_55 + @D_56 + @D_57 + @D_58 + @D_61 + @D_62

	-- E. Productivity Indicators
	set @E_01 = (case isnull(@D_58, 0) when 0 then 0 else 1.0 * isnull(@B_29, 0) / @D_58 end)
	set @E_02 = (case isnull(@D_60, 0) when 0 then 0 else 1.0 * isnull(@B_29, 0) / @D_60 end)
	set @E_03 = (case isnull(@D_53, 0) when 0 then 0 else 1.0 * isnull(@B_29, 0) / @D_53 end)
	set @E_04 = (case isnull(@D_57, 0) when 0 then 0 else 1.0 * isnull(@B_29, 0) / @D_57 end)
	set @E_05 = isnull((
						select TotalWorkingDays
						  from svMstTarget
						 where CompanyCode=@CompanyCode
						   and BranchCode=@BranchCode
						   and ProductType=@ProductType
						   and PeriodYear=@PeriodYear
						   and PeriodMonth=@Month0
						 ),0)					
					
	set @E_06 = (case isnull(@E_05, 0) when 0 then 0 else 1.0 * isnull(@E_01, 0) / @E_05 end)
	set @E_07 = (case isnull(@E_05, 0) when 0 then 0 else 1.0 * isnull(@E_02, 0) / @E_05 end)
	set @E_08 = (case isnull(@E_05, 0) when 0 then 0 else 1.0 * isnull(@E_03, 0) / @E_05 end)
	set @E_09 = (case isnull(@E_05, 0) when 0 then 0 else 1.0 * isnull(@E_04, 0) / @E_05 end)

	-- F. Service Retention & Marketing Activity
	set @F_72 = isnull((
						select SMRTarget
						  from svMstTarget
						 where CompanyCode=@CompanyCode
						   and BranchCode=@BranchCode
						   and ProductType=@ProductType
						   and PeriodYear=@PeriodYear
						   and PeriodMonth=@Month0
						 ),0)
	set @F_73 =	isnull((
					select count(*)
					  from svTrnDailyRetention
					 where 1 = 1
					   and CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   --and PeriodYear  = @PeriodYear
					   --and PeriodMonth = @Month0
					   and year(ReminderDate) = @PeriodYear
					   and month(ReminderDate) = @Month0
					   and isnull(IsReminder,0) = 1
					), 0)
	set @F_74 =	isnull((
					select count(*)
					  from dbo.svTrnDailyRetention
					 where 1 = 1
					   and CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   --and PeriodYear  = @PeriodYear
					   --and PeriodMonth = @Month0
					   and year(VisitDate) = @PeriodYear
					   and month(VisitDate) = @Month0
					   and isnull(IsVisited,0) = 1
					), 0)
	set @F_75 =	isnull((
					select count(*)
					  from dbo.svTrnDailyRetention
					 where 1 = 1
					   and CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   --and PeriodYear  = @PeriodYear
					   --and PeriodMonth = @Month0
					   and year(FollowUpDate) = @PeriodYear
					   and month(FollowUpDate) = @Month0
					   and isnull(IsFollowUp,0) = 1
					), 0)
	set @F_76 =	isnull((
					select count(*)
					  from dbo.svTrnDailyRetention
					 where 1 = 1
					   and CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   --and PeriodYear  = @PeriodYear --sebelum perubahan
					   --and PeriodMonth = @Month0     --sebelum perubahan
					   and year(BookingDate) = @PeriodYear --Sesudah Perubahan
					   and month(BookingDate) = @Month0    --Sesudah Perubahan
					   and isnull(IsBooked,0) = 1
					), 0)
	set @F_77 = (case isnull(@F_72, 0) when 0 then 0 else 100.0 * isnull(@F_74, 0) / @F_72 end)
	set @F_78 = (case isnull(@B_29, 0) when 0 then 0 else 100.0 * isnull(@F_75, 0) / @B_29 end)
	set @F_79 = (case isnull(@B_29, 0) when 0 then 0 else 100.0 * isnull(@F_76, 0) / @B_29 end)

	-- G. CSI Performance
	set @G_01 = null
	set @G_02 = null
	set @G_03 = null
	set @G_04 = null
	set @G_05 = null
	set @G_06 = null
	set @G_07 = isnull((
					select count(*)
					  from dbo.svTrnDailyRetention
					 where 1 = 1
					   and CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and PeriodYear  = @PeriodYear
					   and PeriodMonth = @Month0
					   and isnull(IsFollowUp,0) = 1
					   and isnull(IsSatisfied,0) = 1
					), 0)
	set @G_08 = isnull((
					select count(*)
					  from dbo.svTrnDailyRetention
					 where 1 = 1
					   and CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and PeriodYear  = @PeriodYear
					   and PeriodMonth = @Month0
					   and isnull(IsFollowUp,0) = 1
					   and isnull(IsSatisfied,0) = 0
					), 0)
	set @G_09 = isnull((
					select count(*)
					  from dbo.svTrnDailyRetention
					 where 1 = 1
					   and CompanyCode = @CompanyCode
					   and BranchCode  = @BranchCode
					   and PeriodYear  = @PeriodYear
					   and PeriodMonth = @Month0
					   and isnull(IsClosed,0) = 1
					), 0) 
	set @G_10 = (case isnull(@B_29, 0) when 0 then 0 else 1.0 * isnull(@G_07, 0)/ @B_29 end)
	set @G_11 = (case isnull(@B_29, 0) when 0 then 0 else 1.0 * isnull(@G_08, 0)/ @B_29 end)
	set @G_12 = (case isnull(@B_29, 0) when 0 then 0 else (isnull(@G_04, 0) + isnull(@G_08, 0))/ @B_29 end)

	-- Additional Calculation
	set @A_23 = (case isnull(@B_29, 0) when 0 then 0 else 1.0 * (isnull(@A_16, 0) + isnull(@A_17, 0))/ @B_29 end)
	set @A_24 = (case isnull(@D_58, 0) when 0 then 0 else @A_01 / @D_58 end)
	set @A_25 = (case isnull(@D_56, 0) when 0 then 0 else @A_01 / @D_56 end)
	set @A_26 = (case isnull(@D_53, 0) when 0 then 0 else @A_01 / @D_53 end)

	insert into @t_msidat select 'A', 'MSI_01', @Month0, @A_01
	insert into @t_msidat select 'A', 'MSI_02', @Month0, @A_02
	insert into @t_msidat select 'A', 'MSI_03', @Month0, @A_03
	insert into @t_msidat select 'A', 'MSI_04', @Month0, @A_04
	insert into @t_msidat select 'A', 'MSI_05', @Month0, @A_05
	insert into @t_msidat select 'A', 'MSI_06', @Month0, @A_06
	insert into @t_msidat select 'A', 'MSI_07', @Month0, @A_07
	insert into @t_msidat select 'A', 'MSI_08', @Month0, @A_08 
	insert into @t_msidat select 'A', 'MSI_09', @Month0, @A_09
	insert into @t_msidat select 'A', 'MSI_10', @Month0, @A_10
	insert into @t_msidat select 'A', 'MSI_11', @Month0, @A_11
	insert into @t_msidat select 'A', 'MSI_12', @Month0, @A_12
	insert into @t_msidat select 'A', 'MSI_13', @Month0, @A_13
	insert into @t_msidat select 'A', 'MSI_14', @Month0, @A_14
	insert into @t_msidat select 'A', 'MSI_15', @Month0, @A_15
	insert into @t_msidat select 'A', 'MSI_16', @Month0, @A_16
	insert into @t_msidat select 'A', 'MSI_17', @Month0, @A_17
	insert into @t_msidat select 'A', 'MSI_18', @Month0, @A_18
	insert into @t_msidat select 'A', 'MSI_19', @Month0, @A_19
	insert into @t_msidat select 'A', 'MSI_20', @Month0, @A_20
	insert into @t_msidat select 'A', 'MSI_21', @Month0, @A_21
	insert into @t_msidat select 'A', 'MSI_22', @Month0, @A_22
	insert into @t_msidat select 'A', 'MSI_23', @Month0, @A_23
	insert into @t_msidat select 'A', 'MSI_24', @Month0, @A_24
	insert into @t_msidat select 'A', 'MSI_25', @Month0, @A_25
	insert into @t_msidat select 'A', 'MSI_26', @Month0, @A_26
	insert into @t_msidat select 'A', 'MSI_27', @Month0, @A_27

	insert into @t_msidat select 'B', 'MSI_28', @Month0, @B_28
	insert into @t_msidat select 'B', 'MSI_29', @Month0, @B_29
	insert into @t_msidat select 'B', 'MSI_30', @Month0, @B_30
	insert into @t_msidat select 'B', 'MSI_31', @Month0, @B_31
	insert into @t_msidat select 'B', 'MSI_32', @Month0, @B_32

	insert into @t_msidat select 'C', 'MSI_33', @Month0, @C_33
	insert into @t_msidat select 'C', 'MSI_34', @Month0, @C_34
	insert into @t_msidat select 'C', 'MSI_35', @Month0, @C_35
	insert into @t_msidat select 'C', 'MSI_36', @Month0, @C_36
	insert into @t_msidat select 'C', 'MSI_37', @Month0, @C_37
	insert into @t_msidat select 'C', 'MSI_38', @Month0, @C_38
	insert into @t_msidat select 'C', 'MSI_39', @Month0, @C_39
	insert into @t_msidat select 'C', 'MSI_40', @Month0, @C_40
	insert into @t_msidat select 'C', 'MSI_41', @Month0, @C_41
	insert into @t_msidat select 'C', 'MSI_42', @Month0, @C_42
	insert into @t_msidat select 'C', 'MSI_43', @Month0, @C_43
	insert into @t_msidat select 'C', 'MSI_44', @Month0, @C_44
	insert into @t_msidat select 'C', 'MSI_45', @Month0, @C_45
	insert into @t_msidat select 'C', 'MSI_46', @Month0, @C_46
	insert into @t_msidat select 'C', 'MSI_47', @Month0, @C_47
	insert into @t_msidat select 'C', 'MSI_48', @Month0, @C_48
	insert into @t_msidat select 'C', 'MSI_49', @Month0, @C_53
	insert into @t_msidat select 'C', 'MSI_50', @Month0, @C_54
	insert into @t_msidat select 'C', 'MSI_51', @Month0, @C_55
	insert into @t_msidat select 'C', 'MSI_52', @Month0, @C_49
	insert into @t_msidat select 'C', 'MSI_53', @Month0, @C_50
	insert into @t_msidat select 'C', 'MSI_54', @Month0, @C_51
	insert into @t_msidat select 'C', 'MSI_55', @Month0, @C_52

	insert into @t_msidat select 'D', 'MSI_56', @Month0, @D_53
	insert into @t_msidat select 'D', 'MSI_57', @Month0, @D_54
	insert into @t_msidat select 'D', 'MSI_58', @Month0, @D_55
	insert into @t_msidat select 'D', 'MSI_59', @Month0, @D_56
	insert into @t_msidat select 'D', 'MSI_60', @Month0, @D_57
	insert into @t_msidat select 'D', 'MSI_61', @Month0, @D_58
	insert into @t_msidat select 'D', 'MSI_62', @Month0, @D_59
	insert into @t_msidat select 'D', 'MSI_63', @Month0, @D_60
	insert into @t_msidat select 'D', 'MSI_64', @Month0, @D_61
	insert into @t_msidat select 'D', 'MSI_65', @Month0, @D_62

	insert into @t_msidat select 'E', 'MSI_66', @Month0, @E_01
	insert into @t_msidat select 'E', 'MSI_67', @Month0, @E_02
	insert into @t_msidat select 'E', 'MSI_68', @Month0, @E_03
	insert into @t_msidat select 'E', 'MSI_69', @Month0, @E_04
	insert into @t_msidat select 'E', 'MSI_70', @Month0, @E_05
	insert into @t_msidat select 'E', 'MSI_71', @Month0, @E_06
	insert into @t_msidat select 'E', 'MSI_72', @Month0, @E_07
	insert into @t_msidat select 'E', 'MSI_73', @Month0, @E_08
	insert into @t_msidat select 'E', 'MSI_74', @Month0, @E_09

	insert into @t_msidat select 'F', 'MSI_75', @Month0, @F_72
	insert into @t_msidat select 'F', 'MSI_76', @Month0, @F_73
	insert into @t_msidat select 'F', 'MSI_77', @Month0, @F_74
	insert into @t_msidat select 'F', 'MSI_78', @Month0, @F_75
	insert into @t_msidat select 'F', 'MSI_79', @Month0, @F_76
	insert into @t_msidat select 'F', 'MSI_80', @Month0, @F_77
	insert into @t_msidat select 'F', 'MSI_81', @Month0, @F_78
	insert into @t_msidat select 'F', 'MSI_82', @Month0, @F_79

	insert into @t_msidat select 'G', 'MSI_83', @Month0, @G_01
	insert into @t_msidat select 'G', 'MSI_84', @Month0, @G_02
	insert into @t_msidat select 'G', 'MSI_85', @Month0, @G_03
	insert into @t_msidat select 'G', 'MSI_86', @Month0, @G_04
	insert into @t_msidat select 'G', 'MSI_87', @Month0, @G_05
	insert into @t_msidat select 'G', 'MSI_88', @Month0, @G_06
	insert into @t_msidat select 'G', 'MSI_89', @Month0, @G_07
	insert into @t_msidat select 'G', 'MSI_90', @Month0, @G_08
	insert into @t_msidat select 'G', 'MSI_91', @Month0, @G_09
	insert into @t_msidat select 'G', 'MSI_92', @Month0, @G_10
	insert into @t_msidat select 'G', 'MSI_93', @Month0, @G_11
	insert into @t_msidat select 'G', 'MSI_94', @Month0, @G_12
	
	set @Month0 = @Month0 + 1
	delete @t_inv_tsk
	delete @t_inv_itm
	delete @t_inv_unit
	delete @t_inv_unit_pdi
	delete @t_inv_unit_exc
	delete @t_inv_job
end	

insert into @t_msigrp values ('A', 'A. Sales Revenue')
insert into @t_msigrp values ('B', 'B. No of Unit Intake')
insert into @t_msigrp values ('C', 'C. No of Job Type')
insert into @t_msigrp values ('D', 'D. Workshop Service Strength')
insert into @t_msigrp values ('E', 'E. Productivity Indicators')
insert into @t_msigrp values ('F', 'F. Service Retention & Marketing Activity')
insert into @t_msigrp values ('G', 'G. CSI Performance')

delete SvHstSzkMSI
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and PeriodYear = @PeriodYear
   and PeriodMonth in (select distinct MsiMonth from @t_msidat)

insert into SvHstSzkMSI (CompanyCode, BranchCode, PeriodYear, PeriodMonth, SeqNo, MsiGroup, MsiDesc, Unit, MsiData, CreatedBy, CreatedDate)
select @CompanyCode CompanyCode, @BranchCode BranchCode
	 , @PeriodYear PeriodYear, a.MsiMonth PeriodMonth
	 , convert(int, right(MsiCode, 2)) as SeqNo
	 , MsiGrDesc as MsiGroup, Description as MsiDesc, DescriptionEng Unit, a.MsiData
	 , @UserID, GETDATE ()
  from (select MsiGrCode, MsiCode, MsiMonth, MsiData from @t_msidat) a
  left join svMstRefferenceService b
    on b.CompanyCode = @CompanyCode
   and b.RefferenceType = 'MSIDATA'
   and b.RefferenceCode = a.MsiCode
  left join @t_msigrp c
    on c.MsiGroup = a.MsiGrCode


select CompanyCode, BranchCode, PeriodYear, SeqNo, MsiGroup, MsiDesc, Unit
	 , (isnull( [1], 0) + isnull( [2], 0) + isnull( [3], 0) 
	 +  isnull( [4], 0) + isnull( [5], 0) + isnull( [6], 0) 
	 +  isnull( [7], 0) + isnull( [8], 0) + isnull( [9], 0)
	 +  isnull([10], 0) + isnull([11], 0) + isnull([12], 0)) / (@Month2 - @Month1 + 1) as Average
	 , (isnull( [1], 0) + isnull( [2], 0) + isnull( [3], 0) 
	 +  isnull( [4], 0) + isnull( [5], 0) + isnull( [6], 0) 
	 +  isnull( [7], 0) + isnull( [8], 0) + isnull( [9], 0)
	 +  isnull([10], 0) + isnull([11], 0) + isnull([12], 0)) as Total
	 , isnull( [1], 0)  [1]
	 , isnull( [2], 0)  [2]
	 , isnull( [3], 0)  [3]
	 , isnull( [4], 0)  [4]
	 , isnull( [5], 0)  [5]
	 , isnull( [6], 0)  [6]
	 , isnull( [7], 0)  [7]
	 , isnull( [8], 0)  [8]
	 , isnull( [9], 0)  [9]
	 , isnull([10], 0) [10]
	 , isnull([11], 0) [11]
	 , isnull([12], 0) [12]
  from (
	select CompanyCode, BranchCode, PeriodYear, PeriodMonth, SeqNo, MsiGroup, MsiDesc, Unit, MsiData from SvHstSzkMSI
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and PeriodYear = @PeriodYear
	   and PeriodMonth >= @Month1
	   and PeriodMonth <= @Month2
  )#
 pivot (sum(MsiData) for PeriodMonth in ([1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12])) as pvt
 order by pvt.MsiGroup, pvt.SeqNo
GO
/****** Object:  StoredProcedure [dbo].[uspfn_GnUpdateTax]    Script Date: 12/15/2011 16:56:31 ******/
-- uspfn_GnUpdateTax '6051401','010.000-13.00000004','INV: 0','FPS/13/000003','ga'
ALTER procedure [dbo].[uspfn_GnUpdateTax]
   @CompanyCode	varchar(15),
   @FPJGovNo	varchar(50),
   @FPJGovNoNew	varchar(50),
   @DocNo    	varchar(20),
   @UserID      varchar(15)

as

declare @errmsg varchar(max)

if exists (select * from gnGenerateTax
		where 1 = 1
		  and CompanyCode = @CompanyCode
		  and right(FPJGovNo, 8) = right(@FPJGovNoNew, 8)
		  and right(FPJGovNo, 8) <> right(@FPJGovNo, 8)
		  and @FPJGovNoNew not like 'IN%'
		)
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'No Pajak ' + @FPJGovNoNew + ' sudah pernah digunakan untuk generate pajak'
				+ char(13) + 'Silahkan di coba nomor yang lain'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	select @errmsg
	return
end

if (@FPJGovNoNew not like 'IN%')
begin
	-- update gnGenerateTax
	;with x as (
	select 'TAX' code, FPJGovNo, @FPJGovNoNew FPJNew, DocNo, DocDate, CreatedDate
	  from gnGenerateTax 
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and FPJGovNo = @FPJGovNo
	   and DocNo = @DocNo
	)
	update x set FPJGovNo = FPJNew
end
else
begin
	delete GnGenerateTax where CompanyCode = @CompanyCode and FPJGovNo = @FPJGovNo and DocNo = @Docno
end

-- update Sparepart
;with x as (
select 'SP' code, FPJGovNo, @FPJGovNoNew FPJNew, InvoiceNo, InvoiceDate, CreatedDate
  from SPTrnSFPJHdr
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FPJGovNo = @FPJGovNo
   and InvoiceNo = @DocNo
)
update x set FPJGovNo = FPJNew

-- update Service
;with x as (
select 'SV' code, FPJGovNo, @FPJGovNoNew FPJNew, FPJNo, FPJDate, CreatedDate
  from svTrnFakturPajak
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FPJGovNo = @FPJGovNo
   and FPJNo = @DocNo
)
--select * from x
update x set FPJGovNo = FPJNew

-- update Sales
;with x as (
select 'SL' code, FakturPajakNo, @FPJGovNoNew FPJNew, InvoiceNo, InvoiceDate, CreatedDate
  from OmFakturPajakHdr
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FakturPajakNo = @FPJGovNo
   and InvoiceNo = @DocNo
)
--select * from x
update x set FakturPajakNo = FPJNew

-- update Finance
;with x as (
select 'FN' code, FakturPajakNo, @FPJGovNoNew FPJNew, InvoiceNo, InvoiceDate, CreatedDate
  from ArFakturPajakHdr
 where 1 = 1
   and CompanyCode = @CompanyCode
   and FakturPajakNo = @FPJGovNo
   and InvoiceNo = @DocNo
)
--select * from x
update x set FakturPajakNo = FPJNew

-- update Konsolidasi Pajak Keluaran
;with x as (
select 'KPK' code, TaxNo FakturPajakNo, @FPJGovNoNew FPJNew, FPJNo
	, case when TaxNo = FPJNo then @FPJGovNoNew
		else FPJNo
	end FPJNoNew
	, case when ProfitCenter='200' then FPJNo 
		else ReferenceNo
	end InvoiceNo
	, case when ProfitCenter='200' then FPJDate 
		else ReferenceDate
	end InvoiceDate
	, CreatedDate
  from gnTaxOut
 where 1 = 1
   and CompanyCode = @CompanyCode
   and TaxNo = @FPJGovNo
   and (case when ProfitCenter='200' then FPJNo else ReferenceNo end) = @DocNo
)
--select * from x
update x 
set FakturPajakNo = FPJNew
	,FPJNo= FPJNoNew

insert into gnTaxHistUpd(CompanyCode,FPJGovNo,FPJGovNoNew,DocNo,UpdateBy,UpdateDate)
     values(@CompanyCode, @FPJGovNo, @FPJGovNoNew, @DocNo, @UserID, getdate())
GO
ALTER procedure [dbo].[uspfn_SvUtlKsgDelete]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@GenerateNo  varchar(15),
	@UserID      varchar(15)
as  

if exists (
select * from svTrnPdiFsc
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and ProductType = @ProductType
   and GenerateNo = @GenerateNo
   and isnull(BatchNo, '') <> ''
)
begin
	raiserror('ksg ini tidak bisa dihapus, karena sudah ada no batch',16 ,1 );
	return
end

if exists ( 
	select * from gnMstLookupDtl
	 where CompanyCode = @CompanyCode
	   and CodeID = 'SRV_FLAG'
	   and LookUpValue = 'KSG_HOLDING'
	   and ParaValue = '1'
	)
begin
	-- ksg centralize
	if not exists ( 
          select *from sysUser a left join gnMstOrganizationDtl b
              on a.BranchCode = b.BranchCode
          --select * from gnMstOrganizationDtl
           where b.CompanyCode = @CompanyCode
             --and b.BranchCode = @BranchCode
             and b.IsBranch = 0
             and a.UserID = @UserID
      )
	begin
		-- validate user holding
		raiserror('maaf user anda bukan user holding, transaksi tidak bisa dilanjutkan',16 ,1 );
		return
	end

	;with x as (
	select i.* from svTrnInvoice i
	 inner join svTrnPdiFscApplication p
	    on p.CompanyCode = i.CompanyCode
	   and p.BranchCodeInv = i.BranchCode
	   and p.InvoiceNo = i.InvoiceNo
	 where p.CompanyCode = @CompanyCode
	   and p.BranchCode = @BranchCode
	   and p.ProductType = @ProductType
	   and p.GenerateNo = @GenerateNo
	)
	update x set PostingFlag = 0

	;with x as (
		select i.* from svTrnService i
		inner join svTrnPdiFscApplication p
	    on p.CompanyCode = i.CompanyCode
	   and p.BranchCodeInv = i.BranchCode
	   and p.InvoiceNo = i.JobOrderNo
		 where i.CompanyCode = @CompanyCode
		   and i.BranchCode = @BranchCode
		   and i.ProductType = @ProductType	
		   and p.GenerateNo = @GenerateNo
		)
	update x set IsLocked = 0
	
	;with x as (
	select * from svTrnPdiFscApplication
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and ProductType = @ProductType
	   and GenerateNo = @GenerateNo
	)
	delete x

	;with x as (
	select * from svTrnPdiFsc
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and ProductType = @ProductType
	   and GenerateNo = @GenerateNo
	)
	delete x
end
else
begin
	-- ksg not centralize
	;with x as (
	select i.* from svTrnInvoice i
	 inner join svTrnPdiFscApplication p
	    on p.CompanyCode = i.CompanyCode
	   and p.BranchCodeInv = i.BranchCode
	   and p.InvoiceNo = i.InvoiceNo
	 where p.CompanyCode = @CompanyCode
	   and p.BranchCode = @BranchCode
	   and p.ProductType = @ProductType
	   and p.GenerateNo = @GenerateNo
	)
	update x set PostingFlag = 0

	;with x as (
		select i.* from svTrnService i
		inner join svTrnPdiFscApplication p
	    on p.CompanyCode = i.CompanyCode
	   and p.BranchCodeInv = i.BranchCode
	   and p.InvoiceNo = i.JobOrderNo
		 where i.CompanyCode = @CompanyCode
		   and i.BranchCode = @BranchCode
		   and i.ProductType = @ProductType	
		   and p.GenerateNo = @GenerateNo
		)
	update x set IsLocked = 0
	
	;with x as (
	select * from svTrnPdiFscApplication
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and ProductType = @ProductType
	   and GenerateNo = @GenerateNo
	)
	delete x

	;with x as (
	select * from svTrnPdiFsc
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and ProductType = @ProductType
	   and GenerateNo = @GenerateNo
	)
	delete x
end
GO
-- =============================================
-- Author:		Seandy A.K
-- Create date: 12-9-2011
-- Description:	<LAMPIRAN DOKUMEN NON PENJUALAN (DETAIL)>
-- =============================================

ALTER procedure [dbo].[usprpt_SpRpTrn041]
   @CompanyCode AS varchar (15),
   @BranchCode AS varchar (15),
   @SalesType AS varchar (1),
   @LmpNoStart AS varchar (15),
   @LmpNoEnd AS varchar (15),
   @ProfitCenter AS varchar (15),
   @TypeOfGoods AS varchar (15),
   @SeqNo AS int
AS

-- usprpt_SpRpTrn028 '6159401','615940100','2','LMP/11/003511','LMP/11/003511','300', '%'

   BEGIN
      SELECT DISTINCT
             0  AS Nomor, LmpHdr.LmpNo, LmpHdr.CustomerCode, Cust.CustomerName
             , Cust.NPWPNo, (CASE Cust.isPKP
                WHEN 0 THEN 'No'
                ELSE 'Yes'
             END)  AS PKP
			 , SORDHdr.UsageDocNo  AS SKPNo
			 , SORDHdr.UsageDocDate  AS SKPDate
			 , SORDHdr.DocNo
		     , SORDHdr.DocDate
			 , LmpDtl.PartNo
			 , ItemInfo.PartName
			 , LmpDtl.QtyBill
			 , CASE WHEN LmpHdr.TransType = '10' THEN LmpDtl.CostPrice ELSE LmpDtl.RetailPrice END RetailPrice
			 , LmpDtl.DiscPct
			 , LmpDtl.DiscAmt
			 , CASE WHEN LmpHdr.TransType = '10' THEN LmpDtl.CostPrice * LmpDtl.QtyBill ELSE LmpDtl.NetSalesAmt END NetSalesAmt
			 , BPSFHdr.SalesType
			 , CASE WHEN LmpHdr.TransType = '10' THEN 
			   ISNULL((SELECT SUM(QtyBill * CostPrice) FROM SpTrnSLmpDtl WHERE CompanyCode = LmpHdr.CompanyCode AND BranchCode = LmpHdr.BranchCode AND LmpNo = LmpHdr.LmpNo),0)
			   ELSE LmpHdr.TotDPPAmt
			   END TotDPPAmt
			 , LmpHdr.TotPPNAmt
             , CASE WHEN LmpHdr.TransType = '10' THEN 
			   ISNULL((SELECT SUM(QtyBill * CostPrice) FROM SpTrnSLmpDtl WHERE CompanyCode = LmpHdr.CompanyCode AND BranchCode = LmpHdr.BranchCode AND LmpNo = LmpHdr.LmpNo),0)
			   ELSE LmpHdr.TotFinalSalesAmt  
			   END TotFinalSalesAmt
			 , (SELECT isnull
                ( (SELECT lookupvaluename  name
             FROM gnmstlookupdtl
             WHERE codeid = 'CITY'
             AND lookupvalue = gnmstcoprofile.citycode),
             '')  AS city
             FROM gnmstcoprofile
             WHERE companycode = @CompanyCode
             AND branchcode = @BranchCode)  AS city, getdate ()  AS date,
             UPPER (mstSign.SignName)  SignName, UPPER (mstSign.TitleSign)  
             TitleSign
			 , SORDHdr.OrderNo
        FROM                      spTrnSLmpDtl LmpDtl
                               LEFT JOIN
                                  spTrnSLmpHdr LmpHdr
                               ON LmpHdr.LmpNo = LmpDtl.LmpNo
                                  AND LmpHdr.CompanyCode = LmpDtl.CompanyCode
                                  AND LmpHdr.BranchCode = LmpDtl.BranchCode
                            INNER JOIN
                               gnMstCustomer Cust
                            ON Cust.CustomerCode = LmpHdr.CustomerCode
                               AND Cust.CompanyCode = LmpDtl.CompanyCode
                         LEFT JOIN
                            spTrnSBPSFDtl BPSFDtl
                         ON BPSFDtl.BPSFNo = LmpHdr.BPSFNo
                            AND BPSFDtl.CompanyCode = LmpDtl.CompanyCode
                            AND BPSFDtl.BranchCode = LmpDtl.BranchCode
                      LEFT JOIN
                         spTrnSBPSFHdr BPSFHdr
                      ON BPSFHdr.BPSFNo = BPSFDtl.BPSFNo
                         AND BPSFHdr.CompanyCode = LmpDtl.CompanyCode
                         AND BPSFHdr.BranchCode = LmpDtl.BranchCode
                   INNER JOIN
                      spTrnSORDHdr SORDHdr
                   ON SORDHdr.DocNo = LmpDtl.DocNo
                      AND SORDHdr.CompanyCode = LmpDtl.CompanyCode
                      AND SORDHdr.BranchCode = LmpDtl.BranchCode
                INNER JOIN
                   spMstItemInfo ItemInfo
                ON ItemInfo.PartNo = LmpDtl.PartNo
                   AND ItemInfo.CompanyCode = LmpDtl.CompanyCode
             LEFT JOIN
                gnMstSignature mstSign
             ON LmpHdr.CompanyCode = mstSign.CompanyCode
                AND LmpHdr.BranchCode = mstSign.BranchCode
                AND mstSign.ProfitCenterCode = @ProfitCenter
                AND mstSign.DocumentType = convert (varchar (3), LmpHdr.LmpNo)
                AND mstSign.SeqNo = @SeqNo
       WHERE LmpDtl.LmpNo BETWEEN @LmpNoStart AND @LmpNoEnd
             AND BPSFHdr.SalesType = @SalesType
             AND LmpDtl.CompanyCode = @CompanyCode
             AND LmpDtl.BranchCode = @BranchCode
			 AND LmpHdr.TypeOfGoods LIKE @TypeOfGoods
   END
GO
ALTER procedure [dbo].[uspfn_InitialScript]

as

;with x as (
select a.UserId, a.Password, a.FullName, a.IsActive, a.RequiredChange
     , LastChanged = (isnull((select top 1 ChangeDate from SysUserPwdHist where UserId = a.UserId order by ChangeDate desc), '1900-01-01'))
	 , DelayDays = datediff(DAY, (isnull((select top 1 ChangeDate from SysUserPwdHist where UserId = a.UserId order by ChangeDate desc), '1900-01-01')), getdate())
  from SysUser a
 where 1 = 1
   and UserId not in ('sa', 'ga')
   and Isnull(RequiredChange, 0) = 0
   and (datediff(DAY, (isnull((select top 1 ChangeDate from SysUserPwdHist where UserId = a.UserId order by ChangeDate desc), '1900-01-01')), getdate())) > 90
)
--select * from x
update x set RequiredChange = 1
GO
ALTER procedure [dbo].[uspsys_GetMessageBoard]
as

declare @MessageBoards as table (MessageHeader varchar(255), MessageText varchar(max))

declare @StatusAktif varchar(10)
set @StatusAktif = (select TOP 1 isnull(ParaValue,1) from GnMstLookUpDtl where CodeID = 'ALTAX' and LookUpValue = 'Status')
print @StatusAktif

if(isnull(@StatusAktif,1) = 1) 
begin
	declare @FakturPajakSeq		varchar(MAX)
	declare @Message			varchar(MAX)
	declare @BranchCode			varchar(15)
	declare @FPJSeqNo			bigint
	declare @BeginTaxNo			bigint
	declare @EndTaxNo			bigint

	set @FakturPajakSeq = 'ALERT NO SERI PAJAK!!!' 
	set @FakturPajakSeq = @FakturPajakSeq + CHAR(10)
	DECLARE temp CURSOR FOR
	Select BranchCode,FPJSeqNo,BeginTaxNo,EndTaxNo
	from gnMstFPjSeqNo
	where IsActive = 1
	  and Year = Year(getdate())
	  and convert(datetime,EffectiveDate,112) < getdate()
	  and isnull(BeginTaxNo, '') <> ''
	  and isnull(EndTaxNo, '') <> ''
	order by SeqNo

	OPEN temp
	FETCH NEXT FROM temp INTO @BranchCode, @FPJSeqNo, @BeginTaxNo, @EndTaxNo
	WHILE @@FETCH_STATUS = 0
		BEGIN
			set @FakturPajakSeq = isnull(@FakturPajakSeq,'') + (@BranchCode + ': Tax# ' + convert(varchar,@BeginTaxNo) + '-' + convert(varchar,@EndTaxNo) + ', Last# ' + convert(varchar,@FPJSeqNo) + ', SISA: ' + convert(varchar,@EndTaxNo - @FPJSeqNo)) + CHAR(10);
			FETCH NEXT FROM temp INTO @BranchCode, @FPJSeqNo, @BeginTaxNo, @EndTaxNo
		END
	CLOSE temp
	DEALLOCATE temp

	if exists (select * from sys.objects where type = 'u' and name = 'SysMessageBoards')
	begin
	    if @FakturPajakSeq='ALERT NO SERI PAJAK!!!' + CHAR(10)
	        select top 1 MessageHeader, MessageText, CreatedDate from SysMessageBoards where MessageID > 0 order by MessageID desc
	    else    
		    select top 1 MessageHeader, @FakturPajakSeq + CHAR(10) + convert(varchar(max),MessageText) MessageText, CreatedDate from SysMessageBoards where MessageID > 0 order by MessageID desc
	end
end
else
begin
	if exists (select * from sys.objects where type = 'u' and name = 'SysMessageBoards')
	begin
		select top 1 MessageHeader, MessageText, CreatedDate from SysMessageBoards where MessageID > 0 order by MessageID desc
	end
end

select * from @MessageBoards
GO
create procedure [dbo].[uspfn_HrInqEmployeeSubOrdinates]  
--declare  
 @CompanyCode varchar(20),  
 @EmployeeID varchar(20),
 @Status varchar(10)
as  
 
--select @CompanyCode = '6006406', @EmployeeID = '341'
select a.CompanyCode, a.EmployeeID, a.EmployeeName
     , a.JoinDate
     , LastPosition = upper(a.Department)
         + upper(case isnull(b.PosName, '') when '' then '' else ' - ' + b.PosName end)
         + upper(case isnull(c.LookUpValueName, '') when '' then '' else ' - ' + c.LookUpValueName end)
		 , Status = d.LookUpValueName
  from HrEmployee a
  left join GnMstPosition b
    on b.CompanyCode = a.CompanyCode
   and b.DeptCode = a.Department
   and b.PosCode = a.Position
  left join GnMstLookUpDtl c
    on c.CompanyCode = a.CompanyCode
   and c.CodeID = 'ITSG'
   and c.LookUpValue = a.Grade
   left join GnMstLookUpDtl d
   on a.CompanyCode = d.CompanyCode
   and d.CodeID='PERS' and d.LookUpValue=a.PersonnelStatus
 where a.CompanyCode = @CompanyCode
   and a.TeamLeader = @EmployeeID 
   and a.PersonnelStatus = case when @status='' then a.PersonnelStatus else @status end
 order by a.EmployeeID
GO
ALTER procedure [dbo].[uspfn_CalculateFlexibleReport]
	@company    varchar(50),
	@branchHold varchar(50),
	@reportId   varchar(max),
	@formatId   varchar(max),
	@columnId   varchar(max),
	@year       int,
	@num        int,
	@title      varchar(max),
	@subTitle   varchar(max),
	@paramTitle varchar(max),
	@isHQ       varchar(1),
	@flag       varchar(1)='0'
-- Default Value If @flag Not Initialized  
as
  begin
      --declare @company varchar(50)  
      --declare @branchHold varchar(50)  
      --declare @reportId varchar(max)  
      --declare @formatId varchar(max)  
      --declare @columnId varchar(max)  
      --declare @year int  
      --declare @num int  
      --declare @title varchar(max)  
      --declare @subTitle varchar(max)  
      --declare @paramTitle varchar(max)  
      --set @company ='6006406'  
      --set @branchHold ='6006400'  
      --set @reportId ='1'  
      --set @formatId ='1EXP_BIT'  
      --set @columnId ='BIT6_BIT'  
      --set @year =2012  
      --set @num =1  
      --set @title ='LAPORAN BIAYA OPERASIONAL'  
      --set @subTitle ='ANTAR COST CENTER ALL'  
      --set @paramTitle ='BULAN : APR-12'  
      -- Prepare Initial Data For Flexible Report --  
      ----------------------------------------------  
      exec Uspfn_prepareinitialdataflexreport
        @company,
        @branchHold,
        @reportId,
        @formatId,
        @ColumnId,
        @year,
        @num,
        @title,
        @subtitle,
        @paramtitle,
        @flag

      -- Parameter Cost Center And Report Kind --  
      -------------------------------------------  
      declare @isCostCenter varchar(max)
      declare @reportKind varchar(max)

      set @isCostCenter = (select reporttype
                           from   glcolumnreporthdr
                           where  companycode = @company
                                  and branchcode = @branchHold
                                  and reportid = @columnID)
      set @reportKind = (select reportkind
                         from   glcolumnreporthdr
                         where  companycode = @company
                                and branchcode = @branchHold
                                and reportid = @columnID)

	  if @num = '0' set @num = '1'
	  
      -- Loop Branch --  
      -----------------  
      select *
      into   #tbranch
      from   (select distinct branchcode
              from   gltraccbalance
              where  companycode = @company
                     and branchcode = case @isHQ
                                        when '1' then branchcode
                                        else @branchHold
                                      end
                     and fiscalyear = @year
                     and periodenum = @num)#tBranch

      -- Get Account From Format Report --  
      ------------------------------------  
      select *
      into   #taccount
      from   (select a.branchcode,
                     b.accountno,
                     b.rowgroup,
                     b.rownum
              from   #tbranch a
                     left join glformatreportsubdtl b
                            on b.companycode = @company
                               and b.branchcode = a.branchcode
                               and b.reportid = @formatId
                               and exists (select distinct accountno
                                           from   gltraccbalance
                                           where  companycode = @company
                                                  and branchcode = a.branchcode
                                                  and accountno = b.accountno))
             #tAccount

      -- Table Temporary --  
      ---------------------  
      declare @tHasil as table
        (
           branchcode   varchar(20),
           fiscalyear   int,
           accountno    varchar(100),
           periodenum   tinyint,
           beginbalance decimal(18, 2),
           dbamount     decimal(18, 2),
           cramount     decimal(18, 2),
           rowgroup     int,
           rownum       int,
           reffcode     varchar(20),
           seqno        tinyint
        )

      -- Report Type  --  
      ------------------  
      if ( @isCostCenter = '1' )
        begin
            -- // By Cost Center \\ --  
            --------------------------  
            -- Parameter Report Yearly or Monthly --  
            ----------------------------------------  
            declare @isYear int

            set @isYear = 0

            if exists (select reportkind
                       from   glcolumnreporthdr
                       where  companycode = @company
                              and branchcode = @branchHold
                              and reportid = @columnId
                              and reportkind in ( 'Y' ))
              begin
                  set @isYear= 1
              end

            -- get Detail Column --  
            -----------------------  
            declare @seq int
            declare @cost varchar(3)
            declare curcost cursor for
              select seqno,
                     costcenter
              from   glcolumnreportsubdtl
              where  companycode = @company
                     and branchcode = @branchHold
                     and reportid = @columnId

            -- Loop Column Dtl --  
            ---------------------  
            open curcost

            fetch next from curcost into @seq, @cost

            while @@fetch_status = 0
              begin
                  if ( @isYear = 1 )
                    begin
                        -- Yearly --  
                        ------------  
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               @cost
                               ReffCode,
                               @seq
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.branchcode = a.branchcode
                               and a.fiscalyear = @year
                               and Substring(a.accountno, 9, 3) = @cost
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else
                    begin
                        -- Monthly --  
                        -------------  
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               @cost
                               ReffCode,
                               @seq
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.branchcode = a.branchcode
                               and a.fiscalyear = @year
                               and a.periodenum = @num
                               and Substring(a.accountno, 9, 3) = @cost
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end

                  fetch next from curcost into @seq, @cost
              end

            close curcost

            deallocate curcost

            -- Insert Result --  
            -------------------  
            insert into glflexreportsubdtl
            select @company          CompanyCode,
                   @branchHold       BranchCode,
                   @reportId         RepportID,
                   a.rowgroup,
                   a.rownum,
                   a.accountno,
                   a.reffcode,
                   a.seqno,
                   a.fiscalyear,
                   a.periodenum,
                   Sum(beginbalance) BeginBalance,
                   Sum(dbamount)     DbAmount,
                   Sum(cramount)     CrAmount
            from   @tHasil a
            group  by rowgroup,
                      rownum,
                      accountno,
                      reffcode,
                      seqno,
                      fiscalyear,
                      periodenum
        end
      else
        begin
            -- Report NOT BY COST CENTER --  
            -------------------------------    
            declare @period varchar(20)
            declare @colType varchar(5)
            declare @seqNo int
            declare @t1 int -- temp periodenum  
            declare @t2 int -- temp year  
            declare colflex cursor for
              select period,
                     columntype,
                     seqno
              from   glcolumnreportdtl
              where  companycode = @company
                     and branchcode = @branchHold
                     and reportid = @columnId

            open colflex

            fetch next from colflex into @period, @colType, @seqNo

            while @@fetch_status = 0
              begin
                  if ( @period = 'CMCY' ) -- CURRENT MONTH CURRENT YEAR  
                    begin
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @year
                               and a.periodenum = @num
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else if ( @period = 'LMCY' ) -- LAST MONTH CURRENT YEAR  
                    begin
                        if ( @num = 1 )
                          begin
                              set @t1 = 13
                              set @t2 = @year - 1
                          end
                        else
                          begin
                              set @t1 = @num - 1
                              set @t2 = @year
                          end

                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @t2
                               and a.periodenum = @t1
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else if ( @period = 'CMLY' ) -- CURRENT MONTH LAST YEAR  
                    begin
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @year - 1
                               and a.periodenum = @num
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else if ( @period = 'LMLY' )
                    begin
                        if ( @num = 1 )
                          begin
                              set @t1 = 13
                              set @t2 = @year - 2
                          end
                        else
                          begin
                              set @t1 = @num - 1
                              set @t2 = @year - 1
                          end

                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @t2
                               and a.periodenum = @t1
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else if ( @period = 'RMCY' ) -- RANGE MONTH CURRENT YEAR  
                    begin
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @year
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else if ( @period = 'RMLY' ) -- RANGE MONTH CURRENT YEAR  
                    begin
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @year - 1
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else if ( @period = 'YTOD' ) -- RANGE MONTH CURRENT YEAR  
                    begin
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @year
                               and a.periodenum <= @num
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end
                  else if ( @period = '' ) -- RANGE MONTH CURRENT YEAR  
                    begin
                        insert into @tHasil
                        select b.branchcode,
                               a.fiscalyear,
                               a.accountno,
                               a.periodenum,
                               Isnull(Sum(Isnull(a.beginbalance, 0)), 0) as
                               BeginBalance
                               ,
                               Isnull(Sum(Isnull(a.dbamount, 0))
                               , 0)     as DbAmount,
                               Isnull(Sum(Isnull(a.cramount, 0)), 0)     as
                               CrAmount,
                               b.rowgroup,
                               b.rownum,
                               case @colType
                                 when 'A' then @period
                                 else @colType
                               end
                               ReffCode,
                               @seqNo
                        from   gltraccbalance a
                               inner join #taccount b
                                       on b.branchcode = a.branchcode
                                          and b.accountno = a.accountno
                        where  a.companycode = @company
                               and a.fiscalyear = @year
                        group  by a.companycode,
                                  b.branchcode,
                                  a.fiscalyear,
                                  a.accountno,
                                  a.periodenum,
                                  b.rowgroup,
                                  b.rownum
                    end

                  fetch next from colflex into @period, @colType, @seqNo
              end

            close colflex

            deallocate colflex

            select *
            into   #tacccurrent
            from   (select distinct acccurrentearnings
                    from   fnsystemconfigdtl
                    where  companycode = @company
                           and branchcode = case @IsHq
                                              when '1' then branchcode
                                              else @branchHold
                                            end)#tAccCurrent

            insert into glflexreportsubdtl
            select @company          CompanyCode,
                   @branchHold       BranchCode,
                   @reportId         RepportID,
                   a.rowgroup,
                   a.rownum,
                   a.accountno,
                   a.reffcode,
                   a.seqno,
                   a.fiscalyear,
                   a.periodenum,
                   Sum(beginbalance) BeginBalance,
                   Sum(dbamount)     DbAmount,
                   Sum(cramount)     CrAmount
            from   @tHasil a
            where  accountno not in (select acccurrentearnings
                                     from   #tacccurrent)
            group  by rowgroup,
                      rownum,
                      accountno,
                      reffcode,
                      seqno,
                      fiscalyear,
                      periodenum

            -- Account Current Earnings --  
            ------------------------------  
            insert into glflexreportsubdtl
            select @company                               CompanyCode,
                   @branchHold                            BranchCode,
                   @reportId                              RepportID,
                   a.rowgroup,
                   a.rownum,
                   a.accountno,
                   a.reffcode,
                   a.seqno,
                   a.fiscalyear,
                   a.periodenum,
                   (select Sum(beginbalance)
                    from   gltraccbalance
                    where  companycode = @company
                           and branchcode = a.branchcode
                           and accountno in (select accountno
                                             from   gnmstaccount
                                             where  companycode = @company
                                                    and
                                            branchcode = a.branchcode
                                                    and accounttype in
                                                        ( 300, 400 ))
                           and fiscalyear = a.fiscalyear
                           and periodenum = a.periodenum) BeginBalance,
                   (select Sum(dbamount)
                    from   gltraccbalance
                    where  companycode = @company
                           and branchcode = a.branchcode
                           and accountno in (select accountno
                                             from   gnmstaccount
                                             where  companycode = @company
                                                    and
                                            branchcode = a.branchcode
                                                    and accounttype in
                                                        ( 300, 400 ))
                           and fiscalyear = a.fiscalyear
                           and periodenum = a.periodenum) Debet,
                   (select Sum(cramount)
                    from   gltraccbalance
                    where  companycode = @company
                           and branchcode = a.branchcode
                           and accountno in (select accountno
                                             from   gnmstaccount
                                             where  companycode = @company
                                                    and
                                            branchcode = a.branchcode
                                                    and accounttype in
                                                        ( 300, 400 ))
                           and fiscalyear = a.fiscalyear
                           and periodenum = a.periodenum) Credit
            from   @tHasil a
            where  exists (select 1
                           from   fnsystemconfigdtl
                           where  companycode = @company
                                  and branchcode = a.branchcode
                                  and acccurrentearnings = a.accountno)

            drop table #tacccurrent
        end

      drop table #tbranch

      drop table #taccount
  end
GO
ALTER procedure [dbo].[uspfn_SvTrnServiceSaveDtl]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@BillType varchar(15),
    @ItemType varchar(15),
    @TaskPart varchar(20),
    @HourQty numeric(18,2),
    @PartSeq numeric(5,2),
    @UserPrice bit = 0,
    @TaskPrice numeric(18,0) = 0,
    @DiscPct numeric(5,2) = 0,
	@UserID varchar(15)
as      

declare @errmsg varchar(max)
if(not exists(select 1 from gnMstLookupDtl
		   where 1 = 1
			 and CompanyCode = @CompanyCode
			 and CodeID = 'SPK_FLAG'
			 and LookUpValue = 'LOCK_NVAL'
			 and ParaValue = '0')
   and (@TaskPrice = 0))
begin
	set @errmsg = 'mohon di check bahwa harga tidak boleh nol..'
	raiserror (@errmsg,16,1);
end

if @ItemType = 'L'
begin
	exec uspfn_SvTrnServiceSaveTask 
			 @CompanyCode=@CompanyCode,@BranchCode=@BranchCode,@ProductType=@ProductType
			,@ServiceNo=@ServiceNo,@BillType=@BillType,@DiscPct=@DiscPct
			,@OperationNo=@TaskPart,@OperationHour=@HourQty,@UserID=@UserID
			,@UserPrice=@UserPrice,@TaskPrice=@TaskPrice
end
else
begin
	exec uspfn_SvTrnServiceSaveItem @CompanyCode,@BranchCode,@ProductType,@ServiceNo,@BillType,@TaskPart,@HourQty,@PartSeq,@UserID,@DiscPct=@DiscPct	
end

exec uspfn_SvTrnServiceReCalculate @CompanyCode,@BranchCode,@ProductType,@ServiceNo,0
GO
ALTER procedure [dbo].[usprpt_SvRpReport032] 
(
	@CompanyCode	VARCHAR(15),
	@BranchCode		VARCHAR(15),
    @StartDate		VARCHAR(8),
	@EndDate		VARCHAR(8)
)
AS
BEGIN 
-- MAIN DATA --
	select a.ReturnNo
		, a.ReturnDate
		, a.FPJNo
		, a.FPJGovNo
		, a.FPJDate
		, a.InvoiceNo
		, a.InvoiceDate
		, a.CustomerCode CustCode
		, ISNULL(b.CustomerName, '') CustName
	from SvTrnReturn a 
	left join gnMstCustomer b on b.CompanyCode=a.CompanyCode 
		and b.CustomerCode=a.CustomerCode	
	where a.CompanyCode=@CompanyCode
		and a.BranchCode=@BranchCode
		and CONVERT(varchar, a.ReturnDate,112) between @StartDate and @EndDate 
	order by a.ReturnNo, a.ReturnDate

-- SUB REPORT DATA --
	select * into #t1 from (
	select a.BranchCode
		, a.InvoiceNo
		, d.ReturnNo
		, '1' ID	
		, a.OperationNo Code
		, isnull(c.Description, '') CodeName
		, a.OperationHour Qty
		, a.OperationCost Bruto
		, 0 DiscPct
		, 0 DiscAmt
--		, a.OperationCost NettAmt
		, a.OperationCost*a.OperationHour NettAmt --Perubahan
--		, a.OperationCost PPnAmt
		, a.OperationCost*a.OperationHour*0.1 PPnAmt --Perubahan
--		, a.OperationCost Total
		, (a.OperationCost*a.OperationHour)+(a.OperationCost*a.OperationHour*0.1) Total --Perubahan
		
	from svTrnInvTask a 
	inner join svTrnInvoice b on b.CompanyCode=a.CompanyCode
		and b.BranchCode=a.BranchCode
		and b.ProductType=a.ProductType
		and b.InvoiceNo=a.InvoiceNo
	left join svMstTask c on c.CompanyCode=a.CompanyCode
		and c.ProductType=b.ProductType
		and c.BasicModel=b.BasicModel
		and c.JobType=b.JobType
		and c.OperationNo=a.OperationNo
	left join SvTrnReturn d on d.CompanyCode=a.CompanyCode
		and d.BranchCode=a.BranchCode
		and d.ProductType=a.ProductType
		and d.InvoiceNo=a.InvoiceNo	
	where a.CompanyCode=@CompanyCode
		and a.BranchCode=@BranchCode
		and CONVERT(varchar, d.ReturnDate, 112 ) between @StartDate and @EndDate
	union
	select a.BranchCode
		, c.InvoiceNo
		, a.ReturnNo
		, '2' ID
		, a.PartNo Code
		, isnull(b.PartName,'-') CodeName
		, a.QtyReturn Qty
		, a.RetailPrice Bruto
		, a.DiscPct
		, a.DiscAmt
		--, a.NetReturAmt NettAmt
		, (a.NetReturAmt - a.DiscAmt) NettAmt --Perubahan
--		, a.PPNAmt
		, a.PPNAmt-(a.DiscAmt*0.1)--Perubahan
--		, a.TotReturAmt Total
		, (a.NetReturAmt - a.DiscAmt)+(a.PPNAmt-(a.DiscAmt*0.1))--Perubahan
	from spTrnSRturSrvDtl a
	left join spMstItemInfo b on b.CompanyCode=a.CompanyCode and b.PartNo=a.PartNo
	left join SvTrnReturn c on c.CompanyCode=a.CompanyCode
		and c.BranchCode=a.BranchCode
		and c.ProductType=a.ProductType
		and c.ReturnNo=a.ReturnNo
	where a.CompanyCode=@CompanyCode
		and a.BranchCode=@BranchCode
		and CONVERT(varchar, c.ReturnDate, 112 ) between @StartDate and @EndDate)#t1
		
	select * from #t1 a
	order by a.ReturnNo, ID, Code

	
	drop table #t1

END
-------------------------------------------------------- BATAS ----------------------------------------------------------
GO
-- =================================================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<LAPORAN PENJUALAN PER CLASS, AREA, KOTA DAN LOKASI>
-- =================================================================



ALTER procedure [dbo].[usprpt_SpRpSum013]
	@CompanyCode VARCHAR(15),
	@BranchCode VARCHAR(15),
	@Pilihan VARCHAR(10),
	@PeriodeBeg DATETIME,
	@PeriodeEnd DATETIME,
	@CodeReportBeg VARCHAR(50),
	@CodeReportEnd VARCHAR(50),
	@TypeOfGoods VARCHAR(5)
AS

-- usprpt_SpRpSum013 '6006406','6006406', 'CLASS', '2012-06-01', '2012-06-30', '00', '99', '%'
-- usprpt_SpRpSum013 '6006406','6006406', 'AREA',  '2012-06-01', '2012-06-30', '00', '99', '%'
-- usprpt_SpRpSum013 '6006406','6006406', 'KOTA',  '2012-06-01', '2012-06-30', '00', '99', '%'
-- usprpt_SpRpSum013 '6006406','6006406', 'LOKASI',  '2012-06-01', '2012-06-30', '00', '99', '%'

IF @Pilihan = 'CLASS'
   BEGIN  -- Penjualan per Class

      SELECT * INTO #t1 
        FROM ( SELECT CompanyCode, 
                      CategoryCode, 
	                  SUM(ISNULL(PenjualanBersih,0))        PenjualanBersih,
	                  SUM(ISNULL(TotFinalSalesAmt,0))       TotFinalSalesAmt,
	                  SUM(ISNULL(TotSupplySlipBersih,0))    TotSupplySlipBersih,
	                  SUM(ISNULL(TotSupplySlipKumulatif,0)) TotSupplySlipKumulatif
	             FROM ( SELECT cus.CompanyCode, cus.CustomerCode, cus.CategoryCode,
  	                           ( SELECT SUM(ISNULL(fpja.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpja
	                              WHERE fpja.CompanyCode=@CompanyCode
                                    AND fpja.BranchCode=@BranchCode
	                                AND YEAR( fpja.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpja.FpjDate) BETWEEN MONTH(@PeriodeBeg) AND MONTH(@PeriodeEnd) 
	                                AND fpja.CustomerCodeBill=cus.CustomerCode
	                                AND fpja.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS PenjualanBersih,
	                           ( SELECT SUM(ISNULL(fpjb.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpjb
	                              WHERE fpjb.CompanyCode=@CompanyCode
	                                AND fpjb.BranchCode=@BranchCode
	                                AND YEAR( fpjb.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpjb.FpjDate) BETWEEN 1                  AND MONTH(@PeriodeEnd) 
	                                AND fpjb.CustomerCodeBill=cus.CustomerCode
	                                AND fpjb.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotFinalSalesAmt,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate)=YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipBersih,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate) =YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)<=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipKumulatif
	                      FROM gnMstCustomer cus--, gnMstLookUpDtl lup
	                     WHERE cus.CompanyCode=@CompanyCode
	                       AND (cus.CategoryCode BETWEEN  @CodeReportBeg AND @CodeReportEnd OR ISNULL(cus.CategoryCode,'')='')
	                     GROUP BY cus.CompanyCode, cus.CustomerCode, cus.CategoryCode) subqry
	            GROUP BY CompanyCode, CategoryCode ) #t1

	  SELECT @PeriodeBeg PeriodeBeg, @PeriodeEnd PeriodeEnd, @Pilihan ReportSales, 
	         (#t1.CategoryCode + ' - ' + lup.LookUpValueName) ReportName,
	         #t1.PenjualanBersih,     #t1.TotFinalSalesAmt,
	         #t1.TotSupplySlipBersih, #t1.TotSupplySlipKumulatif
	    FROM #t1
	         LEFT JOIN gnMstLookUpDtl lup
	                ON lup.CompanyCode=#t1.CompanyCode
	               AND lup.CodeID='CSCT'
	               AND lup.LookUpValue=#t1.CategoryCode
	   ORDER BY #t1.CategoryCode
      DROP TABLE #t1
   END

ELSE IF @Pilihan = 'AREA'
   BEGIN  -- Penjualan per Area

      SELECT * INTO #t2
        FROM ( SELECT CompanyCode, 
                      ProvinceCode, 
	                  SUM(ISNULL(PenjualanBersih,0))        PenjualanBersih,
	                  SUM(ISNULL(TotFinalSalesAmt,0))       TotFinalSalesAmt,
	                  SUM(ISNULL(TotSupplySlipBersih,0))    TotSupplySlipBersih,
	                  SUM(ISNULL(TotSupplySlipKumulatif,0)) TotSupplySlipKumulatif
	             FROM ( SELECT cus.CompanyCode, cus.CustomerCode, cus.ProvinceCode,
  	                           ( SELECT SUM(ISNULL(fpja.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpja
	                              WHERE fpja.CompanyCode=@CompanyCode
                                    AND fpja.BranchCode=@BranchCode
	                                AND YEAR( fpja.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpja.FpjDate) BETWEEN MONTH(@PeriodeBeg) AND MONTH(@PeriodeEnd) 
	                                AND fpja.CustomerCodeBill=cus.CustomerCode
	                                AND fpja.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS PenjualanBersih,
	                           ( SELECT SUM(ISNULL(fpjb.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpjb
	                              WHERE fpjb.CompanyCode=@CompanyCode
	                                AND fpjb.BranchCode=@BranchCode
	                                AND YEAR( fpjb.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpjb.FpjDate) BETWEEN 1                  AND MONTH(@PeriodeEnd) 
	                                AND fpjb.CustomerCodeBill=cus.CustomerCode
	                                AND fpjb.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotFinalSalesAmt,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate)=YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipBersih,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate) =YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)<=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipKumulatif
	                      FROM gnMstCustomer cus--, gnMstLookUpDtl lup
	                     WHERE cus.CompanyCode=@CompanyCode
	                       AND (cus.ProvinceCode BETWEEN  @CodeReportBeg AND @CodeReportEnd OR ISNULL(cus.ProvinceCode,'')='')
	                     GROUP BY cus.CompanyCode, cus.CustomerCode, cus.ProvinceCode) subqry
	            GROUP BY CompanyCode, ProvinceCode ) #t2

	  SELECT @PeriodeBeg PeriodeBeg, @PeriodeEnd PeriodeEnd, @Pilihan ReportSales, 
	         (#t2.ProvinceCode + ' - ' + lup.LookUpValueName) ReportName,
	         #t2.PenjualanBersih,     #t2.TotFinalSalesAmt,
	         #t2.TotSupplySlipBersih, #t2.TotSupplySlipKumulatif
	    FROM #t2
	         LEFT JOIN gnMstLookUpDtl lup
	                ON lup.CompanyCode=#t2.CompanyCode
	               AND lup.CodeID='PROV'
	               AND lup.LookUpValue=#t2.ProvinceCode
	   ORDER BY #t2.ProvinceCode
      DROP TABLE #t2
   END

ELSE IF @Pilihan = 'KOTA'
   BEGIN  -- Penjualan per Kota

      SELECT * INTO #t3
        FROM ( SELECT CompanyCode, 
                      CityCode, 
	                  SUM(ISNULL(PenjualanBersih,0))        PenjualanBersih,
	                  SUM(ISNULL(TotFinalSalesAmt,0))       TotFinalSalesAmt,
	                  SUM(ISNULL(TotSupplySlipBersih,0))    TotSupplySlipBersih,
	                  SUM(ISNULL(TotSupplySlipKumulatif,0)) TotSupplySlipKumulatif
	             FROM ( SELECT cus.CompanyCode, cus.CustomerCode, cus.CityCode,
  	                           ( SELECT SUM(ISNULL(fpja.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpja
	                              WHERE fpja.CompanyCode=@CompanyCode
                                    AND fpja.BranchCode=@BranchCode
	                                AND YEAR( fpja.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpja.FpjDate) BETWEEN MONTH(@PeriodeBeg) AND MONTH(@PeriodeEnd) 
	                                AND fpja.CustomerCodeBill=cus.CustomerCode
	                                AND fpja.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS PenjualanBersih,
	                           ( SELECT SUM(ISNULL(fpjb.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpjb
	                              WHERE fpjb.CompanyCode=@CompanyCode
	                                AND fpjb.BranchCode=@BranchCode
	                                AND YEAR( fpjb.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpjb.FpjDate) BETWEEN 1                  AND MONTH(@PeriodeEnd) 
	                                AND fpjb.CustomerCodeBill=cus.CustomerCode
	                                AND fpjb.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotFinalSalesAmt,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate)=YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipBersih,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate) =YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)<=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipKumulatif
	                      FROM gnMstCustomer cus--, gnMstLookUpDtl lup
	                     WHERE cus.CompanyCode=@CompanyCode
	                       AND (cus.CityCode BETWEEN  @CodeReportBeg AND @CodeReportEnd OR ISNULL(cus.ProvinceCode,'')='')
	                     GROUP BY cus.CompanyCode, cus.CustomerCode, cus.CityCode) subqry
	            GROUP BY CompanyCode, CityCode ) #t3

	  SELECT @PeriodeBeg PeriodeBeg, @PeriodeEnd PeriodeEnd, @Pilihan ReportSales, 
	         (#t3.CityCode + ' - ' + lup.LookUpValueName) ReportName,
	         #t3.PenjualanBersih,     #t3.TotFinalSalesAmt,
	         #t3.TotSupplySlipBersih, #t3.TotSupplySlipKumulatif
	    FROM #t3
	         LEFT JOIN gnMstLookUpDtl lup
	                ON lup.CompanyCode=#t3.CompanyCode
	               AND lup.CodeID='CITY'
	               AND lup.LookUpValue=#t3.CityCode
	   ORDER BY #t3.CityCode
      DROP TABLE #t3
   END

ELSE IF @Pilihan = 'LOKASI'
   BEGIN  -- Penjualan per Lokasi

      SELECT * INTO #t4
        FROM ( SELECT CompanyCode, 
                      AreaCode, 
	                  SUM(ISNULL(PenjualanBersih,0))        PenjualanBersih,
	                  SUM(ISNULL(TotFinalSalesAmt,0))       TotFinalSalesAmt,
	                  SUM(ISNULL(TotSupplySlipBersih,0))    TotSupplySlipBersih,
	                  SUM(ISNULL(TotSupplySlipKumulatif,0)) TotSupplySlipKumulatif
	             FROM ( SELECT cus.CompanyCode, cus.CustomerCode, cus.AreaCode,
  	                           ( SELECT SUM(ISNULL(fpja.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpja
	                              WHERE fpja.CompanyCode=@CompanyCode
                                    AND fpja.BranchCode=@BranchCode
	                                AND YEAR( fpja.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpja.FpjDate) BETWEEN MONTH(@PeriodeBeg) AND MONTH(@PeriodeEnd) 
	                                AND fpja.CustomerCodeBill=cus.CustomerCode
	                                AND fpja.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS PenjualanBersih,
	                           ( SELECT SUM(ISNULL(fpjb.TotDPPAmt,0)) FROM SpTrnSFpjHdr fpjb
	                              WHERE fpjb.CompanyCode=@CompanyCode
	                                AND fpjb.BranchCode=@BranchCode
	                                AND YEAR( fpjb.FpjDate) BETWEEN YEAR( @PeriodeBeg) AND YEAR( @PeriodeEnd)
	                                AND MONTH(fpjb.FpjDate) BETWEEN 1                  AND MONTH(@PeriodeEnd) 
	                                AND fpjb.CustomerCodeBill=cus.CustomerCode
	                                AND fpjb.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotFinalSalesAmt,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate)=YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipBersih,
	                           ( SELECT SUM(ISNULL(lmpa.TotDPPAmt,0)) FROM spTrnSLmpHdr lmpa, spTrnSBPSFHdr bpsa
	                              WHERE lmpa.CompanyCode=bpsa.CompanyCode
	                                AND lmpa.BranchCode=bpsa.BranchCode
	                                AND lmpa.BPSFNo=bpsa.BPSFNo
	                                AND bpsa.SalesType=2
	                                AND lmpa.CompanyCode=@CompanyCode
	                                AND lmpa.BranchCode=@BranchCode
	                                AND YEAR( lmpa.LmpDate) =YEAR( @PeriodeEnd)
	                                AND MONTH(lmpa.LmpDate)<=MONTH(@PeriodeEnd) 
	                                AND lmpa.CustomerCodeBill=cus.CustomerCode
	                                AND lmpa.TypeOfGoods like '' + @TypeOfGoods + ''
	                           ) AS TotSupplySlipKumulatif
	                      FROM gnMstCustomer cus--, gnMstLookUpDtl lup
	                     WHERE cus.CompanyCode=@CompanyCode
	                       AND (cus.AreaCode BETWEEN  @CodeReportBeg AND @CodeReportEnd OR ISNULL(cus.ProvinceCode,'')='')
	                     GROUP BY cus.CompanyCode, cus.CustomerCode, cus.AreaCode) subqry
	            GROUP BY CompanyCode, AreaCode ) #t4

	  SELECT @PeriodeBeg PeriodeBeg, @PeriodeEnd PeriodeEnd, @Pilihan ReportSales, 
	         (#t4.AreaCode + ' - ' + lup.LookUpValueName) ReportName,
	         #t4.PenjualanBersih,     #t4.TotFinalSalesAmt,
	         #t4.TotSupplySlipBersih, #t4.TotSupplySlipKumulatif
	    FROM #t4
	         LEFT JOIN gnMstLookUpDtl lup
	                ON lup.CompanyCode=#t4.CompanyCode
	               AND lup.CodeID='AREA'
	               AND lup.LookUpValue=#t4.AreaCode
	   ORDER BY #t4.AreaCode
      DROP TABLE #t4
   END
GO
ALTER procedure [dbo].[usprpt_SvRpTrn004]
 @CompanyCode VARCHAR(15),  
 @BranchCode VARCHAR(15),   
 @ProductType VARCHAR(15),  
 @InvoiceNo1  varchar(20),  
 @InvoiceNo2  varchar(20)  
as   
  
  
set nocount on  
declare @ShowInvDisc as bit
set @ShowInvDisc  = isnull((select ParaValue from GnMstLookUpDtl where CompanyCode = @CompanyCode and CodeID = 'SRV_FLAG' and LookUpValue = 'SHOW_INVDISC'), 0)

select * into #t_inv from (  
select (row_number() over (order by InvoiceNo)) as RecNo, InvoiceNo from svTrnInvoice  
 where 1 = 1  
   and CompanyCode = @CompanyCode  
   and BranchCode = @BranchCode  
   and InvoiceNo between @InvoiceNo1 and @InvoiceNo2  
)#t_inv  
  
declare @n int set @n = 0  
declare @InvoiceNo varchar(20)  
while (@n < (select max(RecNo) from #t_inv))  
begin  
 set @n = @n + 1  
 set @InvoiceNo = (select InvoiceNo from #t_inv where RecNo = @n)  
  
 select * into #inv from (  
 select InvoiceNo  
   , CustomerCodeBill  
   , ltrim(rtrim(ServiceRequestDesc)) as ServiceRequestDesc
   , BasicModel  
   , JobType   
   from svTrnInvoice  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode  = @BranchCode  
    and ProductTYpe = @ProductTYpe  
    and InvoiceNo   = @InvoiceNo  
 ) #inv  
  
 select * into #tsk from (  
 select row_number() over (order by a.OperationNo) RecNo  
      , a.OperationNo  
      , a.OperationHour  
      , a.OperationCost  
      , b.BasicModel  
      , b.JobType   
      , (a.OperationHour * a.OperationCost) TotalPrice  
      , a.DiscPct
   from svTrnInvTask a, #inv b  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductTYpe = @ProductTYpe  
    and a.InvoiceNo   = b.InvoiceNo  
    and isnull(a.IsSubCon, 0) = 0  
 ) #tsk  
  
 select * into #itm from (  
 select row_number() over (order by PartNo) RecNo  
      , PartNo  
      , (SupplyQty - ReturnQty) SupplyQty  
      , RetailPrice  
      , ((SupplyQty - ReturnQty) * RetailPrice) TotalPrice  
      , DiscPct
   from svTrnInvItem  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode  = @BranchCode  
    and ProductTYpe = @ProductTYpe  
    and InvoiceNo   = @InvoiceNo  
    and RetailPrice > 0
 ) #itm  
  
 select * into #oth from (  
 select row_number() over (order by a.OperationNo) RecNo
      , a.OperationNo
      , a.OperationHour
      , a.OperationCost
      , b.BasicModel
      , b.JobType   
      , (a.OperationHour * a.OperationCost) TotalPrice  
      , a.DiscPct
   from svTrnInvTask a, #inv b  
  where 1 = 1  
       and a.CompanyCode = @CompanyCode  
       and a.BranchCode  = @BranchCode  
       and a.ProductTYpe = @ProductTYpe  
    and a.InvoiceNo   = b.InvoiceNo  
    and isnull(a.IsSubCon, 0) = 1  
 ) #oth  
    
  
 declare @dtl as table (DetailDesc varchar(300),partNo varchar(20),partName varchar(max),supplyQty varchar(8),retailPrice varchar(18),totalPrice varchar(18),dataType varchar(50),seq1 int,seq2 varchar(20))  
 
 -- Insert Jasa Perbaikan  
 if exists (select * from #tsk)  
 begin  
 
  insert into @dtl values ('','','','','','','JASA PERBAIKAN', 1 + (@n * 1000), 1)  
  insert into @dtl values ('JASA PERBAIKAN','','JASA PERBAIKAN','','','','JASA PERBAIKAN', 1 + (@n * 1000), 2)  
  
  insert into @dtl  
  select right((replicate(' ',2) + convert(varchar,a.RecNo)),3)  
    + ' '  
    + left((  
    + case when (isnull(a.DiscPct, 0) = 0 or @ShowInvDisc = 0) 
      then 
		 isnull((select top 1 b.Description  
		   from svMstTask b  
		  where b.CompanyCode = @CompanyCode  
			and b.ProductType = @ProductType  
			and b.BasicModel  = a.BasicModel  
			and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')  
			and b.OperationNo = a.OperationNo  
		  ),a.OperationNo)  
      else left(
		 isnull((select top 1 b.Description  
		   from svMstTask b  
		  where b.CompanyCode = @CompanyCode  
			and b.ProductType = @ProductType  
			and b.BasicModel  = a.BasicModel  
			and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')  
			and b.OperationNo = a.OperationNo  
		  ),a.OperationNo) + replicate(' ', 53)
		  , 53)  
        + ' (' + convert(varchar, cast(a.DiscPct as money), 1) + '%)'
      end 				
    + replicate(' ',88)  
    ),88)  
    + right((  
    + replicate(' ',18)  
    + left(cast(convert(varchar,cast(a.TotalPrice as money),1) as varchar),len(cast(convert(varchar,cast(a.TotalPrice as money),1) as varchar))-3)  
    ),18)  
    , '',isnull((select top 1 b.Description  
       from svMstTask b  
      where b.CompanyCode = @CompanyCode  
        and b.ProductType = @ProductType  
        and b.BasicModel  = a.BasicModel  
        and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')  
        and b.OperationNo = a.OperationNo  
      ),a.OperationNo)  
    , '','',convert(varchar,cast(a.TotalPrice as money),1),'JASA PERBAIKAN'  
    , 1 + (@n * 1000)  -- user for group order by
    , a.RecNo + 2      -- used for ordering by
    from #tsk a  
    left join svMstTask b  
   on b.CompanyCode = @CompanyCode  
     and b.ProductType = @ProductType  
     and b.BasicModel  = a.BasicModel  
     and b.JobType     = a.JobType  
     and b.OperationNo = a.OperationNo  
 end  
  
 -- Insert Pemakaian Sparepart / Material  
 if exists (select * from #itm)  
 begin  
  insert into @dtl values ('','','','','','','PEMAKAIAN SPAREPART / MATERIAL', 2 + (@n * 1000), 1)  
  insert into @dtl values ('PEMAKAIAN SPAREPART / MATERIAL','','PEMAKAIAN SPAREPART / MATERIAL','','','','PEMAKAIAN SPAREPART / MATERIAL', 2 + (@n * 1000), 2)  
  
  insert into @dtl  
  select right((replicate(' ',3) + convert(varchar,a.RecNo)),3)  
    + ' '  
    + left((  
      a.PartNo  
    + replicate(' ',15)  
    ),15) 
    + ' ' 
    + left((  
    + case when (isnull(a.DiscPct, 0) = 0 or @ShowInvDisc = 0) 
      then rtrim(b.PartName)
      else 
        left(rtrim(b.PartName) + replicate(' ', 37), 37) 
        + ' (' + convert(varchar, cast(a.DiscPct as money), 1) + '%)'
      end 				
    + replicate(' ',46)  
    ),46)  
    + right((  
    + replicate(' ',8)  
    + convert(varchar, a.SupplyQty)  
    ),8)  
    + right((  
    + replicate(' ',18)  
    + left(cast(convert(varchar,cast(a.RetailPrice as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailPrice as money),1) as varchar))-3)  
    ),18)  
    + right((  
    + replicate(' ',18)  
    + left(cast(convert(varchar,cast(a.TotalPrice as money),1) as varchar),len(cast(convert(varchar,cast(a.TotalPrice as money),1) as varchar))-3)  
    ),18)  
    , a.PartNo,b.PartName,convert(varchar, a.SupplyQty),convert(varchar,cast(a.RetailPrice as money),1),convert(varchar,cast(a.TotalPrice as money),1)  
    , 'PEMAKAIAN SPAREPART / MATERIAL'  
    , 2 + (@n * 1000), a.RecNo + 2
    from #itm a  
    left join spMstItemInfo b  
   on b.PartNo = a.PartNo  
     and b.CompanyCode = @CompanyCode  
     and b.ProductType = @ProductType 
 end  
   
 -- Insert Jasa SubCon (Lain - lain)  
 if exists (select * from #oth)  
 begin  
  insert into @dtl values ('','','','','','','LAIN - LAIN', 3 + (@n * 1000), 1)  
  insert into @dtl values ('LAIN - LAIN','','LAIN - LAIN','','','','LAIN - LAIN', 3 + (@n * 1000), 2)  
  
  insert into @dtl  
  select right((replicate(' ',2) + convert(varchar,a.RecNo)),3)  
    + ' '  
    + left((  
    + case when (isnull(a.DiscPct, 0) = 0 or @ShowInvDisc = 0) 
      then 
		 isnull((select top 1 b.Description  
		   from svMstTask b  
		  where b.CompanyCode = @CompanyCode  
			and b.ProductType = @ProductType  
			and b.BasicModel  = a.BasicModel  
			and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')  
			and b.OperationNo = a.OperationNo  
		  ),a.OperationNo)  
      else left(
		 isnull((select top 1 b.Description  
		   from svMstTask b  
		  where b.CompanyCode = @CompanyCode  
			and b.ProductType = @ProductType  
			and b.BasicModel  = a.BasicModel  
			and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')  
			and b.OperationNo = a.OperationNo  
		  ),a.OperationNo) + replicate(' ', 53)
		  , 53)  
        + ' (' + convert(varchar, cast(a.DiscPct as money), 1) + '%)'
      end 				
    + replicate(' ',88)  
    ),88)  
    + right((  
    + replicate(' ',18)  
    + left(cast(convert(varchar,cast(a.TotalPrice as money),1) as varchar),len(cast(convert(varchar,cast(a.TotalPrice as money),1) as varchar))-3)  
    ),18)  
    , '', isnull((select top 1 b.Description  
       from svMstTask b  
      where b.CompanyCode = @CompanyCode  
        and b.ProductType = @ProductType  
        and b.BasicModel  = a.BasicModel  
        and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')  
        and b.OperationNo = a.OperationNo  
      ),a.OperationNo)  
    , '', '', convert(varchar,cast(a.TotalPrice as money),1),'LAIN - LAIN'  
    , 3 + (@n * 1000), a.RecNo + 2
    from #oth a  
    left join svMstTask b  
   on b.CompanyCode = @CompanyCode  
     and b.ProductType = @ProductType  
     and b.BasicModel  = a.BasicModel  
     and b.JobType     = a.JobType  
     and b.OperationNo = a.OperationNo  
 end  
  
 ---------------------------------------------------------------------------------------------------  
 ---------------------------------------------------------------------------------------------------  
 select * into #res from (  
 select c.NPWPNo  
   , c.SKPNo PKPNo  
   , c.SKPDate PKPDate  
   , rtrim(d.CustomerName) + ' (' + rtrim(d.CustomerCode) + ')' CustName  
   , d.Address1 CustAddr1  
   , d.Address2 CustAddr2  
   , d.Address3 CustAddr3  
   , d.Address4 CustAddr4  
   , rtrim(d.PhoneNo) + '  ' + rtrim(d.HPNo) CustPhone  
   , d.NPWPNo CustNPWP  
   , e.PoliceRegNo  
   , e.BasicModel  
   , rtrim(convert(varchar, e.ChassisNo)) Chassis  
   , rtrim(convert(varchar, e.EngineNo)) Engine  
   , e.Odometer  
   , e.InvoiceNo  
   , e.InvoiceDate  
   , e.FPJNo  
   , e.FPJDate  
   , e.JobOrderNo  
   , e.JobOrderDate  
   , (case e.TOPDays when 0 then 'Tunai' else 'Kredit' end) as Payment  
   , e.DueDate  
   , ltrim(rtrim(b.ServiceRequestDesc)) as ServiceRequestDesc
   , a.DetailDesc   
   , (e.LaborDiscAmt + e.MaterialDiscAmt + e.PartsDiscAmt + e.TotalDPPAmt) as TotalDtlAmt  
   , (e.LaborDiscAmt + e.MaterialDiscAmt + e.PartsDiscAmt) as DiscAmt  
   , e.TotalDPPAmt  
   , e.PpnPct as TaxPct  
   , e.TotalPpnAmt as TaxAmt  
   , e.TotalSrvAmt  
   , e.Remarks  
   , e.PrintSeq  
   , f.LookupValueName as City  
   , g.ProductionYear  
   , a.PartNo  
   , a.PartName  
   , a.supplyQty  
   , a.retailPrice  
   , a.totalPrice  
   , a.dataType  
   , d.CustomerCode  
   , d.CustomerName  
   , a.Seq1, a.Seq2
   from @dtl a, #inv b  
   left join gnMstCoProfile c  
     on c.CompanyCode = @CompanyCode  
    and c.BranchCode = @BranchCode  
   left join gnMstCustomer d  
     on d.CompanyCode = @CompanyCode  
    and d.CustomerCode = b.CustomerCodeBill  
   left join svTrnInvoice e  
     on e.CompanyCode = @CompanyCode  
    and e.BranchCode = @BranchCode  
    and e.ProductType = @ProductType  
    and e.InvoiceNo = b.InvoiceNo  
   left join GnMstLookupDtl f  
  on f.CompanyCode = @CompanyCode  
    and f.LookUpValue = c.CityCode  
   left join svMstCustomerVehicle g   
  on g.CompanyCode=e.CompanyCode  
    and g.ChassisCode=e.ChassisCode  
    and g.ChassisNo=e.ChassisNo    
 )#res  

 if (@n = 1)    
 begin  
  select * into #t_res from (select * from #res)#
 end  
   
 if (@n > 1)   
 begin
  insert into #t_res select * from #res  
 end

 drop table #inv  
 drop table #tsk  
 drop table #itm  
 drop table #oth  
 drop table #res  
 delete @dtl   
end  
   
drop table #t_inv  
if (@n > 0)   
begin  
 select *, Remarks as Remark
      , (select top 1 ParaValue
           from gnMstLookUpDtl
          where CompanyCode = @CompanyCode
            and CodeID = 'SHN_INFO'
            and LookUpValue = 'SERVICE') ShowShnInfo
      , (case when (@ShowInvDisc = 1 and isnull(DiscAmt, 0) > 0) then ' Diskon' else '' end) as DiscLabel
   from #t_res 
  order by Seq1, convert(int, Seq2)
   drop table #t_res  
end
GO
ALTER procedure [dbo].[usprpt_SvRpTrn004Alt]
 @CompanyCode VARCHAR(15),  
 @BranchCode VARCHAR(15),   
 @ProductType VARCHAR(15),  
 @InvoiceNo1  varchar(20),  
 @InvoiceNo2  varchar(20)  
as   
  
set nocount on  
declare @ShowInvDisc as bit
set @ShowInvDisc  = isnull((select ParaValue from GnMstLookUpDtl where CompanyCode = @CompanyCode and CodeID = 'SRV_FLAG' and LookUpValue = 'SHOW_INVDISC'), 0)

select * into #t_inv from (  
select (row_number() over (order by InvoiceNo)) as RecNo, InvoiceNo from svTrnInvoice  
 where 1 = 1  
   and CompanyCode = @CompanyCode  
   and BranchCode = @BranchCode  
   and InvoiceNo between @InvoiceNo1 and @InvoiceNo2  
)#t_inv  
  
declare @n int set @n = 0  
declare @InvoiceNo varchar(20)  
while (@n < (select max(RecNo) from #t_inv))  
begin  
 set @n = @n + 1  
 set @InvoiceNo = (select InvoiceNo from #t_inv where RecNo = @n)  
  
 select * into #inv from (  
 select InvoiceNo  
   , CustomerCodeBill  
   , ServiceRequestDesc  
   , BasicModel  
   , JobType   
   from svTrnInvoice  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode  = @BranchCode  
    and ProductTYpe = @ProductTYpe  
    and InvoiceNo   = @InvoiceNo  
 ) #inv  
  
 select * into #tsk from (  
 select row_number() over (order by a.OperationNo) RecNo  
      , a.OperationNo  
      , a.OperationHour  
      , a.OperationCost  
      , b.BasicModel  
      , b.JobType   
      , (a.OperationHour * a.OperationCost) SubTotal  
      , a.DiscPct
   from svTrnInvTask a, #inv b  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductTYpe = @ProductTYpe  
    and a.InvoiceNo   = b.InvoiceNo  
    and isnull(a.IsSubCon, 0) = 0  
 ) #tsk  
  
 select * into #itm from (  
 select row_number() over (order by PartNo) RecNo  
      , PartNo  
      , (SupplyQty - ReturnQty) SupplyQty  
      , RetailPrice  
      , ((SupplyQty - ReturnQty) * RetailPrice) SubTotal  
      , DiscPct
   from svTrnInvItem  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode  = @BranchCode  
    and ProductTYpe = @ProductTYpe  
    and InvoiceNo   = @InvoiceNo  
    and RetailPrice > 0
 ) #itm  
  
 select * into #oth from (  
 select row_number() over (order by a.OperationNo) RecNo
      , a.OperationNo
      , a.OperationHour
      , a.OperationCost
      , b.BasicModel
      , b.JobType   
      , (a.OperationHour * a.OperationCost) SubTotal  
      , a.DiscPct
   from svTrnInvTask a, #inv b  
  where 1 = 1  
       and a.CompanyCode = @CompanyCode  
       and a.BranchCode  = @BranchCode  
       and a.ProductTYpe = @ProductTYpe  
    and a.InvoiceNo   = b.InvoiceNo  
    and isnull(a.IsSubCon, 0) = 1  
 ) #oth  
    
  
 declare @dtl as table 
 (
    DetailDesc varchar(300),
    seq1 int,seq2 varchar(20), 
    DiscPct numeric(8, 2),
    SupplyQty numeric(8, 2),
    RetailPrice numeric(18, 2),
    SubTotal numeric(18, 2),
    TotalNet numeric(18, 2)
 )  

 declare @subtotl numeric(18, 2), @discamt numeric(18, 2), @netamt numeric(18, 2), @subinfo varchar(100)
 
 -- Insert Jasa Perbaikan  
 if exists (select * from #tsk)  
 begin  
  insert into @dtl values ('', 1 + (@n * 1000), 1, null, null, null, null, null)  
  insert into @dtl values ('JASA PERBAIKAN', 1 + (@n * 1000), 2, null, null, null, null, null)  
  
  begin
      set @subtotl = isnull((select sum(isnull(subtotal, 0)) from #tsk), 0)
      set @discamt = isnull((select sum(isnull(subtotal, 0) * isnull(discpct, 0) * 0.01) from #tsk), 0)
      
      set @subinfo = 'Sub Total: ' 
                   + substring(convert(varchar, convert(money, @subtotl), 1), 1
                   , len(convert(varchar, convert(money, @subtotl), 1)) - 3)
                   + replicate(' ', 8)
                   + 'Potongan: '
                   + substring(convert(varchar, convert(money, @discamt), 1), 1
                   , len(convert(varchar, convert(money, @discamt), 1)) - 3)
                   + replicate(' ', 8)
                   + 'Total: '
                   + substring(convert(varchar, convert(money, @subtotl - @discamt), 1), 1
                   , len(convert(varchar, convert(money, @subtotl - @discamt), 1)) - 3)
      
      insert into @dtl values (replicate(' ', 20) + replicate('-', 91), 1 + (@n * 1000), 901, null, null, null, null, null)  
      insert into @dtl values (replicate(' ', 20) + @subinfo, 1 + (@n * 1000), 902, null, null, null, null, null)  
  end
  
  insert into @dtl  
  select right((replicate(' ',2) + convert(varchar,a.RecNo)),3)  
    + ' ' + isnull((select top 1 b.Description  
                      from svMstTask b  
                     where b.CompanyCode = @CompanyCode  
                        and b.ProductType = @ProductType  
                       and b.BasicModel  = a.BasicModel  
                       and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')  
                       and b.OperationNo = a.OperationNo  
                   ), a.OperationNo)  
    , 1 + (@n * 1000)  -- user for group order by
    , a.RecNo + 2      -- used for ordering by
    , a.DiscPct, a.OperationHour, a.OperationCost, a.SubTotal
    , (100 - a.DiscPct) * a.SubTotal * 0.01 as TotalNet
    from #tsk a  
    left join svMstTask b  
      on b.CompanyCode = @CompanyCode  
     and b.ProductType = @ProductType  
     and b.BasicModel  = a.BasicModel  
     and b.JobType     = a.JobType  
     and b.OperationNo = a.OperationNo  
 end  
  
 -- Insert Pemakaian Sparepart / Material  
 if exists (select * from #itm)  
 begin  
  insert into @dtl values ('', 2 + (@n * 1000), 1, null, null, null, null, null)   
  insert into @dtl values ('PEMAKAIAN SPAREPART / MATERIAL', 2 + (@n * 1000), 2, null, null, null, null, null)  
  
  begin
      set @subtotl = isnull((select sum(isnull(subtotal, 0)) from #itm), 0)
      set @discamt = isnull((select sum(isnull(subtotal, 0) * isnull(discpct, 0) * 0.01) from #itm), 0)
      
      set @subinfo = 'Sub Total: ' 
                   + substring(convert(varchar, convert(money, @subtotl), 1), 1
                   , len(convert(varchar, convert(money, @subtotl), 1)) - 3)
                   + replicate(' ', 8)
                   + 'Potongan: '
                   + substring(convert(varchar, convert(money, @discamt), 1), 1
                   , len(convert(varchar, convert(money, @discamt), 1)) - 3)
                   + replicate(' ', 8)
                   + 'Total: '
                   + substring(convert(varchar, convert(money, @subtotl - @discamt), 1), 1
                   , len(convert(varchar, convert(money, @subtotl - @discamt), 1)) - 3)
      
      insert into @dtl values (replicate(' ', 20) + replicate('-', 91), 2 + (@n * 1000), 901, null, null, null, null, null)  
      insert into @dtl values (replicate(' ', 20) + @subinfo, 2 + (@n * 1000), 902, null, null, null, null, null)  
  end
    
  insert into @dtl  
  select right((replicate(' ',3) + convert(varchar,a.RecNo)),3)  
    + ' ' + left((a.PartNo + replicate(' ',15)),15) 
    + ' ' + b.PartName
    , 2 + (@n * 1000), a.RecNo + 2
    , a.DiscPct, a.SupplyQty, a.RetailPrice, a.SubTotal
    , (100 - a.DiscPct) * a.SubTotal * 0.01 as TotalNet
    from #itm a  
    left join spMstItemInfo b  
   on b.PartNo = a.PartNo  
     and b.CompanyCode = @CompanyCode  
     and b.ProductType = @ProductType 
 end  
   
 -- Insert Jasa SubCon (Lain - lain)  
 if exists (select * from #oth)  
 begin  
  insert into @dtl values ('',3 + (@n * 1000), 1, null, null, null, null, null)  
  insert into @dtl values ('LAIN - LAIN',3 + (@n * 1000), 2, null, null, null, null, null)  
  
  begin
      set @subtotl = isnull((select sum(isnull(subtotal, 0)) from #oth), 0)
      set @discamt = isnull((select sum(isnull(subtotal, 0) * isnull(discpct, 0) * 0.01) from #oth), 0)
      
      set @subinfo = 'Sub Total: ' 
                   + substring(convert(varchar, convert(money, @subtotl), 1), 1
                   , len(convert(varchar, convert(money, @subtotl), 1)) - 3)
                   + replicate(' ', 8)
                   + 'Potongan: '
                   + substring(convert(varchar, convert(money, @discamt), 1), 1
                   , len(convert(varchar, convert(money, @discamt), 1)) - 3)
                   + replicate(' ', 8)
                   + 'Total: '
                   + substring(convert(varchar, convert(money, @subtotl - @discamt), 1), 1
                   , len(convert(varchar, convert(money, @subtotl - @discamt), 1)) - 3)
      
      insert into @dtl values (replicate(' ', 20) + replicate('-', 91), 2 + (@n * 1000), 901, null, null, null, null, null)  
      insert into @dtl values (replicate(' ', 20) + @subinfo, 2 + (@n * 1000), 902, null, null, null, null, null)  
  end

  insert into @dtl  
  select right((replicate(' ',2) + convert(varchar,a.RecNo)),3)  
    + ' ' + isnull((select top 1 b.Description  
                      from svMstTask b 
                     where b.CompanyCode = @CompanyCode
                       and b.ProductType = @ProductType
                       and b.BasicModel  = a.BasicModel
                       and (b.JobType    = a.JobType or b.JobType = 'CLAIM' or b.JobType = 'OTHER')
                       and b.OperationNo = a.OperationNo 
                      ),a.OperationNo)  
    , 3 + (@n * 1000), a.RecNo + 2
    , a.DiscPct, a.OperationHour, a.OperationCost, a.SubTotal
    , (100 - a.DiscPct) * a.SubTotal * 0.01 as TotalNet
    from #oth a  
    left join svMstTask b  
   on b.CompanyCode = @CompanyCode  
     and b.ProductType = @ProductType  
     and b.BasicModel  = a.BasicModel  
     and b.JobType     = a.JobType  
     and b.OperationNo = a.OperationNo  
 end  
  
 ---------------------------------------------------------------------------------------------------  
 ---------------------------------------------------------------------------------------------------  
 select * into #res from (  
 select c.NPWPNo  
   , c.SKPNo PKPNo  
   , c.SKPDate PKPDate  
   , rtrim(d.CustomerName) + ' (' + rtrim(d.CustomerCode) + ')' CustName  
   , d.Address1 CustAddr1  
   , d.Address2 CustAddr2  
   , d.Address3 CustAddr3  
   , d.Address4 CustAddr4  
   , rtrim(d.PhoneNo) + '  ' + rtrim(d.HPNo) CustPhone  
   , d.NPWPNo CustNPWP  
   , e.PoliceRegNo  
   , e.BasicModel  
   , rtrim(convert(varchar, e.ChassisNo)) Chassis  
   , rtrim(convert(varchar, e.EngineNo)) Engine  
   , e.Odometer  
   , e.InvoiceNo  
   , e.InvoiceDate  
   , e.FPJNo  
   , e.FPJDate  
   , e.JobOrderNo  
   , e.JobOrderDate  
   , (case e.TOPDays when 0 then 'Tunai' else 'Kredit' end) as Payment  
   , e.DueDate  
   , b.ServiceRequestDesc  
   , a.DetailDesc   
   , (e.LaborDiscAmt + e.MaterialDiscAmt + e.PartsDiscAmt + e.TotalDPPAmt) as TotalDtlAmt  
   , (e.LaborDiscAmt + e.MaterialDiscAmt + e.PartsDiscAmt) as DiscAmt  
   , e.TotalDPPAmt  
   , e.PpnPct as TaxPct  
   , e.TotalPpnAmt as TaxAmt  
   , e.TotalSrvAmt  
   , e.Remarks  
   , e.PrintSeq  
   , f.LookupValueName as City  
   , g.ProductionYear  
   , a.SupplyQty  
   , a.RetailPrice  
   , a.SubTotal  
   , d.CustomerCode  
   , d.CustomerName  
   , a.Seq1, a.Seq2, a.DiscPct, a.TotalNet
   from @dtl a, #inv b  
   left join gnMstCoProfile c  
     on c.CompanyCode = @CompanyCode  
    and c.BranchCode = @BranchCode  
   left join gnMstCustomer d  
     on d.CompanyCode = @CompanyCode  
    and d.CustomerCode = b.CustomerCodeBill  
   left join svTrnInvoice e  
     on e.CompanyCode = @CompanyCode  
    and e.BranchCode = @BranchCode  
    and e.ProductType = @ProductType  
    and e.InvoiceNo = b.InvoiceNo  
   left join GnMstLookupDtl f  
  on f.CompanyCode = @CompanyCode  
    and f.LookUpValue = c.CityCode  
   left join svMstCustomerVehicle g   
  on g.CompanyCode=e.CompanyCode  
    and g.ChassisCode=e.ChassisCode  
    and g.ChassisNo=e.ChassisNo    
 )#res  

 if (@n = 1)    
 begin  
  select * into #t_res from (select * from #res)#
 end  
   
 if (@n > 1)   
 begin
  insert into #t_res select * from #res  
 end

 drop table #inv  
 drop table #tsk  
 drop table #itm  
 drop table #oth  
 drop table #res  
 
 delete @dtl   
end  
   
drop table #t_inv  
if (@n > 0)   
begin  
 update #t_res
    set DetailDesc = 
        case when Seq2 > 900 then DetailDesc 
        else
          substring(DetailDesc + replicate(' ', 67), 1, 67)
        + case when (SupplyQty is null or seq1 <> '1002') then replicate(' ', 8) 
          else right(replicate(' ', 8) + convert(varchar, SupplyQty), 8)
          end 
        + case when (RetailPrice is null or seq1 <> '1002') then replicate(' ', 18)
          else right((replicate(' ',18) + left(cast(convert(varchar,cast(RetailPrice as money),1) as varchar)
             , len(cast(convert(varchar,cast(RetailPrice as money),1) as varchar))-3)), 18) 
          end 
        + case when SubTotal is null then replicate(' ', 18)
          else right((replicate(' ',18) + left(cast(convert(varchar,cast(SubTotal as money),1) as varchar)
             , len(cast(convert(varchar,cast(SubTotal as money),1) as varchar))-3)), 18)
          end 
        end
        
 select Remarks as Remark
      , #t_res.*
      , (select top 1 ParaValue
           from gnMstLookUpDtl
          where CompanyCode = @CompanyCode
            and CodeID = 'SHN_INFO'
            and LookUpValue = 'SERVICE') ShowShnInfo
      , (case when (@ShowInvDisc = 1 and isnull(DiscAmt, 0) > 0) then ' Diskon' else '' end) as DiscLabel
      , ' No. Item / Jasa                                                    Qty       Unit Price            Total' as LabelHeader
   from #t_res order by Seq1, convert(int, Seq2)

   drop table #t_res  
end
GO
ALTER procedure [dbo].[uspfn_SvTrnServiceDeleteDtl]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@TaskPartType varchar(15),
	@TaskPartNo varchar(50),
	@PartSeq numeric(4,0)
as      
--begin tran
--declare	@CompanyCode as varchar(15)
--declare	@BranchCode as varchar(15)
--declare	@ProductType as varchar(15)
--declare	@ServiceNo as bigint
--declare	@TaskPartType as varchar(15)
--declare	@TaskPartNo as varchar(20)
--declare	@PartSeq as numeric(4,0)

--set	@CompanyCode = '6159401000'
--set	@BranchCode = '6159401001'
--set	@ProductType = '4W'
--set	@ServiceNo = '52727'
--set	@TaskPartType = 'L'
--set	@TaskPartNo = 'FSC 40000'
--set	@PartSeq = '0'

declare @errmsg varchar(max)
declare @reccount int;

declare @CompanyMD as varchar(15)
declare @BranchMD as varchar(15)

declare @Query varchar(max)
declare @DbMD varchar(max)

set @DbMD = dbo.GetDbMD(@CompanyCode, @BranchCode) 

if @TaskPartType = 'L'
begin
	if ((isnull((select count(*) from svTrnSrvTask
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo   = @ServiceNo),0)) > 1)
	begin
		delete svTrnSrvTask
		 where 1 = 1
		   and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = @ProductType
		   and ServiceNo   = @ServiceNo
		   and OperationNo = @TaskPartNo
	end
	else 
	begin
		--  add validation here to delete task
		set @reccount = isnull((
				select count(b.PartNo) from spTrnSORDHdr a, spTrnSORDDtl b
				 where 1 = 1
				   and a.CompanyCode = b.CompanyCode
				   and a.BranchCode  = b.BranchCode
				   and a.DocNo       = b.DocNo
				   and a.SalesType   = '2'
				   and a.Status     <> '3' 
				   and a.UsageDocNo  = isnull((
										select JobOrderNo from svTrnService
 										 where 1 = 1
										   and CompanyCode = @CompanyCode
										   and BranchCode  = @BranchCode
										   and ProductType = @ProductType
										   and ServiceNo   = @ServiceNo											
										),'')
					and a.CompanyCode = @CompanyCode
					and a.BranchCode  = @BranchCode
				),0)
		if (@reccount > 0) 
		begin
			set @errmsg = N'Task sudah tidak dapat dihapus karena terdapat Supply Slip sudah diproses'
						+ char(13) + 'Tolong di check lagi'
						+ char(13) + 'Terima kasih'
			raiserror (@errmsg,16,1);
			return
		end

		-- delete task
		delete svTrnSrvTask
		 where 1 = 1
		   and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = @ProductType
		   and ServiceNo   = @ServiceNo
		   and OperationNo = @TaskPartNo
		-- delete all item in spk
		delete svTrnSrvItem
		 where 1 = 1
		   and CompanyCode = @CompanyCode
		   and BranchCode  = @BranchCode
		   and ProductType = @ProductType
		   and ServiceNo   = @ServiceNo
	
		set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
		set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

		if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
		begin	   
			set @Query = 'delete '+ @DbMD +'..svSDMovement
    		 where 1 = 1
			   and CompanyCode = '''+ @CompanyCode +'''
			   and BranchCode  = '''+ @BranchCode +'''
			   and DocNo	   = (select JobOrderNo from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode  = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo)  +')'
		exec(@Query)
		end
	end
end
else
begin
    set @reccount = isnull((
			select count(b.PartNo) from spTrnSORDHdr a, spTrnSORDDtl b
			 where 1 = 1
			   and a.CompanyCode = b.CompanyCode
			   and a.BranchCode  = b.BranchCode
			   and a.DocNo       = b.DocNo
			   and a.SalesType   = '2'
			   and a.Status     <> '3' 
			   and a.UsageDocNo  = isnull((
									select JobOrderNo from svTrnService
 									 where 1 = 1
									   and CompanyCode = @CompanyCode
									   and BranchCode  = @BranchCode
									   and ProductType = @ProductType
									   and ServiceNo   = @ServiceNo
									),'')
			  and b.PartNo      = @TaskPartNo
			   and a.CompanyCode = @CompanyCode
			   and a.BranchCode  = @BranchCode
			),0)

	declare @npartss int, @npartot int;
	set @npartot = isnull((
			select count(*) from svTrnSrvItem
			 where 1 = 1
			   and CompanyCode = @CompanyCode
			   and BranchCode  = @BranchCode
			   and ProductType = @ProductType
			   and ServiceNo   = @ServiceNo
			   and PartNo      = @TaskPartNo
			   and PartSeq     = @PartSeq
			   and isnull(SupplySlipNo, '') = ''
			), 0)
	set @npartss = isnull((
			select count(*) from svTrnSrvItem
			 where 1 = 1
			   and CompanyCode = @CompanyCode
			   and BranchCode  = @BranchCode
			   and ProductType = @ProductType
			   and ServiceNo   = @ServiceNo
			   and PartNo      = @TaskPartNo
			   and isnull(SupplySlipNo, '') <> ''
			), 0)

	if ((@reccount > 0 and @npartot <> 1 and @npartss > 0)
	 or (@reccount > 0 and @npartot  = 1 and @npartss = 0))
	begin
		set @errmsg = N'Part sudah tidak dapat dihapus karena Supply Slip sudah diproses'
					+ char(13) + 'Tolong di check lagi'
					+ char(13) + 'Terima kasih'
					+ char(13) + ''
					+ char(13) + 'Jml Part' + convert(varchar, @npartot)
					+ char(13) + 'Jml Supply Slip' + convert(varchar, @npartss)
		raiserror (@errmsg,16,1);
		return
	end

	delete svTrnSrvItem
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo   = @ServiceNo
	   and PartNo      = @TaskPartNo
	   and PartSeq     = @PartSeq
	
	set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

	if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
	begin	 
	set @Query =' 
	delete '+ @DbMD +'..svSDMovement
	 where 1 = 1
	   and CompanyCode = '''+ @CompanyCode +'''
	   and BranchCode  = '''+ @BranchCode +'''
	   and DocNo	   = (select JobOrderNo from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode  = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo)  +')
	   and PartNo      = '''+ convert(varchar,@TaskPartNo) +'''
	   and PartSeq     = '+ convert(varchar,@PartSeq)

	   exec(@Query)
	end	   
end

exec uspfn_SvTrnServiceReCalculate @CompanyCode,@BranchCode,@ProductType,@ServiceNo,0
--rollback tran
GO
ALTER procedure [dbo].[uspfn_SvTrnJobOrderOpen]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@UserID varchar(15)
as      

declare @errmsg varchar(max)

declare @ServiceStatus varchar(10)
    set @ServiceStatus = isnull((
						 select ServiceStatus
						   from svTrnService
						  where 1 = 1
						    and CompanyCode = @CompanyCode
						    and BranchCode  = @BranchCode
						    and ProductType = @ProductType
						    and ServiceNo   = @ServiceNo
						 ),0)

if (@ServiceStatus <> '5') 
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'SPK ini sudah tidak dapat dibuka lagi karena status sudah berubah.'
				+ char(13) + 'Status SPK Terakhir = ' + @ServiceStatus + ', tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

begin try
	update svTrnService
	   set ServiceStatus	= '1'
		  ,JobOrderClosed	= '1900-01-01'
          ,LastUpdateBy		= @UserID
          ,LastUpdateDate	= getdate()
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo   = @ServiceNo
	 update svTrnSrvVor
	   set ClosedDate		= '1900-01-01'
		  ,LastUpdateBy		= @UserID
          ,LastUpdateDate	= getdate()
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode	   
	   and ServiceNo = @ServiceNo
end try
begin catch
	set @errmsg = N'gagal ubah status SPK pada ServiceNo = '
				+ convert(varchar,@ServiceNo)
				+ char(13) + error_message()
	raiserror (@errmsg,16,1);
end catch
GO
ALTER procedure [dbo].[usprpt_SvRpTrn008]
 @CompanyCode varchar(20),       
 @BranchCode varchar(20),      
 @FpjGovNoFrom varchar(20),
 @FpjGovNoTo varchar(20),
 @FpjType int,
 @Potongan bit,
 @StartDate varchar(20),
 @EndDate varchar(20)

as

--usprpt_SvRpTrn008 '6079401','607940100','14.84587994','14.84589289',8,False,'20140101','20140228'

--declare @CompanyCode varchar(20)       
--declare	@BranchCode varchar(20)      
--declare @FpjGovNoFrom varchar(20)
--declare @FpjGovNoTo varchar(20)
--declare @FpjType int
--declare @Potongan bit
--declare @StartDate varchar(20)
--declare @EndDate varchar(20)

--set @CompanyCode = '6079401'
--set	@BranchCode = '607940100'
--set @FpjGovNoFrom = '14.84587994'
--set @FpjGovNoTo= '14.84589289'
--set @FpjType = 8
--set @Potongan = 0
--set @StartDate = '20140101'
--set @EndDate = '20140228'  

-- Setting Header Faktur Pajak --
---------------------------------
declare @fCompName	varchar(max)
declare @fAdd		varchar(max)
declare @fAdd1		varchar(max)
declare @fAdd2		varchar(max)
declare @fNPWP		varchar(max)
declare @fSKP		varchar(max)
declare @fSKPDate	varchar(max)
declare @fCity		varchar(max)

declare @fStatus varchar(1)
set @fStatus = 0

declare @fInfoPKP varchar(1)
set @fInfoPKP = 1

if exists (select 1 from gnMstLookUpDtl where codeid='FPJFLAG')
begin
	set @fStatus = (select paravalue from gnmstlookupdtl where codeid='FPJFLAG' and lookupvalue='STATUS')
end

if exists (select * from gnMstLookUpHdr where codeid='FPJ_INFO_PKP')
	begin
		set @fInfoPKP = (select LookupValue from gnmstlookupdtl where codeid='FPJ_INFO_PKP')
	end
	
if (@fStatus = '1')
begin
	set @fCompName	= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='NAME')
	set @fAdd1		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='ADD1')
	set @fAdd2		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='ADD2')
	set @fAdd		= @fAdd1+' '+@fAdd2
	set @fNPWP		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='NPWP')
	set @fSKP		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='SKPNO')
	set @fSKPDate	= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='SKPDATE')
	set @fCity		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='CITY')		
end

declare @IsHoldingAddr as bit
if (select count(*) from gnMstLookUpDtl where CompanyCode= @CompanyCode and CodeID='FPJADDR') > 0
	set @IsHoldingAddr = (select convert(numeric,LookUpValue) from gnMstLookUpDtl where CompanyCode= @CompanyCode and CodeID='FPJADDR')
else
	set @IsHoldingAddr = 0

declare @ReportParam as varchar(2)
declare @IsCentral as bit
declare @IsRecalPPN as bit

declare @StatusEnd  as int
declare @CountDtl as int

declare @FlagAsterix as bit
set @FlagAsterix = isnull((select ParaValue from GnMstLookUpDtl where CompanyCode = @CompanyCode and CodeID = 'XFAK' and LookUpValue = 'SHOW_SV'), 0)

declare @ShowFpjDisc as bit
set @ShowFpjDisc = isnull((select ParaValue from GnMstLookUpDtl where CompanyCode = @CompanyCode and CodeID = 'SRV_FLAG' and LookUpValue = 'SHOW_FPJDISC'), 0)

-- check seberapa banyak FPJGovNo yang akan di display
create table #t_fpj(
	rownum int,
	FPjGovNo varchar(20)
)

-- 0= Without  newline, 1= With newline at detail
set @ReportParam='0'
if (select count(LookupValue) from gnMstLookUpDtl where CodeID='RPSV') > 0
	set @ReportParam= (select LookUpValue from gnMstLookUpDtl where CodeID='RPSV')


-- 0= Without BranchCode, 1= With BranchCode
set @IsCentral=0
if ((select count(LookupValue) from gnMstLookUpDtl where CodeID='FPGB') > 0 and (@FpjType = '3' or @FpjType = '8')
	and (select IsBranch from gnMstOrganizationDtl where CompanyCode=@CompanyCode and BranchCode= @BranchCode)=0)
begin
	if (select LookUpValue from gnMstLookUpDtl where CodeID='FPGB') = '1'
		set @IsCentral= 1
	else
		set @IsCentral= 0
end

-- 0= Not Recalculate PPN, 1= Recalculate PPN (For FPJ Gabungan)
set @IsRecalPPN=0
if (select count(ParaValue) from gnMstLookUpDtl where CodeID='CPPN' and LookUpValue='STATUS') > 0
	set @IsRecalPPN= (select convert(bit,ParaValue) from gnMstLookUpDtl where CodeID='CPPN' and LookUpValue='STATUS')

-- get FPJGovNo from transaction
if(len(@FpjGovNoFrom) > 8 and len(@FpjGovNoTo) > 8)
	if (@FpjType = '3' or @FpjType = '8')
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where right(FpjGovNo,len(FPJGovNo) - 8) between @FpjGovNoFrom and @FpjGovNoTo
		   and convert(varchar,FpjDate,112) between @StartDate and @EndDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice > 1		
	else
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where right(FpjGovNo,len(FPJGovNo) - 8) between @FpjGovNoFrom and @FpjGovNoTo
		   and convert(varchar,FpjDate,112) between @StartDate and @EndDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice = 1		
else
	if (@FpjType = '3' or @FpjType = '8')
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where convert(varchar, FpjDate, 112) between @StartDate and @StartDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice > 1		
	else
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where convert(varchar, FpjDate, 112) between @StartDate and @StartDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice = 1
declare @n int 
set @n = 0

-- start looping
declare @FpjGovNo varchar(20)
while (@n < (select max(rownum) from #t_fpj))
begin
	set @n = @n + 1;
	set @FpjGovNo = (select FpjGovNo from #t_fpj where rownum = @n)

	-- get FPJGovNo
	select * into #fpj from (
	select CompanyCode, BranchCode, FPjGovNo, FpjNo, FpjDate, SignedDate, DueDate, NoOfInvoice
	  from svTrnFakturPajak
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and FpjGovNo = @FpjGovNo
	) #fpj

	-- get invoice data from transaction	
	select * into #inv from (
	select CompanyCode
		  ,BranchCode
		  ,InvoiceNo
		  ,JobOrderNo
		  ,CustomerCodeBill
		  ,case when (@FpjType = '3' OR @FPJType = '8') then '' else PoliceRegNo end PoliceRegNo 
		  ,isnull(LaborGrossAmt,0) LaborGrossAmt
		  ,isnull(PartsGrossAmt,0) PartsGrossAmt
		  ,isnull(MaterialGrossAmt,0) MaterialGrossAmt
		  ,isnull(LaborDiscAmt,0) LaborDiscAmt
		  ,isnull(PartsDiscAmt,0) PartsDiscAmt
		  ,isnull(MaterialDiscAmt,0) MaterialDiscAmt
		  ,isnull(TotalDppAmt,0) TotalDppAmt
		  ,isnull(TotalPphAmt,0) TotalPphAmt
		  ,isnull(TotalPpnAmt,0) TotalPpnAmt
		  ,isnull(TotalSrvAmt,0) TotalSrvAmt
      from svTrnInvoice a
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and ((case when @IsCentral = 1 then BranchCode end) <> ''
			or (case when @IsCentral = 0 then BranchCode end) = @BranchCode)
	   --and BranchCode = @BranchCode
	   and isLocked=(case when (select top 1 NoOfInvoice from #fpj) > 1 then @IsCentral else isLocked end)
	   and FpjNo in (select FpjNo from #fpj) --b.FpjNo
	) #inv	
	
	-- get Data SPK
	select * into #srv from (
	select CompanyCode, BranchCode, ProductType, JobOrderNo, BasicModel, JobType from svTrnService
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and ((case when @IsCentral = 1 then BranchCode end) <> ''
			or (case when @IsCentral = 0 then BranchCode end) = @BranchCode)
	   and BranchCode+''+JobOrderNo in (select BranchCode+''+JobOrderNo from #inv)
	) #srv

	declare @dtl as table(DetailDesc varchar(300))
	declare @temp as table(FPJGovNo varchar(35), CodeID varchar(3),intCount int)

	select * into #tsk from (
	select
		 row_number() over (order by a.OperationNo) RecNo
		,a.*, (a.OperationHour * a.OperationCost) as OperationAmt
		,b.JobOrderNo, @FpjGovNo FpjGovNo,b.LaborDiscAmt,b.PartsDiscAmt,b.MaterialDiscAmt
	  from svTrnInvTask a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.InvoiceNo = b.InvoiceNo
	   and a.IsSubCon= (case when a.InvoiceNo like 'INW%' then isnull(a.IsSubCon, 0) else 0 end)
	)#tsk

	select * into #itm from (
	select row_number() over (order by a.PartNo) RecNo
	     , a.PartNo, (a.SupplyQty - a.ReturnQty) as SupplyQty
	     , a.RetailPrice
	     --, (a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
	     , ROUND((a.RetailPrice * (a.SupplyQty - a.ReturnQty)),0) RetailAmt --Perubahan
	     , a.DiscPct, a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	)#itm

	select * into #oth from (
	select
		 row_number() over (order by a.OperationNo) RecNo
		,a.*, (a.OperationHour * a.OperationCost) as OperationAmt
		,b.JobOrderNo, @FpjGovNo FpjGovNo
	  from svTrnInvTask a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.InvoiceNo = b.InvoiceNo
	   and isnull(a.IsSubCon, 0) = 1
	)#oth

----------------------------------------------------------------------------	
	--Type of Goods SPAREPART
	select * into #tpSp from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue = 'SPAREPART' )#tpSp

	--Type of Goods OLI
	select * into #tpOli from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue = 'OLI' )#tpOli

	--Type of Goods MATERIAL
	select * into #tpMt from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue = 'MATERIAL' )#tpMt

	--Type of Goods RINCI MATERIAL
	select * into #tpRMt from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue in ('MATERIAL','OLI') )#tpRMt
-----------------------------------------------------------------------------

	select * into #itmSP from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in (select * from #tpSp)
	)#itmSP

	select * into #itmOli from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in(select * from #tpOli)
	)#itmOli

	select * into #itmMtrl from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in (select * from #tpMt)
	)#itmMtrl

	select * into #itmRMtrl from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in (select * from #tpRMt)
	)#itmRMtrl

	declare @TaskAmt money
	declare @ItemAmt money
	declare @MaterialAmt money
	declare @SubletAmt money
	declare @SalesAmt int
	declare @DiscAmt money

	-- select condition for 'Standard'
	if (@FpjType = '1')
	begin
		-- Insert Jasa Perbaikan
		if ((select count(*) from #tsk) > 0)
		begin
			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if (@ReportParam = '1')
					insert into @dtl values (' ')
			insert into @dtl
			select left(('    JASA PERBAIKAN'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
				),18)

			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				),80)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
			insert into @dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
			set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #tsk)
			insert into @dtl
			select left(('                                        Potongan Jasa'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
				),18)

			insert into @dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			insert into @dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
				),18)
			end

			if (select count(*) from #itm) > 0
			begin
				insert into @dtl values ('')
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into @temp 
				select @FpjGovNo, 'SRV', COUNT(*) intCount from #tsk a
			  left join #srv b
				on b.JobOrderNo = a.jobOrderNo
			  left join svMstTask c
				on c.CompanyCode = b.CompanyCode
			   and c.ProductType = b.ProductType
			   and c.BasicModel = b.BasicModel
			   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
			   and c.OperationNo = a.OperationNo
 		end

		-- Insert Pemakaian Sparepart
		if ((select count(*) from #itm) > 0)
		begin
			insert into @dtl values ('    PEMAKAIAN SPAREPART/MATERIAL')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),28)
			  from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
			insert into @dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
			set @DiscAmt = isnull((select top 1 (PartsDiscAmt + MaterialDiscAmt) from #tsk),0)
			insert into @dtl
			select left(('                                        Potongan Part'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
				),18)

			insert into @dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			insert into @dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
				),18)
			end

			if (select count(*) from #oth) > 0
			begin
				insert into @dtl values ('')
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into @temp
				select @FpjGovNo,'OIL',COUNT(*) intCount from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo
		end

		-- Insert Jasa SubCon (Lain - lain)
		if ((select count(*) from #oth) > 0)
		begin
			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
			if (@ReportParam = '1')
				insert into @dtl values (' ')
			insert into @dtl
			select left(('    LAIN - LAIN'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
				),18)

			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				),80)
			  from #oth a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #oth)
				insert into @dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into @temp
				select @FpjGovNo,'DLL',COUNT(*) intCount from #oth a
				  left join #srv b
					on b.JobOrderNo = a.jobOrderNo
				  left join svMstTask c
					on c.CompanyCode = b.CompanyCode
				   and c.ProductType = b.ProductType
				   and c.BasicModel = b.BasicModel
				   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
				   and c.OperationNo = a.OperationNo
		end
	end

	-- select condition for 'Rinci'
	if (@FpjType = '2')
	begin
		-- Insert Jasa Perbaikan
		if ((select count(*) from #tsk) > 0)
		begin
			if (@ReportParam = '1')
				insert into @dtl values (' ')
			insert into @dtl values ('    JASA PERBAIKAN')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				+ replicate(' ',100)
				),75)
				
				+ case when (isnull(a.DiscPct, 0) = 0 or @ShowFpjDisc = 0) then replicate(' ', 10)
                      else right(replicate(' ', 10) + '(' + convert(varchar, cast(a.DiscPct as money), 1) + '%)', 10)
                      end 				
				
				+ right((replicate(' ',18)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),18)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if ((select count(*) from #tsk) > 1)
				begin
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #tsk)
				insert into @dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                          '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #tsk) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end
			
			if (select count(*) from #itm) > 0
			begin
				insert into @dtl values ('')
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into @temp 
				select @FpjGovNo, 'SRV', COUNT(*) intCount from #tsk a
			  left join #srv b
				on b.JobOrderNo = a.jobOrderNo
			  left join svMstTask c
				on c.CompanyCode = b.CompanyCode
			   and c.ProductType = b.ProductType
			   and c.BasicModel = b.BasicModel
			   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
			   and c.OperationNo = a.OperationNo
		end

		-- Insert Jasa SubCon (Lain - Lain)
		if ((select count(*) from #oth) > 0)
		begin
			if (@ReportParam = '1') insert into @dtl values (' ')
			insert into @dtl values ('    LAIN - LAIN')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				+ replicate(' ',100)
				),75)
				+ case when (isnull(a.DiscPct, 0) = 0 or @ShowFpjDisc = 0) then replicate(' ', 10)
                       else right(replicate(' ', 10) + '(' + convert(varchar, cast(a.DiscPct as money), 1) + '%)', 10)
                       end 				
				+ right((replicate(' ',18)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),18)
			  from #oth a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
				if ((select count(*) from #oth) > 1)
				begin
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select sum(OperationHour * OperationCost * DiscPct * 0.01) from #oth),0)
				insert into @dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #oth) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into @temp
				select @FpjGovNo,'DLL',COUNT(*) intCount from #oth a
				  left join #srv b
					on b.JobOrderNo = a.jobOrderNo
				  left join svMstTask c
					on c.CompanyCode = b.CompanyCode
				   and c.ProductType = b.ProductType
				   and c.BasicModel = b.BasicModel
				   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
				   and c.OperationNo = a.OperationNo
		end

		-- Insert Sparepart / Material
		if ((select count(*) from #itm) > 0)
		begin
			insert into @dtl values ('    PEMAKAIAN SPAREPART/MATERIAL')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ case when (isnull(a.DiscPct, 0) = 0 or @ShowFpjDisc = 0) then replicate(' ', 10)
                       else right(replicate(' ', 10) + '(' + convert(varchar, cast(a.DiscPct as money), 1) + '%)', 10)
                       end 				
				+ right((
				  replicate(' ',18)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),18)
			  from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
				if ((select count(*) from #itm) > 1)
				begin
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 (PartsDiscAmt + MaterialDiscAmt) from #tsk),0)
				insert into @dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #itm) > 1)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
					insert into @dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end

			if (select count(*) from #oth) > 0
			begin
				insert into @dtl values ('')
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into @temp
				select @FpjGovNo,'OIL',COUNT(*) intCount from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo
		end

	end

	-- select condition for 'Gabungan'
	if (@FpjType = '3')
	begin
		set @SalesAmt = isnull((select SUM(c.LaborGrossAmt + c.PartsGrossAmt + c.MaterialGrossAmt) SalesAmt from #inv c),0)

		if (@ReportParam = '1')
				insert into @dtl values (' ')
		insert into @dtl
		select left(('1   Untuk No Invoice ' + (select top 1 InvoiceNo from #inv order by InvoiceNo) + ' s/d ' + (select top 1 InvoiceNo from #inv order by InvoiceNo desc) 
			+ replicate(' ', 100)
			),83)
			+ right((
			+ replicate(' ',20)
			+ left(convert(varchar, cast(@SalesAmt as money), 1),len(convert(varchar, cast(@SalesAmt as money), 1)) - 3)
			),20)
		insert into @dtl
		select '    (No. ' + (select top 1 JobOrderNo from #inv order by JobOrderNo) + ' s/d ' + (select top 1 JobOrderNo from #inv order by JobOrderNo desc) + ')'
		select * into #inv_temp from (select * from #inv) #inv_temp
		delete #inv where InvoiceNo <> (select top 1 InvoiceNo from #inv order by JobOrderNo)
		update #inv set LaborGrossAmt = (select sum(LaborGrossAmt) from #inv_temp)
		update #inv set PartsGrossAmt = (select sum(PartsGrossAmt) from #inv_temp)
		update #inv set MaterialGrossAmt = (select sum(MaterialGrossAmt) from #inv_temp)
		update #inv set LaborDiscAmt = (select sum(LaborDiscAmt) from #inv_temp)
		update #inv set PartsDiscAmt = (select sum(PartsDiscAmt) from #inv_temp)
		update #inv set MaterialDiscAmt = (select sum(MaterialDiscAmt) from #inv_temp)
		update #inv set TotalDppAmt = (select sum(TotalDppAmt) from #inv_temp)
		update #inv set TotalPphAmt = (select sum(TotalPphAmt) from #inv_temp)
		update #inv set TotalPpnAmt = (select sum(TotalPpnAmt) from #inv_temp)
		update #inv set TotalSrvAmt = TotalDppAmt + TotalPpnAmt
		alter table #inv alter column JobOrderNo varchar(50)
		update #inv set JobOrderNo = (select top 1 JobOrderNo from #inv_temp order by JobOrderNo) + '-' + right((select top 1 JobOrderNo from #inv_temp order by JobOrderNo desc),6)
		alter table #inv alter column InvoiceNo varchar(50)
		update #inv set InvoiceNo = (select top 1 InvoiceNo from #inv_temp order by InvoiceNo) + '-' + right((select top 1 InvoiceNo from #inv_temp order by InvoiceNo desc),6)
		drop table #inv_temp				
	end

	-- select condition for 'Perincian on Lampiran'
	if (@FpjType = '4')
	begin
		set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
		set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
		insert into @dtl
		select left(('1   Perincian dapat dilihat pada Faktur Penjualan'
			+ replicate(' ', 100)
			), 83)
			+ right((
			+ replicate(' ',20)
			+ left(convert(varchar, @TaskAmt + @ItemAmt, 1),len(convert(varchar, @TaskAmt + @ItemAmt, 1)) - 3)
			),20)
		insert into @dtl
		select '    dengan Nomor ' + a.InvoiceNo from #inv a
	end

	-- Laporan 'Standard Body Repair'
	if (@FpjType = '5')
	begin
		if ((select count(*) from #tsk) > 0)
		begin
			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
			if (@ReportParam = '1')
				insert into @dtl values (' ')
			insert into @dtl
			select left(('    JASA PERBAIKAN'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
				),18)

			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ c.Description
				),80)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #tsk)
				insert into @dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end

			if (select count(*) from #itmSP) > 0
			begin
				insert into @dtl values ('')
			end
		end

	if ((select count(*) from #itmSP) > 0)
	begin
		insert into @dtl values ('    PEMAKAIAN SPAREPART')
		insert into @dtl
		select left((
			  right((replicate(' ',2)
			+ convert(varchar,a.RecNo)
			),2)
			+ '  '
			+ a.PartNo
			+ ' - '
			+ b.PartName
			+ replicate(' ',100)
			),65)
			+ right((
			  replicate(' ',50)
			+ convert(varchar,a.SupplyQty)
			),10)
			+ right((
			  replicate(' ',50)
			+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
			),28)
		  from  #itmSP a
		  left join spMstItemInfo b
			on b.CompanyCode = @CompanyCode
		   and b.PartNo = a.PartNo
	end

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
				set @DiscAmt = isnull((select top 1 (PartsDiscAmt + MaterialDiscAmt) from #tsk),0)
				insert into @dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end

		if (select count(*) from #itmMtrl) > 0
		begin
			insert into @dtl values ('')
		end

	if ((select count(*) from #itmMtrl) > 0)
	begin
			insert into @dtl values ('    PEMAKAIAN MATERIAL / OLI')
			set @MaterialAmt = (select sum(RetailAmt) from #itmMtrl)
			insert into @dtl
			select left((' 1  MATERIAL'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @MaterialAmt, 1),len(convert(varchar, @MaterialAmt, 1)) - 3)
				),18)
	end

		if ((select count(*) from #itmOli) > 0)
		begin
			if ((select count(*) from #itmMtrl) = 0)
			begin
				insert into @dtl values ('')
				insert into @dtl values ('    PEMAKAIAN MATERIAL / OLI')
			end
			insert into @dtl
			select case when (select count(*) from #itmMtrl) > 0 then
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo + 1)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),28)
				else
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),28)
				end
			from #itmOli a
				left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
				and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end

				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #oth)
				insert into @dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
		end
	end

	-- select condition for 'RinciBodyRepair'
	if (@FpjType = '6')
	begin
		if ((select count(*) from #tsk) > 0)
		begin
			if (@ReportParam = '1')
				insert into @dtl values (' ')
			insert into @dtl values ('    JASA PERBAIKAN')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ c.Description
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',10)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),28)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if ((select count(*) from #tsk) > 1)
				begin
				insert into @dtl
				select left(('                 Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #tsk)
				insert into @dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #tsk) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end

		if (select count(*) from #itm) > 0
		begin
			insert into @dtl values ('')
		end

		end

		if ((select count(*) from #itm) > 0)
		begin
			insert into @dtl values ('    PEMAKAIAN SPAREPART')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),28)
			  from #itmSP a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo
			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
				if ((select count(*) from #itm) > 1)
				begin
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 (PartsDiscAmt + MaterialDiscAmt) from #tsk),0)
				insert into @dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)


				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #itm) > 1)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
					insert into @dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end
		end

		if (select count(*) from #itmRMtrl) > 0
		begin
			insert into @dtl values ('')
		end

	if ((select count(*) from #itmRMtrl) > 0)
	begin
		insert into @dtl values ('    PEMAKAIAN MATERIAL / OLI')
		insert into @dtl
		select left((
			  right((replicate(' ',2)
			+ convert(varchar,a.RecNo)
			),2)
			+ '  '
			+ a.PartNo
			+ ' - '
			+ b.PartName
			+ replicate(' ',100)
			),65)
			+ right((
			  replicate(' ',50)
			+ convert(varchar,a.SupplyQty)
			),10)
			+ right((
			  replicate(' ',50)
			+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
			),28)
		  from #itmRMtrl a
		  left join spMstItemInfo b
			on b.CompanyCode = @CompanyCode
		   and b.PartNo = a.PartNo
	
			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end

					if ((select count(*) from #itmRMtrl) > 1)
					begin
						insert into @dtl
						select left(('                                            Sub Total'
							+ replicate(' ', 100)
							), 85)
							+ right((
							+ replicate(' ',20)
							+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
							),18)

					end
				end

				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #oth)
				insert into @dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end

					if ((select count(*) from #itmRMtrl) > 1)
					begin
						insert into @dtl
						select left(('                                            Sub Total'
							+ replicate(' ', 100)
							), 85)
							+ right((
							+ replicate(' ',20)
							+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
							),18)

					end
			end

	End

	-- select condition for 'Khusus Body Repair'
	if (@FpjType = '7')
	begin
		if ((select count(*) from #tsk) > 0)
		begin
			if (@ReportParam = '1')
				insert into @dtl values (' ')
			insert into @dtl values ('    JASA PERBAIKAN')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ c.Description
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',10)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),28)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if ((select count(*) from #tsk) > 1)
				begin
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #tsk)
				insert into @dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #tsk) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end

			if (select count(*) from #itm) > 0
			begin
				insert into @dtl values ('')
			end

		end

		if ((select count(*) from #itm) > 0)
		begin
			insert into @dtl values ('    PEMAKAIAN SPAREPART')
			insert into @dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),28)
			  from #itmSP a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
				if ((select count(*) from #itm) > 1)
				begin
				insert into @dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 (PartsDiscAmt + MaterialDiscAmt) from #tsk),0)
				insert into @dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)


				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #itm) > 1)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
					insert into @dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end

		end
		if (select count(*) from #ItmMtrl) > 0
		begin
			insert into @dtl values ('')
		end

	if ((select count(*) from #ItmMtrl) > 0)
		begin
			insert into @dtl values ('    PEMAKAIAN MATERIAL / OLI')
			set @MaterialAmt = (select sum(RetailAmt) from #ItmMtrl)
			Print(@MaterialAmt)
			if (@ReportParam = '1')
			begin
				insert into @dtl values (' ')
			end
			insert into @dtl
			select left((' 1  MATERIAL'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @MaterialAmt, 1),len(convert(varchar, @MaterialAmt, 1)) - 3)
				),18)
		end

		if ((select count(*) from #itmOli) > 0)
		begin
			if ((select count(*) from #ItmMtrl) = 0)
			begin
				insert into @dtl values (' ')
				insert into @dtl values ('    PEMAKAIAN MATERIAL / OLI')
			end
			insert into @dtl
			select case when (select count(*) from #ItmMtrl) > 0 then
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo + 1)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),28)
				else
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),65)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),28)
				end
			from #itmOli a
				left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
				and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end
				if ((select count(*) from #itmRMtrl) > 1)
				begin
					insert into @dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end

				set @DiscAmt = (select sum (OperationHour * OperationCost* DiscPct * 0.01) from #oth)
				insert into @dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into @dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end
				if ((select count(*) from #itmRMtrl) > 1)
				begin
					insert into @dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end
		end
	End

	-- select condition for 'Gabungan'
	if (@FpjType = '8')
	begin
		set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk where IsSubCon != 1),0)
		set @ItemAmt = isnull((select sum(RetailAmt) from #itm where TypeOfGoods in ('0', '1', '2')),0)
		set @SalesAmt = isnull((select sum(c.LaborGrossAmt + c.PartsGrossAmt + c.MaterialGrossAmt) SalesAmt from #inv c),0)
		set @SubletAmt = isnull((select sum(OperationHour * OperationCost) from #tsk where IsSubCon = 1),0) + 
		                 isnull((select sum(RetailAmt) from #itm where TypeOfGoods not in ('0', '1', '2')),0)
		

		if (@ReportParam = '1')
		--insert into @dtl values ('1 ')
		insert into @dtl
		select left(('1    Untuk No Invoice ' + (select top 1 InvoiceNo from #inv order by InvoiceNo) + ' s/d ' + (select top 1 InvoiceNo from #inv order by InvoiceNo desc) 
			+ replicate(' ', 100)
			),83)
		
		insert into @dtl
		select '2    (No. ' + (select top 1 JobOrderNo from #inv order by JobOrderNo) + ' s/d ' + (select top 1 JobOrderNo from #inv order by JobOrderNo desc) + ')'
		
		insert into @dtl values ('3 ')
		
		if(@ItemAmt <> 0)
		begin
			insert into @dtl
			select left(('4          SPARE PART DAN MATERIAL (SGP & SGO)' 
				+ replicate(' ', 100)
				),83)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, cast(@ItemAmt as money), 1),len(convert(varchar, cast(@ItemAmt as money), 1)) - 3)
				),20)
		end
		
		if(@TaskAmt <> 0)
		begin
				insert into @dtl
				select left(('5          JASA' 
					+ replicate(' ', 100)
					),83)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, cast(@TaskAmt as money), 1),len(convert(varchar, cast(@TaskAmt as money), 1)) - 3)
					),20)
		end
		
		if(@SubletAmt <> 0)
		begin
			insert into @dtl
			select left(('6          SUBLET' 
				+ replicate(' ', 100)
				),83)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, cast(@SubletAmt as money), 1),len(convert(varchar, cast(@SubletAmt as money), 1)) - 3)
				),20)
		end
		
		select * into #inv_tempD from (select * from #inv) #inv_tempD
		delete #inv where InvoiceNo <> (select top 1 InvoiceNo from #inv order by JobOrderNo)
		update #inv set LaborGrossAmt = (select sum(LaborGrossAmt) from #inv_tempD)
		update #inv set PartsGrossAmt = (select sum(PartsGrossAmt) from #inv_tempD)
		update #inv set MaterialGrossAmt = (select sum(MaterialGrossAmt) from #inv_tempD)
		update #inv set LaborDiscAmt = (select sum(LaborDiscAmt) from #inv_tempD)
		update #inv set PartsDiscAmt = (select sum(PartsDiscAmt) from #inv_tempD)
		update #inv set MaterialDiscAmt = (select sum(MaterialDiscAmt) from #inv_tempD)
		update #inv set TotalDppAmt = (select sum(TotalDppAmt) from #inv_tempD)
		update #inv set TotalPphAmt = (select sum(TotalPphAmt) from #inv_tempD)
		update #inv set TotalPpnAmt = (select sum(TotalPpnAmt) from #inv_tempD)
		update #inv set TotalSrvAmt = TotalDppAmt + TotalPpnAmt
		alter table #inv alter column JobOrderNo varchar(50)
		update #inv set JobOrderNo = (select top 1 JobOrderNo from #inv_tempD order by JobOrderNo) + '-' + right((select top 1 JobOrderNo from #inv_tempD order by JobOrderNo desc),6)
		alter table #inv alter column InvoiceNo varchar(50)
		update #inv set InvoiceNo = (select top 1 InvoiceNo from #inv_tempD order by InvoiceNo) + '-' + right((select top 1 InvoiceNo from #inv_tempD order by InvoiceNo desc),6)
		drop table #inv_tempD		
	end

	-- insert to declare to decide last line every FPJGovNo
	set @CountDtl = (select COUNT(*) from @dtl)

	if(@FPJType <> '3' AND @FPJType <> '4' AND @FPJType <> '8')
	begin	
		if @CountDtl <> (case when @CountDtl = 19 then 17 else 18 end)
		begin
			insert into @dtl values (' ')
			set @StatusEnd = 1
		end
		else
		begin
			set @StatusEnd = 0
		end
	end

	-- select data to display result on Report
	select * into #result from (
	select 
		 b.FpjGovNo
		,b.CompanyCode
		,case when @fInfoPKP = 1 then
			(case @fStatus when '1' then @fCompName else f.CompanyGovName end)
		 else '' end as CompanyName
		,case when @fInfoPKP = 1 then
			(case @fStatus when '1' then @fAdd else 
				(case when @IsHoldingAddr=0 then isnull(f.Address1, '') + ' '  + isnull(f.Address2, '') + ' ' + isnull(f.Address3, '') + ' ' + isnull(f.Address4, '')
					else (select isnull(Address1, '') + ' '  + isnull(Address2, '') + ' ' + isnull(Address3, '') + ' ' + isnull(Address4, '') from gnMstCoProfile where CompanyCode=@CompanyCode
					and BranchCode=(select BranchCode from gnMstOrganizationDtl where CompanyCode=@CompanyCode and IsBranch=0))
				end)end)
		  else '' end as CompanyAddress
		,case when @fInfoPKP = 1 then
			(case @fStatus when '1' then @fNPWP else f.NPWPNo end)
		 else '' end as NPWPNo
		,case @fStatus when '1' then @fSKP else f.SkpNo end as SkpNo
		,case @fStatus when '1' then @fSKPDate else f.SkpDate end as SkpDate
		,b.FpjDate
		,case when (@FpjType = '3' OR @FPJType = '8') then '' else isnull(c.PoliceRegNo,'') end PoliceRegNo  
		,c.CustomerCodeBill CustCodeBill
		,g.CustomerGovName CustNameBill
		,g.Address1 CustAddr1Bill
		,g.Address2 CustAddr2Bill
		,g.Address3 CustAddr3Bill
		,g.NPWPNo CustNpwpBill
		,g.SkpNo CustSkpBill
		,a.DetailDesc
		,c.LaborGrossAmt + c.PartsGrossAmt + c.MaterialGrossAmt SalesAmt  
		,c.LaborDiscAmt + c.PartsDiscAmt + c.MaterialDiscAmt DiscAmt  
		,0 as DPAmt
		,c.TotalDppAmt DPPAmt  
		,case when (@IsRecalPPN=1) and substring(c.InvoiceNo,1,3) in ('INF','INW') then floor(c.TotalDppAmt*10/100)
			else isnull(c.TotalPphAmt, 0) + isnull(c.TotalPpnAmt, 0) 
		end PPNAmt  
		,'NIHIL' as DppBm  
		,'NIHIL' as PpnBm  
		, c.InvoiceNo
		,case @fStatus when '1' then @fCity else h.LookupValueName end as CityName
		,b.SignedDate
		,c.JobOrderNo
		,case when (@IsRecalPPN=1) and substring(c.InvoiceNo,1,3) in ('INF','INW') then floor(c.TotalDppAmt*10/100)+ c.TotalDppAmt
			else c.TotalSrvAmt
		end TotalAmt
		,b.DueDate    
		,'              ##########' as Asteric1
		,'            ######################' as Asteric2
		,isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0)TotService
		,isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) TotOil
		,isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'DLL'),0) TotDLL
		,case when @FlagAsterix = 0 or @FlagAsterix is null
			then '                        ################################'  
			else 
				case when isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0) = 0 AND isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) <> 0 
				then '###########                            ####################'
				else
					case when isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0) <> 0 AND isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) <> 0
					then
						'                                                 ####################'
					else
						case when isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0) <> 0 AND isnull((select distinct intCount from @temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) = 0
						then	'                        ################################'
						else
							'###########                            ####################'
						end
					end
				end
			end
			as Asteric3
		,'STANDARD' ReportType
		, 7 as xLocation
		, 247 as yLocation
		, isnull(@CountDtl + @StatusEnd,0) TotService2
	  from @dtl a, #fpj b
	  left join #inv c
		on c.CompanyCode = b.CompanyCode
	   and ((case when @IsCentral = 1 then c.BranchCode end) <> ''
			or (case when @IsCentral = 0 then c.BranchCode end) = @BranchCode)
	  left join gnMstCoProfile f
		on f.CompanyCode = b.CompanyCode
	   and f.BranchCode = b.BranchCode
	  left join gnMstCustomer g
		on g.CompanyCode = c.CompanyCode
	   and g.CustomerCode = c.CustomerCodeBill
	  left join gnMstLookupDtl h
		on h.CompanyCode = b.CompanyCode
	   and h.LookupValue  = f.CityCode
	   and h.CodeId  = 'CITY'
	)#result					
	   
	if (@n = 1) 	
	begin		
		select * into #results from (select * from #result)x
		delete #results
	end
	if (@n > 0) 
		insert into #results select * from #result

	drop table #result
	drop table #fpj
	drop table #inv
	drop table #srv
	drop table #tsk
	drop table #itm
	drop table #oth
	drop table #itmSP
	drop table #itmMtrl
	drop table #itmRMtrl
	drop table #itmOli
	drop table #tpSp
	drop table #tpOli
	drop table #tpMt
	drop table #tpRMt
	delete @dtl
	delete @temp
end

if (@n > 0)
begin
	if (@FpjType = '3')	
	begin
		select distinct DetailDesc DD, *
		  , left(DetailDesc, 4) Detail1
		  , substring(DetailDesc, 4, 50) + right(left((DetailDesc + replicate(' ',75)), 75), 10) Detail2
		  , right(left((DetailDesc + replicate(' ',103)), 103), 15) Detail3
		  , case when (select count(FpjGovNo) from #results where FpjGovNo=a.FPJGovNo) = 19 then 17 else 18 end PageBreak   
		  , isnull((
				select top 1 isnull(ParaValue, 1) 
				  from gnMstLookupDtl
				 where CompanyCode = @CompanyCode
				   and CodeID = 'FPIF'
				   and LookUpValue = 'STATUS'
				), 1) IsShowSummary
		  , (PPNAmt + DPPAmt) TotPPNBm
		from #results a
		order by FPJGovNo asc, DetailDesc desc
	end
	else if (@FPJType = '8')	
	begin
		select distinct DetailDesc DD
		  , FpjGovNo
		  , CompanyCode
		  , CompanyName
		  , CompanyAddress
		  , NPWPNo
		  , SkpNo
		  , SkpDate
		  , FpjDate
		  , PoliceRegNo
		  , CustCodeBill
		  , CustNameBill
		  , CustAddr1Bill
		  , CustAddr2Bill
		  , CustAddr3Bill
		  , CustNpwpBill
		  , CustSkpBill
		  , right(rtrim(DetailDesc), len(rtrim(DetailDesc)) - 1) DetailDesc
		  , SalesAmt
		  , DiscAmt
		  , DPAmt
		  , DPPAmt
		  , PPNAmt
		  , DppBm
		  , PpnBm
		  , InvoiceNo
		  , CityName
		  , SignedDate
		  , JobOrderNo
		  , TotalAmt
		  , DueDate
		  , Asteric1
		  , Asteric2
		  , TotService
		  , TotOil
		  , TotDLL
		  , Asteric3
		  , ReportType
		  , xLocation
		  , yLocation
		  , TotService2
		  , left(DetailDesc, 4) Detail1
		  , substring(DetailDesc, 4, 50) + right(left((DetailDesc + replicate(' ',75)), 75), 10) Detail2
		  , right(left((DetailDesc + replicate(' ',103)), 103), 15) Detail3
		  , case when (select count(FpjGovNo) from #results where FpjGovNo=a.FPJGovNo) = 19 then 17 else 18 end PageBreak   
		  , isnull((
				select top 1 isnull(ParaValue, 1) 
				  from gnMstLookupDtl
				 where CompanyCode = @CompanyCode
				   and CodeID = 'FPIF'
				   and LookUpValue = 'STATUS'
				), 1) IsShowSummary
		  , (PPNAmt + DPPAmt) TotPPNBm
		from #results a
		order by FPJGovNo asc, a.DetailDesc		
	end
	else
	begin
		select DetailDesc DD, *
		  , left(DetailDesc, 4) Detail1
		  , substring(DetailDesc, 4, 50) + right(left((DetailDesc + replicate(' ',75)), 75), 10) Detail2
		  , right(left((DetailDesc + replicate(' ',85)), 85), 8)
		  + right(left((DetailDesc + replicate(' ',103)), 103), 15) Detail3
		  , case when (select count(FpjGovNo) from #results where FpjGovNo=a.FPJGovNo) = 19 then 17 else 18 end PageBreak   
		  , isnull((
				select top 1 isnull(ParaValue, 1) 
				  from gnMstLookupDtl
				 where CompanyCode = @CompanyCode
				   and CodeID = 'FPIF'
				   and LookUpValue = 'STATUS'
				), 1) IsShowSummary
		  , (PPNAmt + DPPAmt) TotPPNBm
		from #results a
		order by FPJGovNo
	end
		
	drop table #results
end

drop table #t_fpj
GO
ALTER procedure [dbo].[usppvt_SvMsiP33]  
   @CompanyCode varchar(15),  
   @BranchCode  varchar(15),  
   @StartDate   datetime,  
   @EndDate     datetime  
as    
  
begin    
  
set nocount on;    
  
declare @t1 as table   
(  
 RecNo        int,  
 FieldName    varchar(100),  
 Caption      varchar(100),  
 FormatString varchar(100),  
 IsVisible    bit,  
 Width        int,  
 HAlignment   int,        -- {0:Default,1:Near,2:Center,3:Far}  
 Area         int,        -- {0:Row,1:Column,2:Filter,3:Data}  
 PivotSummaryType   int,  -- {0:Count,1:Sum,2:Min,3:Max,4:Average,5:StdDev,6:StdDevp,7:Var,8:Varp,9:Custom}  
 PivotGroupInterval int   -- {0:Default,1:Date,2:DateDay,3:DateDayOfWeek,4:DateDayOfYear,5:DateWeekOfMonth}  
        -- {6:DateWeekOfYear,7:DateMonth,8:DateQuarter,9:DateYear,10:YearAge,11:MonthAge}  
        -- {12:WeekAge,13:DayAge,14:Alphabetical,15:Numeric,16:Hour,17:Custom}  
)  
  
insert into @t1 values(01,'GroupJobType','Group JobType','',1,120,0,0,0,0)  
insert into @t1 values(02,'JobType','JobType','',1,110,0,0,0,0)  
insert into @t1 values(03,'ChassisCode','Chassis Code','',1,110,0,2,0,0)  
insert into @t1 values(04,'ChassisNo','Chassis No','',1,110,0,2,0,0)  
insert into @t1 values(05,'VinNo','VIN No','',1,160,0,2,0,0)  
insert into @t1 values(06,'Odometer','Odometer','',1,110,0,2,0,0)  
insert into @t1 values(07,'JobOrderDate','JobOrder Date','dd-MMM-yyy HH:mm',1,120,0,2,0,0)  
insert into @t1 values(08,'JobOrderDate','Jml Unit','dd-MMM-yyy HH:mm',1,120,0,3,0,0)  
  
select * from @t1 order by RecNo  
  
select * into #t1 from (  
--select ChassisCode, ChassisNo, JobType, convert(datetime, convert(varchar, JobOrderDate, 112)) JobOrderDate  
--  from svTrnInvoice  
-- where 1 = 1  
--   and CompanyCode = @CompanyCode  
--   and BranchCode = @BranchCode  
--   and convert(varchar, InvoiceDate, 112)  
--       between convert(varchar, @StartDate, 112)   
--       and convert(varchar, @EndDate, 112)  
-- group by ChassisCode, ChassisNo, JobType, convert(varchar, JobOrderDate, 112)  

select a.ChassisCode, a.ChassisNo, (a.ChassisCode + convert(varchar, a.ChassisNo)) as VinNo
     , case b.GroupJobType 
         when 'RTN' then 
			(case 
				when b.WarrantyOdometer in (10000,30000,50000,70000,90000) then 'PB.A.1 3 5 7 9'
				when b.WarrantyOdometer in (20000,60000,100000) then 'PB.A.2 6 10'
				when b.WarrantyOdometer in (40000,80000) then 'PB.A.4 8'
				when b.WarrantyOdometer in (110000,130000,150000,170000,190000) then 'PB.B.1 3 5 7 9'
				when b.WarrantyOdometer in (120000,160000,200000) then 'PB.B.2 6 10'
				when b.WarrantyOdometer in (140000,180000) then 'PB.B.4 8'
				when b.WarrantyOdometer in (210000,230000,250000,270000,290000) then 'PB.B.1 3 5 7 9'
				when b.WarrantyOdometer in (220000,260000,300000) then 'PB.B.2 6 10'
				when b.WarrantyOdometer in (240000,280000) then 'PB.B.4 8'
				when b.WarrantyOdometer in (  5000, 15000, 25000, 35000, 45000, 55000, 65000, 75000, 85000, 95000) then 'PB.C.5000'
				when b.WarrantyOdometer in (105000,115000,125000,135000,145000,155000,165000,175000,185000,195000) then 'PB.C.5000'
				when b.WarrantyOdometer in (205000,215000,225000,235000,245000,155000,265000,275000,285000,295000) then 'PB.C.5000'
				else 'OTHERS'
				end
			)
         when 'FSC' then 
			(case b.PdiFscSeq when 0 then 'PDI' else 'FS' end)
         when 'CLM' then 'CLAIM'
         else 'OTHERS'
       end as GroupJobType
     , case b.GroupJobType 
         when 'RTN' then 'PB' + right(replicate(' ', 5) + convert(varchar, b.WarrantyOdometer), 6) 
         when 'FSC' then 
			(case b.PdiFscSeq when 0 then 'PDI' else ('FS' + right(replicate(' ', 5) + convert(varchar, b.WarrantyOdometer), 6)) end)
         when 'CLM' then 'CLAIM'
         else 'OTHERS'
       end as JobType
     , b.WarrantyOdometer
     , Odometer = (
			select top 1 Odometer
			  from svTrnInvoice
			 where CompanyCode = a.CompanyCode
			   and ChassisCode = a.ChassisCode
			   and ChassisNo = a.ChassisNo
			   and convert(varchar, JobOrderDate, 112) = convert(varchar, a.JobOrderDate, 112)
			 order by Odometer desc 
       )
     , convert(datetime, convert(varchar, a.JobOrderDate, 112)) JobOrderDate  
  from svTrnInvoice a  
  left join svMstJob b
    on b.CompanyCode = a.CompanyCode
   and b.BasicModel = a.BasicModel
   and b.JobType = a.JobType  
 where 1 = 1  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode = @BranchCode  
   and convert(varchar, InvoiceDate, 112)  
       between convert(varchar, @StartDate, 112)   
       and convert(varchar, @EndDate, 112)  
 group by a.CompanyCode, a.ChassisCode, a.ChassisNo, b.GroupJobType, b.PdiFscSeq, b.WarrantyOdometer, convert(varchar, a.JobOrderDate, 112)  
 )#  
  
--select a.* from #t1 a
  
select a.* from #t1 a where a.JobType not in ('OTHER','CLAIM')  
 union all  
select a.* from #t1 a  
 where 1 = 1  
   and a.JobType = 'OTHER'  
   and not exists (  
 select * from #t1  
  where ChassisCode = a.ChassisCode  
    and ChassisNo = a.ChassisNo  
    and JobOrderDate = a.JobOrderDate  
    and JobType != a.JobType)  
 union all  
select a.* from #t1 a  
 where 1 = 1  
   and a.JobType = 'CLAIM'  
   and not exists (  
 select * from #t1  
  where ChassisCode = a.ChassisCode  
    and ChassisNo = a.ChassisNo  
    and JobOrderDate = a.JobOrderDate  
    and JobType ='OTHER')
  
drop table #t1  
  
end
GO
-- usprpt_SvRpReport021V2 '6159401','615940100','4W','2011','01','1','amk'
ALTER procedure [dbo].[usprpt_SvRpReport021V2]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15), 
	@PeriodYear  int,
	@PeriodMonth int,
	@Posting     bit,
	@UserID      varchar(15)
as

--declare	@CompanyCode varchar(15),
--	@BranchCode  varchar(15),
--	@ProductType varchar(15), 
--	@PeriodYear  int,
--	@PeriodMonth int,
--	@Posting     bit,
--	@UserID      varchar(15)
--
--select @CompanyCode='6006406',
--	@BranchCode='6006401',
--	@ProductType='4W', 
--	@PeriodYear=2011,
--	@PeriodMonth=5,
--	@Posting=1,
--	@UserID ='amk'

-- A. Sales Revenue
declare	@TotalLaborSalesRevenue            numeric(18,0) -- Total Labour Sales Revenue ( 2 + 3 + 4 )
declare	@LaborRevenueChargeable            numeric(18,0) -- Labour Sales - Chargeable to customer CPUS (External)
declare	@LaborRevenueNonChargeable1        numeric(18,0) -- Labour Sales - Non-chargeable (Warranty, FS1,FS2,FS3)
declare	@LaborRevenueNonChargeable2        numeric(18,0) -- Labour Sales - Non-chargeable (Internal, PDI)
declare	@TotalPartsSalesRevenue            numeric(18,0) -- Total Parts Sales Revenue ( 6 + 7 + 8 )
declare	@PartsRevenueChargeable            numeric(18,0) -- Parts Sales - Chargeable to customer CPUS (External)
declare	@PartsRevenueNonChargeable1        numeric(18,0) -- Parts Sales - Non-chargeable (Warranty, FS1)
declare	@PartsRevenueNonChargeable2        numeric(18,0) -- Parts Sales - Non-chargeable (Internal, PDI)			

declare	@TotalMaterialSalesRevenue         numeric(18,0) -- Total Lubricant Sales Revenue ( 10 + 11 + 12 )			
declare	@MaterialRevenueChargeable         numeric(18,0) -- Lubricant Sales - Chargeable to customer CPUS (External)			
declare	@MaterialRevenueNonChargeable1     numeric(18,0) -- Lubricant Sales - Non-chargeable (Warranty, FS1)			
declare	@MaterialRevenueNonChargeable2     numeric(18,0) -- Lubricant Sales - Non-chargeable (Internal, PDI)			

declare	@TotalSubletSalesRevenue           numeric(18,0)
declare	@SubletRevenueChargeable           numeric(18,0)
declare	@SubletRevenueNonChargeable1       numeric(18,0)
declare	@SubletRevenueNonChargeable2       numeric(18,0)

declare @TotalServiceSalesRevenue          numeric(18,0)
declare @TotalServiceSalesChargeable       numeric(18,0)
declare @TotalServiceSalesNonChargeable1   numeric(18,0)
declare @TotalServiceSalesNonChargeable2   numeric(18,0)
declare	@HoursSold                         numeric(12,2)
declare @ServiceRevenueTarget			   numeric(18,0) -- Service Revenue Target (RKA)
declare @TotalServiceRevenuePerSA		   numeric(18,0) -- Total Service Revenue per SA
declare	@ServiceRevenuePerUnit             numeric(18,0)
declare	@LaborSalesTurnoverProductiveStaff numeric(18,0)
declare	@LaborSalesTurnoverServiceAdvisors numeric(18,0)
declare	@LaborSalesTurnoverStall           numeric(18,0)
-- B. No. of Unit Intake
declare @UnitEntryTarget				   numeric(08,0) -- Unit Entry Target RKA
declare	@NoWorkOrderVehicleIntake          numeric(08,0)
declare	@PassengerCar                      numeric(08,0)
declare	@CommercialVehicle                 numeric(08,0)
declare	@PDI                               numeric(08,0)
-- C. No. of Job Type
declare @TotalChargeable                   numeric(08,0)
declare @Chargeable1                       numeric(08,0) -- FS 2(10.000 km)
declare @Chargeable2                       numeric(08,0) -- FS 3(20.000 km)
declare @Chargeable3                       numeric(08,0) -- 30,000; 50,000; 70,000; & 90,000 km
declare @Chargeable4                       numeric(08,0) -- 40,000 & 80,000 km
declare @Chargeable5                       numeric(08,0) -- 60,000 & 100,000 km
declare @Chargeable6                       numeric(08,0) -- Above 100,000 km
declare @Chargeable7                       numeric(08,0) -- 5,000 km multiplier & above
declare @Chargeable8                       numeric(08,0) -- G/R Non Periodical Maintenance
declare @Chargeable9                       numeric(08,0) -- Others
declare @TotalNonChargeable                numeric(08,0)
declare @NonChargeable1                    numeric(08,0)
declare @NonChargeable2                    numeric(08,0) 
declare @NonChargeable3                    numeric(08,0) -- RepeatJob
declare @NonChargeable4                    numeric(08,0)
declare @NonChargeable5                    numeric(08,0)
-- D. Workshop Service Strength
declare @NoWorkingStall                    numeric(03,0)
declare @TotalStaff                        numeric(06,0)
declare @NoAdminSupportStaff               numeric(06,0)
declare @NoServiceAdvisorsStaff            numeric(06,0)
declare @NoProductiveStaff                 numeric(06,0)
declare @NoForeman                         numeric(06,0)
declare @NoTechnician                      numeric(06,0)
declare @TechnicianRequirement             numeric(06,0) -- Technician Requirement
declare @NoPDIStaff	                       numeric(06,0)
declare @TotalAvailableHours		       numeric(08,2)
declare @OvertimeNormalWorkingHour 		   numeric(08,2)
-- E. Productivity Indicators	
declare @RepairUnitProductiveStaff         numeric(08,2)
declare @RepairUnitTechnician              numeric(08,2)
declare @RepairUnitWorkingStall            numeric(08,2)
declare @NoCustomertoServiceAdvisor        numeric(08,2)
declare @NoWorkdays	                       numeric(06,0)
declare @RepairUnitProductiveDay           numeric(06,2)
declare @RepairUnitTechnicianDay           numeric(06,2) 
declare @RepairUnitWorkingStallDay         numeric(06,2)
declare @NoCustomertoServiceAdvisorDay     numeric(06,2)
declare @HoursSoldtoAvailableHours         numeric(08,2)
-- F. Service Retention & Marketing Activity  
--> akan berlaku setelah SMR selesai di develop
declare @ServiceReminder                   numeric(08,0)
declare @ServiceFollowUp                   numeric(08,0)
declare @ServiceBookings                   numeric(08,0)
declare @ServiceRemindertoNoWorkOrder      numeric(06,2)
declare @ServiceFollowUptoNoWorkOrder      numeric(06,2)
declare @ServiceBookingstoNoWorkOrder      numeric(06,2)
-- G. CSI Performance	
--> akan berlaku setelah SMR selesai di develop
declare @CSIScore	                       numeric(06,2)
declare @DirectComplaintsReceived	       numeric(08,0)
declare @IndirectComplaintsReceived	       numeric(08,0)
declare @TotalNoFollowUpSatisfied	       numeric(08,0)
declare @TotalNoFollowUpNotSatisfied       numeric(08,0)
declare @NoNotSatisfiedService             numeric(08,0)
declare @NoNotSatisfiedTechnical           numeric(08,0)
declare @TotalNoNotSatisfiedClose	       numeric(08,0) -- Total No.'Not-Satisfied' Close (84+85)
declare @NotSatisfiedServiceClose          numeric(08,0) -- No. of 'Not Satisfied - Service' Close
declare @NotSatisfiedTechicalClose		   numeric(08,0) -- No. of 'Not Satisfied = Technical' Close
declare @FollowUpSatisfiedtoNoWorkOrder    numeric(06,2)
declare @FollowUpNotSatisfiedtoNoWorkOrder numeric(06,2)
declare @ComplaintsFollowUpNotSatisfied    numeric(06,2)

create table #t_MonthReview(
	 GroupField varchar(20)
	, CompanyCode	varchar(15)
	, BranchCode	varchar(15)
	, ProductType varchar(15)
	, PeriodYear  int
	, Description	varchar(max)
	, UOM varchar(10)
	, Average decimal
	, Total decimal
	, Jan decimal , Feb decimal, Mar decimal, Apr decimal
	, May decimal , Jun decimal, Jul decimal, Aug decimal
	, Sep decimal , Oct decimal, Nov decimal, Dec decimal
)


--select * into #task
--  from (select inv.InvoiceNo
--				, isnull(sum(int.OperationHour * int.OperationCost),0) Labor
--				, isnull(sum(int.OperationHour),0) HourEstimate
--          from #inv inv, svTrnInvTask int
--         where int.CompanyCode=@CompanyCode
--           and int.BranchCode=@BranchCode
--           and int.ProductType=@ProductType
--           and int.InvoiceNo=inv.InvoiceNo
--         group by inv.InvoiceNo) task

--select * from #item

select * into #taskpart from (
select a.InvoiceNo, a.JobType, a.LaborDppAmt
	 , a.PartsDppAmt
	 , floor(isnull((
		select sum((itm.SupplyQty - itm.ReturnQty) * itm.RetailPrice)
		  from svTrnInvItem itm
		 where 1 = 1
		   and itm.CompanyCode = a.CompanyCode
		   and itm.BranchCode = a.BranchCode
		   and itm.InvoiceNo = a.InvoiceNo
		   and exists (
			select * from gnMstLookupDtl dtl
			 where 1 = 1
			   and dtl.CompanyCode = itm.CompanyCode
			   and dtl.LookUpValue = itm.TypeOfGoods
			   and dtl.CodeID = 'GTGO'
			   and dtl.ParaValue = 'SPAREPART'
			)
		   and itm.TypeOfGoods not in ('3', 'N')
		), 0) * (1.0 - a.PartsDiscPct * 0.01))  PartAmt
	 , a.MaterialDppAmt
	 , floor(isnull((
		select sum((itm.SupplyQty - itm.ReturnQty) * itm.RetailPrice)
		  from svTrnInvItem itm
		 where 1 = 1
		   and itm.CompanyCode = a.CompanyCode
		   and itm.BranchCode = a.BranchCode
		   and itm.InvoiceNo = a.InvoiceNo
		   and exists (
			select * from gnMstLookupDtl dtl
			 where 1 = 1
			   and dtl.CompanyCode = itm.CompanyCode
			   and dtl.LookUpValue = itm.TypeOfGoods
			   and dtl.CodeID = 'GTGO'
			   and dtl.ParaValue <> 'SPAREPART'
			)
		   and itm.TypeOfGoods not in ('3', 'N')
		), 0) * (1.0 - a.MaterialDiscPct * 0.01))  MatrAmt
  from svTrnInvoice a
 where 1 = 1
   and a.CompanyCode=@CompanyCode
   and a.BranchCode=@BranchCode
   and a.ProductType=@ProductType
   and year(a.InvoiceDate)=@PeriodYear
   and month(a.InvoiceDate)=@PeriodMonth
)#

select * into #taskpart_sublet from (
select InvoiceNo, JobType, LaborDppAmt, PartsDppAmt, MaterialDppAmt
	 , PartsDppAmt + MaterialDppAmt ItemsAmt
	 , PartAmt, MatrAmt
	 , PartsDppAmt + MaterialDppAmt - (PartAmt + MatrAmt) SubletAmt
  from #taskpart
)#

--select * from #sublet

set @TotalLaborSalesRevenue = (select isnull(sum(LaborDppAmt),0) from #taskpart_sublet)
set @LaborRevenueChargeable = (select isnull(sum(LaborDppAmt),0) from #taskpart_sublet
                                where not (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC')
                                  and not (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))
set @LaborRevenueNonChargeable1 = (select isnull(sum(LaborDppAmt),0) from #taskpart_sublet where (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC'))
set @LaborRevenueNonChargeable2 = (select isnull(sum(LaborDppAmt),0) from #taskpart_sublet where (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))

set @TotalPartsSalesRevenue = (select isnull(sum(PartAmt),0) from #taskpart_sublet)
set @PartsRevenueChargeable = (select isnull(sum(PartAmt),0) from #taskpart_sublet
                                where not (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC')
                                  and not (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))
set @PartsRevenueNonChargeable1 = (select isnull(sum(PartAmt),0) from #taskpart_sublet where (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC'))
set @PartsRevenueNonChargeable2 = (select isnull(sum(PartAmt),0) from #taskpart_sublet where (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))

set @TotalMaterialSalesRevenue = (select isnull(sum(MatrAmt),0) from #taskpart_sublet)
set @MaterialRevenueChargeable = (select isnull(sum(MatrAmt),0) from #taskpart_sublet
                                where not (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC')
                                  and not (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))
set @MaterialRevenueNonChargeable1 = (select isnull(sum(MatrAmt),0) from #taskpart_sublet where (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC'))
set @MaterialRevenueNonChargeable2 = (select isnull(sum(MatrAmt),0) from #taskpart_sublet where (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))

set @TotalSubletSalesRevenue = (select isnull(sum(SubletAmt),0) from #taskpart_sublet)
set @SubletRevenueChargeable = (select isnull(sum(SubletAmt),0) from #taskpart_sublet
                                where not (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC')
                                  and not (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))

set @SubletRevenueNonChargeable1 = (select isnull(sum(SubletAmt),0) from #taskpart_sublet where (JobType = 'CLAIM' or substring(JobType, 1 ,3) = 'FSC'))
set @SubletRevenueNonChargeable2 = (select isnull(sum(SubletAmt),0) from #taskpart_sublet where (JobType in ('PDI','REWORK') or substring(InvoiceNo, 1 ,3) = 'INI'))

set @TotalServiceSalesChargeable = isnull(@LaborRevenueChargeable,0) + isnull(@PartsRevenueChargeable,0) + isnull(@MaterialRevenueChargeable,0)
set @TotalServiceSalesNonChargeable1 = isnull(@LaborRevenueNonChargeable1,0) + isnull(@PartsRevenueNonChargeable1,0) + isnull(@MaterialRevenueNonChargeable1,0)
set @TotalServiceSalesNonChargeable2 = isnull(@LaborRevenueNonChargeable2,0) + isnull(@PartsRevenueNonChargeable2,0) + isnull(@MaterialRevenueNonChargeable2,0)
set @TotalServiceSalesRevenue = isnull(@TotalServiceSalesChargeable,0) + isnull(@TotalServiceSalesNonChargeable1,0) + isnull(@TotalServiceSalesNonChargeable2,0)

set @HoursSold = (select isnull(sum(OperationHour),0) from svTrnInvTask
                   where CompanyCode=@CompanyCode
                     and BranchCode=@BranchCode
                     and ProductType=@ProductType
                     and exists (select InvoiceNo from svTrnInvoice
                                  where svTrnInvoice.CompanyCode=@CompanyCode
                                    and svTrnInvoice.BranchCode=@BranchCode
                                    and svTrnInvoice.ProductType=@ProductType
                                    and svTrnInvoice.InvoiceNo=svTrnInvTask.InvoiceNo
                                    and year(svTrnInvoice.InvoiceDate)=@PeriodYear
                                    and month(svTrnInvoice.InvoiceDate)=@PeriodMonth))

-- Service Revenue Target (RKA)
set @ServiceRevenueTarget= isnull((select ServiceAmount
								from svMstTarget
								where CompanyCode=@CompanyCode
									and BranchCode=@BranchCode
									and ProductType=@ProductType
									and PeriodYear=@PeriodYear
									and PeriodMonth=@PeriodMonth),0)
-----------------------------------------------------------------------------------------------
if (select count (inv.ChassisCode) from svTrnInvoice inv
	INNER join svTrnService spk on inv.CompanyCode=spk.CompanyCode
		and inv.BranchCode	= spk.BranchCode
		and inv.ProductType = spk.ProductType
		and inv.JobOrderNo	= spk.JobOrderNo
	left join svMstRefferenceService reff on
		reff.CompanyCode = inv.CompanyCode
		AND reff.ProductType = inv.ProductType
		AND reff.RefferenceCode = inv.BasicModel
	where inv.CompanyCode = @CompanyCode
		AND inv.BranchCode = @BranchCode
		AND inv.ProductType = @ProductType
		AND inv.JobType<>'PDI'
		AND year(inv.InvoiceDate)=@PeriodYear
		AND month(inv.InvoiceDate)=@PeriodMonth
		AND (reff.isLocked IS NULL OR reff.isLocked = 0)) = 0
begin
	set @PassengerCar = 0
end
else
begin
	set @PassengerCar = isnull((select count(*)
                              from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                                    from svTrnInvoice inv
									INNER join svTrnService spk on inv.CompanyCode = spk.CompanyCode
										and inv.BranchCode=spk.BranchCode
										and inv.ProductType=spk.ProductType
										and inv.JobOrderNo=spk.JobOrderNo
									left join svMstRefferenceService reff on
										reff.CompanyCode = inv.CompanyCode
										AND reff.ProductType = inv.ProductType
										AND reff.RefferenceCode = inv.BasicModel
                                    where inv.CompanyCode = @CompanyCode
										AND inv.BranchCode = @BranchCode
										AND inv.ProductType = @ProductType
										AND inv.JobType<>'PDI'
										AND year(inv.InvoiceDate)=@PeriodYear
										AND month(inv.InvoiceDate)=@PeriodMonth
										AND (reff.isLocked IS NULL OR reff.isLocked = 0))pc),0)
end

if (select count (inv.ChassisCode) from svTrnInvoice inv
	INNER join svTrnService spk on inv.CompanyCode=spk.CompanyCode
		and inv.BranchCode=spk.BranchCode
		and inv.ProductType=spk.ProductType
		and inv.JobOrderNo=spk.JobOrderNo
	left join svMstRefferenceService reff on
		reff.CompanyCode = inv.CompanyCode
		AND reff.ProductType = inv.ProductType
		AND reff.RefferenceCode = inv.BasicModel
	where inv.CompanyCode=@CompanyCode
		and inv.BranchCode=@BranchCode
		and inv.ProductType=@ProductType
		and inv.JobType<>'PDI'
		and year(inv.InvoiceDate)=@PeriodYear
		and month(inv.InvoiceDate)=@PeriodMonth
		AND reff.isLocked = 1) = 0
begin
	set @CommercialVehicle = 0
end
else
begin
	set @CommercialVehicle = isnull((select count(*) 
									from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK 
											from svTrnInvoice inv
											INNER join svTrnService spk on inv.CompanyCode = spk.CompanyCode
												and inv.BranchCode = spk.BranchCode
												and inv.ProductType	= spk.ProductType
												and inv.JobOrderNo = spk.JobOrderNo
											left join svMstRefferenceService reff on
												reff.CompanyCode = inv.CompanyCode
												AND reff.ProductType = inv.ProductType
												AND reff.RefferenceCode = inv.BasicModel
											where inv.CompanyCode = @CompanyCode
												AND inv.BranchCode = @BranchCode
												AND inv.ProductType = @ProductType
												AND inv.JobType <> 'PDI'
												AND year(inv.InvoiceDate) = @PeriodYear
												AND month(inv.InvoiceDate) = @PeriodMonth
												AND reff.isLocked = 1)cv),0)
end

set @PDI = isnull((select count(*)
         from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK 
								from svTrnInvoice inv
								INNER join svTrnService spk on inv.CompanyCode = spk.CompanyCode
									and inv.BranchCode = spk.BranchCode
									and inv.ProductType	= spk.ProductType
									and inv.JobOrderNo = spk.JobOrderNo
								left join svMstRefferenceService reff on
									reff.CompanyCode = inv.CompanyCode
									AND reff.ProductType = inv.ProductType
									AND reff.RefferenceCode = inv.BasicModel
								where inv.CompanyCode = @CompanyCode
									AND inv.BranchCode = @BranchCode
									AND inv.ProductType = @ProductType
									AND inv.JobType = 'PDI'
									AND year(inv.InvoiceDate) = @PeriodYear
									AND month(inv.InvoiceDate) = @PeriodMonth
			)pdi),0)

-- B. No. of Unit Intake
-- Unit Entry Target RKA
set @UnitEntryTarget= isnull((select TotalUnitService
						from svMstTarget
						where CompanyCode=@CompanyCode
							and BranchCode=@BranchCode
							and ProductType=@ProductType
							and PeriodYear=@PeriodYear
							and PeriodMonth=@PeriodMonth),0)
set @NoWorkOrderVehicleIntake = @PassengerCar + @CommercialVehicle
if @NoWorkOrderVehicleIntake = 0
begin
	set @ServiceRevenuePerUnit = 0
end
else
begin
	set @ServiceRevenuePerUnit = (@TotalServiceSalesChargeable + @TotalServiceSalesNonChargeable1)/@NoWorkOrderVehicleIntake
end
-- C. No. of Job Type
-- FS 2 (10,000 km)
set @Chargeable1 = isnull((select count(*)
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and (inv.JobType = 'PB10000' or substring(inv.JobType,1,5)='FSC02')
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c1),0)
-- FS 3 (20,000 km)
set @Chargeable2 = isnull((select count(*)
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and (inv.JobType = 'PB20000' or substring(inv.JobType,1,5)='FSC03')
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c2),0)
-- 30,000; 50,000; 70,000; & 90,000 km
set @Chargeable3 = isnull((select count(*) 
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and inv.CompanyCode=job.CompanyCode
                                     and inv.ProductType=job.ProductType
                                     and inv.BasicModel=job.BasicModel
                                     and inv.JobType=job.JobType
                                     and job.GroupJobType='RTN'
                                     and inv.JobType in ('PB30000','PB50000','PB70000','PB90000')
                                     and substring(inv.JobType,3,15) like '%0000%'
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c3),0)
-- 40,000 & 80,000 km
set @Chargeable4 = isnull((select count(*) 
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and inv.CompanyCode=job.CompanyCode
                                     and inv.ProductType=job.ProductType
                                     and inv.BasicModel=job.BasicModel
                                     and inv.JobType=job.JobType
                                     and job.GroupJobType='RTN'
                                     and inv.JobType in ('PB40000','PB80000')
                                     and substring(inv.JobType,3,15) like '%0000%'
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c4),0)
-- 60,000 & 100,000 km
set @Chargeable5 = isnull((select count(*) 
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and inv.CompanyCode=job.CompanyCode
                                     and inv.ProductType=job.ProductType
                                     and inv.BasicModel=job.BasicModel
                                     and inv.JobType=job.JobType
                                     and job.GroupJobType='RTN'
                                     and inv.JobType in ('PB60000','PB100000')
                                     and substring(inv.JobType,3,15) like '%0000%'
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c5),0)
-- > 100,000 km
set @Chargeable6 = isnull((select count(*) 
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and inv.CompanyCode=job.CompanyCode
                                     and inv.ProductType=job.ProductType
                                     and inv.BasicModel=job.BasicModel
                                     and inv.JobType=job.JobType
                                     and job.GroupJobType='RTN'
                                     and inv.JobType > 'PB100000'
                                     and substring(inv.JobType,3,15) like '%0000%'
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c6),0)
-- 5,000 km multiplier & above
set @Chargeable7 = isnull((select count(*)
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and inv.CompanyCode=job.CompanyCode
                                     and inv.ProductType=job.ProductType
                                     and inv.BasicModel=job.BasicModel
                                     and inv.JobType=job.JobType
                                     and job.GroupJobType='RTN'
                                     and substring(inv.JobType,3,15) like '%5000'
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c7),0)
--  G/R Non Periodical Maintenance
set @Chargeable8 = isnull((select count(*)
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and inv.CompanyCode=job.CompanyCode
                                     and inv.ProductType=job.ProductType
                                     and inv.BasicModel=job.BasicModel
                                     and inv.JobType=job.JobType
                                     and job.GroupJobType not in ('FSC','OTH','RTN')
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c8),0)
-- Others
set @Chargeable9 = isnull((select count(*)
                            from (select inv.InvoiceNo 
                                    from svTrnInvoice inv, svTrnInvTask int
                                   where inv.CompanyCode=@CompanyCode
                                     and inv.BranchCode=@BranchCode
                                     and inv.ProductType=@ProductType
                                     and year(inv.InvoiceDate)=@PeriodYear
                                     and month(inv.InvoiceDate)=@PeriodMonth
                                     and inv.JobType='OTHER'
                                     and substring(inv.InvoiceNo,1,3) <> 'INI'
                                     and inv.CompanyCode=int.CompanyCode
                                     and inv.BranchCode=int.BranchCode
                                     and inv.ProductType=int.ProductType
                                     and inv.InvoiceNo=int.InvoiceNo)c9),0)

set @TotalChargeable = @Chargeable1 + @Chargeable2 + @Chargeable3 + @Chargeable4 + @Chargeable5 + @Chargeable6 + @Chargeable7 + @Chargeable8 + @Chargeable9

set @NonChargeable1 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='CLAIM'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc1),0)

set @NonChargeable2 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='FSC01'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc2),0)

set @NonChargeable3 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType in ('REWORK','REPEAT')
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc3),0)

set @NonChargeable4 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and substring(inv.InvoiceNo,1,3)='INI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc4),0)

set @NonChargeable5 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='PDI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc5),0)

set @TotalNonChargeable = @NonChargeable1 + @NonChargeable2 + @NonChargeable3 + @NonChargeable4 + @NonChargeable5

-- D. Workshop Service Strength
set @NoWorkingStall = isnull((select count(*) from svMstStall
                               where CompanyCode=@CompanyCode
                                 and ProductType=@ProductType
                                 and IsActive=1),1)

set @NoAdminSupportStaff = isnull((select count(*) from gnMstEmployee
                                    where CompanyCode=@CompanyCode
                                      and BranchCode=@BranchCode
                                      and TitleCode in ('2','4','7','10','11')
                                      and PersonnelStatus='1'),1)

set @NoServiceAdvisorsStaff = isnull((select count(*) from gnMstEmployee
                                       where CompanyCode=@CompanyCode
                                         and BranchCode=@BranchCode
                                         and TitleCode='3'
                                         and PersonnelStatus='1'),1)

-- Total Service Revenue per SA 
if @NoServiceAdvisorsStaff=0
	set @TotalServiceRevenuePerSA= 0
else
	set @TotalServiceRevenuePerSA=@ServiceRevenueTarget/@NoServiceAdvisorsStaff

set @NoForeman = isnull((select count(*) from gnMstEmployee
                          where CompanyCode=@CompanyCode
                            and BranchCode=@BranchCode
                            and TitleCode='8'
                            and PersonnelStatus='1'),1)

set @NoTechnician = isnull((select count(*) from gnMstEmployee
                             where CompanyCode=@CompanyCode
                               and BranchCode=@BranchCode
                               and TitleCode='9'
                               and PersonnelStatus='1'),1)

set @NoPDIStaff	= 0
set @NoProductiveStaff = @NoForeman + @NoTechnician
set @TotalStaff = @NoAdminSupportStaff + @NoServiceAdvisorsStaff + @NoProductiveStaff + @NoPDIStaff

set @TotalAvailableHours = isnull((select TotalWorkingDays from svMstTarget
                                    where CompanyCode=@CompanyCode
                                      and BranchCode=@BranchCode
                                      and ProductType=@ProductType
                                      and PeriodYear=@PeriodYear
                                      and PeriodMonth=@PeriodMonth),0) * 8

set @OvertimeNormalWorkingHour = 0

if 	@NoProductiveStaff = 0 
    set @LaborSalesTurnoverProductiveStaff = 0
else
    set @LaborSalesTurnoverProductiveStaff = @TotalLaborSalesRevenue / @NoProductiveStaff

if @NoServiceAdvisorsStaff = 0
    set @LaborSalesTurnoverServiceAdvisors= 0
else
    set @LaborSalesTurnoverServiceAdvisors= @TotalLaborSalesRevenue / @NoServiceAdvisorsStaff

if 	@NoWorkingStall = 0 
    set @LaborSalesTurnoverStall = 0
else
    set @LaborSalesTurnoverStall = @TotalLaborSalesRevenue / @NoWorkingStall

-- E. Productivity Indicators
if 	@NoProductiveStaff = 0 
    set @RepairUnitProductiveStaff = 0
else
    set @RepairUnitProductiveStaff = @NoWorkOrderVehicleIntake / @NoProductiveStaff

if 	@NoTechnician = 0 
    set @RepairUnitTechnician = 0
else
    set @RepairUnitTechnician = @NoWorkOrderVehicleIntake / @NoTechnician 

if 	@NoWorkingStall = 0 
    set @RepairUnitWorkingStall = 0
else
    set @RepairUnitWorkingStall = @NoWorkOrderVehicleIntake / @NoWorkingStall

if @NoServiceAdvisorsStaff = 0
    set @NoCustomertoServiceAdvisor = 0
else
    set @NoCustomertoServiceAdvisor = @NoWorkOrderVehicleIntake / @NoServiceAdvisorsStaff

set @NoWorkdays = isnull((select TotalWorkingDays from svMstTarget
                           where CompanyCode=@CompanyCode
                             and BranchCode=@BranchCode
                             and ProductType=@ProductType
                             and PeriodYear=@PeriodYear
                             and PeriodMonth=@PeriodMonth),0)
-- Technician Requirment
if @NoWorkdays = 0
	set @TechnicianRequirement= 0
else
	set @TechnicianRequirement= @UnitEntryTarget/@NoWorkdays/2.5

if @NoWorkdays = 0
    begin
       set @RepairUnitProductiveDay = 0
       set @RepairUnitTechnicianDay = 0
       set @RepairUnitWorkingStallDay = 0
       set @NoCustomertoServiceAdvisorDay = 0
       set @RepairUnitProductiveDay = 0
       set @RepairUnitTechnicianDay = 0
       set @RepairUnitWorkingStallDay = 0
       set @NoCustomertoServiceAdvisorDay = 0
    end
else
    begin
       if @NoWorkdays = 0 set @NoWorkdays = 1
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff / @NoWorkdays
       set @RepairUnitTechnicianDay = @RepairUnitTechnician / @NoWorkdays
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall / @NoWorkdays
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor / @NoWorkdays
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff / @NoWorkdays
       set @RepairUnitTechnicianDay = @RepairUnitTechnician / @NoWorkdays
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall / @NoWorkdays
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor / @NoWorkdays
    end

if @TotalAvailableHours = 0
    set @HoursSoldtoAvailableHours = 0
else
    set @HoursSoldtoAvailableHours = @HoursSold * 100 / @TotalAvailableHours

-- F. Service Retention & Marketing Activity
set @ServiceReminder =	(select count(*)
						from dbo.svTrnDailyRetention
						where  1=1
							and CompanyCode=@CompanyCode 
							and BranchCode=@BranchCode
							and PeriodYear=@PeriodYear
							and PeriodMonth=@PeriodMonth
							and isnull(IsReminder,0)=1)

set @ServiceFollowUp =	(select count(*)
						from dbo.svTrnDailyRetention
						where  1=1
							and CompanyCode=@CompanyCode 
							and BranchCode=@BranchCode
							and PeriodYear=@PeriodYear
							and PeriodMonth=@PeriodMonth
							and isnull(IsFollowUp,0)=1)

set @ServiceBookings =	(select count(*)
						from dbo.svTrnDailyRetention
						where  1=1
							and CompanyCode=@CompanyCode 
							and BranchCode=@BranchCode
							and PeriodYear=@PeriodYear
							and PeriodMonth=@PeriodMonth
							and isnull(IsBooked,0)=1)

if @NoWorkOrderVehicleIntake = 0
   begin
       set @ServiceRemindertoNoWorkOrder = 0
       set @ServiceFollowUptoNoWorkOrder = 0
       set @ServiceBookingstoNoWorkOrder = 0
   end
else
   begin
       set @ServiceRemindertoNoWorkOrder = @ServiceReminder * 100 / @NoWorkOrderVehicleIntake
       set @ServiceFollowUptoNoWorkOrder = @ServiceFollowUp * 100 / @NoWorkOrderVehicleIntake
       set @ServiceBookingstoNoWorkOrder = @ServiceBookings * 100 / @NoWorkOrderVehicleIntake
   end

-- G. CSI Performance	
--> akan berlaku setelah SMR selesai di develop
set @CSIScore = 0
set @DirectComplaintsReceived = 0
set @TotalNoFollowUpSatisfied = (select count(*)
								from dbo.svTrnDailyRetention
								where  1=1
									and CompanyCode=@CompanyCode 
									and BranchCode=@BranchCode
									and PeriodYear=@PeriodYear
									and PeriodMonth=@PeriodMonth
									and isnull(IsFollowUp,0)=1
									and isnull(IsSatisfied,0)=1)

set @NoNotSatisfiedService = (select count(*)
							from dbo.svTrnDailyRetention
							where  1=1
								and CompanyCode=@CompanyCode 
								and BranchCode=@BranchCode
								and PeriodYear=@PeriodYear
								and PeriodMonth=@PeriodMonth
								and isnull(IsFollowUp,0)=1
								and isnull(IsSatisfied,0)=0
								and isnull(StatisfyReasonGroup,0)='P')

set @NoNotSatisfiedTechnical =  (select count(*)
								from dbo.svTrnDailyRetention
								where  1=1
									and CompanyCode=@CompanyCode 
									and BranchCode=@BranchCode
									and PeriodYear=@PeriodYear
									and PeriodMonth=@PeriodMonth
									and isnull(IsFollowUp,0)=1
									and isnull(IsSatisfied,0)=0
									and isnull(StatisfyReasonGroup,0)='T')

set @IndirectComplaintsReceived = @NoNotSatisfiedService + @NoNotSatisfiedTechnical

set @TotalNoNotSatisfiedClose = 0
set @NotSatisfiedServiceClose = 0
set @NotSatisfiedTechicalClose = 0
set @TotalNoFollowUpNotSatisfied = @NoNotSatisfiedService + @NoNotSatisfiedTechnical

if @NoWorkOrderVehicleIntake = 0
   begin
      set @FollowUpSatisfiedtoNoWorkOrder = 0
      set @FollowUpNotSatisfiedtoNoWorkOrder = 0
      set @ComplaintsFollowUpNotSatisfied = 0
   end
else
   begin
      set @FollowUpSatisfiedtoNoWorkOrder = @TotalNoFollowUpSatisfied / @NoWorkOrderVehicleIntake
      set @FollowUpNotSatisfiedtoNoWorkOrder = @TotalNoFollowUpNotSatisfied / @NoWorkOrderVehicleIntake
      set @ComplaintsFollowUpNotSatisfied = (@DirectComplaintsReceived + @IndirectComplaintsReceived +
                                             @TotalNoFollowUpNotSatisfied) / @NoWorkOrderVehicleIntake
   end
-- Insert/Update Process
declare	@Flag            numeric(2,0)
set @Flag = (select count(*) from svHstMSI
 where CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and ProductType = @ProductType
   and PeriodYear  = @PeriodYear
   and PeriodMonth = @PeriodMonth)

if  @Flag = 0
    begin
INSERT INTO [svHstMSI]
           ([CompanyCode]
           ,[BranchCode]
           ,[ProductType]
           ,[PeriodYear]
           ,[PeriodMonth]
           ,[TotalLaborSalesRevenue]
           ,[LaborRevenueChargeable]
           ,[LaborRevenueNonChargeable1]
           ,[LaborRevenueNonChargeable2]
           ,[TotalPartsSalesRevenue]
           ,[PartsRevenueChargeable]
           ,[PartsRevenueNonChargeable1]
           ,[PartsRevenueNonChargeable2]
           ,[TotalOtherSalesRevenue]
           ,[OtherRevenueChargeable]
           ,[OtherRevenueNonChargeable1]
           ,[OtherRevenueNonChargeable2]
           ,[TotalSubletSalesRevenue]
           ,[SubletRevenueChargeable]
           ,[SubletRevenueNonChargeable1]
           ,[SubletRevenueNonChargeable2]
           ,[TotalServiceSalesRevenue]
           ,[TotalServiceSalesChargeable]
           ,[TotalServiceSalesNonChargeable1]
           ,[TotalServiceSalesNonChargeable2]
           ,[HoursSold]
		   ,[ServiceRevenueTarget]
           ,[ServiceRevenuePerUnit]
		   ,[TotalServiceRevenuePerSA]
           ,[LaborSalesTurnoverProductiveStaff]
           ,[LaborSalesTurnoverServiceAdvisors]
           ,[LaborSalesTurnoverStall]
		   ,[UnitEntryTarget]
           ,[NoWorkOrderVehicleIntake]
           ,[PassengerCar]
           ,[CommercialCar]
           ,[PDI]
           ,[TotalChargeable]
           ,[Chargeable1]
           ,[Chargeable2]
           ,[Chargeable3]
           ,[Chargeable4]
		   ,[Chargeable5]
           ,[Chargeable6]
           ,[Chargeable7]
           ,[Chargeable8]
		   ,[Chargeable9]
           ,[TotalNonChargeable]
           ,[NonChargeable1]
           ,[NonChargeable2]
           ,[NonChargeable3]
           ,[NonChargeable4]
           ,[NonChargeable5]
           ,[NoWorkingStall]
           ,[TotalStaff]
           ,[NoAdminSupportStaff]
           ,[NoServiceAdvisorsStaff]
           ,[NoProductiveStaff]
           ,[NoForeman]
           ,[NoTechnician]
	       ,[TechnicianRequirement]
           ,[NoPDIStaff]
           ,[TotalAvailableHours]
           ,[OvertimeNormalWorkingHour]
           ,[RepairUnitProductiveStaff]
           ,[RepairUnitTechnician]
           ,[RepairUnitWorkingStall]
           ,[NoCustomertoServiceAdvisor]
           ,[NoWorkdays]
           ,[RepairUnitProductiveDay]
           ,[RepairUnitTechnicianDay]
           ,[RepairUnitWorkingStallDay]
           ,[NoCustomertoServiceAdvisorDay]
           ,[HoursSoldtoAvailableHours]
           ,[ServiceReminder]
           ,[ServiceFollowUp]
           ,[ServiceBooking]
           ,[ServiceRemindertoNoWorkOrder]
           ,[ServiceFollowUptoNoWorkOrder]
           ,[ServiceBookingstoNoWorkOrder]
           ,[CSIScore]
           ,[DirectComplaintsReceived]
           ,[IndirectComplaintsReceived]
           ,[TotalNoFollowUpSatisfied]
           ,[TotalNoFollowUpNotSatisfied]
           ,[NoNotSatisfiedService]
           ,[NoNotSatisfiedTechnical]
		   ,[TotalNoNotSatisfiedClose]
		   ,[NotSatisfiedServiceClose]
		   ,[NotSatisfiedTechicalClose]
           ,[FollowUpSatisfiedtoNoWorkOrder]
           ,[FollowUpNotSatisfiedtoNoWorkOrder]
           ,[ComplaintsFollowUpNotSatisfied]
           ,[IsActive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[IsLocked]
           ,[LockingBy]
           ,[LockingDate])
     VALUES
           (@CompanyCode 
           ,@BranchCode 
           ,@ProductType 
           ,@PeriodYear 
           ,@PeriodMonth 
           ,@TotalLaborSalesRevenue 
           ,@LaborRevenueChargeable 
           ,@LaborRevenueNonChargeable1 
           ,@LaborRevenueNonChargeable2 
           ,@TotalPartsSalesRevenue 
           ,@PartsRevenueChargeable 
           ,@PartsRevenueNonChargeable1 
           ,@PartsRevenueNonChargeable2 
           ,@TotalMaterialSalesRevenue 
           ,@MaterialRevenueChargeable 
           ,@MaterialRevenueNonChargeable1 
           ,@MaterialRevenueNonChargeable2 
           ,@TotalSubletSalesRevenue 
           ,@SubletRevenueChargeable 
           ,@SubletRevenueNonChargeable1 
           ,@SubletRevenueNonChargeable2 
           ,@TotalServiceSalesRevenue 
           ,@TotalServiceSalesChargeable 
           ,@TotalServiceSalesNonChargeable1 
           ,@TotalServiceSalesNonChargeable2 
           ,@HoursSold 
           ,@ServiceRevenueTarget
           ,@ServiceRevenuePerUnit
		   ,@TotalServiceRevenuePerSA 
           ,@LaborSalesTurnoverProductiveStaff 
           ,@LaborSalesTurnoverServiceAdvisors 
           ,@LaborSalesTurnoverStall 
		   ,@UnitEntryTarget
           ,@NoWorkOrderVehicleIntake 
           ,@PassengerCar 
           ,@CommercialVehicle 
           ,@PDI 
           ,@TotalChargeable 
           ,@Chargeable1 
           ,@Chargeable2 
           ,@Chargeable3 
           ,@Chargeable4 
		   ,@Chargeable5
           ,@Chargeable6
           ,@Chargeable7
           ,@Chargeable8
		   ,@Chargeable9
           ,@TotalNonChargeable 
           ,@NonChargeable1 
           ,@NonChargeable2 
           ,@NonChargeable3 
           ,@NonChargeable4 
           ,@NonChargeable5 
           ,@NoWorkingStall
           ,@TotalStaff 
           ,@NoAdminSupportStaff 
           ,@NoServiceAdvisorsStaff 
           ,@NoProductiveStaff 
           ,@NoForeman 
           ,@NoTechnician 
		   ,@TechnicianRequirement
           ,@NoPDIStaff 
           ,@TotalAvailableHours 
           ,@OvertimeNormalWorkingHour 
           ,@RepairUnitProductiveStaff 
           ,@RepairUnitTechnician 
           ,@RepairUnitWorkingStall 
           ,@NoCustomertoServiceAdvisor 
           ,@NoWorkdays 
           ,@RepairUnitProductiveDay 
           ,@RepairUnitTechnicianDay 
           ,@RepairUnitWorkingStallDay 
           ,@NoCustomertoServiceAdvisorDay 
           ,@HoursSoldtoAvailableHours 
           ,@ServiceReminder 
           ,@ServiceFollowUp 
           ,@ServiceBookings
           ,@ServiceRemindertoNoWorkOrder 
           ,@ServiceFollowUptoNoWorkOrder 
           ,@ServiceBookingstoNoWorkOrder 
           ,@CSIScore 
           ,@DirectComplaintsReceived 
           ,@IndirectComplaintsReceived 
           ,@TotalNoFollowUpSatisfied 
           ,@TotalNoFollowUpNotSatisfied 
           ,@NoNotSatisfiedService 
           ,@NoNotSatisfiedTechnical 
		   ,@TotalNoNotSatisfiedClose
		   ,@NotSatisfiedServiceClose
		   ,@NotSatisfiedTechicalClose
           ,@FollowUpSatisfiedtoNoWorkOrder 
           ,@FollowUpNotSatisfiedtoNoWorkOrder 
           ,@ComplaintsFollowUpNotSatisfied 
           ,''
           ,@UserID 
           ,getdate()
           ,'' 
           ,''
           ,0
           ,'' 
           ,'')
   end
else
 begin
if  @Posting = 1
        begin
UPDATE [svHstMSI]
   SET [CompanyCode] = @CompanyCode 
      ,[BranchCode] = @BranchCode 
      ,[ProductType] = @ProductType 
      ,[PeriodYear] = @PeriodYear 
      ,[PeriodMonth] = @PeriodMonth 
      ,[TotalLaborSalesRevenue] = @TotalLaborSalesRevenue 
      ,[LaborRevenueChargeable] = @LaborRevenueChargeable 
      ,[LaborRevenueNonChargeable1] = @LaborRevenueNonChargeable1 
      ,[LaborRevenueNonChargeable2] = @LaborRevenueNonChargeable2 
      ,[TotalPartsSalesRevenue] = @TotalPartsSalesRevenue 
      ,[PartsRevenueChargeable] = @PartsRevenueChargeable 
      ,[PartsRevenueNonChargeable1] = @PartsRevenueNonChargeable1 
      ,[PartsRevenueNonChargeable2] = @PartsRevenueNonChargeable2 
      ,[TotalOtherSalesRevenue] = @TotalMaterialSalesRevenue 
      ,[OtherRevenueChargeable] = @MaterialRevenueChargeable 
      ,[OtherRevenueNonChargeable1] = @MaterialRevenueNonChargeable1 
      ,[OtherRevenueNonChargeable2] = @MaterialRevenueNonChargeable2 
      ,[TotalSubletSalesRevenue] = @TotalSubletSalesRevenue 
      ,[SubletRevenueChargeable] = @SubletRevenueChargeable 
      ,[SubletRevenueNonChargeable1] = @SubletRevenueNonChargeable1 
      ,[SubletRevenueNonChargeable2] = @SubletRevenueNonChargeable2 
      ,[TotalServiceSalesRevenue] = @TotalServiceSalesRevenue 
      ,[TotalServiceSalesChargeable] = @TotalServiceSalesChargeable 
      ,[TotalServiceSalesNonChargeable1] = @TotalServiceSalesNonChargeable1 
      ,[TotalServiceSalesNonChargeable2] = @TotalServiceSalesNonChargeable2 
      ,[HoursSold] = @HoursSold 
	  ,[ServiceRevenueTarget] = @ServiceRevenueTarget
      ,[ServiceRevenuePerUnit] = @ServiceRevenuePerUnit
	  ,[TotalServiceRevenuePerSA] = @TotalServiceRevenuePerSA 
      ,[LaborSalesTurnoverProductiveStaff] = @LaborSalesTurnoverProductiveStaff 
      ,[LaborSalesTurnoverServiceAdvisors] = @LaborSalesTurnoverServiceAdvisors 
      ,[LaborSalesTurnoverStall] = @LaborSalesTurnoverStall 
	  ,[UnitEntryTarget] = @UnitEntryTarget
      ,[NoWorkOrderVehicleIntake] = @NoWorkOrderVehicleIntake 
      ,[PassengerCar] = @PassengerCar 
      ,[CommercialCar] = @CommercialVehicle
      ,[PDI] = @PDI 
      ,[TotalChargeable] = @TotalChargeable 
      ,[Chargeable1] = @Chargeable1 
      ,[Chargeable2] = @Chargeable2 
      ,[Chargeable3] = @Chargeable3 
      ,[Chargeable4] = @Chargeable4 
	  ,[Chargeable5] = @Chargeable5
      ,[Chargeable6] = @Chargeable6 
      ,[Chargeable7] = @Chargeable7 
      ,[Chargeable8] = @Chargeable8
	  ,[Chargeable9] = @Chargeable9
      ,[TotalNonChargeable] = @TotalNonChargeable 
      ,[NonChargeable1] = @NonChargeable1 
      ,[NonChargeable2] = @NonChargeable2 
      ,[NonChargeable3] = @NonChargeable3 
      ,[NonChargeable4] = @NonChargeable4 
      ,[NonChargeable5] = @NonChargeable5 
      ,[NoWorkingStall] = @NoWorkingStall 
      ,[TotalStaff] = @TotalStaff 
      ,[NoAdminSupportStaff] = @NoAdminSupportStaff 
      ,[NoServiceAdvisorsStaff] = @NoServiceAdvisorsStaff 
      ,[NoProductiveStaff] = @NoProductiveStaff 
      ,[NoForeman] = @NoForeman 
      ,[NoTechnician] = @NoTechnician 
	  ,[TechnicianRequirement] = @TechnicianRequirement
      ,[NoPDIStaff] = @NoPDIStaff 
      ,[TotalAvailableHours] = @TotalAvailableHours 
      ,[OvertimeNormalWorkingHour] = @OvertimeNormalWorkingHour 
      ,[RepairUnitProductiveStaff] = @RepairUnitProductiveStaff 
      ,[RepairUnitTechnician] = @RepairUnitTechnician 
      ,[RepairUnitWorkingStall] = @RepairUnitWorkingStall 
      ,[NoCustomertoServiceAdvisor] = @NoCustomertoServiceAdvisor 
      ,[NoWorkdays] = @NoWorkdays 
      ,[RepairUnitProductiveDay] = @RepairUnitProductiveDay 
      ,[RepairUnitTechnicianDay] = @RepairUnitTechnicianDay 
      ,[RepairUnitWorkingStallDay] = @RepairUnitWorkingStallDay 
      ,[NoCustomertoServiceAdvisorDay] = @NoCustomertoServiceAdvisorDay 
      ,[HoursSoldtoAvailableHours] = @HoursSoldtoAvailableHours 
      ,[ServiceReminder] = @ServiceReminder 
      ,[ServiceFollowUp] = @ServiceFollowUp 
      ,[ServiceBooking] = @ServiceBookings
      ,[ServiceRemindertoNoWorkOrder] = @ServiceRemindertoNoWorkOrder 
      ,[ServiceFollowUptoNoWorkOrder] = @ServiceFollowUptoNoWorkOrder 
      ,[ServiceBookingstoNoWorkOrder] = @ServiceBookingstoNoWorkOrder 
      ,[CSIScore] = @CSIScore 
      ,[DirectComplaintsReceived] = @DirectComplaintsReceived 
      ,[IndirectComplaintsReceived] = @IndirectComplaintsReceived 
      ,[TotalNoFollowUpSatisfied] = @TotalNoFollowUpSatisfied 
      ,[TotalNoFollowUpNotSatisfied] = @TotalNoFollowUpNotSatisfied 
      ,[NoNotSatisfiedService] = @NoNotSatisfiedService 
      ,[NoNotSatisfiedTechnical] = @NoNotSatisfiedTechnical 
	  ,[TotalNoNotSatisfiedClose] = @TotalNoNotSatisfiedClose
      ,[NotSatisfiedServiceClose] = @NotSatisfiedServiceClose
      ,[NotSatisfiedTechicalClose] = @NotSatisfiedTechicalClose
      ,[FollowUpSatisfiedtoNoWorkOrder] = @FollowUpSatisfiedtoNoWorkOrder 
      ,[FollowUpNotSatisfiedtoNoWorkOrder] = @FollowUpNotSatisfiedtoNoWorkOrder 
      ,[ComplaintsFollowUpNotSatisfied] = @ComplaintsFollowUpNotSatisfied 
--      ,[IsActive] = @IsActive
--      ,[CreatedBy] = @CreatedBy 
--      ,[CreatedDate] = @CreatedDate
      ,[LastUpdateBy] = @UserID
      ,[LastUpdateDate] = getdate()
--      ,[IsLocked] = @IsLocked
--      ,[LockingBy] = @LockingBy 
--      ,[LockingDate] = @LockingDate
 WHERE [CompanyCode] = @CompanyCode
      AND [BranchCode] = @BranchCode
      AND [ProductType] = @ProductType
      AND [PeriodYear] = @PeriodYear
      AND [PeriodMonth] = @PeriodMonth
	end
end
print @ServiceBookings
-- select data field
select * into #TotalLaborSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Labour Sales Revenue ( 2 + 3 + 4 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalLaborSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
	) as Header
	pivot(SUM(TotalLaborSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalLaborSalesRevenue

select * into #LaborRevenueChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Labour Sales - Chargeable to customer CPUS (External)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborRevenueChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborRevenueChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborRevenueChargeable

select * into #LaborRevenueNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Labour Sales - Non-chargeable (Warranty, FS1,FS2,FS3)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborRevenueNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborRevenueNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborRevenueNonChargeable1

select * into #LaborRevenueNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Labour Sales - Non-chargeable (Internal, PDI)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborRevenueNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborRevenueNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborRevenueNonChargeable2

select * into #TotalPartsSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Parts Sales Revenue ( 6 + 7 + 8 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalPartsSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalPartsSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalPartsSalesRevenue

select * into #PartsRevenueChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Parts Sales - Chargeable to customer CPUS (External)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PartsRevenueChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PartsRevenueChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PartsRevenueChargeable

select * into #PartsRevenueNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Parts Sales - Non-chargeable (Warranty, FS1)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PartsRevenueNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PartsRevenueNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PartsRevenueNonChargeable1

select * into #PartsRevenueNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Parts Sales - Non-chargeable (Internal, PDI)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PartsRevenueNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PartsRevenueNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PartsRevenueNonChargeable2

select * into #TotalMaterialSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Lubricant Sales Revenue ( 10 + 11 + 12 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalOtherSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalOtherSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalMaterialSalesRevenue

select * into #MaterialRevenueChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Lubricant Sales - Chargeable to customer CPUS (External)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OtherRevenueChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OtherRevenueChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#MaterialRevenueChargeable

select * into #MaterialRevenueNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Lubricant Sales - Non-chargeable (Warranty, FS1)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OtherRevenueNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OtherRevenueNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#MaterialRevenueNonChargeable1

select * into #MaterialRevenueNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Lubricant Sales - Non-chargeable (Internal, PDI)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OtherRevenueNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OtherRevenueNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#MaterialRevenueNonChargeable2

select * into #TotalSubletSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Sublet Sales Revenue ( 14 + 15 + 16 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalSubletSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalSubletSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalSubletSalesRevenue

select * into #SubletRevenueChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Sublet Sales - Chargeable to customer CPUS (External)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,SubletRevenueChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(SubletRevenueChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#SubletRevenueChargeable

select * into #SubletRevenueNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Sublet Sales - Non-chargeable (Warranty, FS1)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,SubletRevenueNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(SubletRevenueNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#SubletRevenueNonChargeable1

select * into #SubletRevenueNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Sublet  Sales - Non-chargeable (Internal, PDI)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,SubletRevenueNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(SubletRevenueNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#SubletRevenueNonChargeable2

select * into #TotalServiceSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Service Sales Revenue ( 18 + 19 + 20 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesRevenue

select * into #TotalServiceSalesChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Total Service Sales - Chargeable to customer CPUS (External) ( 2 + 6 + 10 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesChargeable

select * into #TotalServiceSalesNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Total Service Sales - Non-chargeable (Warranty, FS1) ( 3 +  7 + 11 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesNonChargeable1

select * into #TotalServiceSalesNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Total Service Sales - Non-chargeable (Internal, PDI) ( 4 + 8 + 12 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesNonChargeable2

select * into #HoursSold from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Hours Sold' Description
	  ,'Hours' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,HoursSold
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(HoursSold) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#HoursSold

select * into #ServiceRevenueTarget from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Revenue Target (RKA)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceRevenueTarget
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceRevenueTarget) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceRevenueTarget

select * into #ServiceRevenuePerUnit from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Revenue per Unit exclude PDI (CPUS, Warranty, FS1) ( (18 + 19) / 29 )
' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceRevenuePerUnit
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceRevenuePerUnit) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceRevenuePerUnit

select * into #TotalServiceRevenuePerSA from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Service Revenue per SA' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceRevenuePerSA
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceRevenuePerSA) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceRevenuePerSA

select * into #LaborSalesTurnoverProductiveStaff from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Labour  Sales Turnover / Productive staff (Technician & Foreman)  ( 1 / 54 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborSalesTurnoverProductiveStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborSalesTurnoverProductiveStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborSalesTurnoverProductiveStaff

select * into #LaborSalesTurnoverServiceAdvisors from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Labour Sales Turnover / Service Advisors ( 1 / 53 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborSalesTurnoverServiceAdvisors
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborSalesTurnoverServiceAdvisors) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborSalesTurnoverServiceAdvisors

select * into #LaborSalesTurnoverStall from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Labour Sales Turnover / Stall ( 1 / 50 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborSalesTurnoverStall
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborSalesTurnoverStall) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborSalesTurnoverStall

select * into #UnitEntryTarget from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Unit Entry Target RKA' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,UnitEntryTarget
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(UnitEntryTarget) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#UnitEntryTarget

select * into #NoWorkOrderVehicleIntake from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Work Order / vehicle Intake exclude PDI ( 30 + 31 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoWorkOrderVehicleIntake
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoWorkOrderVehicleIntake) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoWorkOrderVehicleIntake

select * into #PassengerCar from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Passenger Car (exclude Angkot, Pickup, chassis)' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PassengerCar
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PassengerCar) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PassengerCar

select * into #CommercialVehicle from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Commercial Vehicle (Angkot, Pickup, Chassis)' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,CommercialCar
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(CommercialCar) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#CommercialVehicle

select * into #PDI from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   PDI' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PDI
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PDI) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PDI

select * into #TotalChargeable from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Chargeable /  Customer Paid Unit Service (CPUS) (  Sum of 34 to 43 )' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalChargeable

select * into #NoJobType1 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   FS 2 (10,000 km)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType1

select * into #NoJobType2 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   FS 3 (20,000 km)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType2

select * into #NoJobType3 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   30,000; 50,000; 70,000; & 90,000 km' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable3
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable3) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType3

select * into #NoJobType4 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   40,000 & 80,000 km' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable4
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable4) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType4

select * into #NoJobType5 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   60,000 & 100,000 km' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable5
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable5) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType5

select * into #NoJobType6 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Above 100,000 km' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable6
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable6) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType6

select * into #NoJobType7 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   5,000 km multiplier & above' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable7
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable7) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType7

select * into #NoJobType8 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   G/R Non Periodical Maintenance' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable8
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable8) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType8

select * into #NoJobTypeOthers from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Others' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable9
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable9) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeOthers

select * into #TotalNonChargeable from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Non-chargeable Repair (Warranty, Internal, PDI) ( 45 + 46 + 47 + 48 + 49 )' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalNonChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalNonChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNonChargeable

select * into #NoJobTypeWarranty from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Warranty Repair' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeWarranty

select * into #NoJobTypeInternalFSC from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Internal Repair (FS 1)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalFSC

select * into #NoJobTypeInternalRework from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Repeat Job' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable3
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable3) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalRework

select * into #NoJobTypeInternalOthers from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Internal Repair (Others)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable4
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable4) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalOthers

select * into #NoJobTypeInternalPDI from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of PDI intake' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable5
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable5) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalPDI

select * into #NoWorkingStall from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Working Stalls' Description
	  ,'Stall' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoWorkingStall
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoWorkingStall) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoWorkingStall

select * into #TotalStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total No. of Staff ( 51 + 52 + 53 + 57 )' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalStaff

select * into #NoServiceStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Admin & Support Staff (include Parts staff)' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoAdminSupportStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoAdminSupportStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoServiceStaff

select * into #NoServiceAdvisor from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Service Advisors' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoServiceAdvisorsStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoServiceAdvisorsStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoServiceAdvisor

select * into #TotalProductiveStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Productive Staff ( 54 + 55 )' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoProductiveStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoProductiveStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalProductiveStaff

select * into #NoForeman from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'      No. of Foreman' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoForeman
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoForeman) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoForeman

select * into #NoTechnician from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'      No. of Technician' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoTechnician
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoTechnician) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoTechnician

select * into #TechnicianRequirement from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'      Technician Requirement' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TechnicianRequirement
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TechnicianRequirement) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TechnicianRequirement

select * into #NoPDIStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of PDI Staff' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoPDIStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoPDIStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoPDIStaff

select * into #TotalAvailableHour from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Available Hours' Description
	  ,'Hours' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalAvailableHours
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalAvailableHours) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalAvailableHour

select * into #TotalWorkingHour from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Overtime/Normal Working Hour ' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OvertimeNormalWorkingHour
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OvertimeNormalWorkingHour) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalWorkingHour

select * into #RepairUnitProductStaff from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Productive staff ( 29 / 53 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitProductiveStaff 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitProductiveStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitProductStaff

select * into #RepairUnitTech from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Repair Unit per Technician ( 29 / 55 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitTechnician
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitTechnician) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitTech

select * into #RepairUnitWorkStall from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Working Stall ( 29 / 49 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitWorkingStall
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitWorkingStall) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RRepairUnitWorkStall

select * into #NoCustomer from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Customer / Service Advisor ( 29 / 52)' Description
	  ,'Customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoCustomertoServiceAdvisor
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoCustomertoServiceAdvisor) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoCustomer

select * into #NoWorkdays from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Workdays' Description
	  ,'Days' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoWorkdays
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoWorkdays) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoWorkdays

select * into #RepairUnitProductDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Productive staff / day ( 60 / 64 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitProductiveDay 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitProductiveDay ) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitProductDay

select * into #RepairUnitTechDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Repair Unit per Technician / day ( 61 / 64 ) ' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitTechnicianDay 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitTechnicianDay ) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitTechDay

select * into #RepairUnitWorkStallDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Working Stall / day ( 62 / 64 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitWorkingStallDay 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitWorkingStallDay ) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitWorkStallDay

select * into #NoCustomerDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Customer / Service Advisor / day ( 63 / 64 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoCustomertoServiceAdvisorDay
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoCustomertoServiceAdvisorDay) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoCustomerDay

select * into #AvailableHours from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Hours Sold / Available hours ( 21 / 58 ) ' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,HoursSoldtoAvailableHours
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(HoursSoldtoAvailableHours) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#AvailableHours

select * into #ServiceReminders from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Reminder' Description
	  ,'customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceReminder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceReminder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceReminders

select * into #ServiceFollowups from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Follow-ups' Description
	  ,'customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceFollowUp
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceFollowUp) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceFollowups

select * into #ServiceBookings from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Bookings' Description
	  ,'customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceBooking
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceBooking) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceBookings

select * into #PercentServiceReminder  from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'% Service Reminder (to repair unit (work order) ( 70 / 29 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceRemindertoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceRemindertoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PercentServiceReminder

select * into #PercentServiceFollowups  from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'% Service Follow-ups to repair unit (work order) ( 71 / 29 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceFollowUptoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceFollowUptoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PercentServiceFollowups

select * into #PercentServiceBookings  from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'% Service Bookings to repair unit (work order) ( 72 / 29 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceBookingstoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceBookingstoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PercentServiceBookings

select * into #CSIScore  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'CSI Score' Description
	  ,'' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,CSIScore
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(CSIScore) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#CSIScore

select * into #Directcomplaintsreceived  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Directcomplaintsreceived' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,DirectComplaintsReceived
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(DirectComplaintsReceived) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#Directcomplaintsreceived

select * into #Indirectcomplaintsreceived  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Indirect complaints received' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,IndirectComplaintsReceived
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(IndirectComplaintsReceived) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#Indirectcomplaintsreceived

select * into #TotalNoFollowup  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total No. Follow up - Satisfied' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalNoFollowUpSatisfied
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalNoFollowUpSatisfied) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowup

select * into #TotalNoFollowupNotSatisfied  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total No. Follow up ''Not-Satisfied'' ( 81 + 82 )' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalNoFollowUpNotSatisfied
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalNoFollowUpNotSatisfied) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowupNotSatisfied

select * into #TotalNoFollowupNotSatisfiedService  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of ''Not Satisfied - Service''' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoNotSatisfiedService
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoNotSatisfiedService) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowupNotSatisfiedService

select * into #TotalNoFollowupNotSatisfiedTechnical  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of ''Not Satisfied = Technical''' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoNotSatisfiedTechnical
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoNotSatisfiedTechnical) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowupNotSatisfiedTechnical


select * into #TotalNoNotSatisfiedClose  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total No. Follow up ''Not-Satisfied'' Close ( 84 + 85 )' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalNoNotSatisfiedClose
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalNoNotSatisfiedClose) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoNotSatisfiedClose

select * into #NotSatisfiedServiceClose  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of ''Not Satisfied - Service'' Close''' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NotSatisfiedServiceClose
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NotSatisfiedServiceClose) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NotSatisfiedServiceClose

select * into #NotSatisfiedTechicalClose  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of ''Not Satisfied = Technical'' Close''' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NotSatisfiedTechicalClose
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NotSatisfiedTechicalClose) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NotSatisfiedTechicalClose


select * into #FollowupSatisfied  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Follow up ''Satisfied''/Intake Ratio ( 79 / 29 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,FollowUpSatisfiedtoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(FollowUpSatisfiedtoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#FollowupSatisfied

select * into #FollowupNotSatisfied  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	    ,'Follow up ''Not Satisfied''/Intake Ratio ( 80 / 29)' Description
	    ,'%' UOM
	    ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,FollowUpNotSatisfiedtoNoWorkOrder
		from svHstMSI		
	where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
	) as Header
	pivot(SUM(FollowUpNotSatisfiedtoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#FollowupNotSatisfied
select * into #ComplainsFollowup from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	    ,'Complaints & Follow up ''Not Satisfied''/Intake Ratio ( ( 77 + 78 + 80) / 29 )' Description
	    ,'%' UOM
	    ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
			  ,BranchCode
			  ,ProductType
			  ,PeriodYear
			  ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
			  ,ComplaintsFollowUpNotSatisfied
			from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ComplaintsFollowUpNotSatisfied) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ComplainsFollowup

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalLaborSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborRevenueChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborRevenueNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborRevenueNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalPartsSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PartsRevenueChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PartsRevenueNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PartsRevenueNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalMaterialSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #MaterialRevenueChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #MaterialRevenueNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #MaterialRevenueNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalSubletSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #SubletRevenueChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #SubletRevenueNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #SubletRevenueNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #HoursSold a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceRevenueTarget a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceRevenuePerUnit a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceRevenuePerSA a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborSalesTurnoverProductiveStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborSalesTurnoverServiceAdvisors a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborSalesTurnoverStall a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #UnitEntryTarget a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoWorkOrderVehicleIntake a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PassengerCar a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #CommercialVehicle a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PDI a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType3 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType4 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType5 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType6 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType7 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType8 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeOthers a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNonChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeWarranty a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalFSC a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalRework a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalOthers a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalPDI a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoWorkingStall a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoServiceStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoServiceAdvisor a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalProductiveStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoForeman a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoTechnician a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TechnicianRequirement a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoPDIStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalAvailableHour a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalWorkingHour a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitProductStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitTech a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitWorkStall a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoCustomer a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoWorkdays a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitProductDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitTechDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitWorkStallDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoCustomerDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #AvailableHours a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceReminders a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceFollowups a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceBookings a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PercentServiceReminder a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PercentServiceFollowups a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PercentServiceBookings a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #CSIScore a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #Directcomplaintsreceived a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #Indirectcomplaintsreceived a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowup a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowupNotSatisfied a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowupNotSatisfiedService a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowupNotSatisfiedTechnical a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoNotSatisfiedClose a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NotSatisfiedServiceClose a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NotSatisfiedTechicalClose a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #FollowupSatisfied a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #FollowupNotSatisfied a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ComplainsFollowup a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

select * from #t_MonthReview


--drop table #task
drop table #taskpart
drop table #taskpart_sublet
drop table #t_MonthReview

drop table #SubletRevenueNonChargeable1
drop table #SubletRevenueNonChargeable2
drop table #SubletRevenueChargeable
drop table #LaborRevenueChargeable
drop table #TotalLaborSalesRevenue
drop table #TotalSubletSalesRevenue
drop table #LaborRevenueNonChargeable1
drop table #LaborRevenueNonChargeable2
drop table #TotalPartsSalesRevenue
drop table #PartsRevenueChargeable
drop table #PartsRevenueNonChargeable1
drop table #PartsRevenueNonChargeable2
drop table #TotalMaterialSalesRevenue
drop table #MaterialRevenueChargeable
drop table #MaterialRevenueNonChargeable1
drop table #MaterialRevenueNonChargeable2
drop table #TotalServiceSalesRevenue
drop table #TotalServiceSalesChargeable
drop table #TotalServiceSalesNonChargeable1
drop table #TotalServiceSalesNonChargeable2
drop table #HoursSold
drop table #ServiceRevenueTarget
drop table #ServiceRevenuePerUnit
drop table #TotalServiceRevenuePerSA
drop table #LaborSalesTurnoverProductiveStaff
drop table #LaborSalesTurnoverServiceAdvisors
drop table #LaborSalesTurnoverStall
drop table #UnitEntryTarget
drop table #NoWorkOrderVehicleIntake
drop table #PassengerCar
drop table #CommercialVehicle
drop table #PDI
drop table #TotalChargeable
drop table #NoJobType1
drop table #NoJobType2
drop table #NoJobType3
drop table #NoJobType4
drop table #NoJobType5
drop table #NoJobType6
drop table #NoJobType7
drop table #NoJobType8
drop table #NoJobTypeOthers
drop table #TotalNonChargeable
drop table #NoJobTypeWarranty
drop table #NoJobTypeInternalFSC
drop table #NoJobTypeInternalRework
drop table #NoJobTypeInternalOthers
drop table #NoJobTypeInternalPDI
drop table #NoWorkingStall
drop table #TotalStaff
drop table #NoServiceStaff
drop table #NoServiceAdvisor
drop table #TotalProductiveStaff
drop table #NoForeman
drop table #NoTechnician
drop table #TechnicianRequirement
drop table #NoPDIStaff
drop table #TotalAvailableHour
drop table #TotalWorkingHour
drop table #RepairUnitProductStaff
drop table #RepairUnitTech
drop table #RepairUnitWorkStall
drop table #NoCustomer
drop table #NoWorkdays
drop table #RepairUnitProductDay
drop table #RepairUnitTechDay
drop table #RepairUnitWorkStallDay
drop table #NoCustomerDay
drop table #AvailableHours
drop table #ServiceReminders
drop table #ServiceFollowups
drop table #ServiceBookings
drop table #PercentServiceReminder
drop table #PercentServiceFollowups
drop table #PercentServiceBookings
drop table #CSIScore
drop table #Directcomplaintsreceived
drop table #Indirectcomplaintsreceived
drop table #TotalNoFollowup
drop table #TotalNoFollowupNotSatisfied
drop table #TotalNoFollowupNotSatisfiedService
drop table #TotalNoFollowupNotSatisfiedTechnical
drop table #TotalNoNotSatisfiedClose
drop table #NotSatisfiedServiceClose
drop table #NotSatisfiedTechicalClose
drop table #FollowupSatisfied
drop table #FollowupNotSatisfied
drop table #ComplainsFollowup
GO
ALTER procedure [dbo].[uspfn_SvInqGetClaim]
	 @CompanyCode	varchar(20),
	 @InvoiceFrom	varchar(20),
	 @InvoiceTo		varchar(20),
	 @BranchFrom	varchar(20),
	 @BranchTo		varchar(20),
	 @IsSprClaim	bit = 0

as

if @BranchFrom = '[All Branch]' and @BranchTo = '[All Branch]'
begin
	select * into #t1 from (
	select (row_number() over (order by a.InvoiceNo)) as SeqNo
		 , a.BranchCode, a.InvoiceNo, isnull(b.JobOrderDate, c.InvoiceDate) InvoiceDate
		 , a.IsCbu, a.CategoryCode, a.ComplainCode, a.DefectCode
		 , a.SubletHour, a.SubletAmt, a.CausalPartNo, a.TroubleDescription
		 , a.ProblemExplanation, a.OperationNo, a.OperationHour, a.OperationAmt
		 , isnull(b.BasicModel, c.BasicModel) BasicModel
		 , isnull(b.ServiceBookNo, '') ServiceBookNo
		 , isnull(b.ChassisCode, c.ChassisCode) ChassisCode
		 , isnull(b.ChassisNo, c.ChassisNo) ChassisNo
		 , isnull(b.EngineCode, c.EngineCode) EngineCode
		 , isnull(b.EngineNo, c.EngineNo) EngineNo
		 , isnull(b.Odometer, 0) Odometer
		 , isnull(b.TotalSrvAmount, c.TotalSrvAmt) ClaimAmt
		 , isnull(b.TotalSrvAmount, c.TotalSrvAmt) TotalSrvAmt
	  from svTrnInvClaim a
	  left join svTrnService b
		on b.CompanyCode = a.CompanyCode
	   and b.BranchCode = a.BranchCode
	   and b.JobOrderNo = a.InvoiceNo
	  left join svTrnInvoice c
		on c.CompanyCode = a.CompanyCode
	   and c.BranchCode = a.BranchCode
	   and c.InvoiceNo = a.InvoiceNo
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and convert(varchar, b.JobOrderDate, 112) between @InvoiceFrom and @InvoiceTo
	   and isnull(b.IsSparepartClaim, 0) = @IsSprClaim
	   and not exists (
		select * from svTrnClaimApplication
		 where CompanyCode = a.CompanyCode
		   and BranchCode = a.BranchCode
		   and InvoiceNo = a.InvoiceNo
		)
	   and b.ServiceStatus != '6' --Penambahan
	)#
	
	select * from #t1

	select (row_number() over (order by a.BasicModel)) as SeqNo
		 , a.BasicModel, count(a.BasicModel) Qty, sum(a.TotalSrvAmt) as TotalSrvAmt
	  from #t1 a
	 group by a.BasicModel

	drop table #t1
end
else
begin
	select * into #t2 from (
	select (row_number() over (order by a.InvoiceNo)) as SeqNo
		 , a.BranchCode, a.InvoiceNo, isnull(b.JobOrderDate, c.InvoiceDate) InvoiceDate
		 , a.IsCbu, a.CategoryCode, a.ComplainCode, a.DefectCode
		 , a.SubletHour, a.SubletAmt, a.CausalPartNo, a.TroubleDescription
		 , a.ProblemExplanation, a.OperationNo, a.OperationHour, a.OperationAmt
		 , isnull(b.BasicModel, c.BasicModel) BasicModel
		 , isnull(b.ServiceBookNo, '') ServiceBookNo
		 , isnull(b.ChassisCode, c.ChassisCode) ChassisCode
		 , isnull(b.ChassisNo, c.ChassisNo) ChassisNo
		 , isnull(b.EngineCode, c.EngineCode) EngineCode
		 , isnull(b.EngineNo, c.EngineNo) EngineNo
		 , isnull(b.Odometer, 0) Odometer
		 , isnull(b.TotalSrvAmount, c.TotalSrvAmt) ClaimAmt
		 , isnull(b.TotalSrvAmount, c.TotalSrvAmt) TotalSrvAmt
	  from svTrnInvClaim a
	  left join svTrnService b
		on b.CompanyCode = a.CompanyCode
	   and b.BranchCode = a.BranchCode
	   and b.JobOrderNo = a.InvoiceNo
	  left join svTrnInvoice c
		on c.CompanyCode = a.CompanyCode
	   and c.BranchCode = a.BranchCode
	   and c.InvoiceNo = a.InvoiceNo
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode between @BranchFrom and @BranchTo
	   and a.InvoiceNo between @InvoiceFrom and @InvoiceTo
	   and isnull(b.IsSparepartClaim, 0) = @IsSprClaim
	   and not exists (
		select * from svTrnClaimApplication
		 where CompanyCode = a.CompanyCode
		   and BranchCode = a.BranchCode
		   and InvoiceNo = a.InvoiceNo
		)
       and b.ServiceStatus != '6' --Penambahan
	)#
		
	select * from #t2

	select (row_number() over (order by a.BasicModel)) as SeqNo
		 , a.BasicModel, count(a.BasicModel) Qty, sum(a.TotalSrvAmt) as TotalSrvAmt
	  from #t2 a
	 group by a.BasicModel

	drop table #t2
end
GO
-- [usprpt_SvRpTrn008] '6006406','6006406','010.000-11.00029503','010.000-11.00029503',2
ALTER procedure [dbo].[usprpt_SvRpTrn008SBAM]
 @CompanyCode varchar(20),       
 @BranchCode varchar(20),      
 @FpjGovNoFrom varchar(20),
 @FpjGovNoTo varchar(20),
 @FpjType int,
 @Potongan bit,
 @StartDate varchar(20),
 @EndDate varchar(20)

as

-- Setting Header Faktur Pajak --
---------------------------------
declare @fCompName	varchar(max)
declare @fAdd		varchar(max)
declare @fAdd1		varchar(max)
declare @fAdd2		varchar(max)
declare @fNPWP		varchar(max)
declare @fSKP		varchar(max)
declare @fSKPDate	varchar(max)
declare @fCity		varchar(max)

declare @fStatus varchar(1)
set @fStatus = 0

if exists (select 1 from gnMstLookUpDtl where codeid='FPJFLAG')
begin
	set @fStatus = (select paravalue from gnmstlookupdtl where codeid='FPJFLAG' and lookupvalue='STATUS')
end

if (@fStatus = '1')
begin
	set @fCompName	= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='NAME')
	set @fAdd1		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='ADD1')
	set @fAdd2		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='ADD2')
	set @fAdd		= @fAdd1+' '+@fAdd2
	set @fNPWP		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='NPWP')
	set @fSKP		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='SKPNO')
	set @fSKPDate	= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='SKPDATE')
	set @fCity		= (select isnull(lookupvaluename,'') from gnmstlookupdtl where codeid='FPJINFO' and lookupvalue='CITY')		
end

-- parameter use address holding or not
declare @IsHoldingAddr as bit
if (select count(*) from gnMstLookUpDtl where CompanyCode= @CompanyCode and CodeID='FPJADDR') > 0
	set @IsHoldingAddr = (select convert(numeric,LookUpValue) from gnMstLookUpDtl where CompanyCode= @CompanyCode and CodeID='FPJADDR')
else
	set @IsHoldingAddr = 0

declare @ReportParam as varchar(2)
declare @IsCentral as bit
declare @IsRecalPPN as bit

--add by seandy
declare @StatusEnd  as int
declare @CountDtl as int

declare @FlagAsterix as bit
set @FlagAsterix = (select ParaValue from GnMstLookUpDtl where CodeID = 'XFAK' and LookUpValue = 'SHOW_SV')

-- check seberapa banyak FPJGovNo yang akan di display
create table #t_fpj(
	rownum int,
	FPjGovNo varchar(20)
)

-- 0= Without  newline, 1= With newline at detail
set @ReportParam='0'
if (select count(LookupValue) from gnMstLookUpDtl where CodeID='RPSV') > 0
	set @ReportParam= (select LookUpValue from gnMstLookUpDtl where CodeID='RPSV')


-- 0= Without BranchCode, 1= With BranchCode
set @IsCentral=0
if ((select count(LookupValue) from gnMstLookUpDtl where CodeID='FPGB') > 0 and (@FpjType = '3' or @FpjType = '8')
	and (select IsBranch from gnMstOrganizationDtl where CompanyCode=@CompanyCode and BranchCode= @BranchCode)=0)
begin
	if (select LookUpValue from gnMstLookUpDtl where CodeID='FPGB') = '1'
		set @IsCentral= 1
	else
		set @IsCentral= 0
end

-- 0= Not Recalculate PPN, 1= Recalculate PPN (For FPJ Gabungan)
set @IsRecalPPN=0
if (select count(ParaValue) from gnMstLookUpDtl where CodeID='CPPN' and LookUpValue='STATUS') > 0
	set @IsRecalPPN= (select convert(bit,ParaValue) from gnMstLookUpDtl where CodeID='CPPN' and LookUpValue='STATUS')

-- get FPJGovNo from transaction
if(len(@FpjGovNoFrom) > 8 and len(@FpjGovNoTo) > 8)
	if (@FpjType = '3' or @FpjType = '8')
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where right(FpjGovNo,len(FPJGovNo) - 8) between @FpjGovNoFrom and @FpjGovNoTo
		   and convert(varchar,FpjDate,112) between @StartDate and @EndDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice > 1		
	else
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where right(FpjGovNo,len(FPJGovNo) - 8) between @FpjGovNoFrom and @FpjGovNoTo
		   and convert(varchar,FpjDate,112) between @StartDate and @EndDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice = 1		
else
	if (@FpjType = '3' or @FpjType = '8')
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where convert(varchar, FpjDate, 112) between @StartDate and @EndDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice > 1		
	else
		insert into #t_fpj
		select (row_number() over (order by FpjGovNo)) as rownum, FpjGovNo from svTrnFakturPajak
		 where convert(varchar, FpjDate, 112) between @StartDate and @EndDate
		   and CompanyCode = @CompanyCode
		   and BranchCode = @BranchCode
		   and IsPKP = 1 and FPJGovNo <> ''
		   and NoOfInvoice = 1
declare @n int 
set @n = 0

-- start looping
declare @FpjGovNo varchar(20)
while (@n < (select max(rownum) from #t_fpj))
begin
	set @n = @n + 1;
	set @FpjGovNo = (select FpjGovNo from #t_fpj where rownum = @n)

	-- get FPJGovNo
	select * into #fpj from (
	select CompanyCode, BranchCode, FPjGovNo, FpjNo, FpjDate, SignedDate, DueDate
	  from svTrnFakturPajak
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and FpjGovNo = @FpjGovNo
	) #fpj

	-- get invoice data from transaction
	select * into #inv from (
	select CompanyCode
		  ,BranchCode
		  ,InvoiceNo
		  ,JobOrderNo
		  ,CustomerCodeBill
		  ,PoliceRegNo
		  ,isnull(LaborGrossAmt,0) LaborGrossAmt
		  ,isnull(PartsGrossAmt,0) PartsGrossAmt
		  ,isnull(MaterialGrossAmt,0) MaterialGrossAmt
		  ,isnull(LaborDiscAmt,0) LaborDiscAmt
		  ,isnull(PartsDiscAmt,0) PartsDiscAmt
		  ,isnull(MaterialDiscAmt,0) MaterialDiscAmt
		  ,isnull(TotalDppAmt,0) TotalDppAmt
		  ,isnull(TotalPphAmt,0) TotalPphAmt
		  ,isnull(TotalPpnAmt,0) TotalPpnAmt
		  ,isnull(TotalSrvAmt,0) TotalSrvAmt
      from svTrnInvoice a
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and ((case when @IsCentral = 1 then BranchCode end) <> ''
			or (case when @IsCentral = 0 then BranchCode end) = @BranchCode)
	   --and BranchCode = @BranchCode
	   and isLocked=@IsCentral
	   and FpjNo in (select FpjNo from #fpj) --b.FpjNo
	) #inv

	-- get Data SPK
	select * into #srv from (
	select CompanyCode, BranchCode, ProductType, JobOrderNo, BasicModel, JobType from svTrnService
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and ((case when @IsCentral = 1 then BranchCode end) <> ''
			or (case when @IsCentral = 0 then BranchCode end) = @BranchCode)
	   and BranchCode+''+JobOrderNo in (select BranchCode+''+JobOrderNo from #inv)
	) #srv

	create table #dtl(DetailDesc varchar(300))
	create table #temp(FPJGovNo varchar(35), CodeID varchar(3),intCount int)

	select * into #tsk from (
	select
		 row_number() over (order by a.OperationNo) RecNo
		,a.*, (a.OperationHour * a.OperationCost) as OperationAmt
		,b.JobOrderNo, @FpjGovNo FpjGovNo,b.LaborDiscAmt,b.PartsDiscAmt,b.MaterialDiscAmt
	  from svTrnInvTask a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.InvoiceNo = b.InvoiceNo
	   and a.IsSubCon= (case when a.InvoiceNo like 'INW%' then isnull(a.IsSubCon, 0) else 0 end)
	)#tsk

	select * into #itm from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	)#itm

	select * into #oth from (
	select
		 row_number() over (order by a.OperationNo) RecNo
		,a.*, (a.OperationHour * a.OperationCost) as OperationAmt
		,b.JobOrderNo, @FpjGovNo FpjGovNo
	  from svTrnInvTask a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.InvoiceNo = b.InvoiceNo
	   and isnull(a.IsSubCon, 0) = 1
	)#oth

----------------------------------------------------------------------------	
	--Type of Goods SPAREPART
	select * into #tpSp from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue = 'SPAREPART' )#tpSp

	--Type of Goods OLI
	select * into #tpOli from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue = 'OLI' )#tpOli

	--Type of Goods MATERIAL
	select * into #tpMt from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue = 'MATERIAL' )#tpMt

	--Type of Goods RINCI MATERIAL
	select * into #tpRMt from (
	select LookUpValue from gnMstLookUpDtl where companyCode = @CompanyCode
		and CodeId = 'GTGO' and ParaValue in ('MATERIAL','OLI') )#tpRMt

-----------------------------------------------------------------------------

	select * into #itmSP from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in (select * from #tpSp)
	)#itmSP

	select * into #itmOli from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in(select * from #tpOli)
	)#itmOli

	select * into #itmMtrl from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in (select * from #tpMt)
	)#itmMtrl

	select * into #itmRMtrl from (
	select
		 row_number() over (order by a.PartNo) RecNo
		,a.PartNo
		,(a.SupplyQty - a.ReturnQty) SupplyQty
		,a.RetailPrice
		,(a.RetailPrice * (a.SupplyQty - a.ReturnQty)) RetailAmt
		,a.TypeOfGoods
	  from svTrnInvItem a, #inv b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = b.BranchCode
	   and a.InvoiceNo = b.InvoiceNo
	   and a.TypeOfGoods in (select * from #tpRMt)
	)#itmRMtrl

	declare @TaskAmt money
	declare @ItemAmt money
	declare @MaterialAmt money
	declare @SalesAmt int
	declare @DiscAmt money

	-- select condition for 'Standard'
	if (@FpjType = '1')
	begin
		-- Insert Jasa Perbaikan
		if ((select count(*) from #tsk) > 0)
		begin
			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if (@ReportParam = '1')
					insert into #dtl values (' ')
			insert into #dtl
			select left(('    JASA PERBAIKAN'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
				),18)

			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				),80)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
			insert into #dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
			set @DiscAmt = isnull((select top 1 LaborDiscAmt from #tsk),0)
			insert into #dtl
			select left(('                                        Potongan Jasa'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
				),18)

			insert into #dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			insert into #dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
				),18)
			end

			if (select count(*) from #itm) > 0
			begin
				insert into #dtl values ('')
			end

--			insert into #dtl values ('')
			
			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into #Temp 
				select @FpjGovNo, 'SRV', COUNT(*) intCount from #tsk a
			  left join #srv b
				on b.JobOrderNo = a.jobOrderNo
			  left join svMstTask c
				on c.CompanyCode = b.CompanyCode
			   and c.ProductType = b.ProductType
			   and c.BasicModel = b.BasicModel
			   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
			   and c.OperationNo = a.OperationNo
 		end

		-- Insert Pemakaian Sparepart
		if ((select count(*) from #itm) > 0)
		begin
			insert into #dtl values ('    PEMAKAIAN SPAREPART/MATERIAL')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
			  from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
			insert into #dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
			set @DiscAmt = isnull((select top 1 PartsDiscAmt from #tsk),0)
			insert into #dtl
			select left(('                                        Potongan Part'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
				),18)

			insert into #dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate('-',20)
				+ '-'
				),18)

			insert into #dtl
			select left(('                                        '
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
				),18)
			end

			if (select count(*) from #oth) > 0
			begin
				insert into #dtl values ('')
			end
--			insert into #dtl values ('')

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into #Temp
				select @FpjGovNo,'OIL',COUNT(*) intCount from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo
		end

		-- Insert Jasa SubCon (Lain - lain)
		if ((select count(*) from #oth) > 0)
		begin
			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
			if (@ReportParam = '1')
				insert into #dtl values (' ')
			insert into #dtl
			select left(('    LAIN - LAIN'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
				),18)

			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				),80)
			  from #oth a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
				set @DiscAmt = isnull((select top 1 MaterialDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end


			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into #Temp
				select @FpjGovNo,'DLL',COUNT(*) intCount from #oth a
				  left join #srv b
					on b.JobOrderNo = a.jobOrderNo
				  left join svMstTask c
					on c.CompanyCode = b.CompanyCode
				   and c.ProductType = b.ProductType
				   and c.BasicModel = b.BasicModel
				   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
				   and c.OperationNo = a.OperationNo
		end
	end

	-- select condition for 'Rinci'
	if (@FpjType = '2')
	begin
		-- Insert Jasa Perbaikan
		if ((select count(*) from #tsk) > 0)
		begin
			if (@ReportParam = '1')
				insert into #dtl values (' ')
			insert into #dtl values ('    JASA PERBAIKAN')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',10)
				--+ convert(varchar, a.OperationHour, 1)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),35)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if ((select count(*) from #tsk) > 1)
				begin
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 LaborDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                            '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #tsk) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end
			
			if (select count(*) from #itm) > 0
			begin
				insert into #dtl values ('')
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into #Temp 
				select @FpjGovNo, 'SRV', COUNT(*) intCount from #tsk a
			  left join #srv b
				on b.JobOrderNo = a.jobOrderNo
			  left join svMstTask c
				on c.CompanyCode = b.CompanyCode
			   and c.ProductType = b.ProductType
			   and c.BasicModel = b.BasicModel
			   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
			   and c.OperationNo = a.OperationNo
		end

		-- Insert Sparepart / Material
		if ((select count(*) from #itm) > 0)
		begin
			insert into #dtl values ('    PEMAKAIAN SPAREPART/MATERIAL')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
			  from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
				if ((select count(*) from #itm) > 1)
				begin
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 PartsDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)


				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #itm) > 1)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
					insert into #dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end

			if (select count(*) from #oth) > 0
			begin
				insert into #dtl values ('')
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into #Temp
				select @FpjGovNo,'OIL',COUNT(*) intCount from #itm a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo
		end

		-- Insert Jasa SubCon (Lain - Lain)
		if ((select count(*) from #oth) > 0)
		begin
			if (@ReportParam = '1') insert into #dtl values (' ')
			insert into #dtl values ('    LAIN - LAIN')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ isnull(c.Description, '')
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',10)
				--+ convert(varchar, a.OperationHour, 1)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),35)
			  from #oth a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
				if ((select count(*) from #oth) > 1)
				begin
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 MaterialDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #oth) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #oth),0)
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end

			-- add by Seandy 20-9-2011
			-- Untuk menentukan jenis coretan pada keterangan(ada atau tidaknya)
			insert into #Temp
				select @FpjGovNo,'DLL',COUNT(*) intCount from #oth a
				  left join #srv b
					on b.JobOrderNo = a.jobOrderNo
				  left join svMstTask c
					on c.CompanyCode = b.CompanyCode
				   and c.ProductType = b.ProductType
				   and c.BasicModel = b.BasicModel
				   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
				   and c.OperationNo = a.OperationNo
		end

	end

	-- select condition for 'Gabungan'
	if (@FpjType = '3')
	begin
--		set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
--		set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
		set @SalesAmt = isnull((select SUM(c.LaborGrossAmt + c.PartsGrossAmt + c.MaterialGrossAmt) SalesAmt from #inv c),0)

		if (@ReportParam = '1')
				insert into #dtl values (' ')
		insert into #dtl
		select left(('1   Untuk No Invoice ' + (select top 1 InvoiceNo from #inv order by InvoiceNo) + ' s/d ' + (select top 1 InvoiceNo from #inv order by InvoiceNo desc) 
			+ replicate(' ', 100)
			),83)
			+ right((
			+ replicate(' ',20)
--			+ left(convert(varchar, @TaskAmt + @ItemAmt, 1),len(convert(varchar, @TaskAmt + @ItemAmt, 1)) - 3)
			+ left(convert(varchar, cast(@SalesAmt as money), 1),len(convert(varchar, cast(@SalesAmt as money), 1)) - 3)
			),20)
		insert into #dtl
		select '    (No. ' + (select top 1 JobOrderNo from #inv order by JobOrderNo) + ' s/d ' + (select top 1 JobOrderNo from #inv order by JobOrderNo desc) + ')'
		select * into #inv_temp from (select * from #inv) #inv_temp
		delete #inv where InvoiceNo <> (select top 1 InvoiceNo from #inv order by JobOrderNo)
		update #inv set LaborGrossAmt = (select sum(LaborGrossAmt) from #inv_temp)
		update #inv set PartsGrossAmt = (select sum(PartsGrossAmt) from #inv_temp)
		update #inv set MaterialGrossAmt = (select sum(MaterialGrossAmt) from #inv_temp)
		update #inv set LaborDiscAmt = (select sum(LaborDiscAmt) from #inv_temp)
		update #inv set PartsDiscAmt = (select sum(PartsDiscAmt) from #inv_temp)
		update #inv set MaterialDiscAmt = (select sum(MaterialDiscAmt) from #inv_temp)
		update #inv set TotalDppAmt = (select sum(TotalDppAmt) from #inv_temp)
		update #inv set TotalPphAmt = (select sum(TotalPphAmt) from #inv_temp)
		update #inv set TotalPpnAmt = (select sum(TotalPpnAmt) from #inv_temp)
		update #inv set TotalSrvAmt = TotalDppAmt + TotalPpnAmt
		alter table #inv alter column JobOrderNo varchar(50)
		update #inv set JobOrderNo = (select top 1 JobOrderNo from #inv_temp order by JobOrderNo) + '-' + right((select top 1 JobOrderNo from #inv_temp order by JobOrderNo desc),6)
		alter table #inv alter column InvoiceNo varchar(50)
		update #inv set InvoiceNo = (select top 1 InvoiceNo from #inv_temp order by InvoiceNo) + '-' + right((select top 1 InvoiceNo from #inv_temp order by InvoiceNo desc),6)
		drop table #inv_temp
	end

	-- select condition for 'Perincian on Lampiran'
	if (@FpjType = '4')
	begin
		set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
		set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
		insert into #dtl
		select left(('1   Perincian dapat dilihat pada Faktur Penjualan'
			+ replicate(' ', 100)
			), 83)
			+ right((
			+ replicate(' ',20)
			+ left(convert(varchar, @TaskAmt + @ItemAmt, 1),len(convert(varchar, @TaskAmt + @ItemAmt, 1)) - 3)
			),20)
		insert into #dtl
		select '    dengan Nomor ' + a.InvoiceNo from #inv a
	end

	-- Laporan 'Standard Body Repair'
	if (@FpjType = '5')
	begin
		if ((select count(*) from #tsk) > 0)
		begin
			set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
			if (@ReportParam = '1')
				insert into #dtl values (' ')
			insert into #dtl
			select left(('    JASA PERBAIKAN'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
				),18)

			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ c.Description
				),80)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				set @DiscAmt = isnull((select top 1 LaborDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end

			if (select count(*) from #itmSP) > 0
			begin
				insert into #dtl values ('')
			end

--			insert into #dtl values ('')
		end

	if ((select count(*) from #itmSP) > 0)
	begin
		insert into #dtl values ('    PEMAKAIAN SPAREPART')
		insert into #dtl
		select left((
			  right((replicate(' ',2)
			+ convert(varchar,a.RecNo)
			),2)
			+ '  '
			+ a.PartNo
			+ ' - '
			+ b.PartName
			+ replicate(' ',100)
			),58)
			+ right((
			  replicate(' ',50)
			+ convert(varchar,a.SupplyQty)
			),10)
			+ right((
			  replicate(' ',50)
			+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
			),35)
		  from  #itmSP a
		  left join spMstItemInfo b
			on b.CompanyCode = @CompanyCode
		   and b.PartNo = a.PartNo
	end

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
				set @DiscAmt = isnull((select top 1 PartsDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end

		if (select count(*) from #itmMtrl) > 0
		begin
			insert into #dtl values ('')
		end

--			insert into #dtl values ('')

	if ((select count(*) from #itmMtrl) > 0)
	begin
			insert into #dtl values ('    PEMAKAIAN MATERIAL / OLI')
			set @MaterialAmt = (select sum(RetailAmt) from #itmMtrl)
			insert into #dtl
			select left((' 1  MATERIAL'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @MaterialAmt, 1),len(convert(varchar, @MaterialAmt, 1)) - 3)
				),18)
	end

		if ((select count(*) from #itmOli) > 0)
		begin
			if ((select count(*) from #itmMtrl) = 0)
			begin
				insert into #dtl values ('')
				insert into #dtl values ('    PEMAKAIAN MATERIAL / OLI')
			end
			insert into #dtl
			select case when (select count(*) from #itmMtrl) > 0 then
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo + 1)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
				else
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
				end
			from #itmOli a
				left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
				and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end

				set @DiscAmt = isnull((select top 1 MaterialDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
		end
	end

	-- select condition for 'RinciBodyRepair'
	if (@FpjType = '6')
	begin
		if ((select count(*) from #tsk) > 0)
		begin
			if (@ReportParam = '1')
				insert into #dtl values (' ')
			insert into #dtl values ('    JASA PERBAIKAN')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ c.Description
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',10)
				--+ convert(varchar, a.OperationHour, 1)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),35)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if ((select count(*) from #tsk) > 1)
				begin
				insert into #dtl
				select left(('                   Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 LaborDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #tsk) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end

		if (select count(*) from #itm) > 0
		begin
			insert into #dtl values ('')
		end

--			insert into #dtl values ('')
		end

		if ((select count(*) from #itm) > 0)
		begin
			insert into #dtl values ('    PEMAKAIAN SPAREPART')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
			  from #itmSP a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo
			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
				if ((select count(*) from #itm) > 1)
				begin
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 PartsDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)


				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #itm) > 1)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
					insert into #dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end
		end

		if (select count(*) from #itmRMtrl) > 0
		begin
			insert into #dtl values ('')
		end

--	insert into #dtl values ('')

	if ((select count(*) from #itmRMtrl) > 0)
	begin
		insert into #dtl values ('    PEMAKAIAN MATERIAL / OLI')
		insert into #dtl
		select left((
			  right((replicate(' ',2)
			+ convert(varchar,a.RecNo)
			),2)
			+ '  '
			+ a.PartNo
			+ ' - '
			+ b.PartName
			+ replicate(' ',100)
			),58)
			+ right((
			  replicate(' ',50)
			+ convert(varchar,a.SupplyQty)
			),10)
			+ right((
			  replicate(' ',50)
			+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
			),35)
		  from #itmRMtrl a
		  left join spMstItemInfo b
			on b.CompanyCode = @CompanyCode
		   and b.PartNo = a.PartNo
	
			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end

					if ((select count(*) from #itmRMtrl) > 1)
					begin
						insert into #dtl
						select left(('                                            Sub Total'
							+ replicate(' ', 100)
							), 85)
							+ right((
							+ replicate(' ',20)
							+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
							),18)

					end
				end

				set @DiscAmt = isnull((select top 1 MaterialDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end

					if ((select count(*) from #itmRMtrl) > 1)
					begin
						insert into #dtl
						select left(('                                            Sub Total'
							+ replicate(' ', 100)
							), 85)
							+ right((
							+ replicate(' ',20)
							+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
							),18)

					end
			end

	End

	-- select condition for 'Khusus Body Repair'
	if (@FpjType = '7')
	begin
		if ((select count(*) from #tsk) > 0)
		begin
			if (@ReportParam = '1')
				insert into #dtl values (' ')
			insert into #dtl values ('    JASA PERBAIKAN')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.OperationNo
				+ ' - '
				+ c.Description
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',10)
				--+ convert(varchar, a.OperationHour, 1)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(convert(varchar, cast(a.OperationAmt as money), 1), len(convert(varchar, cast(a.OperationAmt as money), 1)) - 3)
				),35)
			  from #tsk a
		  left join #srv b
			on b.JobOrderNo = a.jobOrderNo
		  left join svMstTask c
			on c.CompanyCode = b.CompanyCode
		   and c.ProductType = b.ProductType
		   and c.BasicModel = b.BasicModel
		   and (c.JobType = b.JobType or c.JobType = 'CLAIM' or c.JobType = 'OTHER')
		   and c.OperationNo = a.OperationNo


			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				if ((select count(*) from #tsk) > 1)
				begin
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 LaborDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Jasa'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@TaskAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #tsk) > 1)
				begin
				set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @TaskAmt, 1),len(convert(varchar, @TaskAmt, 1)) - 3)
					),18)
				end
			end

		if (select count(*) from #itm) > 0
		begin
			insert into #dtl values ('')
		end

--			insert into #dtl values ('')
		end

		if ((select count(*) from #itm) > 0)
		begin
			insert into #dtl values ('    PEMAKAIAN SPAREPART')
			insert into #dtl
			select left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
			  from #itmSP a
			  left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
			   and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
				if ((select count(*) from #itm) > 1)
				begin
				insert into #dtl
				select left(('                                            Sub Total'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
					),18)
				end

				set @DiscAmt = isnull((select top 1 PartsDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                        Potongan Part'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)


				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #itm) > 1)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmSP),0)
					insert into #dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end

		end
		if (select count(*) from #ItmMtrl) > 0
		begin
			insert into #dtl values ('')
		end
--	insert into #dtl values ('')

	if ((select count(*) from #ItmMtrl) > 0)
	begin
			insert into #dtl values ('    PEMAKAIAN MATERIAL / OLI')
			set @MaterialAmt = (select sum(RetailAmt) from #ItmMtrl)
			Print(@MaterialAmt)
			if (@ReportParam = '1')
			begin
				insert into #dtl values (' ')
			end
			insert into #dtl
			select left((' 1  MATERIAL'
				+ replicate(' ', 100)
				), 85)
				+ right((
				+ replicate(' ',20)
				+ left(convert(varchar, @MaterialAmt, 1),len(convert(varchar, @MaterialAmt, 1)) - 3)
				),18)
	end

		if ((select count(*) from #itmOli) > 0)
		begin
			if ((select count(*) from #ItmMtrl) = 0)
			begin
				insert into #dtl values (' ')
				insert into #dtl values ('    PEMAKAIAN MATERIAL / OLI')
			end
			insert into #dtl
			select case when (select count(*) from #ItmMtrl) > 0 then
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo + 1)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
				else
				left((
				  right((replicate(' ',2)
				+ convert(varchar,a.RecNo)
				),2)
				+ '  '
				+ a.PartNo
				+ ' - '
				+ b.PartName
				+ replicate(' ',100)
				),58)
				+ right((
				  replicate(' ',50)
				+ convert(varchar,a.SupplyQty)
				),10)
				+ right((
				  replicate(' ',50)
				+ left(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar),len(cast(convert(varchar,cast(a.RetailAmt as money),1) as varchar))-3)
				),35)
				end
			from #itmOli a
				left join spMstItemInfo b
				on b.CompanyCode = @CompanyCode
				and b.PartNo = a.PartNo

			if(@Potongan = 1)
			begin
				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end
				if ((select count(*) from #itmRMtrl) > 1)
				begin
					insert into #dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end

				set @DiscAmt = isnull((select top 1 MaterialDiscAmt from #tsk),0)
				insert into #dtl
				select left(('                                  Potongan Lain-Lain'
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, @DiscAmt, 1),len(convert(varchar, @DiscAmt, 1)) - 3)
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate('-',20)
					+ '-'
					),18)

				insert into #dtl
				select left(('                                        '
					+ replicate(' ', 100)
					), 85)
					+ right((
					+ replicate(' ',20)
					+ left(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1),len(convert(varchar, isnull(@ItemAmt,0) - isnull(@DiscAmt,0), 1)) - 3)
					),18)
			end
			else
			begin
				if ((select count(*) from #ItmMtrl) = 0)
				begin
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmOli),0)
				end
				else
				begin	
					set @ItemAmt = isnull((select sum(RetailAmt) from #itmMtrl),0) + isnull((select sum(RetailAmt) from #itmOli),0) 
				end
				if ((select count(*) from #itmRMtrl) > 1)
				begin
					insert into #dtl
					select left(('                                            Sub Total'
						+ replicate(' ', 100)
						), 85)
						+ right((
						+ replicate(' ',20)
						+ left(convert(varchar, @ItemAmt, 1),len(convert(varchar, @ItemAmt, 1)) - 3)
						),18)
				end
			end
		end
	End

	-- select condition for 'Gabungan'
	if (@FpjType = '8')
	begin
		set @TaskAmt = isnull((select sum(OperationHour * OperationCost) from #tsk),0)
		set @ItemAmt = isnull((select sum(RetailAmt) from #itm),0)
		set @SalesAmt = isnull((select SUM(c.LaborGrossAmt + c.PartsGrossAmt + c.MaterialGrossAmt) SalesAmt from #inv c),0)

		if (@ReportParam = '1')
				insert into #dtl values (' ')
		insert into #dtl
		select left(('1   Untuk No Invoice ' + (select top 1 InvoiceNo from #inv order by InvoiceNo) + ' s/d ' + (select top 1 InvoiceNo from #inv order by InvoiceNo desc) 
			+ replicate(' ', 100)
			),83)

		insert into #dtl
		select '    (No. ' + (select top 1 JobOrderNo from #inv order by JobOrderNo) + ' s/d ' + (select top 1 JobOrderNo from #inv order by JobOrderNo desc) + ')'

		insert into #dtl values (' ')

		if(@TaskAmt <> 0)
		begin
				insert into #dtl
				select left(('         JASA' 
					+ replicate(' ', 100)
					),83)
					+ right((
					+ replicate(' ',20)
		--			+ left(convert(varchar, @TaskAmt + @ItemAmt, 1),len(convert(varchar, @TaskAmt + @ItemAmt, 1)) - 3)
					+ left(convert(varchar, cast(@TaskAmt as money), 1),len(convert(varchar, cast(@TaskAmt as money), 1)) - 3)
					),20)
		end
		
		if(@ItemAmt <> 0)
		begin
			insert into #dtl
			select left(('         MATERIAL DAN SPARE PART' 
				+ replicate(' ', 100)
				),83)
				+ right((
				+ replicate(' ',20)
	--			+ left(convert(varchar, @TaskAmt + @ItemAmt, 1),len(convert(varchar, @TaskAmt + @ItemAmt, 1)) - 3)
				+ left(convert(varchar, cast(@ItemAmt as money), 1),len(convert(varchar, cast(@ItemAmt as money), 1)) - 3)
				),20)
		end
		select * into #inv_tempD from (select * from #inv) #inv_tempD
		delete #inv where InvoiceNo <> (select top 1 InvoiceNo from #inv order by JobOrderNo)
		update #inv set LaborGrossAmt = (select sum(LaborGrossAmt) from #inv_tempD)
		update #inv set PartsGrossAmt = (select sum(PartsGrossAmt) from #inv_tempD)
		update #inv set MaterialGrossAmt = (select sum(MaterialGrossAmt) from #inv_tempD)
		update #inv set LaborDiscAmt = (select sum(LaborDiscAmt) from #inv_tempD)
		update #inv set PartsDiscAmt = (select sum(PartsDiscAmt) from #inv_tempD)
		update #inv set MaterialDiscAmt = (select sum(MaterialDiscAmt) from #inv_tempD)
		update #inv set TotalDppAmt = (select sum(TotalDppAmt) from #inv_tempD)
		update #inv set TotalPphAmt = (select sum(TotalPphAmt) from #inv_tempD)
		update #inv set TotalPpnAmt = (select sum(TotalPpnAmt) from #inv_tempD)
		update #inv set TotalSrvAmt = TotalDppAmt + TotalPpnAmt
		alter table #inv alter column JobOrderNo varchar(50)
		update #inv set JobOrderNo = (select top 1 JobOrderNo from #inv_tempD order by JobOrderNo) + '-' + right((select top 1 JobOrderNo from #inv_tempD order by JobOrderNo desc),6)
		alter table #inv alter column InvoiceNo varchar(50)
		update #inv set InvoiceNo = (select top 1 InvoiceNo from #inv_tempD order by InvoiceNo) + '-' + right((select top 1 InvoiceNo from #inv_tempD order by InvoiceNo desc),6)
		drop table #inv_tempD
	end

	-- This is sucks!!! insert to declare to decide last line every FPJGovNo
	set @CountDtl = (select COUNT(*) from #dtl)

	if(@FPJType <> '3' AND @FPJType <> '4' AND @FPJType <> '8')
	begin	
		if @CountDtl <> (case when @CountDtl = 19 then 17 else 18 end)
		begin
			insert into #dtl values (' ')
			set @StatusEnd = 1
		end
		else
		begin
			set @StatusEnd = 0
		end
	end

	-- select data to display result on Report
	select * into #result from (
	select 
		 b.FpjGovNo
		,b.CompanyCode
		,case @fStatus when '1' then @fCompName else f.CompanyGovName end as CompanyName
		,case @fStatus when '1' then @fAdd else
			(case when @IsHoldingAddr=0 then isnull(f.Address1, '') + ' '  + isnull(f.Address2, '') + ' ' + isnull(f.Address3, '') + ' ' + isnull(f.Address4, '')
				else (select isnull(Address1, '') + ' '  + isnull(Address2, '') + ' ' + isnull(Address3, '') + ' ' + isnull(Address4, '') from gnMstCoProfile where CompanyCode=@CompanyCode
				and BranchCode=(select BranchCode from gnMstOrganizationDtl where CompanyCode=@CompanyCode and IsBranch=0))
			end)
		 end as CompanyAddress
		,case @fStatus when '1' then @fNPWP else f.NPWPNo end as NPWPNo
		,case @fStatus when '1' then @fSKP else f.SkpNo end as SkpNo
		,case @fStatus when '1' then @fSKPDate else f.SkpDate end as SkpDate
		,b.FpjDate
		,case when (@FpjType = '3' OR @FPJType = '8') then '' else isnull(c.PoliceRegNo,'') end PoliceRegNo  
		,c.CustomerCodeBill CustCodeBill
		,g.CustomerGovName CustNameBill
		,g.Address1 CustAddr1Bill
		,g.Address2 CustAddr2Bill
		,g.Address3 CustAddr3Bill
		,g.NPWPNo CustNpwpBill
		,g.SkpNo CustSkpBill
		,a.DetailDesc
		,c.LaborGrossAmt + c.PartsGrossAmt + c.MaterialGrossAmt SalesAmt  
		,c.LaborDiscAmt + c.PartsDiscAmt + c.MaterialDiscAmt DiscAmt  
		,0 as DPAmt
		,c.TotalDppAmt DPPAmt  
		,case when (@IsRecalPPN=1) and substring(c.InvoiceNo,1,3) in ('INF','INW') then floor(c.TotalDppAmt*10/100)
			else isnull(c.TotalPphAmt, 0) + isnull(c.TotalPpnAmt, 0) 
		end PPNAmt  
		,'NIHIL' as DppBm  
		,'NIHIL' as PpnBm  
		,c.InvoiceNo
		,case @fStatus when '1' then @fCity else h.LookupValueName end as CityName
		,b.SignedDate
		,c.JobOrderNo
--		,c.TotalSrvAmt TotalAmt  
		,case when (@IsRecalPPN=1) and substring(c.InvoiceNo,1,3) in ('INF','INW') then floor(c.TotalDppAmt*10/100)+ c.TotalDppAmt
			else c.TotalSrvAmt
		end TotalAmt
		,b.DueDate    
		,'              ##########' as Asteric1
		,'       ######################' as Asteric2
		,isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0)TotService
		,isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) TotOil
		,isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'DLL'),0) TotDLL
		,case when @FlagAsterix = 0 or @FlagAsterix is null
			then '                        ################################'  
			else 
				case when isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0) = 0 AND isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) <> 0 
				then '###########                            ####################'
				else
					case when isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0) <> 0 AND isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) <> 0
					then
						'                                                 ####################'
					else
						case when isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'SRV'),0) <> 0 AND isnull((select distinct intCount from #temp z where z.FPJGovNo = b.FpjGovNo and z.CodeID = 'OIL'),0) = 0
						then	'                        ################################'
						else
							'###########                            ####################'
						end
					end
				end
			end
			as Asteric3
		,'STANDARD' ReportType
		, 7 as xLocation
		, 247 as yLocation
		, isnull(@CountDtl + @StatusEnd,0) TotService2
	  from #dtl a, #fpj b
	  left join #inv c
		on c.CompanyCode = b.CompanyCode
	   and ((case when @IsCentral = 1 then c.BranchCode end) <> ''
			or (case when @IsCentral = 0 then c.BranchCode end) = @BranchCode)
	  left join gnMstCoProfile f
		on f.CompanyCode = b.CompanyCode
	   and f.BranchCode = b.BranchCode
	  left join gnMstCustomer g
		on g.CompanyCode = c.CompanyCode
	   and g.CustomerCode = c.CustomerCodeBill
	  left join gnMstLookupDtl h
		on h.CompanyCode = b.CompanyCode
	   and h.LookupValue  = f.CityCode
	   and h.CodeId  = 'CITY'
	)#result

	if (@n = 1) 	
	begin
		select * into #results from (select * from #result)x
		delete #results
	end
	if (@n > 0) 
		insert into #results select * from #result

	drop table #result
	drop table #fpj
	drop table #inv
	drop table #srv
	drop table #tsk
	drop table #itm
	drop table #oth
	drop table #itmSP
	drop table #itmMtrl
	drop table #itmRMtrl
	drop table #itmOli
	drop table #dtl
	drop table #tpSp
	drop table #tpOli
	drop table #tpMt
	drop table #tpRMt
	drop table #temp
end

if (@n > 0)
begin
	if (@FpjType = '3' OR @FPJType = '8')	
	begin
		select distinct DetailDesc DD, *
		  , left(DetailDesc, 4) Detail1
		  , substring(DetailDesc, 4, 50) + right(left((DetailDesc + replicate(' ',75)), 75), 10) Detail2
		  , right(left((DetailDesc + replicate(' ',103)), 103), 15) Detail3
		  , case when (select count(FpjGovNo) from #results where FpjGovNo=a.FPJGovNo) = 19 then 17 else 18 end PageBreak   
		  , isnull((
				select top 1 isnull(ParaValue, 1) 
				  from gnMstLookupDtl
				 where CompanyCode = @CompanyCode
				   and CodeID = 'FPIF'
				   and LookUpValue = 'STATUS'
				), 1) IsShowSummary
		  , (PPNAmt + DPPAmt) TotPPNBm
		from #results a
		order by FPJGovNo asc, DetailDesc desc
	end
	else
	begin
		select DetailDesc DD, *
		  , left(DetailDesc, 4) Detail1
		  , substring(DetailDesc, 4, 50) + right(left((DetailDesc + replicate(' ',75)), 75), 10) Detail2
		  , right(left((DetailDesc + replicate(' ',103)), 103), 15) Detail3
		  , case when (select count(FpjGovNo) from #results where FpjGovNo=a.FPJGovNo) = 19 then 17 else 18 end PageBreak   
		  , isnull((
				select top 1 isnull(ParaValue, 1) 
				  from gnMstLookupDtl
				 where CompanyCode = @CompanyCode
				   and CodeID = 'FPIF'
				   and LookUpValue = 'STATUS'
				), 1) IsShowSummary
		  , (PPNAmt + DPPAmt) TotPPNBm
		from #results a
		order by FPJGovNo
	end
		
	drop table #results
end

drop table #t_fpj
-- [usprpt_SvRpTrn008] '6354401','635440100','010.000-11.00011297','010.000-11.00011297',3
GO
ALTER procedure [dbo].[uspfn_SvInqGetClaimLku]
	 @CompanyCode		varchar(20),
	 @BranchCodeFrom    varchar(20),
	 @BranchCodeTo		varchar(20),
	 @IsSprClaim		bit = 0
	 
as

declare @prefix varchar(10)

if exists (select * from gnMstLookUpDtl 
			 where CompanyCode = @CompanyCode 
			   and CodeId = 'SRV_FLAG' 
			   and LookUpValue = 'CLM_MODE'
			   and ParaValue = '1')  -- 0: SPK, 1: INV --> Default: SPK
	set @prefix = 'INW%'
else
	set @prefix = 'SPK%'

if @BranchCodeFrom = '[All Branch]' and @BranchCodeTo = '[All Branch]'
begin
	select a.BranchCode, a.InvoiceNo, b.JobOrderDate as InvoiceDate, a.IsCbu, a.CategoryCode, a.ComplainCode, a.DefectCode  
	  , a.SubletHour, a.SubletAmt, a.CausalPartNo, a.TroubleDescription  
	  , a.ProblemExplanation, a.OperationNo, isnull(a.OperationHour,0) as OperationHour, isnull(a.OperationAmt,0) as OperationAmt    
	  from svTrnInvClaim a  
	  left join svTrnService b  
		on b.CompanyCode = a.CompanyCode  
	   and b.BranchCode = a.BranchCode  
	   and b.JobOrderNo = a.InvoiceNo  
	 where 1 = 1  
	   and a.CompanyCode = @CompanyCode  
--	   and a.BranchCode between @BranchCodeFrom and @BranchCodeTo  
	   and not exists (  
		  select 1 from svTrnClaimApplication  
		   where 1 = 1  
			 and CompanyCode = a.CompanyCode  
			 and BranchCode = a.BranchCode  
			 and ProductType = a.ProductType  
			 and InvoiceNo = a.InvoiceNo  
		  )  
	   and a.InvoiceNo like @prefix  
	   and isnull(b.IsSparepartClaim, 0) = @IsSprClaim
	 order by a.InvoiceNo  
end
else
begin
	select a.BranchCode, a.InvoiceNo, b.JobOrderDate as InvoiceDate, a.IsCbu, a.CategoryCode, a.ComplainCode, a.DefectCode  
	  , a.SubletHour, a.SubletAmt, a.CausalPartNo, a.TroubleDescription  
	  , a.ProblemExplanation, a.OperationNo, isnull(a.OperationHour,0) as OperationHour, isnull(a.OperationAmt,0) as OperationAmt  
	  from svTrnInvClaim a  
	  left join svTrnService b  
		on b.CompanyCode = a.CompanyCode  
	   and b.BranchCode = a.BranchCode  
	   and b.JobOrderNo = a.InvoiceNo  
	 where 1 = 1  
	   and a.CompanyCode = @CompanyCode  
	   and a.BranchCode between @BranchCodeFrom and @BranchCodeTo  
	   and not exists (  
		  select 1 from svTrnClaimApplication  
		   where 1 = 1  
			 and CompanyCode = a.CompanyCode  
			 and BranchCode = a.BranchCode  
			 and ProductType = a.ProductType  
			 and InvoiceNo = a.InvoiceNo  
		  )  
	   and a.InvoiceNo like @prefix  
	   and isnull(b.IsSparepartClaim, 0) = @IsSprClaim
	 order by a.InvoiceNo  
end
GO
create procedure [dbo].[uspfn_SvTrnInvoiceGet]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@InvoiceNo   varchar(20)
as  

select a.CompanyCode
     , a.BranchCode
     , a.ProductType
     , a.InvoiceNo
     , a.JobOrderNo
     , a.JobOrderDate
     , b.ServiceNo
     , a.PoliceRegNo
     , b.ServiceBookNo
     , a.BasicModel
     , b.TransmissionType
     , a.ChassisCode
     , a.ChassisNo
     , a.EngineCode
     , a.EngineNo
     , b.ColorCode
     , rtrim(rtrim(b.ColorCode)
     + case isnull(c.RefferenceDesc2,'') when '' then '' else ' - ' end
     + isnull(c.RefferenceDesc2,'')) as ColorCodeDesc
     , a.Odometer
     , isnull(d.IsContractStatus, 0) as IsContract
     , isnull(d.ContractNo, '') ContractNo
     , e.EndPeriod as ContractEndPeriod
     , isnull(e.IsActive, 0) ContractStatus
	 , case d.IsContractStatus 
		 when 1 then (case e.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
		 else ''
	   end ContractStatusDesc
     , f.IsClubStatus IsClub
     , f.ClubCode
     , f.ClubDateFinish ClubEndPeriod
     , isnull(g.IsActive, 0) ClubStatus
	 , case f.IsClubStatus
		 when 1 then (case g.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
		 else ''
	   end ClubStatusDesc
     , a.CustomerCode
     , h.CustomerName
     , h.Address1 CustAddr1
     , h.Address2 CustAddr2
     , h.Address3 CustAddr3
     , h.Address4 CustAddr4
     , h.CityCode
     , j.LookupValueName CityName
     , a.CustomerCodeBill
     , i.CustomerName CustomerNameBill
     , i.Address1 CustAddr1Bill
     , i.Address2 CustAddr2Bill
     , i.Address3 CustAddr3Bill
     , i.Address4 CustAddr4Bill
     , i.CityCode CityCodeBill
     , k.LookupValueName CityNameBill
     , i.PhoneNo
     , i.FaxNo
     , i.HPNo
     , a.LaborDiscPct
     , a.PartsDiscPct
     , a.MaterialDiscPct
     , a.ServiceRequestDesc
     , a.JobType
     , l.Description JobTypeDesc
     , b.ForemanID
     , m.EmployeeName ForemanName
     , b.MechanicID
     , n.EmployeeName MechanicName
     , b.ConfirmChangingPart
     , b.EstimateFinishDate
     , a.LaborDppAmt
     , a.PartsDppAmt
     , a.MaterialDppAmt
     , a.TotalDppAmt
     , a.TotalPpnAmt
     , a.TotalSrvAmt
     , b.ServiceStatus
     --, a.ServiceStatusDesc     
  from svTrnInvoice a with (nowait,nolock)
  left join svTrnService b with (nowait,nolock)
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.JobOrderNo = a.JobOrderNo
  left join omMstRefference c with (nowait,nolock)
    on c.CompanyCode = a.CompanyCode
   and c.RefferenceType = 'COLO'
   and c.RefferenceCode = b.ColorCode
  left join svMstCustomerVehicle d with (nowait,nolock)
    on d.CompanyCode = a.CompanyCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
   and d.IsContractStatus = 1
  left join svMstContract e with (nowait,nolock)
    on e.CompanyCode = a.CompanyCode
   and e.ContractNo = d.ContractNo
  left join svMstCustomerVehicle f with (nowait,nolock)
    on f.CompanyCode = a.CompanyCode
   and f.ChassisCode = a.ChassisCode
   and f.ChassisNo = a.ChassisNo
   and f.IsClubStatus = 1
  left join svMstClub g with (nowait,nolock)
    on g.CompanyCode = a.CompanyCode
   and g.ClubCode = f.ClubCode
  left join gnMstCustomer h with (nowait,nolock)
    on h.CompanyCode = a.CompanyCode
   and h.CustomerCode = a.CustomerCode
  left join gnMstCustomer i with (nowait,nolock)
    on i.CompanyCode = a.CompanyCode
   and i.CustomerCode = a.CustomerCodeBill
  left join gnMstLookupDtl j with (nowait,nolock)
    on j.CompanyCode = a.CompanyCode
   and j.CodeID = 'CITY'
   and j.LookUpValue = h.CityCode
  left join gnMstLookupDtl k with (nowait,nolock)
    on k.CompanyCode = a.CompanyCode
   and k.CodeID = 'CITY'
   and k.LookUpValue = i.CityCode
  left join SvMstRefferenceService l with (nowait,nolock)
    on l.CompanyCode = a.CompanyCode
   and l.ProductType = a.ProductType
   and l.RefferenceCode = a.JobType
   and l.RefferenceType = 'JOBSTYPE'
  left join gnMstEmployee m with (nowait,nolock)
    on m.CompanyCode = a.CompanyCode
   and m.BranchCode = a.BranchCode
   and m.EmployeeID = b.ForemanID
  left join gnMstEmployee n with (nowait,nolock)
    on n.CompanyCode = a.CompanyCode
   and n.BranchCode = a.BranchCode
   and n.EmployeeID = b.MechanicID
 where a.CompanyCode = @CompanyCode
   and a.BranchCode = @BranchCode
   and a.InvoiceNo = @InvoiceNo
GO
-- usprpt_SpRpSum001 '6006406','6006406','5','2011','00','36570M83K00-000'
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<KARTU STOCK>
-- =============================================

ALTER procedure [dbo].[usprpt_SpRpSum001]
@CompanyCode VARCHAR(15),
@BranchCode VARCHAR(15),
@MonthPeriod VARCHAR(10),
@YearPeriod VARCHAR(10),
@Warehouse VARCHAR(2),
@PartNumber VARCHAR(20)
AS
BEGIN

DECLARE @QueryStockItem AS VARCHAR(MAX)
DECLARE @QueryStock AS VARCHAR(MAX)
DECLARE @PartNoAdjInc AS VARCHAR(MAX)
DECLARE @PartNoAdjOut AS VARCHAR(MAX)
DECLARE @PartNoRcv AS VARCHAR(MAX)
DECLARE @PartNoFpj AS VARCHAR(MAX)
DECLARE @PartNoWtr AS VARCHAR(MAX)
DECLARE @PartNoWtr1 AS VARCHAR(MAX)
DECLARE @PartNoBPSF AS VARCHAR(MAX)
DECLARE @PartNoRetur AS VARCHAR(MAX)
DECLARE @PartNoSupplySlip AS VARCHAR(MAX)
DECLARE @PartNoItem AS VARCHAR(MAX)
DECLARE @isExist AS INT

-- select SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112),1,6)

---------------------------------------------------------------------------
IF @PartNumber != '' 
BEGIN
	SET @PartNoAdjInc = ' AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoAdjOut = ' AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoRcv = ' AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoFpj = ' AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoWtr = ' AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoWtr1 = ' AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoBPSF = ' AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoRetur = 'AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoSupplySlip = 'AND a.PartNo = ''' + @PartNumber + ''''
	SET @PartNoItem = 'AND a.PartNo = ''' + @PartNumber + ''''
END
ELSE
BEGIN
	SET @PartNoAdjInc = ''
	SET @PartNoAdjOut = ''
	SET @PartNoRcv = ''
	SET @PartNoFpj = ''
	SET @PartNoWtr = ''
	SET @PartNoWtr1 = ''
	SET @PartNoBPSF = ''
	SET @PartNoRetur = ''
	SET @PartNoSupplySlip = ''
	SET @PartNoItem = ''
END

--========================================================================================================================

SET @QueryStock = '
SELECT *, 
convert(varchar, Tanggal, 112) + replace(convert(varchar, Tanggal,108),'':'','''') TanggalSort,
1 GroupID
INTO #spKartuStock FROM (
SELECT --Adjustment Incoming
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.AdjustmentNo Nomor, 
	b.AdjustmentDate AS Tanggal, 
	f.LookupValueName Pemasok,
	a.QtyAdjustment Penerimaan,
	NULL Pengeluaran,
	 0 Qty,
     0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''in'' RecStat,
	'' '' Keterangan 
FROM spTrnIAdjustDtl a
	JOIN spTrnIAdjustHdr b
		ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.AdjustmentNo = b.AdjustmentNo
	JOIN SpHstStockMovement c
		ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode 
		AND a.PartNo = c.PartNo
		AND a.WarehouseCode = c.WarehouseCode
		AND c.Month = ''' + @MonthPeriod + '''
		AND c.Year = ''' + @YearPeriod +  '''
	JOIN spMstItemInfo d
		ON a.CompanyCode = d.CompanyCode
		AND a.PartNo = d.PartNo
	JOIN gnMstLookUpDtl e
		ON a.CompanyCode = e.CompanyCode
		AND a.WarehouseCode = e.LookUpValue
		AND e.CodeId = ''WRCD''
	LEFT JOIN gnMstLookUpDtl f
		ON a.CompanyCode = f.CompanyCode
		AND a.ReasonCode = f.LookUpValue
		AND f.CodeId = ''RSAD''
    JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE a.AdjustmentCode = ''+''
	AND a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
    AND b.Status = 2
	AND SUBSTRING(CONVERT(VARCHAR, b.AdjustmentDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
	AND a.WarehouseCode = ''' + @Warehouse + '''
	' + @PartNoAdjInc + '
UNION------------------------------------------------------------------------------------------------------------ 
SELECT --Adjustment Outgoing
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.AdjustmentNo Nomor, 
	b.AdjustmentDate AS Tanggal, 
	f.LookupValueName Pemasok,
	NULL Penerimaan,
	a.QtyAdjustment Pengeluaran,
	0 Qty,
    0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	'' '' Keterangan
FROM spTrnIAdjustDtl a
JOIN spTrnIAdjustHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.AdjustmentNo = b.AdjustmentNo
JOIN SpHstStockMovement c
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCode = c.BranchCode 
	AND a.PartNo = c.PartNo
	AND a.WarehouseCode = c.WarehouseCode
	AND c.Month = ''' + @MonthPeriod + '''
	AND c.Year = ''' + @YearPeriod +  '''
JOIN spMstItemInfo d
	ON a.CompanyCode = d.CompanyCode
	AND a.PartNo = d.PartNo
JOIN gnMstLookUpDtl e
	ON a.CompanyCode = e.CompanyCode
	AND a.WarehouseCode = e.LookUpValue
	AND e.CodeId = ''WRCD''
LEFT JOIN gnMstLookUpDtl f
	ON a.CompanyCode = f.CompanyCode
	AND a.ReasonCode = f.LookUpValue
	AND f.CodeId = ''RSAD''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.AdjustmentCode = ''-''	
	AND a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + ''' 
    AND b.Status = 2
	AND SUBSTRING(CONVERT(VARCHAR, b.AdjustmentDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
	AND a.WarehouseCode = ''' + @Warehouse + '''
	' + @PartNoAdjOut + ' 
UNION------------------------------------------------------------------------------------------------------------
--/*
--RECEIVING
--	- Incoming
--	- Pemasok/Pelanggan = Supplier Name
--*/
SELECT 
	f.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	e.PartName,
	a.WRSNo Nomor,
	b.WRSDate AS Tanggal,
	c.SupplierName Pemasok,
	SUM(a.ReceivedQty) Penerimaan,
	NULL Pengeluaran,
	0 Qty,
    0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''in'' RecStat,
	'' '' Keterangan
FROM spTrnPRcvDtl a
	JOIN spTrnPRcvHdr b
		ON a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo 
	JOIN gnMstSupplier c
		ON b.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode 
  JOIN SpHstStockMovement d
	ON a.CompanyCode = d.CompanyCode
	AND a.BranchCode = d.BranchCode 
	AND a.PartNo = d.PartNo
	AND a.WarehouseCode = d.WarehouseCode
	AND d.Month = ''' + @MonthPeriod + '''	
	AND d.Year = ''' + @YearPeriod +  ''' 
JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode
		AND a.PartNo = e.PartNo
	LEFT JOIN gnMstLookUpDtl f
		ON a.CompanyCode = d.CompanyCode
		AND a.WarehouseCode = LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND SUBSTRING(CONVERT(VARCHAR, b.WRSDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
	AND a.WarehouseCode = ''' + @Warehouse + '''
	AND b.Status NOT IN ( ''3'', ''0'', ''1'')
	' + @PartNoRcv + ' GROUP BY f.LookUpValueName,
	a.PartNo,
	e.PartName,
	a.WRSNo,
	b.WRSDate,
	c.SupplierName,
	d.BOMStock,
	d.CostPrice,
	a.CostPrice,
    g.CostPrice,
	d.EOMStock
UNION------------------------------------------------------------------------------------------------------------
--/*
--FAKTUR PAJAK
--	- Outgoing
--	- Pemasok/Pelanggan = Customer name
--*/
SELECT 
	f.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	e.PartName,
	a.FPJNo Nomor,
	b.FPJDate AS Tanggal,
	c.CustomerName Pemasok,
	NULL Penerimaan,
	SUM(a.QtyBill) Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(A.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	isnull(a.DocNo, '' '') Keterangan
FROM spTrnSFPJDtl a
JOIN spTrnSFPJHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.FPJNo = b.FPJNo
JOIN gnMstCustomer c
	ON b.CompanyCode = c.CompanyCode
	AND b.CustomerCode = c.CustomerCode
JOIN SpHstStockMovement d
	ON a.CompanyCode = d.CompanyCode
	AND a.BranchCode = d.BranchCode 
	AND a.PartNo = d.PartNo
	AND d.WarehouseCode = ''' + @Warehouse + '''
	AND d.Month = ''' + @MonthPeriod + '''
	AND d.Year = ''' + @YearPeriod +  ''' 
JOIN spMstItemInfo e
	ON a.CompanyCode = e.CompanyCode
	AND a.PartNo = e.PartNo
LEFT JOIN gnMstLookUpDtl f
	ON a.CompanyCode = d.CompanyCode
	AND a.WarehouseCode = LookUpValue
	AND f.CodeId = ''WRCD''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND SUBSTRING(CONVERT(VARCHAR, b.FpjDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
	AND a.WarehouseCode = ''' + @Warehouse + '''
	' + @PartNoFpj + ' GROUP BY f.LookUpValueName, a.PartNo,
	e.PartName,
	a.FPJNo,
	b.FPJDate,
	c.CustomerName,
	d.BOMStock,
	d.CostPrice,
	A.CostPrice,
    g.CostPrice,
	d.EOMStock,
	a.DocNo	
UNION------------------------------------------------------------------------------------------------------------
/*
WAREHOUSE TRANSFER
	- Incoming (ToWarehouseCode has entry)
	- Outgoing (FromWarehouseCode has entry)
	- Pemasok/Pelanggan = ReasonCode
*/
SELECT --Incoming
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.WHTrfNo Nomor, 
	b.WHTrfDate AS Tanggal,
	CASE WHEN LEFT(b.ReferenceNo,3) = ''CLR'' THEN ''[REC.CLAIM]'' ELSE CASE WHEN LEFT(b.ReferenceNo,3) = ''CLM'' THEN ''[CLAIM]'' ELSE f.LookupValueName END END AS Pemasok,
	a.Qty Penerimaan,
	NULL Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''in'' RecStat,
	'' '' Keterangan
FROM spTrnIWHTrfDtl a
JOIN spTrnIWHTrfHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.WHTrfNo = b.WHTrfNo
JOIN SpHstStockMovement c
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCode = c.BranchCode 
	AND a.PartNo = c.PartNo
	AND c.WarehouseCode = ''' + @Warehouse + '''
	AND c.Month = ''' + @MonthPeriod + '''
	AND c.Year = ''' + @YearPeriod +  ''' 
JOIN spMstItemInfo d
	ON a.CompanyCode = d.CompanyCode
	AND a.PartNo = d.PartNo
JOIN gnMstLookUpDtl e
	ON a.CompanyCode = e.CompanyCode
	AND a.ToWarehouseCode = e.LookUpValue
	AND e.CodeId = ''WRCD''
LEFT JOIN gnMstLookUpDtl f
	ON a.CompanyCode = f.CompanyCode
	AND a.ReasonCode = f.LookUpValue
	AND f.CodeId = ''RSWT''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
    AND b.Status = 2
	AND SUBSTRING(CONVERT(VARCHAR, b.WHTrfDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
	AND a.ToWarehouseCode = ''' + @Warehouse + '''
	' + @PartNoWtr + '   
UNION------------------------------------------------------------------------------------------------------------
SELECT --Outgoing
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.WHTrfNo Nomor, 
	b.WHTrfDate AS Tanggal,
	CASE WHEN LEFT(b.ReferenceNo,3) = ''CLR'' THEN ''[REC.CLAIM]'' ELSE CASE WHEN LEFT(b.ReferenceNo,3) = ''CLM'' THEN ''[CLAIM]'' ELSE f.LookupValueName END END AS Pemasok,
	NULL Penerimaan,
	a.Qty Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	'' '' Keterangan
FROM spTrnIWHTrfDtl a
JOIN spTrnIWHTrfHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.WHTrfNo = b.WHTrfNo
JOIN SpHstStockMovement c
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCode = c.BranchCode 
	AND a.PartNo = c.PartNo
	AND c.WarehouseCode = ''' + @Warehouse + '''
	AND c.Month = ''' + @MonthPeriod + '''
	AND c.Year = ''' + @YearPeriod +  ''' 
JOIN spMstItemInfo d
	ON a.CompanyCode = d.CompanyCode
	AND a.PartNo = d.PartNo
JOIN gnMstLookUpDtl e
	ON a.CompanyCode = e.CompanyCode
	AND a.FromWarehouseCode = e.LookUpValue
	AND e.CodeId = ''WRCD''
LEFT JOIN gnMstLookUpDtl f
	ON a.CompanyCode = f.CompanyCode
	AND a.ReasonCode = f.LookUpValue
	AND f.CodeId = ''RSWT''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
    AND b.Status = 2
	AND SUBSTRING(CONVERT(VARCHAR, b.WHTrfDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
	AND a.FromWarehouseCode = ''' + @Warehouse + '''
	' + @PartNoWtr1 + ' 
UNION------------------------------------------------------------------------------------------------------------
/*
SBPSF
*/
SELECT --Outgoing
	f.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	e.PartName,
	b.LmpNo Nomor,
	b.LmpDate AS Tanggal,
	c.CustomerName Pemasok,
	NULL Penerimaan,
	SUM(a.QtyBill) Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	case h.UsageDocNo when '' ''  then h.DocNo else h.UsageDocNo end Keterangan
FROM spTrnSLmpDtl a
	JOIN spTrnSLmpHdr b
		ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.LmpNo = b.LmpNo
	JOIN gnMstCustomer c
		ON b.CompanyCode = c.CompanyCode
		AND b.CustomerCode = c.CustomerCode
	JOIN SpHstStockMovement d
		ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode 
		AND a.PartNo = d.PartNo
		AND a.WarehouseCode = d.WarehouseCode
		AND d.Month = ''' + @MonthPeriod + '''
		AND d.Year = ''' + @YearPeriod +  ''' 
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode
		AND a.PartNo = e.PartNo
	LEFT JOIN gnMstLookUpDtl f
		ON a.CompanyCode = d.CompanyCode
		AND a.WarehouseCode = LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
   LEFT JOIN spTrnSORDHdr h on h.CompanyCode=a.CompanyCode
		AND h.BranchCode=a.BranchCode
		AND h.DocNo=a.DocNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND SUBSTRING(CONVERT(VARCHAR, b.BPSFDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
	AND a.WarehouseCode =  ''' + @Warehouse + '''
	' + @PartNoBPSF + ' GROUP BY f.LookUpValueName, a.PartNo,
	e.PartName,
	b.LmpNo,
	b.LmpDate,
	c.CustomerName,
	d.BOMStock,
	d.CostPrice,
	a.CostPrice,
    g.CostPrice,
	d.EOMStock,
	case h.UsageDocNo when '' ''  then h.DocNo else h.UsageDocNo end
UNION----------------------------------------------------------------------------------------------------------------------------------
/*
Retur
*/
SELECT
  f.LookupValueName,
  UPPER(a.PartNo) PartNo,
  e.PartName,
  b.ReturnNo Nomor,
  a.ReturnDate AS Tanggal, 
  c.CustomerName Pemasok,
  SUM(a.QtyReturn) Penerimaan,
  NULL Pengeluaran,
  0 Qty,
  0 Pokok,
  isnull(a.CostPrice,0) CostPrice,
  isnull(g.CostPrice,0) ActCostPrice,
  ''in'' RecStat,
  '' '' Keterangan
FROM spTrnSRturDtl a
	JOIN spTrnSRturHdr b
		ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			AND a.ReturnNo = b.ReturnNo
	JOIN gnMstCustomer c
		ON b.CompanyCode = c.CompanyCode AND b.CustomerCode = c.CustomerCode
	JOIN SpHstStockMovement d
		ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode 
		AND a.PartNo = d.PartNo
		AND a.WarehouseCode = d.WarehouseCode
		AND d.Month = ''' + @MonthPeriod + '''
		AND d.Year = ''' + @YearPeriod +  ''' 
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode AND a.PartNo = e.PartNo
	LEFT JOIN gnMstLookUpDtl f
		ON a.CompanyCode = d.CompanyCode
		AND a.WarehouseCode = LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE
	a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND SUBSTRING(CONVERT(VARCHAR, b.ReturnDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
    ' + @PartNoRetur + ' AND a.WarehouseCode = ''' + @Warehouse + ''' AND b.Status = 2 
	GROUP BY f.LookUpValueName, a.PartNo,
		e.PartName,
		b.ReturnNo,
		a.ReturnDate,
		c.CustomerName,
		d.BOMStock,
		d.CostPrice,
		a.CostPrice,
		g.CostPrice,
		d.EOMStock
UNION-------------------------------------------------------------------------------------------------------------
/*
SupplySlip
*/
SELECT 
  f.LookupValueName,
  UPPER(a.PartNo) PartNo,
  e.PartName,  
  b.ReturnNo Nomor,
  a.ReturnDate AS Tanggal,
  c.CustomerName Pemasok,
  SUM(a.QtyReturn) Penerimaan,
  NULL Pengeluaran, 
  0 Qty,
  0 Pokok,
  isnull(a.CostPrice,0) CostPrice,
  isnull(g.CostPrice,0) ActCostPrice,
  ''in'' RecStat,
  '' '' Keterangan  
FROM spTrnSRturSSDtl a
	JOIN spTrnSRturSSHdr b
		ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			AND a.ReturnNo = b.ReturnNo
	JOIN gnMstCustomer c
		ON a.CompanyCode = c.CompanyCode AND b.CustomerCode = c.CustomerCode
	JOIN SpHstStockMovement d
		ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode 
		AND a.PartNo = d.PartNo
		AND a.WarehouseCode = d.WarehouseCode
		AND d.Month = ''' + @MonthPeriod + '''
		AND d.Year = ''' + @YearPeriod +  ''' 
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode AND a.PartNo = e.PartNo
	LEFT JOIN gnMstLookUpDtl f
		ON a.CompanyCode = d.CompanyCode
		AND a.WarehouseCode = LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE
a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND SUBSTRING(CONVERT(VARCHAR, b.ReturnDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
    ' + @PartNoSupplySlip + ' AND a.WarehouseCode = ''' + @Warehouse + '''  AND b.Status = 2
	GROUP BY f.LookUpValueName, a.PartNo,
		e.PartName,
		b.ReturnNo,
		a.ReturnDate,
		c.CustomerName,
		d.BOMStock,
		d.CostPrice,
		a.CostPrice,
		g.CostPrice,
		d.EOMStock
UNION----------------------------------------------------------------------------------------------------------------------------------
/*
Retur Service
*/
SELECT
  f.LookupValueName,
  UPPER(a.PartNo) PartNo,
  e.PartName,
  b.ReturnNo Nomor,
  a.ReturnDate AS Tanggal, 
  c.CustomerName Pemasok,
  SUM(a.QtyReturn) Penerimaan,
  NULL Pengeluaran,
  0 Qty,
  0 Pokok,
  isnull(a.CostPrice,0) CostPrice,
  isnull(g.CostPrice,0) ActCostPrice,
  ''in'' RecStat,
  '' '' Keterangan 
from spTrnSRturSrvDtl a
	left join spTrnSRturSrvHdr b on
		a.CompanyCode = b.CompanyCode
		and a.BranchCode = b.BranchCode
		and a.ReturnNo = b.ReturnNo
	JOIN gnMstCustomer c
		ON b.CompanyCode = c.CompanyCode 
		AND b.CustomerCode = c.CustomerCode
	JOIN SpHstStockMovement d
		ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode 
		AND a.PartNo = d.PartNo
		AND a.WarehouseCode = d.WarehouseCode
		AND d.Month = ''' + @MonthPeriod + '''
		AND d.Year = ''' + @YearPeriod +  ''' 
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode 
		AND a.PartNo = e.PartNo
	LEFT JOIN gnMstLookUpDtl f
		ON a.CompanyCode = d.CompanyCode
		AND a.WarehouseCode = LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE
	a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND SUBSTRING(CONVERT(VARCHAR, b.ReturnDate, 112),1,6) BETWEEN ''' + @YearPeriod+ RIGHT('0' + @MonthPeriod,2) + ''' AND SUBSTRING(CONVERT(VARCHAR,GetDate(),112),1,6)
    ' + @PartNoRetur + ' AND a.WarehouseCode = ''' + @Warehouse + ''' AND b.Status = 2 
	GROUP BY f.LookUpValueName, a.PartNo,
		e.PartName,
		b.ReturnNo,
		a.ReturnDate,
		c.CustomerName,
		d.BOMStock,
		d.CostPrice,
		a.CostPrice,
		g.CostPrice,
		d.EOMStock
UNION 
SELECT --BOM
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	'''' PartName,
	'''' Nomor, 
	'''' AS Tanggal, 
	''-'' Pemasok,
	0 Penerimaan,
	0 Pengeluaran,
	CASE WHEN ''' + @MonthPeriod + ''' = Month(getDate()) AND ''' + @YearPeriod + ''' = Year(getDate()) THEN a.BOMInvQty ELSE  c.BOMStock END AS Qty,
	CASE WHEN ''' + @MonthPeriod + ''' = Month(getDate()) AND ''' + @YearPeriod + ''' = Year(getDate()) THEN a.BOMInvCostPrice ELSE  c.CostPrice END AS Pokok,
	0 CostPrice,
    0 ActCostPrice,
	''-'' RecStat,
	'' '' Keterangan
FROM spMstItems a	
LEFT JOIN gnMstLookUpDtl e
		ON a.CompanyCode = e.CompanyCode
		AND e.CodeId = ''WRCD''	AND e.LookupValue = ''' + @Warehouse + '''
 JOIN SpHstStockMovement c
		ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode 
		AND a.PartNo = c.PartNo
		AND c.WarehouseCode = ''' + @Warehouse + '''
		AND c.Month = ''' + @MonthPeriod + '''
		AND c.Year = ''' + @YearPeriod +  '''
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''' + @PartNoItem + ') #spKartuStock

select * into #spKartuStockGroup from
(SELECT distinct partno from #spKartuStock) #spKartuStockGroup

select * into #spKartuStockGroupID from (
select partno , row_number() over (order by partno Asc) groupId FROM #spKartuStockGroup) #spKartuStockGroupID

update #spKartuStock
set groupId = b.groupId
from #spKartuStock a, #spKartuStockGroupID b
where a.partno = b.partno

select * from #spKartuStock ORDER BY PartNo, TanggalSort ASC

DROP TABLE #spKartuStock
DROP TABLE #spKartuStockGroup
DROP TABLE #spKartuStockGroupID
'

--=====================================================================================================================================

set @QueryStockItem = '
SELECT *,
convert(varchar, Tanggal, 112) + replace(convert(varchar, Tanggal,108),'':'','''') TanggalSort,
1 GroupID
INTO #spKartuStock FROM (
SELECT --Adjustment Incoming
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.AdjustmentNo Nomor, 
	b.AdjustmentDate AS Tanggal, 
	f.LookupValueName Pemasok,
	a.QtyAdjustment Penerimaan,
	NULL Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''in'' RecStat,
	'' '' Keterangan
FROM spTrnIAdjustDtl a
	JOIN spTrnIAdjustHdr b
		ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.AdjustmentNo = b.AdjustmentNo
	JOIN spMstItems c
		ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode 
		AND a.PartNo = c.PartNo
	JOIN spMstItemInfo d
		ON a.CompanyCode = d.CompanyCode
		AND a.PartNo = d.PartNo
	JOIN gnMstLookUpDtl e
		ON a.CompanyCode = e.CompanyCode
		AND a.WarehouseCode = e.LookUpValue
		AND e.CodeId = ''WRCD''
	JOIN gnMstLookUpDtl f
		ON a.CompanyCode = f.CompanyCode
		AND a.ReasonCode = f.LookUpValue
		AND f.CodeId = ''RSAD''
    JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE a.AdjustmentCode = ''+''
	AND a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(b.AdjustmentDate) = ''' + @MonthPeriod + '''
	AND YEAR(b.AdjustmentDate) = ''' + @YearPeriod + '''
	AND a.WarehouseCode = ''' + @Warehouse + '''
	' + @PartNoAdjInc + '
UNION------------------------------------------------------------------------------------------------------------ 
SELECT --Adjustment Outgoing
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.AdjustmentNo Nomor, 
	b.AdjustmentDate AS Tanggal, 
	f.LookupValueName Pemasok,
	NULL Penerimaan,
	a.QtyAdjustment Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	'' '' Keterangan
FROM spTrnIAdjustDtl a
JOIN spTrnIAdjustHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.AdjustmentNo = b.AdjustmentNo
JOIN spMstItems c
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCode = c.BranchCode 
	AND a.PartNo = c.PartNo
JOIN spMstItemInfo d
	ON a.CompanyCode = d.CompanyCode
	AND a.PartNo = d.PartNo
JOIN gnMstLookUpDtl e
	ON a.CompanyCode = e.CompanyCode
	AND a.WarehouseCode = e.LookUpValue
	AND e.CodeId = ''WRCD''
JOIN gnMstLookUpDtl f
	ON a.CompanyCode = f.CompanyCode
	AND a.ReasonCode = f.LookUpValue
	AND f.CodeId = ''RSAD''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.AdjustmentCode = ''-''	
	AND a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(b.AdjustmentDate) = ''' + @MonthPeriod + '''
	AND YEAR(b.AdjustmentDate) = ''' + @YearPeriod + '''
	AND a.WarehouseCode = ''' + @Warehouse + '''
	' + @PartNoAdjOut + ' 
UNION------------------------------------------------------------------------------------------------------------
--/*
--RECEIVING
--	- Incoming
--	- Pemasok/Pelanggan = Supplier Name
--*/
SELECT 
	f.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	e.PartName,
	a.WRSNo Nomor,
	b.WRSDate AS Tanggal,
	c.SupplierName Pemasok,
	SUM(a.ReceivedQty) Penerimaan,
	NULL Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''in'' RecStat,
	'' '' Keterangan
FROM spTrnPRcvDtl a
	JOIN spTrnPRcvHdr b
		ON a.CompanyCode = b.CompanyCode 
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	JOIN gnMstSupplier c
		ON b.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode 
	JOIN spMstItems d
		ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
		AND a.PartNo = d.PartNo
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode
		AND a.PartNo = e.PartNo
	JOIN gnMstLookUpDtl f
		ON a.CompanyCode = f.CompanyCode
		AND a.WarehouseCode = f.LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH( b.WRSDate) = ''' + @MonthPeriod + '''
	AND YEAR( b.WRSDate) = ''' + @YearPeriod + '''
	AND a.WarehouseCode = ''' + @Warehouse + '''
	AND b.Status NOT IN ( ''3'', ''0'', ''1'')
	' + @PartNoRcv + ' GROUP BY 
f.LookUpValueName,
	a.PartNo,
	e.PartName,
	a.WRSNo,
	b.WRSDate,
	c.SupplierName,
	a.CostPrice,
    g.CostPrice
	
UNION------------------------------------------------------------------------------------------------------------
--/*
--FAKTUR PAJAK
--	- Outgoing
--	- Pemasok/Pelanggan = Customer name
--*/
SELECT 
	f.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	e.PartName,
	a.FPJNo Nomor,
	b.FPJDate AS Tanggal,
	c.CustomerName Pemasok,
	NULL Penerimaan,
	SUM(a.QtyBill) Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(A.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	isnull(a.DocNo, '' '') Keterangan
FROM spTrnSFPJDtl a
JOIN spTrnSFPJHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.FPJNo = b.FPJNo
JOIN gnMstCustomer c
	ON b.CompanyCode = c.CompanyCode
	AND b.CustomerCode = c.CustomerCode
JOIN spMstItems d
	ON a.CompanyCode = d.CompanyCode
	AND a.BranchCode = d.BranchCode
	AND a.PartNo = d.PartNo
JOIN spMstItemInfo e
	ON a.CompanyCode = e.CompanyCode
	AND a.PartNo = e.PartNo
JOIN gnMstLookUpDtl f
	ON a.CompanyCode = f.CompanyCode
	AND a.WarehouseCode = f.LookUpValue
	AND f.CodeId = ''WRCD''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(b.FPJDate) = ''' + @MonthPeriod + '''
	AND YEAR(b.FPJDate) = ''' + @YearPeriod + '''
	AND a.WarehouseCode = ''' + @Warehouse + '''
	' + @PartNoFpj + ' GROUP BY 
f.LookUpValueName,
	a.PartNo,
	e.PartName,
	a.FPjNO,
	b.FPJDate,
	c.CustomerName,
	a.CostPrice,
    g.CostPrice,
    a.DocNo
UNION------------------------------------------------------------------------------------------------------------
/*
WAREHOUSE TRANSFER
	- Incoming (ToWarehouseCode has entry)
	- Outgoing (FromWarehouseCode has entry)
	- Pemasok/Pelanggan = ReasonCode
*/
SELECT --Incoming
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.WHTrfNo Nomor, 
	b.WHTrfDate AS Tanggal,
	CASE WHEN LEFT(b.ReferenceNo,3) = ''CLR'' THEN ''[REC.CLAIM]''  ELSE CASE WHEN LEFT(b.ReferenceNo,3) = ''CLM'' THEN ''[CLAIM]'' ELSE f.LookupValueName END END AS Pemasok,
	a.Qty Penerimaan,
	NULL Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''in'' RecStat,
	'' '' Keterangan
FROM spTrnIWHTrfDtl a
JOIN spTrnIWHTrfHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.WHTrfNo = b.WHTrfNo
JOIN spMstItems c
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = c.PartNo
JOIN spMstItemInfo d
	ON a.CompanyCode = d.CompanyCode
	AND a.PartNo = d.PartNo
JOIN gnMstLookUpDtl e
	ON a.CompanyCode = e.CompanyCode
	AND a.ToWarehouseCode = e.LookUpValue
	AND e.CodeId = ''WRCD''
LEFT JOIN gnMstLookUpDtl f
	ON a.CompanyCode = f.CompanyCode
	AND f.LookUpValue = a.ReasonCode 
	AND f.CodeId = ''RSWT''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(b.WHTrfDate) = ''' + @MonthPeriod + '''
	AND YEAR(b.WHTrfDate) = ''' + @YearPeriod + '''
	AND a.ToWarehouseCode = ''' + @Warehouse + '''
	' + @PartNoWtr + '   
UNION------------------------------------------------------------------------------------------------------------
SELECT --Outgoing
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	d.PartName,
	a.WHTrfNo Nomor, 
	b.WHTrfDate AS Tanggal,
	CASE WHEN LEFT(b.ReferenceNo,3) = ''CLR'' THEN ''[REC.CLAIM]'' ELSE CASE WHEN LEFT(b.ReferenceNo,3) = ''CLM'' THEN ''[CLAIM]'' ELSE f.LookupValueName END END AS Pemasok,
	NULL Penerimaan,
	a.Qty Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	'' '' Keterangan
FROM spTrnIWHTrfDtl a
JOIN spTrnIWHTrfHdr b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.WHTrfNo = b.WHTrfNo
JOIN spMstItems c
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = c.PartNo
JOIN spMstItemInfo d
	ON a.CompanyCode = d.CompanyCode
	AND a.PartNo = d.PartNo
JOIN gnMstLookUpDtl e
	ON a.CompanyCode = e.CompanyCode
	AND a.FromWarehouseCode = e.LookUpValue
	AND e.CodeId = ''WRCD''
LEFT JOIN gnMstLookUpDtl f
	ON a.CompanyCode = f.CompanyCode
	AND f.LookUpValue = a.ReasonCode 
	AND f.CodeId = ''RSWT''
JOIN spMstItemPrice g
    ON a.CompanyCode = g.CompanyCode 
    AND a.BranchCode = g.BranchCode
    AND a.PartNo = g.PartNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(b.WHTrfDate) = ''' + @MonthPeriod + '''
	AND YEAR(b.WHTrfDate) = ''' + @YearPeriod + '''
	AND a.FromWarehouseCode = ''' + @Warehouse + '''
	' + @PartNoWtr1 + ' 
UNION------------------------------------------------------------------------------------------------------------
/*
SBPSF
*/
SELECT --Outgoing
	f.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	e.PartName,
	b.LmpNo Nomor,
	b.LmpDate AS Tanggal,
	c.CustomerName Pemasok,
	NULL Penerimaan,
	SUM(a.QtyBill) Pengeluaran,
	0 Qty,
	0 Pokok,
	isnull(a.CostPrice,0) CostPrice,
    isnull(g.CostPrice,0) ActCostPrice,
	''out'' RecStat,
	case h.UsageDocNo when '' '' then h.DocNo else h.UsageDocNo end Keterangan
FROM spTrnSLmpDtl a
	JOIN spTrnSLmpHdr b
		ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.LmpNo = b.LmpNo
	JOIN gnMstCustomer c
		ON b.CompanyCode = c.CompanyCode
		AND b.CustomerCode = c.CustomerCode
	JOIN spMstItems d
		ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
		AND a.PartNo = d.PartNo
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode
		AND a.PartNo = e.PartNo
	JOIN gnMstLookUpDtl f
		ON a.CompanyCode = f.CompanyCode
		AND a.WarehouseCode = f.LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
   LEFT JOIN spTrnSORDHdr h on h.CompanyCode=a.CompanyCode
		AND h.BranchCode=a.BranchCode
		AND h.DocNo=a.DocNo
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(b.BPSFDate) =  ''' + @MonthPeriod + '''
	AND YEAR(b.BPSFDate) =  ''' + @YearPeriod + '''
	AND a.WarehouseCode =  ''' + @Warehouse + '''
	' + @PartNoBPSF + '
GROUP BY 
f.LookUpValueName,
	a.PartNo,
	e.PartName,
	b.LmpNo,
	b.LmpDate,
	c.CustomerName,
	a.CostPrice,
    g.CostPrice,
    case h.UsageDocNo when '' '' then h.DocNo else h.UsageDocNo end
UNION----------------------------------------------------------------------------------------------------------------------------------
/*
Retur
*/
SELECT
  f.LookupValueName,
  UPPER(a.PartNo) PartNo,
  e.PartName,
  b.ReturnNo Nomor,
  a.ReturnDate AS Tanggal, 
  c.CustomerName Pemasok,
  SUM(a.QtyReturn) Penerimaan,
  NULL Pengeluaran,
  0 Qty,
  0 Pokok,
  isnull(a.CostPrice,0) CostPrice,
  isnull(g.CostPrice,0) ActCostPrice,
  ''in'' RecStat,
  '' '' Keterangan 
FROM spTrnSRturDtl a
	JOIN spTrnSRturHdr b
		ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			AND a.ReturnNo = b.ReturnNo
	JOIN gnMstCustomer c
		ON b.CompanyCode = c.CompanyCode AND b.CustomerCode = c.CustomerCode
	JOIN spMstItems d
		ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode
			AND a.PartNo = d.PartNo
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode AND a.PartNo = e.PartNo
	JOIN gnMstLookUpDtl f
		ON a.CompanyCode = f.CompanyCode
		AND a.WarehouseCode = f.LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE
	a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(a.ReturnDate) = ''' + @MonthPeriod + '''
	AND YEAR(a.ReturnDate) = ''' + @YearPeriod + '''
    ' + @PartNoRetur + ' AND b.Status = 2
	GROUP BY 
f.LookUpValueName,
	a.PartNo,
	e.PartName,
	b.ReturnNo,
	a.ReturnDate,
	c.CustomerName,
	a.CostPrice,
    g.CostPrice

UNION-------------------------------------------------------------------------------------------------------------
/*
SupplySlip
*/
SELECT 
  f.LookupValueName,
  UPPER(a.PartNo) PartNo,
  e.PartName,  
  b.ReturnNo Nomor,
  a.ReturnDate AS Tanggal,
  c.CustomerName Pemasok,
  SUM(a.QtyReturn) Penerimaan,
  NULL Pengeluaran, 
  0 Qty,
  0 Pokok,
  isnull(a.CostPrice,0) CostPrice,
  isnull(g.CostPrice,0) ActCostPrice,
  ''in'' RecStat,
  '' '' Keterangan  
FROM spTrnSRturSSDtl a
	JOIN spTrnSRturSSHdr b
		ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			AND a.ReturnNo = b.ReturnNo
	JOIN gnMstCustomer c
		ON a.CompanyCode = c.CompanyCode AND b.CustomerCode = c.CustomerCode
	JOIN spMstItems d
		ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode
			AND a.PartNo = d.PartNo
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode AND a.PartNo = e.PartNo
	JOIN gnMstLookUpDtl f
		ON a.CompanyCode = f.CompanyCode
		AND a.WarehouseCode = f.LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE
a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(a.ReturnDate) = ''' + @MonthPeriod + '''
	AND YEAR(a.ReturnDate) = ''' + @YearPeriod + '''
    ' + @PartNoSupplySlip + ' AND b.Status = 2 
	GROUP BY 
f.LookUpValueName,
	a.PartNo,
	e.PartName,
	b.ReturnNo,
	a.ReturnDate,
	c.CustomerName,
	a.CostPrice,
    g.CostPrice
UNION----------------------------------------------------------------------------------------------------------------------------------
/*
Retur service
*/
SELECT
  f.LookupValueName,
  UPPER(a.PartNo) PartNo,
  e.PartName,
  b.ReturnNo Nomor,
  a.ReturnDate AS Tanggal, 
  c.CustomerName Pemasok,
  SUM(a.QtyReturn) Penerimaan,
  NULL Pengeluaran,
  0 Qty,
  0 Pokok,
  isnull(a.CostPrice,0) CostPrice,
  isnull(g.CostPrice,0) ActCostPrice,
  ''in'' RecStat,
  '' '' Keterangan 
FROM spTrnSRturSrvDtl a
	JOIN spTrnSRturSrvHdr b
		ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
			AND a.ReturnNo = b.ReturnNo
	JOIN gnMstCustomer c
		ON b.CompanyCode = c.CompanyCode AND b.CustomerCode = c.CustomerCode
	JOIN spMstItems d
		ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode
			AND a.PartNo = d.PartNo
	JOIN spMstItemInfo e
		ON a.CompanyCode = e.CompanyCode AND a.PartNo = e.PartNo
	JOIN gnMstLookUpDtl f
		ON a.CompanyCode = f.CompanyCode
		AND a.WarehouseCode = f.LookUpValue
		AND f.CodeId = ''WRCD''
   JOIN spMstItemPrice g
        ON a.CompanyCode = g.CompanyCode 
        AND a.BranchCode = g.BranchCode
        AND a.PartNo = g.PartNo
WHERE
	a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
	AND MONTH(a.ReturnDate) = ''' + @MonthPeriod + '''
	AND YEAR(a.ReturnDate) = ''' + @YearPeriod + '''
    ' + @PartNoRetur + ' AND b.Status = 2
	GROUP BY 
f.LookUpValueName,
	a.PartNo,
	e.PartName,
	b.ReturnNo,
	a.ReturnDate,
	c.CustomerName,
	a.CostPrice,
    g.CostPrice
UNION 
SELECT --BOM
	e.LookUpValueName,
	UPPER(a.PartNo) PartNo,
	'''' PartName,
	'''' Nomor, 
	'''' AS Tanggal, 
	''-'' Pemasok,
	0 Penerimaan,
	0 Pengeluaran,
	CASE WHEN ''' + @MonthPeriod + ''' = Month(getDate()) AND ''' + @YearPeriod + ''' = Year(getDate()) THEN a.BOMInvQty ELSE  c.BOMStock END AS Qty,
	CASE WHEN ''' + @MonthPeriod + ''' = Month(getDate()) AND ''' + @YearPeriod + ''' = Year(getDate()) THEN a.BOMInvCostPrice ELSE  c.CostPrice END AS Pokok,
	0 CostPrice,
    0 ActCostPrice,
	''-'' RecStat,
	'' '' Keterangan
 FROM spMstItemLoc a	
LEFT JOIN gnMstLookUpDtl e
		ON a.CompanyCode = e.CompanyCode
		AND e.CodeId = ''WRCD''	AND e.LookupValue = ''' + @Warehouse + '''
 LEFT JOIN SpHstStockMovement c
		ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode 
		AND a.PartNo = c.PartNo
		AND c.WarehouseCode = ''' + @Warehouse + '''
		AND c.Month = ''' + @MonthPeriod + '''
		AND c.Year = ''' + @YearPeriod +  '''
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''' + @PartNoItem + ' AND a.WarehouseCode =  ''' + @Warehouse + ''') #spKartuStock

select * into #spKartuStockGroup from
(SELECT distinct partno from #spKartuStock) #spKartuStockGroup

select * into #spKartuStockGroupID from (
select partno , row_number() over (order by partno Asc) groupId FROM #spKartuStockGroup) #spKartuStockGroupID

update #spKartuStock
set groupId = b.groupId
from #spKartuStock a, #spKartuStockGroupID b
where a.partno = b.partno

select * from #spKartuStock ORDER BY PartNo, TanggalSort ASC

DROP TABLE #spKartuStock
DROP TABLE #spKartuStockGroup
DROP TABLE #spKartuStockGroupID
'

IF @YearPeriod = YEAR(GETDATE()) AND @MonthPeriod = MONTH(GETDATE())
BEGIN
	EXEC(@QueryStockItem);
	PRINT(@QueryStockItem);	
END
ELSE 
	EXEC(@QueryStock);
	PRINT(@QueryStock);	
END
GO
-- =============================================
-- Author:		<yo>
-- Create date: <26 April 2012>
-- Description:	<SelectJobOrderNo4SOServiceEnhanche> 
-- =============================================
ALTER procedure [dbo].[uspfn_SelectJobOrderNo4SOServiceEnhanche]
	@CompanyCode  varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15),
	@JobOrderNo  varchar(15)
	
AS
BEGIN

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @ProductType as varchar(15)
--declare @TypeOfGoods as varchar(15)
--declare @JobOrderNo as varchar(15)

--set @CompanyCode = '6159401000'
--set @BranchCode = '6159401001'
--set @ProductType = '4W'
--set @JobOrderNo = 'SPK/15/002333'

SELECT 
ROW_number() OVER(ORDER BY a.TipePart, a.PartNo ASC) AS NoUrut, * FROM (
SELECT 
DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
	, SUM(QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(QtyOrder) * a.RetailPrice) * ((100 - PartDiscPct)/100) NetSalesAmt
    , PartDiscPct DiscPct
FROM
(
SELECT
	DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, c.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, ISNULL(Item.QtyOrder,0) AS QtyOrder
    , a.DiscPct PartDiscPct 
FROM
	svTrnSrvItem a WITH (NOLOCK, NOWAIT)
	LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
		AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, RetailPrice, PartNo,BillType,
				CASE WHEN SUM(ISNULL(DemandQty, 0)) > SUM(ISNULL(SupplyQty, 0)) THEN SUM(ISNULL(DemandQty, 0) - (ISNULL(SupplyQty, 0))) 
				ELSE SUM(ISNULL(DemandQty, 0)) END QtyOrder
				FROM svTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice, BillType) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = a.PartNo AND Item.RetailPrice = a.RetailPrice AND a.Billtype = Item.BillType
    LEFT JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo 
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	--AND Item.QtyOrder > 0
	AND JobOrderNo = @JobOrderNo
) a
LEFT JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, ServiceNo
	, a.PartNo
	, a.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
    , PartDiscPct 
) a ORDER BY a.TipePart, a.PartNo ASC

END
GO
ALTER procedure [dbo].[uspfn_SvSaveClaimHoldingSPK]
	 @CompanyCode  varchar(20),
	 @BranchHold   varchar(20),
	 @OtherAmount  decimal,
	 @TransDate1   varchar(20),
	 @TransDate2   varchar(20),
	 @IsSprClaim   bit = 0,
	 @UserID       varchar(20)
as

set nocount on

select * into #t1 from (
select (row_number() over (order by a.InvoiceNo)) as SeqNo
	 , a.CompanyCode, a.BranchCode
	 , a.InvoiceNo, b.JobOrderDate InvoiceDate
	 , a.IsCbu, a.CategoryCode, a.ComplainCode, a.DefectCode
	 , a.SubletHour, a.SubletAmt, a.CausalPartNo, a.TroubleDescription
	 , a.ProblemExplanation, a.OperationNo, a.OperationHour, a.OperationAmt
	 , b.ProductType, b.BasicModel, b.ServiceBookNo
	 , b.ChassisCode, b.ChassisNo, b.EngineCode, b.EngineNo
	 , isnull(b.Odometer, 0) Odometer
	 , isnull(b.TotalSrvAmount, 0) ClaimAmt
	 , isnull(b.TotalSrvAmount, 0) TotalSrvAmt
	 , 0 PartAmt, b.JobOrderDate RepairedDate
	 , d.DescriptionEng as TechnicalModel
	 , e.FakturPolisiDate as RegisteredDate
  from svTrnInvClaim a
  left join svTrnService b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.JobOrderNo = a.InvoiceNo
  left join svMstRefferenceService d
    on d.CompanyCode = a.CompanyCode
   and d.RefferenceType = 'BASMODEL'
   and d.RefferenceCode = b.BasicModel
  left join svMstCustomerVehicle e
    on e.CompanyCode = a.CompanyCode
   and e.ChassisCode = b.ChassisCode
   and e.ChassisNo = b.ChassisNo
 where a.CompanyCode = @CompanyCode
   and a.InvoiceNo like 'SPK%'
   and convert(varchar, b.JobOrderDate, 112) between @TransDate1 and @TransDate2
   and isnull(b.IsSparepartClaim, 0) = @IsSprClaim
   and not exists (
		select 1 from svTrnClaimApplication
		 where 1 = 1
		   and CompanyCode = a.CompanyCode
		   and BranchCode = a.BranchCode
		   and ProductType = a.ProductType
		   and InvoiceNo = a.InvoiceNo
		)
)#

------------------------------------------------------------------------------
-- Get CLA from gnMstDocument
------------------------------------------------------------------------------
select * into #doc from(
select top 1 * from gnMstDocument
 where CompanyCode = @CompanyCode
   and BranchCode  = @BranchHold
   and DocumentType = 'CLA' -- CLAIM
)#doc

if (select count(*) from #doc) = 0
begin
    raiserror('master document untuk claim belum disetting',16 ,1 );
    return
end

declare @GenerateNo varchar(20)
set @GenerateNo = isnull((
                    select DocumentPrefix
                         + '/' + right(convert(varchar, DocumentYear),2) + '/'
                         + right('000000' + convert(varchar, (DocumentSequence + 1)), 6)
                      from #doc
                    ), '')

------------------------------------------------------------------------------
-- Update DocSeq gnMstDocument - CLA
------------------------------------------------------------------------------
update gnMstDocument set DocumentSequence = DocumentSequence + 1
 where CompanyCode = @CompanyCode
   and BranchCode  = @BranchHold
   and DocumentType = 'CLA'

------------------------------------------------------------------------------
-- Reset DocSeq gnMstDocument - ISU when differenet Month
------------------------------------------------------------------------------
if not exists (
	select * from svTrnClaimApplication
	 where CompanyCode = @CompanyCode
	   --and BranchCode  = @BranchHold
	   and left(convert(varchar, IssueDate, 112), 6) = left(convert(varchar, getdate(), 112), 6)
	)
begin
	update gnMstDocument set DocumentSequence = 0
	 where CompanyCode = @CompanyCode
	   and BranchCode  = @BranchHold
	   and DocumentType = 'ISU'
end

------------------------------------------------------------------------------
-- Get ISSSUE from gnMstDocument
------------------------------------------------------------------------------
select * into #isu from(
select * from gnMstDocument
 where CompanyCode = @CompanyCode
   and BranchCode  = @BranchHold
   and DocumentType = 'ISU' -- ISSUE
)#

if (select count(*) from #isu) = 0
begin
    raiserror('master document untuk issue belum disetting',16 ,1 );
    return
end

------------------------------------------------------------------------------
-- Update DocSeq gnMstDocument - ISU
------------------------------------------------------------------------------
declare @InitIssueNo int set @InitIssueNo = (select top 1 DocumentSequence from #isu)

update gnMstDocument set DocumentSequence = DocumentSequence + (select count(*) from #t1)
 where CompanyCode = @CompanyCode
   and BranchCode  = @BranchHold
   and DocumentType = 'ISU'

insert into svTrnClaim 
(
	CompanyCode, BranchCode, ProductType, GenerateNo, GenerateDate, SourceData,
	FromInvoiceNo, ToInvoiceNo, FPJNo, FPJDate, FPJGovNo,
	SenderDealerCode, ReceiveDealerCode, SenderDealerName,
	RefferenceNo, RefferenceDate, TotalNoOfItem, LotNo, PostingFlag,
	TotalOperationHour, TotalSubletHour, TotalOperationAmt, TotalSubletAmt,
	TotalPartAmt, TotalClaimAmt, OtherCompensationAmt,
	IsLocked, CreatedBy, CreatedDate, IsSparepartClaim
)

select CompanyCode, @BranchHold BranchCode, a.ProductType
	 , @GenerateNo as GenerateNo
	 , getdate() as GenerateDate
	 , 0 as SourceData
	 , (select min(InvoiceNo) from #t1) FromInvoiceNo  -- ??
	 , (select max(InvoiceNo) from #t1) ToInvoiceNo    -- ??
	 , '' as FPJNo, null as FPJDate, null as FPJGovNo
	 , @CompanyCode as SenderDealerCode
	 , @CompanyCode as ReceiveDealerCode
	 , @CompanyCode as SenderDealerName
	 , null as RefferenceNo, null as RefferenceDate
	 , (select count(*) from #t1) TotalNoOfItem
	 , 0 as LotNo, 2 as PostingFlag
	 , (select sum(OperationHour) from #t1)  as TotalOperationHour
	 , (select sum(SubletHour) from #t1) as TotalSubletHour
	 , (select sum(OperationAmt) from #t1) as TotalOperationAmt
	 , (select sum(SubletAmt) from #t1) as TotalSubletAmt
	 , (select sum(PartAmt) from #t1) as TotalPartAmt
	 , (select sum(ClaimAmt) from #t1) as TotalClaimAmt
	 , @OtherAmount as OtherCompensationAmt
	 , 0 as IsLocked, @UserID as CreatedBy, getdate() as CreatedDate
	 , @IsSprClaim
  from #t1 a
 group by a.CompanyCode, a.ProductType


select * into #t2 from (
select CompanyCode, BranchCode, ProductType, @GenerateNo GenerateNo
	 , (row_number() over (order by BranchCode, InvoiceNo)) as GenerateSeq
	 , convert(int, 0) GenerateSeqPart
	 , InvoiceNo, @InitIssueNo InitIssueNo, getdate() IssueDate, '0' ClaimStatus, null PaymentNo, null PaymentDate
	 , ServiceBookNo, BasicModel, TechnicalModel, ChassisCode, ChassisNo, EngineCode
	 , EngineNo, RegisteredDate, RepairedDate, Odometer, IsCbu, ComplainCode
	 , DefectCode, CategoryCode, isnull(OperationNo, '') OperationNo, OperationHour, SubletHour, OperationAmt
	 , SubletAmt, PartAmt, ClaimAmt, TroubleDescription, ProblemExplanation
	 , @UserID CreatedBy, getdate() CreatedDate, null LastupdateBy, null LastupdateDate
	 , CausalPartNo
  from #t1
)#

insert into svTrnClaimApplication 
(
	CompanyCode, BranchCode, ProductType, GenerateNo, GenerateSeq, 
	InvoiceNo, IssueNo, IssueDate, ClaimStatus, PaymentNo, PaymentDate, 
	ServiceBookNo, BasicModel, TechnicalModel, ChassisCode, ChassisNo, 
	EngineCode, EngineNo, RegisteredDate, RepairedDate, Odometer, IsCbu, 
	ComplainCode, DefectCode, CategoryCode, OperationNo, OperationHour, 
	SubletHour, OperationAmt, SubletAmt, PartAmt, ClaimAmt, 
	TroubleDescription, ProblemExplanation, 
	CreatedBy, CreatedDate, LastupdateBy, LastupdateDate
)
select CompanyCode, BranchCode, ProductType, GenerateNo, GenerateSeq, InvoiceNo
	 , right(convert(varchar, year(getdate())), 2) 
	 + right('00' + convert(varchar, (month(getdate()))), 2) + '-'
	 + right('0000' + convert(varchar, InitIssueNo + GenerateSeq), 4) + '-' 
	 + right(BranchCode, 2) as IssueNo
	 , IssueDate, ClaimStatus, PaymentNo, PaymentDate
	 , ServiceBookNo, BasicModel, TechnicalModel, ChassisCode, ChassisNo
	 , EngineCode, EngineNo, RegisteredDate, RepairedDate, Odometer, IsCbu
	 , ComplainCode, DefectCode, CategoryCode, OperationNo, OperationHour
	 , SubletHour, OperationAmt, SubletAmt, PartAmt, ClaimAmt
	 , TroubleDescription, ProblemExplanation
	 , CreatedBy, CreatedDate, LastupdateBy, LastupdateDate
  from #t2

declare @t_cau_part as table 
(
	IsCausalPart bit,
	PartNo       varchar(20),
	PartQty      numeric(7,2),
	PartName     varchar(90)
)

select * into #t3 from (
select a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateSeq
	 , (row_number() over (order by c.PartNo)) as PartSeq
	 , case when (c.PartNo = a.CausalPartNo) then 1 else 0 end IsCausal
	 , c.PartNo, c.PartNo ProcessedPartNo
	 , (c.SupplyQty - c.ReturnQty) Quantity
	 , c.RetailPrice as UnitPrice
	 , (c.SupplyQty - c.ReturnQty) * c.RetailPrice as TotalPrice
	 , 0 as PaymentQuantity, 0 as PaymentTotalPrice
	 , 1 as IsActive, @UserID CreatedBy, getdate() CreatedDate
	 , null LastupdateBy, null LastupdateDate
  from #t2 a
  left join svTrnService b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.JobOrderNo = a.InvoiceNo
  left join svTrnSrvItem c
    on c.CompanyCode = b.CompanyCode
   and c.BranchCode = b.BranchCode
   and c.ServiceNo = b.ServiceNo
 where c.PartNo <> ''
)#

insert into svTrnClaimPart
(
	CompanyCode, BranchCode, ProductType, GenerateNo, GenerateSeq, PartSeq,
	IsCausal, PartNo, ProcessedPartNo, Quantity, UnitPrice, TotalPrice, 
	PaymentQuantity, PaymentTotalPrice, IsActive, CreatedBy, CreatedDate, 
	LastupdateBy, LastupdateDate
)
select * from #t3 order by GenerateNo, GenerateSeq

drop table #t1
drop table #t2
drop table #t3
drop table #doc

select @GenerateNo

--rollback transaction
--return
GO
-- uspfn_OmInquiryChassisDO '6115202','611520200','SOA/11/000287','FU150 SCD',2011,'MH8BG41CABJ','COLO','00'
create procedure [dbo].[uspfn_OmInquiryChassisDO]
	@CompanyCode varchar(15)
	,@BranchCode varchar(15)
	,@SONo varchar(15)
	,@SalesModelCode varchar(30)
	--,@SalesModelYear int
	,@SalesModelYear varchar(15)
	,@ChassisCode varchar(15)
	,@RefType varchar(15)
	,@WarehouseCode varchar(15)

as

--declare @CompanyCode varchar(15)
--,@BranchCode varchar(15)
--,@SONo varchar(15)
--,@SalesModelCode varchar(15)
--,@SalesModelYear int
--,@ChassisCode varchar(15)
--,@RefType varchar(15)
--,@WarehouseCode varchar(15)
--
--select @CompanyCode='6115202'
--,@BranchCode='611520200'
--,@SONo='SOA/11/000287' 
--,@SalesModelCode='FU150 SCD' 
--,@SalesModelYear=2011
--,@ChassisCode='MH8BG41CABJ' 
--,@RefType='COLO'
--,@WarehouseCode='00'

declare 
@val as int,
@CompanyMD as varchar(15)
,@DBMD as varchar(15)
,@QryTemp as varchar(max)


DECLARE @columnVal TABLE (columnVal int);

set @val=0

set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 

--set @val= (
set @QryTemp = 'SELECT isnull(count (a.ChassisNo),0) jml
FROM omTrSalesSOVin a 
	INNER JOIN ' + @DBMD + '.dbo.omMstVehicle b ON 
		a.ChassisCode = b.ChassisCode 
		AND a.ChassisNo = b.ChassisNo 
WHERE a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + ''' 
	AND a.SONo = ''' + @SONo + '''
	AND a.SalesModelCode = ''' + @SalesModelCode + ''' 
	AND a.SalesModelYear = ''' + @SalesModelYear + '''
	AND a.ChassisCode = ''' + @ChassisCode + '''
	and b.Status in (0,3)
	AND not exists 
	( 
		SELECT 1 
		FROM omTrSalesDODetail x
			inner join omTrSalesDO y on x.CompanyCode=y.CompanyCode and x.BranchCode=y.BranchCode
				and x.DONo=y.DONo
		WHERE x.CompanyCode = a.CompanyCode 
		AND x.BranchCode = a.BranchCode 
		AND x.SalesModelCode = a.SalesModelCode 
		AND x.ChassisCode = a.ChassisCode 
		and x.ChassisNo= a.ChassisNo
		and y.Status in (0,1)
	) 
	AND a.ChassisNo != 0 ' 

INSERT INTO @columnVal EXEC (@QryTemp);

set @val= (SELECT * FROM @columnval);

if @val = 0 
begin
	set @QryTemp =
	'SELECT 
		a.ChassisCode , a.ChassisNo , a.EngineCode , a.EngineNo , 
		a.ColourCode , b.RefferenceDesc1 AS ColourName 
	FROM ' + @DBMD + '.dbo.omMstVehicle a 
		LEFT JOIN ' + @DBMD + '.dbo.omMstRefference b ON b.CompanyCode = a.CompanyCode 
			AND b.RefferenceType = ''' + @RefType + ''' 
			AND b.RefferenceCode = a.ColourCode 
	WHERE a.CompanyCode = ''' + @CompanyMD + '''  
		AND a.SalesModelCode = ''' + @SalesModelCode + ''' 
		AND a.ChassisCode = ''' + @ChassisCode + ''' 
		AND a.Status = 0 
		AND isnull (a.SONo,'''') = ''''  
		AND a.WarehouseCode = ''' + @WarehouseCode + '''
		AND exists 
		( 
			SELECT z.colourCode FROM OmTrSalesSOModelColour z 
			WHERE z.companyCode = a.CompanyCode 
			AND z.BranchCode = ''' + @BranchCode + '''
			AND z.SONo= ''' + @SONo + ''' 
			AND z.SalesModelCode = a.SalesModelCode 
			AND z.SalesModelYear = a.SalesModelYear 
			and z.ColourCode= a.ColourCode
		)'
		Exec (@QryTemp);
end
else
begin
	set @QryTemp =
	'SELECT 
		a.ChassisNo , a.EngineCode , a.EngineNo , 
		a.ColourCode , b.RefferenceDesc1 AS ColourName 
	FROM omTrSalesSOVin a 
		LEFT JOIN omMstRefference b ON b.CompanyCode = a.CompanyCode 
			AND b.RefferenceType = ''' + @RefType + ''' 
			AND b.RefferenceCode = a.ColourCode 
		INNER JOIN ' + @DBMD + '.dbo.omMstVehicle c ON 
			a.ChassisCode = c.ChassisCode 
			AND a.ChassisNo = c.ChassisNo 
	WHERE a.CompanyCode = ''' + @CompanyCode + ''' 
		AND a.BranchCode = ''' + @BranchCode + '''  
		AND a.SONo = ''' + @SONo + ''' 
		AND a.SalesModelCode = ''' + @SalesModelCode + '''
		AND a.SalesModelYear = ''' + @SalesModelYear + ''' 
		AND a.ChassisCode = ''' + @ChassisCode + ''' 
		AND c.WarehouseCode = ''' + @WarehouseCode + '''
		and c.Status in (0,3)
		AND not exists
		( 
			SELECT 1 
			FROM omTrSalesDODetail x
				inner join omTrSalesDO y on x.CompanyCode=y.CompanyCode and x.BranchCode=y.BranchCode
					and x.DONo=y.DONo
			WHERE x.CompanyCode = a.CompanyCode 
			AND x.BranchCode = a.BranchCode 
			AND x.SalesModelCode = a.SalesModelCode 
			AND x.ChassisCode = a.ChassisCode 
			and x.ChassisNo= a.ChassisNo
			and y.Status in (0,1)
		)'
		Exec (@QryTemp);
end
GO
-- * Last update by Yo, 8 Mei 2014 *
-- * No need to execute from web service, just add the database from, like   *

ALTER procedure [dbo].[uspfn_GnLockTaxNo]
	@CompanyCode  as varchar(20),
	@BranchCode as varchar(20),
	@Year as varchar(4),
	@IPNo varchar(50),
	@UserID varchar(20)
as

--declare @CompanyCode  varchar(15) 
--set @CompanyCode  = '6006400001'
--declare @BranchCode varchar(15) 
--set @BranchCode = '6006400100' 
--declare @Year varchar(4)	
--set @Year =	'2014'

--declare @IPNo varchar(50) 
--set @IPNo = 'ga'
--declare @UserID varchar(15) 
--set @UserID= 'S511007107'

declare @errmsg varchar(max)

declare @From as varchar(max)
set @From = isnull((select ParaValue from gnMstLookupDtl where CodeID = 'TXOL' and LookupValue = 'FROM_DB'), '')
if @From = ''
begin
	set @errmsg = 'Database Generate Tax On Line belum di-setup. Mohon cek para parameter FROM_DB di Master Lookup (TXOL).' 
    raiserror(@errmsg, 16 ,1 );
    return
end

declare @sql as varchar(max)


set @sql=
'use ' + @From +
'
declare @errmsg varchar(max)

begin try
set nocount on

	declare @IsUnion as varchar(1)
	set @IsUnion = ''0''

	if(select count(LookUpValue) from gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'') > 0
		set @IsUnion = ''1''

    ----------------------------------------------------------------------------
     --Add Validations
    ----------------------------------------------------------------------------
	declare @LastLock varchar(20) 
	set @LastLock = isnull((
				select isnull(LockedBy, '''') from  gnMstFPJSeqNo
				 where CompanyCode = '''+@CompanyCode+''' 
				   and (
						(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
						or (case when @IsUnion = 1 then BranchCode end) = 
							(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
					   ) 
				   and Year = '''+ @Year+'''  and IsLocked = 1
				   and isActive = 1
				   and SeqNo = (select MIN(SeqNo)
								  from  GnMstFPJSeqNo 
								 where CompanyCode = '''+@CompanyCode+'''  
								   and (
										(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
										or (case when @IsUnion = 1 then BranchCode end) = 
											(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
									   ) 
								   and Year = ''' + @Year + '''
								   and isActive = 1 
								   and EffectiveDate <= getdate()
								   and isnull(BeginTaxNo,0) <> 0 
								   and isnull(EndTaxNo,0) <> 0)
				), '''')


    if @LastLock <> ''''
    begin
		set @errmsg = ''Table pajak sedang di lock oleh user + '' + rtrim(@LastLock) + '''' + char(13) + '' tunggu beberapa saat lagi''
        raiserror(@errmsg, 16 ,1 );
        return
    end

	;with x as (
	select * from  gnMstFPJSeqNo 
	 where 1 = 1
	   and CompanyCode = '''+@CompanyCode+''' 
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + '''
	   and isActive = 1
	   and SeqNo = (
		select MIN(SeqNo)
					  from  GnMstFPJSeqNo 
					 where CompanyCode = '''+@CompanyCode+'''  
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year = ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0))
	update x set IsLocked = 1, LockedBy = '''+@UserID+''', LockedTime = getdate()

	insert into gnMstFPJSeqNoHist (CompanyCode, BranchCode, Year, FPJSeqNoLast, FPJSeqNoNew, LockedIP, LockedBy, LockedTime, ReleaseTime, SeqNo, BeginTaxNo, EndTaxNo, EffectiveDate, isActive, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
	select CompanyCode, BranchCode, Year, FPJSeqNo, null, '''+@IPNo+''' LockedIP, LockedBy, LockedTime, null ReleaseTime, SeqNo, BeginTaxNo, EndTaxNo, EffectiveDate, isActive, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
	  from  gnMstFPJSeqNo
	 where 1 = 1
	   and CompanyCode = '''+@CompanyCode+''' 
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + '''
	   and isActive = 1
	   and SeqNo = (select MIN(SeqNo)
					  from  GnMstFPJSeqNo 
					 where CompanyCode = '''+@CompanyCode+'''  
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year = ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0)
					   
	
	declare @LastFpjSeqNo as int
	declare @EndTaxNo as int
	
	set @LastFpjSeqNo = (select FpjSeqNo 
	  from  gnMstFPJSeqNo 
	 where CompanyCode = '''+@CompanyCode+'''  
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + '''
	   and isActive = 1
	   and SeqNo = (select MIN(SeqNo)
					  from  GnMstFPJSeqNo 
					 where CompanyCode = '''+@CompanyCode+'''  
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year = ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0))
	set @EndTaxNo = (select EndTaxNo 
	  from  gnMstFPJSeqNo 
	 where CompanyCode = '''+@CompanyCode+'''  
	   and (
			(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
			or (case when @IsUnion = 1 then BranchCode end) = 
				(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
		   ) 
	   and Year = ''' + @Year + '''
	   and isActive = 1
	   and SeqNo = (select MIN(SeqNo)
					  from  GnMstFPJSeqNo 
					 where CompanyCode = '''+@CompanyCode+'''  
					   and (
							(case when @IsUnion = 0 then BranchCode end)= '''+@BranchCode+'''
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from  gnMstLookUpDtl where CompanyCode= '''+@CompanyCode+'''  and LookUpValue='''+@BranchCode+''' and CodeID=''BRANCH'')
						   ) 
					   and Year = ''' + @Year + '''
					   and isActive = 1 
					   and EffectiveDate <= getdate()
					   and isnull(BeginTaxNo,0) <> 0 
					   and isnull(EndTaxNo,0) <> 0))


if @LastFpjSeqNo >= @EndTaxNo
begin
	set @errmsg = ''No Seri Faktur Pajak telah habis. Harap setting Nomor FPJ sequence''
	raiserror(@errmsg, 16 ,1 );
    return
end
else if @LastFpjSeqNo is null
begin
	set @errmsg = ''No Seri Faktur Pajak belum di-setting. Harap setting Nomor FPJ sequence''
	raiserror(@errmsg, 16 ,1 );
    return
end
else
begin
	select @LastFpjSeqNo
end

end try
begin catch
    set @errmsg = ''Error Message:'' + char(13) + error_message()
    raiserror (@errmsg,16,1);
end catch
'
exec(@sql)
GO
ALTER procedure [dbo].[uspfn_SvTrnInvoiceDraft]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@JobOrderNo  varchar(15)
as  

declare @errmsg   varchar(max)
declare @BillType varchar(10)

begin try
--set nocount on

-- get data from SvTrnService
select * into #srv from (
  select * from svTrnService with(nowait,nolock) 
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and EstimationNo = @JobOrderNo  
      and EstimationNo!= ''
  union all
  select * from svTrnService with(nowait,nolock) 
    where 1 = 1  
      and CompanyCode = @CompanyCode  
      and BranchCode  = @BranchCode  
      and BookingNo   = @JobOrderNo  
      and BookingNo  != ''
  union all
  select * from svTrnService with(nowait,nolock) 
    where 1 = 1  
      and CompanyCode = @CompanyCode  
      and BranchCode  = @BranchCode  
      and JobOrderNo  = @JobOrderNo  
      and JobOrderNo != ''
)#srv

select BillType into #t1 from (
select b.BillType from #srv a, svTrnSrvItem b with(nowait,nolock) 
 where 1 = 1
   and b.CompanyCode = a.CompanyCode
   and b.BranchCode  = a.BranchCode
   and b.ProductType = a.ProductType
   and b.ServiceNo   = a.ServiceNo
union
select b.BillType from #srv a, svTrnSrvTask b with(nowait,nolock) 
 where 1 = 1
   and b.CompanyCode = a.CompanyCode
   and b.BranchCode  = a.BranchCode
   and b.ProductType = a.ProductType
   and b.ServiceNo   = a.ServiceNo
)#

set @BillType = (select top 1 a.BillType from svMstBillingType a with(nowait,nolock), #t1 b where b.BillType = a.BillType order by a.LockingBy)
drop table #t1

-- get dicount from Service
declare @ProductType     varchar(20)  set @ProductType     = isnull((select top 1 ProductType     from #srv),0)
declare @ServiceNo       bigint       set @ServiceNo       = isnull((select top 1 ServiceNo       from #srv),0)

-- get ppn & pph dicount from Service
declare @PPnPct decimal
    set @PPnPct = isnull((select a.TaxPct
 						    from gnMstTax a with(nowait,nolock), gnMstCustomerProfitCenter b with(nowait,nolock) , #srv c
						   where c.CompanyCode  = b.CompanyCode
						     and c.BranchCode   = b.BranchCode
						     and c.CustomerCodeBill = b.CustomerCode
						     and b.CompanyCode  = a.CompanyCode
						     and b.TaxCode      = a.TaxCode
						     and b.ProfitCenterCode = '200'
						     and b.TaxCode      = 'PPN'
							),0)

declare @PPhPct decimal
    set @PPhPct = isnull((select a.TaxPct
							from gnMstTax a with(nowait,nolock), gnMstCustomerProfitCenter b with(nowait,nolock) , #srv c
						   where c.CompanyCode  = b.CompanyCode
						     and c.BranchCode   = b.BranchCode
						     and c.CustomerCodeBill = b.CustomerCode
						     and b.CompanyCode  = a.CompanyCode
						     and b.TaxCode      = a.TaxCode
						     and b.ProfitCenterCode = '200'
						     and b.TaxCode      = 'PPH'
							),0)

-- get data gross amount
declare @LaborGrossAmt decimal
    set @LaborGrossAmt = isnull((
						select ceiling(sum(a.OperationHour * a.OperationCost))
						  from svTrnSrvTask a with(nowait,nolock), #srv b
						 where a.CompanyCode = b.CompanyCode
						   and a.BranchCode  = b.BranchCode
						   and a.ProductType = b.ProductType
						   and a.ServiceNo   = b.ServiceNo
						   and a.BillType    = @BillType
						),0)

declare @PartsGrossAmt decimal
    set @PartsGrossAmt = isnull((
						--select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice))--Sebelum Perubahan
						select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice,0)))--Sesudah Perubahan
						  from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						 where g.CompanyCode = i.CompanyCode
					 	   and g.LookUpValue = i.TypeOfGoods
						   and g.CodeID      = 'GTGO'
						   and g.ParaValue   = 'SPAREPART'
						   and i.CompanyCode = @CompanyCode
						   and i.BranchCode  = @BranchCode
						   and i.ProductType = @ProductType
						   and i.ServiceNo   = @ServiceNo
						   and i.BillType    = @BillType
						),0)

declare @MaterialGrossAmt decimal
    set @MaterialGrossAmt = isnull((
						 --select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice))--Sebelum Perubahan
						 select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice,0)))--Sesudah Perubahan
						   from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						  where g.CompanyCode = i.CompanyCode
							and g.LookUpValue = i.TypeOfGoods
							and g.CodeID      = 'GTGO'
							and g.ParaValue  in ('OLI','MATERIAL')
							and i.CompanyCode = @CompanyCode
							and i.BranchCode  = @BranchCode
							and i.ProductType = @ProductType
							and i.ServiceNo   = @ServiceNo
						    and i.BillType    = @BillType
						  ),0)

-- calculate discount
declare @LaborDiscAmt decimal
    set @LaborDiscAmt = isnull((
						 select ceiling(sum(OperationHour * OperationCost * (DiscPct/100.0)))
						   from svTrnSrvTask with(nowait,nolock)
						  where CompanyCode = @CompanyCode
							and BranchCode = @BranchCode
							and ProductType = @ProductType
							and ServiceNo = @ServiceNo
						    and BillType    = @BillType
						  ),0)

declare @PartsDiscAmt decimal
    set @PartsDiscAmt = isnull((
						 --select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0)))--Sebelum Perubahan
						 select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0),0)))--Sesudah Perubahan
						   from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						 where g.CompanyCode = i.CompanyCode
					 	   and g.LookUpValue = i.TypeOfGoods
						   and g.CodeID      = 'GTGO'
						   and g.ParaValue   = 'SPAREPART'
						   and i.CompanyCode = @CompanyCode
						   and i.BranchCode  = @BranchCode
						   and i.ProductType = @ProductType
						   and i.ServiceNo   = @ServiceNo
						   and i.BillType    = @BillType
						  ),0)

declare @MaterialDiscAmt decimal
    set @MaterialDiscAmt = isnull((
						 --select ceiling(sum((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0)))--Sebelum Perubahan
						 select ceiling(sum(Round((i.SupplyQty - i.ReturnQty) * i.RetailPrice * (i.DiscPct/100.0),0)))--Sesudah Perubahan
						   from svTrnSrvItem i with(nowait,nolock), gnMstLookUpDtl g with(nowait,nolock)
						  where g.CompanyCode = i.CompanyCode
							and g.LookUpValue = i.TypeOfGoods
							and g.CodeID      = 'GTGO'
							and g.ParaValue  in ('OLI','MATERIAL')
							and i.CompanyCode = @CompanyCode
							and i.BranchCode  = @BranchCode
							and i.ProductType = @ProductType
							and i.ServiceNo   = @ServiceNo
						    and i.BillType    = @BillType
						  ),0)

-- calculate DPP (dasar pengenaan pajak)
--declare @LaborDppAmt     decimal	set @LaborDppAmt     = floor(@LaborGrossAmt    - @LaborDiscAmt)--Sebelum Perubahan
--declare @PartsDppAmt     decimal	set @PartsDppAmt     = floor(@PartsGrossAmt    - @PartsDiscAmt)--Sebelum Perubahan
--declare @MaterialDppAmt  decimal	set @MaterialDppAmt  = floor(@MaterialGrossAmt - @MaterialDiscAmt)--Sebelum Perubahan
--declare @TotalDppAmt     decimal	set @TotalDppAmt     = floor(@LaborDppAmt + @PartsDppAmt + @MaterialDppAmt)--Sebelum Perubahan
declare @LaborDppAmt     decimal	set @LaborDppAmt     = Round(@LaborGrossAmt    - @LaborDiscAmt,0)--Sesudah Perubahan
declare @PartsDppAmt     decimal	set @PartsDppAmt     = Round(@PartsGrossAmt    - @PartsDiscAmt,0)--Sesudah Perubahan
declare @MaterialDppAmt  decimal	set @MaterialDppAmt  = Round(@MaterialGrossAmt - @MaterialDiscAmt,0)--Sesudah Perubahan
declare @TotalDppAmt     decimal	set @TotalDppAmt     = Round(@LaborDppAmt + @PartsDppAmt + @MaterialDppAmt,0)--Sesudah Perubahan

-- calculate ppn & service amount
declare @TotalPpnAmt     decimal	set @TotalPpnAmt = floor(@TotalDppAmt * (@PpnPct / 100.0))
declare @TotalPphAmt     decimal	set @TotalPphAmt = floor(@TotalDppAmt * (@PphPct / 100.0))
declare @TotalSrvAmt     decimal	set @TotalSrvAmt = floor(@TotalDppAmt + @TotalPphAmt + @TotalPpnAmt)

    
;with t1 as (
select a.CompanyCode, a.BranchCode, a.ProductType, a.ServiceNo
     , a.EstimationNo, a.EstimationDate, a.BookingNo, a.BookingDate, a.JobOrderNo, a.JobOrderDate, a.ServiceType
     , a.PoliceRegNo, a.ServiceBookNo, a.BasicModel, a.TransmissionType
     , a.ChassisCode, a.ChassisNo, a.EngineCode, a.EngineNo, a.ColorCode
     , rtrim(rtrim(a.ColorCode)
     + case isnull(b.RefferenceDesc2,'') when '' then '' else ' - ' end
     + isnull(b.RefferenceDesc2,'')) as ColorCodeDesc
     , a.Odometer
     , a.CustomerCode, c.CustomerName, c.Address1 CustAddr1
     , c.Address2 CustAddr2, c.Address3 CustAddr3, c.Address4 CustAddr4
     , c.CityCode CityCode, d.LookupValueName CityName
     , a.InsurancePayFlag, a.InsuranceOwnRisk, a.InsuranceNo, a.InsuranceJobOrderNo
     , a.CustomerCodeBill, e.CustomerName CustomerNameBill
     , e.Address1 CustAddr1Bill, e.Address2 CustAddr2Bill
     , e.Address3 CustAddr3Bill, e.Address4 CustAddr4Bill
     , e.CityCode CityCodeBill, f.LookupValueName CityNameBill
     , e.PhoneNo, e.FaxNo, e.HPNo, a.LaborDiscPct, a.PartDiscPct
     , a.ServiceRequestDesc, a.ConfirmChangingPart, a.EstimateFinishDate
     , a.MaterialDiscPct, a.JobType, a.ForemanID, a.MechanicID
     , a.ServiceStatus
	 , @LaborDppAmt LaborDppAmt, @PartsDppAmt PartsDppAmt, @MaterialDppAmt MaterialDppAmt
	 , @TotalDppAmt TotalDppAmt, @TotalPpnAmt TotalPpnAmt
	 , @TotalSrvAmt TotalSrvAmt
	 , a.LaborDppAmt SrvLaborDppAmt, a.PartsDppAmt SrvPartsDppAmt, a.MaterialDppAmt SrvMaterialDppAmt
	 , a.TotalDppAmount SrvTotalDppAmt, a.TotalPpnAmount SrvTotalPpnAmt
	 , a.TotalSrvAmount SrvTotalSrvAmt
  from svTrnService a with (nowait,nolock)
  left join omMstRefference b with (nowait,nolock)
    on b.CompanyCode = a.CompanyCode
   and b.RefferenceType = 'COLO'
   and b.RefferenceCode = a.ColorCode
  left join gnMstCustomer c with (nowait,nolock)
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
  left join gnMstLookupDtl d with (nowait,nolock)
    on d.CompanyCode = a.CompanyCode
   and d.CodeID = 'CITY'
   and d.LookUpValue = c.CityCode
  left join gnMstCustomer e with (nowait,nolock)
    on e.CompanyCode = a.CompanyCode
   and e.CustomerCode = a.CustomerCodeBill
  left join gnMstLookupDtl f with (nowait,nolock)
    on f.CompanyCode = a.CompanyCode
   and f.CodeID = 'CITY'
   and f.LookUpValue = e.CityCode
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.BranchCode  = @BranchCode
   and a.ServiceNo   = (select ServiceNo from #srv)
) 
select a.CompanyCode, a.BranchCode, a.ProductType, JobOrderNo, a.ServiceNo, a.ServiceType
     , a.EstimationNo, a.EstimationDate, a.BookingNo, a.BookingDate, a.JobOrderNo, a.JobOrderDate
     , '' InvoiceNo
     -- Data Kendaraan
     , a.PoliceRegNo, a.ServiceBookNo, a.BasicModel, a.TransmissionType
     , a.ChassisCode, a.ChassisNo, a.EngineCode, a.EngineNo
     , a.ColorCode, a.ColorCodeDesc, a.Odometer
     -- Data Contract
     , b.IsContractStatus IsContract
     , b.ContractNo
	 , c.EndPeriod ContractEndPeriod
	 , c.IsActive ContractStatus
	 , case b.IsContractStatus 
		when 1 then (case c.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
		else ''
	   end ContractStatusDesc
     -- Data Contract
	 , b.IsClubStatus IsClub
	 , b.ClubCode
	 , b.ClubDateFinish ClubEndPeriod
	 , d.IsActive ClubStatus
	 , case b.IsClubStatus
		when 1 then (case d.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
		else ''
	   end ClubStatusDesc
     -- Data Customer
     , a.CustomerCode, a.CustomerName
     , a.CustAddr1, a.CustAddr2, a.CustAddr3, a.CustAddr4
     , a.CityCode, a.CityName
     -- Data Customer Bill
     , a.InsurancePayFlag, a.InsuranceOwnRisk, a.InsuranceNo, a.InsuranceJobOrderNo
     , a.CustomerCodeBill, a.CustomerNameBill
     , a.CustAddr1Bill, a.CustAddr2Bill, a.CustAddr3Bill, a.CustAddr4Bill
     , a.CityCodeBill, a.CityNameBill
     , a.PhoneNo, a.FaxNo, a.HPNo
     , a.LaborDiscPct, a.PartDiscPct, a.PartDiscPct PartsDiscPct, a.MaterialDiscPct
     --, IsPPnBill
     -- Data Pekerjaan
     , a.ServiceRequestDesc
     , a.JobType, e.Description JobTypeDesc
     , a.ConfirmChangingPart, a.EstimateFinishDate
     , a.ForemanID, g.EmployeeName ForemanName
	 , a.MechanicID, h.EmployeeName MechanicName
	 -- Data Total Biaya Perawatan
     , a.LaborDppAmt, a.PartsDppAmt, a.MaterialDppAmt, a.TotalDppAmt
     , a.TotalPpnAmt, a.TotalSrvAmt
     , a.SrvLaborDppAmt, a.SrvPartsDppAmt, a.SrvMaterialDppAmt, a.SrvTotalDppAmt
     , a.SrvTotalPpnAmt, a.SrvTotalSrvAmt

     , a.ServiceStatus
	 , f.Description ServiceStatusDesc
	 , isnull(i.TaxCode,'') TaxCode
	 , isnull(j.TaxPct,0) TaxPct
  from t1 a
  left join svMstCustomerVehicle b with (nowait,nolock)
    on b.CompanyCode = a.CompanyCode
   and b.ChassisCode = a.ChassisCode
   and b.ChassisNo = a.ChassisNo
  left join svMstContract c with (nowait,nolock)
    on c.CompanyCode = a.CompanyCode
   and c.ContractNo = b.ContractNo
   and b.IsContractStatus = 1
  left join svMstClub d with (nowait,nolock)
    on d.CompanyCode = a.CompanyCode
   and d.ClubCode = b.ClubCode
  left join SvMstRefferenceService e with (nowait,nolock)
    on e.CompanyCode = a.CompanyCode
   and e.ProductType = a.ProductType
   and e.RefferenceCode = a.JobType
   and e.RefferenceType = 'JOBSTYPE'
  left join SvMstRefferenceService f with (nowait,nolock)
    on f.CompanyCode = a.CompanyCode
   and f.ProductType = a.ProductType
   and f.RefferenceCode = a.ServiceStatus
   and f.RefferenceType = 'SERVSTAS'
  left join gnMstEmployee g with (nowait,nolock)
    on g.CompanyCode = a.CompanyCode
   and g.BranchCode = a.BranchCode
   and g.EmployeeID = a.ForemanID
  left join gnMstEmployee h with (nowait,nolock)
    on h.CompanyCode = a.CompanyCode
   and h.BranchCode = a.BranchCode
   and h.EmployeeID = a.MechanicID
  left join gnMstCustomerProfitCenter i with (nowait,nolock)
    on i.CompanyCode = a.CompanyCode
   and i.BranchCode = a.BranchCode
   and i.CustomerCode = a.CustomerCode
   and i.ProfitCenterCode = '200'
  left join gnMstTax j with (nowait,nolock)
    on j.CompanyCode = a.CompanyCode
   and j.TaxCode = i.TaxCode
end try
begin catch
    set @errmsg = 'Error Message:' + char(13) + error_message()
    raiserror (@errmsg,16,1);
	drop table #srv
end catch
GO
ALTER procedure [dbo].[uspfn_SvTrnJobOrderCancel]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@UserID varchar(15)
as      

declare @errmsg varchar(max)

declare @ServiceStatus varchar(10)
    set @ServiceStatus = isnull((
						 select ServiceStatus
						   from svTrnService
						  where 1 = 1
						    and CompanyCode = @CompanyCode
						    and BranchCode  = @BranchCode
						    and ProductType = @ProductType
						    and ServiceNo   = @ServiceNo
						 ),0)

if (@ServiceStatus >= '5') 
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'SPK ini sudah tidak dapat di cancel lagi karena status sudah berubah.'
				+ char(13) + 'Status SPK Terakhir = ' + @ServiceStatus + ', tolong di check lagi'
				+ char(13) + 'Terima kasih'
	raiserror (@errmsg,16,1);
	return
end

-- cek Supply - Return Part
if (select count(*) from svtrnsrvitem where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ProductType = @ProductType
		and ServiceNo = @ServiceNo and SupplyQty-ReturnQty > 0 ) > 0
begin
	set @errmsg = N'Dear ' + isnull((select FullName from sysuser where userid = @UserID), @UserID) + ',' + char(13)
				+ N'SPK ini tidak dapat di cancel. Disebabkan part harus di return semua !'
				+ char(13) + 'Lakukan return Sparepart dahulu, Terima kasih.'
	raiserror (@errmsg,16,1);
	return
end


begin try
	update svTrnService
	   set ServiceStatus  = '6'
          ,LastUpdateBy  = @UserID
          ,LastUpdateDate= getdate()
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and ProductType = @ProductType
	   and ServiceNo = @ServiceNo
	
	declare @CompanyMD as varchar(15)
	declare @BranchMD as varchar(15)

	set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

	if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
	begin	

	declare @Query varchar(max)
	declare @DbMD varchar(max)

	set @DbMD = dbo.GetDbMD(@CompanyCode, @BranchCode)

	set @Query = 'update '+ @DbMD +'..svSDMovement
	   set Status  = ''6''
          ,LastUpdateBy  = '''+ @UserID +'''
          ,LastUpdateDate= '''+convert(varchar,getdate())+'''
	 where 1 = 1
	   and CompanyCode = '''+ @CompanyCode +'''
	   and BranchCode = '''+ @BranchCode +'''	  
	   and DocNo = (select JobOrderNo from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo) +')'
	
	exec(@Query);

	end
end try
begin catch
	set @errmsg = N'tidak dapat konversi ke SPK pada ServiceNo = '
				+ convert(varchar,@ServiceNo)
				+ char(13) + error_message()
	raiserror (@errmsg,16,1);
end catch
GO
--declare @CompanyCode varchar(20)
--declare @BranchCode  varchar(20)
--declare @DocNo       varchar(20)
--declare @UserID      varchar(20)

--set @CompanyCode = '6074201' 
--set @BranchCode  = '607420100'
--set @DocNo       = 'RTP/14/000001'
--set @UserID      = 'sys-me'

ALTER procedure [dbo].[uspfn_OmPostingPurchaseReturn]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@DocNo       varchar(20),
	@UserID      varchar(20)
as 

declare @JournalGL table
(
	CodeTrans    varchar(50),
	DocNo        varchar(50),
	DocInfo      varchar(50),
	AccountNo    varchar(50),
	AmountDb     decimal,
	AmountCr     decimal
)

insert into @JournalGL
select '01 PSEMENTARA', @DocNo, a.SalesModelCode
	 , isnull((
		select acc.PReturnAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '')
	 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull (a.AfterDiscPPnBM, 0)))
	 + sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0)))
	 , 0
  from omTrPurchaseReturnDetailModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.ReturnNo    = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.ReturnNo, a.SalesModelCode
having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0

insert into @JournalGL
select '02 INVENTORY', @DocNo, a.SalesModelCode
	 , isnull((
		select acc.InventoryAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '')
	 , 0
	 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull (a.AfterDiscPPnBM, 0)))
  from omTrPurchaseReturnDetailModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.ReturnNo    = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.ReturnNo, a.SalesModelCode
having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull (a.AfterDiscPPnBM, 0))) > 0

insert into @JournalGL
select '03 PPN', @DocNo, c.SupplierCode
	 , isnull((
		select cls.TaxInAccNo
		  from omTrPurchaseHPP pur, gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
		 where 1 = 1
		   and sup.CompanyCode   = pur.CompanyCode
		   and sup.BranchCode    = pur.BranchCode
		   and sup.SupplierCode  = pur.SupplierCode
		   and sup.ProfitCenterCode = '100'
		   and cls.CompanyCode   = pur.CompanyCode
		   and cls.BranchCode    = pur.BranchCode
		   and cls.SupplierClass = sup.SupplierClass
		   and pur.CompanyCode   = a.CompanyCode
		   and pur.BranchCode    = a.BranchCode
		   and pur.HPPNo         = c.HPPNo
		), '')
	 , 0
	 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0)))
  from omTrPurchaseReturnDetailModel a, omTrPurchaseReturn b, omTrPurchaseHPP c
 where 1 = 1
   and c.CompanyCode = b.CompanyCode 
   and c.BranchCode  = b.BranchCode
   and c.HPPNo       = b.HPPNo
   and b.CompanyCode = a.CompanyCode 
   and b.BranchCode  = a.BranchCode
   and b.ReturnNo    = a.ReturnNo 
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.ReturnNo    = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.ReturnNo, c.HPPNo, c.SupplierCode
having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0))) > 0

if exists (select * from @JournalGL where isnull(AccountNo, '') = '')
begin
	raiserror('terdapat transaksi yang belum memiliki AccountNo',16 ,1 );
	return
end

if (select abs(sum(AmountDb) - sum(AmountCr)) from @JournalGL) > 0
begin
	raiserror('journal belum balance, mohon di check kembali',16 ,1 );
	return
end

--select * from apInterface where DocNo = @DocNo
--delete apInterface where DocNo = @DocNo
insert into apInterface ( CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode
, Reference, RefNo, ReferenceDate, NetAmt, PPHAmt, SupplierCode
, PPnAmt, PPnBM, AccountNo, TermsDate, TermsName, TotalAmt
, StatusFlag, CreateBy, CreateDate, ReceiveAmt
, FakturPajakNo, FakturPajakDate)
select distinct @CompanyCode CompanyCode
	 , @BranchCode BranchCode
	 , b.ReturnNo
	 , b.ReturnDate
	 , '100' as ProfitCenterCode 
	 , 'PURCHASERETURN' Refference
	 , b.RefferenceNo RefNo
	 , b.RefferenceDate RefDate
	 , isnull((
		select sum(AmountCr)
		  from @JournalGL
		 where substring(CodeTrans, 4, len(CodeTrans) - 3) = 'INVENTORY'
		), 0) as NetAmt
	 , 0 as PPHAmt
	 , c.SupplierCode as SupplierCode
	 , isnull((
		select sum(AmountCr)
		  from @JournalGL
		 where substring(CodeTrans, 4, len(CodeTrans) - 3) = 'PPN'
		), 0) as PPnAmt
	 , isnull((
		select sum(AfterDiscPPnBM)
		  from omTrPurchaseHPPDetailModel
		 where CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and HPPNo       = @DocNo 
		), 0) as PPnBM
	 , a.AccountNo
	 , null, ''
	 --, sum(a.AmountDb) as TotalAmt										-- Sebelum Perubahan
	 , (isnull((
		select sum(AmountCr)
		  from @JournalGL
		 where substring(CodeTrans, 4, len(CodeTrans) - 3) = 'INVENTORY'
		), 0) + isnull((
		select sum(AmountCr)
		  from @JournalGL
		 where substring(CodeTrans, 4, len(CodeTrans) - 3) = 'PPN'
		), 0)) as TotalAmt													-- Sesudah Perubahan
	 , '0' StatusFlag, @UserID CreatedBy, getdate() CreatedDate
	 , '0' ReceiveAmt
	 , isnull(b.RefferenceFakturPajakNo, '') as FPJNo
	 , case convert(varchar, isnull(c.RefferenceFakturPajakDate, getdate()), 112)
		when '19000101' then null
		else c.RefferenceFakturPajakDate
	   end as FPJDate
  from @JournalGL a, omTrPurchaseReturn b, omTrPurchaseHPP c
 where substring(CodeTrans, 4, len(CodeTrans) - 3) = 'PSEMENTARA'
   and c.CompanyCode = b.CompanyCode 
   and c.BranchCode  = b.BranchCode
   and c.HPPNo       = b.HPPNo
   and b.CompanyCode = @CompanyCode
   and b.BranchCode  = @BranchCode
   and b.ReturnNo    = @DocNo
 
--select * from glInterface where DocNo = @DocNo
--delete glInterface where DocNo = @DocNo
insert into glInterface
(CompanyCode,BranchCode,DocNo,SeqNo,DocDate,ProfitCenterCode
,AccDate,AccountNo,JournalCode,TypeJournal,ApplyTo,AmountDb,AmountCr
,TypeTrans,BatchNo,BatchDate,StatusFlag
,CreateBy,CreateDate,LastUpdateBy,LastUpdateDate)
select @CompanyCode CompanyCode, @BranchCode BranchCode
	 , b.ReturnNo DocNo, (row_number() over (order by CodeTrans)) SeqNo
	 , b.ReturnDate DocDate, '100' ProfitCenterCode
	 , b.ReturnDate AccDate, a.AccountNo
	 , 'UNIT' JournalCode, 'PURCHASERETURN' TypeJournal
	 , b.ReturnNo ApplyTo, a.AmountDb, a.AmountCr
	 , substring(CodeTrans, 4, len(CodeTrans) - 3) TypeTrans
	 , '' BatchNo, null BatchDate
	 , '0' StatusFlag, @UserID CreatedBy, getdate() CreatedDate
	 , @UserID LastUpdBy, getdate() LastUpdDate
  from @JournalGL a, omTrPurchaseReturn b
 where 1 = 1
   and b.CompanyCode = @CompanyCode
   and b.BranchCode  = @BranchCode
   and b.ReturnNo    = @DocNo

update omTrPurchaseReturn
   set Status = '5'
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and ReturnNo    = @DocNo
GO
ALTER procedure [dbo].[usprpt_PmRpInqByPeriod] 
	-- Add the parameters for the stored procedure here
(
	@CompanyCode	VARCHAR(15),
	@BranchCode		VARCHAR(15),
	@DateAwal		VARCHAR(10),
	@DateAkhir		VARCHAR(10),
	@Outlet			VARCHAR(15),
	@SPV			VARCHAR(15),
	@EMP			VARCHAR(15)
)
AS
BEGIN
	SELECT
		f.OutletName
		,convert(varchar(20),a.InquiryNumber) InquiryNumber
		,a.NamaProspek Pelanggan
		,a.AlamatProspek
		,a.TelpRumah
		,a.NamaPerusahaan
		,a.AlamatPerusahaan
		,a.Handphone
		,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE a.InquiryDate END InquiryDate
		,a.TipeKendaraan
		,a.Variant
		,a.Transmisi
		,b.RefferenceDesc1 Warna
		,a.PerolehanData
		,c.EmployeeName Employee
		,d.EmployeeName Supervisor
		,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE e.NextFollowUpDate END NextFollowUpDate
		,a.LastProgress
		,a.LastUpdateStatus
		,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE a.SPKDate END SPKDate
		,CASE(a.LostCaseDate) WHEN '19000101' THEN NULL ELSE a.LostCaseDate END LostCaseDate
	FROM
		PmKDP a
	LEFT JOIN OmMstRefference b
		ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
	LEFT JOIN GnMstEmployee c
		ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.EmployeeID = a.EmployeeID
	LEFT JOIN GnMstEmployee d
		ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode AND d.EmployeeID = a.SpvEmployeeID
	LEFT JOIN PmActivities e
		ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
		AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
		AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
	LEFT JOIN PmBranchOutlets f
		ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode AND f.OutletID = a.OutletID
	WHERE
		a.CompanyCode = @CompanyCode 
		AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>''OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
		AND CONVERT(VARCHAR, a.InquiryDate, 112) BETWEEN @DateAwal AND @DateAkhir
		AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
		AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
		AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	ORDER BY
		a.InquiryNumber 
END
GO
ALTER procedure [dbo].[uspfn_SvDrhSelect]  
    @CompanyCode varchar(20),  
    @BranchCode  varchar(20),  
    @DateParam   datetime,  
    @OptionType  varchar(20),  
    @Interval    int,  
    @Range       int,  
    @InclPdi     bit = 0

as  
  
if (@DateParam is null or convert(varchar, @DateParam, 112) <= 19000101)  
    set @DateParam = getdate()  
  
if @OptionType = 'REMINDER'  
begin  
    ----===============================================================================  
    ---- SELECT DAILY RETENTION SERVICE  
    ----===============================================================================  
 select distinct d.RetentionNo, a.CompanyCode, a.BranchCode, isnull(d.PeriodYear, -1) PeriodYear, isnull(d.PeriodMonth, -1) PeriodMonth  
   , a.CustomerCode, c.CustomerName, a.JobOrderNo, b.LastServiceDate  
   , case when (convert(varchar, a.JobOrderDate, 112) = '19000101') then null else a.JobOrderDate end JobOrderDate  
   , a.BasicModel, b.ChassisCode, b.ChassisNo, b.PoliceRegNo, a.JobType, a.ServiceRequestDesc Remark  
   , case when (convert(varchar, d.ReminderDate, 112) = '19000101') then null else d.ReminderDate end ReminderDate  
   , case when (convert(varchar, d.BookingDate, 112) = '19000101') then null else d.BookingDate end BookingDate  
   , case when (convert(varchar, d.FollowUpDate, 112) = '19000101') then null else d.FollowUpDate end FollowUpDate  
   , convert(varchar(20), case d.IsConfirmed when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsConfirmed  
   , convert(varchar(20), case d.IsBooked when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsBooked  
   , convert(varchar(20), case d.IsVisited when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsVisited  
   , convert(varchar(20), case d.IsSatisfied when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsSatisfied  
   , d.Reason
   , case isnull(d.IsVisited, 0) when 0 then '' else d.VisitInitial end VisitInitial
   , case isnull(d.IsVisited, 0) when 0 then '' else e.LookupValueName end VisitInitialDesc
   , isnull(c.Address1, '')+isnull(c.Address2, '')+isnull(c.Address3, '')+isnull(c.Address4, '') Address  
   , case isnull(b.ContactName, '') when '' then c.CustomerName else rtrim(b.ContactName) end ContactName  
   , case isnull(b.ContactAddress, '') when '' then (isnull(c.Address1, '')+isnull(c.Address2, '')+isnull(c.Address3, '')+isnull(c.Address4, '')) else b.ContactAddress end ContactAddress  
   , case isnull(b.ContactPhone, '') when '' then c.PhoneNo else b.ContactPhone end ContactPhone  
   , c.PhoneNo, d.StatisfyReasonGroup, d.StatisfyReasonCode    
   , convert(varchar(20), case d.IsReminder when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsReminder    
   , convert(varchar(20), case d.IsFollowUp when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsFollowUp
   , b.TransmissionType  
   , a.Odometer, c.HPNo as MobilePhone  
  from svTrnService a  
  left join SvMstCustomerVehicle b  
    on b.Companycode = a.CompanyCode   
   and b.ChassisCode = a.ChassisCode   
   and b.ChassisNo = a.ChassisNo  
  left join GnMstCustomer c  
    on c.CompanyCode = a.CompanyCode  
   and c.CustomerCode = a.CustomerCode  
  left join svTrnDailyRetention d  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode = a.BranchCode and d.PeriodYear = year(a.JobOrderDate)  
   and d.PeriodMonth = month(a.JobOrderDate) and d.CustomerCode = a.CustomerCode  
   and d.ChassisCode = a.ChassisCode and d.ChassisNo = a.ChassisNo  
  left join gnMstLookupDtl e on e.CompanyCode = a.CompanyCode  
   and e.CodeID = 'CIRS'  
   and e.LookupValue = d.VisitInitial  
 where 1 = 1  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and convert(varchar, @DateParam, 112)  
	 between convert(varchar, dateadd(day, -@Interval, dateadd(month, @Range, a.JobOrderDate)), 112)  
	     and convert(varchar, dateadd(day, @Interval, dateadd(month, @Range, a.JobOrderDate)), 112)  
   and a.JobType <> (case @InclPDI when 1 then '' else 'PDI' end)
   and (b.LastServiceDate is null or convert(varchar, a.JobOrderDate, 112) >= convert(varchar, b.LastServiceDate, 112))  
   and d.RetentionNo = isnull((
						select max(RetentionNo)
						  from svTrnDailyRetention
						 where CompanyCode = a.CompanyCode
						   and BranchCode = a.BranchCode
						   and PeriodYear = year(a.JobOrderDate)  
						   and PeriodMonth = month(a.JobOrderDate)
						   and CustomerCode = a.CustomerCode
					   ),0)  

   
end  
if @OptionType = '4FOLLOWUP'  
begin  
    ----===============================================================================  
    ---- SELECT DAILY RETENTION SERVICE  
    ----===============================================================================  
    select a.CompanyCode, a.BranchCode, isnull(d.PeriodYear, -1) PeriodYear, isnull(d.PeriodMonth, -1) PeriodMonth  
      , d.RetentionNo, a.CustomerCode, c.CustomerName, a.JobOrderNo, b.LastServiceDate  
      , case when (convert(varchar, a.JobOrderDate, 112) = '19000101') then null else a.JobOrderDate end JobOrderDate     
      , a.BasicModel, b.ChassisCode, b.ChassisNo, b.PoliceRegNo, a.JobType, a.ServiceRequestDesc Remark  
      , case when (convert(varchar, d.ReminderDate, 112) = '19000101') then null else d.ReminderDate end ReminderDate  
      , case when (convert(varchar, d.BookingDate, 112) = '19000101') then null else d.BookingDate end BookingDate  
      , case when (convert(varchar, d.FollowUpDate, 112) = '19000101') then null else d.FollowUpDate end FollowUpDate  
      , convert(varchar(20), case d.IsConfirmed when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsConfirmed  
      , convert(varchar(20), case d.IsBooked when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsBooked  
      , convert(varchar(20), case d.IsVisited when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsVisited  
      , convert(varchar(20), case d.IsSatisfied when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsSatisfied  
      , d.Reason
      , case isnull(d.IsVisited, 0) when 0 then '' else d.VisitInitial end VisitInitial
      , case isnull(d.IsVisited, 0) when 0 then '' else e.LookupValueName end VisitInitialDesc
      , isnull(c.Address1, '')+isnull(c.Address2, '')+isnull(c.Address3, '')+isnull(c.Address4, '') Address  
      , case isnull(b.ContactName, '') when '' then c.CustomerName else rtrim(b.ContactName) end ContactName  
      , case isnull(b.ContactAddress, '') when '' then (isnull(c.Address1, '')+isnull(c.Address2, '')+isnull(c.Address3, '')+isnull(c.Address4, '')) else b.ContactAddress end ContactAddress  
      , case isnull(b.ContactPhone, '') when '' then c.PhoneNo else b.ContactPhone end ContactPhone  
      , c.PhoneNo, d.StatisfyReasonGroup, d.StatisfyReasonCode
      , convert(varchar(20), case d.IsReminder when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsReminder
      , convert(varchar(20), case d.IsFollowUp when null then '' when 0 then 'Tidak' when 1 then 'YA' end) IsFollowUp
      , b.TransmissionType  
      , a.Odometer, c.HPNo as MobilePhone  
      from svTrnService a  
      left join SvMstCustomerVehicle b  
        on b.Companycode = a.CompanyCode   
       and b.ChassisCode = a.ChassisCode   
       and b.ChassisNo = a.ChassisNo  
      left join GnMstCustomer c  
        on c.CompanyCode = a.CompanyCode  
       and c.CustomerCode = a.CustomerCode  
      left join svTrnDailyRetention d  
        on d.CompanyCode = a.CompanyCode  
		and d.BranchCode = a.BranchCode and d.PeriodYear = year(a.JobOrderDate)  
		and d.PeriodMonth = month(a.JobOrderDate) 
		and d.CustomerCode = a.CustomerCode  
		and d.ChassisCode = a.ChassisCode 
		and d.ChassisNo = a.ChassisNo  
      left join gnMstLookupDtl e  
        on e.CompanyCode = a.CompanyCode  
       and e.CodeID = 'CIRS'  
       and e.LookupValue = d.VisitInitial  
     where 1 = 1  
	   and a.CompanyCode = @CompanyCode  
	   and a.BranchCode = @BranchCode  
	   and a.ServiceStatus not in ('0','1','2','3','4','5','6')  
	   --and convert(varchar, @DateParam, 112) = convert(varchar, dateadd(month, 1, a.JobOrderDate), 112)  
	   and convert(varchar, @DateParam, 112) = convert(varchar, dateadd(day, @Interval, a.JobOrderDate), 112)  
	   and a.JobType <> (case @InclPDI when 1 then '' else 'PDI' end)
	   and (b.LastServiceDate is null or convert(varchar, a.JobOrderDate, 112) >= convert(varchar, b.LastServiceDate, 112))  
	   and d.RetentionNo = ISNULL((
								select max(RetentionNo)
								  from svTrnDailyRetention
								 where CompanyCode = a.CompanyCode
								   and BranchCode = a.BranchCode
								   and PeriodYear = year(a.JobOrderDate)  
								   and PeriodMonth = month(a.JobOrderDate)
								   and CustomerCode = a.CustomerCode
								),0)  

end
GO
-- ==================================================================================
-- Description:	Inquiry ITS with Status
-- Query : uspfn_InquiryITSStatus '20130701','20130731','CABANG','6006406','','','',0
-- ==================================================================================

ALTER procedure [dbo].[uspfn_InquiryITSStatus]
	@StartDate			varchar(20),
	@EndDate			varchar(20),
	@Area				varchar(100),
	@CompanyCode		varchar(15),
	@BranchCode			varchar(15),
	@TipeKendaraan		varchar(100),
	@Variant			varchar(100),
	@Summary			int
AS
--
--Declare @StartDate		varchar(20)
--Declare @EndDate		varchar(20)
--Declare @Area			varchar(100)
--Declare @CompanyCode	varchar(15)
--declare @BranchCOde		varchar(15)
--declare @TipeKendaraan	varchar(100)
--declare @Variant		varchar(100)
--declare @Summary		bit
--set @StartDate = '20130701'
--set @EndDate = '20130731'
--set @Area = ''
--set @CompanyCode = ''
--set @BranchCode = ''
--set @TipeKendaraan = ''
--set @Variant = ''
--set @Summary = 0

declare @National varchar(10)
set @National = (select top 1 ISNULL(ParaValue,0) from gnMstLookUpDtl
                  where CodeID='QSLS' and LookUpValue='NATIONAL')

declare @Week int
set @Week = (DATEDIFF(week, DATEADD(MONTH, DATEDIFF(MONTH, 0, convert(datetime,@EndDate)), 0), convert(datetime,@EndDate)) + 1)

if(@National = 1)
begin	
	select * into #StatusWoArea from(
		Select c.GroupNo
		 , c.Area
		 , b.CompanyCode
		 , c.DealerAbbreviation
		 , b.BranchCode
		 , b.InquiryNumber
		 , b.SequenceNo
		 , b.LastProgress
		 , b.UpdateDate
		 , (DATEDIFF(week, DATEADD(MONTH, DATEDIFF(MONTH, 0, b.UpdateDate), 0), b.UpdateDate) +1) WeekInt
		 from pmStatusHistory b with (nolock, nowait)
		 left join gnMstDealerMapping c with (nolock, nowait) on b.CompanyCode = c.DealerCode
		 where (c.Area like Case when @Area <> '' 
								then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
										then 'JABODETABEK'
										else @Area end
								else '%%' end
			or c.Area like Case when @Area <> '' 
								then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
										then 'CABANG'
										else @Area end
								else '%%' end) 
		   and (case when b.CompanyCode='6015402' then '6015401' 
		             when b.CompanyCode='6051402' then '6051401'
		             else b.CompanyCode end)
		        like 
		        case when @CompanyCode = ''       then '%%' 
		             when @CompanyCode ='6015402' then '6015401'
		             when @CompanyCode ='6051402' then '6051401'
		             else @CompanyCode end
		   and b.BranchCode like case when @BranchCode = '' then '%%' else @BranchCode end
		   and b.LastProgress in (select LookUpValue from gnMstLookUpDtl where CodeID = 'PSTS')
		   and (convert(varchar,b.UpdateDate,112) between @StartDate and @EndDate
            or (convert(varchar,b.UpdateDate,112) < @StartDate 
           and (b.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress<>'P'
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP','SPK')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate))))
	)#StatusWoArea
	
	select * into #VehicleTemplateWoArea from(
		select distinct a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , isnull(b.TipeKendaraan,'') TipeKendaraan
			 , isnull(b.Variant,'') Variant
			 , c.SeqNo
			 , c.LookUpValue LastProgress
		  from gnMstLookUpDtl c with (nolock, nowait)
		  LEFT JOIN (select distinct GroupNo
						  , Area
						  , CompanyCode
						  , DealerAbbreviation
						  , BranchCode
						  , InquiryNumber
					   from #StatusWoArea) a on 1 = 1
		  INNER JOIN pmHstITS b with (nolock, nowait) on a.InquiryNumber = b.InquiryNumber 
			    and a.CompanyCode = b.CompanyCode
			    and a.BranchCode = b.BranchCode
		  where c.CodeID = 'PSTS'
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleTemplateWoArea
	
	select * into #VehicleWoArea from(
		select a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.InquiryNumber
			 , b.InquiryDate
			 , isnull(b.TipeKendaraan,'') TipeKendaraan
			 , isnull(b.Variant,'') Variant
			 , a.SequenceNo
			 , a.LastProgress
			 , a.UpdateDate
			 , a.WeekInt
		  from #StatusWoArea a
		  INNER join pmHstITS b with (nolock, nowait) on a.CompanyCode = b.CompanyCode
			    and a.BranchCode = b.BranchCode
			    and a.InquiryNumber = b.InquiryNumber
		  where TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleWoArea
	
	--select * 
	--  from #VehicleWoArea 
	-- where CompanyCode = @CompanyCode
	--   and convert(Varchar,UpdateDate,112) between @StartDate and @EndDate
	--   and convert(varchar,InquiryDate,112) < @StartDate 
	--   and lastProgress = 'DO'
	--	and weekInt = 1
  
	
	select * into #TestSummaryFirst from(
		select distinct '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.Variant
			 , (select SeqNo from GnMstLookUpDtl where CodeID = 'PSTS' and LookUpValue = a.LastProgress) seqNo
			 , a.LastProgress
			 , a.WeekInt
			 ,(select COUNT(*) 
				 from #VehicleWoArea 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and Variant = a.Variant
				  and LastProgress = a.LastProgress 
				  and convert(varchar,UpdateDate,112) < @StartDate 
				  and convert(varchar,InquiryDate,112) < @StartDate) SaldoAwal
			 ,(select COUNT(*) 
				 from #VehicleWoArea 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and Variant = a.Variant
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar,UpdateDate,112) between @StartDate and @EndDate
				  and convert(varchar,InquiryDate,112) < @StartDate) TotalOuts
			 ,(select COUNT(*) 
				 from #VehicleWoArea 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and Variant = a.Variant  
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar,UpdateDate,112) between @StartDate and @EndDate
				  and convert(varchar,InquiryDate,112) between @StartDate and @EndDate) Total
		from #VehicleWoArea a
	)#TestSummaryFirst
		
	select * into #TestPivotFirst from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , isnull([1],0) Week1, isnull([2],0) Week2, isnull([3],0) Week3,isnull([4],0) Week4, isnull([5],0) Week5, isnull([6],0) Week6
			 , 0 WeekOuts1, 0 WeekOuts2, 0 WeekOuts3, 0 WeekOuts4, 0 WeekOuts5, 0 WeekOuts6
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , Variant
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , Total
			 from #TestSummaryFirst
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(Total)
			for WeekInt in ([1],[2],[3],[4],[5],[6])
		  )pvt
	UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 ,(select COUNT(*) 
			 from #VehicleWoArea 
			where GroupNo = a.GroupNo
		      and Area = a.Area
		      and CompanyCode = a.CompanyCode 
			  and BranchCode = a.BranchCode 
			  and TipeKendaraan = a.TipeKendaraan
			  and Variant = a.Variant
			  and SeqNo = a.SeqNo
			  and LastProgress = a.LastProgress 
			  and convert(varchar,UpdateDate,112) < @StartDate 
			  and convert(varchar,InquiryDate,112) < @StartDate) SaldoAwal
			 , 0, 0, 0, 0, 0, 0
			 , 0, 0, 0, 0, 0, 0
		  from #VehicleTemplateWoArea a
		  where not exists (select 1 
							  from #TestSummaryFirst
							 where GroupNo = a.GroupNo
							   and Area = a.Area
							   and CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and Variant = a.Variant
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotFirst
	
	select * into #TestPivotOutsFirst from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , 0 Week1, 0 Week2, 0 Week3, 0 Week4, 0 Week5, 0 Week6
			 , isnull([1],0) WeekOuts1 , isnull([2],0) WeekOuts2 , isnull([3],0) WeekOuts3 ,isnull([4],0) WeekOuts4 , isnull([5],0) WeekOuts5 , isnull([6],0) WeekOuts6 
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , Variant
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , TotalOuts
			 from #TestSummaryFirst
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(TotalOuts)
			for WeekInt in ([1],[2],[3],[4],[5],[6])
		  )pvt
	UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 , 0
			 , 0, 0, 0, 0, 0, 0
			 , 0, 0, 0, 0, 0, 0
		  from #VehicleTemplateWoArea a
		  where not exists (select 1 
							  from #TestSummaryFirst
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and Variant = a.Variant
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotOutsFirst

	select * into #TestFinalSummaryFirst from(
		select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.Variant
			 , a.SeqNo
			 , a.LastProgress
			 , case when a.LastProgress IN ('DO','DELIVERY','LOST') then 0 else a.SaldoAwal end SaldoAwal
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts1 end WeekOuts1
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts2 end WeekOuts2
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts3 end WeekOuts3
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts4 end WeekOuts4
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts5 end WeekOuts5
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts6 end WeekOuts6
			 , a.Week1
			 , a.Week2
			 , a.Week3
			 , a.Week4
			 , a.Week5
			 , a.Week6
		  from #TestPivotFirst a
		  left join #TestPivotOutsFirst b on a.GroupNo = b.GroupNo
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
			    and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.Variant = b.Variant
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	)#TestFinalSummaryFirst
	
	--select * 
	--  from #TestFinalSummaryFirst 
	-- where CompanyCode = @CompanyCode
	--   and lastProgress = 'DO'
		
	select * into #TestFinalSummarySecond from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryFirst a
	  group by a.GroupNo,a.Area, a.CompanyCode, a.DealerAbbreviation,a.BranchCode,a.TipeKendaraan,a.SeqNo,a.LastProgress
	)#TestFinalSummarySecond
	
	select * into #TestFinalSummaryThird from(
		select '1' OrderNo3
			 , '2' OrderNo
			 , '1' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummarySecond a
	  group by a.GroupNo,a.Area, a.CompanyCode, a.DealerAbbreviation,a.BranchCode,a.SeqNo,a.LastProgress
	)#TestFinalSummaryThird
	
	select * into #TestFinalSummaryFourth from(
		select '1' OrderNo3
			 , '2' OrderNo
			 , '1' OrderNo1
			 , '1' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , 'TOTAL' BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryThird a
	  group by a.GroupNo,a.Area, a.CompanyCode, a.DealerAbbreviation,a.SeqNo,a.LastProgress
	)#TestFinalSummaryFourth
	
	select * into #TestFinalSummaryFourthExt from(
		select '1' OrderNo3
			 , '2' OrderNo
			 , '2' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , 'TOTAL' DealerAbbreviation
			 , '' CompanyCode
			 , '' BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryFourth a
	  group by a.GroupNo,a.Area,a.SeqNo,a.LastProgress
	)#TestFinalSummaryFourthExt
	
	select * into #TestFinalSummaryFitfh from(
		select '2' OrderNo3
			 , '2' OrderNo
			 , '1' OrderNo1
			 , '1' OrderNo2
			 , '999999' GroupNo
			 , 'TOTAL' Area
			 , '' CompanyCode
			 , 'TOTAL' DealerAbbreviation
			 , '' BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryFourthExt a
	  group by a.SeqNo,a.LastProgress
	)#TestFinalSummaryFitfh
	
	select * into #SummaryWoBranch from(
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(a.WeekOuts6) WeekOuts6
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week6) Week6
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryFourth a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal)
				 , SUM(a.WeekOuts1)
				 , SUM(a.WeekOuts2)
				 , SUM(a.WeekOuts3)
				 , SUM(a.WeekOuts4)
				 , SUM(a.WeekOuts5)
				 , SUM(a.WeekOuts6)
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1)
				 , SUM(a.Week2)
				 , SUM(a.Week3)
				 , SUM(a.Week4)
				 , SUM(a.Week5)
				 , SUM(a.Week6)
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryFourthExt a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal)
				 , SUM(a.WeekOuts1)
				 , SUM(a.WeekOuts2)
				 , SUM(a.WeekOuts3)
				 , SUM(a.WeekOuts4)
				 , SUM(a.WeekOuts5)
				 , SUM(a.WeekOuts6)
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1)
				 , SUM(a.Week2)
				 , SUM(a.Week3)
				 , SUM(a.Week4)
				 , SUM(a.Week5)
				 , SUM(a.Week6)
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryFitfh a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
	)#SummaryWoBranch
	
	select * into #SummaryWBranch from(
		select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation 
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(a.WeekOuts6) WeekOuts6
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week6) Week6
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryThird a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , a.TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , a.TotalWeek
				 , a.Total
			 from #SummaryWoBranch a
	)#SummaryWBranch
	
	select * into #SummaryDetail from(
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , (a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			 from #TestFinalSummaryFirst a
		UNION
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal)
				 , SUM(a.WeekOuts1)
				 , SUM(a.WeekOuts2)
				 , SUM(a.WeekOuts3)
				 , SUM(a.WeekOuts4)
				 , SUM(a.WeekOuts5)
				 , SUM(a.WeekOuts6)
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1)
				 , SUM(a.Week2)
				 , SUM(a.Week3)
				 , SUM(a.Week4)
				 , SUM(a.Week5)
				 , SUM(a.Week6)
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			 from #TestFinalSummarySecond a
			 group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , a.TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , a.TotalWeek
				 , a.Total
			 from #SummaryWBranch a
	)#SummaryDetail
	
if(@Summary = 0)
begin
	--select a.OrderNo3
	--	 , a.OrderNo
	--	 , a.OrderNo1
	--	 , a.OrderNo2
	--	 , a.Area
	--	 , a.CompanyCode
	--	 , case when b.DealerAbbreviation is null then a.CompanyCode else b.DealerAbbreviation end DealerAbbreviation
	--	 , a.BranchCode
	--	 , isnull(c.OutletAbbreviation,'') OutletAbbreviation
	--	 , a.SeqNo
	--	 , a.LastProgress
	--	 , a.SaldoAwal
	--	 , a.WeekOuts1
	--	 , a.WeekOuts2
	--	 , a.WeekOuts3
	--	 , a.WeekOuts4
	--	 , a.WeekOuts5
	--	 , a.WeekOuts6
		 --, a.TotalWeekOuts
		 --, a.Week1
		 --, a.Week2
		 --, a.Week3
		 --, a.Week4
		 --, a.Week5
		 --, a.Week6
		 --, a.TotalWeek
		 --, a.Total
	--from #SummaryWOBranch a
	--left join gnMstDealerMapping b on a.CompanyCode = b.DealerCode
	--left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	--order by a.OrderNo3 Asc, b.DealerAbbreviation asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.OrderNo Asc, a.SeqNo Asc
	
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.SeqNo
		 , a.LastProgress
		 , a.SaldoAwal
		 , a.WeekOuts1
		 , a.WeekOuts2
		 , a.WeekOuts3
		 , a.WeekOuts4
		 , a.WeekOuts5
		 , a.WeekOuts6
		 , a.TotalWeekOuts
		 , a.Week1
		 , a.Week2
		 , a.Week3
		 , a.Week4
		 , a.Week5
		 , a.Week6
		 , a.TotalWeek
		 , a.Total
	from #SummaryWBranch a
	left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.OrderNo1 asc,a.BranchCode asc, a.OrderNo Asc, a.SeqNo Asc
-- Query : uspfn_InquiryITSStatus '20130301','20130330','','','','','',0

	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.Variant
		 , a.SeqNo
		 , a.LastProgress
		 , a.SaldoAwal
		 , a.WeekOuts1
		 , a.WeekOuts2
		 , a.WeekOuts3
		 , a.WeekOuts4
		 , a.WeekOuts5
		 , a.WeekOuts6
		 , a.TotalWeekOuts
		 , a.Week1
		 , a.Week2
		 , a.Week3
		 , a.Week4
		 , a.Week5
		 , a.Week6
		 , a.TotalWeek
		 , a.Total
	from #SummaryDetail a
	left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	where OrderNo1 <> 2
	order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.TipeKendaraan Asc, a.OrderNo Asc, a.Variant Asc, a.SeqNo Asc
-- Query : uspfn_InquiryITSStatus '20130301','20130330','','','','','',0
End
else
begin
	--select a.OrderNo3
	--	 , a.OrderNo
	--	 , a.OrderNo1
	--	 , a.OrderNo2
	--	 , b.Area
	--	 , a.CompanyCode
	--	 , isnull(b.DealerAbbreviation,'') CompanyName
	--	 , a.BranchCode
	--	 , isnull(c.OutletAbbreviation,'') BranchName
	--	 , a.TipeKendaraan
	--	 , a.Variant
	--	 , a.SeqNo
	--	 , a.LastProgress
	--	 , SaldoAwal
	--	 , a.WeekOuts1 + a.Week1 Week1
	--	 , a.WeekOuts2 + a.Week2 Week2
	--	 , a.WeekOuts3 + a.Week3 Week3
	--	 , a.WeekOuts4 + a.Week4 Week4
	--	 , a.WeekOuts5 + a.Week5 Week5
	--	 , (a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
	--from #SummaryWOBranch a
	--left join gnMstDealerMapping b on a.CompanyCode = b.DealerCode
	--left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	--order by a.OrderNo3 Asc, b.DealerAbbreviation asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.OrderNo Asc, a.SeqNo Asc
	
	--select a.OrderNo3
	--	 , a.OrderNo
	--	 , a.OrderNo1
	--	 , a.OrderNo2
	--	 , b.Area
	--	 , a.CompanyCode
	--	 , isnull(b.DealerAbbreviation,'') CompanyName
	--	 , a.BranchCode
	--	 , isnull(c.OutletAbbreviation,'') BranchName
	--	 , a.TipeKendaraan
	--	 , a.Variant
	--	 , a.SeqNo
	--	 , a.LastProgress
	--	 , SaldoAwal
	--	 , a.WeekOuts1 + a.Week1 Week1
	--	 , a.WeekOuts2 + a.Week2 Week2
	--	 , a.WeekOuts3 + a.Week3 Week3
	--	 , a.WeekOuts4 + a.Week4 Week4
	--	 , a.WeekOuts5 + a.Week5 Week5
	--	 , (a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
	--from #SummaryWBranch a
	--left join gnMstDealerMapping b on a.CompanyCode = b.DealerCode
	--left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	--order by a.OrderNo3 Asc, b.DealerAbbreviation asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.OrderNo Asc, a.SeqNo Asc
 	
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.Area
		 , a.CompanyCode
		 , isnull(a.DealerAbbreviation,'') CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.Variant
		 , a.SeqNo
		 , a.LastProgress
		 , SaldoAwal
		 , a.WeekOuts1 + a.Week1 Week1
		 , a.WeekOuts2 + a.Week2 Week2
		 , a.WeekOuts3 + a.Week3 Week3
		 , a.WeekOuts4 + a.Week4 Week4
		 , a.WeekOuts5 + a.Week5 Week5
		 , a.WeekOuts6 + a.Week6 Week6
		 , a.Total TotalWeek
	from #SummaryDetail a
	left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.TipeKendaraan Asc, a.OrderNo Asc, a.Variant Asc, a.SeqNo Asc
	--order by a.OrderNo3 Asc,a.GroupNo asc, b.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.TipeKendaraan Asc, a.OrderNo Asc, a.Variant Asc, a.SeqNo Asc
end
	drop table #SummaryWBranch
	drop table #SummaryWoBranch
	drop table #SummaryDetail
	drop table #TestFinalSummaryFirst
	drop table #TestFinalSummarySecond
	drop table #TestFinalSummaryThird
	drop table #TestFinalSummaryFourth
	drop table #TestFinalSummaryFourthExt
	drop table #TestFinalSummaryFitfh
	drop table #TestPivotOutsFirst
	drop table #TestPivotFirst
	drop table #TestSummaryFirst
	drop table #VehicleWoArea
	drop table #VehicleTemplateWoArea
	drop table #StatusWoArea
end
else
begin
	select * into #StatusWoAreaDlr from(
		Select c.GroupNo
		 , c.Area
		 , b.CompanyCode
		 , c.DealerAbbreviation
		 , b.BranchCode
		 , b.InquiryNumber
		 , b.SequenceNo
		 , b.LastProgress
		 , b.UpdateDate
		 , (DATEDIFF(week, DATEADD(MONTH, DATEDIFF(MONTH, 0, b.UpdateDate), 0), b.UpdateDate) +1) WeekInt
		 from pmStatusHistory b with (nolock, nowait)
		 left join gnMstDealerMapping c with (nolock, nowait) on b.CompanyCode = c.DealerCode
		 where (c.Area like Case when @Area <> '' 
								then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
										then 'JABODETABEK'
										else @Area end
								else '%%' end
			or c.Area like Case when @Area <> '' 
								then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
										then 'CABANG'
										else @Area end
								else '%%' end) 
		   and b.CompanyCode like case when @CompanyCode = '' then '%%' else @CompanyCode end
		   and b.BranchCode like case when @BranchCode = '' then '%%' else @BranchCode end
		   and b.LastProgress in (select LookUpValue from gnMstLookUpDtl where CodeID = 'PSTS')
		   and (convert(varchar,b.UpdateDate,112) between @StartDate and @EndDate
            or (convert(varchar,b.UpdateDate,112) < @StartDate 
           and (b.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress<>'P'
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP','SPK')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate))))
	)#StatusWoAreaDlr

	select * into #VehicleTemplateWoAreaDlr from(
		select distinct a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , isnull(b.TipeKendaraan,'') TipeKendaraan
			 , isnull(b.Variant,'') Variant
			 , c.SeqNo
			 , c.LookUpValue LastProgress
		  from gnMstLookUpDtl c with (nolock, nowait)
		  LEFT JOIN (select distinct GroupNo
						  , Area
						  , CompanyCode
						  , DealerAbbreviation
						  , BranchCode
						  , InquiryNumber
					   from #StatusWoAreaDlr) a on 1 = 1
		  INNER JOIN pmKDP b with (nolock, nowait) on a.InquiryNumber = b.InquiryNumber 
			    and a.CompanyCode = b.CompanyCode
			    and a.BranchCode = b.BranchCode
		  where c.CodeID = 'PSTS'
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleTemplateWoAreaDlr

	select * into #VehicleWoAreaDlr from(
		select a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.InquiryNumber
			 , b.InquiryDate
			 , isnull(b.TipeKendaraan,'') TipeKendaraan
			 , isnull(b.Variant,'') Variant
			 , a.SequenceNo
			 , a.LastProgress
			 , a.UpdateDate
			 , a.WeekInt
		  from #StatusWoAreaDlr a
		  INNER join pmKDP b with (nolock, nowait) on a.CompanyCode = b.CompanyCode
			    and a.BranchCode = b.BranchCode
			    and a.InquiryNumber = b.InquiryNumber
		  where TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleWoAreaDlr
	
	select * into #TestSummaryFirstDlr from(
		select distinct '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.Variant
			 , (select SeqNo from GnMstLookUpDtl where CodeID = 'PSTS' and LookUpValue = a.LastProgress) seqNo
			 , a.LastProgress
			 , a.WeekInt
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlr
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and Variant = a.Variant 
				  and LastProgress = a.LastProgress 
				  and convert(varchar,UpdateDate,112) < @StartDate 
				  and convert(varchar,InquiryDate,112) < @StartDate) SaldoAwal
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlr 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and Variant = a.Variant 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar,UpdateDate,112) between @StartDate and @EndDate
				  and convert(varchar,InquiryDate,112) < @StartDate) TotalOuts
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlr 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and Variant = a.Variant 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar,UpdateDate,112) between @StartDate and @EndDate
				  and convert(varchar,InquiryDate,112) between @StartDate and @EndDate) Total
		from #VehicleWoAreaDlr a
	)#TestSummaryFirstDlr

	select * into #TestPivotFirstDlr from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , isnull([1],0) Week1, isnull([2],0) Week2, isnull([3],0) Week3,isnull([4],0) Week4, isnull([5],0) Week5, isnull([6],0) Week6
			 , 0 WeekOuts1, 0 WeekOuts2, 0 WeekOuts3, 0 WeekOuts4, 0 WeekOuts5, 0 WeekOuts6
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , Variant
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , Total
			 from #TestSummaryFirstDlr
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(Total)
			for WeekInt in ([1],[2],[3],[4],[5],[6])
		  )pvt
	UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 ,(select COUNT(*) 
			 from #VehicleWoAreaDlr 
			where GroupNo = a.GroupNo
		      and Area = a.Area
		      and CompanyCode = a.CompanyCode 
			  and BranchCode = a.BranchCode 
			  and TipeKendaraan = a.TipeKendaraan
			  and Variant = a.Variant
			  and SeqNo = a.SeqNo
			  and LastProgress = a.LastProgress 
			  and convert(varchar,UpdateDate,112) < @StartDate 
			  and convert(varchar,InquiryDate,112) < @StartDate) SaldoAwal
			 , 0, 0, 0, 0, 0, 0
			 , 0, 0, 0, 0, 0, 0
		  from #VehicleTemplateWoAreaDlr a
		  where not exists (select 1 
							  from #TestSummaryFirstDlr
							 where GroupNo = a.GroupNo
							   and Area = a.Area
							   and CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and Variant = a.Variant
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotFirstDlr
--
--select 'pivot',  * from #TestPivotFirstDlr
--where LastProgress = 'SPK'

	select * into #TestPivotOutsFirstDlr from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , 0 Week1, 0 Week2, 0 Week3, 0 Week4, 0 Week5, 0 Week6
			 , isnull([1],0) WeekOuts1 , isnull([2],0) WeekOuts2 , isnull([3],0) WeekOuts3 ,isnull([4],0) WeekOuts4 , isnull([5],0) WeekOuts5 , isnull([6],0) WeekOuts6 
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , Variant
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , TotalOuts
			 from #TestSummaryFirstDlr
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(TotalOuts)
			for WeekInt in ([1],[2],[3],[4],[5],[6])
		  )pvt
	UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , Variant
			 , SeqNo
			 , LastProgress
			 , 0
			 , 0, 0, 0, 0, 0, 0
			 , 0, 0, 0, 0, 0, 0
		  from #VehicleTemplateWoAreaDlr a
		  where not exists (select 1 
							  from #TestSummaryFirstDlr
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and Variant = a.Variant
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotOutsFirstDlr
--
--select 'outs',  * from #TestPivotOutsFirstDlr
--where LastProgress = 'DELIVERY'

	select * into #TestFinalSummaryFirstDlr from(
		select DISTINCT '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.Variant
			 , a.SeqNo
			 , a.LastProgress
			 , case when a.LastProgress IN ('DO','DELIVERY','LOST') then 0 else a.SaldoAwal end SaldoAwal
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts1 end WeekOuts1
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts2 end WeekOuts2
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts3 end WeekOuts3
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts4 end WeekOuts4
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts5 end WeekOuts5
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts6 end WeekOuts6
			 , a.Week1
			 , a.Week2
			 , a.Week3
			 , a.Week4
			 , a.Week5
			 , a.Week6
		  from #TestPivotFirstDlr a
		  left join #TestPivotOutsFirstDlr b on a.OrderNo3 = b.OrderNo3
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
			    and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.Variant = b.Variant
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	)#TestFinalSummaryFirstDlr
	
	select * into #TestFinalSummarySecondDlr from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) Saldoawal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryFirstDlr a
	  group by a.GroupNo,a.Area, a.CompanyCode, a.DealerAbbreviation,a.BranchCode,a.TipeKendaraan,a.SeqNo,a.LastProgress
	)#TestFinalSummarySecondDlr
	
	select * into #TestFinalSummaryThirdDlr from(
		select '1' OrderNo3
			 , '2' OrderNo
			 , '1' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummarySecondDlr a
	  group by a.GroupNo,a.Area, a.CompanyCode, a.DealerAbbreviation,a.BranchCode,a.SeqNo,a.LastProgress
	)#TestFinalSummaryThirdDlr

	select * into #TestFinalSummaryFourthDlr from(
		select '1' OrderNo3
			 , '2' OrderNo
			 , '1' OrderNo1
			 , '1' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , 'TOTAL' BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryThirdDlr a
	  group by a.GroupNo,a.Area, a.CompanyCode, a.DealerAbbreviation,a.SeqNo,a.LastProgress
	)#TestFinalSummaryFourthDlr
	
	select * into #TestFinalSummaryFourthExtDlr from(
		select '1' OrderNo3
			 , '2' OrderNo
			 , '2' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , 'TOTAL' DealerAbbreviation
			 , '' CompanyCode
			 , '' BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryFourthDlr a
	  group by a.GroupNo,a.Area,a.SeqNo,a.LastProgress
	)#TestFinalSummaryFourthExtDlr
	
	select * into #TestFinalSummaryFitfhDlr from(
		select '2' OrderNo3
			 , '2' OrderNo
			 , '1' OrderNo1
			 , '1' OrderNo2
			 , '999999' GroupNo
			 , 'TOTAL' Area
			 , '' CompanyCode
			 , 'TOTAL' DealerAbbreviation
			 , '' BranchCode
			 , '' TipeKendaraan
			 , '' Variant
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryFourthExtDlr a
	  group by a.SeqNo,a.LastProgress
	)#TestFinalSummaryFitfhDlr
	

	select * into #SummaryWoBranchDlr from(
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(a.WeekOuts6) WeekOuts6
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week6) Week6
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryFourthDlr a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal)
				 , SUM(a.WeekOuts1)
				 , SUM(a.WeekOuts2)
				 , SUM(a.WeekOuts3)
				 , SUM(a.WeekOuts4)
				 , SUM(a.WeekOuts5)
				 , SUM(a.WeekOuts6)
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1)
				 , SUM(a.Week2)
				 , SUM(a.Week3)
				 , SUM(a.Week4)
				 , SUM(a.Week5)
				 , SUM(a.Week6)
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryFourthExtDlr a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal)
				 , SUM(a.WeekOuts1)
				 , SUM(a.WeekOuts2)
				 , SUM(a.WeekOuts3)
				 , SUM(a.WeekOuts4)
				 , SUM(a.WeekOuts5)
				 , SUM(a.WeekOuts6)
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1)
				 , SUM(a.Week2)
				 , SUM(a.Week3)
				 , SUM(a.Week4)
				 , SUM(a.Week5)
				 , SUM(a.Week6)
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryFitfhDlr a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
	)#SummaryWoBranchDlr
	
	select * into #SummaryWBranchDlr from(
		select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation 
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(a.WeekOuts6) WeekOuts6
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week6) Week6
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryThirdDlr a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , a.TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , a.TotalWeek
				 , a.Total
			 from #SummaryWoBranchDlr a
	)#SummaryWBranchDlr
	
	select * into #SummaryDetailDlr from(
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , (a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			 from #TestFinalSummaryFirstDlr a
		UNION
			select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal)
				 , SUM(a.WeekOuts1)
				 , SUM(a.WeekOuts2)
				 , SUM(a.WeekOuts3)
				 , SUM(a.WeekOuts4)
				 , SUM(a.WeekOuts5)
				 , SUM(a.WeekOuts6)
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1)
				 , SUM(a.Week2)
				 , SUM(a.Week3)
				 , SUM(a.Week4)
				 , SUM(a.Week5)
				 , SUM(a.Week6)
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			 from #TestFinalSummarySecondDlr a
			 group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
		UNION
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.Variant
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , a.TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , a.TotalWeek
				 , a.Total
			 from #SummaryWBranchDlr a
	)#SummaryDetailDlr
	
if(@Summary = 0)
begin
	--select a.OrderNo3
	--	 , a.OrderNo
	--	 , a.OrderNo1
	--	 , a.OrderNo2
	--	 , a.Area
	--	 , a.CompanyCode
	--	 , case when b.DealerAbbreviation is null then a.CompanyCode else b.DealerAbbreviation end DealerAbbreviation
	--	 , a.BranchCode
	--	 , isnull(c.OutletAbbreviation,'') OutletAbbreviation
	--	 , a.SeqNo
	--	 , a.LastProgress
	--	 , a.SaldoAwal
	--	 , a.WeekOuts1
	--	 , a.WeekOuts2
	--	 , a.WeekOuts3
	--	 , a.WeekOuts4
	--	 , a.WeekOuts5
	--	 , a.WeekOuts6
		 --, a.TotalWeekOuts
		 --, a.Week1
		 --, a.Week2
		 --, a.Week3
		 --, a.Week4
		 --, a.Week5
		 --, a.Week6
		 --, a.TotalWeek
		 --, a.Total
	--from #SummaryWOBranch a
	--left join gnMstDealerMapping b on a.CompanyCode = b.DealerCode
	--left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	--order by a.OrderNo3 Asc, b.DealerAbbreviation asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.OrderNo Asc, a.SeqNo Asc
	
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.SeqNo
		 , a.LastProgress
		 , a.SaldoAwal
		 , a.WeekOuts1
		 , a.WeekOuts2
		 , a.WeekOuts3
		 , a.WeekOuts4
		 , a.WeekOuts5
		 , a.WeekOuts6
		 , a.TotalWeekOuts
		 , a.Week1
		 , a.Week2
		 , a.Week3
		 , a.Week4
		 , a.Week5
		 , a.Week6
		 , a.TotalWeek
		 , a.Total
	from #SummaryWBranchDlr a
	left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.OrderNo1 asc,a.BranchCode asc, a.OrderNo Asc, a.SeqNo Asc
-- Query : uspfn_InquiryITSStatus '20130301','20130330','','','','','',0

	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.Variant
		 , a.SeqNo
		 , a.LastProgress
		 , a.SaldoAwal
		 , a.WeekOuts1
		 , a.WeekOuts2
		 , a.WeekOuts3
		 , a.WeekOuts4
		 , a.WeekOuts5
		 , a.WeekOuts6
		 , a.TotalWeekOuts
		 , a.Week1
		 , a.Week2
		 , a.Week3
		 , a.Week4
		 , a.Week5
		 , a.Week6
		 , a.TotalWeek
		 , a.Total
	from #SummaryDetailDlr a
	left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	where OrderNo1 <> 2
	order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.TipeKendaraan Asc, a.OrderNo Asc, a.Variant Asc, a.SeqNo Asc
-- Query : uspfn_InquiryITSStatus '20130301','20130330','','','','','',0
End
else
begin
	--select a.OrderNo3
	--	 , a.OrderNo
	--	 , a.OrderNo1
	--	 , a.OrderNo2
	--	 , b.Area
	--	 , a.CompanyCode
	--	 , isnull(b.DealerAbbreviation,'') CompanyName
	--	 , a.BranchCode
	--	 , isnull(c.OutletAbbreviation,'') BranchName
	--	 , a.TipeKendaraan
	--	 , a.Variant
	--	 , a.SeqNo
	--	 , a.LastProgress
	--	 , SaldoAwal
	--	 , a.WeekOuts1 + a.Week1 Week1
	--	 , a.WeekOuts2 + a.Week2 Week2
	--	 , a.WeekOuts3 + a.Week3 Week3
	--	 , a.WeekOuts4 + a.Week4 Week4
	--	 , a.WeekOuts5 + a.Week5 Week5
	--	 , (a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
	--from #SummaryWOBranch a
	--left join gnMstDealerMapping b on a.CompanyCode = b.DealerCode
	--left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	--order by a.OrderNo3 Asc, b.DealerAbbreviation asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.OrderNo Asc, a.SeqNo Asc
	
	--select a.OrderNo3
	--	 , a.OrderNo
	--	 , a.OrderNo1
	--	 , a.OrderNo2
	--	 , b.Area
	--	 , a.CompanyCode
	--	 , isnull(b.DealerAbbreviation,'') CompanyName
	--	 , a.BranchCode
	--	 , isnull(c.OutletAbbreviation,'') BranchName
	--	 , a.TipeKendaraan
	--	 , a.Variant
	--	 , a.SeqNo
	--	 , a.LastProgress
	--	 , SaldoAwal
	--	 , a.WeekOuts1 + a.Week1 Week1
	--	 , a.WeekOuts2 + a.Week2 Week2
	--	 , a.WeekOuts3 + a.Week3 Week3
	--	 , a.WeekOuts4 + a.Week4 Week4
	--	 , a.WeekOuts5 + a.Week5 Week5
	--	 , (a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
	--from #SummaryWBranch a
	--left join gnMstDealerMapping b on a.CompanyCode = b.DealerCode
	--left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	--order by a.OrderNo3 Asc, b.DealerAbbreviation asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.OrderNo Asc, a.SeqNo Asc
 	
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.Area
		 , a.CompanyCode
		 , isnull(a.DealerAbbreviation,'') CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.Variant
		 , a.SeqNo
		 , a.LastProgress
		 , SaldoAwal
		 , a.WeekOuts1 + a.Week1 Week1
		 , a.WeekOuts2 + a.Week2 Week2
		 , a.WeekOuts3 + a.Week3 Week3
		 , a.WeekOuts4 + a.Week4 Week4
		 , a.WeekOuts5 + a.Week5 Week5
		 , a.WeekOuts6 + a.Week6 Week6
		 , a.Total TotalWeek
	from #SummaryDetailDlr a
	left join gnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode and a.BranchCode = c.OutletCode
	order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.TipeKendaraan Asc, a.OrderNo Asc, a.Variant Asc, a.SeqNo Asc
	--order by a.OrderNo3 Asc,a.GroupNo asc, b.DealerAbbreviation asc,a.Area asc,a.OrderNo2 asc,a.BranchCode asc,a.OrderNo1 asc, a.TipeKendaraan Asc, a.OrderNo Asc, a.Variant Asc, a.SeqNo Asc
end
	drop table #SummaryWBranchDlr
	drop table #SummaryWoBranchDlr
	drop table #SummaryDetailDlr
	drop table #TestFinalSummaryFirstDlr
	drop table #TestFinalSummarySecondDlr
	drop table #TestFinalSummaryThirdDlr
	drop table #TestFinalSummaryFourthDlr
	drop table #TestFinalSummaryFourthExtDlr
	drop table #TestFinalSummaryFitfhDlr
	drop table #TestPivotOutsFirstDlr
	drop table #TestPivotFirstDlr
	drop table #TestSummaryFirstDlr
	drop table #VehicleWoAreaDlr
	drop table #VehicleTemplateWoAreaDlr
	drop table #StatusWoAreaDlr
end
GO
-- uspfn_OmInquiryChassisReq '6007402','600740200'
ALTER procedure [dbo].[uspfn_OmInquiryChassisReq]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@Penjual as varchar(15)
	,@CBU as bit
as

declare @isDirect as bit
set @isDirect=0
if exists (
	select 1
	from gnMstCoProfile
	where CompanyCode=@CompanyCode and BranchCode=@Penjual
)
set @isDirect=1

--DECLARE @CompanyCode as varchar(15)
--	,@Penjual as varchar(15)
--
--set @CompanyCode='6117201'
--set @Penjual='6117201'

select * into #t1
from (
	select distinct isnull(b.BranchCode, e.BranchCode) BranchCode, isnull(c.CustomerCode, e.CustomerCode) CustomerCode
			,z.ChassisCode,z.BPKNo,z.SONo,e.DONo,convert(varchar,z.chassisNo) chassisNo, z.salesModelCode
			, z.salesModelYear, isnull(z.SuzukiDONo,'') RefferenceDONo,
			isnull(z.SuzukiDODate,'19000101') RefferenceDODate, isnull(z.SuzukiSJNo,'') RefferenceSJNo, 
			isnull(z.SuzukiSJDate,'19000101') RefferenceSJDate, 
			a.EndUserName, a.EndUserAddress1, a.EndUserAddress2, a.EndUserAddress3,
			c.CustomerName, c.Address1, c.Address2, c.Address3,
			c.CityCode,(SELECT LookUpValueName FROM gnMstLookUpDtl where CodeID = 'CITY' AND ParaValue = c.CityCode) as CityName, 
			c.PhoneNo, c.HPNo, c.birthDate ,b.Salesman, (SELECT EmployeeName FROM gnMstEmployee where EmployeeID = b.Salesman) SalesmanName, b.SalesType
	from omMstVehicle z 
		left join omTrSalesSOVin a 
			on a.CompanyCode = z.CompanyCode and z.SONo=a.SONo
				AND a.ChassisCode = z.ChassisCode
				AND a.ChassisNo = z.ChassisNo
		left join omTrSalesSO b
			on a.companyCode = b.companyCode 
				and a.BranchCode= b.BranchCode
				and a.SONo = b.SONo
				and b.Status = '2' 
		left join gnMstCustomer c 
			on b.CompanyCode = c.CompanyCode
				and b.CustomerCode = c.CustomerCode 
		left join OmTrSalesDODetail d 
			on d.CompanyCode = z.CompanyCode and z.DONo=d.DONo
				and d.ChassisCode = z.ChassisCode		
				and d.ChassisNo = z.ChassisNo	
		left join OmTrSalesDO e 
			on e.CompanyCode = d.CompanyCode
				and e.DONo = d.DONo
				and e.BranchCode=d.BranchCode
				and e.Status = '2'
		inner join omMstModel f
			on f.CompanyCode = z.CompanyCode
				and f.SalesModelCode = z.SalesModelCode
	where 
		z.CompanyCode = @CompanyCode
		and z.ReqOutNo = ''
		and z.status in ('3','4','5','6')
		and not exists (select 1 from omTrSalesReqdetail where ChassisCode=z.ChassisCode and ChassisNo=z.ChassisNo)
		and ((case when z.ChassisNo is not null then z.SONo end) is not null 
			or (case when z.ChassisNo is not null then z.DONo end) is not null)
		and f.IsCBU = @CBU
) #t1

select * from #t1 
where ((case when @isDirect = 1 then BranchCode end)= @Penjual
		or (case when @isDirect <> 1 then CustomerCode end)= @Penjual)
drop table #t1
GO
-- =============================================
-- Author:		<yo>
-- Create date: <1 Mei 2013>
-- Description:	<Laporan VOR>
-- Update Date: <2 Mei 2014>
-- =============================================
ALTER PROCEDURE [dbo].[usprpt_SvRpTrn021]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate datetime,
@EndDate datetime

AS
BEGIN

--usprpt_SvRpTrn021 '6006406', '6006401', '20140502', '20140502'

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as datetime
--declare @EndDate as datetime

--set @CompanyCode = '6006408'
--set @BranchCode = '6006431'
--set @StartDate = '20130430'
--set @EndDate = '20130530'

select distinct
	getdate() ReportDate,
	svTrnService.JobOrderNo SeqNo,
	svTrnSrvVOR.ServiceNo, 
	CompanyName DealerName,
	PoliceRegNo,	
	reffModel.Description BasicModel,
	gnMstCustomer.CustomerName Customer,
	sa.EmployeeName SA,
	foreman.EmployeeName FM,
	(select isnull(max(svTrnSrvTask.SharingTask), 0) from svTrnSrvTask
		where CompanyCode = @CompanyCode
		and BranchCode = @BranchCode
		and ServiceNo = svTrnSrvVOR.ServiceNo) SharingTask,		
	mechanic.EmployeeID,
	mechanic.EmployeeName Mech,	
	svTrnSrvVOR.CreatedDate,
	reffJob.Description Job,
	svTrnService.ServiceRequestDesc,
	(select count(PartNo) from svTrnSrvVORDtl 
		where CompanyCode = @CompanyCode
		and BranchCode = @BranchCode
		and ServiceNo = svTrnSrvVOR.ServiceNo) countPartDtl,
	svTrnSrvVORDtl.POSNo,
	svTrnSrvVORDtl.PartNo,
	spMstItemInfo.PartName,
	svTrnSrvVOR.JobDelayCode,	
	reff.Description JobDelayDesc,
	svTrnSrvVOR.JobReasonDesc,
	svTrnSrvVOR.ClosedDate,
	convert(varchar,(select count(gnMstAbsence.EmployeeID) from gnMstAbsence
	 where gnMstAbsence.CompanyCode = @CompanyCode
		and gnMstAbsence.BranchCode = @BranchCode
		and convert(varchar,gnMstAbsence.WorkingDate,112) = convert(varchar,getdate(),112)
		and gnMstAbsence.WorkingHours > 0)) + ' orang' CountMechAbs,
	convert(varchar,(select count(gnMstAbsence.EmployeeID) from gnMstAbsence
	 where gnMstAbsence.CompanyCode = @CompanyCode
		and gnMstAbsence.BranchCode = @BranchCode
		and convert(varchar,gnMstAbsence.WorkingDate,112) = convert(varchar,getdate(),112)
		and gnMstAbsence.WorkingHours = 0)) + ' orang' CountMechAlpha,
	convert(varchar,(select count(gnMstAbsence.EmployeeID) from gnMstAbsence
	 where gnMstAbsence.CompanyCode = @CompanyCode
		and gnMstAbsence.BranchCode = @BranchCode
		and convert(varchar,gnMstAbsence.WorkingDate,112) = convert(varchar,getdate(),112)
		and gnMstAbsence.WorkingHours > 7
		)) + ' orang' CountMechOvrTime,
	convert(varchar,(select count(distinct gnMstAbsence.EmployeeID) from gnMstAbsence
	 inner join svTrnSrvMechanic
	 on svTrnSrvMechanic.CompanyCode = gnMstAbsence.CompanyCode
		and svTrnSrvMechanic.BranchCode = gnMstAbsence.BranchCode
		and svTrnSrvMechanic.MechanicID = gnMstAbsence.EmployeeID
		and svTrnSrvMechanic.ServiceNo = svTrnSrvVOR.ServiceNo
	 where gnMstAbsence.CompanyCode = @CompanyCode
		and gnMstAbsence.BranchCode = @BranchCode
		and convert(varchar,gnMstAbsence.WorkingDate,112) between convert(varchar, @StartDate,112) and convert(varchar,@EndDate,112)
		and gnMstAbsence.WorkingHours > 0
		)) + ' orang' CountMechDelay,
	convert(varchar, (select count(distinct gnMstAbsence.EmployeeID) from gnMstAbsence
	 inner join svTrnSrvMechanic
	 on svTrnSrvMechanic.CompanyCode = gnMstAbsence.CompanyCode
		and svTrnSrvMechanic.BranchCode = gnMstAbsence.BranchCode
		and svTrnSrvMechanic.MechanicID = gnMstAbsence.EmployeeID
		and svTrnSrvMechanic.ServiceNo = svTrnSrvVOR.ServiceNo
	 where gnMstAbsence.CompanyCode = @CompanyCode
		and gnMstAbsence.BranchCode = @BranchCode
		and convert(varchar,gnMstAbsence.WorkingDate,112) between convert(varchar, @StartDate,112) and convert(varchar,@EndDate,112)
		and gnMstAbsence.WorkingHours > 0
		)) + ' orang' CountMechNextDelay
from svTrnSrvVOR
left join gnMstCoProfile 
	on gnMstCoProfile.CompanyCode = svTrnSrvVOR.CompanyCode
	and gnMstCoProfile.BranchCode = svTrnSrvVOR.BranchCode
left join svTrnService 
	on svTrnService.CompanyCode = svTrnSrvVOR.CompanyCode
	and svTrnService.BranchCode = svTrnSrvVOR.BranchCode
	and svTrnService.ServiceNo = svTrnSrvVOR.ServiceNo
left join gnMstCustomer 
    on gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    and gnMstCustomer.CustomerCode = svTrnService.CustomerCode
left join gnMstEmployee sa
    on sa.CompanyCode = svTrnService.CompanyCode
    and sa.BranchCode = svTrnService.BranchCode
    and sa.EmployeeID = svTrnService.ForemanID
left join gnMstEmployee foreman
    on foreman.CompanyCode = svTrnService.CompanyCode
    and foreman.BranchCode = svTrnService.BranchCode
    and foreman.EmployeeID = svTrnService.MechanicID  
left join svTrnSrvTask
	on svTrnSrvTask.CompanyCode = svTrnService.CompanyCode
	and svTrnSrvTask.BranchCode = svTrnService.BranchCode
	and svTrnSrvTask.ProductType = svTrnService.ProductType
	and svTrnSrvTask.ServiceNo = svTrnService.ServiceNo	
left join svTrnSrvMechanic
	on svTrnSrvMechanic.CompanyCode = svTrnSrvTask.CompanyCode
	and svTrnSrvMechanic.BranchCode = svTrnSrvTask.BranchCode
	and svTrnSrvMechanic.ProductType = svTrnSrvTask.ProductType
	and svTrnSrvMechanic.ServiceNo = svTrnSrvTask.ServiceNo
left join gnMstEmployee mechanic
    on mechanic.CompanyCode = svTrnSrvMechanic.CompanyCode
    and mechanic.BranchCode = svTrnSrvMechanic.BranchCode
    and mechanic.EmployeeID = svTrnSrvMechanic.MechanicID
left join SvMstRefferenceService reffJob
    on reffJob.CompanyCode = svTrnService.CompanyCode
    and reffJob.ProductType = svTrnService.ProductType
    and reffJob.RefferenceCode = svTrnService.JobType
    and reffJob.RefferenceType = 'JOBSTYPE'
left join svTrnSrvVORDtl
	on svTrnSrvVORDtl.CompanyCode = svTrnSrvVOR.CompanyCode
	and svTrnSrvVORDtl.BranchCode = svTrnSrvVOR.BranchCode
	and svTrnSrvVORDtl.ServiceNo = svTrnSrvVOR.ServiceNo
left join spMstItemInfo
	on spMstItemInfo.CompanyCode = svTrnSrvVORDtl.CompanyCode
	and spMstItemInfo.PartNo = svTrnSrvVORDtl.PartNo
left join svMstRefferenceService reff
	on reff.CompanyCode = svTrnSrvVOR.CompanyCode
	and reff.RefferenceType = 'DELAY_CODE'
	and reff.RefferenceCode = svTrnSrvVOR.JobDelayCode
left join svMstRefferenceService reffModel
    on reffModel.CompanyCode = svTrnService.CompanyCode
    and reffModel.ProductType = svTrnService.ProductType
    and reffModel.RefferenceCode = svTrnService.BasicModel
    and reffModel.RefferenceType = 'BASMODEL'
where svTrnSrvVOR.CompanyCode = @CompanyCode
	and svTrnSrvVOR.BranchCode = @BranchCode
	and convert(varchar,svTrnSrvVOR.CreatedDate,112) between convert(varchar, @StartDate,112) and convert(varchar,@EndDate,112)
	and svTrnSrvVOR.IsActive = 1
order by svTrnSrvVOR.ServiceNo

END
GO
ALTER procedure [dbo].[uspfn_GnGetDataSITSP]
as
begin

declare @CompanyCode varchar(max)
set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationDtl)

declare @BranchCode varchar(max)
set @BranchCode = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0)

declare @DealerCode varchar(max)
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileSales where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode)

declare @DealerName varchar(max)
set @DealerName = isnull((select top 1 CompanyName from gnmstorganizationhdr where companycode=@companyCode),
					(select isnull(BranchName,' ') from gnMstOrganizationDtl where companycode=@companycode and branchcode=@dealercode))

declare @LastDate datetime
declare @NoInquiry int

declare @T_Result as Table
(
	SeqNo	int,
	inqno   int,
	recid   int,
	Line	varchar(max)	
)

select * into #t_kdp from (
	select top 3500 companycode, branchcode, inquirynumber, lastupdatedate
	from pmkdp 
	where LastUpdateDate > isnull(
			(select top 1 LastSendDate from gnMstSendSchedule where DataType = 'SITSP' order by LastSendDate desc)
			, '19000101')
)#t_kdp

set @LastDate = (select top 1 LastUpdateDate from #t_kdp order by LastUpdateDate desc)
select @LastDate as LastDate 

set @NoInquiry = (select COUNT(InquiryNumber) from #t_kdp)

--		
SELECT * into #t_pmsh from (
	SELECT CompanyCode, BranchCode, InquiryNumber, LastProgress, 
		(SELECT MAX(UpdateDate) as UpdateDate FROM pmStatusHistory b
		WHERE b.InquiryNumber = a.InquiryNumber AND b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.LastProgress = a.LastProgress) As UpdateDate
	FROM pmStatusHistory a
	WHERE 
		a.LastProgress IN (SELECT LookUpValue FROM gnMstLookUpDtl where CodeID = 'PSTS')
		and CompanyCode = @CompanyCode and exists (select 1 from #t_kdp where companycode=a.companycode
		and branchcode=a.branchcode and inquirynumber=a.inquirynumber)
	GROUP BY CompanyCode, BranchCode, InquiryNumber, LastProgress	
)#t_pmsh

insert into @T_Result
select 
	1,
	0,
	0,
	'HSITSP'
	+ left(@DealerCode + replicate(' ',10), 10)
	+ left('1000000' + replicate(' ',10),10)
	+ left(@Dealername + replicate(' ',50),50)
	+ RIGHT(replicate('0',4) + convert(varchar,@NoInquiry),4) 
	+ replicate(' ',276)

insert into @T_Result
-- RECORD I --
SELECT 
	2,
	a.inquirynumber,
	1,
	'1'																				-- ID
	+ left(isnull(a.OutletID,' ')+replicate(' ',15), 15)								-- Outlet ID
	+ left(isnull(f.OutletName,' ')+replicate(' ',30), 30)							-- Outlet Name
	+ case when coalesce(convert(varchar,a.CreationDate,112),' ') 
		> coalesce(convert(varchar,a.LastUpdateDate,112),' ') 
		then 'Y' else 'N' end														-- Resend ?
	+ right(replicate('0',9)+convert(varchar,a.inquirynumber), 9)					-- InquiryNumber
	+ case when a.InquiryDate is null then '19000101' 
		else convert(varchar,a.InquiryDate,112) end									-- InquiryDate
	+ case isnull(a.TipeKendaraan,' ') when ' ' then left('NA'+replicate(' ',20),20) 
		else left(a.TipeKendaraan+replicate(' ',20),20) end							-- Tipe Kendaraan
	+ case isnull(a.Variant,' ') when ' ' then left('NA'+replicate(' ',50),50) 		
		else left(a.Variant+replicate(' ',50),50) end								-- Varian
	+ case isnull(a.Transmisi,' ') when ' ' then left ('NA'+replicate(' ',2),2)
		else left (a.Transmisi+replicate(' ',2),2) end								-- Transmisi
	+ case isnull(a.ColourCode,' ') when ' ' then left ('NA'+replicate(' ',3),3)		
		else left (a.ColourCode+replicate(' ',3),3) end								-- Colour ID
	+ left(isnull(a.PerolehanData,' ')+replicate(' ',15), 15)						-- Perolehan Data
	+ right(replicate('0',3)+convert(varchar, a.QuantityInquiry), 3)				-- Jumlah Rencana Pembelian
	+ left(isnull(c.EmployeeName,' ')+replicate(' ',25), 25)							-- Wiraniaga
	+ case c.TitleCode when '16' then 'C' else 'W' end								-- Wiraniaga Flag
	+ left(isnull(s.LookUpValueName,' ')+replicate(' ',14), 14)						-- Grade
	+ left(isnull(j.EmployeeName,' ')+replicate(' ',25), 25)							-- Sales Koordinator
	+ left(isnull(m.EmployeeName,' ')+replicate(' ',25), 25)							-- SalesHead
	+ left(isnull(bm3.employeename,' ')+replicate(' ',25), 25)						-- BranchManager
	+ left(isnull(a.LastProgress,' ')+replicate(' ',15), 15)							-- Last Progress
	+ case when e.NextFollowUpDate is null then '19000101' 
		else convert(varchar,e.NextFollowUpDate,112) end							-- Next Follow Up Date
	+ case when a.SPKDate is null then '19000101' 
		else convert(varchar,a.SPKDate,112) end										-- SPK Date
	+ case(isnull(upper(t.LookUpValueName),'')) when 'YA' then 'Y'
		when 'YES' then 'Y'
		when 'TIDAK' then 'N'
		when 'NO' then 'N'
		else 'N' end																-- Test Drive ?
	+ left(isnull(n.LookUpValueName,' ')+replicate(' ',15), 15)						-- Cara Bayar / Pembiayaan
	+ left(isnull(o.LookUpValueName,' ')+replicate(' ',25), 25)						-- Leasing
	+ left(isnull(p.LookUpValueName,' ')+replicate(' ',10), 10)						-- Down Payment
	+ left(isnull(q.LookUpValueName,' ')+replicate(' ',2), 2)						-- Tenor (Tahun)
FROM
	PmKDP a
LEFT JOIN GnMstEmployee c ON c.CompanyCode = a.CompanyCode 
	AND c.BranchCode = a.BranchCode 
	AND c.EmployeeID = a.EmployeeID
LEFT JOIN PmActivities e ON e.CompanyCode = a.CompanyCode 
	AND e.BranchCode = a.BranchCode 
	AND e.InquiryNumber=a.InquiryNumber
	AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
		AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
LEFT JOIN PmBranchOutlets f ON f.CompanyCode = a.CompanyCode 
	AND f.BranchCode = a.BranchCode 
	AND f.OutletID = a.OutletID
LEFT JOIN PmSalesmanGrade g on a.CompanyCode = g.CompanyCode
	and a.BranchCode = g.BranchCode
	and a.EmployeeId = g.EmployeeId
LEFT JOIN PmMstTeamMembers h on h.CompanyCode = a.CompanyCode
	and h.BranchCode = a.BranchCode
	and h.EmployeeID = c.EmployeeID
LEFT JOIN PmMstTeamMembers i on i.CompanyCode = a.CompanyCode
	and i.BranchCode = a.BranchCode
	and i.TeamID = h.TeamID
	and i.IsSupervisor = '1'
LEFT JOIN GnMstEmployee j ON j.CompanyCode = a.CompanyCode 
	AND j.BranchCode = a.BranchCode 
	AND j.EmployeeID = i.EmployeeID
LEFT JOIN PmMstTeamMembers k on k.CompanyCode = a.CompanyCode
	and k.BranchCode = a.BranchCode
	and k.EmployeeID = j.EmployeeID
	and k.IsSupervisor = '0'
LEFT JOIN PmMstTeamMembers l on l.CompanyCode = a.CompanyCode
	and l.BranchCode = a.BranchCode
	and l.TeamID = k.TeamID
	and l.IsSupervisor = '1'
LEFT JOIN GnMstEmployee m ON m.CompanyCode = a.CompanyCode 
	AND m.BranchCode = a.BranchCode 
	AND m.EmployeeID = l.EmployeeID
LEFT JOIN PmMstTeamMembers bm on bm.companycode = a.companycode
	AND bm.branchcode = a.branchcode
	AND bm.employeeid = l.employeeid
	AND bm.issupervisor = '0'
LEFT JOIN PmMstTeamMembers bm2 on bm2.companycode = a.companycode
	AND bm2.branchcode = a.branchcode
	AND bm2.teamid = bm.teamid
	AND bm2.issupervisor = '1'
LEFT JOIN GnMstEmployee bm3 ON bm3.CompanyCode = a.CompanyCode 
	AND bm3.BranchCode = a.BranchCode 
	AND bm3.EmployeeID = bm2.EmployeeID
LEFT JOIN GnMstLookUpDtl n on n.CompanyCode=a.CompanyCode
	AND n.CodeId='PMBY'
	AND n.LookUpValue = a.CaraPembayaran
LEFT JOIN GnMstLookUpDtl o on o.CompanyCode=a.CompanyCode
	AND o.CodeId='LSNG'
	AND o.LookUpValue = a.Leasing
LEFT JOIN GnMstLookUpDtl p on p.CompanyCode=a.CompanyCode
	AND p.CodeId='DWPM'
	AND p.LookUpValue = a.DownPayment
LEFT JOIN GnMstLookUpDtl q on q.CompanyCode=a.CompanyCode
	AND q.CodeId='TENOR'
	AND q.LookUpValue = a.Tenor
LEFT JOIN GnMstLookUpDtl r on r.CompanyCode=a.CompanyCode
	AND r.CodeId='PLCC'
	AND r.LookUpValue = a.LostCaseCategory		
LEFT JOIN GnMstLookUpDtl s on s.CompanyCode=a.CompanyCode
	AND s.CodeId='ITSG'
	AND s.LookUpValue = g.CurrentGrade
LEFT JOIN GnMstLookUpDtl t on t.CompanyCode=a.CompanyCode
	AND t.CodeId='PMOP'
	AND t.LookUpValue = a.TestDrive
WHERE
	a.CompanyCode = @CompanyCode 
	and exists (select 1 from #t_kdp where companycode=a.companycode
		and branchcode=a.branchcode and inquirynumber=a.inquirynumber)
UNION ALL
-- RECORD II
SELECT
	2,
	a.inquirynumber,
	2,
	'2'
	+ left(replace(replace(isnull(a.namaprospek,' '),CHAR(13), ' '),CHAR(10), ' ')+replicate(' ',40), 40)
	+ left(replace(replace(isnull(a.alamatprospek,' '),CHAR(13),' '),CHAR(10), ' ')+replicate(' ',100), 100)
	+ left(isnull(a.telprumah,' ')+replicate(' ',15), 15)
	+ left(replace(replace(isnull(a.namaperusahaan,' '),CHAR(13), ' '),CHAR(10), ' ')+replicate(' ',40), 40)
	+ left(replace(replace(isnull(a.alamatperusahaan,' '),CHAR(13),' '),CHAR(10), ' ')+replicate(' ',100), 100)
	+ left(isnull(a.handphone,' ')+replicate(' ',15), 15)
	+ isnull(b.StatusVehicle,'A')
	+ left(isnull(b.OthersType,'')+ replicate(' ', 40), 40)
	+ replicate(' ',4)	
FROM 
	PmKDP a
left join PmKdpAdditional b on a.CompanyCode = b.CompanyCode
	  and a.BranchCode = b.BranchCode
	  and a.InquiryNumber = b.InquiryNumber
WHERE
	a.CompanyCode = @CompanyCode 
	and exists (select 1 from #t_kdp where companycode=a.companycode
		and branchcode=a.branchcode and inquirynumber=a.inquirynumber)

UNION ALL
-- RECORD III
SELECT
	2,
	inquirynumber,
	3,
	'3'
	+ left(isnull(a.lostcasecategory,' ') + replicate(' ',1), 1)
	+ left(isnull(a.lostcasereasonid,' ') + replicate(' ',2), 2)
	+ left(replace(replace(isnull(a.merklain,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',30), 30)
	+ left(replace(replace(isnull(a.LostCaseVoiceOfCustomer,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',300), 300)
	+ replicate(' ',22)
FROM 
	PmKDP a
WHERE
	a.CompanyCode = @CompanyCode 
	and exists (select 1 from #t_kdp where companycode=a.companycode
		and branchcode=a.branchcode and inquirynumber=a.inquirynumber)

UNION ALL
--- RECORD IV --- IF InquiryNumber exists in omTrnIndent
SELECT 
	4,
	c.inquirynumber,
	4,
	case when (select COUNT(*) from omTrIndent where companycode=c.companycode
		and branchcode=c.branchcode and inquirynumber=c.inquirynumber) > 0 then
	'4'																															-- ID
	+ left(replace(replace(isnull(a.CustomerID,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',30), 30)						-- Customer ID No (KTP/TDP)
	+ left(replace(replace(isnull(a.CustomerBirthPlace,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',50), 50)				-- Customer Birthplace
	+ case when a.CustomerBirthDate is null then '19000101'																		-- Customer Birthdate
		else convert(varchar,a.CustomerBirthDate,112) END
	+ left(replace(replace(isnull(a.SKPKNo,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',15), 15)							-- SKPKNo
	+ case when a.SKPKDate is null then '19000101'																				-- SKPKDate
		else convert(varchar,a.SKPKDate,112) END
	+ left(isnull(CONVERT(varchar, b.ModelYear),' ') + replicate(' ',4), 4)														-- ModelYear
	+ left(replace(replace(isnull(b.MarketModelCode,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',15), 15)					-- MarketModelCode
	+ left(replace(replace(isnull((SELECT LookUpValueName																		-- MarketModel
									FROM gnMstLookUpDtl d 
									WHERE d.CodeID = 'MKTCD' AND d.LookUpValue = b.MarketModelCode
									),' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',50), 50)
	+ left(replace(replace(isnull(a.DeliverySchedule,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',6), 6)					-- AllocationPeriod=DeliverySchedule
	+ right(replicate('0',3) + isnull(convert(varchar,a.AllocationUnits),'0'), 3)												-- AllocationUnit
	+ left(replace(replace(isnull(a.DeliverySchedule,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',6), 6)					-- AllocationPeriod=DeliverySchedule
	+ left(replace(replace(isnull(a.IndentStatus,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',15), 15)					-- IndentStatus
	+ case when a.SPKDate is null then '19000101'																				-- IndentStatusDate = SPKDate
		else convert(varchar,a.SPKDate,112) END
	+ case when 
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'P') 
		is null then '19000101' 
		else convert(varchar,
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'P')
		,112) END
		-- Prospect Date
	+ case when 
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'HP') 
		is null then '19000101' 
		else convert(varchar,
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'HP')
		,112) END
		-- Hot Prospect Date
	+ case when 
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'SPK') 
		is null then '19000101' 
		else convert(varchar,
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'SPK')
		,112) END
		-- SPK Date
	+ case when 
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'DO') 
		is null then '19000101' 
		else convert(varchar,
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'DO')
		,112) END
		-- DO Date
	+ case when 
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'DELIVERY') 
		is null then '19000101' 
		else convert(varchar,
		(SELECT TOP 1 UpdateDate FROM #t_pmsh c WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InquiryNumber = a.InquiryNumber AND c.LastProgress = 'DELIVERY')
		,112) END
		-- Delivery Date
	+ left(replace(replace(isnull(
		(SELECT IndentTypeCode FROM omMstIndentMapping WHERE GroupCode = b.TypeCode AND TypeCode = b.Variant)
		,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',20), 20)	
		-- Indent TypeCode = GroupCode
	+ left(replace(replace(isnull(
		(SELECT IndentVariant FROM omMstIndentMapping WHERE GroupCode = b.TypeCode AND TypeCode = b.Variant)
		,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',50), 50)	
		-- Indent Variant = TypeCode
	+ left(replace(replace(isnull(a.Notes,' '),CHAR(13), ' '),CHAR(10), ' ') + replicate(' ',27), 27)
		-- Notes
	else
		'4' + Replicate(' ',355)
	end
FROM pmKDP c
Left JOIn omTrIndent a on c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InquiryNumber = a.InquiryNumber
left join omMstIndent b ON a.IndentID = b.IndentID
WHERE
	c.CompanyCode = @CompanyCode
	and exists (select 1 from #t_kdp where companycode=c.companycode
		and branchcode=c.branchcode and inquirynumber=c.inquirynumber)

select Line from @T_Result order by inqno asc, recid 

--drop table #t_kdp
--drop table #t_pmsh
end
GO
create procedure [dbo].[sfm_GetLatestEmployeeData] (
	@CompanyCode varchar(25),
	@EmployeeID varchar(25),
	@CurrentCompanyCode varchar(25) output,
	@CurrentBranchCode varchar(25) output,
	@CurrentEmployeeID varchar(25) output
)
as
begin
--	declare @CompanyCode varchar(25);
--	declare @BranchCode varchar(25);
--	DECLARE @EmployeeID varchar(25);
	declare @ActiveEmployeeID varchar(25);
	declare @LastActiveBranch varchar(25);
	DECLARE @IsEmployeeActive bit;
	declare @TempEmployeeDataTable table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(25)
	);

--	SET @EmployeeID = '2 200 726';
--	set @EmployeeID = '0.000.020';
--	set @CompanyCode = '6015401';
	SET @IsEmployeeActive = 0;

	set @LastActiveBranch = (
		select top 1
			a.MutationTo
		from
			gnMstEmployeeMutation a
		where
			a.CompanyCode = @CompanyCode
			and
			a.EmployeeID = @EmployeeID
			and
			a.IsValid = 1
		order by
			a.MutationDate desc
	);

	if @LastActiveBranch is not null
	begin	
		set @ActiveEmployeeID = (
			select top 1
				a.EmployeeID
			from
				gnMstEmployee a
			inner join
				gnMstEmployeeData b
			on 
				b.CompanyCode = a.CompanyCode
				and
				b.BranchCode = a.BranchCode
				and
				b.EmployeeID = a.EmployeeID
			where
				a.CompanyCode = @CompanyCode
				and
				a.BranchCode = @LastActiveBranch
				and
				a.EmployeeID = @EmployeeID
		);

		set @CurrentCompanyCode = @CompanyCode;
		set @CurrentBranchCode = @LastActiveBranch;
		set @CurrentEmployeeID = @EmployeeID;
	end
	else
	begin
		set @ActiveEmployeeID = (
			select top 1
				a.EmployeeID
			from 
				gnMstEmployee a
			where
				a.CompanyCode = @CompanyCode
				and
				a.EmployeeID = @EmployeeID
				and
				a.PersonnelStatus = '1'
				and
				exists (
					select top 1
						x.EmployeeID
					from
						gnMstEmployeeData x
					where
						x.CompanyCode = a.CompanyCode
						and
						x.BranchCode = a.BranchCode
						and
						x.EmployeeID = a.EmployeeID
				)
		);

		if @ActiveEmployeeID is not null 
			begin
				set @IsEmployeeActive = 1;
			end
		else
			begin
				set @IsEmployeeActive = 0;
			end
	
		delete FROM @TempEmployeeDataTable;	

		IF @IsEmployeeActive = 1 
			BEGIN
				insert into @TempEmployeeDataTable
				select TOP 1
					a.CompanyCode,
					a.BranchCode,
					a.EmployeeID
				from 
					gnMstEmployee a
				inner join 
					gnMstEmployeeData b
				on
					b.CompanyCode = a.CompanyCode
					and
					b.BranchCode = a.BranchCode
					and
					b.EmployeeID = a.EmployeeID
				where
					a.CompanyCode = @CompanyCode
					and
					a.EmployeeID = @EmployeeID
					and
					a.PersonnelStatus = '1'
			end
		else
			BEGIN
				declare @CreatedDate datetime;
				declare @UpdatedDate datetime;
				declare @LatestDate datetime;

				set @CreatedDate = getdate();
				set @UpdatedDate = getdate();
				set @LatestDate = getdate();

				select @CreatedDate = (
						SELECT
							max(a.CreatedDate)
						from
							gnMstEmployee a
						inner join 
							gnMstEmployeeData b
						on
							a.CompanyCode = b.BranchCode
							and
							a.BranchCode = b.BranchCode
							and
							a.EmployeeID = b.EmployeeID
						WHERE 
							a.CompanyCode = @CompanyCode
							and
							a.EmployeeID = @EmployeeID
							and
							b.CreatedDate IS not null
					);
			
					set @UpdatedDate = (
							SELECT
								max(a.LastupdateDate)
							from
								gnMstEmployee a
							inner join 
								gnMstEmployeeData b
							on
								a.CompanyCode = b.CompanyCode
								and
								a.BranchCode = b.BranchCode
								and
								a.EmployeeID = b.EmployeeID
							WHERE 
								a.CompanyCode = @CompanyCode
								and
								a.EmployeeID = @EmployeeID
								and
								b.UpdatedDate IS not null
						);

					set @LatestDate = (
							SELECT 
								max(val)
							from
								(
									SELECT @CreatedDate as val
									union all
									SELECT @UpdatedDate as val
								) as datetimes
						)

					insert INTO @TempEmployeeDataTable
						select TOP 1
							a.CompanyCode,
							a.BranchCode,
							a.EmployeeID
						from
							gnMstEmployee a
						where
							a.CompanyCode = @CompanyCode
							and
							a.EmployeeID = @EmployeeID
							and
							(
								a.CreatedDate = @LatestDate
								OR
								a.LastupdateDate = @LatestDate
							)	
							and
							exists (
								select 
									x.EmployeeID
								from
									gnMstEmployeeData x
								where
									x.CompanyCode = a.CompanyCode
									and
									x.BranchCode = a.BranchCode
									and
									x.EmployeeID = a.EmployeeID
							)
						end

			--	select * from @TempEmployeeDataTable;
				set @CurrentCompanyCode = (select TOP 1 CompanyCode from @TempEmployeeDataTable);
				set @CurrentBranchCode = (select TOP 1 BranchCode from @TempEmployeeDataTable);
				set @CurrentEmployeeID = (select TOP 1 EmployeeID from @TempEmployeeDataTable);
	end;
end;
GO
ALTER procedure [dbo].[uspfn_SvDrhInitial]
    @CompanyCode varchar(20),
    @BranchCode  varchar(20),
    @DateParam   datetime,
    @OptionType  varchar(20),
    @Interval    int,
    @Range       int,
    @InclPdi     bit = 0,
    @UserID      varchar(20) = ''
as

if (@DateParam is null or convert(varchar, @DateParam, 112) <= 19000101) set @DateParam = getdate()

if @OptionType = 'REMINDER'
begin
    ----===============================================================================
    ---- INSERT DAILY RETENTION WITH ASSUMPTIONS NOT YET REGISTERED IN RETENTION SYSTEM
    ----===============================================================================
    insert into SvTrnDailyRetention (CompanyCode,BranchCode,PeriodYear,PeriodMonth
               ,CustomerCode,ChassisCode,ChassisNo,CustomerCategory,VisitInitial
               ,VisitDate,PMNow,PMNext,EstimationNextVisit,ReminderDate,IsConfirmed
               ,IsBooked,IsVisited,IsSatisfied,BookingDate,FollowUpDate,Reason
               ,RefferenceDate,LastServiceDate,LastRemark,CreatedBy
               ,CreatedDate,LastUpdateBy,LastUpdateDate)
    select a.CompanyCode, a.BranchCode
         , year(a.JobOrderDate) PeriodYear
         , month(a.JobOrderDate) PeriodMonth
         , a.CustomerCode, a.ChassisCode, a.ChassisNo
         , case when isnull((
            select BPKDate from OmMstVehicle
             where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode
               and ChassisCode = a.ChassisCode and ChassisNo = a.ChassisNo)
            , null) is null then 20 else 10 end CustomerCategory
         , case when a.BookingNo <> '' then 10 else 30 end VisitInitial
         , a.JobOrderDate VisitDate
         , case when a.Odometer < 2000 then 1000 else round(a.odometer/5000,0) * 5000 end as PMNow
         , case when a.Odometer < 2000 then 5000 else (round(a.odometer/5000,0) * 5000) + 5000 end as PMNext
         , case when isnull((select top 1 TimeDim from SvMstRoutineService where CompanyCode = a.CompanyCode),'') = 'D' then
                dateadd(day, isnull(
                   (
                        select top 1 TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and Odometer = case when a.Odometer < 2000 then 5000 else (round(a.Odometer/5000,0)                                                                    * 5000) + 5000 END

                   ) - 
                   (
                        select TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and JobType = a.JobType 
                    )
                    ,0),a.JobOrderDate)
            else case when isnull((select top 1 TimeDim from SvMstRoutineService where CompanyCode = a.CompanyCode),'') = 'M' then
                dateadd(month, isnull(
                   (
                        select top 1 TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and Odometer = case when a.Odometer < 2000                                                                    THEN 5000 else (ROUND(a.Odometer/5000,0)                                                                    * 5000) + 5000 END

                   ) - 
                   (
                        select TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and JobType = a.JobType 
                    )
            ,0),a.JobOrderDate)
                else 
                dateadd(year, isnull(
                   (
                        select top 1 TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and Odometer = case when a.Odometer < 2000                                                                    THEN 5000 else (ROUND(a.Odometer/5000,0)                                                                    * 5000) + 5000 END

                   ) - 
                   (
                        select TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and JobType = a.JobType 
                    )
            ,0),a.JobOrderDate) end end 
           as  EstimationNextVisit
         , null ReminderDate
         , convert(bit, 0) IsConfirmed
         , convert(bit, 0) IsBooked
         , convert(bit, 0) IsVisited
         , convert(bit, 0) IsSatisfied
         , a.BookingDate
         , null FollowUpDate
         , '' Reason
         , case when isnull((select BPKDate from OmMstVehicle where CompanyCode = a.CompanyCode 
                and BranchCode = a.BranchCode and ChassisCode = a.ChassisCode 
                and ChassisNo = a.ChassisNo), NULL) IS NULL  
            then null else (select BPKDate from OmMstVehicle where CompanyCode = a.CompanyCode 
                and BranchCode = a.BranchCode and ChassisCode = a.ChassisCode and ChassisNo = a.ChassisNo)
             end RefferenceDate
         , (select LastServiceDate from SvMstCustomerVehicle where CompanyCode = a.CompanyCode 
                and BranchCode = a.BranchCode and ChassisCode = a.ChassisCode 
                and ChassisNo = a.ChassisNo) LastServiceDate
         , a.ServiceRequestDesc LastRemark
         , @UserID CreatedBy
         , GetDate() CreatedDate
         , @UserID LastUpdateBy
         , GetDate() LastUpdateDate
      from svTrnService a
      left join SvMstCustomerVehicle b
        on b.Companycode = a.CompanyCode 
       and b.ChassisCode = a.ChassisCode 
       and b.ChassisNo = a.ChassisNo
      left join GnMstCustomer c
        on c.CompanyCode = a.CompanyCode
       and c.CustomerCode = a.CustomerCode
     where 1 = 1
       and a.CompanyCode = @CompanyCode
       and a.BranchCode    = @BranchCode
       and ((
		convert(varchar, @DateParam, 112) between
        convert(varchar, dateadd(day, -@Interval, dateadd(month, @Range, JobOrderDate)), 112) and
         convert(varchar, dateadd(day, @Interval, dateadd(month, @Range, JobOrderDate)), 112)
		) or (convert(varchar, @DateParam, 112) = convert(varchar, dateadd(month, 1, JobOrderDate), 112)))
       and not exists (
            select * from svTrnDailyRetention d
             where d.CompanyCode = a.CompanyCode
               and d.BranchCode = a.BranchCode
               and d.CustomerCode = a.CustomerCode
               and d.PeriodYear = year(a.JobOrderDate)
               and d.PeriodMonth = month(a.JobOrderDate)
            )
end
if @OptionType = '4FOLLOWUP'
begin
    ----===============================================================================
    ---- INSERT DAILY RETENTION SERVICE
    ----===============================================================================
    insert into SvTrnDailyRetention (CompanyCode,BranchCode,PeriodYear,PeriodMonth
               ,CustomerCode,ChassisCode,ChassisNo,CustomerCategory,VisitInitial
               ,VisitDate,PMNow,PMNext,EstimationNextVisit,ReminderDate,IsConfirmed
               ,IsBooked,IsVisited,IsSatisfied,BookingDate,FollowUpDate,Reason
               ,RefferenceDate,LastServiceDate,LastRemark,CreatedBy
               ,CreatedDate,LastUpdateBy,LastUpdateDate)
    select a.CompanyCode, a.BranchCode
         , year(a.JobOrderDate) PeriodYear
         , month(a.JobOrderDate) PeriodMonth
         , a.CustomerCode, a.ChassisCode, a.ChassisNo
         , case when isnull((
            select BPKDate from OmMstVehicle
             where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode
               and ChassisCode = a.ChassisCode and ChassisNo = a.ChassisNo)
            , null) is null then 20 else 10 end CustomerCategory
         , case when a.BookingNo <> '' then 10 else 30 end VisitInitial
         , a.JobOrderDate VisitDate
         , case when a.Odometer < 2000 then 1000 else round(a.odometer/5000,0) * 5000 end as PMNow
         , case when a.Odometer < 2000 then 5000 else (round(a.odometer/5000,0) * 5000) + 5000 end as PMNext
         , case when isnull((select top 1 TimeDim from SvMstRoutineService where CompanyCode = a.CompanyCode),'') = 'D' then
                dateadd(day, isnull(
                   (
                        select top 1 TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and Odometer = case when a.Odometer < 2000 then 5000 else (round(a.Odometer/5000,0)                                                                    * 5000) + 5000 END

                   ) - 
                   (
                        select TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and JobType = a.JobType 
                    )
                    ,0),a.JobOrderDate)
            else case when isnull((select top 1 TimeDim from SvMstRoutineService where CompanyCode = a.CompanyCode),'') = 'M' then
                dateadd(month, isnull(
                   (
                        select top 1 TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and Odometer = case when a.Odometer < 2000                                                                    THEN 5000 else (ROUND(a.Odometer/5000,0)                                                                    * 5000) + 5000 END

                   ) - 
                   (
                        select TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and JobType = a.JobType 
                    )
            ,0),a.JobOrderDate)
                else 
                dateadd(year, isnull(
                   (
                        select top 1 TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and Odometer = case when a.Odometer < 2000                                                                    THEN 5000 else (ROUND(a.Odometer/5000,0)                                                                    * 5000) + 5000 END

                   ) - 
                   (
                        select TimePeriod 
                        from SvMstRoutineService 
                        where CompanyCode = a.CompanyCode 
                            and JobType = a.JobType 
                    )
            ,0),a.JobOrderDate) end end 
           as  EstimationNextVisit
         , null ReminderDate
         , convert(bit, 0) IsConfirmed
         , convert(bit, 0) IsBooked
         , convert(bit, 0) IsVisited
         , convert(bit, 0) IsSatisfied
         , a.BookingDate
         , null FollowUpDate
         , '' Reason
         , case when isnull((select BPKDate from OmMstVehicle where CompanyCode = a.CompanyCode 
                and BranchCode = a.BranchCode and ChassisCode = a.ChassisCode 
                and ChassisNo = a.ChassisNo), NULL) IS NULL  
            then null else (select BPKDate from OmMstVehicle where CompanyCode = a.CompanyCode 
                and BranchCode = a.BranchCode and ChassisCode = a.ChassisCode and ChassisNo = a.ChassisNo)
             end RefferenceDate
         , (select LastServiceDate from SvMstCustomerVehicle where CompanyCode = a.CompanyCode 
                and BranchCode = a.BranchCode and ChassisCode = a.ChassisCode 
                and ChassisNo = a.ChassisNo) LastServiceDate
         , a.ServiceRequestDesc LastRemark
         , @UserID CreatedBy
         , GetDate() CreatedDate
         , @UserID LastUpdateBy
         , GetDate() LastUpdateDate
      from svTrnService a
      left join SvMstCustomerVehicle b
        on b.Companycode = a.CompanyCode 
       and b.ChassisCode = a.ChassisCode 
       and b.ChassisNo = a.ChassisNo
      left join GnMstCustomer c
        on c.CompanyCode = a.CompanyCode
       and c.CustomerCode = a.CustomerCode
     where 1 = 1
       and a.CompanyCode = @CompanyCode
       and a.BranchCode = @BranchCode
       and ((convert(varchar, @DateParam, 112) = convert(varchar, dateadd(day, @Interval, a.JobOrderDate), 112)
		) or (convert(varchar, @DateParam, 112) = convert(varchar, dateadd(month, 1, JobOrderDate), 112)))
       and a.ServiceStatus not in ('0','1','2','3','4','5','6')
       and not exists (
            select * from svTrnDailyRetention d
             where d.CompanyCode = a.CompanyCode
               and d.BranchCode = a.BranchCode
               and d.CustomerCode = a.CustomerCode
               and d.PeriodYear = year(a.JobOrderDate)
               and d.PeriodMonth = month(a.JobOrderDate)
            )
end
GO
-- ==========================================
-- Author:		<HTO - TURBO>
-- Description:	<Insert data until June 2012>
-- ==========================================
-- [uspfn_spPostingSparepartAnalysis] '6506201','650620100',2013,12,12,'sa'
-- delete spHstSparePartAnalysis
-- select * from spHstSparePartAnalysis

ALTER procedure [dbo].[uspfn_spPostingSparepartAnalysis]
	@CompanyCode	Varchar(15),
	@BranchCode		varchar(15),
	@PeriodYear		numeric(4,0),
	@PeriodStart	numeric(2,0),
	@PeriodEnd		numeric(2,0),
	@UserID			varchar(15)
as
	    -- Initial data
declare
       @PeriodMonth          numeric(2,0),
       @TypeOfGoods          varchar(05),
       @JumlahJaringan       numeric(09,0),
       @DemandLine           numeric(09,0),
       @DemandQuantity       numeric(12,0), 
       @DemandNilai          numeric(18,0),
       @SupplyLine           numeric(09,0),
	   @SupplyQuantity       numeric(12,0),
	   @SupplyGross          numeric(18,0),
	   @SupplyNilai          numeric(18,0),
	   @SupplyCost           numeric(18,0),
	   @ServiceRatioLine     numeric(09,2),
	   @ServiceRatioQuantity numeric(12,2),
	   @ServiceRatioNilai    numeric(18,2),
       @ReturGross           numeric(18,0),
       @ReturDPP             numeric(18,0),
       @ReturCost            numeric(18,0),
	   @PenjualanKotor       numeric(18,0),
	   @PenjualanBersih      numeric(18,0),
       @HargaPokok           numeric(18,0),
       @PenerimaanPembelian  numeric(18,0),
       @NilaiStock           numeric(18,0),
       @NilaiStockMC4        numeric(18,0),
       @NilaiStockMC5        numeric(18,0),
	   @SlowMoving           numeric(18,0),
       @ITO                  numeric(18,2)

begin
    delete spHstSparePartAnalysis where CompanyCode=@CompanyCode and BranchCode=@BranchCode
                                    and PeriodYear=@PeriodYear   and PeriodMonth=@PeriodEnd
       
	set @PeriodMonth = @PeriodStart
       while @PeriodMonth <= @PeriodEnd
          begin
             declare curBranch cursor
                     for select BranchCode from gnMstOrganizationDtl 
                          where BranchCode=@BranchCode order by BranchCode
             open curBranch

             fetch next 
                   from curBranch
                   into @BranchCode
             while (@@FETCH_STATUS =0)

                begin            
                -- Jumlah Jaringan
                   set @JumlahJaringan = isnull((select TotalJaringan from spMstSalesTarget
                                                  where CompanyCode = @CompanyCode
                                                    and BranchCode  = @BranchCode
                                                    and Year        = @PeriodYear
                                                    and Month       = @PeriodMonth),0)
                   if  @JumlahJaringan = 0 
                       set @JumlahJaringan = isnull((select isnull(count(*),0) from gnMstOrganizationDtl
                                                      where CompanyCode = @CompanyCode),0)

                   declare curTPGO cursor
                           for select LookUpValue from gnMstLookUpDtl 
                                where CompanyCode = @CompanyCode
                                  and CodeID      = 'TPGO'
                                order by LookUpValue
                   open curTPGO

                   fetch next 
                         from curTPGO
                         into @TypeOfGoods
                   while (@@FETCH_STATUS =0)
          
                      begin            
                      -- Demand
 	                     select * into #t_demand 
	                       from ( select count(b.DocNo)               DmnLine, 
	                                     sum(isnull(b.QtyOrder,0))    DmnQty, 
	                                     sum(isnull(b.NetSalesAmt,0)) DmnNilai
		         from spTrnSORDHdr a,  spTrnSORDDtl b
		                           where a.CompanyCode    = b.CompanyCode 
		                             and a.BranchCode     = b.branchCode 
		                             and a.DocNo          = b.DocNo
		                             and a.CompanyCode    = @CompanyCode
		                             and a.BranchCode     = @BranchCode
		                             and year(a.DocDate)  = @PeriodYear
		                             and month(a.DocDate) = @PeriodMonth
		                             and a.SalesType     in ('0','2')             -- 0:Sales Sparepart, 1:Internal, 2:Service
		                           --and a.TypeOfGoods   in ('0','2')) #t_demand  -- 0:SGP, 1:Lubrican/Oil, 2:Accessories, 3:Non-SGP, 4:Others
		                             and a.TypeOfGoods    = @TypeOfGoods) #t_demand

	                     set @DemandLine     = (select isnull(DmnLine,0)  from #t_demand)
                         set @DemandQuantity = (select isnull(DmnQty,0)   from #t_demand)
                         set @DemandNilai    = (select isnull(DmnNilai,0) from #t_demand)
 
                         drop table #t_demand

                      -- Supply
	                     select * into #t_supply 
	                       from ( select count(b.FPJNo) SupLine, 
	                                     sum(isnull(b.QtyBill,0))                       SupQty, 
	                                     sum(isnull(b.SalesAmt,0))                      SupGross, 
	                                     sum(isnull(b.NetSalesAmt,0))                   SupNilai, 
	                                     sum(isnull(b.CostPrice,0)*isnull(b.QtyBill,0)) SupCost
		                            from spTrnSFPJHdr a,  spTrnSFPJDtl b
		                           where a.CompanyCode    = b.CompanyCode 
		                             and a.BranchCode     = b.branchCode 
		                             and a.FPJNo          = b.FPJNo
		                             and a.CompanyCode    = @CompanyCode
		                             and a.BranchCode     = @BranchCode
		                             and year(a.FPJDate)  = @PeriodYear
		                             and month(a.FPJDate) = @PeriodMonth
		                           --and a.TypeOfGoods   in ('0','2')) #t_supply 
		                             and a.TypeOfGoods    = @TypeOfGoods) #t_supply 

	                     select * into #t_supply_bengkel
	                       from ( select count(b.LmpNo)                                 SrvSupLine, 
	                                     sum(isnull(b.QtyBill,0))                       SrvSupQty, 
	                                     sum(isnull(b.SalesAmt,0))                      SrvSupGross, 
	                                     sum(isnull(b.NetSalesAmt,0))                   SrvSupNilai,
	                                     sum(isnull(b.CostPrice,0)*isnull(b.QtyBill,0)) SrvSupCost
		                            from spTrnSLmpHdr a,  spTrnSLmpDtl b, spTrnSORDHdr c
		                           where a.CompanyCode    = b.CompanyCode 
		                             and a.BranchCode     = b.branchCode 
		                             and a.LmpNo          = b.LmpNo
		                             and a.CompanyCode    = c.CompanyCode
  		                             and a.BranchCode     = c.BranchCode
		                             and b.DocNo          = c.DocNo
		                             and c.SalesType      = '2'
		                             and a.CompanyCode    = @CompanyCode
		                             and a.BranchCode     = @BranchCode
		                             and year(a.LmpDate)  = @PeriodYear
		                             and month(a.LmpDate) = @PeriodMonth 
		                           --and a.TypeOfGoods   in ('0','2')) #t_supply_bengkel
		                             and a.TypeOfGoods    = @TypeOfGoods) #t_supply_bengkel

                         set @SupplyLine     = (select isnull(SupLine,0)  + isnull(SrvSupLine,0)  from #t_supply, #t_supply_bengkel)
                         set @SupplyQuantity = (select isnull(SupQty,0)   + isnull(SrvSupQty,0)   from #t_supply, #t_supply_bengkel)
                         set @SupplyGross    = (select isnull(SupGross,0) + isnull(SrvSupGross,0) from #t_supply, #t_supply_bengkel)
                         set @SupplyNilai    = (select isnull(SupNilai,0) + isnull(SrvSupNilai,0) from #t_supply, #t_supply_bengkel)
                         set @SupplyCost     = (select isnull(SupCost,0)  + isnull(SrvSupCost,0)  from #t_supply, #t_supply_bengkel)

	                     drop table #t_supply
	                     drop table #t_supply_bengkel

                      -- Demand vs Supply
	                     if isnull(@DemandLine,0) = 0
	  	                    set @ServiceRatioLine = 0
	                     else
		                    set @ServiceRatioLine = (@SupplyLine * 100)/ @DemandLine

	                     if isnull(@DemandQuantity,0) = 0
		                    set @ServiceRatioQuantity = 0
	                     else
		                    set @ServiceRatioQuantity = (@SupplyQuantity * 100)/ @DemandQuantity

	                     if isnull(@DemandNilai,0) = 0
		                    set @ServiceRatioNilai = 0
	                     else
		                    set @ServiceRatioNilai = (@SupplyNilai * 100)/ @DemandNilai

                      -- Return
	                     select * into #t_return
	                       from ( select sum(isnull(TotReturAmt,0)) ReturGross, 
	                                     sum(isnull(TotDPPAmt,0))   ReturNet, 
	                                     sum(isnull(TotCostAmt,0))  ReturCost
		                            from spTrnSRturHdr
		                           where CompanyCode       = @CompanyCode
		                             and BranchCode        = @BranchCode 
		                             and year(ReturnDate)  = @PeriodYear
		                             and month(ReturnDate) = @PeriodMonth
		                             and Status            = 2
		                           --and TypeOfGoods      in ('0','2')) #t_return
		                             and TypeOfGoods       = @TypeOfGoods) #t_return

	                     select * into #t_return_bengkel
	                       from ( select sum(isnull(b.ReturAmt,0))                        SrvReturGross, 
	                                     sum(isnull(b.NetReturAmt,0))                     SrvReturNet,
	                                     sum(isnull(b.CostPrice,0)*isnull(b.QtyReturn,0)) SrvReturCost
		                            from spTrnSRturSrvHdr a, spTrnSRturSrvDtl b
		                           where a.CompanyCode       = b.CompanyCode 
		                             and a.BranchCode        = b.BranchCode 
		                             and a.ReturnNo          = b.ReturnNo
		                             and a.CompanyCode       = @CompanyCode
		                             and a.BranchCode        = @BranchCode 
		                             and year(a.ReturnDate)  = @PeriodYear
		                             and month(a.ReturnDate) = @PeriodMonth
		                             and a.Status            = 2
		                           --and b.TypeOfGoods      in ('0','2')) #t_return_bengkel
		                             and b.TypeOfGoods       = @TypeOfGoods) #t_return_bengkel

	                     select * into #t_return_ss
	                       from ( select sum(isnull(TotReturAmt,0)) SrvReturSSGross, 
	                                     sum(isnull(TotDPPAmt,0))   SrvReturSSNet, 
	                                     sum(isnull(TotCostAmt,0))  SrvReturSSCost
		                            from spTrnSRturSSHdr
		                           where CompanyCode       = @CompanyCode
		                             and BranchCode        = @BranchCode 
		                             and year(ReturnDate)  = @PeriodYear
		                             and month(ReturnDate) = @PeriodMonth
		                             and Status            = 2
		                           --and TypeOfGoods      in ('0','2')) #t_return_ss
		                             and TypeOfGoods       = @TypeOfGoods) #t_return_ss

                         set @ReturGross = (select isnull(ReturGross,0) + isnull(SrvReturGross,0) + isnull(SrvReturSSGross,0) 
                                              from #t_return, #t_return_bengkel, #t_return_ss)
                         set @ReturDPP   = (select isnull(ReturNet,0)   + isnull(SrvReturNet,0)   + isnull(SrvReturSSNet,0)
                                              from #t_return, #t_return_bengkel, #t_return_ss)
                         set @ReturCost  = (select isnull(ReturCost,0)  + isnull(SrvReturCost,0)  + isnull(SrvReturSSCost,0)
                                              from #t_return, #t_return_bengkel, #t_return_ss)

                         drop table #t_return
                         drop table #t_return_bengkel
                         drop table #t_return_ss
       
                      -- Receiving
                         set @PenerimaanPembelian = isnull((select sum(isnull(a.TotWRSAmt,0))
                                                              from spTrnPRcvHdr a,  gnMstSupplier b
		                                                     where a.CompanyCode    = b.CompanyCode
		                                                       and a.SupplierCode   = b.SupplierCode
		                                                       and a.CompanyCode    = @CompanyCode
		                                                       and a.BranchCode     = @BranchCode
		                                                       and year(a.WRSDate)  = @PeriodYear
		                                                       and month(a.WRSDate) = @PeriodMonth
		                                                       and b.StandardCode   = '1000000'
		                                                       and a.Status         = 4
		                                                     --and a.TypeOfGoods   in ('0','2')),0)
		                                                       and a.TypeOfGoods    = @TypeOfGoods),0)

                      -- Penjualan dan Harga Pokok
                         set @PenjualanKotor  = @SupplyGross - @ReturGross
                         set @PenjualanBersih = @SupplyNilai - @ReturDPP
                         set @HargaPokok      = @SupplyCost  - @ReturCost
		                              
                      -- Stock (SGP & SGO)
                         select * into #t_nilai_stock
                         --from ( select sum(isnull((a.OnHand*b.CostPrice),0)) NilaiStock,
                         --              sum(isnull((a.OnHand*(case a.MovingCode
                         --                                           when '4' then b.CostPrice
                         --                                           else          0
                         --                                      end
                         --                                     )),0)) NilaiStockMC4,
                         --                sum(isnull((a.OnHand*(case a.MovingCode
                         --                                           when '5' then b.CostPrice
                         --                                           else          0
                         --                                      end
                         --                                     )),0)) NilaiStockMC5
                         --           from spMstItems a, spMstItemPrice b
                         --          where a.CompanyCode = b.CompanyCode
                         --            and a.BranchCode  = b.BranchCode
                         --            and a.PartNo      = b.PartNo
                         --            and a.CompanyCode = @CompanyCode
                         --            and a.BranchCode  = @BranchCode
                         --            and a.TypeOfGoods in ('0','2')) #t_nilai_stock
                         --            and a.TypeOfGoods = @TypeOfGoods) #t_nilai_stock
                           from ( select sum(isnull(OnHandQty * CostPrice,0)) NilaiStock,
                                         sum(isnull(OnHandQty * (case MovingCode
                                                                      when '4' then CostPrice
                                                                               else 0
                                                                      end
                                                                ),0)) NilaiStockMC4,
                                         sum(isnull(OnHandQty * (case MovingCode
                                                                      when '5' then CostPrice
                                                                               else 0
                                                                      end
                                                                ),0)) NilaiStockMC5
                                    from spHstTransaction
                                   where CompanyCode   = @CompanyCode
                                     and BranchCode    = @BranchCode
                                     and Year          = @PeriodYear
                                     and Month         = @PeriodMonth
                                     and WarehouseCode between '00' and '88'
                                   --and TypeOfGoods  in ('0','2')) #t_nilai_stock
                                     and TypeOfGoods   = @TypeOfGoods) #t_nilai_stock

                         set @NilaiStock    = (select isnull(NilaiStock,0)    from #t_nilai_stock)
                         set @NilaiStockMC4 = (select isnull(NilaiStockMC4,0) from #t_nilai_stock)
                         set @NilaiStockMC5 = (select isnull(NilaiStockMC5,0) from #t_nilai_stock)
                         set @SlowMoving    = @NilaiStockMC4 + @NilaiStockMC5

                         drop table #t_nilai_stock

                      -- ITO (Inventory Turn Over)
   	                     if isnull(@HargaPokok,0) = 0
	  	                    set @ITO = 0
	                     else
		                    set @ITO = @NilaiStock / @HargaPokok

                      -- Insert data to spHstSparePartAnalysis table
                         insert spHstSparePartAnalysis 
                                (CompanyCode, BranchCode, PeriodYear, PeriodMonth, TypeOfGoods, JumlahJaringan,
                                 PenjualanKotor, PenjualanBersih, HargaPokok, PenerimaanPembelian, NilaiStock, ITO,
                                 DemandLine, DemandQuantity, DemandNilai, SupplyLine, SupplyQuantity, SupplyNilai, 
                                 ServiceRatioLine, ServiceRatioQuantity, ServiceRatioNilai, DataStockMC4, 
                                 DataStockMC5, SlowMoving, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
                         values (@CompanyCode, @BranchCode, @PeriodYear, @PeriodMonth, @TypeOfGoods, @JumlahJaringan, 
                                 @PenjualanKotor, @PenjualanBersih, @HargaPokok, @PenerimaanPembelian, @NilaiStock, @ITO, 
                                 @DemandLine, @DemandQuantity, @DemandNilai, @SupplyLine, @SupplyQuantity, @SupplyNilai, 
                                 @ServiceRatioLine, @ServiceRatioQuantity, @ServiceRatioNilai, @NilaiStockMC4, 
                                 @NilaiStockMC5, @SlowMoving, @UserID, getdate(), NULL, NULL)
                         fetch next 
                               from curTPGO
                               into @TypeOfGoods
                      end
	               close curTPGO
	               deallocate curTPGO

                   fetch next 
        from curBranch
                         into @BranchCode
                end
	         close curBranch
	         deallocate curBranch
             set @PeriodMonth = @PeriodMonth + 1
          end
     select * from spHstSparePartAnalysis order by CompanyCode, BranchCode, PeriodYear, PeriodMonth, TypeOfGoods
end
GO
ALTER procedure [dbo].[uspfn_GetVehicleInfo]  
 @CompanyCode  varchar(20),  
 @BranchCode   varchar(20),  
 @ProductType  varchar(10),  
 @PoliceRegNo  varchar(20),  
 @ChassisCode  varchar(20),  
 @ChassisNo    varchar(10),  
 @BasicModel   varchar(20),  
 @JobOrderDate varchar(20),
 @CustomerCode varchar(20),
 @IsAllBranch  bit = 1
 
as  
  
select * into #t1 from (  
select 0 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , c.MechanicId+' - '+  
  (  
  select EmployeeName   
  from gnMstEmployee   
  where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and EmployeeID=c.MechanicId  
  ) MechanicId  
     , a.ForemanId  
     , b.OperationNo  
     , isnull(b.OperationHour, 0) as OperationQty  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.0) as OperationAmt  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.1) as TotalSrvAmount  
     , isnull(b.SharingTask, 0) SharingTask  
     , case when f.Description is null then (select TOP 1 Description   
    from svMstTask   
     where BasicModel = a.BasicModel  
      and OperationNo = b.OperationNo) else f.Description end Description  
    , isnull(g.EmployeeName, '') NameSA  
    , isnull(h.EmployeeName, '') NameForeman  
    , b.CreatedDate  
 from svTrnService a with(nolock, nowait)  
 left join svTrnSrvTask b with(nolock, nowait)  
   on b.CompanyCode = a.CompanyCode  
  and b.BranchCode  = a.BranchCode  
  and b.ProductType = a.ProductType  
  and b.ServiceNo   = a.ServiceNo  
 left join svTrnSrvMechanic c with(nolock, nowait)  
   on c.CompanyCode = b.CompanyCode  
  and c.BranchCode  = b.BranchCode  
  and c.ProductType = b.ProductType  
  and c.ServiceNo   = b.ServiceNo  
  and c.OperationNo = b.OperationNo  
 left join svTrnInvoice d with(nolock, nowait)  
   on d.CompanyCode = a.CompanyCode  
  and d.BranchCode  = a.BranchCode  
  and d.InvoiceNo   = a.InvoiceNo  
 left join svMstRefferenceService e with(nolock, nowait)  
   on e.CompanyCode    = a.CompanyCode  
  and e.RefferenceCode = a.jobType  
  and e.ProductType    = a.ProductType  
  and e.RefferenceType = 'JOBSTYPE'  
 left join svMstTask f with(nolock, nowait)  
   on f.CompanyCode = b.CompanyCode  
  and f.ProductType = b.ProductType  
  and f.OperationNo = b.OperationNo   
  and f.JobType     = a.JobType  
  and f.BasicModel  = a.BasicModel  
 left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
  and g.BranchCode = a.BranchCode   
  and g.EmployeeId = a.ForemanID  
 left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
  and h.BranchCode = a.BranchCode   
  and h.EmployeeId = a.MechanicID  
where a.JobOrderNo <> ''  
  and a.CompanyCode = @CompanyCode  
  and a.BranchCode  = @BranchCode  
  and a.ProductType = @ProductType  
  and a.ChassisCode = @ChassisCode  
  and a.ChassisNo   = @ChassisNo  
  and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
  and a.CustomerCode = @CustomerCode
) #t1  
  
--declare @t_spk_task as table(JobOrderNo varchar(20), OperationNo varchar(20))  
  
--insert into @t_spk_task   
--select a.JobOrderNo  
--  , isnull((  
--  select top 1 OperationNo from #t1  
--      where JobOrderNo = a.JobOrderNo  
--      order by CreatedDate   
--     ), '') OperationNo  
--  from #t1 a group by a.JobOrderNo  
  
insert into #t1  
select 1 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , ''  
     , ''  
     , b.PartNo  
     , (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) as OperationQty  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.0) as OperationAmt  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.1)
     , 1  
     , f.PartName  
     , isnull(g.EmployeeName, '') NameSA  
     , isnull(h.EmployeeName, '') NameForeman  
     , b.CreatedDate  
  from svTrnService a with(nolock, nowait)  
  left join svTrnSrvItem b with(nolock, nowait)  
    on b.CompanyCode = a.CompanyCode  
   and b.BranchCode  = a.BranchCode  
   and b.ProductType = a.ProductType  
   and b.ServiceNo   = a.ServiceNo  
  left join svTrnInvoice d with(nolock, nowait)  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode  = a.BranchCode  
   and d.InvoiceNo   = a.InvoiceNo  
  left join svMstRefferenceService e with(nolock, nowait)  
    on e.CompanyCode    = a.CompanyCode  
   and e.RefferenceCode = a.jobType  
   and e.ProductType    = a.ProductType  
   and e.RefferenceType = 'JOBSTYPE'  
  left join spMstItemInfo f with(nolock, nowait)  
    on f.CompanyCode = b.CompanyCode  
   and f.PartNo      = b.PartNo   
  left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
   and g.BranchCode = a.BranchCode   
   and g.EmployeeId = a.ForemanID  
  left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
   and h.BranchCode = a.BranchCode   
   and h.EmployeeId = a.MechanicID  
 where a.JobOrderNo <> ''  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and a.ProductType = @ProductType  
   and a.ChassisCode = @ChassisCode  
   and a.ChassisNo   = @ChassisNo  
   and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
   and a.CustomerCode = @CustomerCode
;with x as (  
select a.JobOrderNo, a.OperationNo, a.TotalSrvAmount, b.TotalSrvAmount TotalSrvAmountNew  
  from #t1 a  
  left join svTrnService b  
    on b.CompanyCode = @CompanyCode  
   and b.BranchCode  = @BranchCode  
   and b.ProductType = @ProductType  
   and b.JobOrderNo  = a.JobOrderNo  
)  
update x set TotalSrvAmount = TotalSrvAmountNew  
  
select * from #t1 where OperationQty > 0 order by JobOrderNo, TaskPartSeq, CreatedDate  
  
drop table #t1
GO
-- usprpt_GnGenerateSeqTax '6006408','6006431','20121001','20121030','','amk',''
-- exec usprpt_GnGenerateSeqTax @CompanyCode=N'6006406',@BranchCode=N'6006401',@StartDate=N'20130401',@FPJDate=N'20130410',@ProfitCenterCode=N'200',@UserId=N'ga',@DocNo=N'|6006401 FPS/13/001319|'
ALTER PROCEDURE [dbo].[usprpt_GnGenerateSeqTax]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@StartDate as varchar(8)
	,@FPJDate as varchar(8)
	,@ProfitCenterCode as varchar(3)
	,@UserId as varchar(15)
	,@DocNo as varchar(5000)
AS
BEGIN

declare @IsUnion as varchar(1)
set @IsUnion = '0'

if(select count(LookUpValue) from gnMstLookUpDtl where CodeID='BRANCH') > 0
	set @IsUnion = '1'

declare @t_tax table(
	CompanyCode varchar(15)
	,BranchCode varchar(15)
	,ProfitCenterCode varchar(3)
	,DocNo varchar(15)
	,DocDate varchar(15)
	,DueDate datetime
	,RefNo varchar(15)
	,RefDate datetime
	,TaxTransCode varchar(2)
)

if @ProfitCenterCode='' or @ProfitCenterCode='300'
begin
	insert into @t_tax
	SELECT	CompanyCode
			, BranchCode
			, '300' AS ProfitCenterCode
			, InvoiceNo AS DocNo
			, convert(varchar,InvoiceDate,112) AS DocDate
			, convert(varchar,DueDate,112) DueDate
			, '' AS RefNo
			, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
						AND CustomerCode = a.CustomerCodeBill AND ProfitCenterCode = '300'
			) AS TaxTransCode
	FROM	SpTrnSFPJHdr a
	WHERE	CompanyCode = @CompanyCode  
			AND ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
				or (case when @IsUnion = '1' then BranchCode end) 
					in (select LookUpvalue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
					)
			)
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end) = BranchCode+' '+InvoiceNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|'+BranchCode+' '+InvoiceNo+'|%')
	GROUP BY CompanyCode, BranchCode,InvoiceNo, CustomerCodeBill,convert(varchar,InvoiceDate,112),convert(varchar,DueDate,112)
end

if @ProfitCenterCode='' or @ProfitCenterCode='200'
begin
	insert into @t_tax
	SELECT	CompanyCode
			, BranchCode
			, '200' AS ProfitCenterCode
			, FPJNo AS DocNo
			, convert(varchar,FPJDate,112) AS DocDate
			, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = SVTrnFakturPajak.CompanyCode AND BranchCode = SVTrnFakturPajak.BranchCode 
						AND CustomerCode = SVTrnFakturPajak.CustomerCodeBill AND ProfitCenterCode = '200'
			) AS TaxTransCode
	FROM	SVTrnFakturPajak
	WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
				or (case when @IsUnion = '1' then BranchCode end) 
					in (select LookUpvalue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
					)
			)
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND IsLocked= 0
			AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+FPJNo end)=BranchCode+' '+FPJNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+FPJNo + '|%'
			)
end

if @ProfitCenterCode='' or @ProfitCenterCode='100'
begin
	insert into @t_tax
	SELECT	CompanyCode
			, BranchCode
			, '100' AS ProfitCenterCode
			, InvoiceNo AS DocNo
			, convert(varchar,InvoiceDate,112) AS DocDate
			, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = OmFakturPajakHdr.CompanyCode AND BranchCode = OmFakturPajakHdr.BranchCode 
						AND CustomerCode = OmFakturPajakHdr.CustomerCode AND ProfitCenterCode = '100') AS TaxTransCode
	FROM	OmFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
				or (case when @IsUnion = '1' then BranchCode end) 
					in (select LookUpvalue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
					)
			)
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
		AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
			or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
		)
end

if @ProfitCenterCode='' or @ProfitCenterCode='000'
begin
	insert into @t_tax
	SELECT	CompanyCode
			, BranchCode
			, '000' AS ProfitCenterCode
			, InvoiceNo AS DocNo
			, convert(varchar,InvoiceDate,112) AS DocDate
			, DueDate
			, FPJNo AS RefNo, FPJDate AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = ARFakturPajakHdr.CompanyCode AND BranchCode = ARFakturPajakHdr.BranchCode 
						AND CustomerCode = ARFakturPajakHdr.CustomerCode AND ProfitCenterCode = '000'
			) AS TaxTransCode
	FROM	ARFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
				or (case when @IsUnion = '1' then BranchCode end) 
					in (select LookUpvalue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
						where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
					)
			)
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
		AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
			or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
		)
end

select * into #f1
from (
	select row_number() over(order by DocDate,BranchCode,ProfitCenterCode asc) OrderNo,*
	from @t_tax
) #f1

SELECT	* INTO #f2 
FROM 
	( 
		SELECT TaxCabCode 
		FROM GnMstCoProfile  
		WHERE CompanyCode = @CompanyCode 
			AND 
			(
				(case when @IsUnion = 0 then BranchCode end)= @BranchCode
				or (case when @IsUnion = 1 then BranchCode end) = 
					(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
			) 
) #f2 

-- create FPJGovNo
select * into #f3 
from (
	select 
		a.OrderNo,a.CompanyCode,a.BranchCode,year(DocDate) PeriodTaxYear
		,month(DocDate) PeriodTaxMonth,ProfitCenterCode
		,DocDate as FPJGovDate,DocNo,convert(datetime,DocDate) DocDate,RefNo,RefDate,@UserId CreatedBy,getDate() CreatedDate
		,TaxTransCode
	from 
		#f1 a
) #f3

if(Convert(varchar,@FPJDate,112) < '20130401')
begin

	select * into #f4 from (
		select  *
			,LEFT(TaxTransCode+'000',3)+'.'+
				RIGHT('000'+isnull((select TaxCabCode from #f2),'000'),3)+'-'+
				RIGHT( isnull(convert(varchar(4),year(DocDate)),year(getDate())),2 )+'.'+ 
				RIGHT( '00000000'+convert(varchar,isnull((select	isnull(FPJSeqNo,0)
															from	GnMstFPJSeqNo
															where	CompanyCode= a.CompanyCode 
																	and 
																	(
																		(	case when @IsUnion = 0 then BranchCode end)= a.BranchCode
																			or (case when @IsUnion = 1 then BranchCode end) = 
																				(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
																	)
																	and Year= year(DocDate)
																	and convert(varchar,EffectiveDate,112) < '20130401'), 0) + a.OrderNo
															),8) FPJGovNo 
		from #f3 a
	)#f4
	
	--insert to tabel GenerateTax
	insert into
		GnGenerateTax(
			CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
			FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	) 
	select 
		CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
		FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	from 
		#f4

	drop table #f1
	drop table #f2

	update	GnMstFPJSeqNo
	set		FPJSeqNo = FPJSeqNo + isnull((select max(OrderNo) from #f4),0)
	from	(select top 1 CompanyCode,BranchCode,PeriodTaxYear from #f4 order by BranchCode asc) a, GnMstFPJSeqNo b
	where	a.CompanyCode= b.CompanyCode 
			and 
			(
				(	case when @IsUnion = 0 then b.BranchCode end)= a.BranchCode
					or (case when @IsUnion = 1 then b.BranchCode end) = 
						(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
			) 
			and a.PeriodTaxYear= b.Year
			
	-- update Sparepart
	update	SPTrnSFPJHdr
	set		FPJGovNo= a.FPJGovNo
			,FPJSignature= a.FPJGovDate
	from	#f4 a, SPTrnSFPJHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Service
	update	SVTrnFakturPajak
	set		FPJGovNo= a.FPJGovNo
			,SignedDate= a.FPJGovDate
	from	#f4 a, SVTrnFakturPajak b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.FPJNo

	-- update Sales
	update	OmFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate 
	from	#f4 a, OmFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Finance
	update	ArFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate
	from	#f4 a, ArFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo
	
	select top 1 convert(decimal,right(FPJGovNo,8)) from #f4 order by right(FPJGovNo,8) desc
	
	drop table #f3
	drop table #f4

end
else
begin
 ---------------------------------------------------------------------------------------------------
 --									Region Setelah Tanggal 1 April 2013                           --
 ---------------------------------------------------------------------------------------------------
	Declare @TotalFPJ				varchar(25)
	Declare @TotalFPJX				varchar(25)
	Declare @EndFPJ					varchar(25)
	Declare @CurrentFPJ				varchar(25)
	Declare @CountFPJNo				int
	Declare @CountUnValidFPJ		int
	Declare @CurrentDocNo			varchar(100)
	Declare @CurrentCompanyCode		varchar(15)
	Declare @CurrentBranchCode		varchar(15)
	Declare @CurrentTaxTransCode	varchar(2)
	
	select * into #tblSeqNoFPJ from (
		select row_number() over(order by CompanyCode, BranchCode ,Year ,SeqNo asc) OrderNo, *
		  from GnMstFPJSeqNo with (NOLOCK, NOWAIT)
		 where CompanyCode = @CompanyCode 
		   and	(
					(case when @IsUnion = 0 then BranchCode end)= @BranchCode
					or (case when @IsUnion = 1 then BranchCode end) = 
						(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
				) 
		   and Year = YEAR(getdate()) 
		   and isActive = 1
		   and EffectiveDate <= getdate()
		   and isnull(BeginTaxNo,'') <> '' 
		   and isnull(EndTaxNo,'') <> ''
	)#tblSeqNoFPJ
	
	set @TotalFPJ = isnull((select TOP 1 FPJSeqNo from #tblSeqNoFPJ order by SeqNo Asc),'')
	set @EndFPJ = isnull((select TOP 1 EndTaxNo from #tblSeqNoFPJ order by SeqNo asc),'')
	set @CountFPJNo = (select SUM(convert(bigint,EndTaxNo) - convert(bigint,FPJSeqNo)) from #tblSeqNoFPJ where LEN(FPJSeqNo) <= 11) 
	
	if (@TotalFPJ = '0' or @TotalFPJ = '')
	begin
		raiserror('Tidak terdapat No Faktur Pajak yang aktif. Silahkan setting No Faktur Pajak terlebih dahulu',16 ,1);
		return
	end
	else
	begin
		if @CountFPJNo - isnull((select max(OrderNo) from #f1),0) < 0
		begin
			raiserror('Faktur Pajak Aktif tidak mencukupi jumlah dokumen yang diperlukan. Silahkan setting No Faktur Pajak dengan no seq aktif selanjutnya.',16 ,1);
			return
		end
	end

	DECLARE temp CURSOR FOR
	SELECT	CompanyCode, BranchCode, DocNo, TaxTransCode
	FROM	#f3 

	OPEN temp
	FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode
	WHILE @@FETCH_STATUS = 0
		BEGIN
			set @TotalFPJ =   (select FPJSeqNo
								  from GnMstFPJSeqNo
								 where CompanyCode = @CompanyCode 
								   and	(
											(case when @IsUnion = 0 then BranchCode end)= @BranchCode
											or (case when @IsUnion = 1 then BranchCode end) = 
												(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
										) 
								   and Year = YEAR(getdate()) 
								   and isActive = 1
								   and EffectiveDate <= getdate()
								   and isnull(BeginTaxNo,'') <> '' 
								   and isnull(EndTaxNo,'') <> ''
								   and SeqNo = (select MIN(SeqNo)
												  from GnMstFPJSeqNo 
												 where CompanyCode = @CompanyCode 
												  and	(
															(case when @IsUnion = 0 then BranchCode end)= @BranchCode
															or (case when @IsUnion = 1 then BranchCode end) = 
																(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
														) 
												   and Year = YEAR(getdate()) 
												   and isActive = 1 
												   and EffectiveDate <= getdate()
												   and isnull(BeginTaxNo,0) <> 0 
												   and isnull(EndTaxNo,0) <> 0))
			set @EndFPJ = (select EndTaxNo
								  from GnMstFPJSeqNo
								 where CompanyCode = @CompanyCode 
								   and	(
											(case when @IsUnion = 0 then BranchCode end)= @BranchCode
											or (case when @IsUnion = 1 then BranchCode end) = 
												(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
										) 
								   and Year = YEAR(getdate()) 
								   and isActive = 1
								   and EffectiveDate <= getdate()
								   and isnull(BeginTaxNo,'') <> '' 
								   and isnull(EndTaxNo,'') <> ''
								   and SeqNo = (select MIN(SeqNo)
												  from GnMstFPJSeqNo 
												 where CompanyCode = @CompanyCode 
												  and	(
															(case when @IsUnion = 0 then BranchCode end)= @BranchCode
															or (case when @IsUnion = 1 then BranchCode end) = 
																(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
														) 
												   and Year = YEAR(getdate()) 
												   and isActive = 1 
												   and EffectiveDate <= getdate()
												   and isnull(BeginTaxNo,0) <> 0 
												   and isnull(EndTaxNo,0) <> 0))
												   
            --update by Hasim (6 Jan 2014), because could be problem if length of tax no less than 11...
            --original...
			--set @CurrentFPJ = (select LEFT (convert(varchar,@CurrentTaxTransCode) + '000',3)+'.'+
			--				   	        LEFT (convert(varchar,@TotalFPJ),3) + '-' +
			--						    RIGHT(convert(varchar,YEAR(getdate())),2) + '.' +
			--						    RIGHT(convert(bigint,@TotalFPJ) + 1,8))
            --revised...
            set @TotalFPJX  = RIGHT('00000000000'+convert(varchar(11),@TotalFPJ),11)
			set @CurrentFPJ = (select LEFT (convert(varchar,@CurrentTaxTransCode) + '000',3)+'.'+
							   	      LEFT (convert(varchar,@TotalFPJX),3) + '-' +
									  RIGHT(convert(varchar,YEAR(getdate())),2) + '.' +
									  RIGHT('00000000'+convert(varchar,(convert(bigint,@TotalFPJ)+1)),8))
			
			--insert to tabel GenerateTax
			insert into
				GnGenerateTax(
					CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
					FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
			) 
			select 
				CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode
				, @CurrentFPJ FPJGovNo
				, FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
			from 
				#f3
			where CompanyCode = @CurrentCompanyCode
			  and BranchCode = @CurrentBranchCode
			  and DocNo = @CurrentDocNo
			  and TaxTransCode = @CurrentTaxTransCode

			-- update Master Sequence
			if convert(bigint,@TotalFPJ) + 1 < convert(bigint,@EndFPJ)
			begin
				update	GnMstFPJSeqNo
				set		FPJSeqNo = convert(bigint,@TotalFPJ) + 1
				where	CompanyCode= @CompanyCode
				  and	(
							(case when @IsUnion = 0 then BranchCode end)= @BranchCode
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
						) 
				  and	Year = YEAR(getdate())
				  and	SeqNo = (select MIN(SeqNo)
								   from GnMstFPJSeqNo 
								  where CompanyCode = @CompanyCode 
								  and	(
											(case when @IsUnion = 0 then BranchCode end)= @BranchCode
											or (case when @IsUnion = 1 then BranchCode end) = 
												(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
										) 
									and Year = YEAR(getdate())
									and isActive = 1
									and EffectiveDate <= getdate()
									and isnull(BeginTaxNo,0) <> 0 
									and isnull(EndTaxNo,0) <> 0)
			end
			else
			begin
				update GnMstFPJSeqNo
				set FPJSeqNo = convert(bigint,@TotalFPJ) + 1, isActive = 0
				where CompanyCode = @CompanyCode
				  and	(
							(case when @IsUnion = 0 then BranchCode end)= @BranchCode
							or (case when @IsUnion = 1 then BranchCode end) = 
								(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
						) 
				  and Year = YEAR(getdate())
				  and SeqNo = (select MIN(SeqNo)
								   from GnMstFPJSeqNo 
								  where CompanyCode = @CompanyCode 
								  and	(
											(case when @IsUnion = 0 then BranchCode end)= @BranchCode
											or (case when @IsUnion = 1 then BranchCode end) = 
												(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
										) 
									and Year = YEAR(getdate())
									and isActive = 1
									and EffectiveDate <= getdate()
									and isnull(BeginTaxNo,0) <> 0 
									and isnull(EndTaxNo,0) <> 0)
			end

			---- update Sparepart
			update	SPTrnSFPJHdr
			set		FPJGovNo= @CurrentFPJ
					,FPJSignature= a.FPJGovDate
			from	#f3 a, SPTrnSFPJHdr b
			where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo 
				and b.CompanyCode = @CurrentCompanyCode and b.BranchCode = @CurrentBranchCode and b.InvoiceNo = @CurrentDocNo

			-- update Service
			update	SVTrnFakturPajak
			set		FPJGovNo= @CurrentFPJ
					,SignedDate= a.FPJGovDate
			from	#f3 a, SVTrnFakturPajak b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.FPJNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.FPJNo = @CurrentDocNo

			-- update Sales
			update	OmFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.FPJGovDate 
			from	#f3 a, OmFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo

			-- update Finance
			update	ArFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.FPJGovDate
			from	#f3 a, ArFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo
				
			FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode
		END
	CLOSE temp
	DEALLOCATE temp
	
	drop table #f1
	drop table #f2

	select convert(varchar,convert(bigint,@TotalFPJ) + 1) FPJGovNo
	drop table #f3

end

-- update TransDate Sparepart
update GnMstCoProfileSpare 
set TransDate = convert(datetime, @FPJDate)
WHERE CompanyCode = @CompanyCode  
	and ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
			or (case when @IsUnion = '1' then BranchCode end) 
				in (select LookUpvalue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
				)
		)
	and convert(datetime, TransDate, 112) < @FPJDate

-- update TransDate Service
update GnMstCoProfileService 
set TransDate = convert(datetime, @FPJDate) 
WHERE CompanyCode = @CompanyCode 
	and ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
			or (case when @IsUnion = '1' then BranchCode end) 
				in (select LookUpvalue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
				)
		)
	and convert(datetime, TransDate, 112) < @FPJDate 

-- update TransDate Sales
update GnMstCoProfileSales 
set TransDate = convert(datetime, @FPJDate) 
WHERE CompanyCode = @CompanyCode 
	and ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
			or (case when @IsUnion = '1' then BranchCode end) 
				in (select LookUpvalue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
				)
		)
	and convert(datetime, TransDate, 112) < @FPJDate 

-- update TransDate Finance
update GnMstCoProfileFinance 
set TransDateAR = convert(datetime, @FPJDate) 
WHERE CompanyCode = @CompanyCode 
	and ((case when @IsUnion = '0' then BranchCode end)= @BranchCode
			or (case when @IsUnion = '1' then BranchCode end) 
				in (select LookUpvalue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and ParaValue = (select ParaValue from gnMstLookUpDtl 
					where CompanyCode= @CompanyCode and CodeID='BRANCH' and LookUpValue= @BranchCode)
				)
		)
	and convert(datetime, TransDateAR, 112) < @FPJDate

END
GO
-- usprpt_GnGenerateSeqTax '6114201','611420101','20101201','20101231','200','amk','(''611420102 FPS/10/000434'',''611420101 FPS/10/000842'')'
-- exec usprpt_GnGenerateSeqTaxOnline @CompanyCode=N'6006408',@BranchCode=N'6006430',@StartDate=N'20130401',@FPJDate=N'20130401',@ProfitCenterCode=N'200',@UserId=N'ga',@DocNo=N'|6006431 FPS/13/000208|',@LastSeqNo=90080014046,@TaxCabCode=N'000'
ALTER procedure [dbo].[usprpt_GnGenerateSeqTaxOnline]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@StartDate as varchar(8)
	,@FPJDate as varchar(8)
	,@ProfitCenterCode as varchar(3)
	,@UserId as varchar(15)
	,@DocNo as varchar(5000)
	,@LastSeqNo as decimal
	,@TaxCabCode as varchar(3)
AS
BEGIN

declare @t_tax table(
	CompanyCode varchar(15)
	,BranchCode varchar(15)
	,ProfitCenterCode varchar(3)
	,DocNo varchar(15)
	,DocDate varchar(15)
	,DueDate datetime
	,RefNo varchar(15)
	,RefDate datetime
	,TaxTransCode varchar(2)
)

if @ProfitCenterCode='' or @ProfitCenterCode='300'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '300' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, convert(varchar,DueDate,112) DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
						AND CustomerCode = a.CustomerCodeBill AND ProfitCenterCode = '300'
			) AS TaxTransCode
	FROM	SpTrnSFPJHdr a
	WHERE	CompanyCode = @CompanyCode  
			--AND BranchCode like @BranchCode
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end) = BranchCode+' '+InvoiceNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|'+BranchCode+' '+InvoiceNo+'|%')
	GROUP BY CompanyCode, BranchCode,InvoiceNo, CustomerCodeBill,convert(varchar,InvoiceDate,112),convert(varchar,DueDate,112)
end

if @ProfitCenterCode='' or @ProfitCenterCode='200'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '200' AS ProfitCenterCode, FPJNo AS DocNo, convert(varchar,FPJDate,112) AS DocDate, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = SVTrnFakturPajak.CompanyCode AND BranchCode = SVTrnFakturPajak.BranchCode 
						AND CustomerCode = SVTrnFakturPajak.CustomerCodeBill AND ProfitCenterCode = '200'
			) AS TaxTransCode
	FROM	SVTrnFakturPajak
	WHERE	CompanyCode = @CompanyCode 
			--AND BranchCode like @BranchCode
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND IsLocked= 0
			AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+FPJNo end)=BranchCode+' '+FPJNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+FPJNo + '|%'
			)
end

if @ProfitCenterCode='' or @ProfitCenterCode='100'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '100' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = OmFakturPajakHdr.CompanyCode AND BranchCode = OmFakturPajakHdr.BranchCode 
						AND CustomerCode = OmFakturPajakHdr.CustomerCode AND ProfitCenterCode = '100') AS TaxTransCode
	FROM	OmFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode 
			--AND BranchCode like @BranchCode
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
			)
end

if @ProfitCenterCode='' or @ProfitCenterCode='000'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '000' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, DueDate
			, FPJNo AS RefNo, FPJDate AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = ARFakturPajakHdr.CompanyCode AND BranchCode = ARFakturPajakHdr.BranchCode 
						AND CustomerCode = ARFakturPajakHdr.CustomerCode AND ProfitCenterCode = '000'
			) AS TaxTransCode
	FROM	ARFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode 
			--AND BranchCode like @BranchCode
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
			)
end

select * into #f1
from (
	select row_number() over(order by DocDate,BranchCode,ProfitCenterCode asc) OrderNo,*
	from @t_tax
) #f1

if(Convert(varchar,@FPJDate,112) < '20130401')
begin
	-- create FPJGovNo
	select * into #f3 
	from (
		select 
			a.OrderNo,a.CompanyCode,a.BranchCode,year(DocDate) PeriodTaxYear
			,month(DocDate) PeriodTaxMonth,ProfitCenterCode
			,left(TaxTransCode+'000',3)+'.'+
			right('000'+@TaxCabCode,3)+'-'+
			right( isnull(convert(varchar(4),year(DocDate)),year(getDate())),2 )+'.'+ 
			right( '00000000'+convert(varchar(8),@LastSeqNo+a.OrderNo),8 ) FPJGovNo
			,DocDate as FPJGovDate,DocNo,convert(datetime,DocDate) DocDate,RefNo,RefDate,@UserId CreatedBy,getDate() CreatedDate
		from 
			#f1 a
	) #f3


	-- insert to tabel GenerateTax
	insert into
		GnGenerateTax(
			CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
			FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	) 
	select 
		CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
		FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	from 
		#f3

	drop table #f1

	-- update Sparepart
	update	SPTrnSFPJHdr
	set		FPJGovNo= a.FPJGovNo
			,FPJSignature= a.FPJGovDate
	from	#f3 a, SPTrnSFPJHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Service
	update	SVTrnFakturPajak
	set		FPJGovNo= a.FPJGovNo
			,SignedDate= a.FPJGovDate
	from	#f3 a, SVTrnFakturPajak b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.FPJNo

	-- update Sales
	update	OmFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate 
	from	#f3 a, OmFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Finance
	update	ArFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate
	from	#f3 a, ArFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	select top 1 convert(decimal,right(FPJGovNo,8)) from #f3 order by right(FPJGovNo,8) desc
	drop table #f3
end
else
begin
---------------------------------------------------------------------------------------------------
 --									Region Setelah Tanggal 1 April 2013                           --
 ---------------------------------------------------------------------------------------------------
	Declare @TotalFPJ				varchar(25)
	Declare @TotalFPJX				varchar(25)
	Declare @EndFPJ					varchar(25)
	Declare @CurrentFPJ				varchar(25)
	Declare @CurrentDocNo			varchar(100)
	Declare @CurrentCompanyCode		varchar(15)
	Declare @CurrentBranchCode		varchar(15)
	Declare @CurrentTaxTransCode	varchar(2)
	Declare @OrderNo				varchar(10)

	DECLARE temp CURSOR FOR
	SELECT	CompanyCode, BranchCode, DocNo, TaxTransCode, OrderNo
	FROM	#f1

	OPEN temp
	FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode,@OrderNo
	WHILE @@FETCH_STATUS = 0
		BEGIN
		--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		--									Penambahan no Faktur Pajak
		--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
									set @TotalFPJ =   @LastSeqNo + @OrderNo
		--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
												   
            --update by Hasim (6 Jan 2014), because could be problem if length of tax no less than 11...
            --original...
			--set @CurrentFPJ = (select LEFT (convert(varchar,@CurrentTaxTransCode) + '000',3)+'.'+
			--							LEFT (convert(varchar,@TotalFPJ),3) + '-' +
			--							RIGHT(convert(varchar,YEAR(getdate())),2) + '.' +
			--							RIGHT(convert(bigint,@TotalFPJ),8))
            --revised...
            set @TotalFPJX  = RIGHT('00000000000'+convert(varchar(11),@TotalFPJ),11)
			set @CurrentFPJ = (select LEFT (convert(varchar,@CurrentTaxTransCode) + '000',3)+'.'+
									  LEFT (convert(varchar,@TotalFPJX),3) + '-' +
									  RIGHT(convert(varchar,YEAR(getdate())),2) + '.' +
									  RIGHT(convert(varchar,@TotalFPJX),8))

			--insert to tabel GenerateTax
			insert into
				GnGenerateTax(
					CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
					FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
			) 
			select 
				CompanyCode, BranchCode,year(DocDate) PeriodTaxYear, month(DocDate) PeriodTaxMonth, ProfitCenterCode
				, @CurrentFPJ FPJGovNo
				, DocDate as FPJGovDate, DocNo, DocDate , RefNo, RefDate, @UserId CreatedBy,getDate() CreatedDate
			from 
				#f1
			where CompanyCode = @CurrentCompanyCode
			  and BranchCode = @CurrentBranchCode
			  and DocNo = @CurrentDocNo
			  and TaxTransCode = @CurrentTaxTransCode

			-- update Sparepart
			update	SPTrnSFPJHdr
			set		FPJGovNo= @CurrentFPJ
					,FPJSignature= a.DocDate
			from	#f1 a, SPTrnSFPJHdr b
			where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo 
				and b.CompanyCode = @CurrentCompanyCode and b.BranchCode = @CurrentBranchCode and b.InvoiceNo = @CurrentDocNo

			-- update Service
			update	SVTrnFakturPajak
			set		FPJGovNo= @CurrentFPJ
					,SignedDate= a.DocDate
			from	#f1 a, SVTrnFakturPajak b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.FPJNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.FPJNo = @CurrentDocNo

			-- update Sales
			update	OmFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.DocDate 
			from	#f1 a, OmFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo

			-- update Finance
			update	ArFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.DocDate
			from	#f1 a, ArFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo
				
			FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode,@OrderNo
		END
	CLOSE temp
	DEALLOCATE temp
	
	drop table #f1

	select @TotalFPJ FPJGovNo
end

-- update TransDate Sparepart
update GnMstCoProfileSpare 
set TransDate = convert(datetime, @FPJDate)
WHERE CompanyCode = @CompanyCode  
	--AND BranchCode like @BranchCode
	and convert(datetime, TransDate, 112) < @FPJDate

-- update TransDate Service
update GnMstCoProfileService 
set TransDate = convert(datetime, @FPJDate) 
WHERE CompanyCode = @CompanyCode 
	--AND BranchCode like @BranchCode
	and convert(datetime, TransDate, 112) < @FPJDate 

-- update TransDate Sales
update GnMstCoProfileSales 
set TransDate = convert(datetime, @FPJDate) 
WHERE CompanyCode = @CompanyCode 
	--AND BranchCode like @BranchCode
	and convert(datetime, TransDate, 112) < @FPJDate 

-- update TransDate Finance
update GnMstCoProfileFinance 
set TransDateAR = convert(datetime, @FPJDate) 
WHERE CompanyCode = @CompanyCode 
	--AND BranchCode like @BranchCode
	and convert(datetime, TransDateAR, 112) < @FPJDate


END
GO
ALTER procedure [dbo].[uspfn_GnGetDataWSMRR]
as

declare @CompanyCode  varchar(20)
declare @BranchCode   varchar(20)
declare @DealerCode   varchar(10)
declare @ProductType  varchar(10)
declare @TotalItem    int
declare @LastDate     datetime

declare @T_WSMRR     table (Line varchar(max), SeqNo int)
declare @T_WSMRR_DTL table 
(
    PoliceRegNo varchar(50),
    VinNo       varchar(50),
    ServiceType char(1),
    Initial     char(1), 
    ServiceDate datetime,
    Odometer    numeric(10,0),
    Working     varchar(max),
    CustStatify char(1),
    ReasStatify char(1),
    RemaStatify char(3),
    ReasonDesc  varchar(max),
    Solution    varchar(max),
    ContactCust char(1),
    ReasContact char(2),
    IsBooking   char(1),
    BookingType char(1),
    BookingDate datetime,
    CustComing  char(1),
    CreatedDate datetime,
    BranchCode  varchar(10),
    SrvStatus   varchar(10)
)

set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr);
set @BranchCode  = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0);
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode);
set @ProductType = (select top 1 ProductType from gnMstCoProfile where CompanyCode = @CompanyCode and BranchCode = @BranchCode);

set nocount on

insert into @T_WSMRR_DTL
select top 2500 replace(s.PoliceRegNo, '	','')
     , replace(s.ChassisCode, '	','') + convert(varchar, s.ChassisNo) VinNo 
     , ServiceType = isnull((
		case @ProductType 
			when '4W' then (case when (s.JobType like 'PB%' or s.JobType like 'FSC%') then 'R' else 'N' end)
			when '2W' then (case when (s.JobType like 'FSC%') then 'K' when (s.JobType = 'CLAIM') then 'C' else 'N' end)
			else ''
		end), '')
     , Initials = isnull((
		case @ProductType 
			when '4W' then (case r.VisitInitial when '10' then 'B' when '20' then 'W' else 'R' end)
			when '2W' then (case when (s.JobType like 'FSC%') then substring(JobType, 5, 1) else 'N' end)
			else ''
		end), '')
     , s.JobOrderDate as ServiceDate
     , s.Odometer
     , s.JobType Working
     , case r.IsSatisfied when 1 then 'Y' else 'N' end as CustomerSatisfy
     , isnull(r.StatisfyReasonGroup, '') ReasonNotSatisfy
     , isnull(r.StatisfyReasonCode, '') RemarksNotSatisfy
	 , replace(replace(replace(r.Reason, '	',''), CHAR(10), ', '), CHAR(13), ', ') ReasonDesc
	 , isnull((
		select top 1 replace(replace(convert(varchar, Remarks), CHAR(10), ', '), CHAR(13), ', ') from svTrnInvoice
		 where CompanyCode = s.CompanyCode
		   and BranchCode = s.BranchCode
		   and JobOrderNo = s.JobOrderNo
		), '') Solution
	 , case r.IsConfirmed when 1 then 'Y' else 'N' end as ContactCustomer
	 , isnull(r.CannotCallCode, '') ReasonNotContactCustomer
	 , case isnull(r.IsBooked, 0) when 1 then 'Y' else 'N' end as IsCustomerBooking
	 , 'D' BookingType
	 , isnull(r.BookingDate, '19000101') 
	 , case isnull(r.IsVisited, 0) when 1 then 'Y' else 'N' end as CustomerComing
	 , r.CreatedDate
	 , g.DealerCodeWSMR
	 , s.ServiceStatus
  from svTrnDailyRetention r
  left join svTrnService s
    on s.CompanyCode = r.CompanyCode
   and s.BranchCode = r.BranchCode
   and s.ChassisCode = r.ChassisCode
   and s.ChassisNo = r.ChassisNo
   and s.CustomerCode = r.CustomerCode
   and r.PeriodYear = year(s.JobOrderDate)
   and r.PeriodMonth = month(s.JobOrderDate)
   and s.ServiceStatus != '6'
  left join gnMstCoProfileService g
    on g.CompanyCode = s.CompanyCode
   and g.BranchCode = s.BranchCode
 where r.CompanyCode = @CompanyCode
   and isnull(s.ChassisCode, '') <> ''
   and isnull(r.CreatedDate, convert(datetime, '19000101'))
	> isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'WSMRR'
     order by LastSendDate desc
    ), convert(datetime, '18990101'))   
 order by r.CreatedDate
 
set @TotalItem = (select count(*) from @T_WSMRR_DTL) 
set @LastDate  = (select top 1 CreatedDate from @T_WSMRR_DTL order by CreatedDate desc)
                   
insert into @T_WSMRR 
select 'HWSMRR' 
+ left(@DealerCode + replicate(' ', 10), 10)
+ left('1000000' + replicate(' ', 10), 10)
+ left((select top 1 isnull(CompanyName, '')
          from gnMstOrganizationHdr
         where CompanyCode = @CompanyCode)
	   + replicate(' ', 50)
	   , 50)
+ right(replicate('0', 6) + convert(varchar, @TotalItem), 6)
+ (select replace(convert(varchar, @LastDate,111),'/',''))
+ (select top 1 case ProductType
		when '2W' then 'A' 
		when '4W' then 'B' 
		else 'C'  
		end 
	  from gnMstCoProfile
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode)
+ replicate(' ', 326)
+ replicate(' ', 11)
, 0	   

insert into @T_WSMRR 
select '1'
     + left(PoliceRegNo + replicate(' ', 10), 10)
     + left(VinNo + replicate(' ', 20), 20)
     + ServiceType + Initial
     + replace((select replace(convert(varchar, ServiceDate,111),'/','')), '19000101', '        ')
     + right(replicate('0', 7) + convert(varchar, Odometer), 7)
     + left(Working + replicate(' ', 100), 100)
     + CustStatify + ReasStatify + RemaStatify
     + left(ReasonDesc + replicate(' ', 100), 100)
     + left(replace(Solution, '
', ', ') + replicate(' ', 150), 150)
     + ContactCust + ReasContact + IsBooking + BookingType
     + replace((select replace(convert(varchar, BookingDate,111),'/','')), '19000101', '        ')
     + CustComing
     + left(BranchCode + replicate(' ', 10), 10)
     + case when (SrvStatus in ('7','8','9','A','B')) then '1' else '0' end
     , 1
  from @T_WSMRR_DTL

select @LastDate as LastDate 
select Line from @T_WSMRR 
 order by SeqNo
GO
ALTER procedure [dbo].[usprpt_SvRpCrm003V2_DrhPer]
	@CompanyCode	  varchar(15),
	@BranchCode		  varchar(15),
	@OptionType		  varchar(100), 
	@ServiceDateFrom  varchar(15),
	@ServiceDateTo    varchar(15),
	@ReminderDateFrom varchar(15),
	@ReminderDateTo   varchar(15),
	@FollowUpDateFrom varchar(15),
	@FollowUpDateTo   varchar(15)
as

BEGIN
    select * into #t1
      from ( select CompanyCode, BranchCode, ChassisCode, ChassisNo, VisitInitial, CustomerCategory, 
                    RetentionNo, PMNow, PMNext, ReminderDate, IsConfirmed, IsBooked, BookingDate, 
                    IsVisited, FollowUpDate, IsSatisfied, Reason, LastRemark
               from svTrnDailyRetention a
              where RetentionNo = (select top 1 RetentionNo from svTrnDailyRetention
                                    where CompanyCode=a.CompanyCode
                                      and BranchCode =a.BranchCode
                                      and ChassisCode=a.ChassisCode
                                      and ChassisNo  =a.ChassisNo
                                    order by RetentionNo desc) ) #t1
      
	select p.CompanyName, year(getdate()) PeriodYear, DateName(month,DateAdd(month,month(GetDate()),0)-1) PeriodMonth,
	       a.CustomerCode, d.VisitInitial, e.LookUpValueName Inisial, b.BasicModel TypeA,
		   case when b.TransmissionType is null or b.TransmissionType = ' ' then 'MT' else b.TransmissionType end TM,
		   b.ProductionYear ProdYear, b.EngineCode, b.EngineNo, b.ChassisCode, 
		   b.ChassisNo, c.CustomerName, c.PhoneNo, c.OfficePhoneNo, c.HPNo,
		   case when (convert(varchar,b.LastServiceDate,112)='19000101') then a.JobOrderDate 
		        when b.LastServiceDate < a.JobOrderDate                  then a.JobOrderDate
		        else b.LastServiceDate 
		    end VisitDate,
		   a.Odometer, d.PMNow, d.PMNext, 
		   DateAdd(MONTH,3, b.LastServiceDate) EstimationNextVisit,
		   case(d.ReminderDate) when '19000101' then NULL else d.ReminderDate end ReminderDate,
		   case(d.IsConfirmed)  when '1'        then 'Ya' else 'Tidak'        end IsConfirmed,
		   case(d.IsBooked)     when '1'        then 'Ya' else 'Tidak'        end IsBooked,
		   case(d.BookingDate)  when '19000101' then NULL else d.BookingDate  end BookingDate,
		   case(d.IsVisited)    when '1'        then 'Ya' else 'Tidak'        end IsVisited,
		   case(d.FollowUpDate) when '19000101' then NULL else d.FollowUpDate end FollowUpDate,
		   case(d.IsSatisfied)  when '1'        then 'Ya' else 'Tidak'        end IsSatisfied,
		   d.Reason, d.LastRemark KetRemark, a.ServiceRequestDesc,
		   convert(varchar,g.Remarks) Recomend, d.RetentionNo,
		   isnull(c.Address1,'')+' '+isnull(c.Address2,'')+' '+isnull(c.Address3,'')+' '+isnull(c.Address4,'') Address,
		   case when b.ContactName    is null then convert(varchar,c.CustomerName) else b.ContactName end ContactName,
		   case when b.ContactAddress is null then isnull(c.Address1,'')+' '+isnull(c.Address2,'')+' '+isnull(c.Address3,'')+' '+isnull(c.Address4,'') else b.ContactAddress end ContactAddress,
		   case when b.ContactPhone   is null then c.PhoneNo else b.ContactPhone end ContactPhone,
		   h.EmployeeName ForemanName, i.EmployeeName MechanicName, b.PoliceRegNo, d.RetentionNo, a.JobOrderNo
	  from svTrnService a  
	       left join SvMstCustomerVehicle b  
		          on b.Companycode =a.CompanyCode   
	             and b.ChassisCode =a.ChassisCode   
	             and b.ChassisNo   =a.ChassisNo  
	       left join GnMstCustomer c  
		          on c.CompanyCode =a.CompanyCode  
	             and c.CustomerCode=a.CustomerCode  
	       left join #t1 d --svTrnDailyRetention d  
		          on d.CompanyCode =a.CompanyCode  
	             and d.BranchCode  =a.BranchCode 
	             and d.ChassisCode =a.ChassisCode 
	             and d.ChassisNo   =a.ChassisNo  
	       left join gnMstLookupDtl e  
		          on e.CompanyCode =a.CompanyCode  
	             and e.CodeID      ='CIRS'  
	             and e.LookupValue =d.VisitInitial  
	       left join gnMstLookUpDtl f 
	              on b.CompanyCode =a.CompanyCode
	             and f.CodeId      ='CCRS'
	             and f.LookUpValue =d.CustomerCategory
	       left join svTrnInvoice g 
	              on g.CompanyCode =a.CompanyCode
	             and g.BranchCode  =a.BranchCode
	             and g.ProductType =a.ProductType
	             and g.InvoiceNo   =a.InvoiceNo
	       left join gnMstEmployee h 
	              on h.CompanyCode =a.CompanyCode
	             and h.BranchCode  =a.BranchCode
	             and h.EmployeeID  =a.ForemanID
	       left join gnMstEmployee i 
	              on i.CompanyCode =a.CompanyCode
	             and i.BranchCode  =a.BranchCode
	             and i.EmployeeID  =a.MechanicID
	       left join gnMstCoProfile p
	              on p.CompanyCode =a.CompanyCode
	             and p.BranchCode  =a.BranchCode
	 where a.CompanyCode = @CompanyCode  
	   and a.BranchCode  = @BranchCode  
	   and a.ServiceStatus in ('7','9')  -- 7:Invoice, 9:Faktur Pajak 
	   and (b.LastServiceDate is null or convert(varchar,a.JobOrderDate,112) >= convert(varchar,b.LastServiceDate,112))  
	   and (case when @ServiceDateFrom != '' 
	             then convert(varchar,a.JobOrderDate,112) 
	             else @ServiceDateFrom 
	        end) between @ServiceDateFrom and @ServiceDateTo
	   and (case when @ReminderDateFrom != '' 
	             then convert(varchar,d.ReminderDate,112) 
	             else @ReminderDateFrom 
	        end) between @ReminderDateFrom and @ReminderDateTo
	   and (case when @FollowUpDateFrom != '' 
	             then convert(varchar,d.FollowUpDate,112) 
	             else @FollowUpDateFrom 
	        end) between @FollowUpDateFrom and @FollowUpDateTo
     order by a.JobOrderNo
     
	drop table #t1
END
GO
ALTER procedure [dbo].[uspfn_GnGetDataWSMRS]
as

declare @CompanyCode  varchar(20)
declare @BranchCode   varchar(20)
declare @DealerCode   varchar(10)
declare @ProductType  varchar(10)
declare @TotalItem    int
declare @LastDate     datetime

declare @T_WSMRS     table (Line varchar(max), SeqNo int)
declare @T_WSMRS_DTL table 
(
    PoliceRegNo varchar(50),
    VinNo       varchar(50),
    ServiceType char(1),
    Initial     char(1), 
    ServiceDate datetime,
    Odometer    numeric(10,0),
    Working     varchar(max),
    CustStatify char(1),
    ReasStatify char(1),
    RemaStatify char(3),
    ReasonDesc  varchar(max),
    Solution    varchar(max),
    ContactCust char(1),
    ReasContact char(2),
    IsBooking   char(1),
    BookingType char(1),
    BookingDate datetime,
    CustComing  char(1),
    CreatedDate datetime,
    BranchCode  varchar(10),
    SrvStatus   varchar(10),
    SaName      char(50)
)

set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr);
set @BranchCode  = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0);
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode);
set @ProductType = (select top 1 ProductType from gnMstCoProfile where CompanyCode = @CompanyCode and BranchCode = @BranchCode);

set nocount on


--select * from 

insert into @T_WSMRS_DTL
select top 2500 a.PoliceRegNo
	 , replace(ChassisCode, '	','') + convert(varchar, ChassisNo) VinNo  
     , ServiceType = isnull((
		case @ProductType 
			when '4W' then (case when (a.JobType like 'PB%' or a.JobType like 'FSC%') then 'R' else 'N' end)
			when '2W' then (case when (a.JobType like 'FSC%') then 'K' when (a.JobType = 'CLAIM') then 'C' else 'N' end)
			else ''
		end), '')
     , Initials = isnull((
		case @ProductType 
			when '4W' then ' '
			when '2W' then (case when (a.JobType like 'FSC%') then substring(a.JobType, 5, 1) else 'N' end)
			else ''
		end), '')
     , a.JobOrderDate as ServiceDate
     , a.Odometer
     , a.JobType Working
     , '' CustomerSatisfy
     , '' ReasonNotSatisfy
     , '' RemarksNotSatisfy
	 , '' ReasonDesc
	 , '' Solution
	 , '' ContactCustomer
	 , '' ReasonNotContactCustomer
	 , case rtrim(isnull(a.BookingNo, '')) when '' then 'N' else 'Y' end as IsCustomerBooking
	 , case rtrim(isnull(a.BookingNo, '')) when '' then ' ' else 'D' end as BookingType
	 , convert(varchar, a.BookingDate, 112) 
	 , 'Y' as CustomerComing
	 , a.JobOrderDate CreatedDate
	 , b.DealerCodeWSMR as BranchCode
	 , a.ServiceStatus
	 , isnull(c.EmployeeName, '') as SaName
  from svTrnService a
  left join gnMstCoProfileService b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
  left join gnMstEmployee c
    on c.CompanyCode = a.CompanyCode
   and c.BranchCode = a.BranchCode
   and c.EmployeeID = a.ForemanID
 where 1 = 1
   and isnull(a.ChassisCode, '') <> ''
   and isnull(a.JobOrderDate, convert(datetime, '19000101'))
	> isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'WSMRS'
     order by LastSendDate desc
    ), convert(datetime, '18990101'))   
   and a.ServiceStatus != '6'
 order by a.CreatedDate
 
set @TotalItem = (select count(*) from @T_WSMRS_DTL) 
set @LastDate  = (select top 1 CreatedDate from @T_WSMRS_DTL order by CreatedDate desc)
                   
insert into @T_WSMRS 
select 'HWSMRS' 
+ left(@DealerCode + replicate(' ', 10), 10)
+ left('1000000' + replicate(' ', 10), 10)
+ left((select top 1 isnull(CompanyName, '')
          from gnMstOrganizationHdr
         where CompanyCode = @CompanyCode)
	   + replicate(' ', 50)
	   , 50)
+ right(replicate('0', 6) + convert(varchar, @TotalItem), 6)
+ (select replace(convert(varchar, @LastDate,111),'/',''))
+ (select top 1 case ProductType
		when '2W' then 'A' 
		when '4W' then 'B' 
		else 'C'  
		end 
	  from gnMstCoProfile
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode)
+ replicate(' ', 387)
, 0	   

insert into @T_WSMRS 
select '1'
     + left(PoliceRegNo + replicate(' ', 10), 10)
     + left(VinNo + replicate(' ', 20), 20)
     + ServiceType + Initial
     + replace((select replace(convert(varchar, ServiceDate,111),'/','')), '19000101', '        ')
     + right(replicate('0', 7) + convert(varchar, Odometer), 7)
     + left(Working + replicate(' ', 100), 100)
     + CustStatify + ReasStatify + RemaStatify
     + left(ReasonDesc + replicate(' ', 100), 100)
     + left(replace(Solution, '
', ', ') + replicate(' ', 150), 150)
     + ContactCust + ReasContact + IsBooking + BookingType
     + replace((select replace(convert(varchar, BookingDate,111),'/','')), '19000101', '        ')
     + CustComing
     + left(BranchCode + replicate(' ', 10), 10)
     + case when (SrvStatus in ('7','8','9','A','B')) then '1' else '0' end
     + left(SaName + replicate(' ', 50), 50)
     , 1
  from @T_WSMRS_DTL

select @LastDate as LastDate 
select Line from @T_WSMRS order by SeqNo
GO
-- usprpt_GlRpRgs002ASum '6115204','2011','0','','10','12','','','','','','','','','','','','','','','0','DETAIL'

ALTER PROCEDURE [dbo].[usprpt_GlRpRgs002ASumV2] 
(
	@CompanyCode  varchar(15),
	@FiscalYear   varchar(15),
	@Status varchar(15),
	@DocSource char(2),
	@PeriodeNum01 varchar(15),
	@PeriodeNum02 varchar(15),
	@AccComp01 varchar(3),
	@AccComp02 varchar(3),
	@AccBranch01 varchar(3),
	@AccBranch02 varchar(3),
	@AccCostCenter01  varchar(3),
	@AccCostCenter02  varchar(3),
	@AccProdType01 varchar(5),
	@AccProdType02 varchar(5),
	@AccNatural01 varchar(6),
	@AccNatural02 varchar(6),
	@AccInterComp01 varchar(3),
	@AccInterComp02 varchar(3),	
	@AccFutureUse01 varchar(3),
	@AccFutureUse02 varchar(3),
	@Trx char(1),
	@ReportType   varchar(35),
	@ID int
)
AS
BEGIN

declare @docHpp varchar(3)
set @docHpp = (select top 1 isnull(DocumentPrefix,'') from gnMstDocument where CompanyCode = @CompanyCode and DocumentType='HPP')

declare @docHpu varchar(3)
set @docHpu = (select top 1 isnull(DocumentPrefix,'') from gnMstDocument where CompanyCode = @CompanyCode and DocumentType='HPU')

/* GET BRANCHCODE HOLDING */
----------------------------
DECLARE @BranchCodeHolding VARCHAR(15)
SET @BranchCodeHolding = 
(
SELECT TOP 1 ISNULL(BranchCode, '') FROM GnMstOrganizationDtl WHERE CompanyCode = @CompanyCode AND IsBranch = 0
)

SELECT * INTO #t1 FROM (
SELECT  
	a.CompanyCode
	, a.BranchCode
	, a.ProfitCenterCode
	, a.FiscalYear
	, a.PeriodeNum
	, a.Status
	, b.JournalNo
	, a.JournalDate
	, CASE @ReportType WHEN 'REKAP' THEN ISNULL(SUBSTRING(b.AccountNo, 19, 6), '') ELSE 
		ISNULL(SUBSTRING(b.AccountNo, 9, LEN(b.AccountNo)), '') END AccountNo
	, b.AmountDB AmountDB
	, b.AmountCr AmountCr
	, a.DocSource
	, a.ReffNo
	, case substring(a.ReffNo, 1, 3) 
		when @docHpp then (isnull(e.ReferenceNo, '')+', '+isnull(e.TaxNo, ''))
		when @docHpu then (isnull(f.RefferenceInvoiceNo, '')+', '+isnull(f.RefferenceFakturPajakNo, ''))
		else b.Description end Description
	, CASE ISNULL(a.status, 0) WHEN 0 THEN 'UNPOSTED' WHEN 1 THEN 'UNPOSTED' WHEN 2 THEN 'POSTED' ELSE '' END AS pStatus
FROM glJournal a
INNER JOIN glJournalDtl b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.FiscalYear  = a.FiscalYear
	AND b.JournalNo   = a.JournalNo
LEFT JOIN gnMstAccount c ON c.CompanyCode = a.CompanyCode 
	AND c.BranchCode = a.BranchCode
	AND c.AccountNo = b.AccountNo
LEFT JOIN spTrnPHPP e ON e.CompanyCode = a.CompanyCode
    AND e.BranchCode = a.BranchCode
    AND e.HPPNo = a.ReffNo
LEFT JOIN omTrPurchaseHPP f ON f.CompanyCode = a.CompanyCode
    AND f.BranchCode = a.BranchCode
    AND f.HPPNo = a.ReffNo	
WHERE a.CompanyCode = @CompanyCode
	AND a.BranchCode = a.BranchCode
	AND a.FiscalYear  = @FiscalYear
	AND a.PeriodeNum between @PeriodeNum01 and @PeriodeNum02
	AND a.DocSource = (CASE WHEN @DocSource = '' THEN a.DocSource ELSE @DocSource END)
	AND (a.Status = (CASE @Status WHEN '0' THEN a.Status WHEN '1' THEN '2' WHEN '2' THEN '0' END) 
		  or  a.Status = (CASE @Status WHEN '0' THEN a.Status WHEN '1' THEN '2' WHEN '2' THEN '1' END))
	AND ((CASE WHEN  @AccComp01 = '' THEN substring(b.AccountNo,1,3) END) <> ''
	      or (CASE WHEN  @AccComp01 <> '' THEN substring(b.AccountNo,1,3) END) between @AccComp01 AND @AccComp02)
	AND ((CASE WHEN  @AccBranch01 = '' THEN substring(b.AccountNo,5,3) END) <> ''
	      or (CASE WHEN  @AccBranch01 <> '' THEN substring(b.AccountNo,5,3) END) between @AccBranch01 AND @AccBranch02)
	AND ((CASE WHEN  @AccCostCenter01 = '' THEN substring(b.AccountNo,9,3) END) <> ''
	      or (CASE WHEN  @AccCostCenter01 <> '' THEN substring(b.AccountNo,9,3) END) between @AccCostCenter01 AND @AccCostCenter02)
	AND ((CASE WHEN @AccProdType01 = '' THEN substring(b.AccountNo,13,5) END) <> ''
	      or (CASE WHEN @AccProdType01 <> '' THEN substring(b.AccountNo,13,5) END) between @AccProdType01 AND @AccProdType02)
	AND ((CASE WHEN @AccNatural01 = '' THEN substring(b.AccountNo,19,6) END) <> '' 
		  or (CASE WHEN @AccNatural01 <> '' THEN (CASE @ReportType WHEN 'REKAP' THEN substring(b.AccountNo,19,6) ELSE substring(b.AccountNo,19,6) END) END)
         between @AccNatural01 and @AccNatural02)
	AND ((CASE WHEN @AccInterComp01 = '' THEN substring(b.AccountNo,26,3) END) <> ''
	      or (CASE WHEN @AccInterComp01 <> '' THEN substring(b.AccountNo,26,3) END) between @AccInterComp01 AND @AccInterComp02)
	AND ((CASE WHEN @AccFutureUse01 = '' THEN substring(b.AccountNo,30,3) END) <> ''
	      or (CASE WHEN @AccFutureUse01 <> '' THEN substring(b.AccountNo,30,3) END) between @AccFutureUse01 AND @AccFutureUse02)
	AND b.AccountNo <> (SELECT TOP 1 AccCurrentEarnings FROM fnSystemConfigDtl WHERE CompanyCode = @CompanyCode)
	AND a.Status not in (3,4)	
UNION ALL
SELECT DISTINCT
	a.CompanyCode
	, '0' BranchCode
	, a.ProfitCenterCode
	, a.FiscalYear
	, a.PeriodeNum
	, a.Status
	, '' JournalNo
	, '19000101' AS JournalDate
	, CASE @ReportType WHEN 'REKAP' THEN ISNULL(substring(a.AccountNo, 19, 6), '') ELSE 
		ISNULL(SUBSTRING(a.AccountNo, 9, LEN(a.AccountNo)), '') END AccountNo
	, 0 AS AmountDB
	, 0 AS AmountCr
	, 'TB' AS DocSource
	, '' AS ReffNo
	, '' AS Description
	, CASE ISNULL(a.status, 0) WHEN 0 THEN 'NEW' WHEN 1 THEN 'Balance' WHEN 2 THEN 'Posting' WHEN 3 THEN 'Void' END AS pStatus
FROM glTrAccBalance a 
LEFT JOIN gnMstAccount c ON c.CompanyCode = a.CompanyCode 
	AND c.BranchCode = a.BranchCode
	AND c.AccountNo = a.AccountNo
WHERE a.CompanyCode = @CompanyCode
	AND a.FiscalYear  = @FiscalYear
	AND a.PeriodeNum = @PeriodeNum01 
	AND (a.Status = (case @Status when '0' then a.Status when '1' then '2' when '2' then '0' end) 
		  or  a.Status = (case @Status when '0' then a.Status when '1' then '2' when '2' then '1' end))
	AND ((case when @AccComp01 = '' then substring(a.AccountNo,1,3) end) <> ''
	      or (case when @AccComp01 <> '' then substring(a.AccountNo,1,3) end) between @AccComp01 AND @AccComp02)
	AND ((case when @AccBranch01 = '' then substring(a.AccountNo,5,3) end) <> ''
	      or (case when @AccBranch01 <> '' then substring(a.AccountNo,5,3) end) between @AccBranch01 AND @AccBranch02)
	AND ((case when @AccCostCenter01 = '' then substring(a.AccountNo,9,3) end) <> ''
	      or (case when @AccCostCenter01 <> '' then substring(a.AccountNo,9,3) end) between @AccCostCenter01 AND @AccCostCenter02)
	AND ((case when @AccProdType01 = '' then substring(a.AccountNo,13,5) end) <> ''
	      or (case when @AccProdType01 <> '' then substring(a.AccountNo,13,5) end) between @AccProdType01 AND @AccProdType02)
	AND ((case when @AccNatural01 = '' then substring(a.AccountNo,19,6) end) <> '' 
		  or (case when @AccNatural01 <> '' then (case @ReportType when 'REKAP' then substring(a.AccountNo,19,6) else substring(a.AccountNo,19,6) end) end)
         between @AccNatural01 and @AccNatural02)
	AND ((case when @AccInterComp01 = '' then substring(a.AccountNo,26,3) end) <> ''
	      or (case when @AccInterComp01 <> '' then substring(a.AccountNo,26,3) end) between @AccInterComp01 AND @AccInterComp02)
	AND ((case when @AccFutureUse01 = '' then substring(a.AccountNo,30,3) end) <> ''
	      or (case when @AccFutureUse01 <> '' then substring(a.AccountNo,30,3) end) between @AccFutureUse01 AND @AccFutureUse02)
	AND a.AccountNo <> (SELECT TOP 1 AccCurrentEarnings FROM fnSystemConfigDtl WHERE CompanyCode = @CompanyCode)
) #t1

SELECT (ROW_NUMBER() OVER (ORDER BY AccountNo, PeriodeNum, JournalDate, JournalNo)) AS RecNo, * 
INTO #t2 FROM (
SELECT distinct
	a.CompanyCode
	, a.FiscalYear
	, a.PeriodeNum
	, a.Status
	, a.JournalNo
	, a.JournalDate
	, a.AccountNo
	, BegBalance = ISNULL((
		SELECT SUM(ISNULL(BeginBalance, 0))
		  FROM GlTrAccBalance 
		 WHERE CompanyCode = a.CompanyCode
			AND FiscalYear  = a.FiscalYear
			AND (CASE @ReportType WHEN 'REKAP' THEN SUBSTRING(AccountNo, 19, 6) ELSE 
				SUBSTRING(AccountNo, 9, LEN(AccountNo)) END)
                  = a.AccountNo
			AND PeriodeNum = @PeriodeNum01
		),0)
	 , sum(a.AmountDB) AmountDB
	 , sum(a.AmountCr) AmountCr  
	 , a.DocSource	 
	 , a.ReffNo
	 , a.Description
	 , a.pStatus
	 , EndBalance  = convert(decimal(18,2), 0)
	 , ReportGroup = convert(varchar(50), '')
	 , IsLastGroup = convert(bit, 0)
FROM #t1 a
group by a.CompanyCode
	, a.FiscalYear
	, a.PeriodeNum
	, a.Status
	, a.JournalNo
	, a.JournalDate
	, a.AccountNo
	, a.DocSource	 
	, a.ReffNo
	, a.Description
	, a.pStatus
 UNION ALL
 select companycode
	, fiscalyear
	, periodenum
	, status
	, journalno
	, journaldate
	, accountno
	, sum(beginbalance) beginbalance
	, sum(amountdb) amountdb
	, sum(amountcr) amountcr
	, docsource
	, reffno
	, description
	, pstatus
	, EndBalance  = convert(decimal(18,2), 0)
	, ReportGroup = convert(varchar(50), '')
	, IsLastGroup = convert(bit, 0)
 from TempLaporanGLHQ 
 where ID=@ID
 group by CompanyCode
	, FiscalYear
	, PeriodeNum
	, Status
	, JournalNo
	, JournalDate
	, AccountNo
	, DocSource	 
	, ReffNo
	, Description
	, pStatus
)#t2

CREATE UNIQUE NONCLUSTERED INDEX IDX_t2
ON #t2(RecNo);

	
DECLARE @num int, @max int, @bal decimal(18,2), @acc varchar(50)
SET @num = 0
SET @max = ISNULL((SELECT TOP 1 RecNo FROM #t2 ORDER BY RecNo DESC), 0)
SET @bal = 0
SET @acc = ''

WHILE (@num < @max)
BEGIN
	SET @num = @num + 1
	IF (@acc <> ISNULL((SELECT AccountNo FROM #t2 WHERE RecNo = @num), ''))
	BEGIN
		SET @acc = ISNULL((SELECT AccountNo FROM #t2 WHERE RecNo = @num), '')
		SET @bal = ISNULL((SELECT BegBalance FROM #t2 WHERE RecNo = @num), 0)

		IF (@num > 1) UPDATE #t2 SET IsLastGroup = 1 WHERE RecNo = (@num - 1)
	END
	SET @bal = @bal + ISNULL((SELECT(AmountDb - AmountCr) FROM #t2 WHERE RecNo = @num), 0)
	UPDATE #t2 SET EndBalance = @bal WHERE RecNo = @num
END
UPDATE #t2 SET IsLastGroup = 1 WHERE RecNo = @Max

IF  @Trx = '0'
BEGIN
	SELECT  
		a.RecNo
		, a.CompanyCode
		, '0' AS BranchCode
		, a.FiscalYear
		, a.Status
		, a.JournalNo AS DocNo
		, a.JournalDate AS DocDate
		, a.AccountNo
		, CASE @ReportType WHEN 'REKAP' THEN 
			(SELECT TOP 1 ISNULL([Description], '') FROM gnMstSegmentAcc WHERE CompanyCode = a.CompanyCode AND BranchCode = @BranchCodeHolding 
				AND SegAccNo = AccountNo)
		  ELSE 
			(SELECT TOP 1 ISNULL([Description], '') FROM GnMstAccount WHERE CompanyCode = a.CompanyCode AND BranchCode = @BranchCodeHolding
				AND	SUBSTRING(AccountNo, 9, LEN(AccountNo)) = a.AccountNo) END AccDescription
		, a.BegBalance AS SaldoAwal
		, a.AmountDB
		, a.AmountCr
		, a.DocSource
		, a.ReffNo
		, a.Description
	    , a.pStatus
		, a.EndBalance AS Saldo
		, a.ReportGroup
		, a.IsLastGroup
		, SaldoTotal = (SELECT SUM (EndBalance) FROM #t2 WHERE IsLastGroup = 1)
	FROM #t2 a
	WHERE a.JournalDate <> '19000101'
	order by a.RecNo, a.AccountNo asc, a.JournalDate asc, a.JournalNo asc
 END
 ELSE 
 BEGIN
 	 SELECT  
		a.RecNo
		, a.CompanyCode
		, '0' AS BranchCode
		, a.FiscalYear
		, a.Status
		, a.JournalNo AS DocNo
		, a.JournalDate AS DocDate
		, a.AccountNo
		, CASE @ReportType WHEN 'REKAP' THEN 
			(SELECT TOP 1 ISNULL([Description], '') FROM gnMstSegmentAcc WHERE CompanyCode = a.CompanyCode AND BranchCode = @BranchCodeHolding 
				AND SegAccNo = AccountNo)
		  ELSE 
			(SELECT TOP 1 ISNULL([Description], '') FROM GnMstAccount WHERE CompanyCode = a.CompanyCode AND BranchCode = @BranchCodeHolding
				AND	SUBSTRING(AccountNo, 9, LEN(AccountNo)) = a.AccountNo) END AccDescription
		, a.BegBalance AS SaldoAwal
		, a.AmountDB
		, a.AmountCr
		, a.DocSource
		, a.ReffNo
		, a.Description
		, a.pStatus
		, a.EndBalance AS Saldo
		, a.ReportGroup
		, a.IsLastGroup
		, SaldoTotal = (SELECT SUM(EndBalance) FROM #t2 WHERE IsLastGroup = 1)
	FROM #t2 a
	order by a.RecNo, a.AccountNo asc, a.JournalDate asc, a.JournalNo asc
 END

DROP TABLE #t1
DROP TABLE #t2

DELETE TempLaporanGLHQ WHERE ID=@ID
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<WEEKLY SALES REVIEW SA>
-- =============================================
ALTER procedure [dbo].[usprpt_SvRpReport019]  
  @CompanyCode varchar(15)  
 ,@BranchCode varchar(15)  
 ,@EmployeeID varchar(15)
 ,@Month int
 ,@Year int
 ,@ProductType varchar(2)
AS  
BEGIN  

-- ==============================================================================================================================
-- TABLE MASTER
-- ==============================================================================================================================

select * into #TempEmployee FROM (
SELECT employeeID 
FROM gnMstEmployee
WHERE 
1 = 1
AND CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode 
AND TitleCode IN ('3', '7')
AND EmployeeID = (CASE WHEN @EmployeeID = '' THEN EmployeeID ELSE @EmployeeID END)
)#TempEmployee

select * into #TempSPKNo FROM (
SELECT JobOrderNo
FROM svTrnService
WHERE 
1 = 1
AND CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode 
AND ForemanID IN (SELECT EmployeeID FROM #TempEmployee)
) #TempSPKNo

CREATE TABLE #JobGroup
( 
	[JobType]	varchar(15),
	[OM]		INT
)


CREATE TABLE #JobGroupOthers
( 
	[JobType]	varchar(15),
	[GroupJobType]	varchar(15)
)

SELECT * INTO #1 FROM 
(
	SELECT DISTINCT JobType, REPLACE(SUBSTRING(JobType,3,100),'KM','') OM FROM SvMstJob 
	WHERE CompanyCode = '6092401' and ProductType = '4W' and JobType LIKE 'PB%'  AND GroupJobType = 'RTN'
) #1 

DECLARE @JobTypeGroup VARCHAR(MAX)

DECLARE db_cursorGroup CURSOR FOR
SELECT JobType FROM #1


OPEN db_cursorGroup
FETCH NEXT FROM db_cursorGroup INTO @JobTypeGroup

WHILE @@FETCH_STATUS = 0
BEGIN
	BEGIN TRY
		INSERT INTO #JobGroup  SELECT JobType, CAST(OM AS INT) OM FROM #1 WHERE JobType = @JobTypeGroup
	END TRY
	BEGIN CATCH
		INSERT INTO #JobGroupOthers  VALUES (@JobTypeGroup, '')
	END CATCH	
	FETCH NEXT FROM db_cursorGroup INTO @JobTypeGroup
END

INSERT INTO #JobGroupOthers  
SELECT DISTINCT JobType , GroupJobType
FROM SvMstJob 
WHERE CompanyCode = @CompanyCode 
	and ProductType = @ProductType 
	and (JobType NOT IN ('CLAIM', 'FSC01', 'REWORK', 'PDI') 
			AND GroupJobType NOT IN ('RTN', 'CLM', 'FSC'))

UPDATE #JobGroupOthers 
SET GroupJobType = b.GroupJobType
FROM #JobGroupOthers a, (SELECT DISTINCT JoBType, GroupJobType FROM svMstJob WHERE CompanyCode = '6092401' and ProductType = '4W') b
WHERE a.JobType = b.JobType
	AND a.GroupJobType = ''

CLOSE db_cursorGroup
DEALLOCATE db_cursorGroup

DECLARE @JobType	VARCHAR(15)
DECLARE @OdoMeter	INT

CREATE TABLE #Job1 ( -- Above 30.000
	[JobType]	varchar(15) 
)
CREATE TABLE #Job2 ( -- multiply 5000 KM
	[JobType]	varchar(15)
)


DECLARE db_cursor CURSOR FOR
SELECT JobType, OM FROM #JobGroup

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @JobType, @OdoMeter

WHILE @@FETCH_STATUS = 0
BEGIN
	IF (@OdoMeter >= 30000) AND (@Odometer % 10000 = 0)
	BEGIN
		INSERT INTO #Job1 VALUES (@JobType)
	END
	ELSE
	IF (@OdoMeter >=5000) AND (@Odometer % 5000 = 0) 
	BEGIN		
		INSERT INTO #Job2 VALUES (@JobType)
	END

	FETCH NEXT FROM db_cursor INTO @JobType, @OdoMeter
END

CLOSE db_cursor
DEALLOCATE db_cursor 

create table #t_WeekReview(
	 CompanyCode	varchar(15)
	, BranchCode	varchar(15)
	, EmployeeID	varchar(15)
	, EmployeeName	varchar(50)
	, Description	varchar(max)
	, SeqNo			int
	, UOM			varchar(max)
	, Target		decimal
	, Week1 decimal , Week2 decimal, Week3 decimal
	, Week4 decimal	, Week5 decimal 
)

DECLARE @MinusWeek		INT
DECLARE @LastDate		DATETIME
DECLARE @CurrentDate	DATETIME
SET @LastDate = ISNULL((SELECT DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,CONVERT(VARCHAR, @Year, 1) + '-' + CONVERT(VARCHAR, @Month, 1) +'-01'),0))),'')
SET @CurrentDate = CONVERT(VARCHAR, @Year,1) +'-'+ CONVERT(VARCHAR, @Month, 1) +'-01'
SET @MinusWeek = ISNULL((CASE WHEN @Month = 1 THEN 0 
					ELSE 
						CASE WHEN ISNULL((SELECT DATEPART(WEEK, @LastDate)),0) =  ISNULL((SELECT DATEPART(WEEK, @CurrentDate)),0)
						THEN ISNULL((SELECT DATEPART(WEEK, @LastDate)) - 1,0) ELSE ISNULL((SELECT DATEPART(WEEK, @LastDate)),0)
					END END),0)

-- ==============================================================================================================================
-- TOTAL SALES REVENEU
-- =============================================================================================================================

select * into #TempSalesReveneuPvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				,  SUM(TotalDPPAmt) TotalSalesReveneu
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo
		) as Header
		pivot(
			sum(TotalSalesReveneu)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempSalesReveneuPvt

select * into #TempSalesReveneu from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, 'Total Sales Revenue' Description, 1 SeqNo, 'Rp.' UOM
		, (
				select sum(ISNULL(TargetLaborSalesReveneu,0) + ISNULL(TargetPartSalesReveneu,0) + ISNULL(TargetLubricantSalesReveneu,0)) from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempSalesReveneuPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempSalesReveneu
-- ==============================================================================================================================
-- TOTAL LABOR SALES REVENEU 
-- ==============================================================================================================================

select * into #TempLaborSalesReveneuPvt from (
		select *
        from (
			
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				,  SUM(LaborDPPAmt) TotalLaborSalesReveneu
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo
		) as Header
		pivot(
			sum(TotalLaborSalesReveneu)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempLaborSalesReveneu


select * into #TempLaborSalesReveneu from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Total Labor Sales Revenue' Description, 2 SeqNo, 'Rp.' UOM
		, (
				select sum(ISNULL(TargetLaborSalesReveneu,0)) from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempLaborSalesReveneuPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempLaborSalesReveneu

-- ==============================================================================================================================
-- TOTAL PART SALES REVENEU (SPAREPART)
-- ==============================================================================================================================
select * into #TempSalesSparepartReveneuPvt from (
		select *
        from (
			
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				,  SUM(PartsDppAmt) TotalSalesSparepartReveneu
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo
		) as Header
		pivot(
			sum(TotalSalesSparepartReveneu)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempSalesSparepartReveneuPvt

select * into #TempSalesSparepartReveneu from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Total Parts Sales Revenue' Description, 3 SeqNo, 'Rp.' UOM
		, (
					select sum(ISNULL(TargetPartSalesReveneu,0)) from svMstTargetSA
						where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
						and ProductType = @ProductType
		) Target		
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempSalesSparepartReveneuPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempSalesSparepartReveneu


-- ==============================================================================================================================
-- TOTAL OIL & MATERIAL SALES REVENEU
-- ==============================================================================================================================
select * into #TempSalesOilMaterialReveneuPvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				,  SUM(MaterialDPPAmt) TotalSalesOilMaterialReveneu
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo
		) as Header
		pivot(
			sum(TotalSalesOilMaterialReveneu)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempSalesOilMaterialReveneuPvt

select * into #TempSalesOilMaterialReveneu from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Total Lubricant & Sublet Sales revenue' Description, 4 SeqNo, 'Rp.' UOM
		, (
				select sum(ISNULL(TargetLubricantSalesReveneu,0)) from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempSalesOilMaterialReveneuPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempSalesOilMaterialReveneu

-- ==============================================================================================================================
-- ==============================================================================================================================

-- ==============================================================================================================================
-- TOTAL UNIT (WORK ORDER)
-- ==============================================================================================================================

select * into #TempTotalUnitPvt from (
		select * from (
		select 
			inv.CompanyCode
			, inv.BranchCode
			, inv.EmployeeID
			, inv.InvoiceWeek
			, isnull(count(BasicModel),0) TotalUnit
        from 
			(
				select distinct(inv.BasicModel), inv.ChassisCode, inv.ChassisNo, inv.CompanyCode, inv.BranchCode
					, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
						and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
					, day(JobOrderDate) day
					, month(jobOrderDate) month
					, 'W' + substring(Convert(varchar, DATEPART(WEEK, inv.InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek
				from svTrnInvoice inv
				LEFT JOIN omMstVehicle a ON a.CompanyCode = inv.CompanyCode 
					AND a.ChassisCode = inv.ChassisCode
					AND a.ChassisNo = inv.ChassisNo
				left join svMstRefferenceService reff on
					reff.CompanyCode = inv.CompanyCode
					AND reff.ProductType = inv.ProductType
					AND reff.RefferenceCode = inv.BasicModel
				where 
					1 = 1
					and inv.CompanyCode = @CompanyCode 
					and inv.BranchCode = @BranchCode
					and inv.ProductType = @ProductType
					and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
					and Year(inv.InvoiceDate) = @Year
					and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			) inv
		group by inv.CompanyCode,inv.BranchCode, inv.InvoiceWeek, inv.EmployeeID
		)
		as Header
		pivot(
			sum(TotalUnit)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempTotalUnitPvt

select * into #TempTotalUnit from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, 'Total Unit (Work Order)' Description, 5 SeqNo, 'Unit' UOM
		, (
				select sum(ISNULL(TargetUnitPassenger,0) + ISNULL(TargetUnitCommercial,0)) from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempTotalUnitPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempTotalUnit

-- ==============================================================================================================================
-- TOTAL UNIT (PASSENGER)
-- ==============================================================================================================================

select * into #TempTotalPassengerUnitPvt from (
		select * from (
		select 
			inv.CompanyCode
			, inv.BranchCode
			, inv.EmployeeID
			, inv.InvoiceWeek
			, isnull(count(BasicModel),0) TotalUnitPassenger
        from (
				select distinct(inv.BasicModel), inv.ChassisCode, inv.ChassisNo, inv.CompanyCode, inv.BranchCode
					, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
						and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
					, day(JobOrderDate) day
					, month(jobOrderDate) month
					, 'W' + substring(Convert(varchar, DATEPART(WEEK, inv.InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek
				from svTrnInvoice inv
				LEFT JOIN omMstVehicle a ON a.CompanyCode = inv.CompanyCode 
					AND a.ChassisCode = inv.ChassisCode
					AND a.ChassisNo = inv.ChassisNo
				left join svMstRefferenceService reff on
					reff.CompanyCode = inv.CompanyCode
					AND reff.ProductType = inv.ProductType
					AND reff.RefferenceCode = inv.BasicModel
				where 
					1 = 1
					AND inv.CompanyCode = @CompanyCode 
					AND inv.BranchCode = @BranchCode
					AND inv.ProductType = @ProductType
					AND Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
					AND Year(inv.InvoiceDate) = @Year
					AND inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
					AND (reff.isLocked IS NULL OR reff.isLocked = 0)
					
			)inv
			group by inv.CompanyCode,inv.BranchCode, inv.InvoiceWeek, inv.EmployeeID
		) as Header
		pivot(
			sum(TotalUnitPassenger)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempTotalUnitPvt

select * into #TempTotalPassengerUnit from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Passenger' Description, 6 SeqNo, 'Unit' UOM
		, (
				select sum(ISNULL(TargetUnitPassenger,0)) from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempTotalPassengerUnitPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempTotalPassengerUnit


-- ==============================================================================================================================
-- TOTAL UNIT (COMMERCIAL)
-- ==============================================================================================================================

select * into #TempTotalCommercialUnitPvt from (
		select * from (
		select 
			inv.CompanyCode
			, inv.BranchCode
			, inv.EmployeeID
			, inv.InvoiceWeek
			, isnull(count(BasicModel),0) TotalUnitCommecial
        from (
				select distinct(inv.BasicModel), inv.ChassisCode, inv.ChassisNo, inv.CompanyCode, inv.BranchCode
					, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
						and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
					, day(JobOrderDate) day
					, month(jobOrderDate) month
					, 'W' + substring(Convert(varchar, DATEPART(WEEK, inv.InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek
				from svTrnInvoice inv
				LEFT JOIN omMstVehicle a ON a.CompanyCode = inv.CompanyCode 
					AND a.ChassisCode = inv.ChassisCode
					AND a.ChassisNo = inv.ChassisNo
				left join svMstRefferenceService reff on
					reff.CompanyCode = inv.CompanyCode
					AND reff.ProductType = inv.ProductType
					AND reff.RefferenceCode = inv.BasicModel
				where 
					1 = 1
					and inv.CompanyCode = @CompanyCode 
					and inv.BranchCode = @BranchCode
					and inv.ProductType = @ProductType
					and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
					and Year(inv.InvoiceDate) = @Year
					and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)	
					AND reff.isLocked = 1				
			)inv
			group by inv.CompanyCode,inv.BranchCode, inv.InvoiceWeek, inv.EmployeeID
		) as Header
		pivot(
			sum(TotalUnitCommecial)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempTotalCommercialUnitPvt

select * into #TempTotalCommercialUnit from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Commercial' Description, 7 SeqNo, 'Unit' UOM
		, (
				select sum(ISNULL(TargetUnitCommercial,0)) from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempTotalCommercialUnitPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempTotalCommercialUnit


-- ==============================================================================================================================
-- ==============================================================================================================================

-- ==============================================================================================================================
-- TOTAL JOBS CPUS
-- ==============================================================================================================================
select * into #TempJobsCPUSPvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
				  ),0)	TotalJobCPUS
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and (
						inv.JobType IN (SELECT JobType FROM #Job1) 
						OR inv.JobType IN (SELECT JobType FROM #Job2) 
						OR inv.JobType IN (SELECT JobType FROM #JobGroupOthers) 
						OR inv.JobType IN ('OTHERS')
					)
				and inv.JobType NOT IN ('CLAIM', 'FSC01', 'REWORK','PDI')
				and substring(inv.InvoiceNo, 1,3) <> 'INI'
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUS)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUSPvt

select * into #TempJobsCPUS from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, 'Total Jobs CPUS' Description, 8 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUS30000,0) + ISNULL(TargetCPUS10000,0) + ISNULL(TargetCPUS5000,0) +
						ISNULL(TargetCPUSOil,0) + ISNULL(TargetCPUSOverhaulRepair,0) + ISNULL(TargetCPUSTyre,0) +
						ISNULL(TargetCPUSAdjustment,0)) 
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUSPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUS

-- ==============================================================================================================================
-- TOTAL JOBS CPUS - ABOVE 30.000 KM
-- ==============================================================================================================================
select * into #TempJobsCPUS30000Pvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
				  ),0)	TotalJobCPUS10000
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType in (select JobType from #Job1)
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUS10000)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUS30000Pvt

select * into #TempJobsCPUS30000 from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Above 30.000 km jobs(10.000 km multiplier)' Description, 9 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUS30000,0)) 
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUS30000Pvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUS30000

-- ==============================================================================================================================
-- TOTAL JOBS CPUS - 10.000 - 20.000 KM
-- ==============================================================================================================================
select * into #TempJobsCPUS10000Pvt from
(
	select * from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
				  ),0)	TotalJobCPUSFS
			from svTrnInvoice inv
			inner join svMstJob job on job.CompanyCode = inv.CompanyCode AND job.basicModel = inv.BasicModel AND job.JobType = inv.JobType AND job.GroupJobType = 'RTN'
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN ('PB10000', 'PB20000')
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
			) as Header
			pivot(
				sum(TotalJobCPUSFS)
				for InvoiceWeek in (W1,W2,W3,W4,W5)
			) pvt
)#TempJobsCPUS10000Pvt

select * into #TempJobsCPUS10000 from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   10.000 & 20.000 km (FS2 & FS3)' Description, 10 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUS10000,0)) from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUS10000Pvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1 = 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUS10000

-- ==============================================================================================================================
-- TOTAL JOBS CPUS - 5.000 KM ABOVE
-- ==============================================================================================================================
select * into #TempJobsCPUS5000Pvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
				  ),0)	TotalJobCPUS5000
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN (select JobType from #Job2)
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUS5000)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUS5000Pvt

select * into #TempJobsCPUS5000 from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   5.000 km multiplier & above' Description, 11 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUS5000,0))
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUS5000Pvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1= 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUS5000


-- ==============================================================================================================================
-- TOTAL JOBS CPUS - Others - Oil Change Only
-- ==============================================================================================================================
select * into #TempJobsCPUSOilPvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
						and temp.OperationNo IN (select RefferenceCode from svmstRefferenceService where RefferenceType = 'CPUS-001')
				  ),0)	TotalJobCPUSOil
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN ('OTHERS')
				and substring(inv.InvoiceNo, 1,3) <> 'INI'
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUSOil)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUSOilPvt

select * into #TempJobsCPUSOil from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Others - Oil change only' Description, 12 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUSOil,0))
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUSOilPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1= 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUSOil

-- ==============================================================================================================================
-- TOTAL JOBS CPUS - Others - Overhaul & Repairs
-- ==============================================================================================================================
select * into #TempJobsCPUSoverhaulRepairPvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
						and temp.OperationNo IN (select RefferenceCode from svmstRefferenceService where RefferenceType = 'CPUS-002')
				  ),0)	TotalJobCPUSOverRepair
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN ('OTHERS')
				and substring(inv.InvoiceNo, 1,3) <> 'INI'
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUSOverRepair)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUSoverhaulRepairPvt

select * into #TempJobsCPUSoverhaulRepair from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Others - Overhaul & Repairs' Description, 13 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUSOverhaulRepair,0))
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUSoverhaulRepairPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1= 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUSoverhaulRepair

-- ==============================================================================================================================
-- TOTAL JOBS CPUS - Others - Tyre service (Wheel alignment & Balance)
-- ==============================================================================================================================
select * into #TempJobsCPUSTyrePvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
						and temp.OperationNo IN (select RefferenceCode from svmstRefferenceService where RefferenceType = 'CPUS-003')
				  ),0)	TotalJobCPUSTyre
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN ('OTHERS')
				and substring(inv.InvoiceNo, 1,3) <> 'INI'
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUSTyre)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUSTyrePvt

select * into #TempJobsCPUSTyre from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Others Tyre Service(Wheel Alignment & Balance' Description, 14 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUSTyre,0))
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUSTyrePvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1= 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUSTyre

-- ==============================================================================================================================
-- TOTAL JOBS CPUS - Others - adjustment & unclassified
-- ==============================================================================================================================
select * into #TempJobsCPUSAdjustmentPvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
						and temp.OperationNo NOT IN (select RefferenceCode from svmstRefferenceService where RefferenceType IN ('CPUS-001','CPUS-002','CPUS-003'))
				  ),0)	TotalJobCPUSAdjustment
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN (select JobType from #JobGroupOthers WHERE GroupJobType <> 'BDR')
				and substring(inv.InvoiceNo, 1,3) <> 'INI'
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUSAdjustment)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUSAdjustmentPvt

select * into #TempJobsCPUSAdjustment from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Others - Adjustment & Unclassified' Description, 15 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUSAdjustment,0)) 
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUSAdjustmentPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1= 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUSAdjustment


-- ==============================================================================================================================
-- BODY REPAIR
-- ==============================================================================================================================
select * into #TempJobsCPUSBodyRepairPvt from (
		select *
        from (
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, ISNULL((
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE 
						1 = 1
						and temp.CompanyCode = inv.CompanyCode 
						and temp.BranchCode = inv.BranchCode 
						and temp.InvoiceNo = inv.InvoiceNo
						and temp.ProductType = @ProductType
				  ),0)	TotalJobCPUS5000
			from svTrnInvoice inv
			where 
				1 = 1
				and inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and inv.ProductType = @ProductType
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN (select JobType from #JobGroupOthers WHERE GroupJobType = 'BDR')
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
				and substring(inv.InvoiceNo, 1,3) <> 'INI'
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobCPUS5000)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsCPUSBodyRepairPvt

select * into #TempJobsCPUSBodyRepair from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Body Repair' Description, 16 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetCPUS5000,0))
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsCPUSBodyRepairPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE 1= 1 and a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsCPUSBodyRepair



-- ==============================================================================================================================
-- ==============================================================================================================================

-- ==============================================================================================================================
-- TOTAL JOBS NON CPUS
-- ==============================================================================================================================
select * into #TempJobsNonCPUSPvt from (
		select *
        from (
			
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, (
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE temp.InvoiceNo = inv.InvoiceNo
				  )	TotalJobNonCPUS
			from svTrnInvoice inv
			where inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and (substring(inv.InvoiceNo, 1,3) = 'INI' OR inv.JobType IN ('CLAIM', 'FSC01', 'REWORK'))
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobNonCPUS)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsNonCPUSPvt

select * into #TempJobsNonCPUS from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, 'Total Jobs Non-CPUS' Description, 17 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetNonCPUSWarranty,0) + ISNULL(TargetNonCPUSFS,0) + ISNULL(TargetNonCPUSRework,0) +
						ISNULL(TargetNonCPUSinService,0)) 
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsNonCPUSPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsNonCPUS
-- ==============================================================================================================================
-- TOTAL JOBS NON CPUS (Warranty)
-- ==============================================================================================================================
select * into #TempJobsNonCPUSClaimPvt from (
		select *
        from (
			
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, (
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE temp.InvoiceNo = inv.InvoiceNo
				  )	TotalJobNonClaimCPUS
			from svTrnInvoice inv
			where inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN ('CLAIM')
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobNonClaimCPUS)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsNonCPUSClaimPvt

select * into #TempJobsNonCPUSClaim from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Warranty' Description, 18 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetNonCPUSWarranty,0)) 
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsNonCPUSClaimPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsNonCPUSClaim

-- ==============================================================================================================================
-- TOTAL JOBS NON CPUS (Free Service)
-- ==============================================================================================================================
select * into #TempJobsNonCPUSFSPvt from (
		select *
        from (
			
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, (
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE temp.InvoiceNo = inv.InvoiceNo
				  )	TotalJobNonCPUSFS
			from svTrnInvoice inv
			where inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN ('FSC01')
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobNonCPUSFS)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsNonCPUSFSPvt

select * into #TempJobsNonCPUSFS from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Free Service 1' Description, 19 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetNonCPUSFS,0))
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsNonCPUSFSPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsNonCPUSFS

-- ==============================================================================================================================
-- TOTAL JOBS NON CPUS (Rework)
-- ==============================================================================================================================
select * into #TempJobsNonCPUSReWorkPvt from (
		select *
        from (
			
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, (
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE temp.InvoiceNo = inv.InvoiceNo
				  )	TotalJobNonCPUSReWork
			from svTrnInvoice inv
			where inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and inv.JobType IN ('REWORK')
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobNonCPUSReWork)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsNonCPUSReWorkPvt

select * into #TempJobsNonCPUSReWork from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Rework' Description, 20 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetNonCPUSRework,0))						
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsNonCPUSReWorkPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsNonCPUSReWork

-- ==============================================================================================================================
-- TOTAL JOBS NON CPUS (Internal Service)
-- ==============================================================================================================================
select * into #TempJobsNonCPUSInitServPvt from (
		select *
        from (
			
			select inv.CompanyCode, inv.BranchCode
				, (select spk.ForemanID from svTrnService spk where spk.CompanyCode = inv.CompanyCode and spk.BranchCode = inv.BranchCode
					and spk.JobOrderNo = inv.JobOrderNo) EmployeeID
				,  'W' + substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3) InvoiceWeek 
				, (
					SELECT Count(temp.OperationNo) FROM  svTrnInvTask temp WHERE temp.InvoiceNo = inv.InvoiceNo
				  )	TotalJobNonCPUSInitServ
			from svTrnInvoice inv
			where inv.CompanyCode = @CompanyCode 
				and inv.BranchCode = @BranchCode
				and Month(inv.InvoiceDate) = substring(Convert(varchar, @Month, 109), 1, 3) 
				and Year(inv.InvoiceDate) = @Year
				and substring(inv.InvoiceNo,1,3) = 'INI'
				and inv.JobOrderNo IN (select JobOrderNo from #TempSPKNo)
			group by inv.CompanyCode,inv.BranchCode, substring(Convert(varchar, DATEPART(WEEK, InvoiceDate) - @MinusWeek), 1, 3), inv.JobOrderNo, inv.InvoiceNo
		) as Header
		pivot(
			sum(TotalJobNonCPUSInitServ)
			for InvoiceWeek in (W1,W2,W3,W4,W5)
		) pvt
	)#TempJobsNonCPUSInitServPvt

select * into #TempJobsNonCPUSInitServ from (
		select isnull(b.CompanyCode, @CompanyCode) CompanyCode, isnull(b.BranchCode, @BranchCode) BranchCode, a.EmployeeID, '   Internal Service/Repairs (Others)' Description, 21 SeqNo, 'Jobs' UOM
		, (
				select sum(ISNULL(TargetNonCPUSinService,0)) 
					from svMstTargetSA
					where CompanyCode = @CompanyCode and BranchCode = @BranchCode and month(targetDate) = @Month and year(targetDate) = @year
					and ProductType = @ProductType
		   ) Target
		, isnull(b.W1, 0) Week1, isnull(b.W2, 0) Week2, isnull(b.W3, 0) Week3, isnull(b.W4, 0) Week4, isnull(b.W5, 0) Week5
        from
			#TempEmployee a
		LEFT JOIN
		( 
			SELECT * FROM #TempJobsNonCPUSInitServPvt
		) b ON a.EmployeeID = b.EmployeeID
		WHERE a.EmployeeID IN (select EmployeeID from #TempEmployee)
	)#TempJobsNonCPUSInitServ

-- ==============================================================================================================================
-- ==============================================================================================================================


insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempSalesReveneu a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempLaborSalesReveneu a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempSalesSparepartReveneu a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempSalesOilMaterialReveneu a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempTotalUnit a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempTotalPassengerUnit a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempTotalCommercialUnit a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUS a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUS30000 a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUS10000 a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUS5000 a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUSOil a


insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUSOverhaulRepair a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUSTyre a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUSAdjustment a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsNonCPUS a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsNonCPUSClaim a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsNonCPUSFS a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsNonCPUSReWork a

insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsNonCPUSInitServ a


insert into #t_WeekReview select a.CompanyCode, a.BranchCode, a.EmployeeID
	, (select EmployeeName from gnMstEmployee where EmployeeID = a.EmployeeID and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) EmployeeName 
	, a.Description
	, a.SeqNo, a.UOM, a.Target
	, a.Week1, a.Week2, a.Week3, a.Week4, a.Week5
	FROM #TempJobsCPUSBodyRepair a

select @Month YearPeriode, (Week1 + Week2 + Week3 + Week4 + Week5) Total, * from #t_WeekReview 
order by EmployeeID, SeqNo

DROP TABLE #t_WeekReview 
DROP TABLE #TempEmployee
DROP TABLE #TempSPKNo
DROP TABLE #TempSalesReveneuPvt
DROP TABLE #TempSalesReveneu
DROP TABLE #TempLaborSalesReveneuPvt
DROP TABLE #TempLaborSalesReveneu
DROP TABLE #TempSalesSparepartReveneuPvt
DROP TABLE #TempSalesSparepartReveneu
DROP TABLE #TempSalesOilMaterialReveneuPvt
DROP TABLE #TempSalesOilMaterialReveneu
DROP TABLE #TempTotalUnitPvt
DROP TABLE #TempTotalUnit
DROP TABLE #TempTotalPassengerUnitPvt
DROP TABLE #TempTotalPassengerUnit
DROP TABLE #TempTotalCommercialUnitPvt
DROP TABLE #TempTotalCommercialUnit
DROP TABLE #TempJobsCPUSPvt
DROP TABLE #TempJobsCPUS
DROP TABLE #TempJobsCPUS30000Pvt
DROP TABLE #TempJobsCPUS30000
DROP TABLE #TempJobsCPUS10000Pvt
DROP TABLE #TempJobsCPUS10000
DROP TABLE #TempJobsCPUS5000Pvt
DROP TABLE #TempJobsCPUS5000
DROP TABLE #TempJobsCPUSOilPvt
DROP TABLE #TempJobsCPUSOil
DROP TABLE #TempJobsCPUSOverhaulRepairPvt
DROP TABLE #TempJobsCPUSOverhaulRepair
DROP TABLE #TempJobsCPUSTyrePvt
DROP TABLE #TempJobsCPUSTyre
DROP TABLE #TempJobsCPUSAdjustmentPvt
DROP TABLE #TempJobsCPUSAdjustment
DROP TABLE #TempJobsNonCPUSPvt
DROP TABLE #TempJobsNonCPUS
DROP TABLE #TempJobsNonCPUSClaimPvt
DROP TABLE #TempJobsNonCPUSClaim
DROP TABLE #TempJobsNonCPUSFSPvt
DROP TABLE #TempJobsNonCPUSFS
DROP TABLE #TempJobsNonCPUSReWorkPvt
DROP TABLE #TempJobsNonCPUSReWork
DROP TABLE #TempJobsNonCPUSInitServPvt
DROP TABLE #TempJobsNonCPUSInitServ
DROP TABLE #TempJobsCPUSBodyRepairPvt
DROP TABLE #TempJobsCPUSBodyRepair
DROP TABLE #Job1
DROP TABLE #Job2
DROP TABLE #1
DROP TABLE #JobGroup
DROP TABLE #JobGroupOthers
END
GO
--declare	@CompanyCode varchar(15)
--declare	@BranchCode  varchar(15)
--declare	@ProductType varchar(15)
--declare	@ServiceNo   bigint

--set @CompanyCode = '6006400001' 
--set @BranchCode  = '6006400104'
--set @ProductType = '4W'
--set @ServiceNo   = 43543

--uspfn_SvTrnServiceSelectDtl '6006400001', '6006400104', '4w', 43543

ALTER procedure [dbo].[uspfn_SvTrnServiceSelectDtl]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15),
	@ServiceNo   bigint
as      

begin

declare @t1 as table
(
 TaskPartSeq int
,BillType varchar(10)
,BillTypeDesc varchar(max)
,TypeOfGoods varchar(10)
,TypeOfGoodsDesc varchar(70)
,TaskPartNo varchar(50)
,OprHourDemandQty numeric(18,2)
,SupplyQty numeric(18,2)
,ReturnQty numeric(18,2)
,OprRetailPrice numeric(18,2)
,OprRetailPriceTotal numeric(18,2)
,SupplySlipNo varchar(20)
,TaskPartDesc varchar(max)
,BasicModel varchar(15)
,JobType varchar(15)
,IsSubCon bit
,Status varchar(10)
,GTGO varchar(10)
,DiscPct numeric(18,2)
,QtyAvail numeric(18,2)
,TaskStatus varchar(50)
)

declare @JobOrderNo varchar(15)
    set @JobOrderNo = isnull((select JobOrderNo from svTrnService where CompanyCode = @CompanyCode and BranchCode = @BranchCode and ProductType = @ProductType and ServiceNo = @ServiceNo), '')

insert into @t1
select 0 TaskSeq 
      ,a.BillType
      ,b.Description BillTypeDesc
      ,a.TypeOfGoods
      ,case a.TypeOfGoods when 'L' then 'Labor (Jasa)' end TypeOfGoodsDesc
      ,a.OperationNo
      ,a.OperationHour
      ,0 OperationHourSupply
      ,0 OperationHourReturn
      ,a.OperationCost
      ,a.OperationHour * a.OperationCost * (100 - a.DiscPct) * 0.01 OprRetailPriceTotal
      ,'' SupplySlipNo
      ,rtrim(d.Description) OperationDesc 
	  ,c.BasicModel
	  ,c.JobType
	  ,a.IsSubCon
	  ,(select min(MechanicStatus) from svTrnSrvMechanic 
		where CompanyCode = a.CompanyCode 
			and BranchCode = a.BranchCode
			and ProductType = a.ProductType
			and ServiceNo = a.ServiceNo
			and OperationNo = a.OperationNo) MechanicStatus
	  ,''
	  ,a.DiscPct
	  ,0
      ,case(a.TaskStatus)
          when 0 then 'Open Task'
          when 1 then 'Work In Progress'
          when 2 then 'Close Task'
          when 9 then 'Cancel'
       end TaskStatus
  from svTrnSrvTask a with (nolock,nowait)
  left join svMstBillingType b with (nolock,nowait)
    on b.CompanyCode = a.CompanyCode
   and b.BillType = a.BillType
  left join svTrnService c with (nolock,nowait)
    on c.CompanyCode = a.CompanyCode
   and c.BranchCode = a.BranchCode
   and c.ProductType = a.ProductType
   and c.ServiceNo = a.ServiceNo
  left join svMstTask d with (nolock,nowait)
    on d.CompanyCode = a.CompanyCode
   and d.ProductType = a.ProductType
   and d.BasicModel = c.BasicModel
   and (d.JobType = c.JobType or d.JobType = 'CLAIM' or d.JobType = 'OTHER')
   and d.OperationNo = a.OperationNo 
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.BranchCode  = @BranchCode
   and a.ProductType = @ProductType
   and a.ServiceNo   = @ServiceNo

declare @tblTemp as table
(
	PartNo  varchar(15),
	QtyAvail decimal
)

declare @DealerCode as varchar(2)
declare @CompanyMD as varchar(15)
declare @BranchMD as varchar(15)

set @DealerCode = 'MD'
set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
begin	
	set @DealerCode = 'SD'
	declare @DbName as varchar(50)
	set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	
	declare @QueryTemp as varchar(max)
	
	set @QueryTemp = 'select 
			 a.PartNo
			 , (b.OnHand - (b.AllocationSP + b.AllocationSR + b.AllocationSL) - (b.ReservedSP + b.ReservedSR + b.ReservedSL)) 
		 from svTrnSrvItem a	 
		 left join ' + @DbName + '..spMstItems b on 
			a.PartNo = b.PartNo 
			and b.CompanyCode = ''' + @CompanyMD + '''
			and b.BranchCode = ''' + @BranchMD + '''
		 where a.CompanyCode = ''' + @CompanyCode + '''
		   and a.BranchCode  = ''' + @BranchCode + '''
		   and a.ProductType = ''' + @ProductType + '''
		   and a.ServiceNo   = ' + convert(varchar,@ServiceNo) + ''		   
				
		print(@QueryTemp)		
		insert into @tblTemp		
		exec (@QueryTemp)		
end

insert into @t1
select a.PartSeq
      ,a.BillType
      ,b.Description BillTypeDesc
      ,a.TypeOfGoods
      ,rtrim(c.LookupValueName) + case lower(g.ParaValue) when 'sparepart' then ' (SPR)' else ' (MTR)' end TypeOfGoodsDesc
      ,a.PartNo
      ,a.DemandQty
      ,a.SupplyQty
      ,a.ReturnQty
      ,a.RetailPrice
      ,(case isnull(a.SupplyQty, 0)
         when 0 then (isnull(a.DemandQty, 0) * isnull(a.RetailPrice, 0))
         else ((isnull(a.SupplyQty, 0) - isnull(a.ReturnQty, 0)) * isnull(a.RetailPrice, 0))
        end) * (100.0 - a.DiscPct) * 0.01
        as RetailPriceTotal
      ,a.SupplySlipNo
      ,rtrim(d.PartName) OperationDesc 
	  ,''
	  ,''
	  ,0
	  ,''
	  ,g.ParaValue
	  ,a.DiscPct
	  ,case when @DealerCode = 'MD' then (i.OnHand - (i.AllocationSP + i.AllocationSR + i.AllocationSL) - (i.ReservedSP + i.ReservedSR + i.ReservedSL)) else e.QtyAvail end QtyAvail
	  ,''
  from svTrnSrvItem a with (nolock,nowait)
  left join svMstBillingType b with (nolock,nowait)
    on b.CompanyCode = a.CompanyCode
   and b.BillType = a.BillType
  left join gnMstLookupDtl c with (nolock,nowait)
    on c.CompanyCode = a.CompanyCode
   and c.CodeID = 'TPGO'
   and c.LookupValue = TypeOfGoods
  left join spMstItemInfo d with (nolock,nowait)
    on d.CompanyCode = a.CompanyCode
   and d.PartNo = a.PartNo
  left join gnMstLookupDtl g with (nolock,nowait)
    on g.CompanyCode = a.CompanyCode
   and g.CodeID = 'GTGO'
   and g.LookupValue = TypeOfGoods
  left join svTrnService s with (nolock,nowait)
    on s.CompanyCode = a.CompanyCode
   and s.BranchCode = a.BranchCode
   and s.ServiceNo = a.ServiceNo
  left join spMstItems i
    on i.CompanyCode = a.CompanyCode 
   and i.BranchCode = a.BranchCode
   and i.ProductType = a.ProductType
   and i.PartNo = a.PartNo
   left join @tblTemp e
    on e.PartNo = a.PartNo
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.BranchCode  = @BranchCode
   and a.ProductType = @ProductType
   and a.ServiceNo   = @ServiceNo

select * into #t1 from (
select 
 a.* 
,P01 = isnull((
	select count(*) from spTrnSORDDtl with(nowait,nolock)
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and PartNo      = a.TaskPartNo
	   and DocNo in (select aa.DocNo
					   from spTrnSORDHdr aa with(nowait,nolock), svTrnService bb with(nowait,nolock)
					  where 1 = 1
						and bb.CompanyCode = aa.CompanyCode
						and bb.BranchCode  = aa.BranchCode
						and bb.JobOrderNo  = aa.UsageDocNo
						and isnull(bb.JobOrderNo, '') <> ''
						and aa.CompanyCode = @CompanyCode
						and aa.BranchCode  = @BranchCode
						and bb.ServiceNo   = @ServiceNo
					 )
	),0)
,P02 = isnull((
	select count(DocNo) from spTrnSOSupply with(nowait,nolock)
	 where 1 = 1
	   and CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and PartNo = a.TaskPartNo
	   and DocNo  = a.SupplySlipNo
	),0)
,P03 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSPickingHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,P04 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSPickingHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	   and bb.Status >= '2'
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,P05 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSLmpHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,P06 = isnull((
	select count(bb.PickingSlipNo) from spTrnSOSupply aa with(nowait,nolock)
	  left join spTrnSLmpHdr bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.PickingSlipNo = aa.PickingSlipNo
	   and bb.Status >= '1'
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.PartNo = a.TaskPartNo
	   and aa.DocNo  = a.SupplySlipNo
	   and isnull(aa.PickingSlipNo, '') <> ''
	),0)
,S01 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	),0)
,S02 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '2'
	),0)
,S03 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '3'
	),0)
,S04 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '4'
	),0)
,S05 = isnull((
	select count(bb.PONo) from svTrnPoSubCon aa with(nowait,nolock)
	  left join svTrnPoSubConTask bb with(nowait,nolock) on 1 = 1
	   and bb.CompanyCode   = aa.CompanyCode
	   and bb.BranchCode    = aa.BranchCode
	   and bb.ProductType   = aa.ProductType
	   and bb.PONo          = aa.PONo
	 where 1 = 1
	   and aa.CompanyCode = @CompanyCode
	   and aa.BranchCode  = @BranchCode
	   and aa.ProductType = @ProductType
	   and aa.JobOrderNo  = @JobOrderNo
	   and aa.JobOrderNo <> ''
	   and aa.BasicModel  = a.BasicModel
	   and aa.JobType     = a.JobType
	   and bb.OperationNo = a.TaskPartNo
	   and aa.POStatus >= '5'
	),0)
from @t1 a
)#t1

update #t1
   set Status = (case P01 when 0 then 0 else 1 end)
			  + (case P02 when 0 then 0 else 1 end)
			  + (case P03 when 0 then 0 else 1 end)
			  + (case P04 when 0 then 0 else 1 end)
			  + (case P05 when 0 then 0 else 1 end)
			  + (case P06 when 0 then 0 else 1 end)
 where TypeOfGoods <> 'L'

update #t1
   set Status = (case S01 when 0 then 0 else 1 end)
			  + (case S02 when 0 then 0 else 1 end)
			  + (case S03 when 0 then 0 else 1 end)
			  + (case S04 when 0 then 0 else 1 end)
			  + (case S05 when 0 then 0 else 1 end)
 where TypeOfGoods = 'L' and IsSubCon = '1'

select
 row_number() over (order by TaskPartSeq) SeqNo
,TaskPartSeq
,BillType
,BillTypeDesc
,TypeOfGoods
,TypeOfGoodsDesc
,case isnull(TypeOfGoods, '') when 'L' then 'L' else '0' end ItemType
,TaskPartNo
,OprHourDemandQty
,SupplyQty
,ReturnQty
,OprRetailPrice
,OprRetailPriceTotal
,isnull(SupplySlipNo, '')SupplySlipNo
,TaskPartDesc
,Status
,StatusDesc = 
 case IsSubCon
	when 0 then
		 case TypeOfGoods 
			when 'L' then
				case Status
					when '0' then '0 - Open Task'
					when '1' then '1 - Work In Progress'
					when '2' then '2 - Finish Task'
				end
			else
				case Status
					when '1' then '1 - Entry Stock'
					when '2' then '2 - Alokasi Stock'
					when '3' then '3 - Generate PL'
					when '4' then '4 - Generate Bill'
					when '5' then '5 - Lampiran'
					when '6' then '6 - Print Lampiran'
				end
		 end	
	else
		case Status
			when '1' then '1 - Draft PO'
			when '2' then '2 - Generate PO'
			when '3' then '3 - Draft Receiving'
			when '4' then '4 - Cancel Receiving'
			when '5' then '5 - Receiving PO'
		end
 end
,QtyAvail
,(case when (SupplyQty > 0) then (SupplyQty - ReturnQty) else OprHourDemandQty end) * OprRetailPrice Price
,DiscPct
,OprRetailPriceTotal as PriceNet
,IsSubCon
,TaskStatus
,@ServiceNo ServiceNo
from #t1

drop table #t1

end
GO
ALTER procedure [dbo].[uspfn_GnGetDataWSMRD]
as

declare @CompanyCode  varchar(20)
declare @BranchCode   varchar(20)
declare @DealerCode   char(10)
declare @TotalItem    int
declare @LastDate     datetime

declare @T_WSMRD     table (Line varchar(max), SeqNo int)
declare @T_WSMRD_DTL table 
(
    RecordID    char(1),
    PoliceRegNo varchar(20),
    VinNo       varchar(20),
    CustName    varchar(50),
    Gender      char(1), 
    BirthDate   char(8),
    Address     varchar(100),
    PhoneNo     varchar(20),
    MobileNo    varchar(20),
    EmailAddr   varchar(150),
    Remark      varchar(100),
    CreatedDate datetime
)

set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr);
set @BranchCode  = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0);
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode);

insert into @T_WSMRD_DTL
select top 2500 '1'
     , left(replace(isnull(v.PoliceRegNo, ''), '	',''), 10)
     , left(replace(isnull(v.ChassisCode, ''), '	','') + convert(varchar, isnull(v.ChassisNo, 0)), 20) VinNo
     , left(replace(isnull(c.CustomerName, ''), '	',''), 50)
     , case isnull(c.Gender, '') 
		 when 'M' then 'L' 
		 when 'W' then 'P' 
		 when 'F' then 'P' 
		 else ' ' 
	   end as Gender
     , (select replace(convert(varchar, c.BirthDate,111),'/','')) BirthDate
     , left(replace(isnull(c.Address1, ''), '	',''), 100) as Address
     , left(replace(isnull(c.PhoneNo, ''), '	',''), 15) as PhoneNo
     , left(replace(isnull(c.HPNo, ''), '	',''), 20) as MobileNo
     , left(replace(isnull(c.Email, ''), '	',''), 50) as EmailAddr
     , isnull((
       select top 1 left(convert(char, i.InvoiceNo + '(' + i.BranchCode + ')'), 24)
         from svTrnInvoice i
        where i.CompanyCode = @CompanyCode
          and i.ChassisCode = v.ChassisCode
          and i.ChassisNo = v.ChassisNo
        order by i.CreatedDate desc
        ), '') as Remarks
     , v.LastUpdateDate
  from svMstCustomerVehicle v
 inner join gnMstCustomer c
    on c.CompanyCode = v.CompanyCode
   and c.CustomerCode = v.CustomerCode
 where v.CompanyCode = @CompanyCode
   and isnull(c.CustomerCode, '') <> ''
   and c.BirthDate is not null
   and isnull(v.LastupdateDate, convert(datetime, '19000101'))
	> isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'WSMRD'
     order by LastSendDate desc
    ), convert(datetime, '18990101'))   
 order by v.LastupdateDate
 
set @TotalItem = (select count(*) from @T_WSMRD_DTL) 
set @LastDate  = (select top 1 CreatedDate from @T_WSMRD_DTL order by CreatedDate desc)
 
insert into @T_WSMRD 
select 'HWSMRD' 
+ @DealerCode
+ isnull((
    select left(cus.StandardCode + replicate(' ', 10), 10)
      from svMstBillingType bil
     inner join gnMstCustomer cus
        on bil.CompanyCode  = cus.CompanyCode
       and bil.CustomerCode = cus.CustomerCode
     where 1 = 1
       and bil.CompanyCode  = @CompanyCode
       and bil.BillType     = 'F'
	), replicate(' ', 10))	 
+ isnull((
    select top 1 left(CompanyName + replicate(' ', 50), 50)
      from gnMstOrganizationHdr
     where CompanyCode = @CompanyCode)
	 , replicate(' ', 50))
+ right(replicate('0', 6) + convert(varchar, @TotalItem), 6)
+ (select replace(convert(varchar, @LastDate,111),'/',''))
+ (select top 1 case ProductType
		when '2W' then 'A' 
		when '4W' then 'B' 
		else 'C'  
		end 
	  from gnMstCoProfile
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode)
+ replicate(' ', 208)
, 0	   

insert into @T_WSMRD	
select RecordID
     + left(PoliceRegNo + replicate(' ', 10), 10)
     + left(VinNo + replicate(' ', 20), 20)
     + left(CustName + replicate(' ', 50), 50)
     + Gender
     + replace(BirthDate, '19000101', '        ')
     + left(Address + replicate(' ', 100), 100)
     + left(PhoneNo + replicate(' ', 15), 15)
     + left(MobileNo + replicate(' ', 20), 20)
     + left(EmailAddr + replicate(' ', 50), 50)
     + left(Remark + replicate(' ', 24), 24)
     , 1
  from @T_WSMRD_DTL

select @LastDate as LastDate 
select Line from @T_WSMRD order by SeqNo
GO
-- =============================================
-- Author:		<yo>
-- Create date: <20 Juli 2009>
-- Description:	<MASTER ACCOUNT SERVICE>
-- =============================================
ALTER procedure [dbo].[usprpt_SvRpMst017]
@CompanyCode as varchar(15),
@BranchCode as varchar (15),
@variableBebas as varchar

--usprpt_SvRpMst017 '6043401' , '604340100'
as
BEGIN

select 
--(svMstAccount.TypeOfGoods + ' - ' + gnMstLookupDtl.LookupValueName) as TipeAccount, 
'LABOR / JASA' as TipeAccount, 
svMstAccount.SalesAccNo, 
svMstAccount.COGSAccNo, 
svMstAccount.InventoryAccNo,
svMstAccount.DiscAccNo, 
svMstAccount.ReturnAccNo 
from svMstAccount
left join gnMstLookupDtl on 
	gnMstLookupDtl.CompanyCode = svMstAccount.Companycode and
	gnMstLookupDtl.LookupValue = svMstAccount.TypeOfGoods and
	gnMstLookupDtl.CodeID = 'TPGO'
where svMstAccount.CompanyCode = @CompanyCode and
svMstAccount.BranchCode = @BranchCode
	
END
GO
ALTER procedure [dbo].[usprpt_ArRpRgs020HQ]  
(  
 @CompanyCode VARCHAR(15),  
 @ProfitCenter VARCHAR(15),  
 @CustomerCode VARCHAR(15),  
 @CustomerCodeTo VARCHAR(15),  
 @AccountFrom VARCHAr(50),  
 @AccountTo VARCHAR(50),  
 @SalesCodeFrom VARCHAR(15),  
 @SalesCodeTo VARCHAR(15),  
 @LeasingCodeFrom VARCHAR(15),  
 @LeasingCodeTo VARCHAR(15),  
 @PerDate DATETIME,  
 @REPORT CHAR(1),
 @Outstand VARCHAR(1),
 @isGroupAR varchar(1),
 @isGroupLeasing varchar(1)
)  

-- usprpt_ArRpRgs020 '6058401','605840100','','','','','','','','','','20110531','0','0'
AS  
BEGIN
	--DECLARE @CompanyCode VARCHAR(15),  
	-- @ProfitCenter VARCHAR(15),  
	-- @CustomerCode VARCHAR(15),  
	-- @CustomerCodeTo VARCHAR(15),  
	-- @AccountFrom VARCHAr(50),  
	-- @AccountTo VARCHAR(50),  
	-- @SalesCodeFrom VARCHAR(15),  
	-- @SalesCodeTo VARCHAR(15),   
	-- @LeasingCodeFrom VARCHAR(15),  
	-- @LeasingCodeTo VARCHAR(15),  
	-- @PerDate DATETIME,  
	-- @REPORT CHAR(1),
	-- @Outstand VARCHAR(1),
	-- @isGroupAR varchar(1),
	-- @isGroupLeasing varchar(1)  
	  
	--SET @CompanyCode = '6006406'  
	--SET @ProfitCenter = ''  
	--SET @CustomerCode = ''  
	--SET @CustomerCodeTo = ''  
	--SET @AccountFrom = ''  
	--SET @AccountTo = ''  
	--SET @SalesCodeFrom = ''  
	--SET @SalesCodeTo = ''  
	--SET @LeasingCodeFrom = ''  
	--SET @LeasingCodeTo = ''  
	--SET @PerDate = '20120530'  
	--SET @REPORT = '0'  
	--SET @Outstand = '0'  
	--SET @isGroupAR = '0'  
	--SET @isGroupLeasing = '0'  
	  
	SELECT * INTO #t1 FROM(  
	 SELECT   
	  'NONE' AS Code,  
	  CompanyCode,  
	  BranchCode,  
	  ProfitCenterCode,  
	  CustomerCode,  
	  DocNo,  
	  DocDate,  
	  DueDate,  
	  AccountNo,  
	  SalesCode,  
	  LeasingCode,   
	  BeginBalance as AWAL,  
	  DebetBalance as DebetAmt,  
	  CreditBalance as CreditAmt,  
	  EndingBalance as Saldo  
	 FROM arPostingHistDtl  
	 WHERE Periode = (select top 1 convert(varchar,FiscalYear)+''+right('00'+convert(varchar,PeriodeNum),2) periode  
						from GnMstPeriode  
						where month(FromDate) = month(@PerDate) 
							and year(FromDate) = year(@PerDate) 
						order by periode ASC)  
	  AND Convert(varchar, @PerDate, 112) <= Convert(varchar, DueDate, 112)   
	 -----------  
	 UNION ALL  
	 -------------  
	 SELECT   
	  '30HARI' AS Code,  
	  CompanyCode,  
	  BranchCode,  
	  ProfitCenterCode,  
	  CustomerCode,  
	  DocNo,  
	  DocDate,  
	  DueDate,  
	  AccountNo,  
	  SalesCode,  
	  LeasingCode,   
	  BeginBalance as AWAL,  
	  DebetBalance as DebetAmt,  
	  CreditBalance as CreditAmt,  
	  EndingBalance as Saldo  
	 FROM arPostingHistDtl  
	 WHERE 
		Periode = (select top 1 convert(varchar,FiscalYear)+''+right('00'+convert(varchar,PeriodeNum),2) periode from GnMstPeriode  
			where month(FromDate)=month(@PerDate) and year(FromDate)=year(@PerDate) order by periode ASC)  
		AND Convert(varchar, @PerDate, 112) between Convert(varchar, dateadd(day, 1, DueDate), 112) and Convert(varchar,dateadd(day, 30, DueDate), 112)  
	 -------------  
	 UNION ALL  
	 -------------  
	 SELECT   
	  '60HARI' AS Code,  
	  CompanyCode,  
	  BranchCode,  
	  ProfitCenterCode,  
	  CustomerCode,  
	  DocNo,  
	  DocDate,  
	  DueDate,  
	  AccountNo,  
	  SalesCode,  
	  LeasingCode,   
	  BeginBalance as AWAL,  
	  DebetBalance as DebetAmt,  
	  CreditBalance as CreditAmt,  
	  EndingBalance as Saldo  
	 FROM arPostingHistDtl  
	 WHERE
		Periode= (select top 1 convert(varchar,FiscalYear)+''+right('00'+convert(varchar,PeriodeNum),2) periode  
		from GnMstPeriode  
		where month(FromDate)=month(@PerDate) and year(FromDate)=year(@PerDate) order by periode ASC)  
	 AND Convert(varchar, @PerDate, 112) between Convert(varchar, dateadd(day, 31, DueDate), 112) and Convert(varchar,dateadd(day, 60, DueDate), 112)  
	 -------------  
	 UNION ALL  
	 -------------  
	 SELECT   
	  '90HARI' AS Code,  
	  CompanyCode,  
	  BranchCode,  
	  ProfitCenterCode,  
	  CustomerCode,  
	  DocNo,  
	  DocDate,  
	  DueDate,  
	  AccountNo,  
	  SalesCode,  
	  LeasingCode,   
	  BeginBalance as AWAL,  
	  DebetBalance as DebetAmt,  
	  CreditBalance as CreditAmt,  
	  EndingBalance as Saldo  
	 FROM arPostingHistDtl  
	 WHERE 
		Periode= (select top 1 convert(varchar,FiscalYear)+''+right('00'+convert(varchar,PeriodeNum),2) periode  
		from GnMstPeriode  
		where month(FromDate)=month(@PerDate) and year(FromDate)=year(@PerDate) order by periode ASC)  
	 AND Convert(varchar, @PerDate, 112) between Convert(varchar, dateadd(day, 61, DueDate), 112) and Convert(varchar,dateadd(day, 90, DueDate), 112)  
	 -------------  
	 UNION ALL  
	 -------------  
	 SELECT   
	  '90anHARI' AS Code,  
	  CompanyCode,  
	  BranchCode,  
	  ProfitCenterCode,  
	  CustomerCode,  
	  DocNo,  
	  DocDate,  
	  DueDate,  
	  AccountNo,  
	  SalesCode,  
	  LeasingCode,   
	  BeginBalance as AWAL,  
	  DebetBalance as DebetAmt,  
	  CreditBalance as CreditAmt,  
	  EndingBalance as Saldo  
	 FROM arPostingHistDtl  
	 WHERE Periode= (select top 1 convert(varchar,FiscalYear)+''+right('00'+convert(varchar,PeriodeNum),2) periode  
		from GnMstPeriode  
		where month(FromDate)=month(@PerDate) and year(FromDate)=year(@PerDate) order by periode ASC)  
	 AND Convert(varchar, @PerDate, 112) > Convert(varchar, dateadd(day, 90, DueDate), 112)  
	) #t1   
	  
	SELECT * INTO #t2 FROM   
	(  
	 SELECT * FROM #t1  
	 WHERE  
	  #t1.CompanyCode = @CompanyCode  
	  AND #t1.ProfitCenterCode like '%'+ @ProfitCenter + '%'  
	  AND (#t1.LeasingCode between @LeasingCodeFrom and @LeasingCodeTo OR (#t1.LeasingCode LIKE '%'+ @LeasingCodeFrom + '%' AND #t1.LeasingCode LIKE '%'+ @LeasingCodeTo + '%'))   
	) #t2  
	  
	SELECT * INTO #t3 FROM (   
	 SELECT   
	  #t2.CompanyCode,  
	  #t2.BranchCode, 
	  isnull(org.BranchName,'')+' ('+#t2.BranchCode+') ' BranchName, 
	  #t2.DocNo,  
	  #t2.DocDate,  
	  #t2.DueDate,  
	  #t2.AccountNo,  
	  #t2.CustomerCode as CustomerCode1,  
	  bp.CustomerName + ' (' + #t2.CustomerCode + ')' as pCustomer,   
	  cp.LookUpValueName + ' (' + #t2.ProfitCenterCode + ')' as pProfitCenter,   
	  ISNULL(ISNULL(so.SalesCode, so1.SalesCode), #t2.SalesCode) AS SalesCode1,  
	  case @isGroupAR when '1' then ISNULL(ISNULL(lkd.LookupValueName + ' (' + so.SalesCode + ')', lkd1.LookupValueName + ' (' + so1.SalesCode + ')'), lkd2.LookupValueName + ' (' + #t2.SalesCode + ')') 
	  else 'ALL' end AS SalesCode,  
	  case @isGroupLeasing when '1' then ISNULL(gc.CustomerName + ' (' + ISNULL(ISNULL(so.LeasingCo, so1.LeasingCo), #t2.LeasingCode) + ')', '') 
	  else 'ALL' end as LeasingCode,  
	  #t2.AWAL,#t2.DebetAmt,#t2.CreditAmt,#t2.Saldo,  
	  sum(CASE WHEN #t2.Code = 'NONE' THEN #t2.Saldo ELSE 0 END) AS NONE,  
	  sum(CASE WHEN #t2.Code = '30HARI' THEN #t2.Saldo ELSE 0 END) AS HARI30,  
	  sum(CASE WHEN #t2.Code = '60HARI' THEN #t2.Saldo ELSE 0 END) AS HARI60,  
	  sum(CASE WHEN #t2.Code = '90HARI' THEN #t2.Saldo ELSE 0 END) AS HARI90,  
	  sum(CASE WHEN #t2.Code = '90anHARI' THEN #t2.Saldo ELSE 0 END) AS HARI90an  
	 FROM #t2    
	INNER JOIN gnMstCustomer bp  
	 ON bp.CompanyCode = #t2.CompanyCode  
	 AND bp.CustomerCode = #t2.CustomerCode  
	INNER JOIN gnMstLookUpDtl cp  
	 ON cp.LookUpValue = #t2.ProfitCenterCode  
	 AND cp.CompanyCode = #t2.CompanyCode  
	 AND cp.CodeID = 'PFCN'  
	LEFT JOIN omTrSalesDN dn  
	 ON dn.CompanyCode = #t2.CompanyCode  
	 AND dn.BranchCode = #t2.BranchCode  
	 AND dn.DNNo = #t2.DocNo  
	LEFT JOIN omTrSalesSO so1  
	 ON #t2.CompanyCode = so1.CompanyCode  
	 AND #t2.BranchCode = so1.BranchCode  
	 AND dn.SONo = so1.SONo  
	LEFT JOIN omTrSalesInvoice iv  
	 ON iv.CompanyCode = #t2.CompanyCode  
	 AND iv.BranchCode = #t2.BranchCode  
	 AND iv.InvoiceNo = #t2.DocNo  
	LEFT JOIN omTrSalesSO so  
	 ON #t2.CompanyCode = so.CompanyCode  
	 AND #t2.BranchCode = so.BranchCode  
	 AND iv.SONo = so.SONo  
	LEFT JOIN gnMstEmployee ge  
	 ON ge.EmployeeID =  #t2.SalesCode   
	 AND ge.CompanyCode = #t2.CompanyCode  
	 AND ge.BranchCode = #t2.BranchCode  
	LEFT JOIN GnMstLookupDtl lkd ON   
	 #t2.CompanyCode = lkd.CompanyCode   
	 AND so.SalesCode = lkd.LookupValue   
	 AND lkd.CodeId = 'GPAR'  
	LEFT JOIN GnMstLookupDtl lkd1 ON   
	 #t2.CompanyCode = lkd1.CompanyCode   
	 AND so1.SalesCode = lkd1.LookupValue   
	 AND lkd1.CodeId = 'GPAR'  
	LEFT JOIN GnMstLookupDtl lkd2 ON   
	 #t2.CompanyCode = lkd2.CompanyCode   
	 AND #t2.SalesCode = lkd2.LookupValue   
	 AND lkd2.CodeId = 'GPAR'  
	LEFT JOIN gnMstCustomer gc  
	 ON gc.CompanyCode = #t2.CompanyCode  
	 AND gc.CustomerCode = (CASE WHEN #t2.LeasingCode != '' THEN #t2.LeasingCode ELSE ISNULL(so.LeasingCo, so1.LeasingCo) END)  
	LEFT JOIN gnMstOrganizationDtl org ON org.CompanyCode=#t2.CompanyCode
		AND org.BranchCode=#t2.BranchCode 
	WHERE cp.CodeId = 'PFCN'  
	GROUP BY   
	 so.SalesCode,  
	 so1.SalesCode,  
	 #t2.ProfitCenterCode,    
	 #t2.SalesCode,   
	 #t2.CustomerCode,   
	 #t2.CompanyCode,  
	 #t2.BranchCode,
	 isnull(org.BranchName,'')+' ('+#t2.BranchCode+') ',  
	 #t2.DocNo,  
	 #t2.DocDate,  
	 #t2.DueDate,  
	 #t2.AccountNo,  
	 bp.CustomerName + ' (' + #t2.CustomerCode + ')',  
	 cp.LookUpValueName + ' (' + #t2.ProfitCenterCode + ')',  
	 ISNULL(ISNULL(so.SalesCode, so1.SalesCode), #t2.SalesCode),  
	 case @isGroupAR when '1' then ISNULL(ISNULL(lkd.LookupValueName + ' (' + so.SalesCode + ')', lkd1.LookupValueName + ' (' + so1.SalesCode + ')'), lkd2.LookupValueName + ' (' + #t2.SalesCode + ')')
	 else 'ALL' end,  
	 case @isGroupLeasing when '1' then ISNULL(gc.CustomerName + ' (' + ISNULL(ISNULL(so.LeasingCo, so1.LeasingCo), #t2.LeasingCode) + ')', '')
	 else 'ALL' end,  
	 #t2.AWAL,  
	 #t2.DebetAmt,  
	 #t2.CreditAmt,  
	 #t2.Saldo  
	) #t3  
	ORDER BY   
	 #t3.SalesCode,   
	 #t3.DocDate,   
	 #t3.DocNo 
	 
	IF @REPORT = '0'  
	BEGIN     
	 IF (@SalesCodeFrom != '' AND @SalesCodeTo != '')   
	 BEGIN  
	  SELECT * FROM #t3   
	   WHERE SalesCode1 between @SalesCodeFrom and @SalesCodeTo  
		AND ((CASE WHEN @Outstand = '0' THEN @Outstand END) = 0
			OR (CASE WHEN @Outstand = '1' THEN Saldo END) > 0)
	  ORDER BY pProfitCenter,pCustomer,SalesCode1  
	 END  
	 ELSE  
	 BEGIN  
	  SELECT * FROM #t3  
	   WHERE SalesCode1 LIKE '%'+ @SalesCodeFrom + '%' AND SalesCode1 LIKE '%'+ @SalesCodeTo + '%'  
		AND ((CASE WHEN @Outstand = '0' THEN @Outstand END) = 0
			OR (CASE WHEN @Outstand = '1' THEN Saldo END) > 0)
	  ORDER BY pProfitCenter,pCustomer,SalesCode1  
	 END  
	END  
	  
	  
	ELSE IF @REPORT = '1'  
	BEGIN     
	 SELECT * FROM #t3   
	  WHERE CustomerCode1 between @CustomerCode and @CustomerCodeTo 
		AND ((CASE WHEN @Outstand = '0' THEN @Outstand END) = 0
			OR (CASE WHEN @Outstand = '1' THEN Saldo END) > 0) 
	  ORDER BY pProfitCenter,pCustomer
	END  
	  
	ELSE IF @REPORT = '2'  
	BEGIN     
	 SELECT * FROM #t3   
	  WHERE AccountNo between @AccountFrom and @AccountTo  
		AND ((CASE WHEN @Outstand = '0' THEN @Outstand END) = 0
			OR (CASE WHEN @Outstand = '1' THEN Saldo END) > 0)
	  ORDER BY pProfitCenter,pCustomer
	END  
	  
	ELSE IF @REPORT = '3'  
	BEGIN   
	 SELECT * FROM #t3     
	  WHERE CustomerCode1 between @CustomerCode and @CustomerCodeTo  
	   AND AccountNo between @AccountFrom and @AccountTo  
		AND ((CASE WHEN @Outstand = '0' THEN @Outstand END) = 0
			OR (CASE WHEN @Outstand = '1' THEN Saldo END) > 0)
	  ORDER BY pProfitCenter,pCustomer
	END  
	  
	DROP TABLE #t1  
	DROP TABLE #t2  
	DROP TABLE #t3  
END
GO
ALTER procedure [dbo].[uspfn_SvTrnServiceSaveItem]  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProductType varchar(15),  
 @ServiceNo bigint,  
 @BillType varchar(15),  
    @PartNo varchar(20),  
    @DemandQty numeric(18,2),  
    @PartSeq numeric(5,2),  
 @UserID varchar(15),  
 @DiscPct numeric(5,2)  
  
as        

 
--declare  @CompanyCode varchar(15),  
-- @BranchCode varchar(15),  
-- @ProductType varchar(15),  
-- @ServiceNo bigint,  
-- @BillType varchar(15),  
--    @PartNo varchar(20),  
--    @DemandQty numeric(18,2),  
--    @PartSeq numeric(5,2),  
-- @UserID varchar(15),  
-- @DiscPct numeric(5,2)  
  
--set @CompanyCode = '6156401000'  
--set @BranchCode = '6156401001'  
--set @ProductType = '4W'  
--set @ServiceNo = 49190  
--set @BillType = 'C'  
--set @PartNo = '01107-06127-000'  
--set @DemandQty = 5  
--set @PartSeq = -1  
--set @UserID = 'Trainingzzz'  
--set @DiscPct = 0  
  
  
declare @errmsg varchar(max)  
declare @QueryTemp as varchar(max)  
declare @IsSPK as char(1)
  
begin try  
 -- select data svTrnService  
 select * into #srv from (  
   select a.* from svTrnService a  
  where 1 = 1  
    and a.CompanyCode = @CompanyCode  
    and a.BranchCode  = @BranchCode  
    and a.ProductType = @ProductType  
    and a.ServiceNo   = @ServiceNo  
 )#srv  
   
 declare @CostPrice as decimal  
 declare @RetailPrice as decimal  
 declare @TypeOfGoods as varchar(2)  
 declare @CostPriceMD as decimal  
 declare @RetailPriceMD as decimal  
 declare @RetailPriceInclTaxMD as decimal  
   
 declare @DealerCode as varchar(2)  
 declare @CompanyMD as varchar(15)  
 declare @BranchMD as varchar(15)  
 declare @WarehouseMD as varchar(15)  
  
 set @DealerCode = 'MD'  
 set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 set @WarehouseMD = (select WarehouseMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 
if object_id('#tmpSvSDMovement') is not null drop table #tmpSvSDMovement
   
 if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)   
 begin  
  set @DealerCode = 'SD'  

  set @IsSPK = isnull((select a.ServiceType from #srv a where a.ServiceType = '2'),0)
  
  declare @DbName as varchar(50)  
  set @DbName = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
  
  declare @PurchaseDisc as decimal  
  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @BranchMD
       and ProfitCenterCode = '300')  
         
  if (@PurchaseDisc = 0) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            
       
  declare @tblTemp as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  
       
  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
   ,a.RetailPriceInclTax  
   ,b.TypeOfGoods  
     from ' + @DbName + '..spMstItemPrice a, ' + @DbName +'..spMstItems b  
   where 1 = 1  
     and a.CompanyCode = b.CompanyCode  
     and a.BranchCode = b.BranchCode  
     and a.PartNo = b.PartNo  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTemp    
  exec (@QueryTemp)  
  
  --select * into #part1 from (  
  --select * from @tblTemp  
  --)#part1  
    
  set @CostPrice = ((select RetailPrice from @tblTemp) / 1.1 * ((100 - @PurchaseDisc) / 100))  
  --select @CostPrice  
  set @RetailPrice = (select RetailPrice from @tblTemp)
  --select a.RetailPrice from spMstItemPrice a where a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode and a.PartNo = @PartNo)    
  set @TypeOfGoods = (select TypeOfGoods from @tblTemp)  
    
  set @CostPriceMD = (select CostPrice from @tblTemp)  
  set @RetailPriceMD = (select RetailPrice from @tblTemp)  
  set @RetailPriceInclTaxMD = (select RetailPriceInclTax from @tblTemp)  
    
  -- select @PurchaseDisc  
 end   
 else  
 begin
 
 declare @tblTempPart as table  
  (  
   CostPrice decimal(18,2),  
   RetailPrice decimal(18,2),  
   RetailPriceInclTax decimal(18,2),  
   TypeOfGoods varchar (2)  
  )  

  set @QueryTemp = 'select   
    a.CostPrice   
   ,a.RetailPrice  
     from ' + @DbName + '..spMstItemPrice a  
   where 1 = 1  
     and a.CompanyCode = ''' + @CompanyMD + '''  
     and a.BranchCode  = ''' + @BranchMD + '''  
     and a.PartNo      = ''' + @PartNo + ''''  
          
  insert into @tblTempPart    
  exec (@QueryTemp)  
   
  --select * into #part from (  
  --select   
  --  a.CostPrice   
  -- ,a.RetailPrice  
  --  from spMstItemPrice a  
  -- where 1 = 1  
  --   and a.CompanyCode = @CompanyCode  
  --   and a.BranchCode  = @BranchCode  
  --   and a.PartNo      = @PartNo  
  --)#part  
    
  set @CostPrice = (select CostPrice from @tblTempPart)  
  set @RetailPrice = (select RetailPrice from @tblTempPart)  
 end  
      
 if (@PartSeq > 0)  
 begin    
  -- select data mst job  
  select * into #job from (  
  select b.*  
    from svTrnService a, svMstJob b  
   where 1 = 1  
     and b.CompanyCode = a.CompanyCode  
     and b.ProductType = a.ProductType  
     and b.BasicModel = a.BasicModel  
     and b.JobType = a.JobType  
        and a.CompanyCode = @CompanyCode  
     and a.BranchCode  = @BranchCode  
     and a.ServiceNo   = @ServiceNo  
     and b.GroupJobType = 'FSC'  
  )#  
  if exists (select * from #job)  
  begin  
   -- update svTrnSrvItem  
   set @Querytemp ='
   update svTrnSrvItem set  
     DemandQty      = '+ convert(varchar,@DemandQty) +'
    ,CostPrice      = '+ convert(varchar,@CostPrice) +' 
    ,RetailPrice    = isnull((  
         select top 1 b.RetailPrice from #srv a, svMstTaskPart b  
          where b.CompanyCode = a.CompanyCode  
            and b.ProductType = a.ProductType  
            and b.BasicModel = a.BasicModel  
            and b.JobType = a.JobType  
            and b.PartNo = '''+ @PartNo +''' 
            and b.BillType = ''F'' 
         ), (  
          select top 1 isnull(RetailPrice, 0) RetailPrice  
            from '+ @DbName +'..spMstItemPrice  
           where 1 = 1  
             and CompanyCode = '''+ @CompanyMD +'''
             and BranchCode = '''+ @BranchMD +'''
             and PartNo = '''+ @PartNo  +'''
          )  
         )  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = '''+ @BillType +'''
    ,DiscPct        = '+ convert(varchar,@DiscPct) +'  
    where 1 = 1  
      and CompanyCode  = '''+ @CompanyCode +''' 
      and BranchCode   = '''+ @BranchCode +''' 
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = '''+ @PartNo +''' 
      and PartSeq      = '+ convert(varchar,@PartSeq) +'' 
	  
	  exec(@QueryTemp) 
  end  
  else  
  begin  
   -- update svTrnSrvItem  
   update svTrnSrvItem set  
     DemandQty      = @DemandQty  
    ,CostPrice      = @CostPrice  
    ,RetailPrice    = @RetailPrice  
    ,LastupdateBy   = (select LastupdateBy from #srv)  
    ,LastupdateDate = (select LastupdateDate from #srv)  
    ,BillType       = @BillType  
    ,DiscPct        = @DiscPct  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and PartSeq      = @PartSeq           
  end   
    
  --update svSDMovement  
    if (@DealerCode = 'SD' and @IsSPK = '2')  
	 begin    
		set @QueryTemp = 'update ' + @DbName + '..svSDMovement set    
		QtyOrder    = ' + case when @DemandQty is null then '0' else convert(varchar, @DemandQty) end + ' 
		,DiscPct    = ' + case when  @DiscPct is null then '0' else convert(varchar, @DiscPct) end + '
		,CostPrice    = ' + case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end + '  
		,RetailPrice   = ' + case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end + '  
		,CostPriceMD   = ' + case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end + '  
		,RetailPriceMD   = ' + case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end + '  
		,RetailPriceInclTaxMD = ' + case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end + '  
		,[Status]  = ''' + case when (select ServiceStatus from #srv) is null then '' else (select ServiceStatus from #srv) end + '''  
		,LastupdateBy   = ''' + case when (select LastupdateBy from #srv) is null then '' else (select LastupdateBy from #srv) end + '''  
		,LastupdateDate = ''' + case when (select LastupdateDate from #srv) is null then '' else convert(varchar,(select LastupdateDate from #srv)) end + '''  
	    where CompanyCode = ''' + case when @CompanyMD is null then '' else @CompanyMD end + '''
		  and BranchCode = ''' + case when @BranchMD is null then '' else @BranchMD end + '''
		  and DocNo  = ''' + case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end + '''  
		  and PartNo       =  ''' + case when @PartNo is null then '''' else @PartNo end  + '''
		  and PartSeq      = ' + case when @PartSeq is null then '0' else convert(varchar, @PartSeq) end + '';  
		  
		  --print @QueryTemp;  
		  exec 	(@QueryTemp);
	  end
 end  
 else  
 begin  
  if((select count(*) from svTrnSrvItem  
    where 1 = 1  
      and CompanyCode  = @CompanyCode  
      and BranchCode   = @BranchCode  
      and ProductType  = (select ProductType from #srv)  
      and ServiceNo    = (select ServiceNo from #srv)  
      and PartNo       = @PartNo  
      and (isnull(SupplySlipNo,'') = '')  
   ) > 0)  
  begin  
   raiserror ('Part yang sama sudah diproses di Entry SPK namun belum dapat No SSS, mohon diselesaikan dahulu!',16,1);  
  end  
  
  declare @PartSeqNew as int  
  set @PartSeqNew = (isnull((select isnull(max(PartSeq), 0) + 1    
      from svTrnSrvItem   
        where CompanyCode = @CompanyCode  
       and BranchCode  = @BranchCode   
       and ProductType = @ProductType  
       and ServiceNo   = @ServiceNo  
       and PartNo      = @PartNo), 1))  
         
  -- insert svTrnSrvItem  
  set @QueryTemp='insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct, MechanicID)  
  select   
    '''+ @CompanyCode +''' CompanyCode  
   ,''' + @BranchCode +''' BranchCode  
   ,'''+ @ProductType +''' ProductType  
   ,'+ convert(varchar,@ServiceNo) +' ServiceNo  
   ,a.PartNo  
   ,'''+ convert(varchar,@PartSeqNew)  +'''
   --,(row_number() over (order by a.PartNo)) PartSeq  
   ,'+ convert(varchar,@DemandQty )+' DemandQty  
   ,''0'' SupplyQty  
   ,''0'' ReturnQty  
   ,'+ convert(varchar,isnull(@CostPrice,0))  +'
   ,a.RetailPrice   
   ,b.TypeOfGoods  
   ,'''+ @BillType +''' BillType  
   ,null SupplySlipNo  
   ,null SupplySlipDate  
   ,null SSReturnNo  
   ,null SSReturnDate  
   ,c.LastupdateBy CreatedBy  
   ,c.LastupdateDate CreatedDate  
   ,c.LastupdateBy  
   ,c.LastupdateDate  
   ,'+ convert(varchar,isnull(@DiscPct,0))  +'
   ,(select MechanicID from svTrnService where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and ServiceNo = '+ convert(varchar,@ServiceNo) +')  
    from '+ @DbName +'..spMstItemPrice a, '+ @DbName +'..spMstItems b, #srv c, gnmstcompanymapping d 
   where 1 = 1  
        and a.CompanyCode = b.CompanyCode  
     and a.BranchCode  = b.BranchCode  
	 and d.CompanyMd = a.CompanyCode
	 and d.BranchMD = a.BranchCode
        and d.CompanyCode = c.CompanyCode  
     and d.BranchCode  = c.BranchCode  
     and b.PartNo      = a.PartNo  
        and a.CompanyCode = '''+ @CompanyMD +'''
     and a.BranchCode  = '''+ @BranchMD +'''
     and a.PartNo      = '''+ @PartNo +''''    
	  exec(@QueryTemp)


  --select   @CostPrice   
  --xxx
  
  if (@DealerCode = 'SD' and @IsSPK = '2')  
  begin
	create table #tmpSvSDMovement(
		CompanyCode varchar(15)
		,BranchCode varchar(15)
		,JobOrderNo varchar(20)   
		,JobOrderDate datetime  
		,PartNo varchar(20)
		,PartSeqNew int
		,WarehouseMD varchar(20)   
		,DemandQty numeric(18,2)
		,Qty numeric(18,2)
		,DiscPct numeric(18,2)
		,CostPrice numeric(18,2)
		,RetailPrice numeric(18,2) 
		,TypeOfGoods varchar(15) 
		,CompanyMD varchar(15)
		,BranchMD varchar(15)   
		,WarehouseMD2 varchar(15)
		,RetailPriceInclTaxMD numeric(18,2) 
		,RetailPriceMD numeric(18,2) 
		,CostPriceMD numeric(18,2)  
		,QtyFlag char(1)
		,ProductType varchar(15) 
		,ProfitCenterCode varchar(15)
		,Status char(1)
		,ProcessStatus char(1)
		,ProcessDate datetime 
		,CreatedBy varchar(15) 
		,CreatedDate datetime 
		,LastUpdateBy varchar(15) 
		,LastUpdateDate datetime	
	);
   
	insert into #tmpSvSDMovement 
		select case when @CompanyCode is null then '' else @CompanyCode end 
		,case when @BranchCode is null then '' else @BranchCode end
		,case when (select JobOrderNo from #srv) is null then '' else (select JobOrderNo from #srv) end
		,case when (select JobOrderDate from #srv) is null then '1900/01/01' else (select JobOrderDate from #srv) end 
		,case when @PartNo is null then '' else  @PartNo end 
		,case when @PartSeqNew is null then '0' else convert(varchar, @PartSeqNew) end
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
     	,case when @DemandQty  is null then '0' else convert(varchar, @DemandQty) end
		,case when @DiscPct is null then '0' else convert(varchar, @DiscPct) end  
		,case when @CostPrice is null then '0' else convert(varchar, @CostPrice) end 
		,case when @RetailPrice is null then '0' else convert(varchar, @RetailPrice) end  
		,case when @TypeOfGoods is null then '' else @TypeOfGoods end 
		,case when @CompanyMD is null then '' else @CompanyMD end   
		,case when @BranchMD is null then '' else @BranchMD end  
		,case when @WarehouseMD is null then '' else @WarehouseMD end  
		,case when @RetailPriceInclTaxMD is null then '0' else convert(varchar, @RetailPriceInclTaxMD) end  
		,case when @RetailPriceMD is null then '0' else convert(varchar, @RetailPriceMD) end   
		,case when @CostPriceMD is null then '0' else convert(varchar, @CostPriceMD) end
		,'x'
		,case when @ProductType is null then '' else @ProductType end  
		,'300'  
		,'0' 
		,'0'
		,'1900/01/01'  
		,case when (select CreatedBy from #srv) is null then '' else (select CreatedBy from #srv) end     
		,case when (select CreatedDate from #srv) is null then '1900/01/01' else convert(varchar,(select CreatedDate from #srv)) end 
		,case when (select LastUpdateBy from #srv) is null then '' else (select LastUpdateBy from #srv) end
		,case when (select LastUpdateDate from #srv) is null then '1900/01/01' else convert(varchar,(select LastUpdateDate from #srv)) end
     
	set @QueryTemp = '
	insert into ' + @DbName + '..svSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice,   
	TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, 
	Status, ProcessStatus, ProcessDate, CreatedBy,   
	CreatedDate, LastUpdateBy, LastUpdateDate)  
	select * from #tmpSvSDMovement';
	exec(@QueryTemp);
	
	drop table #tmpSvSDMovement;     
  
  end   
 end  
   
 update svTrnSrvItem  
    set DiscPct = @DiscPct  
  where 1 = 1  
    and CompanyCode = @CompanyCode  
    and BranchCode = @BranchCode  
    and ProductType = @ProductType  
    and ServiceNo = @ServiceNo  
    and PartNo = @PartNo  
   
 if (@DealerCode = 'SD' and @IsSPK = '2')  
 begin    
	set @QueryTemp = 'update ' + @DbName + '..svSDMovement   
	  set DiscPct = ' + convert(varchar,@DiscPct) 
	  + ' where 1 = 1'  
	  +	' and CompanyCode = ''' + case when @CompanyMD is null then '''' else  @CompanyMD end + ''''
	  + ' and BranchCode = ''' + case when @BranchMD is null then '''' else  @BranchMD end + ''''
	  + ' and DocNo = ''' + case when (select JobOrderNo from #srv) is null then '''' else (select JobOrderNo from #srv) end  + ''''
	  + ' and PartNo = ''' + case when @PartNo is null then '''' else @PartNo end + ''''  
	  + ' and PartSeq = ' + convert(varchar,@PartSeq) + '';
  
	exec (@QueryTemp)  
 end  
   
	drop table #srv  
end try  
begin catch  
 set @errmsg = error_message()  
 raiserror (@errmsg,16,1);  
end catch  

--rollback tran
GO
ALTER procedure [dbo].[uspfn_SvTrnInvoiceCancel]
	@CompanyCode   varchar(20),
	@BranchCode    varchar(20),
	@InvoiceNo     varchar(20),
	@UserInfo      varchar(max)
as  

declare @errmsg varchar(max)
declare @JobOrderNo varchar(20) 

begin try
set nocount on
	set @JobOrderNo = (Select JobOrderNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo = @InvoiceNo)
	
	if exists (
	select * from ArInterface
	 where CompanyCode = @CompanyCode
	   and BranchCode  = @BranchCode
	   and (StatusFlag > '0' or ReceiveAmt > 0 or BlockAmt > 0 or DebetAmt > 0 or CreditAmt > 0)
	   and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	)
	begin
		raiserror('Invoice sudah ada proses Receiving, transaksi tidak bisa dilanjutkan',16 ,1 );
	end

	if exists (
	select * from svTrnFakturPajak
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and FPJNo in (select FPJNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	   and isnull(FPJGovNo, '') <> ''
	   and left(FPJGovNo, 3) <> 'SHN'
	)
	begin
		raiserror('Invoice sudah tergenerate Nomor Pajak Pemerintah, transaksi tidak bisa dilanjutkan',16 ,1 );
	end

	;with x as (
		select a.BranchCode, a.CustomerCode, a.SalesAmt, b.TotalSrvAmt
		  from gnTrnBankBook a, svTrnInvoice b
		 where 1 = 1
		   and b.CompanyCode = a.CompanyCode
		   and b.BranchCode = a.BranchCode
		   and b.CustomerCodeBill = a.CustomerCode
		   and a.ProfitCenterCode = '200'
		   and a.CompanyCode = @BranchCode
		   and a.BranchCode = @BranchCode
		   and b.JobOrderNo = @JobOrderNo
	)
	update x set SalesAmt = SalesAmt - TotalSrvAmt where SalesAmt > 0

	delete from glInterface 
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete from arInterface 
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	update svTrnService set ServiceStatus = 5, InvoiceNo = ''
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and JobOrderNo = @JobOrderNo

	delete svTrnFakturPajak
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and FPJNo in (select FPJNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	-------------------------------------------------------------------------------------------------------------------
	-- Insert into table log
	-------------------------------------------------------------------------------------------------------------------
	declare @TransID   uniqueidentifier; 
	declare @TransCode varchar(20);

	set @TransID = newid()
	set @TransCode = 'CANCEL INVOICE' 

	insert into svTrnInvoiceLog (
		TransID,TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,InvoiceDate,InvoiceStatus,
		FPJNo,FPJDate,JobOrderNo,JobOrderDate,JobType,ServiceRequestDesc,ChassisCode,ChassisNo,
		EngineCode,EngineNo,PoliceRegNo,BasicModel,CustomerCode,CustomerCodeBill,Odometer,
		IsPKP,TOPCode,TOPDays,DueDate,SignedDate,LaborDiscPct,PartsDiscPct,MaterialDiscPct,
		PphPct,PpnPct,LaborGrossAmt,PartsGrossAmt,MaterialGrossAmt,LaborDiscAmt,PartsDiscAmt,MaterialDiscAmt,
		LaborDppAmt,PartsDppAmt,MaterialDppAmt,TotalDppAmt,TotalPphAmt,TotalPpnAmt,TotalSrvAmt,
		Remarks,PrintSeq,PostingFlag,PostingDate,CreatedBy,CreatedDate
	) 
	select 
		@TransID, @TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,InvoiceDate,InvoiceStatus,
		FPJNo,FPJDate,JobOrderNo,JobOrderDate,JobType,left(ServiceRequestDesc, 200),ChassisCode,ChassisNo,
		EngineCode,EngineNo,PoliceRegNo,BasicModel,CustomerCode,CustomerCodeBill,Odometer,
		IsPKP,TOPCode,TOPDays,DueDate,SignedDate,LaborDiscPct,PartsDiscPct,MaterialDiscPct,
		PphPct,PpnPct,LaborGrossAmt,PartsGrossAmt,MaterialGrossAmt,LaborDiscAmt,PartsDiscAmt,MaterialDiscAmt,
		LaborDppAmt,PartsDppAmt,MaterialDppAmt,TotalDppAmt,TotalPphAmt,TotalPpnAmt,TotalSrvAmt,
		Remarks,PrintSeq,PostingFlag,PostingDate,@UserInfo,CreatedDate
	from svTrnInvoice
	 where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	insert into svTrnInvTaskLog(TransID,TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,OperationNo,OperationHour,ClaimHour,OperationCost,SubConPrice,IsSubCon,SharingTask)
	select @TransID,@TransCode,CompanyCode,BranchCode,ProductType,InvoiceNo,OperationNo,OperationHour,ClaimHour,OperationCost,SubConPrice,IsSubCon,SharingTask from svTrnInvTask 
	 where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	insert into svTrnInvItemLog(TransID,TransCode,CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods)
	select @TransID,@TransCode,CompanyCode, BranchCode, ProductType, InvoiceNo, PartNo, MovingCode, ABCClass, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods from svTrnInvItem
	 where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	delete svTrnInvItemDtl where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvItem where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvMechanic where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvTask where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)
	delete svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and JobOrderNo = @JobOrderNo)

	declare @CompanyMD as varchar(15)
	declare @BranchMD as varchar(15)

	set @CompanyMD = (select CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
	set @BranchMD = (select BranchMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

	if (@CompanyCode != @CompanyMD and @BranchCode != @BranchMD)
	begin
	declare @Query VARCHAR(MAX)
		
	set @Query ='update '+dbo.GetDbMD(@CompanyCode, @BranchCode)+'..svSDMovement 
		set Status = ''9'',
			LastUpdateBy = '''+ @UserInfo +''',
			LastUpdateDate = '''+ convert(varchar,getdate()) +'''
		where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +'''
		and DocNo in (Select InvoiceNo from svTrnInvoice where CompanyCode = '''+ @CompanyCode +''' and BranchCode = '''+ @BranchCode +''' and JobOrderNo = '''+ @JobOrderNo +''')'	
	end
end try
begin catch
    set @errmsg = 'InvoiceNo : ' + @InvoiceNo + char(13) + 'Error Message:' + char(13) + error_message()
    raiserror (@errmsg,16,1);
end catch
GO
-- usprpt_SvRpReport021 '6159401','615940100','4W',2011,3,'1','ga'
ALTER procedure [dbo].[usprpt_SvRpReport021]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType varchar(15), 
	@PeriodYear  int,
	@PeriodMonth int,
	@Posting     bit,
	@UserID      varchar(15)
as

-- A. Sales Revenue
declare	@TotalLaborSalesRevenue            numeric(18,0)
declare	@LaborRevenueChargeable            numeric(18,0)
declare	@LaborRevenueNonChargeable1        numeric(18,0)
declare	@LaborRevenueNonChargeable2        numeric(18,0)
declare	@TotalPartsSalesRevenue            numeric(18,0)
declare	@PartsRevenueChargeable            numeric(18,0)
declare	@PartsRevenueNonChargeable1        numeric(18,0)
declare	@PartsRevenueNonChargeable2        numeric(18,0)
declare	@TotalMaterialSalesRevenue         numeric(18,0)
declare	@MaterialRevenueChargeable         numeric(18,0)
declare	@MaterialRevenueNonChargeable1     numeric(18,0)
declare	@MaterialRevenueNonChargeable2     numeric(18,0)
declare @TotalServiceSalesRevenue          numeric(18,0)
declare @TotalServiceSalesChargeable       numeric(18,0)
declare @TotalServiceSalesNonChargeable1   numeric(18,0)
declare @TotalServiceSalesNonChargeable2   numeric(18,0)
declare	@HoursSold                         numeric(12,2)
declare	@ServiceRevenuePerUnit             numeric(18,0)
declare	@LaborSalesTurnoverProductiveStaff numeric(18,0)
declare	@LaborSalesTurnoverServiceAdvisors numeric(18,0)
declare	@LaborSalesTurnoverStall           numeric(18,0)
-- B. No. of Unit Intake
declare	@NoWorkOrderVehicleIntake          numeric(08,0)
declare	@PassengerCar                      numeric(08,0)
declare	@CommercialVehicle                 numeric(08,0)
declare	@PDI                               numeric(08,0)
-- C. No. of Job Type
declare @TotalChargeable                   numeric(08,0)
declare @Chargeable1                       numeric(08,0)
declare @Chargeable2                       numeric(08,0)
declare @Chargeable3                       numeric(08,0)
declare @Chargeable4                       numeric(08,0)
declare @TotalNonChargeable                numeric(08,0)
declare @NonChargeable1                    numeric(08,0)
declare @NonChargeable2                    numeric(08,0)
declare @NonChargeable3                    numeric(08,0)
declare @NonChargeable4                    numeric(08,0)
declare @NonChargeable5                    numeric(08,0)
-- D. Workshop Service Strength
declare @NoWorkingStall                    numeric(03,0)
declare @TotalStaff                        numeric(06,0)
declare @NoAdminSupportStaff               numeric(06,0)
declare @NoServiceAdvisorsStaff            numeric(06,0)
declare @NoProductiveStaff                 numeric(06,0)
declare @NoForeman                         numeric(06,0)
declare @NoTechnician                      numeric(06,0)
declare @NoPDIStaff	                       numeric(06,0)
declare @TotalAvailableHours		       numeric(08,2)
declare @OvertimeNormalWorkingHour 		   numeric(08,2)
-- E. Productivity Indicators	
declare @RepairUnitProductiveStaff         numeric(08,2)
declare @RepairUnitTechnician              numeric(08,2)
declare @RepairUnitWorkingStall            numeric(08,2)
declare @NoCustomertoServiceAdvisor        numeric(08,2)
declare @NoWorkdays	                       numeric(06,0)
declare @RepairUnitProductiveDay           numeric(06,2)
declare @RepairUnitTechnicianDay           numeric(06,2) 
declare @RepairUnitWorkingStallDay         numeric(06,2)
declare @NoCustomertoServiceAdvisorDay     numeric(06,2)
declare @HoursSoldtoAvailableHours         numeric(08,2)
-- F. Service Retention & Marketing Activity  
--> akan berlaku setelah SMR selesai di develop
declare @ServiceReminder                   numeric(08,0)
declare @ServiceFollowUp                   numeric(08,0)
declare @ServiceBookings                   numeric(08,0)
declare @ServiceRemindertoNoWorkOrder      numeric(06,2)
declare @ServiceFollowUptoNoWorkOrder      numeric(06,2)
declare @ServiceBookingstoNoWorkOrder      numeric(06,2)
-- G. CSI Performance	
--> akan berlaku setelah SMR selesai di develop
declare @CSIScore	                       numeric(06,2)
declare @DirectComplaintsReceived	       numeric(08,0)
declare @IndirectComplaintsReceived	       numeric(08,0)
declare @TotalNoFollowUpSatisfied	       numeric(08,0)
declare @TotalNoFollowUpNotSatisfied       numeric(08,0)
declare @NoNotSatisfiedService             numeric(08,0)
declare @NoNotSatisfiedTechnical           numeric(08,0)
declare @FollowUpSatisfiedtoNoWorkOrder    numeric(06,2)
declare @FollowUpNotSatisfiedtoNoWorkOrder numeric(06,2)
declare @ComplaintsFollowUpNotSatisfied    numeric(06,2)

create table #t_MonthReview(
	 GroupField varchar(20)
	, CompanyCode	varchar(15)
	, BranchCode	varchar(15)
	, ProductType varchar(15)
	, PeriodYear  int
	, Description	varchar(max)
	, UOM varchar(10)
	, Average decimal
	, Total decimal
	, Jan decimal , Feb decimal, Mar decimal, Apr decimal
	, May decimal , Jun decimal, Jul decimal, Aug decimal
	, Sep decimal , Oct decimal, Nov decimal, Dec decimal
)

select * into #inv 
  from (select inv.InvoiceNo, inv.JobType, job.GroupJobType,
               inv.LaborDppAmt, inv.PartsDppAmt, inv.MaterialDppAmt
          from svTrnInvoice inv, svMstJob job
         where inv.CompanyCode=@CompanyCode
           and inv.BranchCode=@BranchCode
           and inv.ProductType=@ProductType
           and year(inv.InvoiceDate)=@PeriodYear
           and month(inv.InvoiceDate)=@PeriodMonth
           and inv.CompanyCode=job.CompanyCode
           and inv.ProductType=job.ProductType
           and inv.BasicModel=job.BasicModel
           and inv.JobType=job.JobType) inv

select * into #task
  from (select inv.InvoiceNo
				, isnull(sum(int.OperationHour * int.OperationCost),0) Labor
				, isnull(sum(int.OperationHour),0) HourEstimate
          from #inv inv, svTrnInvTask int
         where int.CompanyCode=@CompanyCode
           and int.BranchCode=@BranchCode
           and int.ProductType=@ProductType
           and int.InvoiceNo=inv.InvoiceNo
         group by inv.InvoiceNo) task

select * into #item
  from (select inv.InvoiceNo, mst.ParaValue Goods, isnull(sum(ini.SupplyQty * ini.RetailPrice),0) Part
          from #inv inv, svTrnInvItem ini, gnMstLookUpDtl mst
         where ini.CompanyCode=@CompanyCode
           and ini.BranchCode=@BranchCode
           and ini.ProductType=@ProductType
           and ini.InvoiceNo=inv.InvoiceNo
           and mst.CompanyCode=ini.CompanyCode
           and mst.CodeID='GTGO'
           and mst.LookUpValue=ini.TypeOfGoods
         group by inv.InvoiceNo, mst.ParaValue) item

set @TotalLaborSalesRevenue = (select sum(isnull(LaborDppAmt,0)) from #inv)

set @LaborRevenueChargeable = (select sum(isnull(LaborDppAmt,0)) from #inv
                                where substring(InvoiceNo,1,3)<>'INI'
                                  and GroupJobType in ('RTN','OTH'))

set @LaborRevenueNonChargeable1 = (select sum(isnull(LaborDppAmt,0)) from #inv
                                    where JobType='CLAIM' or substring(JobType,1,3)='FSC')

set @LaborRevenueNonChargeable2 = (select sum(isnull(LaborDppAmt,0)) from #inv
                                    where JobType in ('PDI','REWORK') or substring(InvoiceNo,1,3)='INI')

set @TotalPartsSalesRevenue = (select sum(isnull(PartsDppAmt,0)) from #inv)

set @PartsRevenueChargeable = (select sum(isnull(PartsDppAmt,0)) from #inv
                                where substring(InvoiceNo,1,3)<>'INI'
                                  and GroupJobType in ('RTN','OTH'))

set @PartsRevenueNonChargeable1 = (select sum(isnull(PartsDppAmt,0)) from #inv
                                    where JobType='CLAIM' or substring(JobType,1,3)='FSC')

set @PartsRevenueNonChargeable2 = (select sum(isnull(PartsDppAmt,0)) from #inv
                                    where JobType in ('PDI','REWORK') or substring(InvoiceNo,1,3)='INI')

set @TotalMaterialSalesRevenue = (select sum(isnull(MaterialDppAmt,0)) from #inv)

set @MaterialRevenueChargeable = (select sum(isnull(MaterialDppAmt,0)) from #inv
                                   where substring(InvoiceNo,1,3)<>'INI'
                                     and GroupJobType in ('RTN','OTH'))

set @MaterialRevenueNonChargeable1 = (select sum(isnull(MaterialDppAmt,0)) from #inv
                                       where JobType='CLAIM' or JobType='FSC01')

set @MaterialRevenueNonChargeable2 = (select sum(isnull(MaterialDppAmt,0)) from #inv
                                       where JobType in ('PDI','REWORK') or substring(InvoiceNo,1,3)='INI')

set @TotalServiceSalesChargeable = @LaborRevenueChargeable + @PartsRevenueChargeable + @MaterialRevenueChargeable
set @TotalServiceSalesNonChargeable1 = @LaborRevenueNonChargeable1 + @PartsRevenueNonChargeable1 + @MaterialRevenueNonChargeable1
set @TotalServiceSalesNonChargeable2 = @LaborRevenueNonChargeable2 + @PartsRevenueNonChargeable2 + @MaterialRevenueNonChargeable2
set @TotalServiceSalesRevenue = @TotalServiceSalesChargeable + @TotalServiceSalesNonChargeable1 + @TotalServiceSalesNonChargeable2

set @HoursSold = (select sum(isnull(OperationHour,0)) from svTrnInvTask
                   where CompanyCode=@CompanyCode
                     and BranchCode=@BranchCode
                     and ProductType=@ProductType
                     and exists (select InvoiceNo from svTrnInvoice
                                  where svTrnInvoice.CompanyCode=@CompanyCode
                                    and svTrnInvoice.BranchCode=@BranchCode
                                    and svTrnInvoice.ProductType=@ProductType
                                    and svTrnInvoice.InvoiceNo=svTrnInvTask.InvoiceNo
                                    and year(svTrnInvoice.InvoiceDate)=@PeriodYear
                                    and month(svTrnInvoice.InvoiceDate)=@PeriodMonth))
-----------------------------------------------------------------------------------------------
if (select count (inv.ChassisCode) from svTrnInvoice inv
	inner join svTrnService spk on inv.CompanyCode=spk.CompanyCode
		and inv.BranchCode	= spk.BranchCode
		and inv.ProductType = spk.ProductType
		and inv.JobOrderNo	= spk.JobOrderNo
	INNER JOIN omMstVehicle c ON c.CompanyCode = inv.CompanyCode 
		AND c.ChassisCode = inv.ChassisCode
		AND c.ChassisNo = inv.ChassisNo
	INNER JOIN omMstModel d ON d.CompanyCode = c.CompanyCode
		AND d.SalesModelCode = c.SalesModelCode
		AND (d.isLocked IS NULL OR d.isLocked = 0)
	where inv.CompanyCode = @CompanyCode
		and inv.BranchCode = @BranchCode
		and inv.ProductType = @ProductType
		and inv.JobType<>'PDI'
		and year(inv.InvoiceDate)=@PeriodYear
		and month(inv.InvoiceDate)=@PeriodMonth) = 0
begin
	set @PassengerCar = 0
end
else
begin
	set @PassengerCar = isnull((select count(*)
                              from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                                    from svTrnInvoice inv
									inner join svTrnService spk on inv.CompanyCode = spk.CompanyCode
										and inv.BranchCode=spk.BranchCode
										and inv.ProductType=spk.ProductType
										and inv.JobOrderNo=spk.JobOrderNo
									INNER JOIN omMstVehicle c ON c.CompanyCode = inv.CompanyCode 
										AND c.ChassisCode = inv.ChassisCode
										AND c.ChassisNo = inv.ChassisNo
									INNER JOIN omMstModel d ON d.CompanyCode = c.CompanyCode
										AND d.SalesModelCode = c.SalesModelCode
										AND (d.isLocked IS NULL OR d.isLocked = 0)
                                    where inv.CompanyCode = @CompanyCode
										and inv.BranchCode = @BranchCode
										and inv.ProductType = @ProductType
										and inv.JobType<>'PDI'
										and year(inv.InvoiceDate)=@PeriodYear
										and month(inv.InvoiceDate)=@PeriodMonth)pc),0)

end
/*
set @PassengerCar = isnull((select count(*)
                              from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                                      from svTrnInvoice inv, svTrnService spk
                                     where inv.CompanyCode=@CompanyCode
                                       and inv.BranchCode=@BranchCode
                                       and inv.ProductType=@ProductType
                                       and inv.JobType<>'PDI'
                                       and year(inv.InvoiceDate)=@PeriodYear
                                       and month(inv.InvoiceDate)=@PeriodMonth
                                       and right(inv.BasicModel,3)<>'ANG' 
                                       and right(inv.BasicModel,2)<>'CH'
                                       and inv.CompanyCode=spk.CompanyCode
                                       and inv.BranchCode=spk.BranchCode
                                       and inv.ProductType=spk.ProductType
                                       and inv.JobOrderNo=spk.JobOrderNo)pc),0)

*/
 
if (select count (inv.ChassisCode) from svTrnInvoice inv
	inner join svTrnService spk on inv.CompanyCode=spk.CompanyCode
		and inv.BranchCode=spk.BranchCode
		and inv.ProductType=spk.ProductType
		and inv.JobOrderNo=spk.JobOrderNo
	INNER JOIN omMstVehicle c ON c.CompanyCode = inv.CompanyCode 
		AND c.ChassisCode = inv.ChassisCode
		AND c.ChassisNo = inv.ChassisNo
	INNER JOIN omMstModel d ON d.CompanyCode = c.CompanyCode
		AND d.SalesModelCode = c.SalesModelCode
		AND d.isLocked = 1
	where inv.CompanyCode=@CompanyCode
		and inv.BranchCode=@BranchCode
		and inv.ProductType=@ProductType
		and inv.JobType<>'PDI'
		and year(inv.InvoiceDate)=@PeriodYear
		and month(inv.InvoiceDate)=@PeriodMonth) = 0
begin
	set @CommercialVehicle = 0
end
else
begin
	set @CommercialVehicle = isnull((select count(*) 
									from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK 
											from svTrnInvoice inv
											inner join svTrnService spk on inv.CompanyCode = spk.CompanyCode
												and inv.BranchCode = spk.BranchCode
												and inv.ProductType	= spk.ProductType
												and inv.JobOrderNo = spk.JobOrderNo
											INNER JOIN omMstVehicle c ON c.CompanyCode = inv.CompanyCode 
												AND c.ChassisCode = inv.ChassisCode
												AND c.ChassisNo	= inv.ChassisNo
											INNER JOIN omMstModel d ON d.CompanyCode = c.CompanyCode
												AND d.SalesModelCode = c.SalesModelCode
												AND d.isLocked = 1
											where inv.CompanyCode = @CompanyCode
												and inv.BranchCode = @BranchCode
												and inv.ProductType = @ProductType
												and inv.JobType <> 'PDI'
												and year(inv.InvoiceDate) = @PeriodYear
												and month(inv.InvoiceDate) = @PeriodMonth)cv),0)

end
/*
set @CommercialVehicle = isnull((select count(*)
                                   from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                                           from svTrnInvoice inv, svTrnService spk
                                          where inv.CompanyCode=@CompanyCode
                                            and inv.BranchCode=@BranchCode
                                            and inv.ProductType=@ProductType
                                            and inv.JobType<>'PDI'
                                            and year(inv.InvoiceDate)=@PeriodYear
                                            and month(inv.InvoiceDate)=@PeriodMonth
                                            and (  right(inv.BasicModel,3)='ANG' 
											   or right(inv.BasicModel,2)='CH')
                                            and inv.CompanyCode=spk.CompanyCode
                                            and inv.BranchCode=spk.BranchCode
                                            and inv.ProductType=spk.ProductType
                                            and inv.JobOrderNo=spk.JobOrderNo)cv),0)

print(@CommercialVehicle)
*/

set @PDI = isnull((select count(*)
                     from (select distinct inv.ChassisCode, inv.ChassisNo, convert(varchar,spk.JobOrderDate,112) SPK
                             from svTrnInvoice inv, svTrnService spk
                            where inv.CompanyCode=@CompanyCode
                              and inv.BranchCode=@BranchCode
                              and inv.ProductType=@ProductType
                              and year(inv.InvoiceDate)=@PeriodYear
                              and month(inv.InvoiceDate)=@PeriodMonth
                              and inv.JobType='PDI'
                              and inv.CompanyCode=spk.CompanyCode
                              and inv.BranchCode=spk.BranchCode
                              and inv.ProductType=spk.ProductType
                              and inv.JobOrderNo=spk.JobOrderNo)pdi),0)

-- B. No. of Unit Intake
set @NoWorkOrderVehicleIntake = @PassengerCar + @CommercialVehicle

set @ServiceRevenuePerUnit = @TotalServiceSalesChargeable + @TotalServiceSalesNonChargeable1

-- C. No. of Job Type
set @Chargeable1 = isnull((select count(*)  -- kelipatan 10.000 > 30.000
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.CompanyCode=job.CompanyCode
                                         and inv.ProductType=job.ProductType
                                         and inv.BasicModel=job.BasicModel
                                         and inv.JobType=job.JobType
                                         and job.GroupJobType='RTN'
                                         and inv.JobType not in ('PB10000','PB20000')
                                         and substring(inv.JobType,3,15) like '%0000%'
                                         and substring(inv.InvoiceNo,1,3) <> 'INI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c1),0)

set @Chargeable2 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and (inv.JobType in ('PB10000','PB20000') or substring(inv.JobType,1,5) in ('FSC02','FSC03'))
                                         and substring(inv.InvoiceNo,1,3) <> 'INI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
     and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c2),0)

set @Chargeable3 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int, svMstJob job
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.CompanyCode=job.CompanyCode
                                         and inv.ProductType=job.ProductType
                                         and inv.BasicModel=job.BasicModel
                                         and inv.JobType=job.JobType
                                         and job.GroupJobType='RTN'
                                         and substring(inv.JobType,3,15) like '%5000'
                                         and substring(inv.InvoiceNo,1,3) <> 'INI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c3),0)

set @Chargeable4 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='OTHER'
                                         and substring(inv.InvoiceNo,1,3) <> 'INI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)c4),0)

set @TotalChargeable = @Chargeable1 + @Chargeable2 + @Chargeable3 + @Chargeable4

set @NonChargeable1 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='CLAIM'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc1),0)

set @NonChargeable2 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                     and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='FSC01'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc2),0)

set @NonChargeable3 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='REWORK'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc3),0)

set @NonChargeable4 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and substring(inv.InvoiceNo,1,3)='INI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc4),0)

set @NonChargeable5 = isnull((select count(*)
                                from (select inv.InvoiceNo 
                                        from svTrnInvoice inv, svTrnInvTask int
                                       where inv.CompanyCode=@CompanyCode
                                         and inv.BranchCode=@BranchCode
                                         and inv.ProductType=@ProductType
                                         and year(inv.InvoiceDate)=@PeriodYear
                                         and month(inv.InvoiceDate)=@PeriodMonth
                                         and inv.JobType='PDI'
                                         and inv.CompanyCode=int.CompanyCode
                                         and inv.BranchCode=int.BranchCode
                                         and inv.ProductType=int.ProductType
                                         and inv.InvoiceNo=int.InvoiceNo)nc5),0)

set @TotalNonChargeable = @NonChargeable1 + @NonChargeable2 + @NonChargeable3 + @NonChargeable4 + @NonChargeable5

-- D. Workshop Service Strength
set @NoWorkingStall = isnull((select count(*) from svMstStall
                               where CompanyCode=@CompanyCode
                                 and ProductType=@ProductType
                                 and IsActive=1),1)

set @NoAdminSupportStaff = isnull((select count(*) from gnMstEmployee
                                    where CompanyCode=@CompanyCode
                                      and BranchCode=@BranchCode
                                      and TitleCode in ('2','4','7','10','11')
                                      and PersonnelStatus='1'),1)

set @NoServiceAdvisorsStaff = isnull((select count(*) from gnMstEmployee
                                       where CompanyCode=@CompanyCode
                                         and BranchCode=@BranchCode
                                         and TitleCode='3'
                                         and PersonnelStatus='1'),1)

set @NoForeman = isnull((select count(*) from gnMstEmployee
                          where CompanyCode=@CompanyCode
                            and BranchCode=@BranchCode
                            and TitleCode='8'
                            and PersonnelStatus='1'),1)

set @NoTechnician = isnull((select count(*) from gnMstEmployee
                             where CompanyCode=@CompanyCode
                               and BranchCode=@BranchCode
                               and TitleCode='9'
                               and PersonnelStatus='1'),1)

set @NoPDIStaff	= 0
set @NoProductiveStaff = @NoForeman + @NoTechnician
set @TotalStaff = @NoAdminSupportStaff + @NoServiceAdvisorsStaff + @NoProductiveStaff + @NoPDIStaff

set @TotalAvailableHours = isnull((select TotalWorkingDays from svMstTarget
                                    where CompanyCode=@CompanyCode
                                      and BranchCode=@BranchCode
                                      and ProductType=@ProductType
                                      and PeriodYear=@PeriodYear
                                      and PeriodMonth=@PeriodMonth),0) * 8

set @OvertimeNormalWorkingHour = 0

if 	@NoProductiveStaff = 0 
    set @LaborSalesTurnoverProductiveStaff = @TotalLaborSalesRevenue
else
    set @LaborSalesTurnoverProductiveStaff = @TotalLaborSalesRevenue / @NoProductiveStaff

if @NoServiceAdvisorsStaff = 0
    set @LaborSalesTurnoverServiceAdvisors= @TotalLaborSalesRevenue
else
    set @LaborSalesTurnoverServiceAdvisors= @TotalLaborSalesRevenue / @NoServiceAdvisorsStaff

if 	@NoWorkingStall = 0 
    set @LaborSalesTurnoverStall = @TotalLaborSalesRevenue
else
    set @LaborSalesTurnoverStall = @TotalLaborSalesRevenue / @NoWorkingStall

-- E. Productivity Indicators
if 	@NoProductiveStaff = 0 
    set @RepairUnitProductiveStaff = @NoWorkOrderVehicleIntake
else
    set @RepairUnitProductiveStaff = @NoWorkOrderVehicleIntake / @NoProductiveStaff

if 	@NoTechnician = 0 
    set @RepairUnitTechnician = @NoWorkOrderVehicleIntake
else
    set @RepairUnitTechnician = @NoWorkOrderVehicleIntake / @NoTechnician 

if 	@NoWorkingStall = 0 
    set @RepairUnitWorkingStall = @NoWorkOrderVehicleIntake
else
    set @RepairUnitWorkingStall = @NoWorkOrderVehicleIntake / @NoWorkingStall

if @NoServiceAdvisorsStaff = 0
    set @NoCustomertoServiceAdvisor = @NoWorkOrderVehicleIntake / @NoServiceAdvisorsStaff
else
    set @NoCustomertoServiceAdvisor = @NoWorkOrderVehicleIntake / @NoServiceAdvisorsStaff

set @NoWorkdays = isnull((select TotalWorkingDays from svMstTarget
                           where CompanyCode=@CompanyCode
                             and BranchCode=@BranchCode
                             and ProductType=@ProductType
                             and PeriodYear=@PeriodYear
                             and PeriodMonth=@PeriodMonth),0)

if @NoWorkdays = 0
    begin
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff
       set @RepairUnitTechnicianDay = @RepairUnitTechnician
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff
       set @RepairUnitTechnicianDay = @RepairUnitTechnician
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall
    set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor
    end
else
    begin
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff / @NoWorkdays
       set @RepairUnitTechnicianDay = @RepairUnitTechnician / @NoWorkdays
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall / @NoWorkdays
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor / @NoWorkdays
       set @RepairUnitProductiveDay = @RepairUnitProductiveStaff / @NoWorkdays
       set @RepairUnitTechnicianDay = @RepairUnitTechnician / @NoWorkdays
       set @RepairUnitWorkingStallDay = @RepairUnitWorkingStall / @NoWorkdays
       set @NoCustomertoServiceAdvisorDay = @NoCustomertoServiceAdvisor / @NoWorkdays
    end

if @TotalAvailableHours = 0
    set @HoursSoldtoAvailableHours = @HoursSold  * 100
else
    set @HoursSoldtoAvailableHours = @HoursSold * 100 / @TotalAvailableHours

-- F. Service Retention & Marketing Activity
set @ServiceReminder = 0
set @ServiceFollowUp = 0
set @ServiceBookings = 0

if @NoWorkOrderVehicleIntake = 0
   begin
       set @ServiceRemindertoNoWorkOrder = @ServiceReminder * 100
       set @ServiceFollowUptoNoWorkOrder = @ServiceFollowUp * 100
       set @ServiceBookingstoNoWorkOrder = @ServiceBookings * 100
   end
else
   begin
       set @ServiceRemindertoNoWorkOrder = @ServiceReminder * 100 / @NoWorkOrderVehicleIntake
       set @ServiceFollowUptoNoWorkOrder = @ServiceFollowUp * 100 / @NoWorkOrderVehicleIntake
       set @ServiceBookingstoNoWorkOrder = @ServiceBookings * 100 / @NoWorkOrderVehicleIntake
   end

-- G. CSI Performance	
--> akan berlaku setelah SMR selesai di develop
set @CSIScore = 0
set @DirectComplaintsReceived = 0
set @IndirectComplaintsReceived = 0
set @TotalNoFollowUpSatisfied = 0
set @NoNotSatisfiedService = 0
set @NoNotSatisfiedTechnical = 0
set @TotalNoFollowUpNotSatisfied = @NoNotSatisfiedService + @NoNotSatisfiedTechnical

if @NoWorkOrderVehicleIntake = 0
   begin
      set @FollowUpSatisfiedtoNoWorkOrder = @TotalNoFollowUpSatisfied
      set @FollowUpNotSatisfiedtoNoWorkOrder = @TotalNoFollowUpNotSatisfied
      set @ComplaintsFollowUpNotSatisfied = (@DirectComplaintsReceived + @IndirectComplaintsReceived +
                                             @TotalNoFollowUpNotSatisfied)
   end
else
   begin
      set @FollowUpSatisfiedtoNoWorkOrder = @TotalNoFollowUpSatisfied / @NoWorkOrderVehicleIntake
      set @FollowUpNotSatisfiedtoNoWorkOrder = @TotalNoFollowUpNotSatisfied / @NoWorkOrderVehicleIntake
      set @ComplaintsFollowUpNotSatisfied = (@DirectComplaintsReceived + @IndirectComplaintsReceived +
                                             @TotalNoFollowUpNotSatisfied) / @NoWorkOrderVehicleIntake
   end
-- Insert/Update Process
declare	@Flag            numeric(2,0)
set @Flag = (select count(*) from svHstMSI
 where CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and ProductType = @ProductType
   and PeriodYear  = @PeriodYear
   and PeriodMonth = @PeriodMonth)

if  @Flag = 0
    begin
INSERT INTO [svHstMSI]
           ([CompanyCode]
           ,[BranchCode]
           ,[ProductType]
           ,[PeriodYear]
           ,[PeriodMonth]
           ,[TotalLaborSalesRevenue]
           ,[LaborRevenueChargeable]
           ,[LaborRevenueNonChargeable1]
           ,[LaborRevenueNonChargeable2]
           ,[TotalPartsSalesRevenue]
           ,[PartsRevenueChargeable]
           ,[PartsRevenueNonChargeable1]
           ,[PartsRevenueNonChargeable2]
           ,[TotalOtherSalesRevenue]
           ,[OtherRevenueChargeable]
           ,[OtherRevenueNonChargeable1]
           ,[OtherRevenueNonChargeable2]
           ,[TotalServiceSalesRevenue]
           ,[TotalServiceSalesChargeable]
           ,[TotalServiceSalesNonChargeable1]
           ,[TotalServiceSalesNonChargeable2]
           ,[HoursSold]
           ,[ServiceRevenuePerUnit]
           ,[LaborSalesTurnoverProductiveStaff]
           ,[LaborSalesTurnoverServiceAdvisors]
           ,[LaborSalesTurnoverStall]
           ,[NoWorkOrderVehicleIntake]
           ,[PassengerCar]
           ,[CommercialCar]
           ,[PDI]
           ,[TotalChargeable]
           ,[Chargeable1]
           ,[Chargeable2]
           ,[Chargeable3]
           ,[Chargeable4]
           ,[TotalNonChargeable]
           ,[NonChargeable1]
           ,[NonChargeable2]
           ,[NonChargeable3]
           ,[NonChargeable4]
           ,[NonChargeable5]
           ,[NoWorkingStall]
           ,[TotalStaff]
           ,[NoAdminSupportStaff]
           ,[NoServiceAdvisorsStaff]
           ,[NoProductiveStaff]
           ,[NoForeman]
           ,[NoTechnician]
           ,[NoPDIStaff]
           ,[TotalAvailableHours]
           ,[OvertimeNormalWorkingHour]
           ,[RepairUnitProductiveStaff]
           ,[RepairUnitTechnician]
           ,[RepairUnitWorkingStall]
           ,[NoCustomertoServiceAdvisor]
           ,[NoWorkdays]
           ,[RepairUnitProductiveDay]
           ,[RepairUnitTechnicianDay]
           ,[RepairUnitWorkingStallDay]
           ,[NoCustomertoServiceAdvisorDay]
           ,[HoursSoldtoAvailableHours]
           ,[ServiceReminder]
           ,[ServiceFollowUp]
           ,[ServiceBooking]
           ,[ServiceRemindertoNoWorkOrder]
           ,[ServiceFollowUptoNoWorkOrder]
           ,[ServiceBookingstoNoWorkOrder]
           ,[CSIScore]
           ,[DirectComplaintsReceived]
           ,[IndirectComplaintsReceived]
           ,[TotalNoFollowUpSatisfied]
           ,[TotalNoFollowUpNotSatisfied]
           ,[NoNotSatisfiedService]
           ,[NoNotSatisfiedTechnical]
           ,[FollowUpSatisfiedtoNoWorkOrder]
           ,[FollowUpNotSatisfiedtoNoWorkOrder]
           ,[ComplaintsFollowUpNotSatisfied]
           ,[IsActive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[IsLocked]
           ,[LockingBy]
           ,[LockingDate])
     VALUES
           (@CompanyCode 
           ,@BranchCode 
           ,@ProductType 
           ,@PeriodYear 
           ,@PeriodMonth 
           ,@TotalLaborSalesRevenue 
           ,@LaborRevenueChargeable 
           ,@LaborRevenueNonChargeable1 
           ,@LaborRevenueNonChargeable2 
           ,@TotalPartsSalesRevenue 
           ,@PartsRevenueChargeable 
           ,@PartsRevenueNonChargeable1 
           ,@PartsRevenueNonChargeable2 
           ,@TotalMaterialSalesRevenue 
           ,@MaterialRevenueChargeable 
           ,@MaterialRevenueNonChargeable1 
           ,@MaterialRevenueNonChargeable2 
           ,@TotalServiceSalesRevenue 
           ,@TotalServiceSalesChargeable 
           ,@TotalServiceSalesNonChargeable1 
           ,@TotalServiceSalesNonChargeable2 
           ,@HoursSold 
           ,@ServiceRevenuePerUnit 
           ,@LaborSalesTurnoverProductiveStaff 
           ,@LaborSalesTurnoverServiceAdvisors 
           ,@LaborSalesTurnoverStall 
           ,@NoWorkOrderVehicleIntake 
           ,@PassengerCar 
           ,@CommercialVehicle 
           ,@PDI 
           ,@TotalChargeable 
           ,@Chargeable1 
           ,@Chargeable2 
           ,@Chargeable3 
           ,@Chargeable4 
           ,@TotalNonChargeable 
           ,@NonChargeable1 
           ,@NonChargeable2 
           ,@NonChargeable3 
           ,@NonChargeable4 
           ,@NonChargeable5 
           ,@NoWorkingStall
           ,@TotalStaff 
           ,@NoAdminSupportStaff 
           ,@NoServiceAdvisorsStaff 
           ,@NoProductiveStaff 
           ,@NoForeman 
           ,@NoTechnician 
           ,@NoPDIStaff 
           ,@TotalAvailableHours 
           ,@OvertimeNormalWorkingHour 
           ,@RepairUnitProductiveStaff 
           ,@RepairUnitTechnician 
           ,@RepairUnitWorkingStall 
           ,@NoCustomertoServiceAdvisor 
           ,@NoWorkdays 
           ,@RepairUnitProductiveDay 
           ,@RepairUnitTechnicianDay 
           ,@RepairUnitWorkingStallDay 
           ,@NoCustomertoServiceAdvisorDay 
           ,@HoursSoldtoAvailableHours 
           ,@ServiceReminder 
           ,@ServiceFollowUp 
           ,@ServiceBookings
           ,@ServiceRemindertoNoWorkOrder 
           ,@ServiceFollowUptoNoWorkOrder 
           ,@ServiceBookingstoNoWorkOrder 
           ,@CSIScore 
           ,@DirectComplaintsReceived 
           ,@IndirectComplaintsReceived 
           ,@TotalNoFollowUpSatisfied 
           ,@TotalNoFollowUpNotSatisfied 
           ,@NoNotSatisfiedService 
           ,@NoNotSatisfiedTechnical 
           ,@FollowUpSatisfiedtoNoWorkOrder 
           ,@FollowUpNotSatisfiedtoNoWorkOrder 
           ,@ComplaintsFollowUpNotSatisfied 
           ,''
           ,@UserID 
           ,getdate()
           ,'' 
           ,''
           ,0
           ,'' 
           ,'')
   end
else
 begin
if  @Posting = 1
        begin
UPDATE [svHstMSI]
   SET [CompanyCode] = @CompanyCode 
      ,[BranchCode] = @BranchCode 
      ,[ProductType] = @ProductType 
      ,[PeriodYear] = @PeriodYear 
      ,[PeriodMonth] = @PeriodMonth 
      ,[TotalLaborSalesRevenue] = @TotalLaborSalesRevenue 
      ,[LaborRevenueChargeable] = @LaborRevenueChargeable 
      ,[LaborRevenueNonChargeable1] = @LaborRevenueNonChargeable1 
      ,[LaborRevenueNonChargeable2] = @LaborRevenueNonChargeable2 
      ,[TotalPartsSalesRevenue] = @TotalPartsSalesRevenue 
      ,[PartsRevenueChargeable] = @PartsRevenueChargeable 
      ,[PartsRevenueNonChargeable1] = @PartsRevenueNonChargeable1 
      ,[PartsRevenueNonChargeable2] = @PartsRevenueNonChargeable2 
      ,[TotalOtherSalesRevenue] = @TotalMaterialSalesRevenue 
      ,[OtherRevenueChargeable] = @MaterialRevenueChargeable 
      ,[OtherRevenueNonChargeable1] = @MaterialRevenueNonChargeable1 
      ,[OtherRevenueNonChargeable2] = @MaterialRevenueNonChargeable2 
      ,[TotalServiceSalesRevenue] = @TotalServiceSalesRevenue 
      ,[TotalServiceSalesChargeable] = @TotalServiceSalesChargeable 
      ,[TotalServiceSalesNonChargeable1] = @TotalServiceSalesNonChargeable1 
      ,[TotalServiceSalesNonChargeable2] = @TotalServiceSalesNonChargeable2 
      ,[HoursSold] = @HoursSold 
      ,[ServiceRevenuePerUnit] = @ServiceRevenuePerUnit 
      ,[LaborSalesTurnoverProductiveStaff] = @LaborSalesTurnoverProductiveStaff 
      ,[LaborSalesTurnoverServiceAdvisors] = @LaborSalesTurnoverServiceAdvisors 
      ,[LaborSalesTurnoverStall] = @LaborSalesTurnoverStall 
      ,[NoWorkOrderVehicleIntake] = @NoWorkOrderVehicleIntake 
      ,[PassengerCar] = @PassengerCar 
      ,[CommercialCar] = @CommercialVehicle
      ,[PDI] = @PDI 
      ,[TotalChargeable] = @TotalChargeable 
      ,[Chargeable1] = @Chargeable1 
      ,[Chargeable2] = @Chargeable2 
      ,[Chargeable3] = @Chargeable3 
      ,[Chargeable4] = @Chargeable4 
      ,[TotalNonChargeable] = @TotalNonChargeable 
      ,[NonChargeable1] = @NonChargeable1 
      ,[NonChargeable2] = @NonChargeable2 
      ,[NonChargeable3] = @NonChargeable3 
      ,[NonChargeable4] = @NonChargeable4 
      ,[NonChargeable5] = @NonChargeable5 
      ,[NoWorkingStall] = @NoWorkingStall 
      ,[TotalStaff] = @TotalStaff 
      ,[NoAdminSupportStaff] = @NoAdminSupportStaff 
      ,[NoServiceAdvisorsStaff] = @NoServiceAdvisorsStaff 
      ,[NoProductiveStaff] = @NoProductiveStaff 
      ,[NoForeman] = @NoForeman 
      ,[NoTechnician] = @NoTechnician 
      ,[NoPDIStaff] = @NoPDIStaff 
      ,[TotalAvailableHours] = @TotalAvailableHours 
      ,[OvertimeNormalWorkingHour] = @OvertimeNormalWorkingHour 
      ,[RepairUnitProductiveStaff] = @RepairUnitProductiveStaff 
      ,[RepairUnitTechnician] = @RepairUnitTechnician 
      ,[RepairUnitWorkingStall] = @RepairUnitWorkingStall 
      ,[NoCustomertoServiceAdvisor] = @NoCustomertoServiceAdvisor 
      ,[NoWorkdays] = @NoWorkdays 
      ,[RepairUnitProductiveDay] = @RepairUnitProductiveDay 
      ,[RepairUnitTechnicianDay] = @RepairUnitTechnicianDay 
      ,[RepairUnitWorkingStallDay] = @RepairUnitWorkingStallDay 
      ,[NoCustomertoServiceAdvisorDay] = @NoCustomertoServiceAdvisorDay 
      ,[HoursSoldtoAvailableHours] = @HoursSoldtoAvailableHours 
      ,[ServiceReminder] = @ServiceReminder 
      ,[ServiceFollowUp] = @ServiceFollowUp 
      ,[ServiceBooking] = @ServiceBookings
      ,[ServiceRemindertoNoWorkOrder] = @ServiceRemindertoNoWorkOrder 
      ,[ServiceFollowUptoNoWorkOrder] = @ServiceFollowUptoNoWorkOrder 
      ,[ServiceBookingstoNoWorkOrder] = @ServiceBookingstoNoWorkOrder 
      ,[CSIScore] = @CSIScore 
      ,[DirectComplaintsReceived] = @DirectComplaintsReceived 
      ,[IndirectComplaintsReceived] = @IndirectComplaintsReceived 
      ,[TotalNoFollowUpSatisfied] = @TotalNoFollowUpSatisfied 
      ,[TotalNoFollowUpNotSatisfied] = @TotalNoFollowUpNotSatisfied 
      ,[NoNotSatisfiedService] = @NoNotSatisfiedService 
      ,[NoNotSatisfiedTechnical] = @NoNotSatisfiedTechnical 
      ,[FollowUpSatisfiedtoNoWorkOrder] = @FollowUpSatisfiedtoNoWorkOrder 
      ,[FollowUpNotSatisfiedtoNoWorkOrder] = @FollowUpNotSatisfiedtoNoWorkOrder 
      ,[ComplaintsFollowUpNotSatisfied] = @ComplaintsFollowUpNotSatisfied 
--      ,[IsActive] = @IsActive
--      ,[CreatedBy] = @CreatedBy 
--      ,[CreatedDate] = @CreatedDate
      ,[LastUpdateBy] = @UserID
      ,[LastUpdateDate] = getdate()
--      ,[IsLocked] = @IsLocked
--      ,[LockingBy] = @LockingBy 
--      ,[LockingDate] = @LockingDate
 WHERE [CompanyCode] = @CompanyCode
      AND [BranchCode] = @BranchCode
      AND [ProductType] = @ProductType
      AND [PeriodYear] = @PeriodYear
      AND [PeriodMonth] = @PeriodMonth
	end
end

-- select * from svHstMSI
-- order by CompanyCode, BranchCode, ProductType, PeriodYear, PeriodMonth


-- select data field
select * into #TotalLaborSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Labour Sales Revenue ( 2 + 3 + 4 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalLaborSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
	) as Header
	pivot(SUM(TotalLaborSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalLaborSalesRevenue

select * into #LaborRevenueChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Labour Sales - Chargeable to customer CPUS (External)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborRevenueChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborRevenueChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborRevenueChargeable

select * into #LaborRevenueNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Labour Sales - Non-chargeable (Warranty, FS1,FS2,FS3)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborRevenueNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborRevenueNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborRevenueNonChargeable1

select * into #LaborRevenueNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Labour Sales - Non-chargeable (Internal, PDI)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborRevenueNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborRevenueNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborRevenueNonChargeable2

select * into #TotalPartsSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Parts Sales Revenue ( 6 + 7 + 8 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalPartsSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalPartsSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalPartsSalesRevenue

select * into #PartsRevenueChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Parts Sales - Chargeable to customer CPUS (External)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PartsRevenueChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PartsRevenueChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PartsRevenueChargeable

select * into #PartsRevenueNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Parts Sales - Non-chargeable (Warranty, FS1)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PartsRevenueNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PartsRevenueNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PartsRevenueNonChargeable1

select * into #PartsRevenueNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Parts Sales - Non-chargeable (Internal, PDI)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PartsRevenueNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PartsRevenueNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PartsRevenueNonChargeable2

select * into #TotalMaterialSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Lubricant & Sublet Sales Revenue ( 10 + 11 + 12 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalOtherSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalOtherSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalMaterialSalesRevenue

select * into #MaterialRevenueChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Lubricant & Sublet Sales - Chargeable to customer CPUS (External)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OtherRevenueChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OtherRevenueChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#MaterialRevenueChargeable

select * into #MaterialRevenueNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Lubricant & Sublet Sales - Non-chargeable (Warranty, FS1)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OtherRevenueNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OtherRevenueNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#MaterialRevenueNonChargeable1

select * into #MaterialRevenueNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Lubricant & Sublet  Sales - Non-chargeable (Internal, PDI)' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OtherRevenueNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OtherRevenueNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#MaterialRevenueNonChargeable2

select * into #TotalServiceSalesRevenue from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Total Service Sales Revenue ( 14 + 15+ 16 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesRevenue
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesRevenue) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesRevenue

select * into #TotalServiceSalesChargeable from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Total Service Sales - Chargeable to customer CPUS (External) ( 2 + 6 + 10 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesChargeable

select * into #TotalServiceSalesNonChargeable1 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Total Service Sales - Non-chargeable (Warranty, FS1) ( 3 +  7 + 11 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesNonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesNonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesNonChargeable1

select * into #TotalServiceSalesNonChargeable2 from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Total Service Sales - Non-chargeable (Internal, PDI) ( 4 + 8 + 12 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalServiceSalesNonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalServiceSalesNonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalServiceSalesNonChargeable2

select * into #HoursSold from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Hours Sold' Description
	  ,'Hours' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,HoursSold
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(HoursSold) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#HoursSold

select * into #ServiceRevenuePerUnit from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Revenue per Unit exclude PDI (CPUS, Warranty, FS1) ( (14 + 15) / 22 )
' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceRevenuePerUnit
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceRevenuePerUnit) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceRevenuePerUnit

select * into #LaborSalesTurnoverProductiveStaff from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Labour  Sales Turnover / Productive staff (Technician & Foreman)  ( 1 / 41 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborSalesTurnoverProductiveStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborSalesTurnoverProductiveStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborSalesTurnoverProductiveStaff

select * into #LaborSalesTurnoverServiceAdvisors from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Labour Sales Turnover / Service Advisors ( 1 / 40 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborSalesTurnoverServiceAdvisors
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborSalesTurnoverServiceAdvisors) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborSalesTurnoverServiceAdvisors

select * into #LaborSalesTurnoverStall from(select 'A' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Labour Sales Turnover / Stall ( 1 / 37 )' Description
	  ,'Rp.' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,LaborSalesTurnoverStall
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(LaborSalesTurnoverStall) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#LaborSalesTurnoverStall

select * into #NoWorkOrderVehicleIntake from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Work Order / vehicle Intake exclude PDI ( 23 + 24 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoWorkOrderVehicleIntake
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoWorkOrderVehicleIntake) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoWorkOrderVehicleIntake

select * into #PassengerCar from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Passenger Car (exclude Angkot, Pickup, chassis)' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PassengerCar
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PassengerCar) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PassengerCar

select * into #CommercialVehicle from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Commercial Vehicle (Angkot, Pickup, Chassis)' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,CommercialCar
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(CommercialCar) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#CommercialVehicle

select * into #PDI from(select 'B' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   PDI' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,PDI
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(PDI) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PDI

select * into #TotalChargeable from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Chargeable /  Customer Paid Unit Service (CPUS) (  27 + 28 +29 + 30 )' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalChargeable

select * into #NoJobType1 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Above 30,000 km jobs (10,000 km multiplier)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType1

select * into #NoJobType2 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   10,000 & 20,000 km (FS 2 & FS 3)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType2

select * into #NoJobType3 from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   5,000 km multiplier & above' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable3
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable3) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobType3

select * into #NoJobTypeOthers from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Others' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,Chargeable4
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(Chargeable4) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeOthers

select * into #TotalNonChargeable from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Non-chargeable Repair (Warranty, Internal, PDI) ( 32 + 33 + 34 + 35 + 36 )' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalNonChargeable
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalNonChargeable) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNonChargeable

select * into #NoJobTypeWarranty from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Warranty Repair' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable1
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable1) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeWarranty

select * into #NoJobTypeInternalFSC from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Internal Repair (FS 1)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable2
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable2) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalFSC

select * into #NoJobTypeInternalRework from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Internal Repair (Rework)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable3
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable3) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalRework

select * into #NoJobTypeInternalOthers from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Internal Repair (Others)' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable4
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable4) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalOthers

select * into #NoJobTypeInternalPDI from(select 'C' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of PDI intake' Description
	  ,'Job' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NonChargeable5
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NonChargeable5) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoJobTypeInternalPDI

select * into #NoWorkingStall from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Working Stalls' Description
	  ,'Stall' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoWorkingStall
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoWorkingStall) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoWorkingStall

select * into #TotalStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total No. of Staff ( 39 + 40 + 41 + 44 )' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalStaff

select * into #NoServiceStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Admin & Support Staff (include Parts staff)' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoAdminSupportStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoAdminSupportStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoServiceStaff

select * into #NoServiceAdvisor from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Service Advisors' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoServiceAdvisorsStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoServiceAdvisorsStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoServiceAdvisor

select * into #TotalProductiveStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Productive Staff ( 42 + 43 )' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoProductiveStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoProductiveStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalProductiveStaff

select * into #NoForeman from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'      No. of Foreman' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoForeman
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoForeman) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoForeman

select * into #NoTechnician from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'      No. of Technician' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoTechnician
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoTechnician) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoTechnician

select * into #NoPDIStaff from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of PDI Staff' Description
	  ,'Person' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoPDIStaff
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoPDIStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoPDIStaff

select * into #TotalAvailableHour from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total Available Hours' Description
	  ,'Hours' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalAvailableHours
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalAvailableHours) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalAvailableHour

select * into #TotalWorkingHour from(select 'D' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Overtime/Normal Working Hour ' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,OvertimeNormalWorkingHour
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(OvertimeNormalWorkingHour) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalWorkingHour

select * into #RepairUnitProductStaff from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Productive staff ( 22 / 41 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitProductiveStaff 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitProductiveStaff) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitProductStaff

select * into #RepairUnitTech from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Repair Unit per Technician ( 22 / 43 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitTechnician
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitTechnician) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitTech

select * into #RepairUnitWorkStall from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Working Stall ( 22 / 37 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitWorkingStall
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitWorkingStall) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RRepairUnitWorkStall

select * into #NoCustomer from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of Customer / Service Advisor ( 22 / 40)' Description
	  ,'Customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoCustomertoServiceAdvisor
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoCustomertoServiceAdvisor) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoCustomer

select * into #NoWorkdays from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Workdays' Description
	  ,'Days' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoWorkdays
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoWorkdays) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoWorkdays

select * into #RepairUnitProductDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Productive staff / day ( 47 / 51 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitProductiveDay 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitProductiveDay ) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitProductDay

select * into #RepairUnitTechDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   Repair Unit per Technician / day ( 48 / 51 ) ' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitTechnicianDay 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitTechnicianDay ) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitTechDay

select * into #RepairUnitWorkStallDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Repair Unit per Working Stall / day ( 49 / 51 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,RepairUnitWorkingStallDay 
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(RepairUnitWorkingStallDay ) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#RepairUnitWorkStallDay

select * into #NoCustomerDay from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'No. of Customer / Service Advisor / day ( 50 / 51 )' Description
	  ,'Unit' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoCustomertoServiceAdvisorDay
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoCustomertoServiceAdvisorDay) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#NoCustomerDay

select * into #AvailableHours from(select 'E' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Hours Sold / Available hours ( 17 / 45 ) ' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,HoursSoldtoAvailableHours
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(HoursSoldtoAvailableHours) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#AvailableHours

select * into #ServiceReminders from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Reminder' Description
	  ,'customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceReminder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceReminder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceReminders

select * into #ServiceFollowups from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Follow-ups' Description
	  ,'customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceFollowUp
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceFollowUp) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceFollowups

select * into #ServiceBookings from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Service Bookings' Description
	  ,'customer' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceBooking
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceBooking) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ServiceBookings

select * into #PercentServiceReminder  from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'% Service Reminder (to repair unit (work order) ( 57 / 22 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceRemindertoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceRemindertoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PercentServiceReminder

select * into #PercentServiceFollowups  from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'% Service Follow-ups to repair unit (work order) ( 58 / 22 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceFollowUptoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceFollowUptoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PercentServiceFollowups

select * into #PercentServiceBookings  from(select 'F' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'% Service Bookings to repair unit (work order) ( 59 / 22 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,ServiceBookingstoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ServiceBookingstoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#PercentServiceBookings

select * into #CSIScore  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'CSI Score' Description
	  ,'' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,CSIScore
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(CSIScore) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#CSIScore

select * into #Directcomplaintsreceived  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Directcomplaintsreceived' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,DirectComplaintsReceived
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(DirectComplaintsReceived) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#Directcomplaintsreceived

select * into #Indirectcomplaintsreceived  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Indirect complaints received' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,IndirectComplaintsReceived
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(IndirectComplaintsReceived) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#Indirectcomplaintsreceived

select * into #TotalNoFollowup  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total No. Follow up - Satisfied' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalNoFollowUpSatisfied
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalNoFollowUpSatisfied) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowup

select * into #TotalNoFollowupNotSatisfied  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Total No. Follow up ''Not-Satisfied'' ( 68 + 69 )' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,TotalNoFollowUpNotSatisfied
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(TotalNoFollowUpNotSatisfied) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowupNotSatisfied

select * into #TotalNoFollowupNotSatisfiedService  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of ''Not Satisfied - Service''' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoNotSatisfiedService
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoNotSatisfiedService) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowupNotSatisfiedService

select * into #TotalNoFollowupNotSatisfiedTechnical  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'   No. of ''Not Satisfied = Technical''' Description
	  ,'complaints' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,NoNotSatisfiedTechnical
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(NoNotSatisfiedTechnical) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#TotalNoFollowupNotSatisfiedTechnical

select * into #FollowupSatisfied  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	  ,'Follow up ''Satisfied''/Intake Ratio ( 66 / 22 )' Description
	  ,'%' UOM
	  ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,FollowUpSatisfiedtoNoWorkOrder
		from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(FollowUpSatisfiedtoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#FollowupSatisfied

select * into #FollowupNotSatisfied  from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	    ,'Follow up ''Not Satisfied''/Intake Ratio ( 67 / 22)' Description
	    ,'%' UOM
	    ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
      ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
      ,FollowUpNotSatisfiedtoNoWorkOrder
		from svHstMSI		
	where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
	) as Header
	pivot(SUM(FollowUpNotSatisfiedtoNoWorkOrder) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#FollowupNotSatisfied
select * into #ComplainsFollowup from(select 'G' GroupField,CompanyCode
      ,BranchCode
      ,ProductType
      ,PeriodYear
	    ,'Complaints & Follow up ''Not Satisfied''/Intake Ratio ( ( 64 + 65 + 67) / 22 )' Description
	    ,'%' UOM
	    ,M1 Jan,M2 Feb,M3 Mar,M4 Apr,M5 May,M6 Jun,M7 Jul,M8 Aug,M9 Sep,M10 Oct,M11 Nov,M12 Dec
	from (select CompanyCode
			  ,BranchCode
			  ,ProductType
			  ,PeriodYear
			  ,'M' + CONVERT(VARCHAR,PeriodMonth,1) PeriodMonth
			  ,ComplaintsFollowUpNotSatisfied
			from svHstMSI
		where CompanyCode = @CompanyCode and
			BranchCode = @BranchCode and
			ProductType = @ProductType and
			PeriodYear = @PeriodYear		
		) as Header
	pivot(SUM(ComplaintsFollowUpNotSatisfied) 
		For PeriodMonth in (M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)
	)pvt
)#ComplainsFollowup

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalLaborSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborRevenueChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborRevenueNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborRevenueNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalPartsSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PartsRevenueChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PartsRevenueNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PartsRevenueNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalMaterialSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #MaterialRevenueChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #MaterialRevenueNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #MaterialRevenueNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesRevenue a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesNonChargeable1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalServiceSalesNonChargeable2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #HoursSold a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceRevenuePerUnit a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborSalesTurnoverProductiveStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborSalesTurnoverServiceAdvisors a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #LaborSalesTurnoverStall a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoWorkOrderVehicleIntake a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PassengerCar a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #CommercialVehicle a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PDI a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType1 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType2 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobType3 a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeOthers a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNonChargeable a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeWarranty a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalFSC a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalRework a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalOthers a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoJobTypeInternalPDI a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoWorkingStall a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoServiceStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoServiceAdvisor a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalProductiveStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoForeman a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoTechnician a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoPDIStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalAvailableHour a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalWorkingHour a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitProductStaff a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitTech a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitWorkStall a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoCustomer a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoWorkdays a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitProductDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitTechDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #RepairUnitWorkStallDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #NoCustomerDay a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #AvailableHours a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceReminders a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceFollowups a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ServiceBookings a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PercentServiceReminder a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PercentServiceFollowups a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #PercentServiceBookings a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #CSIScore a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #Directcomplaintsreceived a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #Indirectcomplaintsreceived a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowup a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowupNotSatisfied a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowupNotSatisfiedService a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,SUM((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))) as Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #TotalNoFollowupNotSatisfiedTechnical a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #FollowupSatisfied a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #FollowupNotSatisfied a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

insert into #t_MonthReview select a.GroupField,a.CompanyCode, a.BranchCode
	,a.ProductType
	,a.PeriodYear
	,a.description
	,a.UOM
	,FLOOR(((isnull(a.Jan,0)+isnull(a.Feb,0)+isnull(a.Mar,0)+isnull(a.Apr,0)+isnull(a.May,0)+isnull(a.Jun,0)+isnull(a.Jul,0)+isnull(a.Aug,0)+isnull(a.Sep,0)+isnull(a.Oct,0)+isnull(a.Nov,0)+isnull(a.Dec,0))/12)) as Average
	,'0' Total
	,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec
	FROM #ComplainsFollowup a
	GROUP BY a.GroupField, a.CompanyCode, a.BranchCode,a.ProductType,a.PeriodYear,a.Description,a.UOM,a.Jan,a.Feb,a.Mar,a.Apr,a.May,a.Jun,a.Jul,a.Aug,a.Sep,a.Oct,a.Nov,a.Dec

select * from #t_MonthReview

-- drop table
drop table #task, #item, #inv, #t_MonthReview, #TotalLaborSalesRevenue, #LaborRevenueChargeable, 
	#LaborRevenueNonChargeable1, #LaborRevenueNonChargeable2, #TotalPartsSalesRevenue, #PartsRevenueChargeable,
	#PartsRevenueNonChargeable1, #PartsRevenueNonChargeable2, #TotalMaterialSalesRevenue, #MaterialRevenueChargeable,
	#MaterialRevenueNonChargeable1, #MaterialRevenueNonChargeable2, #TotalServiceSalesRevenue, #TotalServiceSalesChargeable,
	#TotalServiceSalesNonChargeable1, #TotalServiceSalesNonChargeable2, #HoursSold, #ServiceRevenuePerUnit, 
	#LaborSalesTurnoverProductiveStaff, #LaborSalesTurnoverServiceAdvisors, #LaborSalesTurnoverStall, #NoWorkOrderVehicleIntake,
	#PassengerCar, #CommercialVehicle, #PDI, #TotalChargeable, #NoJobType1, #NoJobType2, #NoJobType3, #NoJobTypeOthers,
	#TotalNonChargeable, #NoJobTypeWarranty, #NoJobTypeInternalFSC, #NoJobTypeInternalRework, #NoJobTypeInternalOthers,
	#NoJobTypeInternalPDI, #NoWorkingStall, #TotalStaff, #NoServiceStaff, #NoServiceAdvisor, #TotalProductiveStaff,
	#NoForeman, #NoTechnician, #NoPDIStaff, #TotalAvailableHour, #TotalWorkingHour, #RepairUnitProductStaff,
	#RepairUnitTech, #RepairUnitWorkStall, #NoCustomer, #NoWorkdays, #RepairUnitProductDay, #RepairUnitTechDay,
	#RepairUnitWorkStallDay, #NoCustomerDay, #AvailableHours, #ServiceReminders, #ServiceFollowups, #ServiceBookings,
	#PercentServiceReminder, #PercentServiceFollowups, #PercentServiceBookings, #CSIScore, #Directcomplaintsreceived,
	#Indirectcomplaintsreceived, #TotalNoFollowup, #TotalNoFollowupNotSatisfied, #TotalNoFollowupNotSatisfiedService,
	#TotalNoFollowupNotSatisfiedTechnical, #FollowupSatisfied, #FollowupNotSatisfied, #ComplainsFollowup


-- usprpt_SvRpReport021 '6007402','600740200','4W',2010,08,1,'HTO'
GO
-- usprpt_QueryCustomerDealer '0','2012-1-1','2012-12-12','Cabang','6006406','6006401'
ALTER procedure [dbo].[uspfn_QueryCustomerDealer]
	@CheckDate	bit,
	@StartDate	Datetime,
	@EndDate	Datetime,
	@Area		varchar(15),
	@Dealer		varchar(15),
	@Outlet		varchar(15)
as 
if @Outlet = ''
begin
	select a.CompanyCode
		, b.DealerAbbreviation
		, a.CustomerCode
		, a.SuzukiCode
		, a.Suzuki2Code
		, a.CustomerName
		, a.CustomerGovName
		, a.Address1 + a.Address2 + a.Address3 + a.Address4 Address
		, a.ProvinceCode
		, a.ProvinceName
		, a.CityCode
		, a.CityName
		, a.ZipNo
		, a.KelurahanDesa
		, a.KecamatanDistrik
		, a.KotaKabupaten
		, a.IbuKota
		, a.PhoneNo
		, a.HPNo
		, a.FaxNo
		, a.OfficePhoneNo
		, a.Email
		, a.Gender
		, a.BirthDate
		, a.isPKP
		, a.NPWPNo
		, a.NPWPDate
		, a.SKPNo
		, a.SKPDate
		, a.CustomerType
		, a.CustomerTypeDesc
		, a.CategoryCode
		, a.CategoryDesc
		, a.Status
		, a.CustomerStatus
	from gnMstCustomerDealer a
	left join GnMstDealerMapping b on a.CompanyCode = b.DealerCode
	where  case when @CheckDate = 1 
				then convert(varchar,a.CreatedDate,112) 
				else convert(varchar,@StartDate,112) 
				end between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112) 
	  and isnull(b.Area,'')			like case when isnull(@Area,'') <> ''	then @Area		else '%%' end
	  and isnull(b.DealerCode,'')	like case when isnull(@Dealer,'') <> '' then @Dealer	else '%%' end
end
else
begin
	select a.CompanyCode
		, c.DealerAbbreviation
		, a.CustomerCode
		, a.SuzukiCode
		, a.Suzuki2Code
		, a.CustomerName
		, a.CustomerGovName
		, a.Address1 + a.Address2 + a.Address3 + a.Address4 Address
		, a.ProvinceCode
		, a.ProvinceName
		, a.CityCode
		, a.CityName
		, a.ZipNo
		, a.KelurahanDesa
		, a.KecamatanDistrik
		, a.KotaKabupaten
		, a.IbuKota
		, a.PhoneNo
		, a.HPNo
		, a.FaxNo
		, a.OfficePhoneNo
		, a.Email
		, a.Gender
		, a.BirthDate
		, a.isPKP
		, a.NPWPNo
		, a.NPWPDate
		, a.SKPNo
		, a.SKPDate
		, a.CustomerType
		, a.CustomerTypeDesc
		, a.CategoryCode
		, a.CategoryDesc
		, a.Status
		, a.CustomerStatus
	from gnMstCustomerDealer a
	left join GnMstDealerMapping c on a.CompanyCode = c.DealerCode
	where  case when @CheckDate = 1 
				then convert(varchar,a.CreatedDate,112) 
				else convert(varchar,@StartDate,112) 
				end between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112) 
	  and isnull(c.Area,'')			like case when isnull(@Area,'') <> ''	then @Area		else '%%' end
	  and isnull(c.DealerCode,'')	like case when isnull(@Dealer,'') <> '' then @Dealer	else '%%' end
	  and a.CustomerCode in (select distinct k.CustomerCode 
									from gnMstCustomerDealerProfitCenter k
									left join GnMstDealerMapping l on k.CompanyCode = l.DealerCode
									where isnull(l.Area,'')			 like case when isnull(@Area,'') <> ''	then @Area		else '%%' end
										and isnull(k.CompanyCode,'') like case when isnull(@Dealer,'') <> '' then @Dealer	else '%%' end
										and isnull(k.BranchCode,'')	 like case when isnull(@Outlet,'') <> '' then @Outlet	else '%%' end)
end

--select * from OmHstInquirySales
--select * from GnMstCustomerDealer
GO
ALTER procedure [dbo].[uspfn_GnGetDataSTK]

as

select * into #t1 from (
select '1' as RecordID, a.CompanyCode, b.BranchCode
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = b.CompanyCode
                 and SupplierCode = b.SupplierCode)  = '2000000'  
        then '' else b.SupplierCode end as SubDealerCode
 , convert(varchar, b.BPUDate, 112)  as TransDate
 , a.ChassisCode
 , a.ChassisNo
 , isnull(b.RefferenceDONo, '') as DONo
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = b.CompanyCode
                 and SupplierCode = b.SupplierCode)  = '2000000'
        then 'B1' else 'B2' end as TransType
  from omMstVehicle a, omTrPurchaseBPU b  
 where a.CompanyCode = b.CompanyCode  
   and a.BPUNo = b.BPUNo  
   and b.BPUDate > isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'STK'
     order by LastSendDate desc
    ), '19000101')
    
 union all
 
select '1' as RecordID, a.CompanyCode, b.BranchCode
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = b.CompanyCode
                 and SupplierCode = b.SupplierCode)  = '2000000'  
        then '' else b.SupplierCode end as SubDealerCode
 , convert(varchar, b.BPUDate, 112) as TransDate
 , a.ChassisCode
 , a.ChassisNo
 , isnull(b.RefferenceDONo, '') as DONo
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = b.CompanyCode
                 and SupplierCode = b.SupplierCode)  = '2000000'
        then 'B1' else 'B2' end as TransType
  from omMstVehicleTemp a, omTrPurchaseBPU b  
 where a.CompanyCode = b.CompanyCode  
   and a.BPUNo = b.BPUNo
   and a.IsActive = 1  
   and b.BPUDate > isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'STK'
     order by LastSendDate desc
    ), '19000101')
    
 union all
 
select '1' as RecordID, a.CompanyCode, b.BranchCode
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = b.CompanyCode
                 and SupplierCode = x.SupplierCode)  = '2000000'  
        then '' else x.SupplierCode end as SubDealerCode
 , convert(varchar, b.ReturnDate, 112)  as TransDate
 , a.ChassisCode
 , a.ChassisNo
 , isnull(x.RefferenceDoNo, '') as DONo
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = x.CompanyCode
                 and SupplierCode = x.SupplierCode) = '2000000'  
        then 'R1' else 'R2' end as TransType
  from omMstVehicle a  
 inner join omTrPurchaseReturn b
    on b.CompanyCode = a.CompanyCode
   and b.ReturnNo = a.POReturnNo
   and b.HPPNo = a.HPPNo  
  left join omTrPurchaseBPU x
    on x.CompanyCode = a.CompanyCode
   and x.BranchCode = b.BranchCode
   and x.BPUNo = a.BPUNo  
 where 1 = 1
   and b.ReturnDate > isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'STK'
     order by LastSendDate desc
    ), '19000101')
    
 union all
 
select '1' as RecordID, a.CompanyCode, b.BranchCode
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = b.CompanyCode
                 and SupplierCode = x.SupplierCode)  = '2000000'  
        then '' else x.SupplierCode end as SubDealerCode
 , convert(varchar, b.ReturnDate, 112)  as TransDate
 , a.ChassisCode
 , a.ChassisNo
 , case when charindex('-', a.RefDoNo) = 0 then isnull(a.RefDONo, '')
        else isnull(substring(a.RefDoNo, 0, charindex('-', a.RefDoNo)), '')
    end as DONo
 , case when (select StandardCode from GnMstSupplier
               where CompanyCode = x.CompanyCode
                 and SupplierCode = x.SupplierCode) = '2000000'  
        then 'R1' else 'R2' end as TransType
  FROM omMstVehicleTemp a  
 inner join omTrPurchaseReturn b ON b.CompanyCode = a.CompanyCode AND b.ReturnNo = a.POReturnNo AND b.HPPNo = a.HPPNo  
  left join omTrPurchaseBPU x ON x.CompanyCode = a.CompanyCode AND x.BranchCode = b.BranchCode AND x.BPUNo = a.BPUNo  
 where 1 = 1
   and b.ReturnDate > isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'STK'
     order by LastSendDate desc
    ), '19000101')
    
 union all
 
select '1' as RecordID, a.CompanyCode, b.BranchCode
 , ''  as SubDealerCode
 , convert(varchar, b.SODate, 112) as TransDate
 , a.ChassisCode
 , a.ChassisNo
 , isnull(x.RefferenceDoNo, '') AS DONo
 , case when b.SalesType = '1' then 'S1' else 'S2' end as TransType
  from omMstVehicle a   
 inner join omTrSalesSO b  
    on a.CompanyCode = b.CompanyCode  
   and a.SONo = b.SONo  
  left join omTrPurchaseBPU x   
    on x.CompanyCode = a.CompanyCode
   and x.BranchCode = b.BranchCode
   and x.BPUNo = a.BPUNo  
 where 1 = 1
   and b.SODate > isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'STK'
     order by LastSendDate desc
    ), '19000101')
    
 union all
 
select '1' as RecordID, a.CompanyCode, b.BranchCode
 , case when b.SubDealerCode  = a.CompanyCode then '' else b.SubDealerCode end as SubDealerCode  
 , convert(varchar, b.ReqDate, 112) as TransDate
 , a.ChassisCode, a.ChassisNo
 , isnull(x.RefferenceDoNo, '') AS DONo
 , case when b.StatusFaktur = '1'  and b.SubDealerCode =  b.CompanyCode then 'F1'
        when b.StatusFaktur = '1'  and b.SubDealerCode <> b.CompanyCode then 'F2'
        when b.StatusFaktur <> '1' and b.SubDealerCode =  b.CompanyCode then 'F3'
        else 'F4' 
    end as TransType
  from omMstVehicle a  
 inner join omTrSalesReqDetail z 
	on a.CompanyCode = z.CompanyCode 
	and a.ChassisCode = z.ChassisCode 
	and a.ChassisNo = z.ChassisNo
 inner join omTrSalesReq b  
    on a.CompanyCode = b.CompanyCode  
   and a.ReqOutNo = b.ReqNo 
 left join omTrPurchaseBPUDetail y
	on y.CompanyCode = a.CompanyCode 
	and y.ChassisCode = a.ChassisCode 
	and y.ChassisNo = a.ChassisNo 
 left join omTrPurchaseBPU x   
    on x.CompanyCode = a.CompanyCode
   and x.BranchCode = b.BranchCode
   and x.BPUNo = a.BPUNo  
 where 1 = 1
   and b.ReqDate > isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'STK'
     order by LastSendDate desc
    ), '19000101')
    
 union all
 
select '1' as RecordID, a.CompanyCode, b.BranchCode
 , ''  as SubDealerCode
 , convert(varchar, b.ReturnDate, 112) as TransDate
 , a.ChassisCode, a.ChassisNo
 , isnull(x.RefferenceDoNo, '') AS DONo
 , 'U1' as TransType
  from omMstVehicle a  
 inner join omTrSalesReturn b  
    on a.CompanyCode = b.CompanyCode  
   and a.SOReturnNo = b.ReturnNo  
  left join omTrPurchaseBPU x   
    on x.CompanyCode = a.CompanyCode
   and x.BranchCode = b.BranchCode
   and x.BPUNo = a.BPUNo  
 where 1 = 1
   and b.ReturnDate > isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'STK'
     order by LastSendDate desc
    ), '19000101')
)#

declare @CompanyCode varchar(20)
declare @BranchCode  varchar(20)
declare @MaxDocNo    int
declare @TempDocNo   varchar(max)

set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationDtl where isnull(IsBranch, 0) = 0)
set @BranchCode  = (select top 1 BranchCode  from gnMstOrganizationDtl where isnull(IsBranch, 0) = 0)

set @MaxDocNo = isnull((
	select DocumentSequence + 1 from GnMstDocument
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode
	   and DocumentType = 'BVC' 
	   and ProfitCenterCode = '100' 
	   and DocumentYear = YEAR(GetDate())),0)

set @TempDocNo = isnull((select 'BVC/' + right(year(getdate()),2) +'/' + right(1000000 + convert(varchar, @MaxDocNo, 1), 6)),'BVC/YY/XXXXXX')

update GnMstDocument
   set DocumentSequence = DocumentSequence + 1
	 , LastUpdateDate = GetDate()
	 , LastUpdateBy = 'SYSTEM'
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and DocumentPrefix = 'BVC'
   and ProfitCenterCode = '100'
   and DocumentYear = Year(GetDate())


select * into #t2 from (select * from #t1 where isnull(DONo, '') <> '')#

select '2000000' as DealerCode, (select count(*) from #t2) TotalNoOfItem, @TempDocNo BatchNo

select *, '' as ReasonCode, getdate() as  LastUpdateDate from #t2

drop table #t1
drop table #t2
GO
-- ======================================================================================================
-- Author         : <Seandy. Supported by Benedict>
-- Create date    : <04-Sep-2013>
-- Total Revision : <Hasim>
-- Revision date  : <28-Nov-2013>
-- Description    : <Reposting omMstIndent & omTrIndent>

-- Fungsi: - Memperbaiki data omTrIndent apabila ada Status Indent = Cancel
--         - Mengalokasi ulang omTrIndent
--         - Menghitung  ulang omMstIndent yg IsNeedReposting = 1 ATAU apabila Quota ditambah / dikurangi
-- Note: - Status Color: F => penambahan/pengurangan berlaku untuk SEMUA WARNA
--		 - Status Color: C => penambahan/pengurangan berlaku hanya untuk warna yg IsNeedReposting = 1
-- ======================================================================================================

ALTER PROCEDURE [dbo].[uspfn_omRepostingIndent]

AS
BEGIN
  -- 
  -- 
  -- * Get system date
  -- * Indent data need re-posting ? 
  -- 
     declare @SysDate     datetime
	 declare @PeriodYear  varchar(4)
	 declare @PeriodMonth varchar(2)
	 declare @Period      varchar(6)
     set @SysDate = getdate()

	 select * into #Master from (
	    select top 1 Year, Month from omMstIndent 
	     where UnitStatus in ('N','R','D')  -- N:New, R:Revision, D:Delete
	       and isNeedReposting = 1
         order by Year, Month) #Master
         
	set @PeriodYear  = (right('0' + (convert(varchar(4),(select Year  from #Master))),4))	 
	set @PeriodMonth = (right('0' + (convert(varchar(2),(select Month from #Master))),2))
	 
	 if @PeriodYear='0000' or @PeriodMonth='00'
	    begin
		     drop table #Master
		     return
	    end
	 set @Period = @PeriodYear + @PeriodMonth
	 
  -- 
  -- 
  -- * Backup data omMstIndent to omMstIndent_Recovery
  -- * Delete data QuotaUnit = 0 pada table omMstIndent
  -- * Setup AllocationUnits = 0 pada table omMstIndent
  -- 
     if not exists (select * from sys.objects 
                     where object_id = object_id(N'[omMstIndent_Recovery]') 
					   and type=N'U')
	    create table [omMstIndent_Recovery](
	                 [RowID]              [uniqueidentifier],
					 [RecoveryDate]       [datetime],
	                 [IndentID]           [bigint],
            	     [TypeCode]           [varchar](20),
	        	     [MarketModelCode]    [varchar](20),
	        	     [Variant]            [varchar](50),
	        	     [ModelYear]          [numeric](4,0),
	        	     [Year]               [numeric](4,0),
	        	     [Month]              [numeric](2,0),
	        	     [ColourCode]         [varchar](15),
	        	     [OriginalQuotaUnits] [numeric](9,0),
	        	     [QuotaUnits]         [numeric](9,0),
	        	     [AllocationUnits]    [numeric](9,0),
	        	     [UnitStatus]         [char](1),
	        	     [ColourStatus]       [char](1),
	        	     [isNeedReposting]    [bit],
	        	     [CreatedBy]          [varchar](15),
	        	     [CreatedDate]        [datetime],
	        	     [LastUpdateBy]       [varchar](15),
	        	     [LastUpdateDate]     [datetime])

	 insert into omMstIndent_Recovery 
	      select NEWID(), @SysDate, * from omMstIndent
		   where OriginalQuotaUnits=0 and QuotaUnits=0
		      or (convert(varchar(4),Year)+convert(varchar(2),Month)) >= @Period
     update omMstIndent set AllocationUnits=0, isNeedReposting=0
		   where (convert(varchar(4),Year)+convert(varchar(2),Month)) >= @Period
     delete omMstIndent where OriginalQuotaUnits=0 and QuotaUnits=0
	 
  -- 
  -- 
  -- * Backup data omTrIndent to omTrIndent_Recovery
  -- * Delete data pada table omTrIndent
  -- 
     if not exists (select * from sys.objects 
                     where object_id = object_id(N'[omTrIndent_Recovery]') 
					   and type=N'U')
	    create table [omTrIndent_Recovery](
	                 [RowID]                   [uniqueidentifier],
					 [RecoveryDate]            [datetime],
					 [CompanyCode]             [varchar](15),
					 [BranchCode]              [varchar](15),
					 [InquiryNumber]           [bigint],
					 [IndentID]                [bigint],
					 [AllocationUnits]         [numeric](9, 0),
					 [DeliverySchedule]        [varchar](15),
					 [SKPKNo]                  [varchar](15),
					 [SKPKDate]                [datetime],
					 [CustomerID]              [varchar](15),
					 [CustomerBirthPlace]      [varchar](30),
					 [CustomerBirthDate]       [datetime],
					 [OriginalAllocationUnits] [numeric](9, 0),
					 [OriginalDeliveryDate]    [datetime],
					 [InquiryStatus]           [varchar](15),
					 [IndentStatus]            [varchar](15),
					 [SPKDate]                 [datetime],
					 [CancelDate]              [datetime],
					 [Notes]                   [varchar](50),
      	             [CreatedBy]               [varchar](15),
	        	     [CreatedDate]             [datetime],
	        	     [LastUpdateBy]            [varchar](15),
	        	     [LastUpdateDate]          [datetime])
	 insert into omTrIndent_Recovery 
	      select NEWID(), @SysDate, * from omTrIndent
		   where DeliverySchedule >= @Period 
     delete omTrIndent where DeliverySchedule >= @Period 


  -- 
  -- 
  -- * Backup data pmKDP to pmKDP_Recovery
  --   especially "KARIMUN WAGON R" & Status in ("SPK","DO","DELIVERY")
  -- 
     if not exists (select * from sys.objects 
                     where object_id = object_id(N'[pmKDP_Recovery]') 
					   and type=N'U')
	    create table [pmKDP_Recovery](
	                 [RowID]                   [uniqueidentifier],
					 [RecoveryDate]            [datetime],
	                 [InquiryNumber]           [int],
	                 [BranchCode]              [varchar](15),
	                 [CompanyCode]             [varchar](15),
	                 [EmployeeID]              [varchar](15),
	                 [SpvEmployeeID]           [varchar](15),
	                 [InquiryDate]             [datetime],
	                 [OutletID]                [varchar](15),
	                 [StatusProspek]           [varchar](2),
	                 [PerolehanData]           [varchar](15),
	                 [NamaProspek]             [varchar](30),
	                 [AlamatProspek]           [varchar](200),
	                 [TelpRumah]               [varchar](15),
	                 [CityID]                  [varchar](15),
	                 [NamaPerusahaan]          [varchar](50),
	                 [AlamatPerusahaan]        [varchar](200),
	                 [Jabatan]                 [varchar](30),
	                 [Handphone]               [varchar](15),
	                 [Faximile]                [varchar](15),
	                 [Email]                   [varchar](50),
	                 [TipeKendaraan]           [varchar](20),
	                 [Variant]                 [varchar](50),
	                 [Transmisi]               [varchar](2),
	                 [ColourCode]              [varchar](3),
	                 [CaraPembayaran]          [varchar](2),
	                 [TestDrive]               [varchar](2),
	                 [QuantityInquiry]         [int],
	                 [LastProgress]            [varchar](15),
	                 [LastUpdateStatus]        [datetime],
	                 [SPKDate]                 [datetime],
	                 [LostCaseDate]            [datetime],
	                 [LostCaseCategory]        [varchar](1),
	                 [LostCaseReasonID]        [varchar](2),
	                 [LostCaseOtherReason]     [varchar](100),
	                 [LostCaseVoiceOfCustomer] [varchar](200),
	                 [CreationDate]            [datetime],
	                 [CreatedBy]               [varchar](15),
	                 [LastUpdateBy]            [varchar](15),
	                 [LastUpdateDate]          [datetime],
	                 [Leasing]                 [varchar](15),
	                 [DownPayment]             [varchar](15),
	                 [Tenor]                   [varchar](15),
	                 [MerkLain]                [varchar](50))
	 insert into pmKDP_Recovery 
	      select NEWID(), @SysDate, * from pmKDP
		   where TipeKendaraan   = 'KARIMUN WAGON R'
			 and LastProgress   in ('DELIVERY','DO','SPK')
     update pmKDP 
	         set QuantityInquiry = 1
		   where TipeKendaraan   = 'KARIMUN WAGON R'
			 and LastProgress   in ('DELIVERY','DO','SPK')
             and QuantityInquiry = 0
  -- 
  -- 
  -- * Mengisi nilai indent ke table omMstIndent & omTrIndent
  --   berdasarkan pmKDP untuk "KARIMUN WAGON R" yang status = "SPK"/"DO"/"DELIVERY" dan Quantity>0
  -- 
     declare @CompanyCode        varchar(15)
	 declare @BranchCode         varchar(15)
	 declare @InquiryNumber      integer
	 declare @TipeKendaraan      varchar(20)
	 declare @Variant            varchar(20)
	 declare @ColourCode         varchar(15)
	 declare @QuantityInquiry    integer
	 declare @SPKDate            datetime
	 declare @CreatedBy          varchar(15)
	 declare @CreatedDate        datetime
	 declare @IndentID           integer
	 declare @Year               integer
	 declare @Month              integer
	 declare @DeliverySchedule   varchar(6)
	 declare @QuotaUnits         integer
	 declare @SKPKNo             varchar(15)
	 declare @SKPKDate           datetime
	 declare @LastProgress       varchar(15)
	 declare @CustomerID         varchar(15)
	 declare @CustomerBirthPlace varchar(30)
	 declare @CustomerBirthdate  datetime
	 declare @OriginalDeliveryDate datetime
	 declare INDENT cursor for
	         select CompanyCode, BranchCode, InquiryNumber, TipeKendaraan, Variant, 
			        ColourCode, QuantityInquiry, SPKDate, CreatedBy, CreationDate, LastProgress
	 	       from pmKDP
			  where TipeKendaraan   = 'KARIMUN WAGON R'
			    and LastProgress   in ('DELIVERY','DO','SPK')
			    and QuantityInquiry = 1
				and exists (select 1 from omMstIndent
				             where TypeCode   = pmKDP.TipeKendaraan
							   and Variant    = pmKDP.Variant
							   and ColourCode = pmKDP.ColourCode)
				and not exists (select 1 from omTrIndent
				                 where CompanyCode   = pmKDP.CompanyCode
								   and BranchCode    = pmKDP.BranchCode
								   and InquiryNumber = pmKDP.InquiryNumber)
			  order by LastProgress, SPKDate, InquiryNumber

     open INDENT
	 fetch next from INDENT into 
	       @CompanyCode, @BranchCode, @InquiryNumber, @TipeKendaraan, @Variant, 
		   @ColourCode, @QuantityInquiry, @SPKDate, @CreatedBy, @CreatedDate, @LastProgress

     while @@fetch_status=0
        begin
		   select * into #mst from
		          (select top 1 IndentID, Year, Month, isnull(QuotaUnits,0) QuotaUnits
				     from omMstIndent
				    where TypeCode   = @TipeKendaraan
				      and Variant    = @Variant
          			  and ColourCode = @ColourCode
				      and QuotaUnits > 0
				      and QuotaUnits > AllocationUnits
				    order by Year, Month) #mst

		   set @IndentID         = (select IndentID        from #mst)
		   set @Year             = (select Year            from #mst)
		   set @Month            = (select Month           from #mst)
		   set @QuotaUnits       = (select QuotaUnits      from #mst)
           set @DeliverySchedule = (convert(varchar(4),@Year) + right('0' + (convert(varchar(2),@Month)),2))

           if isnull(@QuotaUnits,0) <> 0
              begin 
		          update omMstIndent 
				     set AllocationUnits = AllocationUnits + @QuantityInquiry
				   where TypeCode        = @TipeKendaraan
				     and Variant         = @Variant
				     and Year            = @Year
				     and Month           = @Month
		
                  select * into #trn from 
		                 (select top 1 SKPKNo, SKPKDate, CustomerID, CustomerBirthPlace, 
		                               CustomerBirthDate, CreatedBy, CreatedDate
				            from omTrIndent_Recovery
					       where RecoveryDate  = @SysDate
					         and InquiryNumber = @InquiryNumber
					       order by CreatedDate desc) #trn

       		      set @CreatedBy          = isnull((select CreatedBy          from #trn),@CreatedBy)
		          set @CreatedDate        = isnull((select CreatedDate        from #trn),@CreatedDate)
		          set @SKPKNo             = isnull((select SKPKNo             from #trn),'')
		          set @SKPKDate           = isnull((select SKPKDate           from #trn),@CreatedDate)
		          set @CustomerID         = isnull((select CustomerID         from #trn),'')
		          set @CustomerBirthPlace = isnull((select CustomerBirthPlace from #trn),'')
		          set @CustomerBirthDate  = isnull((select CustomerBirthDate  from #trn),@CreatedDate)
		          set @OriginalDeliveryDate = (SELECT DATEADD(s,-1,DATEADD(mm,DATEDIFF(m,0,(@DeliverySchedule+'01'))+1,0)))

   		          insert into omTrIndent 
	                        ( CompanyCode, BranchCode, InquiryNumber, IndentID, AllocationUnits,
		                      DeliverySchedule, SKPKNo, SKPKDate, CustomerID, CustomerBirthPlace, 
			                  CustomerBirthDate, OriginalAllocationUnits, OriginalDeliveryDate, 
			                  InquiryStatus, IndentStatus, SPKDate, CancelDate, Notes, CreatedBy,
			                  CreatedDate, LastUpdateBy, LastUpdateDate)
		              values( @CompanyCode, @BranchCode, @InquiryNumber, @IndentID, @QuantityInquiry,
				              @DeliverySchedule, @SKPKNo, @SKPKDate, @CustomerID, @CustomerBirthPlace,
					          @CustomerBirthDate, @QuantityInquiry, @OriginalDeliveryDate, @LastProgress, @LastProgress, 
					          @SPKDate, '1900/01/01', '', @CreatedBy, @CreatedDate, @CreatedBy, @SysDate)
                  drop table #trn
              end 

           drop table #mst
           
	       fetch next from INDENT into 
	                  @CompanyCode, @BranchCode, @InquiryNumber, @TipeKendaraan, @Variant, 
		              @ColourCode, @QuantityInquiry, @SPKDate, @CreatedBy, @CreatedDate, @LastProgress
        end 
        close INDENT
        deallocate INDENT
		
		update pmKDP
		   set LastUpdateDate = @SysDate
		 where exists (select 1 from pmKDP_Recovery
		                where InquiryNumber = pmKDP.InquiryNumber
		                  and BranchCode    = pmKDP.BranchCode
		                  and CompanyCode   = pmKDP.CompanyCode)
			   
        select * from pmKDP_Recovery order by InquiryNumber
        select * from omMstIndent    order by IndentID
        select * from omTrIndent     order by IndentID
END
GO
CREATE NONCLUSTERED INDEX [missing_index_851] ON [dbo].[gnMstAccount]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstTask_BasicModel_OperationNo] ON [dbo].[svMstTask]
(
	[BasicModel] ASC,
	[OperationNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstTask_CompanyCode_BasicModel_OperationNo_JobType] ON [dbo].[svMstTask]
(
	[CompanyCode] ASC,
	[BasicModel] ASC,
	[OperationNo] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmStatusHistory_InquiryNumber] ON [dbo].[pmStatusHistory]
(
	[InquiryNumber] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstJob_CompanyCode_ProductType_JobType_GroupJobType] ON [dbo].[svMstJob]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[JobType] ASC,
	[GroupJobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spHstDemandCust_Year_Month_CustomerCode] ON [dbo].[spHstDemandCust]
(
	[Year] ASC,
	[Month] ASC,
	[CustomerCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spHstDemandCust_CustomerCode_CompanyCode_BranchCode] ON [dbo].[spHstDemandCust]
(
	[CustomerCode] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstTask_CompanyCode_ProductType_BasicModel_JobType_IsActive] ON [dbo].[svMstTask]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[BasicModel] ASC,
	[JobType] ASC,
	[IsActive] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnFakturPajak_CompanyCode_BranchCode_FPJGovNo] ON [dbo].[svTrnFakturPajak]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[FPJGovNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnFakturPajak_CompanyCode_BranchCode_NoOfInvoice_IsPKP_FPJGovNo] ON [dbo].[svTrnFakturPajak]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[NoOfInvoice] ASC,
	[IsPKP] ASC,
	[FPJGovNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvItem_BranchCode] ON [dbo].[svTrnInvItem]
(
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstTask_CompanyCode_ProductType_BasicModel_OperationNo_JobType] ON [dbo].[svMstTask]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[BasicModel] ASC,
	[OperationNo] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstTask_CompanyCode_ProductType_JobType] ON [dbo].[svMstTask]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstTask_IsActive] ON [dbo].[svMstTask]
(
	[IsActive] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSPickingHdr_PickingSlipNo_CompanyCode_BranchCode] ON [dbo].[spTrnSPickingHdr]
(
	[PickingSlipNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spHstDemandCust_Year_Month_PartNo_CompanyCode_BranchCode] ON [dbo].[spHstDemandCust]
(
	[Year] ASC,
	[Month] ASC,
	[PartNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstCustomerVehicle_ChassisCode_EngineCode_PoliceRegNo_BasicModel_ServiceBookNo_CustomerCode] ON [dbo].[svMstCustomerVehicle]
(
	[ChassisCode] ASC,
	[EngineCode] ASC,
	[PoliceRegNo] ASC,
	[BasicModel] ASC,
	[ServiceBookNo] ASC,
	[CustomerCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSPickingDtl_PartNo_CompanyCode_BranchCode_PickingSlipNo] ON [dbo].[spTrnSPickingDtl]
(
	[PartNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[PickingSlipNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_18] ON [dbo].[spTrnSPickingDtl]
(
	[PickingSlipNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSPickingHdr_isBORelease] ON [dbo].[spTrnSPickingHdr]
(
	[isBORelease] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstCustomerVehicle_ChassisNo] ON [dbo].[svMstCustomerVehicle]
(
	[ChassisNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstJob_CompanyCode_GroupJobType] ON [dbo].[svMstJob]
(
	[CompanyCode] ASC,
	[GroupJobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstJob_CompanyCode_GroupJobType_JobType] ON [dbo].[svMstJob]
(
	[CompanyCode] ASC,
	[GroupJobType] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstJob_CompanyCode_ProductType_JobType] ON [dbo].[svMstJob]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstCustomerVehicle_CompanyCode_IsActive_PoliceRegNo] ON [dbo].[svMstCustomerVehicle]
(
	[CompanyCode] ASC,
	[IsActive] ASC,
	[PoliceRegNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstJob_CompanyCode_BasicModel_JobType] ON [dbo].[svMstJob]
(
	[CompanyCode] ASC,
	[BasicModel] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstJob_CompanyCode_BasicModel_JobType_GroupJobType] ON [dbo].[svMstJob]
(
	[CompanyCode] ASC,
	[BasicModel] ASC,
	[JobType] ASC,
	[GroupJobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvItem_BranchCode_InvoiceNo] ON [dbo].[svTrnInvItem]
(
	[BranchCode] ASC,
	[InvoiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_ChassisCode_ChassisNo] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ChassisCode] ASC,
	[ChassisNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode_SpvEmployeeID_LastProgress] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[SpvEmployeeID] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_ChassisCode_ChassisNo_JobType] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ChassisCode] ASC,
	[ChassisNo] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode_StatusProspek] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[StatusProspek] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode_SpvEmployeeID_StatusProspek] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[SpvEmployeeID] ASC,
	[StatusProspek] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode_LastProgress] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode_EmployeeID_SpvEmployeeID_PerolehanData_LastProgress] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[SpvEmployeeID] ASC,
	[PerolehanData] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_JobType] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode_EmployeeID_LastProgress] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_FPJNo] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[FPJNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode_EmployeeID_SpvEmployeeID_PerolehanData_StatusProspek] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[SpvEmployeeID] ASC,
	[PerolehanData] ASC,
	[StatusProspek] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_InvoiceNo] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[InvoiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_59] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[EmployeeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvItemDtl_BranchCode_PartNo_SupplySlipNo] ON [dbo].[svTrnInvItemDtl]
(
	[BranchCode] ASC,
	[PartNo] ASC,
	[SupplySlipNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_44] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[SpvEmployeeID] ASC,
	[PerolehanData] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvItem_BranchCode_InvoiceNo_PartNo] ON [dbo].[svTrnInvItem]
(
	[BranchCode] ASC,
	[InvoiceNo] ASC,
	[PartNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_61] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[EmployeeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvItemDtl_BranchCode] ON [dbo].[svTrnInvItemDtl]
(
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvItemDtl_CompanyCode_BranchCode_InvoiceNo] ON [dbo].[svTrnInvItemDtl]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[InvoiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_BranchCode_JobType] ON [dbo].[svTrnInvoice]
(
	[BranchCode] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_LastProgress] ON [dbo].[pmKDP]
(
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_42] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[SpvEmployeeID] ASC,
	[PerolehanData] ASC,
	[StatusProspek] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_BranchCode_JobOrderNo] ON [dbo].[svTrnInvoice]
(
	[BranchCode] ASC,
	[JobOrderNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_36] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[StatusProspek] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSPickingDtl_DocNo] ON [dbo].[spTrnSPickingDtl]
(
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_849] ON [dbo].[spMstItems]
(
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnPBinnHdr_Status] ON [dbo].[spTrnPBinnHdr]
(
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnPOrderBalance_OnOrder] ON [dbo].[spTrnPOrderBalance]
(
	[OnOrder] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItems_CompanyCode_BranchCode_TypeOfGoods_ProductType] ON [dbo].[spMstItems]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[TypeOfGoods] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItems_PartNo] ON [dbo].[spMstItems]
(
	[PartNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItems_PartNo_CompanyCode_BranchCode] ON [dbo].[spMstItems]
(
	[PartNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnPOrderBalance_SeqNo] ON [dbo].[spTrnPOrderBalance]
(
	[SeqNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_534] ON [dbo].[spTrnPPOSHdr]
(
	[Status] ASC,
	[isDeleted] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnPRcvHdr_Status] ON [dbo].[spTrnPRcvHdr]
(
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSBPSFDtl_BranchCode] ON [dbo].[spTrnSBPSFDtl]
(
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_227] ON [dbo].[spTrnPOrderBalance]
(
	[SeqNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_26] ON [dbo].[spTrnPOrderBalance]
(
	[SeqNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_264] ON [dbo].[spTrnPPOSHdr]
(
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItemInfo_PartNo_CompanyCode] ON [dbo].[spMstItemInfo]
(
	[PartNo] ASC,
	[CompanyCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_686] ON [dbo].[spMstItemInfo]
(
	[CompanyCode] ASC,
	[Status] ASC,
	[PartName] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItemLoc_CompanyCode_WarehouseCode_PartNo] ON [dbo].[spMstItemLoc]
(
	[CompanyCode] ASC,
	[WarehouseCode] ASC,
	[PartNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spHstDemandItem_Year_Month_CompanyCode_BranchCode] ON [dbo].[spHstDemandItem]
(
	[Year] ASC,
	[Month] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spHstDemandItem_Year_Month_PartNo_CompanyCode_BranchCode] ON [dbo].[spHstDemandItem]
(
	[Year] ASC,
	[Month] ASC,
	[PartNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItemInfo_CompanyCode_ProductType_PartName] ON [dbo].[spMstItemInfo]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[PartName] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItemLoc_PartNo_WarehouseCode_CompanyCode_BranchCode] ON [dbo].[spMstItemLoc]
(
	[PartNo] ASC,
	[WarehouseCode] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItemMod_PartNo_InterChangeCode] ON [dbo].[spMstItemMod]
(
	[PartNo] ASC,
	[InterChangeCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItemPrice_CompanyCode_PartNo] ON [dbo].[spMstItemPrice]
(
	[CompanyCode] ASC,
	[PartNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItems_CompanyCode_BranchCode_ProductType] ON [dbo].[spMstItems]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spMstItemLoc_WarehouseCode_CompanyCode_BranchCode] ON [dbo].[spMstItemLoc]
(
	[WarehouseCode] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_21] ON [dbo].[spMstItemLoc]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[WarehouseCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_727] ON [dbo].[spMstItemLoc]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[WarehouseCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSBPSFDtl_BranchCode_PartNo_DocNo] ON [dbo].[spTrnSBPSFDtl]
(
	[BranchCode] ASC,
	[PartNo] ASC,
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_DocNo_SalesType] ON [dbo].[spTrnSORDHdr]
(
	[DocNo] ASC,
	[SalesType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_isLocked] ON [dbo].[spTrnSORDHdr]
(
	[isLocked] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_IsPORDD] ON [dbo].[spTrnSORDHdr]
(
	[IsPORDD] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_CompanyCode_BranchCode_SalesType_Status] ON [dbo].[spTrnSORDHdr]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[SalesType] ASC,
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_CompanyCode_BranchCode_UsageDocNo] ON [dbo].[spTrnSORDHdr]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[UsageDocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_DocNo_CompanyCode_BranchCode] ON [dbo].[spTrnSORDHdr]
(
	[DocNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_SalesType] ON [dbo].[spTrnSORDHdr]
(
	[SalesType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSOSupply_SupSeq_PTSeq] ON [dbo].[spTrnSOSupply]
(
	[SupSeq] ASC,
	[PTSeq] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSPickingDtl_CompanyCode_BranchCode_DocNo] ON [dbo].[spTrnSPickingDtl]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSPickingDtl_CompanyCode_BranchCode_PartNo_ProductType] ON [dbo].[spTrnSPickingDtl]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[PartNo] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDHdr_Status] ON [dbo].[spTrnSORDHdr]
(
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSOSupply_CompanyCode_PickingSlipNo] ON [dbo].[spTrnSOSupply]
(
	[CompanyCode] ASC,
	[PickingSlipNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSOSupply_SupSeq] ON [dbo].[spTrnSOSupply]
(
	[SupSeq] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpDtl_CompanyCode_BranchCode_DocNo] ON [dbo].[spTrnSLmpDtl]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpDtl_CompanyCode_BranchCode_PartNo_ProductType] ON [dbo].[spTrnSLmpDtl]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[PartNo] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpDtl_CompanyCode_BranchCode_WarehouseCode_PartNo_PartNoOriginal_DocNo] ON [dbo].[spTrnSLmpDtl]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[WarehouseCode] ASC,
	[PartNo] ASC,
	[PartNoOriginal] ASC,
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSBPSFHdr_Status] ON [dbo].[spTrnSBPSFHdr]
(
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpDtl_BranchCode] ON [dbo].[spTrnSLmpDtl]
(
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpDtl_BranchCode_PartNo_DocNo] ON [dbo].[spTrnSLmpDtl]
(
	[BranchCode] ASC,
	[PartNo] ASC,
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpDtl_LmpNo] ON [dbo].[spTrnSLmpDtl]
(
	[LmpNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDDtl_CompanyCode_BranchCode_PartNo] ON [dbo].[spTrnSORDDtl]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[PartNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDDtl_DocNo] ON [dbo].[spTrnSORDDtl]
(
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSORDDtl_PartNo_CompanyCode_BranchCode_DocNo] ON [dbo].[spTrnSORDDtl]
(
	[PartNo] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[DocNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpHdr_CompanyCode_BranchCode_PickingSlipNo] ON [dbo].[spTrnSLmpHdr]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[PickingSlipNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpHdr_LmpNo] ON [dbo].[spTrnSLmpHdr]
(
	[LmpNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_spTrnSLmpHdr_PickingSlipNo] ON [dbo].[spTrnSLmpHdr]
(
	[PickingSlipNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstEmployee_TitleCode] ON [dbo].[gnMstEmployee]
(
	[TitleCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_ProductType_ChassisCode_ChassisNo_BranchCode] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[ChassisCode] ASC,
	[ChassisNo] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstEmployee_PersonnelStatus] ON [dbo].[gnMstEmployee]
(
	[PersonnelStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ProductType_ServiceType_ServiceStatus] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[ServiceType] ASC,
	[ServiceStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstEmployee_TitleCode_PersonnelStatus] ON [dbo].[gnMstEmployee]
(
	[TitleCode] ASC,
	[PersonnelStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ServiceNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ServiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_JobOrderDate] ON [dbo].[svTrnService]
(
	[JobOrderDate] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_ServiceNo] ON [dbo].[svTrnService]
(
	[ServiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_869] ON [dbo].[gnMstDocument]
(
	[DocumentYear] ASC,
	[DocumentSequence] ASC,
	[CreatedDate] ASC,
	[LastUpdateDate] ASC,
	[isLocked] ASC,
	[LockingDate] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_ServiceType] ON [dbo].[svTrnService]
(
	[ServiceType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstEmployee_CompanyCode_BranchCode_TitleCode] ON [dbo].[gnMstEmployee]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[TitleCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_JobOrderNo] ON [dbo].[svTrnService]
(
	[JobOrderNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstEmployee_CompanyCode_BranchCode_PersonnelStatus] ON [dbo].[gnMstEmployee]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[PersonnelStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ProductType_CustomerCode_ChassisCode_ChassisNo_JobOrderNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[CustomerCode] ASC,
	[ChassisCode] ASC,
	[ChassisNo] ASC,
	[JobOrderNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstLookUpDtl_CompanyCode_LookUpValue] ON [dbo].[gnMstLookUpDtl]
(
	[CompanyCode] ASC,
	[LookUpValue] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ProductType_EstimationNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[EstimationNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstLookUpDtl_SeqNo] ON [dbo].[gnMstLookUpDtl]
(
	[SeqNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_JobOrderNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[JobOrderNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstLookUpDtl_LookUpValue] ON [dbo].[gnMstLookUpDtl]
(
	[LookUpValue] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstLookUpDtl_CompanyCode_CodeID] ON [dbo].[gnMstLookUpDtl]
(
	[CompanyCode] ASC,
	[CodeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ProductType_JobOrderNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[JobOrderNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ProductType_ServiceType_PoliceRegNo_ServiceStatus] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[ServiceType] ASC,
	[PoliceRegNo] ASC,
	[ServiceStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_249] ON [dbo].[gnMstEmployee]
(
	[EmployeeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ProductType_ForemanID] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[ForemanID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstLookUpDtl_CodeID_LookUpValue] ON [dbo].[gnMstLookUpDtl]
(
	[CodeID] ASC,
	[LookUpValue] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_ProductType_InvoiceNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[InvoiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_865] ON [dbo].[gnMstDocument]
(
	[DocumentName] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvMechanic_ServiceNo] ON [dbo].[svTrnSrvMechanic]
(
	[ServiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomerProfitCenter_CompanyCode_BranchCode_ProfitCenterCode_isBlackList] ON [dbo].[gnMstCustomerProfitCenter]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProfitCenterCode] ASC,
	[isBlackList] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvTask_CompanyCode_BranchCode_IsSubCon_PONo] ON [dbo].[svTrnSrvTask]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[IsSubCon] ASC,
	[PONo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomerProfitCenter_isBlackList] ON [dbo].[gnMstCustomerProfitCenter]
(
	[isBlackList] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvMechanic_CompanyCode_BranchCode_ProductType_MechanicStatus] ON [dbo].[svTrnSrvMechanic]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[MechanicStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomerProfitCenter_CompanyCode_CustomerCode_ProfitCenterCode] ON [dbo].[gnMstCustomerProfitCenter]
(
	[CompanyCode] ASC,
	[CustomerCode] ASC,
	[ProfitCenterCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomerProfitCenter_BranchCode_ProfitCenterCode_SalesType_isBlackList] ON [dbo].[gnMstCustomerProfitCenter]
(
	[BranchCode] ASC,
	[ProfitCenterCode] ASC,
	[SalesType] ASC,
	[isBlackList] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomer_Status] ON [dbo].[gnMstCustomer]
(
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomer_CategoryCode] ON [dbo].[gnMstCustomer]
(
	[CategoryCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svMstTask_CompanyCode_ProductType_BasicModel_IsActive_JobType] ON [dbo].[svMstTask]
(
	[CompanyCode] ASC,
	[ProductType] ASC,
	[BasicModel] ASC,
	[IsActive] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvTask_CompanyCode_BranchCode_ProductType] ON [dbo].[svTrnSrvTask]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_216] ON [dbo].[gnMstCustomer]
(
	[CustomerCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvTask_ServiceNo] ON [dbo].[svTrnSrvTask]
(
	[ServiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstDocument_DocumentPrefix_ProfitCenterCode_DocumentYear_CompanyCode_BranchCode] ON [dbo].[gnMstDocument]
(
	[DocumentPrefix] ASC,
	[ProfitCenterCode] ASC,
	[DocumentYear] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_7] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[PoliceRegNo] ASC,
	[ServiceStatus] ASC,
	[Odometer] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstDocument_CompanyCode_DocumentType] ON [dbo].[gnMstDocument]
(
	[CompanyCode] ASC,
	[DocumentType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_235] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ChassisCode] ASC,
	[ChassisNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstDocument_DocumentType_ProfitCenterCode_DocumentYear_CompanyCode_BranchCode] ON [dbo].[gnMstDocument]
(
	[DocumentType] ASC,
	[ProfitCenterCode] ASC,
	[DocumentYear] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_241] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[CustomerCode] ASC,
	[ChassisCode] ASC,
	[ChassisNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_9] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[PoliceRegNo] ASC,
	[JobType] ASC,
	[ServiceStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvItem_CompanyCode_BranchCode_ProductType_PartNo_SupplySlipNo] ON [dbo].[svTrnSrvItem]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[PartNo] ASC,
	[SupplySlipNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomerProfitCenter_ProfitCenterCode_CompanyCode_BranchCode_CustomerCode] ON [dbo].[gnMstCustomerProfitCenter]
(
	[ProfitCenterCode] ASC,
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[CustomerCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvItem_ServiceNo] ON [dbo].[svTrnSrvItem]
(
	[ServiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_570] ON [dbo].[gnMstCustomerProfitCenter]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProfitCenterCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnSrvItem_CompanyCode_BranchCode_ProductType_PartNo] ON [dbo].[svTrnSrvItem]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[PartNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstCustomerProfitCenter_SalesType_isBlackList] ON [dbo].[gnMstCustomerProfitCenter]
(
	[SalesType] ASC,
	[isBlackList] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_439] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_EmployeeID_SpvEmployeeID_PerolehanData_LastProgress] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[SpvEmployeeID] ASC,
	[PerolehanData] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_441] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_EmployeeID_SpvEmployeeID_TipeKendaraan_Variant_StatusProspek] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[SpvEmployeeID] ASC,
	[TipeKendaraan] ASC,
	[Variant] ASC,
	[StatusProspek] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_437] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_EmployeeID_SpvEmployeeID_TipeKendaraan_Variant_LastProgress] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[SpvEmployeeID] ASC,
	[TipeKendaraan] ASC,
	[Variant] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_EmployeeID_SpvEmployeeID] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[EmployeeID] ASC,
	[SpvEmployeeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_73] ON [dbo].[pmActivities]
(
	[CompanyCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_84] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmActivities_InquiryNumber_ActivityID] ON [dbo].[pmActivities]
(
	[InquiryNumber] ASC,
	[ActivityID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_80] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_82] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_StatusProspek] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[StatusProspek] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_ProductType_JobType] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_SpvEmployeeID_TipeKendaraan_Variant_LastProgress] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[SpvEmployeeID] ASC,
	[TipeKendaraan] ASC,
	[Variant] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_ProductType] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_CompanyCode] ON [dbo].[pmKDP]
(
	[CompanyCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_CompanyCode_BranchCode_ProductType_JobOrderNo] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[JobOrderNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvoice_InvoiceStatus_JobType] ON [dbo].[svTrnInvoice]
(
	[InvoiceStatus] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_32] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_LastProgress] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_435] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_SpvEmployeeID_PerolehanData_LastProgress] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[SpvEmployeeID] ASC,
	[PerolehanData] ASC,
	[LastProgress] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_13] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmKDP_BranchCode_CompanyCode_SpvEmployeeID] ON [dbo].[pmKDP]
(
	[BranchCode] ASC,
	[CompanyCode] ASC,
	[SpvEmployeeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_86] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstSignature_SeqNo] ON [dbo].[gnMstSignature]
(
	[SeqNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnPoSubCon_POStatus] ON [dbo].[svTrnPoSubCon]
(
	[POStatus] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_867] ON [dbo].[gnMstLookUpDtl]
(
	[CompanyCode] ASC,
	[CodeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_820] ON [dbo].[svTrnInvTask]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_192] ON [dbo].[gnMstSupplier]
(
	[SupplierCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnPoSubCon_CompanyCode_BranchCode_ProductType_RecNo] ON [dbo].[svTrnPoSubCon]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC,
	[RecNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_BranchCode] ON [dbo].[svTrnService]
(
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_BookingNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[BookingNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_463] ON [dbo].[gnMstLookUpDtl]
(
	[CompanyCode] ASC,
	[CodeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_CompanyCode_BranchCode_EstimationNo] ON [dbo].[svTrnService]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[EstimationNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_71] ON [dbo].[gnMstLookUpDtl]
(
	[CompanyCode] ASC,
	[CodeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnService_BranchCode_JobType] ON [dbo].[svTrnService]
(
	[BranchCode] ASC,
	[JobType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_700] ON [dbo].[gnMstLookUpDtl]
(
	[CompanyCode] ASC,
	[CodeID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_93] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_omMstBBNKIR_SalesModelYear_Status] ON [dbo].[omMstBBNKIR]
(
	[SalesModelYear] ASC,
	[Status] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_95] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_pmActivities_InquiryNumber] ON [dbo].[pmActivities]
(
	[InquiryNumber] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_91] ON [dbo].[svTrnInvoice]
(
	[CompanyCode] ASC,
	[BranchCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_omMstModelAccount_CompanyCode] ON [dbo].[omMstModelAccount]
(
	[CompanyCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_838] ON [dbo].[arInterface]
(
	[TypeTrans] ASC,
	[StatusFlag] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_528] ON [dbo].[gnMstSupplierProfitCenter]
(
	[ProfitCenterCode] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvTask_InvoiceNo] ON [dbo].[svTrnInvTask]
(
	[InvoiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_gnMstSupplierProfitCenter_isBlackList] ON [dbo].[gnMstSupplierProfitCenter]
(
	[isBlackList] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvTask_CompanyCode_BranchCode_InvoiceNo] ON [dbo].[svTrnInvTask]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[InvoiceNo] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [missing_index_920] ON [dbo].[gnMstSupplierProfitCenter]
(
	[isBlackList] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_svTrnInvTask_CompanyCode_BranchCode_ProductType] ON [dbo].[svTrnInvTask]
(
	[CompanyCode] ASC,
	[BranchCode] ASC,
	[ProductType] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY  = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE view [dbo].[SvBMView]

as 


Select a.CompanyCode, a.ProductType, a.RefferenceCode AS BasicModel, a.DescriptionEng AS TechnicalModelCode,
a.Description AS ModelDescription, CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL'
GO
CREATE view [dbo].[SvMechanicAvbView]  as  
  SELECT b.CompanyCode,a.EmployeeID, b.BranchCode, a.EmployeeName , /*CASE b.IsAvailable WHEN '1' THEN 'Hadir' ELSE 'Tidak Aktif' END AS IsAvailableString,*/     
  b.IsAvailable, CASE b.IsAvailable WHEN '1' THEN 'Hadir' ELSE 'Tidak Hadir' END as AttendStatus    
  FROM gnMstEmployee a, svMstAvailableMechanic b    
  where b.EmployeeID = a.EmployeeID    
  AND a.PersonnelStatus = '1'    
  and a.CompanyCode = b.CompanyCode    
  AND a.BranchCode  = b.BranchCode
GO
CREATE view [dbo].[SvLaborCode]

as 

/*
select distinct CompanyCode , BasicModel from omMstModel
union
select distinct CompanyCode , RefferenceCode from svMstRefferenceService
where RefferenceType = 'BASMODEL'*/
select distinct CompanyCode, BasicModel from omMstModel
union
select distinct CompanyCode,LaborCode from svMstLaborRate
union
select distinct CompanyCode, RefferenceCode from svMstRefferenceService
where RefferenceType = 'BASMODEL'
GO
create view [dbo].[CsCustFeedbackView]

as 

select a.CompanyCode, a.CustomerCode, a.CustomerName, a.Address1 as [Address], a.PhoneNo
     , b.ChassisCode + convert(varchar, b.ChassisNo) Chassis
     , b.EngineCode + convert(varchar, b.EngineNo) Engine
     , b.PoliceRegNo, b.ServiceBookNo
     , a.Address1
     , c.FeedbackA
     , c.FeedbackB
     , c.FeedbackC
     , c.FeedbackD
     , b.BasicModel as CarType
     , FeedbackCode = (case isnull(c.Chassis, '') when '' then 'N' else 'Y' end)
  from GnMstCustomer a
  left join svMstCustomerVehicle b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join CsCustFeedback c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
   and c.Chassis = b.ChassisCode + convert(varchar, b.ChassisNo)
 where 1 = 1
   and b.ChassisCode is not null
GO
CREATE view [dbo].[SvMstDealerView]

as 

SELECT CompanyCode, CustomerCode as DealerCode, CustomerName as DealerName, Address1, Address2, Address3, Address4, 
Address1 + ' ' + Address2 + ' ' + Address3 + ' ' + Address4 AS Address,
CASE Status WHEN 1 THEN 'Aktif' ELSE 'TIdak Aktif' END AS Status
FROM gnMstCustomer with(nolock, nowait)
--WHERE  CompanyCode = '6006406'
GO
CREATE view [dbo].[SvKontrakServiceView]

as 

SELECT a.*, gnMstCustomer.CustomerName AS CustomerName 
, case a.IsActive when 1 then 'Aktif' Else 'Tidak Aktif' end Status
FROM svMstContract a
INNER JOIN gnMstCustomer ON gnMstCustomer.CompanyCode = a.CompanyCode AND
gnMstCustomer.CustomerCode = a.CustomerCode
GO
CREATE VIEW [dbo].[SvKendaraanPel]
AS
select DISTINCT a.CompanyCode, BranchCode,
 a.PoliceRegNo
,a.CustomerCode
,b.CustomerName
,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
, b.PhoneNo
, b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
,a.DealerCode
,c.CustomerName DealerName
, (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
,a.ChassisCode
,  cast(a.ChassisNo as varchar) ChassisNo
,a.EngineCode
,  cast(a.EngineNo as varchar) EngineNo
,a.ServiceBookNo
,a.ClubCode
,a.ColourCode
,case a.FakturPolisiDate when ('19000101') then getdate() else a.FakturPolisiDate end FakturPolisiDate
,a.ClubNo
,case a.ClubDateStart when ('19000101') then getdate() else a.ClubDateStart end ClubDateStart
,case a.ClubDateFinish when ('19000101') then getdate() else a.ClubDateFinish end ClubDateFinish
,case a.ClubSince when ('19000101') then getdate() else a.ClubSince end ClubSince
, (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
,a.IsClubStatus
, (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
,a.IsActive
, (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
,a.BasicModel
,a.TransmissionType
,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
,a.LastJobType
,ProductionYear
,a.ContractNo
,a.ContactName, ContactAddress, ContactPhone
,b.CityCode
,f.LookUpValueName CityName, e.ProfitCenterCode
,g.RefferenceDesc1 ColourDesc ,g.RefferenceDesc1 ColourName
,h.DescriptionEng TechnicalModelCode
from svMstCustomerVehicle a
inner join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode
left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	and c.CustomerCode = a.DealerCode
left join svMstJob d on 
	d.CompanyCode = a.CompanyCode and
	d.BasicModel = a.BasicModel 	
LEFT join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
left join gnMstLookupDtl f on 
    f.CompanyCode = a.CompanyCode and
    f.CodeID = 'CITY' and
    f.LookUpValue = b.CityCode
left join omMstRefference g on 
	a.CompanyCode = c.CompanyCode and
	g.RefferenceType = 'COLO' and
	g.RefferenceCode = a.ColourCode
LEFT JOIN svMstrefferenceService h ON
	a.CompanyCode = h.CompanyCode and
	a.BasicModel = h.RefferenceCode and
	h.RefferenceType = 'BASMODEL'

    --WHERE a.IsActive = 1
GO
create view [dbo].[CsStnkExtView]        
as        

select distinct a.CompanyCode           
     , b.CustomerCode
     , e.BranchCode          
     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as Chassis           
     , (a.EngineCode + convert(varchar, a.EngineNo)) as Engine    
     , e.SalesModelCode as CarType          
     , e.ColourCode as Color          
     , d.PoliceRegNo           
     , f.Salesman as SalesmanCode           
     , g.EmployeeName as SalesmanName          
     , c.CustomerName          
     , c.PhoneNo
     , i.CompanyName CompanyName  
     , j.CompanyName BranchName
     , h.StnkExpiredDate
     , k.BpkbDate
	 , k.StnkDate
     , (case h.Status when 0 then 'In Progress' when 1 then 'Finish' else 'In Progress' end) as StatusInfo        
     , left(c.Address1, 40) as Address  
     , h.IsStnkExtend
     , h.ReqKtp
     , h.ReqSuratKuasa
     , h.ReqBpkb
     , h.ReqStnk
     , h.Comment
     , h.Additional
     , h.Status
     , h.Tenor
     , h.LeasingCode
     , h.CustomerCategory
     , convert(varchar(15),h.CreatedDate, 106) as CreatedDate
     , convert(varchar(15),h.FinishDate, 106) as FinishDate      
  from omTrSalesInvoiceVin a          
  left join omTrSalesInvoice b          
    on b.CompanyCode = a.CompanyCode          
   and b.BranchCode = a.BranchCode          
   and b.InvoiceNo = a.InvoiceNo          
  left join gnMstCustomer c          
    on c.CompanyCode = a.CompanyCode          
   and c.CustomerCode = b.CustomerCode          
  left join svMstCustomerVehicle d          
    on d.CompanyCode = a.CompanyCode          
   and d.ChassisCode = a.ChassisCode          
   and d.ChassisNo = a.ChassisNo          
  left join omTrSalesSOVin e          
    on e.CompanyCode = a.CompanyCode          
   and e.ChassisCode = a.ChassisCode          
   and e.ChassisNo = a.ChassisNo          
  left join omTrSalesSO f          
    on f.CompanyCode = e.CompanyCode          
   and f.BranchCode = e.BranchCode          
   and f.SONo = e.SONo          
  left join gnMstEmployee g          
    on g.CompanyCode = f.CompanyCode          
   and g.BranchCode = f.BranchCode          
   and g.EmployeeID = f.Salesman          
  left join CsStnkExt h        
    on h.CompanyCode = a.CompanyCode        
   and h.Chassis = a.ChassisCode + convert(varchar(20), a.ChassisNo)      
  left join gnMstOrganizationHdr i  
    on i.CompanyCode = f.CompanyCode  
  left join gnMstCoProfile j  
    on j.CompanyCode = f.CompanyCode  
   and j.BranchCode = f.BranchCode 
  left join CsCustomerVehicle k  
    on k.CompanyCode = a.CompanyCode  
   and k.Chassis = a.ChassisCode + convert(varchar(20), a.ChassisNo)
GO
CREATE view [dbo].[SvKSGView]

as 


SELECT a.CompanyCode, a.ProductType,
a.BasicModel,
a.IsCampaign,a.TransmissionType, a.PdiFscSeq,
a.EffectiveDate,
Case a.IsCampaign WHEN 1 THEN 'Campaign' ELSE 'Reguler' END AS IsCampaignType,
b.LookupValueName as TransType,
a.RegularLaborAmount,	
a.RegularMaterialAmount, a.RegularTotalAmount,
--((a.LaborRate * a.RegularLaborAmount)+ a.RegularMaterialAmount) AS RegularTotalAmount,
a.Description,
CASE a.isActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status,
a.IsActive,a.LaborRate
FROM
svMstPdiFscRate a
LEFT JOIN GnMstLookupDtl b ON a.companyCode = b.CompanyCode and
a.TransmissionType =  b.LookUpValue and b.CodeId = 'TRTY'
GO
CREATE view [dbo].[SvNomorAccView]

as 

SELECT CompanyCode, BranchCode, AccountNo, Description as AccDescription
FROM gnMstAccount with(nolock,nowait)
GO
CREATE VIEW [dbo].[SvRefferenceServiceView]
AS
SELECT        TOP (100) PERCENT CompanyCode, ProductType, RefferenceType, RefferenceCode, Description, DescriptionEng, IsActive
FROM            dbo.svMstRefferenceService
WHERE        (IsActive = 1)
GO
CREATE view [dbo].[HrEmployeeAchievementView]

as

select a.CompanyCode
     , a.EmployeeID
     , b.EmployeeName
     , a.Department
     , a.Position
     , a.Grade
     , a.AssignDate
     , a.IsJoinDate
     , DepartmentName = a.Department
     , PositionName = (
		select top 1 Upper(x.PosName)
		  from gnMstPosition x
		 where x.CompanyCode = a.CompanyCode
		   and x.DeptCode = a.Department
		   and x.PosCode = a.Position)
     , GradeName = (
		select top 1 Upper(x.LookUpValueName)
		  from gnMstLookUpDtl x
		 where x.CompanyCode = a.CompanyCode
		   and x.CodeID = 'ITSG'
		   and x.LookUpValue = a.Grade)
     , IsInitialPosition = (case a.IsJoinDate when 1 then 'YES' else 'NO' end)
     , AssignDateStatus = (case a.IsJoinDate when 1 then 'Join Position' else 'Promotion' end)
  from HrEmployeeAchievement a
  left join HrEmployee b
    on a.CompanyCode = b.CompanyCode
   and a.EmployeeID = b.EmployeeID
 where isnull(a.IsDeleted, '') = ''
    or a.IsDeleted = 0
GO
CREATE view [dbo].[SvRegCampaign]

as 

SELECT a.CompanyCode,	
b.PoliceRegNo
, a.ChassisCode
, a.ChassisNo
, b.EngineCode
, b.EngineNo
, d.CustomerCode
, d.CustomerName
, a.CampaignFlag
, c.LookupValueName, a.StartDate, a.EndDate, b.ServiceBookNo
, rtrim(rtrim(d.Address1) + ' ' + rtrim(d.Address2) + ' ' + rtrim(d.Address3) + ' ' + rtrim(d.Address4)) as Address
, d.CityCode, d.IbuKota as CityName
FROM svMstFscCampaign a
LEFT JOIN svMstCustomerVehicle b 
ON a.CompanyCode = b.CompanyCode
AND a.ChassisCode = b.ChassisCode	
AND a.ChassisNo = b.ChassisNo
LEFT JOIN gnMstLookupDtl c 
ON c.CodeID = 'FSC_Campaign'
AND c.ParaValue = a.CampaignFlag	
LEFT JOIN gnMstCustomer d
ON d.CompanyCode = a.CompanyCode
AND d.CustomerCode = b.CustomerCode
GO
CREATE VIEW [dbo].[SvReffServiceView]      
AS    
SELECT     a.CompanyCode, a.ProductType, b.LookupValueName, a.RefferenceType, a.RefferenceCode, a.Description, a.DescriptionEng, CASE WHEN a.IsActive = 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActiveDesc, a.IsActive,       
                      a.CreatedBy, a.CreatedDate, a.LastupdateBy, a.LastupdateDate, a.IsLocked, a.LockingBy, a.LockingDate      
FROM         dbo.svMstRefferenceService  a
join gnMstLookupDtl b
on a.CompanyCode = b.CompanyCode
and a.RefferenceType = b.LookupValue
GO
CREATE view [dbo].[SvOperationView]

as 

/*SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as ComplainCode, Description as Ket, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'COMPLNCD'
*/
select CompanyCode, ProductType,OperationNo
,Description as Keterangan
,case IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from  svMstTask
where IsActive = 1
GO
CREATE VIEW [dbo].[SvNoPolisi]
AS
select DISTINCT
 a.CompanyCode, BranchCode,
--CASE a.PoliceRegNo WHEN null THEN '-' ELSE a.PoliceRegNo END as PoliceRegNo
a.PoliceRegNo
,a.CustomerCode
,b.CustomerName
,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
, b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
,a.DealerCode
,c.CustomerName DealerName
, (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
,a.ChassisCode
,  cast(a.ChassisNo as varchar) ChassisNoStr
,a.EngineCode
,  cast(a.EngineNo as varchar) EngineNo
,a.ServiceBookNo
,a.ClubCode
,a.ColourCode
,case a.FakturPolisiDate when ('19000101') then null else a.FakturPolisiDate end FakturPolisiDate
,a.ClubNo
--,a.ClubDateStart, a.ClubDateFinish, a.ClubSince
,case a.ClubDateStart when ('19000101') then getdate() else a.ClubDateStart end ClubDateStart
,case a.ClubDateFinish when ('19000101') then getdate() else a.ClubDateFinish end ClubDateFinish
,case a.ClubSince when ('19000101') then getdate() else a.ClubSince end ClubSince
, (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
,a.IsClubStatus
, (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
,a.IsActive as IsActiveP
, (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
,a.BasicModel
,a.TransmissionType
,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
,a.LastJobType
,a.ChassisNo
,a.ContractNo
,a.ContactName
,b.CityCode
,f.LookUpValueName CityName
from svMstCustomerVehicle a
left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode
left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	and c.CustomerCode = a.DealerCode
left join svMstJob d on 
	d.CompanyCode = a.CompanyCode and
	d.BasicModel = a.BasicModel 	
inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
left join gnMstLookupDtl f on 
    f.CompanyCode = a.CompanyCode and
    f.CodeID = 'CITY' and
    f.LookUpValue = b.CityCode
 WHERE a.IsActive = '1'
and a.PoliceRegNo != ''
and a.PoliceRegNo != '-'
GO
CREATE view [dbo].[SvPekerjaanView]

as 

SELECT a.CompanyCode, a.ProductType,
    BasicModel,
    JobType,
    b.Description AS JobDescription,	
    GroupJobType,
    c.Description AS GroupJobDescription,
    WarrantyOdometer, 
    WarrantyTimePeriod,
    CASE WarrantyTimeDim WHEN 'D' THEN 'Hari' ELSE CASE WarrantyTimeDim WHEN 'M' THEN 'Bulan' ELSE 'Tahun' END END AS WarrantyTimeDimStr,
    WarrantyTimeDim,
    CASE IsPdiFsc WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsPdiFscStr,
    IsPdiFsc,
    PdiFscSeq= CAST(PdiFscSeq As Varchar(10)),
    CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status, a.IsActive as IsActiveP
FROM
    svMstJob a,
    svMstRefferenceService b,
    svMstRefferenceService c
WHERE
    a.CompanyCode = b.CompanyCode
	AND a.ProductType = b.ProductType
    AND a.JobType = b.RefferenceCode
	AND b.RefferenceType = 'JOBSTYPE'
	AND a.CompanyCode = c.CompanyCode
	AND a.ProductType = c.ProductType
    AND a.GroupJobType = c.RefferenceCode    
    AND c.RefferenceType = 'GRPJOBTY'
GO
CREATE view [dbo].[SvPaymentPackage]

as 

SELECT a.CompanyCode, BranchCode, ProfitCenterCode, a.CustomerCode, a.CustomerCode as BillTo, a.CustomerName,
       a.Address1+' '+a.Address2+' '+a.Address3+' '+a.Address4 as Address,
       c.LookUpValueName as ProfitCenter
  FROM gnMstCustomer a with(nolock, nowait)
    INNER JOIN gnMstCustomerProfitCenter b with(nolock, nowait) ON 
        b.CustomerCode= b.CustomerCode AND b.CustomerCode=a.CustomerCode
    INNER JOIN gnMstLookUpDtl c ON c.CompanyCode= a.CompanyCode
 WHERE  --a.CompanyCode='6006406'
    --AND b.BranchCode='6006401'
    --AND b.ProfitCenterCode= '200'
    b.isBlackList=0
    AND a.status = 1
    AND c.LookupValue= b.ProfitCenterCode
    AND c.CodeID= 'PFCN'
   --order BY CustomerName ASC
GO
create view [dbo].[HrEmployeeTrainingView]
as
select 
	a.CompanyCode,
	a.EmployeeID,
	b.EmployeeName, 
	a.TrainingCode,
	TrainingName = (
		select top 1
			x.TrainingName
		from 
			HrMstTraining x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.TrainingCode = a.TrainingCode
	),
	a.TrainingDate,
	a.PostTest,
	a.PostTestAlt,
	a.PreTest,
	a.PreTestAlt
from 
	HrEmployeeTraining a
inner join
	HrEmployee b
on
	a.CompanyCode = b.CompanyCode
	and
	a.EmployeeID = b.EmployeeID
	and
	a.IsDeleted != 1
GO
create view [dbo].[CsLkuStnkExtView]
as 

select a.CompanyCode     
	 , a.BranchCode
	 , b.CustomerCode
	 , c.CustomerName
	 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
	 , a.EngineCode + convert(varchar, a.EngineNo) Engine
	 , a.SalesModelCode
	 , a.SalesModelYear
	 , a.ColourCode
	 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
	 , isnull(e.StnkDate, g.BPKDate) StnkDate
	 , g.BPKDate
	 , h.isLeasing as IsLeasing
	 , h.LeasingCo
	 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
	 , i.CustomerName as LeasingName
	 , h.Installment
	 , convert(varchar, isnull(h.Installment, 0)) + ' Month' as Tenor
     , left(c.Address1, 40) as Address
     , c.PhoneNo
     , h.Salesman
     , j.EmployeeName as SalesmanName
     , k.IsStnkExtend
     , isnull(k.StnkExpiredDate, dateadd(year, 1, isnull(e.StnkDate, g.BPKDate)))  as StnkExpiredDate
     , k.ReqKtp
     , k.ReqStnk
     , k.ReqBpkb
     , k.ReqSuratKuasa
     , k.Comment, k.Additional, k.Status
     , (case k.Status when 1 then 'Finish' else 'In Progress' end) as StatusInfo
     , l.PoliceRegNo
     , case isnull(k.Chassis, '') when '' then 'Y' else 'N' end OutStanding
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
	on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c
	on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode
  left join omTrSalesDODetail d
	on d.CompanyCode = a.CompanyCode    
   and d.BranchCode = a.BranchCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
  left join CsCustomerVehicle e
	on e.CompanyCode = a.CompanyCode    
   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join omTrSalesDO f
	on f.CompanyCode = d.CompanyCode    
   and f.BranchCode = d.BranchCode
   and f.DONo = d.DONo
  left join omTrSalesBPK g
	on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode
   and g.DONo = f.DONo
  left join omTrSalesSO h
	on h.CompanyCode = g.CompanyCode    
   and h.BranchCode = g.BranchCode
   and h.SONo = g.SONo
  left join gnMstCustomer i
	on i.CompanyCode = h.CompanyCode
   and i.CustomerCode = h.LeasingCo
  left join HrEmployee j
	on j.CompanyCode = h.CompanyCode
   and j.EmployeeID = h.Salesman
  left join CsStnkExt k
	on k.CompanyCode = a.CompanyCode
   and k.CustomerCode = b.CustomerCode
   and k.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join svMstCustomerVehicle l
	on l.CompanyCode = a.CompanyCode
   and l.ChassisCode = a.ChassisCode
   and l.ChassisNo = a.ChassisNo
GO
CREATE VIEW [dbo].[SvGetInvoiceView]
AS
SELECT     dbo.svTrnInvoice.Remarks, dbo.svTrnInvoice.CompanyCode, dbo.svTrnInvoice.BranchCode, dbo.svTrnInvoice.ProductType, dbo.svTrnInvoice.InvoiceNo, 
                      dbo.svTrnInvoice.JobOrderNo, dbo.svTrnInvoice.PoliceRegNo, dbo.svTrnInvoice.ChassisCode, dbo.svTrnInvoice.ChassisNo, dbo.svTrnService.ColorCode, 
                      RTRIM(RTRIM(dbo.svTrnService.ColorCode) + CASE isnull(omMstRefference.RefferenceDesc2, '') 
                      WHEN '' THEN '' ELSE ' - ' END + ISNULL(dbo.omMstRefference.RefferenceDesc2, '')) AS ColorCodeDesc, dbo.svTrnInvoice.CustomerCode, 
                      dbo.gnMstCustomer.CustomerName, dbo.gnMstCustomer.Address1 AS CustAddr1, dbo.gnMstCustomer.Address2 AS CustAddr2, 
                      dbo.gnMstCustomer.Address3 AS CustAddr3, dbo.gnMstCustomer.Address4 AS CustAddr4, dbo.gnMstCustomer.CityCode, 
                      dbo.gnMstLookUpDtl.LookUpValueName AS CityName, dbo.svTrnInvoice.CustomerCodeBill, dbo.gnMstCustomer.CustomerName AS CustomerNameBill, 
                      dbo.gnMstCustomer.Address1 AS CustAddr1Bill, dbo.gnMstCustomer.Address2 AS CustAddr2Bill, dbo.gnMstCustomer.Address3 AS CustAddr3Bill, 
                      dbo.gnMstCustomer.Address4 AS CustAddr4Bill, dbo.gnMstCustomer.CityCode AS CityCodeBill, dbo.gnMstLookUpDtl.LookUpValueName AS CityNameBill, 
                      dbo.gnMstCustomer.PhoneNo, dbo.gnMstCustomer.FaxNo, dbo.gnMstCustomer.HPNo, dbo.svTrnInvoice.LaborDiscPct, dbo.svTrnInvoice.PartsDiscPct, 
                      dbo.svTrnInvoice.MaterialDiscPct, dbo.svTrnInvoice.JobType, dbo.svTrnService.ForemanID, dbo.svTrnService.MechanicID, dbo.svTrnService.ServiceStatus, 
                      dbo.svTrnInvoice.FPJNo, dbo.svMstCustomerVehicle.IsContractStatus AS IsContract, dbo.svMstCustomerVehicle.ContractNo, 
                      dbo.svMstContract.EndPeriod AS ContractEndPeriod, dbo.svMstContract.IsActive AS ContractStatus, 
                      CASE svMstCustomerVehicle.IsContractStatus WHEN 1 THEN (CASE svMstContract.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) 
                      ELSE '' END AS ContractStatusDesc, dbo.svMstCustomerVehicle.IsClubStatus AS IsClub, dbo.svMstCustomerVehicle.ClubCode, 
                      dbo.svMstCustomerVehicle.ClubDateFinish AS ClubEndPeriod, dbo.svMstClub.IsActive AS ClubStatus, 
                      CASE svMstCustomerVehicle.IsClubStatus WHEN 1 THEN (CASE svMstClub.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) ELSE '' END AS ClubStatusDesc, 
                      dbo.svMstRefferenceService.Description AS JobTypeDesc, dbo.svMstRefferenceService.Description AS ServiceStatusDesc, 
                      dbo.gnMstEmployee.EmployeeName AS ForemanName, dbo.gnMstEmployee.EmployeeName AS MechanicName, ISNULL(dbo.gnMstCustomerProfitCenter.TaxCode, '')
                       AS TaxCode, ISNULL(dbo.gnMstTax.TaxPct, 0) AS TaxPct
FROM         dbo.svTrnInvoice LEFT OUTER JOIN
                      dbo.svTrnService ON dbo.svTrnInvoice.CompanyCode = dbo.svTrnService.CompanyCode AND dbo.svTrnInvoice.BranchCode = dbo.svTrnService.BranchCode AND 
                      dbo.svTrnInvoice.ProductType = dbo.svTrnService.ProductType AND dbo.svTrnInvoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT OUTER JOIN
                      dbo.omMstRefference ON dbo.svTrnInvoice.CompanyCode = dbo.omMstRefference.CompanyCode AND dbo.omMstRefference.RefferenceType = 'COLO' AND 
                      dbo.svTrnService.ColorCode = dbo.omMstRefference.RefferenceCode LEFT OUTER JOIN
                      dbo.gnMstCustomer ON dbo.svTrnService.CompanyCode = dbo.gnMstCustomer.CompanyCode AND 
                      dbo.svTrnService.CustomerCode = dbo.gnMstCustomer.CustomerCode LEFT OUTER JOIN
                      dbo.gnMstLookUpDtl ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstLookUpDtl.CompanyCode AND dbo.gnMstLookUpDtl.CodeID = 'CITY' AND 
                      dbo.gnMstCustomer.CityCode = dbo.gnMstLookUpDtl.LookUpValue LEFT OUTER JOIN
                      dbo.gnMstCustomer AS gnMstCustomer_1 ON dbo.svTrnService.CompanyCode = gnMstCustomer_1.CompanyCode AND 
                      dbo.svTrnService.CustomerCodeBill = gnMstCustomer_1.CustomerCode LEFT OUTER JOIN
                      dbo.gnMstLookUpDtl AS gnMstLookUpDtl_1 ON dbo.svTrnInvoice.CompanyCode = gnMstLookUpDtl_1.CompanyCode AND gnMstLookUpDtl_1.CodeID = 'CITY' AND 
                      gnMstCustomer_1.CityCode = gnMstLookUpDtl_1.LookUpValue LEFT OUTER JOIN
                      dbo.svMstCustomerVehicle ON dbo.svTrnService.CompanyCode = dbo.svMstCustomerVehicle.CompanyCode AND 
                      dbo.svTrnService.ChassisCode = dbo.svMstCustomerVehicle.ChassisCode AND 
                      dbo.svTrnService.ChassisNo = dbo.svMstCustomerVehicle.ChassisNo LEFT OUTER JOIN
                      dbo.svMstContract ON dbo.svTrnInvoice.CompanyCode = dbo.svMstContract.CompanyCode AND 
                      dbo.svMstCustomerVehicle.ContractNo = dbo.svMstContract.ContractNo AND dbo.svMstCustomerVehicle.IsContractStatus = 1 LEFT OUTER JOIN
                      dbo.svMstClub ON dbo.svTrnInvoice.CompanyCode = dbo.svMstClub.CompanyCode AND 
                      dbo.svMstCustomerVehicle.ClubCode = dbo.svMstClub.ClubCode LEFT OUTER JOIN
                      dbo.svMstRefferenceService ON dbo.svTrnInvoice.CompanyCode = dbo.svMstRefferenceService.CompanyCode AND 
                      dbo.svTrnInvoice.ProductType = dbo.svMstRefferenceService.ProductType AND dbo.svTrnInvoice.JobType = dbo.svMstRefferenceService.RefferenceCode AND 
                      dbo.svMstRefferenceService.RefferenceType = 'JOBSTYPE' LEFT OUTER JOIN
                      dbo.svMstRefferenceService AS svMstRefferenceService_1 ON dbo.svTrnInvoice.CompanyCode = svMstRefferenceService_1.CompanyCode AND 
                      dbo.svTrnInvoice.ProductType = svMstRefferenceService_1.ProductType AND dbo.svTrnService.ServiceStatus = svMstRefferenceService_1.RefferenceCode AND 
                      svMstRefferenceService_1.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
                      dbo.gnMstEmployee ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstEmployee.CompanyCode AND 
                      dbo.svTrnInvoice.BranchCode = dbo.gnMstEmployee.BranchCode AND dbo.svTrnService.ForemanID = dbo.gnMstEmployee.EmployeeID LEFT OUTER JOIN
                      dbo.gnMstEmployee AS gnMstEmployee_1 ON dbo.svTrnInvoice.CompanyCode = gnMstEmployee_1.CompanyCode AND 
                      dbo.svTrnInvoice.BranchCode = gnMstEmployee_1.BranchCode AND dbo.svTrnService.MechanicID = gnMstEmployee_1.EmployeeID LEFT OUTER JOIN
                      dbo.gnMstCustomerProfitCenter ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstCustomerProfitCenter.CompanyCode AND 
                      dbo.svTrnInvoice.BranchCode = dbo.gnMstCustomerProfitCenter.BranchCode AND 
                      dbo.svTrnInvoice.CustomerCode = dbo.gnMstCustomerProfitCenter.CustomerCode AND dbo.gnMstCustomerProfitCenter.ProfitCenterCode = '200' LEFT OUTER JOIN
                      dbo.gnMstTax ON dbo.svTrnInvoice.CompanyCode = dbo.gnMstTax.CompanyCode AND dbo.gnMstCustomerProfitCenter.TaxCode = dbo.gnMstTax.TaxCode
GO
create view [dbo].[CsLkuFeedbackView]
as 

--select @CompanyCode = '6006406', @CustomerCode = '1000581', @Chassis = 'MHYGDN42VBJ352996'
select a.CompanyCode     
	 , a.BranchCode
	 , b.CustomerCode
	 , c.CustomerName
	 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
	 , a.EngineCode + convert(varchar, a.EngineNo) Engine
	 , a.SalesModelCode
	 , a.SalesModelYear
	 , a.ColourCode
	 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
	 , isnull(e.StnkDate, g.BPKDate) StnkDate
	 , g.BPKDate
	 , h.isLeasing as IsLeasing
	 , h.LeasingCo
	 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
	 , i.CustomerName as LeasingName
	 , h.Installment
	 , convert(varchar, isnull(h.Installment, 0)) + ' Month' as Tenor
     , left(c.Address1, 40) as Address
     , c.PhoneNo
     , h.Salesman
     , j.EmployeeName as SalesmanName
     , k.IsManual
     , case (isnull(k.Chassis, '')) when '' then '-' else 
       (case k.IsManual when 1 then 'Manual' else 'System' end)
        end as Feedback
     , k.FeedbackA
     , k.FeedbackB
     , k.FeedbackC
     , k.FeedbackD
     , case (isnull(k.Chassis, '')) when '' then 1 else 0 end as IsNew
     , l.PoliceRegNo
     , case isnull(k.Chassis, '') when '' then 'Y' else 'N' end OutStanding
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
	on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c
	on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode
  left join omTrSalesDODetail d
	on d.CompanyCode = a.CompanyCode    
   and d.BranchCode = a.BranchCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
  left join CsCustomerVehicle e
	on e.CompanyCode = a.CompanyCode    
   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join omTrSalesDO f
	on f.CompanyCode = d.CompanyCode    
   and f.BranchCode = d.BranchCode
   and f.DONo = d.DONo
  left join omTrSalesBPK g
	on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode
   and g.DONo = f.DONo
  left join omTrSalesSO h
	on h.CompanyCode = g.CompanyCode    
   and h.BranchCode = g.BranchCode
   and h.SONo = g.SONo
  left join gnMstCustomer i
	on i.CompanyCode = h.CompanyCode
   and i.CustomerCode = h.LeasingCo
  left join HrEmployee j
	on j.CompanyCode = h.CompanyCode
   and j.EmployeeID = h.Salesman
  left join CsCustFeedback k
	on k.CompanyCode = a.CompanyCode
   and k.CustomerCode = b.CustomerCode
   and k.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join svMstCustomerVehicle l
	on l.CompanyCode = a.CompanyCode
   and l.ChassisCode = a.ChassisCode
   and l.ChassisNo = a.ChassisNo
GO
CREATE view [dbo].[SvGetMekanik]  as    
  SELECT a.CompanyCode, a.BranchCode, a.EmployeeID, a.EmployeeName , a.PersonnelStatus IsAvailableStatus, /*CASE b.IsAvailable WHEN '1' THEN 'Hadir' ELSE 'Tidak Aktif' END AS IsAvailable,*/     
  CASE a.PersonnelStatus WHEN '1' THEN 'AKTIF' END as PersonnelStatus    
  FROM gnMstEmployee a  
  where 1=1   
  and a.PersonnelStatus = '1'    
  AND a.TitleCode in ('2','3','8','9')
GO
CREATE view [dbo].[SvGaransiView]

as 


select
a.CompanyCode
,a.ProductType
,a.BasicModel
,a.OperationNo
,a.Description
,a.Odometer
,a.TimePeriod
,a.TimeDim
,a.EffectiveDate
,b.LookUpValueName TimeDimDesc
,case a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status,
a.IsActive
from svMstWarranty a
left join gnMstLookupDtl b on b.CompanyCode=a.CompanyCode 
                          and b.CodeID='STWK'
                          and b.LookUpValue=a.TimeDim
GO
CREATE VIEW [dbo].[SvGetAllBranchFromSPKView]
AS
SELECT DISTINCT 
                         a.CompanyCode, a.ProductType, a.BranchCode, a.GenerateNo, a.GenerateDate, a.FromInvoiceNo, a.ToInvoiceNo, CASE isnull(a.FromInvoiceNo, '') 
                         WHEN '' THEN '' ELSE (rtrim(a.FromInvoiceNo) + ' s/d ' + rtrim(a.ToInvoiceNo)) END AS Invoice, a.FPJNo, CASE a.FPJDate WHEN ('19000101') THEN NULL 
                         ELSE a.FPJDate END AS FPJDate, a.FPJGovNo, a.SourceData, b.Description AS SourceDataDesc, a.TotalNoOfItem, a.TotalAmt, a.SenderDealerName, 
                         a.RefferenceNo, CASE a.RefferenceDate WHEN ('19000101') THEN NULL ELSE a.RefferenceDate END AS RefferenceDate, a.PostingFlag, 
                         c.Description AS PostingFlagDesc, a.SenderDealerCode, d.CustomerName
FROM            dbo.svTrnPdiFsc AS a WITH (nolock, nowait) LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS b WITH (nolock, nowait) ON b.CompanyCode = a.CompanyCode AND b.ProductType = a.ProductType AND 
                         b.RefferenceCode = a.SourceData AND b.RefferenceType = 'SORCDATA' LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS c WITH (nolock, nowait) ON c.CompanyCode = a.CompanyCode AND c.ProductType = a.ProductType AND 
                         c.RefferenceCode = a.PostingFlag AND c.RefferenceType = 'POSTFLAG' LEFT OUTER JOIN
                         dbo.gnMstCustomer AS d ON d.CompanyCode = a.CompanyCode AND d.CustomerCode = a.SenderDealerCode
WHERE        (1 = 1) AND (a.FromInvoiceNo LIKE 'SPK%') OR
                         (1 = 1) AND (a.ToInvoiceNo LIKE 'SPK%')
GO
CREATE view [dbo].[SvGetCustomerDetailView]

as 


select a.CompanyCode ,a.CustomerCode, a.CustomerName, 
(a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4) as CustomerAddress
,case a.Status when '1' then 'Aktif' else 'Tidak Aktif' end as Status
from gnMstCustomer a with(nolock, nowait)
where  a.Status = '1'
GO
CREATE view [dbo].[SvFmView]

as 

select a.CompanyCode, a.BranchCode, a.EmployeeID, a.EmployeeName  from GnMstEmployee a
where a.TitleCode IN ('8')
   AND PersonnelStatus = '1'
GO
CREATE VIEW [dbo].[SvGetTableChassis]
AS
select CompanyCode, ChassisCode, cast(a.ChassisNo as varchar) ChassisNo, SeqNo, PreviousData, ChangeCode, LastUpdateBy, LastUpdateDate 
from svMstCustomerVehicleHist a
/*where 
a.companycode = '6006406' and
a.chassiscode = 'JSAJTEA4VC4' and
a.chassisno = '200049'*/
GO
CREATE view [dbo].[SvJobView]

as 

SELECT CompanyCode, ProductType, RefferenceType, RefferenceCode as JobType, Description as JobDescription,
DescriptionEng, CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      svMstRefferenceService with (Nolock, Nowait)
WHERE    RefferenceType = 'JOBSTYPE'
GO
create view [dbo].[HrEmployeeExperienceView]
as

select
	a.CompanyCode,
	a.EmployeeID,
	a.NameOfCompany,
	a.JoinDate,
	a.ResignDate,
	a.ReasonOfResign,
	a.LeaderName,
	a.LeaderPhone,
	a.LeaderHP
from
	HrEmployeeExperience a
GO
CREATE view [dbo].[SvJTView]

as 


select CompanyCode, ProductType, BasicModel, OperationNo
,Description
,TechnicalModelCode
,case IsSubCon when 1 then 'Ya' else 'Tidak' end as IsSubCon
,case IsCampaign when 1 then 'Ya' else 'Tidak' end as IsCampaign
,case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
,OperationHour
,ClaimHour
from svMstTask
GO
CREATE view [dbo].[HrEmployeeShiftView]
as

select a.CompanyCode
     , b.Department
     , c.OrgName as DepartmentName
     , b.Position
     , b.Grade
     , b.Rank
     , d.PosName as PositionName
     , a.EmployeeID
     , b.EmployeeName
     , a.AttdDate
     , a.ShiftCode
     , e.ShiftName as Shift
     , a.ClockInTime
     , a.ClockOutTime
     , a.OnDutyTime
     , a.OffDutyTime
     , a.OnRestTime
     , a.OffRestTime
     , a.CalcOvertime
     , a.ApprOvertime
  from HrEmployeeShift a
  left join HrEmployee b on b.CompanyCode = a.CompanyCode and b.EmployeeID = a.EmployeeID
  left join gnMstOrgGroup c on c.CompanyCode = b.CompanyCode and c.OrgCode = b.Department and OrgGroupCode = 'DEPT'
  left join gnMstPosition d on d.CompanyCode = b.CompanyCode and d.DeptCode = b.Department and d.PosCode = b.Position
  left join HrShift e on e.CompanyCode = a.CompanyCode and e.ShiftCode = a.ShiftCode
GO
CREATE VIEW [dbo].[SvHistVehicleServiceView]
AS
SELECT DISTINCT 
                         a.CompanyCode, e.BranchCode, a.PoliceRegNo, a.CustomerCode, b.CustomerName, RTRIM(RTRIM(a.CustomerCode) + ' - ' + RTRIM(b.CustomerName)) 
                         AS CustomerDesc, RTRIM(RTRIM(b.Address1) + ' ' + RTRIM(b.Address2) + ' ' + RTRIM(b.Address3) + ' ' + RTRIM(b.Address4)) AS CustomerAddr, b.Address1, 
                         b.Address2, b.Address3 + ' ' + b.Address4 AS Address3, a.DealerCode, c.CustomerName AS DealerName, a.CustomerCode + ' - ' + c.CustomerName AS DealerDesc, 
                         a.ChassisCode, CAST(a.ChassisNo AS varchar) AS ChassisNo, a.EngineCode, CAST(a.EngineNo AS varchar) AS EngineNo, a.ServiceBookNo, a.ClubCode, 
                         a.ColourCode, CASE a.FakturPolisiDate WHEN ('19000101') THEN NULL ELSE a.FakturPolisiDate END AS FakturPolisiDate, a.ClubNo, 
                         CASE a.ClubDateStart WHEN ('19000101') THEN NULL ELSE a.ClubDateStart END AS ClubDateStart, CASE a.ClubDateFinish WHEN ('19000101') THEN NULL 
                         ELSE a.ClubDateFinish END AS ClubDateFinish, CASE a.ClubSince WHEN ('19000101') THEN NULL ELSE a.ClubSince END AS ClubSince, 
                         (CASE a.IsClubStatus WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) AS IsClubStatusDesc, a.IsClubStatus, 
                         (CASE a.IsContractStatus WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) AS IsContractStatusDesc, a.IsActive, 
                         (CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) AS IsActiveDesc, a.BasicModel, a.TransmissionType, CASE a.LastServiceDate WHEN ('19000101') 
                         THEN NULL ELSE a.LastServiceDate END AS LastServiceDate, a.LastJobType, a.ContractNo, a.ContactName, b.CityCode, f.LookUpValueName AS CityName
FROM            dbo.svMstCustomerVehicle AS a LEFT OUTER JOIN
                         dbo.gnMstCustomer AS b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstCustomer AS c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.DealerCode LEFT OUTER JOIN
                         dbo.svMstJob AS d ON d.CompanyCode = a.CompanyCode AND d.BasicModel = a.BasicModel INNER JOIN
                         dbo.gnMstCustomerProfitCenter AS e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstLookUpDtl AS f ON f.CompanyCode = a.CompanyCode AND f.CodeID = 'CITY' AND f.LookUpValue = b.CityCode
WHERE        (a.IsActive = 1) AND (e.ProfitCenterCode = 200)
GO
CREATE view [dbo].[SvGroupJobView]

as 

SELECT CompanyCode, ProductType, RefferenceType, RefferenceCode AS GroupJobType, Description AS GroupJobDescription,
DescriptionEng, CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive
FROM      svMstRefferenceService with (Nolock, Nowait)
WHERE     RefferenceType = 'GRPJOBTY'
GO
CREATE view [dbo].[SvJobTypeView]

as 

select a.CompanyCode
     , a.BasicModel
     , a.JobType
     , b.Description
  from SvMstJob a
  left join svMstRefferenceService b
    on b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.RefferenceCode = a.JobType
   and b.RefferenceType = 'JOBSTYPE'
GO
CREATE VIEW [dbo].[SvJobOrderView]
AS
SELECT a.CompanyCode, a.BranchCode, a.ProductType, a.InvoiceNo,
     a.ServiceNo, a.JobOrderNo, a.JobOrderDate, 
     a.EstimationNo, a.EstimationDate, a.BookingNo, 
     a.BookingDate, a.PoliceRegNo, a.ServiceBookNo, 
     a.BasicModel, a.TransmissionType, a.ChassisCode, 
     a.ChassisNo, 
     a.ChassisCode + ' ' + CAST(a.ChassisNo AS varchar) 
     AS Chassis, a.EngineCode, a.EngineNo, 
     a.EngineCode + ' ' + CAST(a.EngineNo AS varchar) 
     AS Engine, a.ColorCode,
         (SELECT RefferenceDesc1
       FROM dbo.omMstRefference AS g
       WHERE (CompanyCode = a.CompanyCode) AND 
             (RefferenceType = 'COLO') AND 
             (RefferenceCode = a.ColorCode)) 
     AS ColorName, a.CustomerCode, 
     a.CustomerCode + ' - ' + b.CustomerName AS Customer,
      b.CustomerName, 
     b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4
      AS CustomerAddress, 
     a.CustomerCodeBill + ' - ' + c.CustomerName AS CustomerBill,
      a.CustomerCodeBill, 
     c.CustomerName AS CustomerNameBill, 
     c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4
      AS CustomerBillAddress, c.NPWPNo, c.PhoneNo, 
     c.HPNo, a.Odometer, a.JobType, a.ForemanID, 
     a.MechanicID, a.ServiceStatus, a.ServiceType, 
     CASE WHEN a.ServiceStatus IN (0, 1, 2, 3, 4, 5) 
     THEN 'Outstanding Task' ELSE 'Finish Task' END AS StatusTask,
      CASE WHEN a.ServiceStatus = '4' THEN CASE WHEN '4W'
      = '4W' THEN d .Description ELSE d .LockingBy END ELSE
      d .Description END AS ServiceStatusDesc, 
     a.ServiceRequestDesc, 
     e.EmployeeName AS ForemanName, 
     f.EmployeeName AS MechanicName,
     a.TotalSrvAmount
FROM dbo.svTrnService AS a LEFT OUTER JOIN
     dbo.gnMstCustomer AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.CustomerCode = a.CustomerCode LEFT OUTER JOIN
     dbo.gnMstCustomer AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.CustomerCode = a.CustomerCodeBill LEFT OUTER JOIN
     dbo.svMstRefferenceService AS d ON 
     d.CompanyCode = a.CompanyCode AND 
     d.ProductType = a.ProductType AND 
     d.RefferenceCode = a.ServiceStatus AND 
     d.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
     dbo.gnMstEmployee AS e ON 
     e.CompanyCode = a.CompanyCode AND 
     e.BranchCode = a.BranchCode AND 
     e.EmployeeID = a.ForemanID LEFT OUTER JOIN
     dbo.gnMstEmployee AS f ON 
     f.CompanyCode = a.CompanyCode AND 
     f.BranchCode = a.BranchCode AND 
     f.EmployeeID = a.MechanicID
GO
CREATE view [dbo].[SvTrnDefCode]

as 

select CompanyCode, ProductType, RefferenceCode as DefCod
, Description
, DescriptionEng
, IsActive, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from	svMstRefferenceService with(nolock, nowait)
where	RefferenceType = 'DEFECTCD'
/*and CompanyCode = '6006406'
and ProductType = '4W'
order by RefferenceCode
*/
GO
create view [dbo].[CsLkuBpkbViewSource]
as 

select a.CompanyCode     
	 , a.BranchCode
	 , b.CustomerCode
	 , c.CustomerName
	 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
	 , a.EngineCode + convert(varchar, a.EngineNo) Engine
	 , a.SalesModelCode
	 , a.SalesModelYear
	 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
	 , isnull(e.StnkDate, g.BPKDate) StnkDate
	 , g.BPKDate
	 , isnull(h.isLeasing, 0) as IsLeasing
	 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
	 , h.LeasingCo
	 , i.CustomerName as LeasingName
	 , h.Installment
	 , PoliceRegNo = isnull(l.PoliceRegNo, j.PoliceRegNo)
     --, case isnull(k.Chassis, '') when '' then 'Y' else 'N' end OutStanding
	 , OutStanding = (
			case
				when isnull(k.Chassis, '') = '' then 'Y'
				when isnull(k.BpkbReadyDate, '') = '' then 'Y'
				when isnull(isnull(k.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=k.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)), '') = '' then 'Y'
				when isnull(isnull(k.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=k.CustomerCode order by x.RetrievalEstimationDate desc)), '') != '' and isnull(k.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=k.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)) < getdate() then 'Y'
				when isnull(k.BpkbReadyDate, '') != '' and isnull(isnull(k.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=k.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null)order by x.RetrievalEstimationDate desc)), '') = '' then 'Y'
				when (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=k.CustomerCode order by x.RetrievalEstimationDate desc) > getdate() then 'N'
				else 'N'
			end
	   )
	 , DelayedRetrievalDate = (
			select top 1
			       x.RetrievalEstimationDate
			  from CsBpkbRetrievalInformation x
			 where x.CompanyCode = b.CompanyCode
			   and x.CustomerCode = b.CustomerCode
			 order by x.RetrievalEstimationDate desc
	   )
	 , DelayedRetrievalNote = (
			select top 1
			       x.Notes
			  from CsBpkbRetrievalInformation x
			 where x.CompanyCode = b.CompanyCode
			   and x.CustomerCode = b.CustomerCode
			 order by x.RetrievalEstimationDate desc
	   )
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
	on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c
	on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode
  left join omTrSalesDODetail d
	on d.CompanyCode = a.CompanyCode    
   and d.BranchCode = a.BranchCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
  left join CsCustomerVehicle e
	on e.CompanyCode = a.CompanyCode    
   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join omTrSalesDO f
	on f.CompanyCode = d.CompanyCode    
   and f.BranchCode = d.BranchCode
   and f.DONo = d.DONo
  left join omTrSalesBPK g
	on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode
   and g.DONo = f.DONo
  left join omTrSalesSO h
	on h.CompanyCode = g.CompanyCode    
   and h.BranchCode = g.BranchCode
   and h.SONo = g.SONo
  left join gnMstCustomer i
	on i.CompanyCode = h.CompanyCode
   and i.CustomerCode = h.LeasingCo
  left join svMstCustomerVehicle j
	on j.CompanyCode = a.CompanyCode
   and j.ChassisCode = a.ChassisCode
   and j.ChassisNo = a.ChassisNo
  left join CsCustBpkb k
	on k.CompanyCode = a.CompanyCode
   and k.CustomerCode = b.CustomerCode
   and k.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join svMstCustomerVehicle l
	on l.CompanyCode = a.CompanyCode
   and l.ChassisCode = a.ChassisCode
   and l.ChassisNo = a.ChassisNo
 where 1 = 1
   and isnull(a.IsReturn, 0) = 0
   and c.CustomerType = 'I'
GO
create view [dbo].[CsLkuBirthdayViewSource]
as 
select distinct a.CompanyCode
     , BranchCode = (
			select top 1
			       x.BranchCode
			  from OmTrSalesSo x
			 where x.CompanyCode=a.CompanyCode
			   and x.CustomerCode=a.CustomerCode
	   )
	 , a.CustomerCode
	 , CustomerAddress = convert(varchar(1000), rtrim(a.Address1) + ' ' + rtrim(a.Address2) + ' ' + rtrim(a.Address3) + ' ' + rtrim(a.Address4))
	 , datepart(year, getdate()) as PeriodOfYear
	 , convert(varchar(1000), b.AdditionalInquiries) as AdditionalInquiries
	 , b.Status

	 , a.CustomerName
	 , CustomerTelephone = a.PhoneNo
	 , CustomerBirthDate = a.BirthDate
	 , CustomerGiftSentDate = b.SentGiftDate
	 , CustomerGiftReceivedDate = b.ReceivedGiftDate
	 , CustomerTypeOfGift = b.TypeOfGift
	 , CustomerComment = convert(varchar(1000), b.Comment)


	  , SpouseName = b.SpouseName				
	  , SpouseTelephone = b.SpouseTelephone
	  , SpouseRelation = b.SpouseRelation
	  , SpouseBirthDate = b.SpouseBirthday
	  , SpouseGiftSentDate = b.SpouseGiftSentDate
	  , SpouseGiftReceivedDate = b.SpouseGiftReceivedDate
	  , SpouseTypeOfGift = b.SpouseTypeOfGift
	  , SpouseComment = b.SpouseComment
		 

	 , ChildName1 = b.ChildName1				
	 , ChildTelephone1 = b.ChildTelephone1
	 , ChildRelation1 = b.ChildRelation1
	 , ChildBirthDate1 = b.ChildBirthday1
	 , ChildGiftSentDate1 = b.ChildGiftSentDate1
	 , ChildGiftReceivedDate1 = b.ChildGiftReceivedDate1
	 , ChildTypeOfGift1 = b.ChildTypeOfGift1
	 , ChildComment1 = b.ChildComment1

	 , ChildName2 = b.ChildName2			
	 , ChildTelephone2 = b.ChildTelephone2
	 , ChildRelation2 = b.ChildRelation2
	 , ChildBirthDate2 = b.ChildBirthday2
	 , ChildGiftSentDate2 = b.ChildGiftSentDate2
	 , ChildGiftReceivedDate2 = b.ChildGiftReceivedDate2
	 , ChildTypeOfGift2 = b.ChildTypeOfGift2
	 , ChildComment2 = b.ChildComment2

	 , ChildName3 = b.ChildName3				
	 , ChildTelephone3 = b.ChildTelephone3
	 , ChildRelation3 = b.ChildRelation3
	 , ChildBirthDate3 = b.ChildBirthday3
	 , ChildGiftSentDate3 = b.ChildGiftSentDate3
	 , ChildGiftReceivedDate3 = b.ChildGiftReceivedDate3
	 , ChildTypeOfGift3 = b.ChildTypeOfGift3
	 , ChildComment3 = b.ChildComment3

	 , NumberOfChildren = (
     	  select count(xx.CustomerCode)
     		from CsCustRelation xx
     	   where xx.CompanyCode=a.CompanyCode
     		 and xx.CustomerCode=a.CustomerCode
     		 and xx.RelationType like '%CHILD%'
     )
     , NumberOfSpouse = (
     	  select count(xx.CustomerCode)
     		from CsCustRelation xx
     	   where xx.CompanyCode=a.CompanyCode
     		 and xx.CustomerCode=a.CustomerCode
     		 and xx.RelationType = 'SPOUSE'
     )
	 , Outstanding = (
			 case	 
					when isnull((  select top 1
					               x.CustomerCode
						      from CsCustBirthDay x
							 where x.CompanyCode=a.CompanyCode
							   and x.CustomerCode=a.CustomerCode
				    ), '') = '' then 'Y'
					else 'N'
			 end	 
	   )
	 --, OutStanding = ''
  from gnMstCustomer a
  left join CsCustBirthDay b
    on b.CompanyCode=a.CompanyCode
   and a.CustomerCode=b.CustomerCode
  left join CsCustRelation c			/* Spouse */
	on c.CompanyCode=a.CompanyCode
   and c.CustomerCode=a.CustomerCode
   and c.RelationType='SPOUSE' 
  left join CsCustRelation d			/* Child 1s */
	on d.CompanyCode=a.CompanyCode
   and d.CustomerCode=a.CustomerCode
   and d.RelationType='CHILD_1' 
   left join CsCustRelation e			/* Child 2 */
	on e.CompanyCode=a.CompanyCode
   and e.CustomerCode=a.CustomerCode
   and e.RelationType='CHILD_2' 
  left join CsCustRelation f			/* Child 3 */
	on f.CompanyCode=a.CompanyCode
   and f.CustomerCode=a.CustomerCode
   and f.RelationType='CHILD_3' 
 where a.CustomerType = 'I'
 --where 1 = 1
   --and (
		 --  datepart(month, a.BirthDate) = 
			--   (
			--		case 
			--			when datepart(month, getdate()) = 1  then 12
			--			else datepart(month, getdate()) - 1
			--		end
			--   ) 
			--or datepart(month, a.BirthDate) = datepart(month, getdate())
	  -- )
   --and ( right( replicate('0', 2) + datepart(month, a.BirthDate), 2) + right( replicate('0', 2) + datepart(day, a.BirthDate), 2)  ) <= ( right( replicate('0', 2) + datepart(month, getdate()), 2) + right( replicate('0', 2) + datepart(day, getdate()), 2)  )
GO
CREATE VIEW [dbo].[GnMstSupplierView]
AS
SELECT a.CompanyCode, a.SupplierCode, b.BranchCode, 
     b.ProfitCenterCode, a.SupplierName, 
     ISNULL(a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 +
      ' ' + a.Address4, '') AS Alamat, ISNULL(a.Address1, '') 
     AS Address1, ISNULL(a.Address2, '') AS Address2, 
     ISNULL(a.Address3, '') AS Address3, 
     ISNULL(a.Address4, '') AS Address4, 
     (CASE WHEN (a.PhoneNo <> '' AND a.HPNo <> '') 
     THEN a.PhoneNo + ' / ' + a.HPNo WHEN (a.PhoneNo <> ''
      AND a.HPNo = '') 
     THEN a.PhoneNo WHEN (a.PhoneNo = '' AND 
     a.HPNo <> '') THEN a.HPNo ELSE '' END) AS Phone, 
     b.DiscPct, 
     (CASE a.Status WHEN 0 THEN 'Tidak Aktif' ELSE 'Aktif' END)
      AS Status,
         (SELECT LookUpValueName
       FROM dbo.gnMstLookUpDtl AS d
       WHERE (CodeID = 'PFCN') AND 
             (LookUpValue = b.ProfitCenterCode)) 
     AS ProfitCenterName,
         (SELECT ParaValue
       FROM dbo.gnMstLookUpDtl AS e
       WHERE (CodeID = 'TOPC') AND 
             (LookUpValue = b.TOPCode)) AS TOPDays, 
     a.CityCode, ISNULL
         ((SELECT LookUpValueName
        FROM dbo.gnMstLookUpDtl AS f
        WHERE (CodeID = 'CITY') AND 
             (LookUpValue = a.CityCode)), '') 
     AS CityName
FROM dbo.gnMstSupplier AS a INNER JOIN
     dbo.gnMstSupplierProfitCenter AS b ON 
     a.CompanyCode = b.CompanyCode AND 
     a.SupplierCode = b.SupplierCode
GO
CREATE VIEW [dbo].[SvTrnClaimView]
AS
SELECT        a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateDate, a.FromInvoiceNo, a.ToInvoiceNo, CASE isnull(a.FromInvoiceNo, '') 
                         WHEN '' THEN '' ELSE (rtrim(a.FromInvoiceNo) + ' s/d ' + rtrim(a.ToInvoiceNo)) END AS Invoice, a.FPJNo, CASE a.FPJDate WHEN ('19000101') THEN NULL 
                         ELSE a.FPJDate END AS FPJDate, a.FPJGovNo, a.SourceData, b.Description AS SourceDataDesc, a.TotalNoOfItem, a.TotalClaimAmt, a.SenderDealerName, 
                         a.RefferenceNo, CASE a.RefferenceDate WHEN ('19000101') THEN NULL ELSE a.RefferenceDate END AS RefferenceDate, a.PostingFlag, 
                         c.Description AS PostingFlagDesc, a.SenderDealerCode, d.CustomerName, ISNULL(a.IsSparepartClaim, 0) AS IsSparepartClaim
FROM            dbo.svTrnClaim AS a WITH (nolock, nowait) LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS b WITH (nolock, nowait) ON b.CompanyCode = a.CompanyCode AND b.ProductType = a.ProductType AND 
                         b.RefferenceCode = a.SourceData AND b.RefferenceType = 'SORCDATA' LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS c WITH (nolock, nowait) ON c.CompanyCode = a.CompanyCode AND c.ProductType = a.ProductType AND 
                         c.RefferenceCode = a.PostingFlag AND c.RefferenceType = 'POSTFLAG' LEFT OUTER JOIN
                         dbo.gnMstCustomer AS d ON d.CompanyCode = a.CompanyCode AND d.CustomerCode = a.SenderDealerCode
WHERE        (1 = 1)
GO
create view [dbo].[CsLkuTDayCallViewSource]
as 

select a.CompanyCode     
	 , a.BranchCode
	 , b.CustomerCode
	 , c.CustomerName
	 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
	 , a.EngineCode + convert(varchar, a.EngineNo) Engine
	 , a.SalesModelCode
	 , a.SalesModelYear
	 , e.DODate
	 , i.BPKDate
	 , PoliceRegNo = isnull(j.PoliceRegNo, f.PoliceRegNo)
	 , case isnull(h.Chassis, '') when '' then 'Y' else 'N' end OutStanding
     , c.BirthDate
     , g.AddPhone1
     , g.AddPhone2
     , g.ReligionCode
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
	on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c
	on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode
  left join omTrSalesDODetail d
	on d.CompanyCode = a.CompanyCode    
   and d.BranchCode = a.BranchCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
  left join omTrSalesDO e
	on e.CompanyCode = d.CompanyCode    
   and e.BranchCode = d.BranchCode
   and e.DONo = d.DONo
  left join svMstCustomerVehicle f
	on f.CompanyCode = a.CompanyCode    
   and f.ChassisCode = a.ChassisCode
   and f.ChassisNo = a.ChassisNo
  left join CsCustData g
    on g.CompanyCode = c.CompanyCode    
   and g.CustomerCode = c.CustomerCode
  left join CsTDayCall h
	on h.CompanyCode = a.CompanyCode    
   and h.CustomerCode = b.CustomerCode
   and h.Chassis = (a.ChassisCode + convert(varchar, a.ChassisNo))
  left join omTrSalesBPK i
	on i.CompanyCode = a.CompanyCode    
   and i.BranchCode = a.BranchCode
   and i.BPKNo = a.BPKNo
  left join svMstCustomerVehicle j
	on j.CompanyCode = a.CompanyCode    
   and j.ChassisCode = a.ChassisCode
   and j.ChassisNo = a.ChassisNo
 where c.CustomerType = 'I'
GO
CREATE view [dbo].[SvTrnComCode]

as 


select CompanyCode, ProductType, RefferenceCode as ComCode
, Description
, DescriptionEng
, IsActive, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from	svMstRefferenceService with(nolock, nowait)
where	RefferenceType = 'COMPLNCD'
/*and CompanyCode = '6006406'
and ProductType = '4W'
order by RefferenceCode
*/
GO
create view [dbo].[VW_ROLEMENUPERMISSION]
AS
select b.MenuCaption, b.MenuHeader, b.MenuLevel, b.MenuIndex,   a.*
from SysRoleMenuAccess a
inner join vw_treemenus b on (a.menuid = b.menuid)
GO
CREATE VIEW [dbo].[SvTrnMaintainSPKView]
AS
SELECT DISTINCT 
                         dbo.svTrnService.CompanyCode, dbo.svTrnService.BranchCode, dbo.svTrnService.ServiceNo, dbo.svTrnService.JobOrderNo, dbo.svTrnService.JobOrderDate, 
                         dbo.svTrnService.PoliceRegNo, dbo.svTrnService.ServiceBookNo, dbo.svTrnService.BasicModel, dbo.svTrnService.TransmissionType, 
                         dbo.svTrnService.ChassisCode, dbo.svTrnService.ChassisNo, dbo.svTrnService.EngineCode, dbo.svTrnService.EngineNo, dbo.svTrnService.ColorCode, 
                         dbo.svTrnService.CustomerCode, dbo.gnMstCustomer.CustomerName, dbo.svTrnService.CustomerCodeBill, custBill.CustomerName AS CustomerNameBill, 
                         dbo.svTrnService.Odometer, dbo.svTrnService.JobType, dbo.svTrnService.ServiceStatus, reffService.Description AS ServiceName, dbo.svTrnService.ForemanID, 
                         employee.EmployeeName AS ForemanName
FROM            dbo.svTrnService WITH (NOLOCK, NOWAIT) LEFT OUTER JOIN
                         dbo.gnMstCustomer ON dbo.gnMstCustomer.CompanyCode = dbo.svTrnService.CompanyCode AND 
                         dbo.gnMstCustomer.CustomerCode = dbo.svTrnService.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstCustomer AS custBill ON custBill.CompanyCode = dbo.svTrnService.CompanyCode AND 
                         custBill.CustomerCode = dbo.svTrnService.CustomerCodeBill LEFT OUTER JOIN
                         dbo.gnMstEmployee AS employee ON employee.CompanyCode = dbo.svTrnService.CompanyCode AND employee.BranchCode = dbo.svTrnService.BranchCode AND 
                         employee.EmployeeID = dbo.svTrnService.ForemanID LEFT OUTER JOIN
                         dbo.svTrnSrvItem AS srvItem ON srvItem.CompanyCode = dbo.svTrnService.CompanyCode AND srvItem.BranchCode = dbo.svTrnService.BranchCode AND 
                         srvItem.ProductType = dbo.svTrnService.ProductType AND srvItem.ServiceNo = dbo.svTrnService.ServiceNo LEFT OUTER JOIN
                         dbo.svTrnSrvTask AS srvTask ON srvTask.CompanyCode = dbo.svTrnService.CompanyCode AND srvTask.BranchCode = dbo.svTrnService.BranchCode AND 
                         srvTask.ProductType = dbo.svTrnService.ProductType AND srvTask.ServiceNo = dbo.svTrnService.ServiceNo LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS reffService ON reffService.CompanyCode = dbo.svTrnService.CompanyCode AND 
                         reffService.ProductType = dbo.svTrnService.ProductType AND reffService.RefferenceCode = dbo.svTrnService.ServiceStatus AND 
                         reffService.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
                         dbo.svTrnInvoice AS invoice ON invoice.CompanyCode = dbo.svTrnService.CompanyCode AND invoice.BranchCode = dbo.svTrnService.BranchCode AND 
                         invoice.ProductType = dbo.svTrnService.ProductType AND invoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT OUTER JOIN
                         dbo.svTrnSrvVOR AS VOR ON VOR.CompanyCode = dbo.svTrnService.CompanyCode AND VOR.BranchCode = dbo.svTrnService.BranchCode AND 
                         VOR.ServiceNo = dbo.svTrnService.ServiceNo
WHERE        (dbo.svTrnService.ServiceType = 2) AND (dbo.svTrnService.ServiceStatus IN ('0', '1', '2', '3', '4', '5'))
GO
CREATE view [dbo].[SvEventView]

as 

select CompanyCode
,EventNo
,EventDate
,BasicModel
,JobType
,EventStartDate
,EventEndDate
,LaborDiscPct
,PartsDiscPct
,MaterialDiscPct
,TotalAmount
,Description
,case isActive when 1 then 'Aktif' else 'Tidak Aktif' end Status
,IsActive
from svMstEvent
GO
CREATE view [dbo].[CsCustomerBuyView]    
    
as    
select a.CompanyCode     
     , b.CustomerCode     
     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as Chassis     
     , (a.EngineCode + convert(varchar, a.EngineNo)) as Engine     
     , DeliveryDate = isnull((    
		  select top 1 y.DODate    
			from omTrSalesDODetail x    
			left join omTrSalesDO y    
			  on y.CompanyCode = x.CompanyCode    
			 and y.BranchCode = x.BranchCode    
			 and y.DONo = x.DONo    
		   where x.CompanyCode = a.CompanyCode    
			 and x.BranchCode = a.BranchCode    
			 and x.ChassisCode = a.ChassisCode    
			 and x.ChassisNo = a.ChassisNo     
       ), null)    
     , IsDeliveredA = convert(bit, 0)    
     , IsDeliveredB = convert(bit, 0)     
     , IsDeliveredC = convert(bit, 0)     
     , IsDeliveredD = convert(bit, 0)    
     , IsDeliveredE = convert(bit, 0)     
     , Comment = ''    
     , Additional = ''    
     , Status = 0    
     , e.SalesModelCode as CarType    
     , e.ColourCode as Color    
     , d.PoliceRegNo     
     , f.Salesman as SalesmanCode     
     , g.EmployeeName as SalesmanName    
     , e.BranchCode    
     , c.CustomerName    
     , left(c.Address1, 40) as Address    
     , c.PhoneNo    
     , '' as StatusInfo    
     , c.BirthDate
     , h.AddPhone1
     , h.AddPhone2
     , h.ReligionCode
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
    on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c    
    on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode    
  left join svMstCustomerVehicle d    
    on d.CompanyCode = a.CompanyCode    
   and d.ChassisCode = a.ChassisCode    
   and d.ChassisNo = a.ChassisNo    
  left join omTrSalesSOVin e    
    on e.CompanyCode = a.CompanyCode    
   and e.ChassisCode = a.ChassisCode    
   and e.ChassisNo = a.ChassisNo    
  left join omTrSalesSO f    
    on f.CompanyCode = e.CompanyCode    
   and f.BranchCode = e.BranchCode    
   and f.SONo = e.SONo    
  left join gnMstEmployee g    
    on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode    
   and g.EmployeeID = f.Salesman    
  left join CsCustData h
    on h.CompanyCode = c.CompanyCode    
   and h.CustomerCode = c.CustomerCode
 where 1 = 1
   and exists ( 
select top 1 y.DODate    
  from omTrSalesDODetail x    
  left join omTrSalesDO y    
    on y.CompanyCode = x.CompanyCode    
   and y.BranchCode = x.BranchCode    
   and y.DONo = x.DONo    
 where x.CompanyCode = a.CompanyCode    
   and x.BranchCode = a.BranchCode    
   and x.ChassisCode = a.ChassisCode    
   and x.ChassisNo = a.ChassisNo  
   and y.DODate is not null
 ) 
   and not exists (    
select 1 from CsTDayCall    
 where CompanyCode = a.CompanyCode    
   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)       
 )
GO
CREATE VIEW [dbo].[SvEventBM]
AS

select distinct a.CompanyCode
,a.BasicModel
,a.TechnicalModelCode
from omMstModel a
where a.status = 1
GO
CREATE view [dbo].[CsCustHolidayView]

as 

select a.CompanyCode
     , b.CompanyName
     , a.CustomerCode
     , a.PeriodYear
     , a.GiftSeq
     , a.ReligionCode
     , a.HolidayCode
     , d.HolidayDesc
     , a.IsGiftCard
     , a.IsGiftLetter
     , a.IsGiftSms
     , a.IsGiftSouvenir
     , a.SouvenirSent
     , a.SouvenirReceived
     , a.Comment
     , a.Additional
     , a.Status
     , (case a.Status when 0 then 'In Progress' else 'Finish' end) as StatusInfo
     , c.CustomerName
     , left(c.Address1, 40) as Address
     , c.PhoneNo
     , c.BirthDate
  from CsCustHoliday a
  left join gnMstOrganizationHdr b
    on b.CompanyCode = a.CompanyCode
  left join gnMstCustomer c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
  left join CsMstHoliday d
    on d.CompanyCode = a.CompanyCode
   and d.HolidayYear = a.PeriodYear
   and d.HolidayCode = a.HolidayCode
GO
CREATE view [dbo].[SvTrnOpNo]

as 

select a.CompanyCode, a.BranchCode, a.ServiceNo, a.OperationNo, a.OperationHour, c.Description
  from svTrnSrvTask a
  left join svTrnService b 
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.ProductType = a.ProductType
   and b.ServiceNo = a.ServiceNo
  left join svMstTask c 
    on c.CompanyCode = a.CompanyCode
   and c.ProductType = a.ProductType
   and c.BasicModel = b.BasicModel
   and c.JobType = b.JobType
   and c.OperationNo = a.OperationNo
 where 1 = 1
   /*and a.CompanyCode = '6006406'
   and a.BranchCode = '6006401'
   and a.ServiceNo = '29061'*/
   and a.BillType = 'W'
GO
CREATE VIEW [dbo].[KaroseriBrowseView]
AS
SELECT        a.CompanyCode, a.BranchCode, a.SupplierCode, a.SalesModelCode, a.SalesModelCodeNew, a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.Total, a.Remark, 
                         a.Status, a.CreatedBy, a.CreatedDate, a.LastUpdateBy, a.LastUpdateDate, a.isLocked, a.LockingBy, a.LockingDate, b.SupplierName, c.SalesModelDesc, 
                         d.SalesModelDesc AS SalesModelDescNew
FROM            dbo.omMstKaroseri AS a INNER JOIN
                         dbo.gnMstSupplier AS b ON a.SupplierCode = b.SupplierCode INNER JOIN
                         dbo.omMstModel AS c ON a.SalesModelCode = c.SalesModelCode INNER JOIN
                         dbo.omMstModel AS d ON a.SalesModelCodeNew = d.SalesModelCode
GO
create view [dbo].[CsBpkbRetrievalInformationView]
as
select a.CompanyCode
     , a.CustomerCode
	 , a.RetrievalEstimationDate
	 , a.Notes
  from CsBpkbRetrievalInformation a
GO
CREATE VIEW [dbo].[omMstModelColourView]
AS
SELECT        a.CompanyCode, a.SalesModelCode, a.ColourCode, b.RefferenceDesc1, a.Remark, a.Status
FROM            dbo.omMstModelColour AS a INNER JOIN
                         dbo.omMstRefference AS b ON a.ColourCode = b.RefferenceCode
GO
CREATE view [dbo].[SvTrnCatCode]

as 


select CompanyCode, ProductType, RefferenceCode
, Description
, DescriptionEng
, IsActive
, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from	svMstRefferenceService with(nolock, nowait)
where	RefferenceType = 'CLAIMCAT'
/*and CompanyCode = '6006406'
and ProductType = '4W'
order by RefferenceCode
*/
GO
create view [dbo].[CsMstCustomerView]
as
select distinct
       a.CompanyCode
	 , b.BranchCode
     , a.CustomerCode
	 , a.CustomerName
	 , a.BirthDate
	 , Address = (a.Address1 + ltrim(a.Address2) + ltrim(a.Address3) + ltrim(a.Address4))
	 , Outstanding = (
			case  
				when isnull(d.CustomerCode, '') != '' and d.CustomerCode = '' then '1'
				else '0'
			end
	   )
  from GnMstCustomer a
 inner join omTrSalesInvoice b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
 --inner join gnMstOrganizationDtl c
 --   on c.CompanyCode = a.CompanyCode
 --  and c.BranchCode = b.BranchCode 
  left join CsCustBirthday d
    on d.CompanyCode = a.CompanyCode
   and d.CustomerCode = a.CustomerCode
 where exists (
			select x.CustomerCode
			  from svMstCustomerVehicle x
			 where x.CompanyCode = a.CompanyCode
			   and x.CustomerCode = a.CustomerCode
	   )
GO
CREATE view [dbo].[SvRincinJob]

as 


select CompanyCode, ProductType, BasicModel, JobType,
 OperationNo
,Description
,TechnicalModelCode
,IsActive as IsActiveR
,IsCampaign
,IsSubCon
,OperationHour
,ClaimHour
,BillType
,LaborCost
,LaborPrice
from svMstTask
GO
CREATE VIEW [dbo].[SvStallView]
AS
SELECT        CompanyCode, BranchCode, ProductType, StallCode, Description, HaveLift, IsActive, CASE HaveLift WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS HaveLiftString, 
                         CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActiveString
FROM            dbo.svMstStall
GO
CREATE view [dbo].[SvSaView]

as 

select a.CompanyCode, a.BranchCode, a.EmployeeID, a.EmployeeName  from GnMstEmployee a
where a.TitleCode IN ('3','7')
   AND PersonnelStatus = '1'
GO
CREATE VIEW [dbo].[SvReturnServiceView]
AS
SELECT a.CompanyCode, a.BranchCode, a.ProductType, 
     a.InvoiceNo, CASE a.InvoiceDate WHEN ('19000101') 
     THEN NULL 
     ELSE a.InvoiceDate END AS InvoiceDate, f.ReturnNo, 
     e.DescriptionEng AS InvoiceStatus, a.FPJNo, 
     CASE a.FPJDate WHEN ('19000101') THEN NULL 
     ELSE a.FPJDate END AS FPJDate, a.JobOrderNo, 
     CASE a.JobOrderDate WHEN ('19000101') THEN NULL 
     ELSE a.JobOrderDate END AS JobOrderDate, 
     a.JobType, a.ChassisCode, a.ChassisNo, 
     a.EngineCode, a.EngineNo, a.PoliceRegNo, 
     a.BasicModel, a.CustomerCode, a.CustomerCodeBill, 
     a.Remarks, 
     a.CustomerCode + ' - ' + b.CustomerName AS Customer,
      a.CustomerCodeBill + ' - ' + c.CustomerName AS CustomerBill,
      d.ServiceBookNo, a.Odometer, d.TransmissionType, 
     d.ColourCode
FROM dbo.svTrnInvoice AS a LEFT OUTER JOIN
     dbo.gnMstCustomer AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.CustomerCode = a.CustomerCode LEFT OUTER JOIN
     dbo.gnMstCustomer AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.CustomerCode = a.CustomerCodeBill LEFT OUTER JOIN
     dbo.svMstCustomerVehicle AS d ON 
     a.CompanyCode = d.CompanyCode AND 
     a.ChassisCode = d.ChassisCode AND 
     a.ChassisNo = d.ChassisNo AND 
     a.EngineCode = d.EngineCode AND 
     a.EngineNo = d.EngineNo AND 
     a.BasicModel = d.BasicModel LEFT OUTER JOIN
     dbo.svMstRefferenceService AS e ON 
     a.CompanyCode = e.CompanyCode AND 
     a.ProductType = e.ProductType AND 
     e.RefferenceType = 'INVSTATS' AND 
     a.InvoiceStatus = e.RefferenceCode LEFT OUTER JOIN
     dbo.SvTrnReturn AS f ON 
     a.CompanyCode = f.CompanyCode AND 
     a.BranchCode = f.BranchCode AND 
     a.ProductType = f.ProductType AND 
     a.InvoiceNo = f.InvoiceNo
WHERE (a.InvoiceStatus IN ('0', '1', '2', '4'))
GO
CREATE view [dbo].[SvRegPackageView]

as 

SELECT gnMstCustomer.CompanyCode
    ,PoliceRegNo
    , ChassisCode + ' - ' + CONVERT(VARCHAR, ChassisNo, 50) Chassis
  --  , ChassisCode
    --, ChassisNo
   -- , svMstPackageContract.PackageCode
    , svMstPackageContract.PackageCode + ' - ' + PackageName Package
    , svMstPackageContract.CustomerCode + ' - ' + gnMstCustomer.CustomerName Customer
    , BeginDate as StartDate
    , EndDate as FinishDate
    , VirtualAccount as AccountNo
FROM 
    svMstPackageContract
LEFT JOIN svMstPackage ON 
    svMstPackageContract.CompanyCode = svMstPackage.CompanyCode
    AND svMstPackageContract.PackageCode = svMstPackage.PackageCode    
LEFT JOIN gnMstCustomer ON
    svMstPackageContract.CompanyCode = gnMstCustomer.CompanyCode
    AND svMstPackageContract.CustomerCode = gnMstCustomer.CustomerCode
GO
CREATE view [dbo].[SvRincianPart]

as 

select a.CompanyCode, a.ProductType, BranchCode, a.BasicModel, a.OperationNo, a.JobType
	 ,a.PartNo
	,b.PartName
	,a.Quantity
    ,isnull((case d.GroupJobType when 'FSC' then a.RetailPrice else e.RetailPrice end),0) as RetailPrice
    ,d.GroupJobType
    ,a.BillType as BillTypePart
    ,case a.BillType when 'F' then 'Free' when 'C' then 'Customer' else '' end BillTypeDesc
    ,d.PdiFscSeq
from svMstTaskPart a
left join spMstItemInfo b 
	on  b.CompanyCode = a.CompanyCode
	and b.ProductType = a.ProductType
	and b.PartNo = a.PartNo
left join svMstTask c
	on  c.CompanyCode = a.CompanyCode
	and c.ProductType = a.ProductType
	and c.BasicModel = a.BasicModel
	and c.JobType = a.JobType
	and c.OperationNo = a.OperationNo
left join svMstJob d
	on  d.CompanyCode = a.CompanyCode
	and d.ProductType = a.ProductType
	and d.BasicModel = a.BasicModel
	and d.JobType = a.JobType
left join spMstItemPrice e
	on  e.CompanyCode = a.CompanyCode
	and e.PartNo = a.PartNo
GO
CREATE view [dbo].[SvRincianBrowser]

as 


select CompanyCode, ProductType, BasicModel, JobType,
 OperationNo
,Description
,TechnicalModelCode
,case IsSubCon when 1 then 'Ya' else 'Tidak' end as IsSubConStr
,case IsCampaign when 1 then 'Ya' else 'Tidak' end as IsCampaignStr
,case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
,IsActive as IsActiveR
,IsCampaign
,IsSubCon
,OperationHour
,ClaimHour
,BillType
,LaborCost
,LaborPrice
from svMstTask
GO
CREATE view [dbo].[SvTargetView]

as 


select	CompanyCode
,ProductType, BranchCode
, cast(PeriodYear as varchar) + ' / ' + replicate('0', (2 - LEN(CAST(PeriodMonth as varchar)))) + cast(PeriodMonth as varchar) as Period	
, PeriodYear
, PeriodMonth
, ProductivityMechanic
, TotalWorkingDays
, TotalMechanic
, TotalStall
, TotalLift
, HourlyLaborRate
, ProductivityStall
, TotalUnitService
, OverheadCost
, ServiceAmount 
, SMRTarget
, DasDailyTarget
, DasMonthTarget
from	svMstTarget
--where	CompanyCode = '6006406'
--AND BranchCode = '6006401'
--AND ProductType = '4W' 
--order by PeriodYear desc, PeriodMonth desc
GO
CREATE VIEW [dbo].[SvTaxInvoiceLookUpView]
AS
SELECT        inv.CompanyCode, inv.BranchCode, inv.ProductType, inv.InvoiceNo, inv.InvoiceDate, inv.JobOrderNo, inv.JobOrderDate, inv.PoliceRegNo, inv.JobType, 
                         inv.CustomerCode + ' - ' + cust.CustomerName AS Customer, inv.CustomerCodeBill + ' - ' + custBill.CustomerName AS CustomerBill, inv.CustomerCode
FROM            dbo.svTrnInvoice AS inv WITH (nolock, nowait) INNER JOIN
                         dbo.gnMstCustomer AS cust WITH (nolock, nowait) ON inv.CompanyCode = cust.CompanyCode AND inv.CustomerCode = cust.CustomerCode INNER JOIN
                         dbo.gnMstCustomer AS custBill WITH (nolock, nowait) ON inv.CompanyCode = cust.CompanyCode AND inv.CustomerCodeBill = custBill.CustomerCode
WHERE        (inv.InvoiceStatus = 0) AND (inv.FPJNo = '') AND (inv.InvoiceNo LIKE 'INW%' OR
                         inv.InvoiceNo LIKE 'INF%')
GO
CREATE VIEW [dbo].[SvTaxInvoiceHQView]
AS
SELECT DISTINCT TOP (100) PERCENT trnFakturPajak.CompanyCode, trnFakturPajak.BranchCode, trnFakturPajak.FPJNo, trnFakturPajak.FPJDate,
                             (SELECT        TOP (1) InvoiceNo + ' (' + SUBSTRING(BranchCode, LEN(BranchCode) - 1, 3) + ')' AS Expr1
                               FROM            dbo.svTrnInvoice
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY BranchCode, InvoiceNo) + ' s/d ' +
                             (SELECT        TOP (1) InvoiceNo + ' (' + SUBSTRING(BranchCode, LEN(BranchCode) - 1, 3) + ')' AS Expr1
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_3
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY InvoiceNo, BranchCode DESC) AS Invoice,
                             (SELECT        TOP (1) BranchCode
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_2
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY BranchCode, InvoiceNo) AS BranchStart,
                             (SELECT        TOP (1) BranchCode
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_1
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (FPJNo = trnFakturPajak.FPJNo) AND (IsLocked = 1)
                               ORDER BY BranchCode DESC) AS BranchEnd, trnFakturPajak.CustomerCode, trnFakturPajak.CustomerName, trnFakturPajak.CustomerCodeBill, 
                         trnFakturPajak.CustomerCode + ' - ' +
                             (SELECT        CustomerName
                               FROM            dbo.gnMstCustomer
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (CustomerCode = trnFakturPajak.CustomerCode)) AS Customer, 
                         trnFakturPajak.CustomerCodeBill + ' - ' +
                             (SELECT        CustomerName
                               FROM            dbo.gnMstCustomer AS gnMstCustomer_1
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (CustomerCode = trnFakturPajak.CustomerCodeBill)) AS CustomerBill
FROM            dbo.svTrnFakturPajak AS trnFakturPajak LEFT OUTER JOIN
                         dbo.svTrnInvoice AS trnInvoice ON trnInvoice.CompanyCode = trnFakturPajak.CompanyCode AND trnInvoice.FPJNo = trnFakturPajak.FPJNo AND 
                         trnInvoice.IsLocked = 1
WHERE        (trnFakturPajak.FPJNo LIKE 'FPH%')
GO
CREATE VIEW [dbo].[SvTaxInvoiceView]
AS
SELECT DISTINCT a.CompanyCode, a.BranchCode, a.FPJNo, a.FPJDate,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)) AS InvoiceStart,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_3
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)
                               ORDER BY InvoiceNo DESC) AS InvoiceEnd,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_2
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)) + ' s/d ' +
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_1
                               WHERE        (CompanyCode = a.CompanyCode) AND (BranchCode = a.BranchCode) AND (FPJNo = a.FPJNo)
                               ORDER BY InvoiceNo DESC) AS Invoice, a.CustomerCode,
                             (SELECT        CustomerName
                               FROM            dbo.gnMstCustomer
                               WHERE        (CompanyCode = a.CompanyCode) AND (CustomerCode = a.CustomerCode)) AS CustomerName, a.CustomerCodeBill,
                             (SELECT        CustomerCode + ' - ' + CustomerName AS Expr1
                               FROM            dbo.gnMstCustomer AS gnMstCustomer_2
                               WHERE        (CompanyCode = a.CompanyCode) AND (CustomerCode = a.CustomerCode)) AS Customer,
                             (SELECT        CustomerCode + ' - ' + CustomerName AS Expr1
                               FROM            dbo.gnMstCustomer AS gnMstCustomer_1
                               WHERE        (CompanyCode = a.CompanyCode) AND (CustomerCode = a.CustomerCodeBill)) AS CustomerBill
FROM            dbo.svTrnFakturPajak AS a LEFT OUTER JOIN
                         dbo.svTrnInvoice AS b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.FPJNo = a.FPJNo
WHERE        (1 = 1) AND (ISNULL(a.FPJGovNo, '') = '')
GO
CREATE VIEW [dbo].[SvTaxInvoiceStdView]
AS
SELECT DISTINCT TOP (100) PERCENT trnFakturPajak.CompanyCode, trnFakturPajak.BranchCode, trnFakturPajak.FPJNo, trnFakturPajak.FPJDate,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo) + ' s/d ' +
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_3
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo DESC) AS InvoiceNo, trnFakturPajak.CustomerCode + ' - ' + cust.CustomerName AS Customer, 
                         trnFakturPajak.CustomerCodeBill + ' - ' + custBill.CustomerName AS CustomerBill, trnFakturPajak.CustomerCode,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_2
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo) AS InvoiceStart,
                             (SELECT        TOP (1) InvoiceNo
                               FROM            dbo.svTrnInvoice AS svTrnInvoice_1
                               WHERE        (CompanyCode = trnFakturPajak.CompanyCode) AND (BranchCode = trnFakturPajak.BranchCode) AND (FPJNo = trnFakturPajak.FPJNo)
                               ORDER BY InvoiceNo DESC) AS InvoiceEnd
FROM            dbo.svTrnFakturPajak AS trnFakturPajak LEFT OUTER JOIN
                         dbo.svTrnInvoice AS trnInvoice ON trnInvoice.CompanyCode = trnFakturPajak.CompanyCode AND trnInvoice.BranchCode = trnFakturPajak.BranchCode AND 
                         trnInvoice.FPJNo = trnFakturPajak.FPJNo INNER JOIN
                         dbo.gnMstCustomer AS cust WITH (nolock, nowait) ON trnFakturPajak.CompanyCode = cust.CompanyCode AND 
                         trnFakturPajak.CustomerCode = cust.CustomerCode INNER JOIN
                         dbo.gnMstCustomer AS custBill WITH (nolock, nowait) ON trnFakturPajak.CompanyCode = cust.CompanyCode AND 
                         trnFakturPajak.CustomerCodeBill = custBill.CustomerCode
WHERE        (trnFakturPajak.FPJNo LIKE 'FPS%') AND (trnFakturPajak.FPJGovNo = '') AND (trnInvoice.InvoiceNo LIKE 'INW%' OR
                         trnInvoice.InvoiceNo LIKE 'INF%') OR
                         (trnFakturPajak.FPJNo LIKE 'FPS%') AND (trnFakturPajak.FPJGovNo = '') AND (trnFakturPajak.NoOfInvoice > 1)
GO
create view [dbo].[CsTDayCallView]

as 

select a.CompanyCode 
     , a.CustomerCode 
     , a.Chassis 
     , a.IsDeliveredA 
     , a.IsDeliveredB 
     , a.IsDeliveredC 
     , a.IsDeliveredD 
     , a.IsDeliveredE 
     , a.IsDeliveredF
     , a.IsDeliveredG 
     , a.Comment 
     , a.Additional 
     , a.Status 
     , (case a.Status when 0 then 'In Progress' else 'Finish' end) as StatusInfo
     , a.CreatedDate as InputDate
     , b.CustomerName
     , left(b.Address1, 40) as Address
     , b.PhoneNo
     , c.BranchCode
     , c.EngineCode + convert(varchar, c.EngineNo) as Engine 
     , c.SalesModelCode as CarType
     , c.ColourCode as Color
     , d.Salesman as SalesmanCode
     , e.EmployeeName as SalesmanName
     , f.PoliceRegNo 
     , a.FinishDate
     , b.BirthDate
     , g.AddPhone1
     , g.AddPhone2
     , g.ReligionCode
  from CsTDayCall a
  left join gnMstCustomer b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join omTrSalesSOVin c
    on c.CompanyCode = a.CompanyCode
   and (c.ChassisCode + convert(varchar, c.ChassisNo)) = a.Chassis
  left join omTrSalesSO d
    on d.CompanyCode = c.CompanyCode
   and d.BranchCode = c.BranchCode
   and d.SONo = c.SONo
  left join gnMstEmployee e
    on e.CompanyCode = d.CompanyCode
   and e.BranchCode = d.BranchCode
   and e.EmployeeID = d.Salesman
  left join svMstCustomerVehicle f
    on f.CompanyCode = a.CompanyCode
   and f.ChassisCode + convert(varchar, f.ChassisNo) = a.Chassis
  left join CsCustData g
    on g.CompanyCode = b.CompanyCode    
   and g.CustomerCode = b.CustomerCode
GO
CREATE view [dbo].[SvTarifJasaView]

as 


select
	a.CompanyCode,
	a.BranchCode,
	a.ProductType,
     a.LaborCode
    ,a.Description
    ,a.LaborPrice
    ,a.EffectiveDate
    ,case IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
    , a.IsActive
from svMstLaborRate a
GO
CREATE VIEW [dbo].[SvTaskTypeView]
AS
SELECT DISTINCT 
                         a.CompanyCode, a.ProductType, a.BasicModel, a.JobType AS TaskType, b.Description AS Description1, ISNULL(b.Description, c.Description) AS Description2, 
                         CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive
FROM            dbo.svMstJob AS a LEFT OUTER JOIN
                         dbo.svMstRefferenceService AS b ON b.CompanyCode = a.CompanyCode AND b.ProductType = a.ProductType AND b.RefferenceCode = a.JobType AND 
                         b.RefferenceType = 'JOBSTYPE' RIGHT OUTER JOIN
                         dbo.svMstTask AS c ON c.CompanyCode = a.CompanyCode AND c.ProductType = a.ProductType AND c.BasicModel = a.BasicModel AND c.JobType = a.JobType AND 
                         c.IsActive = 1
WHERE        (1 = 1) AND (a.IsActive = 1)
GO
CREATE VIEW [dbo].[SvTaskNoView]
AS
SELECT        CompanyCode, ProductType, BasicModel, JobType, OperationNo, Description, ClaimHour, OperationHour, LaborCost, LaborPrice
FROM            dbo.svMstTask
WHERE        (1 = 1) AND (JobType = 'CLAIM') OR
                         (JobType = 'OTHER')
GO
CREATE VIEW [dbo].[vw_MstCustomerVehicleForMstRegCompaign]
AS
SELECT DISTINCT 
                         CompanyCode, BranchCode, PoliceRegNo, ChassisCode, ChassisNo, EngineCode, EngineNo, ServiceBookNo, CustomerCode, CustomerName, Address1, Address2, 
                         Address3, CityCode, SalesModel, Address, CityName
FROM            (SELECT        vehicle.CompanyCode, '' AS BranchCode, vehicle.PoliceRegNo, vehicle.ChassisCode, vehicle.ChassisNo, vehicle.EngineCode, vehicle.EngineNo, 
                                                    vehicle.ServiceBookNo, vehicle.CustomerCode, cust.CustomerName, cust.Address1, cust.Address2, cust.Address3, cust.CityCode, 
                                                    vehicle.BasicModel AS SalesModel, RTRIM(RTRIM(cust.Address1) + ' ' + RTRIM(cust.Address2) + ' ' + RTRIM(cust.Address3) 
                                                    + ' ' + RTRIM(cust.Address4)) AS Address, ISNULL(cust.IbuKota, '') AS CityName
                          FROM            dbo.svMstCustomerVehicle AS vehicle WITH (nolock, nowait) INNER JOIN
                                                    dbo.gnMstCustomer AS cust WITH (nolock, nowait) ON vehicle.CompanyCode = cust.CompanyCode AND 
                                                    vehicle.CustomerCode = cust.CustomerCode
                          UNION
                          SELECT DISTINCT 
                                                   a.CompanyCode, c.BranchCode, a.PoliceRegistrationNo AS PoliceRegNo, a.ChassisCode, a.ChassisNo, a.EngineCode, a.EngineNo, a.ServiceBookNo, 
                                                   c.CustomerCode, d.CustomerName, d.Address1, d.Address2, d.Address3, d.CityCode, b.BasicModel AS SalesModel, RTRIM(RTRIM(d.Address1) 
                                                   + ' ' + RTRIM(d.Address2) + ' ' + RTRIM(d.Address3) + ' ' + RTRIM(d.Address4)) AS Address, ISNULL(d.IbuKota, '') AS CityName
                          FROM            dbo.omMstVehicle AS a WITH (nolock, nowait) LEFT OUTER JOIN
                                                   dbo.omMstModel AS b ON a.CompanyCode = b.CompanyCode AND a.EngineCode = b.EngineCode LEFT OUTER JOIN
                                                   dbo.omTrSalesSO AS c WITH (nolock, nowait) ON a.CompanyCode = b.CompanyCode AND c.SONo = a.SONo INNER JOIN
                                                   dbo.gnMstCustomer AS d WITH (nolock, nowait) ON d.CompanyCode = a.CompanyCode AND d.CustomerCode = c.CustomerCode) AS temp
WHERE        (PoliceRegNo <> '')
GO
create view [dbo].[CsBPKBView]    
as  
select distinct a.CompanyCode
     , b.CustomerCode
	 , e.BranchCode        
     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as Chassis
     , (a.EngineCode + convert(varchar, a.EngineNo)) as Engine
	 , VinNo = ((a.ChassisCode + convert(varchar, a.ChassisNo)))     
     , e.SalesModelCode as CarType        
     , e.ColourCode as Color        
     , d.PoliceRegNo
     , f.Salesman as SalesmanCode
     , g.EmployeeName as SalesmanName        
     , c.CustomerName        
     , c.PhoneNo
	 , i.CompanyName CompanyName   
     , j.CompanyName BranchName
	 , k.BpkbDate
	 , k.StnkDate
     , (case h.Status when 0 then 'In Progress' when 1 then 'Finish' else 'In Progress' end) as StatusInfo 
     , left(c.Address1, 40) as Address
	 , h.ReqKtp 
	 , h.ReqStnk 
	 , h.ReqSuratKuasa  
	 , h.ReqInfoLeasing    
	 , h.ReqInfoCust 
	 , h.Comment 
	 , h.Additional 
	 , h.Status        
	 , h.Tenor        
	 , h.LeasingCode        
	 , h.CustomerCategory  
	 , BpkbReadyDate = convert(VARCHAR(11), h.BpkbReadyDate, 106)    
	 , BpkbPickUp = convert(VARCHAR(11), h.BpkbPickUp,106)        
	 , convert(varchar(15),h.CreatedDate, 106) as CreatedDate      
	 , convert(varchar(15),h.FinishDate, 106) as FinishDate  
  from omTrSalesInvoiceVin a        
  left join omTrSalesInvoice b        
    on b.CompanyCode = a.CompanyCode        
   and b.BranchCode = a.BranchCode        
   and b.InvoiceNo = a.InvoiceNo        
  left join gnMstCustomer c        
    on c.CompanyCode = a.CompanyCode        
   and c.CustomerCode = b.CustomerCode        
  left join svMstCustomerVehicle d        
    on d.CompanyCode = a.CompanyCode        
   and d.ChassisCode = a.ChassisCode        
   and d.ChassisNo = a.ChassisNo        
  left join omTrSalesSOVin e        
    on e.CompanyCode = a.CompanyCode        
   and e.ChassisCode = a.ChassisCode        
   and e.ChassisNo = a.ChassisNo        
  left join omTrSalesSO f        
    on f.CompanyCode = e.CompanyCode        
   and f.BranchCode = e.BranchCode        
   and f.SONo = e.SONo        
  left join gnMstEmployee g        
    on g.CompanyCode = f.CompanyCode        
   and g.BranchCode = f.BranchCode        
   and g.EmployeeID = f.Salesman        
  LEFT JOIN CsCustBpkb h      
    on h.CompanyCode = a.CompanyCode      
   and h.Chassis = a.ChassisCode + convert(varchar(20), a.ChassisNo)    
  left join gnMstOrganizationHdr i   
    on i.CompanyCode = f.CompanyCode   
  left join gnMstCoProfile j   
    on j.CompanyCode = f.CompanyCode   
   and j.BranchCode = f.BranchCode 
  left join CsCustomerVehicle k
    on k.CompanyCode = a.CompanyCode
   and k.CustomerCode=c.CustomerCode
   and k.Chassis = (a.ChassisCode + convert(varchar, a.ChassisNo))
GO
CREATE view [dbo].[SpPartOrderView]  as    
SELECT DISTINCT a.CompanyCode, BranchCode,
a.PartNo, 
b.PartName,
a.DocNo, ClaimNo
FROM spTrnPCLaimDtl a
LEFT JOIN spMstItemInfo b ON b.CompanyCode = a.CompanyCode 
    AND b.PartNo = a.PartNo
--WHERE -- a.CompanyCode = '6006406'
    --AND a.BranchCode = '6006401'
    --AND ClaimNo = 'CLM/12/000001'
--ORDER BY a.PartNo
GO
CREATE view [dbo].[SpPartNoView]  as    
 SELECT a.CompanyCode, BranchCode, a.PartNo, x.PartName, a.DocNo, WRSNo, ReceivedQty, a.PurchasePrice FROM spTrnPRcvDtl a
INNER JOIN spMstItemInfo x with(nolock, nowait) on a.CompanyCode = x.CompanyCode AND a.PartNo = x.PartNo
WHERE NOT EXISTS
(
SELECT 1 FROM spTrnPClaimDtl b
INNER JOIN spTrnPClaimHdr c ON b.CompanyCode = c.CompanyCode AND b.BranchCode = c.BranchCode AND b.ClaimNo = c.ClaimNo
WHERE a.CompanyCode = b.CompanyCode 
AND a.BranchCode = b.BranchCode
AND c.WRSNo = a.WRSNO
AND a.Partno = b.PartNo
AND a.DocNo = b.DocNo
)
--AND a.CompanyCode = '6006406'
--AND a.BranchCode = '6006401'
--AND a.WRSNO = 'WRN/13/000780'
GO
create view [dbo].[spMstSalesTargetview]
as
SELECT  cast (Year as varchar(4)) Year, 
                                cast (Month as varchar(2)) Month, QtyTarget, AmountTarget, TotalJaringan,CompanyCode,BranchCode 
                                FROM spMstSalesTarget
GO
create view [dbo].[EmployeeSfmView]

as

select a.CompanyCode
     , f.CompanyName
     , a.BranchCode
     , isnull(g.CompanyName, '') as BranchName
     , a.EmployeeID
     , a.EmployeeName
     , b.SalesID
     , a.Nik
     , a.JoinDate as JoinDate
     , isnull(h.PosCode, '') as TitleCode
     , isnull(h.PosName, '') as TitleName
     , b.Email
     , b.Phone1 as PhoneNo
     , a.Address1 as Address
     , b.ImgPath
  from gnMstEmployee a
  left join gnMstEmployeeData b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.EmployeeID = a.EmployeeID
  left join gnMstLookupDtl e
    on e.CompanyCode = a.CompanyCode
   and e.CodeID = 'TITL'   
   and e.LookUpValue = a.TitleCode
  left join gnMstOrganizationHdr f
    on f.CompanyCode = a.CompanyCode
  left join gnMstCoProfile g
    on g.CompanyCode = a.CompanyCode
   and g.BranchCode = a.BranchCode
  left join gnMstPosition h
    on h.CompanyCode = b.CompanyCode
   and h.DeptCode = b.OrgCode
   and h.PosCode = b.PosCode
GO
create view [dbo].[sppartnameWarehousename]
as
SELECT  distinct      a.PartNo, a.PartName, b.WarehouseCode, c.LookUpValueName [Warehousename]
FROM            spMstItemInfo AS a INNER JOIN
                         spMstItemLoc AS b ON a.CompanyCode = b.CompanyCode AND a.PartNo = b.PartNo INNER JOIN
                         gnMstLookUpDtl AS c ON a.CompanyCode = c.CompanyCode 
						 AND b.WarehouseCode = c.LookUpValue
						 where c.CodeID='WRCD'
GO
create view [dbo].[EmployeeSfmDtlView]
as
select 
	a.CompanyCode,
	e.CompanyName,
	a.BranchCode,
	c.BranchName,
	a.EmployeeID,
	b.SalesID,
	Nik = a.EmployeeID,
	a.EmployeeName,
	a.BirthPlace,
	a.BirthDate,
	a.ReligionCode,
	a.GenderCode,
	b.GradeCode,
	b.JobCode,
	d.PosName,
	a.FormalEducation,
	b.TeamLeaderID,
	TeamLeaderName = (
		select top 1
			x.EmployeeName
		from
			gnMstEmployee x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.EmployeeID = b.TeamLeaderID
	),
	a.IdentityNo,
	b.NPWPNo,
	a.MaritalStatusCode, 
	a.PersonnelStatus,
	b.Email,
	a.PhoneNo,
	a.HpNo,
	a.FaxNo,
	b.Phone1,
	b.Phone2,
	b.Phone3,
	b.Phone4,
	a.Address1,
	a.Address2,
	a.Address3,
	a.Address4,
	b.CityCode,
	CityName = b.CityCode,
	b.AreaCode,
	AreaName = b.AreaCode,
	b.ProvinceCode,
	ProvinceName = b.ProvinceCode,
	a.ZipNo,
	b.DrivingLicense1,
	b.DrivingLicense2,
	a.UniformSize,
	b.SizeAlt,
	a.BloodCode,
	a.ShoesSize,
	a.Height,
	a.Weight,
	a.JoinDate,
	a.ResignDate,
	b.ResignReason, 
	AdditionalJobName = b.AdditionalJob1,
	b.OrgCode,
	b.RankCode,
	b.PosCode,
	ImgPath = '',
	b.NPWPDate,
	b.EmpPhoto,
	b.EmpPhotoType,
	b.EmpIdentityCardID,
	a.EmpImageID,
	b.AdditionalJob1,
	b.AdditionalJob2,
	EmpIdentityCardImageID = a.EmpIdentityCardImageID,
	b.AdditionalJob
from
	gnMstEmployee a
left outer join
	gnMstEmployeeData b
on
	b.CompanyCode = a.CompanyCode
	and
	b.BranchCode = a.BranchCode
	and
	b.EmployeeID = a.EmployeeID
inner join
	gnMstOrganizationDtl c
on
	c.CompanyCode = a.CompanyCode
	and
	c.BranchCode = a.BranchCode
left outer join
	gnMstPosition d
on
	d.CompanyCode = a.CompanyCode
	and
	d.DeptCode = b.OrgCode
	and
	d.PosCode = b.PosCode
inner join 
	gnMstOrganizationHdr e
on
	e.CompanyCode = a.CompanyCode
GO
CREATE VIEW [dbo].[SpPembelian]
AS
SELECT a.CompanyCode, BranchCode,
 a.SuggorNo
,a.SuggorDate
--,CONVERT(varchar(15), a.SuggorDate, 103) as SuggorDate
,a.SupplierCode
,b.SupplierName,
TypeOfGoods
FROM spTrnPSUGGORHdr a
LEFT JOIN gnMstSupplier b on b.CompanyCode=a.CompanyCode AND b.SupplierCode=a.SupplierCode                               
WHERE a.status < 2
GO
CREATE VIEW [dbo].[SvBasicCodeView]
AS
SELECT        a.CompanyCode, a.ProductType, a.BasicModel, SUBSTRING(a.OperationNo, 1, 6) AS BasicCode, SUBSTRING(a.OperationNo, 7, LEN(a.OperationNo)) AS VarCom, 
                         a.OperationNo, a.OperationHour, a.LaborPrice, a.Description, CASE a.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive, a.JobType
FROM            dbo.svMstTask AS a INNER JOIN
                         dbo.svMstJob AS b ON a.CompanyCode = b.CompanyCode AND a.ProductType = b.ProductType AND a.BasicModel = b.BasicModel AND 
                         a.JobType = b.JobType
WHERE        (1 = 1) AND (a.IsActive = 1) AND (b.IsActive = 1) AND (b.GroupJobType = 'CLM')
GO
CREATE view [dbo].[SpWRSNo]  as    
 SELECT * FROM (
SELECT a.CompanyCode, a.BranchCode,
	a.WRSNo, a.TypeOfGoods
	, WRSDate
	, COUNT(b.PartNo) CountPartNo
	, ISNULL(Claim.CountClaim, 0) CountClaim
FROM 
	spTrnPRcvHdr a WITH(NOLOCK, NOWAIT)
	INNER JOIN spTrnPRcvDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN (SELECT dtl.CompanyCode, dtl.BranchCode, hdr.WRSNo, ISNULL(COUNT(dtl.PartNo), 0) CountClaim FROM spTrnPClaimDtl dtl
				INNER JOIN spTrnPClaimHdr hdr ON dtl.CompanyCode = hdr.CompanyCode
				AND dtl.BranchCode = hdr.BranchCode
				AND dtl.ClaimNo = hdr.ClaimNo
                AND hdr.status <> '3'
				GROUP BY dtl.CompanyCode, dtl.BranchCode, hdr.WRSNo
	) Claim ON a.CompanyCode = Claim.CompanyCode
		AND a.BranchCode = Claim.BranchCode
		AND a.WRSNo = Claim.WRSNo
WHERE 
	--a.CompanyCode = '6006406'
	--AND a.BranchCode = '6006401'
	(a.Status = '2' OR a.Status = '4')
	--AND a.TypeOfGoods = '0' 
GROUP BY 
	a.WRSNo, WRSDate, CountClaim,a.TypeOfGoods, a.CompanyCode, a.BranchCode
) a
GROUP BY 
	a.WrsNo, a.WrsDate, a.CountPartNo, a.CountClaim,a.TypeOfGoods, a.CompanyCode, a.BranchCode
HAVING 
	a.CountPartNo > a.CountClaim
GO
CREATE view [dbo].[SvBasicKsgView]

as 


Select a.CompanyCode, a.ProductType,a.RefferenceCode AS BasicModel, a.DescriptionEng AS TechnicalModelCode,
a.Description AS ModelDescription, CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status 
from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL'
GO
CREATE view [dbo].[SvBasicCopy]

as 

Select CompanyCode, ProductType, a.RefferenceCode AS BasicModel, 
 a.DescriptionEng AS TechnicalModelCode, 
a.Description AS ModelDescription
, CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status 
from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL'
GO
CREATE view [dbo].[SpSelectByNoWRS]  as    

SELECT A.CompanyCode, A.BranchCode, A.WRSNo , A.PartNo, A.DocNo, A.PurchasePrice,
A.DiscPct,  A.ReceivedQty, A.BoxNo, (select PartName from spMstItemInfo C
where C.CompanyCode=A.CompanyCode and C.PartNo=A.PartNo) as NmPart 
  FROM spTrnPRcvDtl A
 INNER JOIN spTrnPRcvHdr B ON 
 B.CompanyCode = A.CompanyCode
 AND B.BranchCode = A.BranchCode 
 AND B.WRSNo = A.WRSNo
GO
CREATE view [dbo].[SpSelectByNoBinning]  as    
SELECT a.CompanyCode, a.BranchCode, a.BinningNo,
row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut,
a.DocNo,a.PartNo, a.PurchasePrice, a.DiscPct, 
a.ReceivedQty, a.BoxNo, (select PartName from spMstItemInfo c WITH(NOLOCK, NOWAIT)
WHERE c.CompanyCode=a.CompanyCode and c.PartNo=a.PartNo) as NmPart
 FROM spTrnPBinnDtl a WITH(NOLOCK, NOWAIT)
 INNER JOIN spTrnPBinnHdr b WITH(NOLOCK, NOWAIT) ON b.BinningNo = a.BinningNo 
    AND b.CompanyCode = a.CompanyCode
    AND b.BranchCode = a.BranchCode
 /*WHERE a.CompanyCode = @CompanyCode
   AND a.BranchCode = @BranchCode
   AND a.BinningNo =  @BinningNo
*/
GO
CREATE view [dbo].[SpWRSHpp]  as 

SELECT a.CompanyCode, a.BranchCode,
WRSNo,WRSDate, b.ReferenceNo, b.DNSupplierNo, c.SupplierName, a.TypeOfGoods  
FROM 
spTrnPRcvHdr a
LEFT JOIN SpTrnPBinnHdr b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
AND b.BinningNo = a.BinningNo 
LEFT JOIN gnMstSupplier c ON c.CompanyCode = a.CompanyCode AND c.SupplierCode = b.SupplierCode
WHERE --a.CompanyCode = '6006406'
--AND a.BranchCode = '6006401'
a.Status = '2'
--AND a.TypeOfGoods ='0'
AND a.ReceivingType in (1,2)
AND a.TransType = 4
--ORDER BY a.CreatedDate DESC
GO
CREATE view [dbo].[SpVendorClaimView]  as 
   
SELECT CompanyCode, BranchCode ,ClaimReceivedNo
    ,ClaimNo    
    ,ClaimReceivedDate, ClaimDate,
    TypeOfGoods, Status   
  FROM spTrnPRcvClaimHdr 
 WHERE --CompanyCode = '6006406'
   --AND BranchCode = '6006401'
   --AND TypeOfGoods = '0'
   (Status = '0' OR Status = '1')
 --ORDER BY ClaimReceivedNo DESC
GO
CREATE VIEW [dbo].[SpMstSalesTargetDtlView]
AS
select 
	a.CompanyCode,
	a.BranchCode,
	a.[Year],
	a.[Month],
	a.CategoryCode,
	(select LookUpValueName from gnMstLookUpDtl where CodeID='CSCT' and CompanyCode= a.CompanyCode and LookUpValue = a.CategoryCode) CategoryName,
	a.QtyTarget,
	a.AmountTarget,
	a.TotalJaringan
from spMstSalesTargetDtl a
GO
CREATE VIEW [dbo].[spMasterPartLookup]
AS	
	SELECT 
	 Items.CompanyCode,
	 Items.BranchCode,
	 Items.PartNo
	,Items.ProductType
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	   WHERE CodeID = 'PRCT' AND 
			 LookUpValue = Items.PartCategory AND 
			 CompanyCode = Items.CompanyCode) AS CategoryName
	,Items.PartCategory
	,ItemInfo.PartName
	,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
	,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
	,ItemInfo.OrderUnit
	,ItemInfo.SupplierCode
	,Supplier.SupplierName
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	  WHERE CodeID = 'TPGO' AND 
			LookUpValue = Items.TypeOfGoods AND 
			CompanyCode = Items.CompanyCode) AS TypeOfGoods
	FROM SpMstItems Items
	INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
							 AND Items.PartNo = ItemInfo.PartNo
	LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
							 AND Supplier.SupplierCode = ItemInfo.SupplierCode
GO
CREATE view [dbo].[SpMasteritemview]
as
SELECT TOP 1500
ItemPrice.CompanyCode
,ItemPrice.BranchCode
 ,ItemPrice.PartNo
,ItemInfo.PartName
,ItemPrice.PurchasePrice
,ItemPrice.RetailPriceInclTax
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,Items.TypeOfGoods
,Items.ProductType
,Items.PartCategory
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
    WHERE CodeID = 'PRCT' AND 
    LookUpValue = Items.PartCategory AND 
    CompanyCode =ItemPrice.CompanyCode) CategoryName
FROM spMstItemPrice ItemPrice 
INNER JOIN spMstItems Items 
    ON ItemPrice.CompanyCode=Items.CompanyCode 
    AND ItemPrice.BranchCode=Items.BranchCode
    AND ItemPrice.PartNo=Items.PartNo
INNER JOIN spMstItemInfo ItemInfo 
    ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
    AND ItemPrice.PartNo = ItemInfo.PartNo
GO
create view [dbo].[HrTrnAttendanceFileHdrView]
as
select 
	a.CompanyCode,
	a.FileID,
	a.IsTransfered,
	b.FileName,
	b.FileSize,
	b.FileType,
	Size = '',
	CreatedDate = b.UploadedDate,
	Unprocessed = (
		select 
			count(x.AttendanceTime)
		from 
			HrTrnAttendanceFileDtl x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.FileID = a.FileID
			and
			x.IsTransfered = 0
	),
	Processed = (
		select 
			count(x.AttendanceTime)
		from 
			HrTrnAttendanceFileDtl x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.FileID = a.FileID
			and
			x.IsTransfered = 1
	)
from 
	HrTrnAttendanceFileHdr a
inner join
	HrUploadedFile b
on
	a.FileID = b.Checksum
GO
CREATE view [dbo].[spmasterpartview]
as
select a.CompanyCode,ItemPrice.BranchCode,a.PartNo,a.PartName,a.SupplierCode,gnMstSupplier.SupplierName,
a.IsGenuinePart,a.ProductType,a.PartCategory ,u.LookUpValueName as CategoryName
,a.OrderUnit
,ItemPrice.PurchasePrice
,ItemPrice.RetailPriceInclTax
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice

from SpMstItemInfo a 
inner join  gnMstLookUpDtl u on (a.PartCategory =u.ParaValue)
left join  spMstItemPrice ItemPrice       ON ItemPrice.CompanyCode=a.CompanyCode 
    AND ItemPrice.PartNo=a.PartNo 
	 LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = a.SupplierCode AND
        gnMstSupplier.CompanyCode = a.CompanyCode
WHERE  u.CodeID='PRCT'  and a.Status > 0
GO
CREATE view [dbo].[SpLoadDetail_TranStock]  as  
  
SELECT a.CompanyCode, a.BranchCode, a.LampiranNo, a.DealerCode, row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut
, a.OrderNo as DocNo
, a.PartNo
, a.PurchasePrice
, 0.00 as DiscPct
, a.QtyShipped ReceivedQty
, '' as BoxNo
, ISNULL(b.PartName, '') as NmPart
FROM spUtlStockTrfDtl a
LEFT JOIN SpMstItemInfo b ON b.CompanyCode=a.CompanyCode
    AND b.PartNo=a.PartNo
--WHERE a.CompanyCode = @CompanyCode
--  AND a.BranchCode = @BranchCode
--  AND a.DealerCode = @DealerCode
--  AND a.LampiranNo = @LampiranNo
GO
CREATE view [dbo].[SpItemPriceView]
as
SELECT TOP 1500
 ItemInfo.PartNo
,ItemInfo.PartName
,ItemPrice.PurchasePrice
,ItemInfo.SupplierCode
,ItemPrice.RetailPriceInclTax
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,Items.ProductType
,Items.PartCategory
,u.LookupValueName 
 as CategoryName
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice
 ,Items.CompanyCode 
 ,Items.BranchCode
FROM spMstItemPrice ItemPrice 
INNER JOIN spMstItems Items 
    ON ItemPrice.CompanyCode=Items.CompanyCode 
    AND ItemPrice.BranchCode=Items.BranchCode
    AND ItemPrice.PartNo=Items.PartNo
right JOIN spMstItemInfo ItemInfo 
    ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
    AND ItemPrice.PartNo = ItemInfo.PartNo
	inner join  gnMstLookUpDtl u on (Items.PartCategory =u.ParaValue)
WHERE  u.CodeID='PRCT'
GO
CREATE view [dbo].[SpMasteritemStockAlokasiView] as 

 SELECT  
 
 distinct
--StockAlokasi
d.PartNo
,d.WarehouseCode
,a.LookUpValueName as 'WarehouseName'
,d.LocationCode
,d.OnHand
,d.AllocationSP
,d.AllocationSR
,d.AllocationSL

,d.CompanyCode 
,d.BranchCode 
FROM  spMstItemLoc d 
inner join  gnMstLookUpDtl a on (d.WarehouseCode=a.ParaValue)

WHERE a.CodeID='WRCD'
GO
CREATE view [dbo].[SpLoadEntryHPP]  as    

SELECT a.*, c.DNSupplierNo,
    d.SupplierName,b.BinningNo, b.BinningDate, b.SupplierCode, 
	(
		select LookUpValueName
		from gnMstLookUpDtl
		where CompanyCode=a.CompanyCode and CodeID='STAT' and LookUpValue=a.Status
	) StatusStr
FROM 
    SpTrnPHPP a WITH(NoLock,NoWait)
LEFT JOIN SpTrnPRcvHdr b ON b.CompanyCode = a.CompanyCOde AND b.BranchCode = a.BranchCode
    AND b.WRSNo = a. WRSNo
LEFT JOIN SpTrnPBinnHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode
    AND c.BinningNo = b.BinningNo 
LEFT JOIN gnMstSupplier d ON d.CompanyCode = a.CompanyCode AND d.SupplierCode = c.SupplierCode
GO
create view [dbo].[spMstAccountView]
			as
			        SELECT a.TypeOfGoods, 
                           b.LookUpValueName as NameOfGoods,  
                           a.SalesAccNo,  a.COGSAccNo,  a.InventoryAccNo,  a.DiscAccNo,  a.ReturnAccNo, 
                            a.ReturnPybAccNo,  a.OtherIncomeAccNo,  a.OtherReceivableAccNo,  a.InTransitAccNo, a.CompanyCode, a.BranchCode
                    FROM   spMstAccount a 
					inner join gnMstLookUpDtl b on b.LookUpValue=a.TypeOfGoods
                    WHERE  B.CodeID='TPGO'
GO
CREATE view [dbo].[spMstPurchCampaignView]
as
SELECT 
spMstPurchCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstPurchCampaign.DiscPct, 
spMstPurchCampaign.BegDate,
spMstPurchCampaign.EndDate,
spMstPurchCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstPurchCampaign.CompanyCode,
  spMstPurchCampaign.BranchCode
  FROM spMstPurchCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstPurchCampaign.PartNo AND	
        spMstItemInfo.CompanyCode = spMstPurchCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstPurchCampaign.SupplierCode AND
        gnMstSupplier.CompanyCode = spMstPurchCampaign.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstPurchCampaign.CompanyCode AND 
	      spMstItems.BranchCode=spMstPurchCampaign.BranchCode AND 
				spMstItems.PartNo=spMstPurchCampaign.PartNo
GO
create view [dbo].[spMstOrderParamView] 
 as   
		    SELECT a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
GO
create view [dbo].[ITSBrowse]
as
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
where --a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) and not exists (select * from omTrSalesSO c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.ProspectNo = a.InquiryNumber and c.Status = 2)	 
union
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
		and c.Status = 2
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
	left join omTrSalesSOVin f on f.CompanyCode = c.CompanyCode	--Penambahan
		and f.BranchCode = c.BranchCode	--Penambahan
		and f.SONo = c.SONo	--Penambahan
	left join omMstVehicle g on g.CompanyCode = f.CompanyCode --Penambahan
		and g.ChassisNo = f.ChassisNo	--Penambahan
where 
--a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) 
--	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status = 2)		
	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status in (2,5))	--Perubahan	
	and g.InvoiceNo = '' --Penambahan

union
select distinct a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
		and c.Status = 2
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
	left join omTrSalesSOVin f on f.CompanyCode = c.CompanyCode	--Penambahan
		and f.BranchCode = c.BranchCode	--Penambahan
		and f.SONo = c.SONo	--Penambahan
	left join omMstVehicle g on g.CompanyCode = f.CompanyCode --Penambahan
		and g.ChassisNo = f.ChassisNo	--Penambahan
where 
	--a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress in ('SPK', 'DO', 'DELIVERY')
	and (e.ReturnNo is not null or c.Status =3) 
--	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status = 2)	
	and exists (select * from omTrSalesReturn c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.InvoiceNo = d.InvoiceNo and c.Status in (2,5))	--Perubahan		
	and (select count(*) from omTrSalesSO c where c.CompanyCode = a.CompanyCode and c.BranchCode = a.BranchCode and c.ProspectNo = a.InquiryNumber and c.Status = 2) = 1
	and g.InvoiceNo = ''	--Penambahan

union
select a.CompanyCode,a.BranchCode,convert(varchar,a.InquiryNumber) InquiryNo,a.InquiryDate,b.EmployeeName,a.NamaProspek,a.TipeKendaraan,
	a.EmployeeID, a.LastProgress
from pmKDP a
	left join gnMstEmployee b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.EmployeeID=b.EmployeeID
	left join omTrSalesSO c on c.CompanyCode = a.CompanyCode 
		and c.BranchCode = a.BranchCode
		and c.ProspectNo = a.InquiryNumber
	left join omTrSalesInvoice d on d.CompanyCode = a.CompanyCode
		and d.BranchCode = a.BranchCode
		and d.SONo = c.SONo
	left join omTrSalesReturn e on e.CompanyCode = a.CompanyCode
		and e.BranchCode = a.BranchCode
		and e.InvoiceNo = d.InvoiceNo
where --a.CompanyCode= @CompanyCode
	--and a.BranchCode= @BranchCode
	--and 
	a.LastProgress = 'SPK'
	and c.ProspectNo is null
GO
CREATE view [dbo].[spMstSalesCampaignView]
as
SELECT 
spMstSalesCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstSalesCampaign.DiscPct, 
spMstSalesCampaign.BegDate,
spMstSalesCampaign.EndDate,
spMstSalesCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstSalesCampaign.CompanyCode,
  spMstSalesCampaign.BranchCode
  FROM spMstSalesCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstSalesCampaign.PartNo AND spMstItemInfo.CompanyCode = spMstSalesCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstItemInfo.SupplierCode AND gnMstSupplier.CompanyCode = spMstItemInfo.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstSalesCampaign.CompanyCode AND spMstItems.BranchCode=spMstSalesCampaign.BranchCode 
        AND spMstItems.PartNo=spMstSalesCampaign.PartNo
GO
CREATE VIEW [dbo].[SpMstItemLocItemLookupView]
AS
SELECT 
	ItemInfo.PartNo,
	Items.ABCClass,
	ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,
	Items.OnOrder,
	Items.ReservedSP,
	Items.ReservedSR,
	Items.ReservedSL,
	Items.MovingCode,
	ItemInfo.SupplierCode,
	ItemInfo.PartName,
	ItemPrice.RetailPrice,
	ItemPrice.RetailPriceInclTax,
	ItemPrice.PurchasePrice
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode
                        AND Items.PartNo = ItemLoc.PartNo
WHERE Items.Status > 0
  AND ItemLoc.WarehouseCode = '00'
GO
CREATE view [dbo].[SpMstItemConversionview] 
as
select   a.CompanyCode,a.PartNo, b.PartName, FromQty, ToQty 
from SpMstItemConversion a
left join spMstItemInfo b on
    a.CompanyCode = b.CompanyCode
    and a.ProductType = b.ProductType
    and a.PartNo = b.PartNo
GO
create view [dbo].[spMstMovingCodeView]
as
SELECT MovingCode, MovingCodeName,
Formula = Cast(Param1 as varchar(10)) + Sign1 + Variable + Sign2 + Cast(Param2 as varchar(10)),
Param1, Sign1, Variable, Param2, Sign2,CompanyCode
FROM spMstMovingCode
GO
CREATE VIEW [dbo].[SpMstItemLocView]
AS
SELECT 
	 ItemLoc.PartNo
	,ItemInfo.PartName
	,ItemInfo.SupplierCode
	,ItemLoc.WarehouseCode
	,ItemLoc.LocationCode
	,Items.PartCategory
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM spMstItemLoc ItemLoc
INNER JOIN spMstItems Items 
    ON ItemLoc.CompanyCode=Items.CompanyCode
    AND ItemLoc.BranchCode=Items.BranchCode
    AND ItemLoc.PartNo=Items.PartNo
INNER JOIN spMstItemInfo ItemInfo 
    ON ItemLoc.CompanyCode=ItemInfo.CompanyCode
    AND ItemLoc.PartNo=ItemInfo.PartNo
WHERE
	ItemLoc.WarehouseCode NOT LIKE 'X%'
GO
create function [dbo].[sfm_GetCorrelatedTrainingHistoryBranch] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime,
	@ParamTrainingCode varchar(15)
)
returns varchar(15)
as
begin
	declare @TempTablePosition table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		DeptCode varchar(15),
		PosCode varchar(15),
		AssignedDate datetime,
		GradeCode varchar(15)
	);
	declare @TempTableTraining table (
		DeptCode varchar(15),
		PosCode varchar(15),
		GradeCode varchar(15)
	);
	declare @CorrelatedBranchCode varchar(15);
	declare @PositionCode varchar(15);
	declare @DepartmentCode varchar(15);
	declare @GradeCode varchar(15);
	declare @TrainingPosCode varchar(15);
	declare @TrainingDeptCode varchar(15);
	declare @TrainingGradeCode varchar(15);

	
	delete @TempTablePosition;
	delete @TempTableTraining;


	-- Find Training Dept and Position
	insert into @TempTableTraining
	select top 1
		a.DeptCode, 
		a.PosCode,
		a.GradeCode
	from 
		sfMstTraining a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.TrainingCode = @ParamTrainingCode
	order by a.TrainingCode asc;

	set @TrainingDeptCode = (
		select top 1 DeptCode from @TempTableTraining
	);

	set @TrainingPosCode = (
		select top 1 PosCode from @TempTableTraining
	);

	set @TrainingGradeCode = (
		select top 1 GradeCode from @TempTableTraining
	);

	-- Find Correlated Branch and Position
	insert into @TempTablePosition
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryDeptCode,
		a.HistoryPosCode,
		a.AssignedDate,
		''
	from
		SfEmployeeTitleHistory a
	where
		a.CompanyCode = @ParamCompanyCode
		and
		a.EmployeeID = @ParamEmployeeID
		and
		a.AssignedDate <= @ParamAssignedDate
	order by 
		a.AssignedDate desc;

	set @DepartmentCode = (
		select top 1
			a.DeptCode
		from
			@TempTablePosition a
	);

	set @PositionCode = (
		select top 1
			a.PosCode
		from
			@TempTablePosition a
	);



	--select 'Before enter validation';
	--select PosCode = @PositionCode, DeptCode = @DepartmentCode;
	--select TrnGrade = @TrainingGradeCode;

	if @PositionCode = @TrainingPosCode and @DepartmentCode = @TrainingDeptCode
	begin
		set @CorrelatedBranchCode = (
			select top 1
				a.BranchCode
			from
				@TempTablePosition a
		);

		if @DepartmentCode = 'SALES' and @PositionCode = 'S'
		begin
			set @GradeCode = (
				select top 1
					a.HistoryGrade
				from
					SfEmployeeGradeHistory a
				where
					a.CompanyCode like ('%' + @ParamCompanyCode + '%')
					and
					a.EmployeeID = @ParamEmployeeID
					and
					a.AssignedDate <= @ParamAssignedDate
				order by
					a.AssignedDate desc
			);	

			--select @DepartmentCode as DepartmentCode, @PositionCode as PositionCode, @GradeCode as GradeCode;

			if @GradeCode = @TrainingGradeCode
			begin
				set @GradeCode = @GradeCode;
			end
			else
			begin
				set @CorrelatedBranchCode = '';
			end
		end
	end

	return @CorrelatedBranchCode;
end
GO
CREATE FUNCTION [dbo].[GetBranchMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @BranchMD AS VARCHAR(15)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @BranchMD
END
GO
create function [dbo].[sfm_GetGradeHistoryCorrelatedBranch] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime
)
returns varchar(15)
as
begin
	declare @CorrelatedBranchCode varchar(15);
	declare @TempTable table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		PosCode varchar(15)
	);
	
	delete from @TempTable;
	
	insert into @TempTable
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryPosCode		
	from 
		SfEmployeeTitleHistory a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.EmployeeID = @ParamEmployeeID
		--and
		--a.HistoryDeptCode = 'SALES'
		--and
		--a.HistoryPosCode = 'S'	
		--and		
		--a.IsValid = 1
		and
		a.AssignedDate <= @ParamAssignedDate
	order by a.AssignedDate desc		
	
	declare @PositionCode varchar(15);
	set @PositionCode = (
		select top 1 PosCode from @TempTable
	);	
	
	if @PositionCode = 'S'
	begin
		set @CorrelatedBranchCode = (
			select BranchCode from @TempTable
		);
	end
	else
	begin
		delete from @TempTable;
	
		insert into @TempTable
		select top 1
			x.CompanyCode,
			x.BranchCode, 
			x.EmployeeID,
			x.PosCode		
		from 
			gnMstEmployeeData x
		where
			x.CompanyCode = @ParamCompanyCode
			and
			x.EmployeeID = @ParamEmployeeID
			and
			x.EmpJoinDate <= @ParamAssignedDate
			and
			ISNULL(x.OrgCode, '') != ''
		order by
			x.CreatedDate desc;
			
		set @PositionCode = (
			select top 1 PosCode from @TempTable
		);
			
		if @PositionCode = 'S'
		begin
			set @CorrelatedBranchCode = (
				select top 1 BranchCode from @TempTable
			);
		end
		else
		begin
			set @CorrelatedBranchCode = '';
		end
	end
	
	return @CorrelatedBranchCode;
end;
GO
create function [dbo].[sfm_GetCorrelatedTrainingHistoryPosition] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime,
	@ParamTrainingCode varchar(15)
)
returns varchar(15)
as
begin
	declare @TempTablePosition table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		DeptCode varchar(15),
		PosCode varchar(15),
		AssignedDate datetime,
		GradeCode varchar(15)
	);
	declare @TempTableTraining table (
		DeptCode varchar(15),
		PosCode varchar(15),
		GradeCode varchar(15)
	);
	declare @CorrelatedBranchCode varchar(15);
	declare @PositionCode varchar(15);
	declare @DepartmentCode varchar(15);
	declare @GradeCode varchar(15);
	declare @TrainingPosCode varchar(15);
	declare @TrainingDeptCode varchar(15);
	declare @TrainingGradeCode varchar(15);

	
	delete @TempTablePosition;
	delete @TempTableTraining;


	-- Find Training Dept and Position
	insert into @TempTableTraining
	select top 1
		a.DeptCode, 
		a.PosCode,
		a.GradeCode
	from 
		sfMstTraining a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.TrainingCode = @ParamTrainingCode
	order by a.TrainingCode asc;

	set @TrainingDeptCode = (
		select top 1 DeptCode from @TempTableTraining
	);

	set @TrainingPosCode = (
		select top 1 PosCode from @TempTableTraining
	);

	set @TrainingGradeCode = (
		select top 1 GradeCode from @TempTableTraining
	);

	-- Find Correlated Branch and Position
	insert into @TempTablePosition
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryDeptCode,
		a.HistoryPosCode,
		a.AssignedDate,
		''
	from
		SfEmployeeTitleHistory a
	where
		a.CompanyCode = @ParamCompanyCode
		and
		a.EmployeeID = @ParamEmployeeID
		and
		a.AssignedDate <= @ParamAssignedDate
	order by 
		a.AssignedDate desc;

	set @DepartmentCode = (
		select top 1
			a.DeptCode
		from
			@TempTablePosition a
	);

	set @PositionCode = (
		select top 1
			a.PosCode
		from
			@TempTablePosition a
	);

	if @PositionCode = @TrainingPosCode and @DepartmentCode = @TrainingDeptCode
	begin
		set @CorrelatedBranchCode = (
			select top 1
				a.BranchCode
			from
				@TempTablePosition a
		);

		if @DepartmentCode = 'SALES' and @PositionCode = 'S'
		begin
			set @GradeCode = (
				select top 1
					a.HistoryGrade
				from
					SfEmployeeGradeHistory a
				where
					a.CompanyCode like ('%' + @ParamCompanyCode + '%')
					and
					a.EmployeeID = @ParamEmployeeID
					and
					a.AssignedDate <= @ParamAssignedDate
				order by
					a.AssignedDate desc
			);	

			if @GradeCode != @TrainingGradeCode
			begin
				set @CorrelatedBranchCode = '';
			end
		end
	end

	return @PositionCode;
end
GO
CREATE FUNCTION [dbo].[GetCompanyMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @CompanyMD AS VARCHAR(15)
	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @CompanyMD
END
GO
CREATE FUNCTION [dbo].[GetBrancheMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @BranchMD AS VARCHAR(15)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @BranchMD
END
GO
-- Returns the list of columns in the index 
CREATE FUNCTION [dbo].[GetIndexColumns] 
( 
    @table_name SYSNAME, 
    @object_id INT, 
    @index_id TINYINT 
) 
RETURNS NVARCHAR(4000) 
AS 
BEGIN 
    DECLARE 
        @colnames NVARCHAR(4000),  
        @thisColID INT, 
        @thisColName SYSNAME 
         
    SET @colnames = INDEX_COL(@table_name, @index_id, 1) 
        + dbo.GetIndexColumnOrder(@object_id, @index_id, 1) 
 
    SET @thisColID = 2 
    SET @thisColName = INDEX_COL(@table_name, @index_id, @thisColID) 
        + dbo.GetIndexColumnOrder(@object_id, @index_id, @thisColID) 
 
    WHILE (@thisColName IS NOT NULL) 
    BEGIN 
        SET @thisColID = @thisColID + 1 
        SET @colnames = @colnames + ', ' + @thisColName 
 
        SET @thisColName = INDEX_COL(@table_name, @index_id, @thisColID) 
            + dbo.GetIndexColumnOrder(@object_id, @index_id, @thisColID) 
    END 
    RETURN @colNames 
END
GO
-- Returns whether the column is ASC or DESC 
CREATE FUNCTION [dbo].[GetIndexColumnOrder] 
( 
    @object_id INT, 
    @index_id TINYINT, 
    @column_id TINYINT 
) 
RETURNS NVARCHAR(5) 
AS 
BEGIN 
    DECLARE @r NVARCHAR(5) 
    SELECT @r = CASE INDEXKEY_PROPERTY 
    ( 
        @object_id, 
        @index_id, 
        @column_id, 
        'IsDescending' 
    ) 
        WHEN 1 THEN N' DESC' 
        ELSE N'' 
    END 
    RETURN @r 
END
GO
create function [dbo].[sfm_GetGradeHistoryCorrelatedSelectedPosition] (
	@ParamCompanyCode varchar(15) = '%',
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime
)
returns varchar(15)
as
begin
	declare @CorrelatedBranchCode varchar(15);
	declare @TempTable table (
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		PosCode varchar(15)
	);
	declare @SelectedPosition varchar(15);
	
	delete from @TempTable;
	
	insert into @TempTable
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.HistoryPosCode		
	from 
		SfEmployeeTitleHistory a
	where
		a.CompanyCode like ('%' + @ParamCompanyCode + '%')
		and
		a.EmployeeID = @ParamEmployeeID
		--and
		--a.HistoryDeptCode = 'SALES'
		--and
		--a.HistoryPosCode = 'S'	
		--and		
		--a.IsValid = 1
		and
		a.AssignedDate <= @ParamAssignedDate
	order by a.AssignedDate desc		
	
	declare @PositionCode varchar(15);
	set @PositionCode = (
		select top 1 PosCode from @TempTable
	);	
	
	if @PositionCode = 'S'
	begin
		set @CorrelatedBranchCode = (
			select BranchCode from @TempTable
		);
	end
	else
	begin
		delete from @TempTable;
	
		insert into @TempTable
		select top 1
			x.CompanyCode,
			x.BranchCode, 
			x.EmployeeID,
			x.PosCode		
		from 
			gnMstEmployeeData x
		where
			x.CompanyCode = @ParamCompanyCode
			and
			x.EmployeeID = @ParamEmployeeID
			and
			x.EmpJoinDate <= @ParamAssignedDate
			and
			ISNULL(x.OrgCode, '') != ''
		order by
			x.CreatedDate desc;
			
		set @PositionCode = (
			select top 1 PosCode from @TempTable
		);
			
		if @PositionCode = 'S'
		begin
			set @CorrelatedBranchCode = (
				select top 1 BranchCode from @TempTable
			);
		end
		else
		begin
			set @CorrelatedBranchCode = '';
			set @SelectedPosition = (
				select top 1 PosCode from @TempTable
			);
		end
	end
	
	return @SelectedPosition;
end;
GO
create function [dbo].[uspfn_IsNullOrEmpty] (
	@paramString varchar(200)
)
returns bit
as
begin
	declare @status bit;
	set @status = 0;

	if isnull(@paramString, '') = ''
	begin
		set @status = 1;
	end
	else
	begin
		set @status = 0;
	end

	if dbo.uspfn_trim(@paramString) = ''
	begin
		set @status = 1;
	end
	else
	begin
		set @status = 0;
	end

	return @status;
end
GO
CREATE function [dbo].[uspfn_CalculateMinute] (
	@Time1 char(5),
	@Time2 char(5)
)
returns int
as
begin
	declare @Difference int;
	set @Difference = DATEDIFF(minute, @Time1, @Time2);
	return abs(@Difference);
end
GO
create function [dbo].[uspfn_trim] (
	@paramString varchar(200)
)
returns varchar(200)
as
begin
	return ltrim(rtrim(@paramString));
end;
GO
create function [dbo].[uspfn_MinuteToTime] (
	@Minute int
)
returns varchar(5)
as

begin
	declare @Result char(5);

	if @Minute != 0 and @Minute != '0'
		set @Result = dateadd(minute, @Minute, '00:00')
	else
		set @Result='';

	return @Result;
end
GO
CREATE FUNCTION [dbo].[SplitLineString] 
( 
    @string NVARCHAR(MAX), 
    @delimiter CHAR(1) 
) 
RETURNS @output TABLE(splitdata NVARCHAR(MAX) 
) 
BEGIN 
    DECLARE @start INT, @end INT 
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string) 
    WHILE @start < LEN(@string) + 1 BEGIN 
        IF @end = 0  
            SET @end = LEN(@string) + 1
       
        INSERT INTO @output (splitdata)  
        VALUES(SUBSTRING(@string, @start, @end - @start)) 
        SET @start = @end + 1 
        SET @end = CHARINDEX(@delimiter, @string, @start)
        
    END 
    RETURN 
END
GO
create function [dbo].[sfm_GetTitleHistoryCorrelatedBranch] (
	@ParamCompanyCode varchar(15),
	@ParamEmployeeID varchar(15),
	@ParamAssignedDate datetime
)
returns varchar(15)
as
begin
	declare @CorrelatedBranch varchar(15);

	set @CorrelatedBranch = (
		select top 1
			a.MutationTo
		from
			gnMstEmployeeMutation a
		where
			a.CompanyCode = @ParamCompanyCode
			and
			a.EmployeeID = @ParamEmployeeID
			and
			CONVERT(varchar(21), a.MutationDate) <= CONVERT(varchar(21), @ParamAssignedDate)
			--and
			--a.IsValid = 1
		order by 
			a.MutationDate desc				
	);

	if ISNULL(@CorrelatedBranch, '') = ''
	begin										 
		set @CorrelatedBranch = (
			select top 1
				a.BranchCode
			from
				gnMstEmployee a
			where
				--a.CreatedDate <= @ParamAssignedDate
				--or
				a.JoinDate <= @ParamAssignedDate
				and
				a.EmployeeID = @ParamEmployeeID
				--and
				--ISNULL(a.OrgCode, '') != ''
			order by
				a.CreatedDate desc
		);
		
		--select 'Branch found at employee data';
	end;
	
	return @CorrelatedBranch;
end
GO
create FUNCTION [dbo].[uspfn_AbSplitString] (
	@String varchar(max), @Delimiter char(1)
)
returns @temptable TABLE (Part varchar(8000))
as
begin
	declare @idx int
	declare @slice varchar(8000)

	select @idx = 1

	if len(@String)<1 or @String is null return

	while @idx!= 0
	begin
		set @idx = charindex(@Delimiter,@String)
		if @idx!=0
			set @slice = left(@String,@idx - 1)
		else
			set @slice = @String

		if(len(@slice)>0)
			insert into @temptable(Part) values(@slice)

		set @String = right(@String,len(@String) - @idx)
		if len(@String) = 0 break
	end
	return 
end
GO
create FUNCTION [dbo].[SplitString]
(  
 @RowData nvarchar(MAX),
 @SplitOn nvarchar(5),
 @Index int
)    
RETURNS @ReturnValue TABLE   
(Data NVARCHAR(MAX))   
AS
BEGIN
 Declare @Counter int
 Set @Counter = 1 
 While (Charindex(@SplitOn,@RowData)>0) 
 Begin  
  --Insert Into @ReturnValue (data)  
  --Select Data = 
  --    ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))
  Set @RowData = 
      Substring(@RowData,Charindex(@SplitOn,@RowData)+1,len(@RowData)) 

  if @Counter=@Index
  begin
	  Insert Into @ReturnValue (data)  
	  Select Data = 
		  ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))
  end

  Set @Counter = @Counter + 1  
 End 


 --Insert Into @ReturnValue (data)  
 --Select Data = ltrim(rtrim(@RowData))  
 Return  
END
GO
CREATE FUNCTION [dbo].[GetWarehouseMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @WarehouseMD AS VARCHAR(15)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @WarehouseMD
END
GO
CREATE VIEW [dbo].[SvChassicView]
AS
select a.CompanyCode, a.ChassisCode, cast(a.ChassisNo as varchar) ChassisNo, a.EngineCode, a.SalesModelYear
     , cast(a.EngineNo as varchar) EngineNo, a.ServiceBookNo
     , case a.PoliceRegistrationDate when ('19000101') then NULL else a.PoliceRegistrationDate end as PoliceRegistrationDate
     , a.PoliceRegistrationNo, FakturPolisiNo, d.FakturPolisiDate
     , case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
     , b.BasicModel
    -- , b.TechnicalModelCode
     , b.TransmissionType
     , a.ColourCode
     , c.CustomerCode
  from omMstVehicle a
  left join omMstModel b
    on b.CompanyCode = a.CompanyCode
   and b.SalesModelCode = a.SalesModelCode
  left join omTrSalesInvoice c
    on c.CompanyCode = a.CompanyCode
   and c.InvoiceNo = a.InvoiceNo
  LEFT JOIN svMstCustomerVehicle d
	ON a.CompanyCode = d.CompanyCode 
	AND a.ChassisCode = d.ChassisCode 
	AND a.ChassisNo = d.ChassisNo
 where --a.ChassisCode = 'MA3GXB72SE0' AND a.ChassisNo='477379' and--a.CompanyCode = @CompanyCode
    a.IsActive = 1
GO
CREATE VIEW [dbo].[SvCBasmodView]
AS

Select CompanyCode, ProductType, RefferenceCode, RefferenceCode AS BasicModel, DescriptionEng AS TechnicalModelCode, 
Description AS ModelDescription, CASE IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status 
from svMstrefferenceService
WHERE --a.CompanyCode = '6006406' AND a.ProductType = '4W' AND 
RefferenceType = 'BASMODEL' --AND RefferenceCode = 'JB424AT' AND CompanyCode = '6006406'
GO
CREATE view [dbo].[SvClubTable]

as 

select distinct a.CompanyCode, e.BranchCode,
 a.PoliceRegNo
,a.CustomerCode
,b.CustomerName
,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
, b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
,a.DealerCode
,c.CustomerName DealerName
, (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
,a.ChassisCode
,  cast(a.ChassisNo as varchar) ChassisNo
,a.EngineCode
,  cast(a.EngineNo as varchar) EngineNo
,a.ServiceBookNo
,a.ClubCode
,a.ColourCode
,case a.FakturPolisiDate when ('19000101') then null else a.FakturPolisiDate end FakturPolisiDate
,a.ClubNo --ClubDateStart, ClubDateFinish, ClubSince
,case a.ClubDateStart when ('19000101') then null else a.ClubDateStart end ClubDateStart
,case a.ClubDateFinish when ('19000101') then null else a.ClubDateFinish end ClubDateFinish
,case a.ClubSince when ('19000101') then null else a.ClubSince end ClubSince
, (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
,a.IsClubStatus
, (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
,a.IsActive as IsActiveP
, (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
,a.BasicModel
,a.TransmissionType
,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
,a.LastJobType
--,a.ChassisNo
,a.ContractNo
,a.ContactName
,b.CityCode
,f.LookUpValueName CityName
from svMstCustomerVehicle a
left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	and b.CustomerCode = a.CustomerCode
left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	and c.CustomerCode = a.DealerCode
left join svMstJob d on 
	d.CompanyCode = a.CompanyCode and
	d.BasicModel = a.BasicModel 	
inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
left join gnMstLookupDtl f on 
    f.CompanyCode = a.CompanyCode and
    f.CodeID = 'CITY' and
    f.LookUpValue = b.CityCode
    WHERE --ClubCode = 'KLB/11/000002'
   -- AND a.CompanyCode = '6006406'
    --AND BranchCode = '6006400'
    a.IsActive='1'
GO
CREATE VIEW [dbo].[SvClaimJudgement4LookupView]
AS
	SELECT
		a.*,
		b.SenderDealerCode, 
		b.SenderDealerName,
		b.ReceiveDealerCode,
		b.LotNo,
		b.BatchNo
	FROM 
		SvTrnClaimJudgement a,
		SvTrnClaim b
GO
CREATE VIEW [dbo].[SvBasicModelView]
AS
SELECT        TOP (100) PERCENT CompanyCode, ProductType, RefferenceType, RefferenceCode, Description, DescriptionEng, 
                         CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS IsActive
FROM            dbo.svMstRefferenceService WITH (Nolock, Nowait)
WHERE        (RefferenceType = 'BASMODEL')
GO
CREATE view [dbo].[SvBasicModelPekerjaan]

as 

Select a.CompanyCode, ProductType, a.RefferenceCode AS BasicModel, a.DescriptionEng AS TechnicalModelCode,
a.Description AS ModelDescription, 
CASE a.IsActive WHEN '1' THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status from svMstrefferenceService a
WHERE a.RefferenceType = 'BASMODEL'
GO
CREATE view [dbo].[SvCampaignView]

as 


select
a.CompanyCode, a.ProductType,
 a.ComplainCode
,a.DefectCode
,a.ChassisCode
,a.ChassisStartNo
,a.ChassisEndNo
,a.OperationNo
,a.CloseDate
,case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as Status
,a.IsActive
,a.Description    
from svMstCampaign a
where a.ComplainCode in (select RefferenceCode from svMstRefferenceService where RefferenceType='COMPLNCD')
  and a.DefectCode in (select RefferenceCode from svMstRefferenceService where RefferenceType='DEFECTCD')
GO
CREATE view [dbo].[SvBillTypeView]  
as   
  select distinct
 a.CompanyCode, a.BillType,a.Description,a.CustomerCode,b.CustomerName
,(b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4) as CustomerAddress
,case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as StatusDesc, IsActive
from svMstBillingType a 
left join gnMstCustomer b
  on b.CompanyCode = a.CompanyCode
 and b.CustomerCode = a.CustomerCode
GO
CREATE VIEW [dbo].[SvClubView]
AS
select CompanyCode, ClubCode as ClubCodeStr, --replace(convert(varchar, CreatedDate, 106),' ','-') as CreatedDate, 
CreatedDate,
Description, 
LaborDiscPct, PartDiscPct, MaterialDiscPct,
case IsActive when 1 then 'Aktif' else 'Tidak Aktif' end as IsActiveStr, IsActive
from svMstClub
GO
CREATE VIEW [dbo].[SvTrnInvoiceCancelView]
AS

SELECT 
	Invoice.CompanyCode, Invoice.BranchCode, Invoice.ProductType, Invoice.InvoiceNo
	,isnull(Invoice.InvoiceDate,'19000101') InvoiceDate
	,Invoice.InvoiceStatus, Invoice.FPJNo, FPJ.FPJGovNo
	,isnull(Invoice.FPJDate,'19000101') FPJDate
	,Invoice.JobOrderNo
	,isnull(Invoice.JobOrderDate,'19000101') JobOrderDate
	,Invoice.JobType, Invoice.ChassisCode, Invoice.ChassisNo, Invoice.EngineCode
	,Invoice.EngineNo, Invoice.PoliceRegNo, Invoice.BasicModel, Invoice.CustomerCode, Invoice.CustomerCodeBill
	,Invoice.Remarks, (Invoice.CustomerCode + ' - ' + Cust.CustomerName) as Customer
	,(Invoice.CustomerCodeBill + ' - ' + CustBill.CustomerName) as CustomerBill
	, Invoice.Odometer, Invoice.LaborDiscPct, Invoice.PartsDiscPct, Invoice.MaterialDiscPct
	, Invoice.LaborDppAmt, Invoice.PartsDppAmt, Invoice.MaterialDppAmt
	, Invoice.TotalDppAmt, Invoice.TotalPpnAmt, Invoice.TotalSrvAmt
	
	, vehicle.ServiceBookNo
	
	, isnull(CustBill.CustomerName, '') CustomerName, isnull(CustBill.Address1, '') Address1, isnull(CustBill.Address2, '') Address2
	, isnull(CustBill.Address3, '') Address3, isnull(CustBill.Address4, '') Address4, isnull(CustBill.PhoneNo, '') PhoneNo
	, isnull(CustBill.HPNo, '') HPNo, isnull(CustBill.NPWPNo, '') NPWPNo, isnull(CustBill.NPWPDate,'19000101') NPWPDate, isnull(CustBill.SKPNo, '') SKPNo
	, isnull(CustBill.SKPDate,'19000101') SKPDate, isnull(CustBill.CityCode, '') CityCode, isnull(CityCode.LookUpValueName, '') CityDesc
	
	, isnull(CustProfCenter.TOPCode, '') TOPCode
	, isnull(TOPCode.LookUpValueName, '') TOPDesc
	
	, isnull(case AR.StatusFlag when '0' then 'Unposted' 
						 when '3' then 'Posted'
						 else 'Unknown' end, 'Unknown') StatusAR, isnull(AR.DebetAmt, 0) DebetAmt, isnull(AR.CreditAmt, 0) CreditAmt
    , isnull(AR.BlockAmt, 0) BlockAmt, isnull(AR.ReceiveAmt, 0) ReceiveAmt		
FROM svTrnInvoice Invoice
LEFT JOIN gnMstCustomer Cust
    ON Cust.CompanyCode = Invoice.CompanyCode AND Cust.CustomerCode = Invoice.CustomerCode
LEFT JOIN gnMstCustomer CustBill
    ON CustBill.CompanyCode = Invoice.CompanyCode AND CustBill.CustomerCode = Invoice.CustomerCodeBill
LEFT JOIN svMstcustomerVehicle vehicle 
	ON Invoice.CompanyCode = vehicle.CompanyCode and Invoice.ChassisCode = vehicle.ChassisCode and 
	Invoice.ChassisNo = vehicle.ChassisNo and Invoice.EngineCode = vehicle.EngineCode and 
	Invoice.EngineNo = vehicle.EngineNo and Invoice.BasicModel = vehicle.BasicModel	
LEFT JOIN svTrnFakturPajak FPJ 
	ON FPJ.CompanyCode = Invoice.CompanyCode
	AND FPJ.BranchCode = Invoice.BranchCode
	AND FPJ.FPJNo = Invoice.FPJNo
LEFT JOIN gnMstCustomerProfitCenter CustProfCenter
	ON CustProfCenter.CompanyCode = Invoice.CompanyCode
	AND CustProfCenter.BranchCode = Invoice.BranchCode
	AND CustProfCenter.CustomerCode = Invoice.CustomerCodeBill
	AND ProfitCenterCode = '200'
LEFT JOIN gnMstLookupDtl TOPCode
	ON TOPCode.CompanyCode = Invoice.CompanyCode
	AND TOPCode.CodeID = 'TOPC'
	AND TOPCode.LookupValue = CustProfCenter.TOPCode
LEFT JOIN gnMstLookupDtl CityCode
	ON CityCode.CompanyCode = Invoice.CompanyCode
	AND CityCode.CodeID = 'CITY'
	AND CityCode.LookupValue = CustBill.CityCode
LEFT JOIN ARInterface AR 
	ON AR.CompanyCode = Invoice.CompanyCode
	AND AR.BranchCode = Invoice.BranchCode
	AND AR.DocNo = Invoice.InvoiceNo
WHERE
EXISTS (
    select * from glInterface
     where CompanyCode = Invoice.CompanyCode
       and BranchCode = Invoice.BranchCode
       and DocNo = Invoice.InvoiceNo
       and StatusFlag  = 0
    )
AND (NOT EXISTS (
    select * from arInterface
     where CompanyCode = Invoice.CompanyCode
       and BranchCode = Invoice.BranchCode
       and DocNo = Invoice.InvoiceNo
    ) 
    OR EXISTS (
    select * from arInterface
     where CompanyCode = Invoice.CompanyCode
       and BranchCode = Invoice.BranchCode
       and DocNo = Invoice.InvoiceNo
       and StatusFlag  = 0
       and ReceiveAmt  = 0
       and BlockAmt    = 0
       and DebetAmt    = 0
       and CreditAmt   = 0
    )
)
AND NOT EXISTS (
select * from svTrnFakturPajak
 where CompanyCode = Invoice.CompanyCode
   and BranchCode = Invoice.BranchCode
   and FPJNo = Invoice.FPJNo
   and isnull(FPJGovNo, '') <> '')
GO
CREATE VIEW [dbo].[SvDealerView]
AS
SELECT        TOP (100) PERCENT a.CompanyCode, b.BranchCode, b.ProfitCenterCode, a.CustomerCode, a.CustomerName, 
                         a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 AS Address, a.Address1, a.CustomerAbbrName, a.Address2, a.Address3, a.Address4, a.CityCode, 
                         d.LookUpValueName AS CityCodeDesc, a.PhoneNo, a.HPNo, a.FaxNo, e.LookUpValueName AS ProfitCenter, 
                         CASE Status WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM            dbo.gnMstCustomer AS a WITH (nolock, nowait) INNER JOIN
                         dbo.gnMstCustomerProfitCenter AS b WITH (nolock, nowait) ON b.CustomerCode = a.CustomerCode AND b.CompanyCode = a.CompanyCode LEFT OUTER JOIN
                         dbo.gnMstCustomerClass AS c WITH (nolock, nowait) ON c.ProfitCenterCode = b.ProfitCenterCode AND c.CustomerClass = b.CustomerClass AND 
                         c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode LEFT OUTER JOIN
                         dbo.gnMstLookUpDtl AS d WITH (nolock, nowait) ON d.CompanyCode = a.CompanyCode AND d.CodeID = 'CITY' AND d.LookUpValue = a.CityCode LEFT OUTER JOIN
                         dbo.gnMstLookUpDtl AS e WITH (nolock, nowait) ON e.CompanyCode = a.CompanyCode AND e.CodeID = 'PFCN' AND e.LookUpValue = b.ProfitCenterCode
WHERE        (b.isBlackList = 0) AND (a.Status = 1) AND (b.ProfitCenterCode = 200)
GO
CREATE FUNCTION [dbo].[GetDbMD] (@CompanyCode VARCHAR(15),@BranchCode VARCHAR(15)) 
RETURNS VARCHAR (20)
AS 
BEGIN
	DECLARE @DbMD varchar(20);
	SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	RETURN @DbMD
END
GO
CREATE view [dbo].[SvDefectView]

as 

/*SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as ComplainCode, Description as Ket, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'COMPLNCD'
*/
SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as DefectCode, Description as Keterangan, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'DEFECTCD'
GO
CREATE view [dbo].[SvComplainView]

as 

SELECT
CompanyCode, ProductType, RefferenceType, RefferenceCode as ComplainCode, Description as Keterangan, DescriptionEng,
CASE IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
FROM      
svMstRefferenceService
WHERE RefferenceType = 'COMPLNCD'
GO
CREATE VIEW [dbo].[SvColorView]
AS

/*select CompanyCode, RefferenceCode as ColourCode, RefferenceDesc1, RefferenceDesc2 
from omMstRefference
where --CompanyCode = '6006406' and 
RefferenceType = 'COLO' 
--order by RefferenceDesc1
*/   
SELECT CompanyCode, RefferenceCode, RefferenceCode as ColourCode, RefferenceDesc1, RefferenceDesc2 FROM omMstRefference WHERE RefferenceType = 'COLO'
GO
CREATE VIEW [dbo].[VW_TREEMENUS]
AS
select moduleid MenuId, ModuleCaption MenuCaption,NULL MenuHeader,ModuleIndex MenuIndex,0 MenuLevel,'' MenuUrl from sysmodule
UNION
select MenuId, MenuCaption, MenuHeader,MenuIndex, MenuLevel, MenuUrl from sysmenudms
GO
CREATE view [dbo].[SvCustomerDetailView]

as 

SELECT a.CustomerCode, a.CompanyCode, a.CustomerName , a.Address1, a.Address2, a.Address3, a.Address4, 
a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 AS Address,
CASE a.Status WHEN 1 THEN 'Aktif' ELSE 'TIdak Aktif' END AS Status, HPNo, FaxNo, e.ProfitCenterCode
  FROM gnMstCustomer a with(nolock, nowait)
  inner join gnMstCustomerProfitCenter e on 
    e.CompanyCode = a.CompanyCode and
    e.CustomerCode = a.CustomerCode
GO
CREATE VIEW [dbo].[RefferenceTypeView]
AS
SELECT distinct(a.RefferenceType)  AS RefferenceType
	FROM dbo.omMstRefference a 
	UNION
	SELECT distinct(b.RefferenceCode)  AS RefferenceType
	FROM dbo.omMstRefference b
	WHERE b.RefferenceType = 'REFF'
GO
CREATE VIEW [dbo].[vAllIndexes]  
AS 
    SELECT  
        TABLE_NAME = OBJECT_NAME(i.id), 
        INDEX_NAME = i.name, 
        COLUMN_LIST = dbo.GetIndexColumns(OBJECT_NAME(i.id), i.id, i.indid), 
        IS_CLUSTERED = INDEXPROPERTY(i.id, i.name, 'IsClustered'), 
        IS_UNIQUE = INDEXPROPERTY(i.id, i.name, 'IsUnique'), 
        FILE_GROUP = g.GroupName 
    FROM 
        sysindexes i 
    INNER JOIN 
        sysfilegroups g 
    ON 
        i.groupid = g.groupid 
    WHERE 
        (i.indid BETWEEN 1 AND 254) 
        -- leave out AUTO_STATISTICS: 
        AND (i.Status & 64)=0 
        -- leave out system tables: 
        AND OBJECTPROPERTY(i.id, 'IsMsShipped') = 0
GO
CREATE view [dbo].[RptAdjustmentNoBrowse]  as    

SELECT c.CompanyCode, c.BranchCode, c.AdjustmentNo, c.AdjustmentDate, c.ReferenceNo, 
c.ReferenceDate, c.TypeOfGoods
FROM SpTrnIAdjustHdr c with(nolock,nowait)
WHERE c.Status <> '3'
GO
CREATE VIEW [dbo].[View_1]
AS
SELECT        TOP (1500) Invoice.ProductType, Invoice.InvoiceNo, Invoice.BranchCode, CASE Invoice.InvoiceDate WHEN ('19000101') THEN NULL 
                         ELSE Invoice.InvoiceDate END AS InvoiceDate, Invoice.InvoiceStatus, Invoice.FPJNo, CASE Invoice.FPJDate WHEN ('19000101') THEN NULL 
                         ELSE Invoice.FPJDate END AS FPJDate, Invoice.JobOrderNo, CASE Invoice.JobOrderDate WHEN ('19000101') THEN NULL 
                         ELSE Invoice.JobOrderDate END AS JobOrderDate, Invoice.JobType, Invoice.ChassisCode, Invoice.ChassisNo, Invoice.EngineCode, Invoice.EngineNo, 
                         Invoice.PoliceRegNo, Invoice.BasicModel, Invoice.CustomerCode, Invoice.CustomerCodeBill, Invoice.Remarks, 
                         Invoice.CustomerCode + ' - ' + Cust.CustomerName AS Customer, Invoice.CustomerCodeBill + ' - ' + CustBill.CustomerName AS CustomerBill, 
                         vehicle.ServiceBookNo, Invoice.Odometer
FROM            dbo.svTrnInvoice AS Invoice LEFT OUTER JOIN
                         dbo.gnMstCustomer AS Cust ON Cust.CompanyCode = Invoice.CompanyCode AND Cust.CustomerCode = Invoice.CustomerCode LEFT OUTER JOIN
                         dbo.gnMstCustomer AS CustBill ON CustBill.CompanyCode = Invoice.CompanyCode AND CustBill.CustomerCode = Invoice.CustomerCodeBill LEFT OUTER JOIN
                         dbo.svMstCustomerVehicle AS vehicle ON Invoice.CompanyCode = vehicle.CompanyCode AND Invoice.ChassisCode = vehicle.ChassisCode AND 
                         Invoice.ChassisNo = vehicle.ChassisNo AND Invoice.EngineCode = vehicle.EngineCode AND Invoice.EngineNo = vehicle.EngineNo AND 
                         Invoice.BasicModel = vehicle.BasicModel LEFT OUTER JOIN
                         dbo.svMstFscCampaign AS fsc ON fsc.CompanyCode = Invoice.CompanyCode AND fsc.ChassisCode = Invoice.ChassisCode AND fsc.ChassisNo = Invoice.ChassisNo
GO
CREATE VIEW [dbo].[omTrSalesDraftSOLookupView]
AS
SELECT a.CompanyCode, a.BranchCode, a.DraftSONo, 
    CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
    then '' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
    e.Address1 + ' ' + e.Address2 + ' ' + e.Address3 + ' ' + e.Address4 as Address,
    a.RefferenceNo, a.SKPKNo, a.DraftSODate, (a.CustomerCode
        + ' || '
        + (SELECT b.CustomerName
            FROM gnMstCustomer b
            WHERE a.CompanyCode = b.CompanyCode
		    AND a.CustomerCode = b.CustomerCode))  
		    AS Customer, (a.Salesman
        + ' || '
        + (SELECT c.EmployeeName
            FROM gnMstEmployee c
            WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
	        AND a.Salesman = c.EmployeeID))  AS Salesman, (a.GroupPriceCode
        + ' || '
        + (SELECT d.RefferenceDesc1
            FROM omMstRefference d
            WHERE a.CompanyCode = d.CompanyCode
		    AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPriceCode, 
    CASE a.Status when 0 then 'OPEN'
                    when 1 then 'PRINTED'
                    when 2 then 'APPROVED'
                    when 3 then 'DELETED'
                    when 4 then 'REJECTED'
                    when 9 then 'FINISHED' END as Stat
    , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales
FROM omTrSalesDraftSO a
    INNER JOIN gnMstCustomer e
        ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode
--WHERE a.CompanyCode = '6006410' AND a.BranchCode = '600641001'
GO
create view [dbo].[SysModuleView] 
as
select
	a.ModuleId,
	a.ModuleCaption,
	a.ModuleIndex,
	a.ModuleUrl,
	a.InternalLink,
	a.IsPublish,
	InternalLinkDescription = (
		case 
			when a.InternalLink=1 then 'Yes'
			else 'No'
		end 
	),
	IsPublishDescription = (
		case 
			when a.IsPublish=1 then 'Yes'
			else 'No'
		end
	)
from
	SysModule a
GO
CREATE view [dbo].[PmKdpClnUpView]
with schemabinding
as

select a.CompanyCode, a.BranchCode, a.InquiryNumber, convert(varchar, a.InquiryNumber, 100) InquiryNumberStr, InquiryDate, convert(varchar, a.InquiryDate, 103) InquiryDateStr, a.NamaProspek, 
a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode, a.PerolehanData, c.EmployeeID, c.EmployeeID + ' - ' + c.EmployeeName Wiraniaga, 
d.EmployeeID SpvEmployeeID, d.EmployeeID + ' - ' + d.EmployeeName Coordinator, a.LastProgress, 
(select top 1 NextFollowUpDate from dbo.pmActivities where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber order by NextFollowUpDate desc) NextFollowUpDate,
(select top 1 convert(varchar, NextFollowUpDate, 103) from dbo.pmActivities where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber order by NextFollowUpDate desc) NextFollowUpDateStr
from dbo.pmKDP a
inner join dbo.gnMstEmployee c on
	a.CompanyCode = c.CompanyCode 
	and a.BranchCode = c.BranchCode
	and a.EmployeeID = c.EmployeeID
inner join dbo.gnMstEmployee d on
	a.CompanyCode = d.CompanyCode 
	and a.BranchCode = d.BranchCode
	and a.SpvEmployeeID = d.EmployeeID	
where a.LastProgress in ('P', 'HP', 'SPK')
GO
create view [dbo].[SysUserView]
as
select a.UserId
     , a.FullName
     , a.Email
     , a.CompanyCode
     , a.BranchCode
	 , d.CompanyName as BranchName
     , a.TypeOfGoods
     , a.IsActive
     , b.RoleId
     , c.RoleName
	 , a.RequiredChange
	 , e.ProfitCenter
  from SysUser a
  left join SysRoleuser b 
    on b.UserId = a.UserId
  left join sysRole c 
    on c.RoleId = b.RoleId
  left join gnMstCoProfile d
    on d.CompanyCode = a.CompanyCode
   and d.BranchCode = a.BranchCode
   left join sysUserProfitCenter e
   on e.UserID = a.UserID
GO
create view [dbo].[vtemp] as 
SELECT 
		a.CompanyCode,a.BranchCode	,a.InvoiceNo	,a.InvoiceDate	,a.SONo	,a.CustomerCode	,a.BillTo	,a.FakturPajakNo	
		,a.FakturPajakDate	,a.DueDate	,a.isStandard	,a.Remark	,a.Status,b.CustomerName,c.SalesType, 
		CASE ISNULL(c.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales
FROM 
		omTrSalesInvoice a
		LEFT JOIN gnMstCustomer b
		ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
		LEFT JOIN gnMstCustomerProfitCenter c
		ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = '100'
GO
CREATE VIEW [dbo].[vw_index_list] AS
SELECT tbl.[name] AS TableName,
	idx.[name] AS IndexName,
	INDEX_COL( tbl.[name], idx.indid, 1 ) AS col1,
	INDEX_COL( tbl.[name], idx.indid, 2 ) AS col2,
	INDEX_COL( tbl.[name], idx.indid, 3 ) AS col3,
	INDEX_COL( tbl.[name], idx.indid, 4 ) AS col4,
	INDEX_COL( tbl.[name], idx.indid, 5 ) AS col5,
	INDEX_COL( tbl.[name], idx.indid, 6 ) AS col6,
	INDEX_COL( tbl.[name], idx.indid, 7 ) AS col7,
	INDEX_COL( tbl.[name], idx.indid, 8 ) AS col8,
	INDEX_COL( tbl.[name], idx.indid, 9 ) AS col9,
	INDEX_COL( tbl.[name], idx.indid, 10 ) AS col10,
	INDEX_COL( tbl.[name], idx.indid, 11 ) AS col11,
	INDEX_COL( tbl.[name], idx.indid, 12 ) AS col12,
	INDEX_COL( tbl.[name], idx.indid, 13 ) AS col13,
	INDEX_COL( tbl.[name], idx.indid, 14 ) AS col14,
	INDEX_COL( tbl.[name], idx.indid, 15 ) AS col15,
	INDEX_COL( tbl.[name], idx.indid, 16 ) AS col16,
	dpages,
	used,
	rowcnt
FROM SYSINDEXES idx
INNER JOIN SYSOBJECTS tbl ON idx.[id] = tbl.[id]
WHERE indid > 0
	AND INDEXPROPERTY( tbl.[id], idx.[name], 'IsStatistics') = 0
GO
CREATE view [dbo].[RptClaimReceivedNo]  as    

  SELECT CompanyCode, BranchCode, ClaimReceivedNo
    ,ClaimNo    
    ,ClaimReceivedDate, TypeOfGoods   
  FROM spTrnPRcvClaimHdr 
 WHERE (Status = '2' OR Status = '8')
GO
CREATE VIEW [dbo].[vw_spMasterItemBrowse]
AS
SELECT 
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = Items.CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,ItemInfo.SupplierCode
,Supplier.SupplierName
,Items.TypeOfGoods aaa
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = Items.CompanyCode) AS TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode
GO
CREATE view [dbo].[RptFPJNoBrowse]  as    

  select CompanyCode, BranchCode, FPJNo, FPJDate, PickingSlipNo, PickingSlipDate, InvoiceNo, InvoiceDate, TypeOfGoods
                from	    spTrnSFPJHdr
GO
create view [dbo].[vw_GnCheckTax]
as

select a.BranchCode, a.FPJNo, a.FPJDate, a.CustomerCodeBill, b.TaxTransCode
  from SpTrnSFPJHdr a
  left join gnMstCustomerProfitCenter b
    on b.BranchCode = a.BranchCode
   and b.CustomerCode = a.CustomerCodeBill
 where 1 = 1
   and a.IsPKP = 1 
   and isnull(a.FPJGovNo, '') = ''
   and b.ProfitCenterCode = '300'
   
union all
   
select a.BranchCode, a.FPJNo, a.FPJDate, a.CustomerCodeBill, b.TaxTransCode
  from SvTrnFakturPajak a  
  left join gnMstCustomerProfitCenter b
    on b.BranchCode = a.BranchCode
   and b.CustomerCode = a.CustomerCodeBill
 where 1 = 1
   and a.IsPKP = 1 
   and isnull(a.FPJGovNo, '') = ''
   and b.ProfitCenterCode = '200'
   
union all   

select a.BranchCode, a.InvoiceNo, a.InvoiceDate, a.CustomerCode, b.TaxTransCode
  from OmFakturPajakHdr a
  left join gnMstCustomerProfitCenter b
    on b.BranchCode = a.BranchCode
   and b.CustomerCode = a.CustomerCode
 where 1 = 1
   and a.TaxType = 'Standard'
   and isnull(a.FakturPajakNo, '') = ''
   and b.ProfitCenterCode = '100'
GO
CREATE view [dbo].[RptBinningBrowse]  as
    
SELECT CompanyCode, BranchCode, BinningNo, BinningDate, Status,ReferenceNo,DNSupplierNo, TypeOfGoods
FROM spTrnPBinnHdr WITH(NOLOCK, NOWAIT)
GO
CREATE view [dbo].[vw_GnCustomer]
as

-- select top 10  * from vw_GnCustomer where ProfitCenterCode = '200'
-- select * from gnMstCustomer

select a.CompanyCode, b.BranchCode
     , a.CustomerCode
     , a.CustomerName
     , a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 as CustAddress
     , a.Address1
     , a.CustomerAbbrName
     , a.Address2, a.Address3, a.Address4, a.CityCode
     , d.LookUpValueName as CityCodeDesc
     , a.PhoneNo, a.HPNo, a.FaxNo
     , e.LookupValueName as ProfitCenter
     , case Status when 1 then 'Aktif' else 'Tidak Aktif' end as Status
     , b.ProfitCenterCode
  from gnMstCustomer a with(nolock, nowait)
 inner join gnMstCustomerProfitCenter b with(nolock, nowait) 
    on b.CustomerCode = a.CustomerCode 
   and b.CompanyCode = a.CompanyCode
  left join gnMstCustomerClass c with(nolock, nowait) 
    on c.ProfitCenterCode = b.ProfitCenterCode 
   and c.CustomerClass = b.CustomerClass 
   and c.CompanyCode = b.CompanyCode
   and c.BranchCode = b.BranchCode
  left join gnMstLookUpDtl d with(nolock, nowait)
    on d.CompanyCode = a.CompanyCode
   and d.CodeID = 'CITY'
   and d.LookUpValue = a.CityCode
  left join gnMstLookUpDtl e with(nolock, nowait)
    on e.CompanyCode = a.CompanyCode
   and e.CodeID = 'PFCN'
   and e.LookUpValue = b.ProfitCenterCode
 where b.IsBlackList = 0 
   and a.Status = 1
   and a.CategoryCode not in ('00', '01')
GO
CREATE view [dbo].[RptClaimNo]  as    

  SELECT DISTINCT a.CompanyCode, a.BranchCode, a.ClaimNo, ClaimDate, a.TypeOfGoods
  FROM spTrnPClaimHdr a
JOIN spTrnPClaimDtl b ON a.CompanyCode = b.CompanyCode
AND a.BranchCode = b.BranchCode
AND a.ClaimNo = b.ClaimNo
GO
CREATE VIEW [dbo].[OmTrPurchasePOSelect4BPUView]
AS
SELECT PO.*, sup.SupplierName FROM omTrPurchasePO PO
LEFT JOIN gnMstSupplier sup ON PO.CompanyCode = sup.CompanyCode
AND PO.SupplierCode = sup.SupplierCode
WHERE (
	SELECT SUM(ISNULL(QuantityPO, 0)) - SUM(ISNULL(QuantityBPU, 0)) 
	FROM omTrPurchasePOModel
	WHERE CompanyCode = PO.CompanyCode AND BranchCode = PO.BranchCode
	AND PONo = PO.PONo
) > 0
GO
CREATE VIEW [dbo].[OmSelectReffSJBookingView]
AS 
	SELECT a.CompanyCode, a.BranchCode, a.BatchNo, b.DONo, b.DODate, b.SJNo, b.SJDate, b.SKPNo, a.DealerCode, 
		(select SupplierName from gnMstSupplier where supplierCode = c.supplierCode) as DealerName,
		c.PONo, c.ShipTo, c.SupplierCode
	FROM OmUtlSSJALHdr a
		inner join OmUtlSSJALDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.BatchNo=b.BatchNo
		inner join omTrPurchasePO c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
			and c.RefferenceNo = b.SKPNo
	WHERE 1=1
		--and a.CompanyCode= convert(varchar,@CompanyCode)
		--and a.BranchCode= convert(varchar,@BranchCode)
		--and a.RcvDealerCode = convert(varchar,@CompanyCode)
		and c.status = '2'
		and b.Status = '0'
		and b.IsBlokir = 'Y'
		and not exists (
			select 1 from omTrPurchaseBPU 
			where 1=1
				and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode
				and RefferenceDONo= b.DONO
				and RefferenceSJNo= b.SJNO
				and Status <> '3'
		)
GO
CREATE VIEW [dbo].[SvTrnPOSubConView]
AS
SELECT a.CompanyCode, a.BranchCode, a.ProductType, 
     a.PONo, a.PODate, a.JobOrderNo, a.JobOrderDate, 
     a.SupplierCode, b.SupplierName, a.PODisc, 
     a.ServiceAmt, c.RefferenceCode, a.POStatus, 
     c.Description
FROM dbo.svTrnPoSubCon AS a LEFT OUTER JOIN
     dbo.gnMstSupplier AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.SupplierCode = a.SupplierCode LEFT OUTER JOIN
     dbo.svMstRefferenceService AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.ProductType = a.ProductType AND 
     c.RefferenceCode = a.POStatus AND 
     c.RefferenceType = 'PORRSTAT'
GO
CREATE VIEW [dbo].[OmSelectReffSJFalseView]
AS
	SELECT a.CompanyCode, a.BranchCode, a.BatchNo, b.DONo, b.DODate, b.SJNo, b.SJDate, b.SKPNo, a.DealerCode, 
		(select SupplierName from gnMstSupplier where supplierCode = c.supplierCode) as DealerName,
		c.PONo, c.ShipTo, c.supplierCode
	FROM OmUtlSSJALHdr a
		inner join OmUtlSSJALDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.BatchNo=b.BatchNo
		inner join omTrPurchasePO c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
			and c.RefferenceNo = b.SKPNo
	WHERE 1=1
		-- and a.CompanyCode= convert(varchar,@CompanyCode)
		-- and a.BranchCode= convert(varchar,@BranchCode)
		-- and a.RcvDealerCode = convert(varchar,@CompanyCode)
		and c.status = '2'
		and b.Status = '0'

	-- Atas Perintah Pa Andreas dan Bu Tetti
	-- POD : Seandy A.K.
	-- Tgl : 9/3/2013
	-- and b.IsBlokir = 'N'

	and not exists (
		select 1 from omTrPurchaseBPU 
		where 1=1
			and CompanyCode = a.CompanyCode and BranchCode = a.BranchCode
			and RefferenceDONo= b.DONO
			and RefferenceSJNo= b.SJNO
			and Status <> '3'
	)
GO
CREATE VIEW [dbo].[SvTrnSenderDealerView]
AS
SELECT a.CompanyCode, b.BranchCode, a.CustomerCode, 
     a.CustomerName, a.CustomerAbbrName, 
     a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4
      AS Address, a.Address1, a.Address2, a.Address3, 
     a.Address4, a.CityCode, 
     d.LookUpValueName AS CityCodeDesc, a.PhoneNo, 
     a.HPNo, a.FaxNo, b.ProfitCenterCode, 
     e.LookUpValueName AS ProfitCenter, 
     CASE Status WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END
      AS Status
FROM dbo.gnMstCustomer AS a WITH (nolock, nowait) 
     INNER JOIN
     dbo.gnMstCustomerProfitCenter AS b WITH (nolock, 
     nowait) ON b.CustomerCode = a.CustomerCode AND 
     b.CompanyCode = a.CompanyCode LEFT OUTER JOIN
     dbo.gnMstCustomerClass AS c WITH (nolock, nowait) 
     ON c.ProfitCenterCode = b.ProfitCenterCode AND 
     c.CustomerClass = b.CustomerClass AND 
     c.CompanyCode = b.CompanyCode AND 
     c.BranchCode = b.BranchCode LEFT OUTER JOIN
     dbo.gnMstLookUpDtl AS d WITH (nolock, nowait) ON 
     d.CompanyCode = a.CompanyCode AND 
     d.CodeID = 'CITY' AND 
     d.LookUpValue = a.CityCode LEFT OUTER JOIN
     dbo.gnMstLookUpDtl AS e WITH (nolock, nowait) ON 
     e.CompanyCode = a.CompanyCode AND 
     e.CodeID = 'PFCN' AND 
     e.LookUpValue = b.ProfitCenterCode
WHERE (b.isBlackList = 0)
GO
CREATE VIEW [dbo].[omMstModelPerlengkapanView]
AS
SELECT        a.CompanyCode, a.BranchCode, a.PerlengkapanCode, b.PerlengkapanName, a.Quantity, a.Remark, a.Status
FROM            dbo.omMstModelPerlengkapan AS a LEFT OUTER JOIN
                         dbo.omMstPerlengkapan AS b ON a.PerlengkapanCode = b.PerlengkapanCode AND a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode
GO
CREATE VIEW [dbo].[SvTrnPdiFscView]
AS
SELECT DISTINCT 
     a.CompanyCode, a.BranchCode, a.ProductType, 
     a.GenerateNo, a.GenerateDate, 
     ISNULL(a.FromInvoiceNo, '') AS FromInvoiceNo, 
     ISNULL(a.ToInvoiceNo, '') AS ToInvoiceNo, 
     CASE isnull(a.FromInvoiceNo, '') 
     WHEN '' THEN '' ELSE (rtrim(a.FromInvoiceNo) 
     + ' s/d ' + rtrim(a.ToInvoiceNo)) END AS Invoice, 
     a.FPJNo, CASE a.FPJDate WHEN ('19000101') 
     THEN NULL ELSE a.FPJDate END AS FPJDate, 
     a.FPJGovNo, a.SourceData, 
     b.Description AS SourceDataDesc, a.TotalNoOfItem, 
     a.TotalAmt, a.SenderDealerName, a.RefferenceNo, 
     CASE a.RefferenceDate WHEN ('19000101') 
     THEN NULL 
     ELSE a.RefferenceDate END AS RefferenceDate, 
     a.PostingFlag, c.Description AS PostingFlagDesc, 
     a.SenderDealerCode, d.CustomerName
FROM dbo.svTrnPdiFsc AS a WITH (nolock, nowait) 
     LEFT OUTER JOIN
     dbo.svMstRefferenceService AS b WITH (nolock, 
     nowait) ON b.CompanyCode = a.CompanyCode AND 
     b.ProductType = a.ProductType AND 
     b.RefferenceCode = a.SourceData AND 
     b.RefferenceType = 'SORCDATA' LEFT OUTER JOIN
     dbo.svMstRefferenceService AS c WITH (nolock, 
     nowait) ON c.CompanyCode = a.CompanyCode AND 
     c.ProductType = a.ProductType AND 
     c.RefferenceCode = a.PostingFlag AND 
     c.RefferenceType = 'POSTFLAG' LEFT OUTER JOIN
     dbo.gnMstCustomer AS d ON 
     d.CompanyCode = a.CompanyCode AND 
     d.CustomerCode = a.SenderDealerCode
GO
CREATE VIEW [dbo].[OmSelectReffNoView]
AS 
	select a.*,b.DONo,b.DODate,b.SKPNo,c.PONo,c.PODate,c.RefferenceNo,c.RefferenceDate
		,c.SupplierCode,c.BillTo,c.ShipTo,c.Remark
		,(select z.SupplierName from GnMstSupplier z where a.DealerCode = z.SupplierCode) as DealerName
	from OmUtlSDORDHdr a
		inner join omUtlSDORDDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.BatchNo=b.BatchNo
		inner join omTrPurchasePO c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
			and c.RefferenceNo = b.SKPNo
	where 1=1 
		--and a.CompanyCode = convert(varchar,@CompanyCode)
		--and a.BranchCode = convert(varchar,@BranchCode)
	--	and a.RcvDealerCode = convert(varchar,@CompanyCode)
		and c.Status = '2'
		and b.Status = '0'
		and not exists (
			select 1 from omTrPurchaseBPU d 
			where d.CompanyCode = a.CompanyCode and d.BranchCode = a.BranchCode 
				and d.RefferenceDONo=b.DONo
				and d.Status <> '3'
		)
GO
CREATE VIEW [dbo].[SvTrnPOSubConRcvView]
AS
SELECT DISTINCT 
     TOP (100) PERCENT a.CompanyCode, a.BranchCode, 
     a.ProductType, a.PONo, a.PODate, a.JobOrderNo, 
     a.JobOrderDate, a.SupplierCode, b.SupplierName, 
     a.PODisc, a.ServiceAmt, a.POStatus, c.Description, 
     a.RecNo, a.RecDate, a.FPJNo, a.FPJDate, 
     a.FPJGovNo
FROM dbo.svTrnPoSubCon AS a LEFT OUTER JOIN
     dbo.gnMstSupplier AS b ON 
     b.CompanyCode = a.CompanyCode AND 
     b.SupplierCode = a.SupplierCode LEFT OUTER JOIN
     dbo.svMstRefferenceService AS c ON 
     c.CompanyCode = a.CompanyCode AND 
     c.ProductType = a.ProductType AND 
     c.RefferenceCode = a.POStatus AND 
     c.RefferenceType = 'PORRSTAT'
GO
CREATE VIEW [dbo].[SvTrnServiceMechanicByJobOrderNoView]
AS
SELECT DISTINCT 
     dbo.svTrnService.CompanyCode, 
     dbo.svTrnService.BranchCode, 
     dbo.svTrnService.ProductType, 
     dbo.svTrnService.ServiceNo, 
     dbo.svTrnService.ServiceType, 
     dbo.svTrnService.ForemanID, 
     dbo.svTrnService.EstimationNo, 
     dbo.svTrnService.EstimationDate, 
     dbo.svTrnService.BookingNo, 
     dbo.svTrnService.BookingDate, 
     dbo.svTrnService.JobOrderNo, 
     dbo.svTrnService.JobOrderDate, 
     dbo.svTrnService.InvoiceNo, 
     dbo.svTrnService.PoliceRegNo, 
     dbo.svTrnService.ServiceBookNo, 
     dbo.svTrnService.BasicModel, 
     dbo.svTrnService.TransmissionType, 
     dbo.svTrnService.ChassisCode, 
     dbo.svTrnService.ChassisNo, 
     dbo.svTrnService.EngineCode, 
     dbo.svTrnService.EngineNo, 
     dbo.svTrnService.ChassisCode + ' ' + CAST(dbo.svTrnService.ChassisNo
      AS varchar) AS KodeRangka, 
     dbo.svTrnService.EngineCode + ' ' + CAST(dbo.svTrnService.EngineNo
      AS varchar) AS KodeMesin, 
     dbo.svTrnService.ColorCode, 
     dbo.svTrnService.CustomerCode + ' - ' + dbo.gnMstCustomer.CustomerName
      AS Customer, 
     dbo.svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName
      AS CustomerBill, dbo.svTrnService.CustomerCode, 
     dbo.svTrnService.CustomerCodeBill, 
     dbo.svTrnService.Odometer, 
     dbo.svTrnService.JobType, 
     reffService.RefferenceCode AS ServiceStatus, 
     reffService.Description AS ServiceStatusDesc, 
     reffService.LockingBy, 
     dbo.svTrnService.InsurancePayFlag, 
     dbo.svTrnService.InsuranceOwnRisk, 
     dbo.svTrnService.InsuranceNo, 
     dbo.svTrnService.InsuranceJobOrderNo, 
     dbo.svTrnService.LaborDiscPct, 
     dbo.svTrnService.PartDiscPct, 
     dbo.svTrnService.MaterialDiscPct, 
     dbo.svTrnService.PPNPct, 
     dbo.svTrnService.ServiceRequestDesc, 
     dbo.svTrnService.ConfirmChangingPart, 
     dbo.svTrnService.EstimateFinishDate, 
     dbo.svTrnService.LaborDppAmt, 
     dbo.svTrnService.PartsDppAmt, 
     dbo.svTrnService.MaterialDppAmt, 
     dbo.svTrnService.TotalDPPAmount, 
     dbo.svTrnService.TotalPpnAmount, 
     dbo.svTrnService.TotalPphAmount, 
     dbo.svTrnService.TotalSrvAmount, 
     employee.EmployeeName AS ForemanName, 
     custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3
      + '' + custBill.Address4 AS AddressBill, 
     custBill.NPWPNo, custBill.PhoneNo, custBill.FaxNo, 
     custBill.HPNo
FROM dbo.svTrnService WITH (NOLOCK, NOWAIT) 
     LEFT OUTER JOIN
     dbo.gnMstCustomer ON 
     dbo.gnMstCustomer.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     dbo.gnMstCustomer.CustomerCode = dbo.svTrnService.CustomerCode
      LEFT OUTER JOIN
     dbo.gnMstCustomer AS custBill ON 
     custBill.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     custBill.CustomerCode = dbo.svTrnService.CustomerCodeBill
      LEFT OUTER JOIN
     dbo.gnMstEmployee AS employee ON 
     employee.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     employee.BranchCode = dbo.svTrnService.BranchCode AND
      employee.EmployeeID = dbo.svTrnService.ForemanID LEFT
      OUTER JOIN
     dbo.svTrnSrvItem AS srvItem ON 
     srvItem.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvItem.BranchCode = dbo.svTrnService.BranchCode AND
      srvItem.ProductType = dbo.svTrnService.ProductType AND
      srvItem.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svTrnSrvTask AS srvTask ON 
     srvTask.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvTask.BranchCode = dbo.svTrnService.BranchCode AND
      srvTask.ProductType = dbo.svTrnService.ProductType AND
      srvTask.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svMstRefferenceService AS reffService ON 
     reffService.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     reffService.ProductType = dbo.svTrnService.ProductType
      AND 
     reffService.RefferenceCode = dbo.svTrnService.ServiceStatus
      AND 
     reffService.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
     dbo.svTrnInvoice AS invoice ON 
     invoice.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     invoice.BranchCode = dbo.svTrnService.BranchCode AND
      invoice.ProductType = dbo.svTrnService.ProductType AND
      invoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT
      OUTER JOIN
     dbo.svTrnSrvVOR AS VOR ON 
     VOR.CompanyCode = dbo.svTrnService.CompanyCode AND
      VOR.BranchCode = dbo.svTrnService.BranchCode AND 
     VOR.ServiceNo = dbo.svTrnService.ServiceNo
WHERE (1 = 1)
GO
CREATE view [dbo].[SvVehicleDetailView]

as 

select CompanyCode, 
a.ContractNo as ContractNoStr, a.PoliceRegNo, a.ChassisCode, 
convert(varchar, a.ChassisNo) ChassisNo, a.EngineCode, 
convert(varchar, a.EngineNo) EngineNo, a.ServiceBookNo, 
CASE a.FakturPolisiDate WHEN null THEN '-' ELSE a.FakturPolisiDate END as FakturPolisiDate,
ClubCode, ClubNo, CustomerCode
from svMstCustomerVehicle a
--where a.CompanyCode = '6006406' and a.CustomerCode = '6023'
--order by	a.PoliceRegNo asc
GO
CREATE view [dbo].[OmTrPurchaseBPULookupView]
as
	SELECT bpu.*, sup.SupplierName
	, (CASE ISNULL(bpu.BPUType, '0') WHEN '0' THEN 'DO' WHEN '1' THEN 'SJ' WHEN '2' THEN 'DO & SJ' WHEN '3' THEN 'SJ Booking' END) AS Tipe
	, (CASE ISNULL(bpu.Status, '0') WHEN '0' THEN 'OPEN' WHEN '1' THEN 'PRINTED' WHEN '2' THEN 'APPROVED' WHEN '3' THEN 'CANCELED' WHEN '9' THEN 'FINISHED' END) AS StatusBPU
	, '' as ExpeditionName, '' as WarehouseName
	FROM OmTrPurchaseBPU bpu
	LEFT JOIN GnMstSupplier sup ON bpu.CompanyCode = sup.CompanyCode AND bpu.SupplierCode = sup.SupplierCode
GO
CREATE view [dbo].[SvWaktuKerja]

as 

select a.CompanyCode, a.BranchCode ,DayCode 
, a.Description
, a.BeginWorkTime  --, convert(varchar, a.BeginWorkTime, 24)  as BeginWorkTime
, a.EndWorkTime    --, convert(varchar, a.EndWorkTime, 24) as EndWorkTime
, a.BeginLunchTime --, convert(varchar, a.BeginLunchTime, 24) as BeginLunchTime
, a.EndLunchTime   --, convert(varchar, a.EndLunchTime, 24) as EndLunchTime  
, IsActive
,case IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END AS Status
from svMstWorkingTime a with(nolock, nowait)
GO
CREATE view [dbo].[OmTrPurchaseBPUView]
as
	SELECT bpu.*, sup.SupplierName as ExpeditionName, ref.RefferenceDesc1 as WarehouseName, '' as SupplierName
	, (CASE ISNULL(bpu.BPUType, '0') WHEN '0' THEN 'DO' WHEN '1' THEN 'SJ' WHEN '2' THEN 'DO & SJ' WHEN '3' THEN 'SJ Booking' END) AS Tipe
	, (CASE ISNULL(bpu.Status, '0') WHEN '0' THEN 'OPEN' WHEN '1' THEN 'PRINTED' WHEN '2' THEN 'APPROVED' WHEN '3' THEN 'CANCELED' WHEN '9' THEN 'FINISHED' END) AS StatusBPU
	FROM OmTrPurchaseBPU bpu
	LEFT JOIN GnMstSupplier sup ON bpu.CompanyCode = sup.CompanyCode AND bpu.Expedition = sup.SupplierCode
	LEFT JOIN omMstRefference ref ON bpu.CompanyCode = ref.CompanyCode AND bpu.WarehouseCode = ref.RefferenceCode AND ref.RefferenceType = 'WARE'
GO
CREATE VIEW [dbo].[SvTrnServiceMechanicView]
AS
SELECT DISTINCT 
     dbo.svTrnService.CompanyCode, 
     dbo.svTrnService.BranchCode, 
     dbo.svTrnService.ProductType, 
     dbo.svTrnService.ServiceNo, 
     dbo.svTrnService.ServiceType, 
     dbo.svTrnService.ForemanID, 
     dbo.svTrnService.EstimationNo, 
     dbo.svTrnService.EstimationDate, 
     dbo.svTrnService.BookingNo, 
     dbo.svTrnService.BookingDate, 
     dbo.svTrnService.JobOrderNo, 
     dbo.svTrnService.JobOrderDate, 
     dbo.svTrnService.InvoiceNo, 
     dbo.svTrnService.PoliceRegNo, 
     dbo.svTrnService.ServiceBookNo, 
     dbo.svTrnService.BasicModel, 
     dbo.svTrnService.TransmissionType, 
     dbo.svTrnService.ChassisCode, 
     dbo.svTrnService.ChassisNo, 
     dbo.svTrnService.EngineCode, 
     dbo.svTrnService.EngineNo, 
     dbo.svTrnService.ChassisCode + ' ' + CAST(dbo.svTrnService.ChassisNo
      AS varchar) AS KodeRangka, 
     dbo.svTrnService.EngineCode + ' ' + CAST(dbo.svTrnService.EngineNo
      AS varchar) AS KodeMesin, 
     dbo.svTrnService.ColorCode, 
     dbo.svTrnService.CustomerCode + ' - ' + dbo.gnMstCustomer.CustomerName
      AS Customer, 
     dbo.svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName
      AS CustomerBill, dbo.svTrnService.CustomerCode, 
     dbo.svTrnService.CustomerCodeBill, 
     dbo.svTrnService.Odometer, 
     dbo.svTrnService.JobType, 
     reffService.RefferenceCode AS ServiceStatus, 
     reffService.Description AS ServiceStatusDesc, 
     reffService.LockingBy, 
     dbo.svTrnService.InsurancePayFlag, 
     dbo.svTrnService.InsuranceOwnRisk, 
     dbo.svTrnService.InsuranceNo, 
     dbo.svTrnService.InsuranceJobOrderNo, 
     dbo.svTrnService.LaborDiscPct, 
     dbo.svTrnService.PartDiscPct, 
     dbo.svTrnService.MaterialDiscPct, 
     dbo.svTrnService.PPNPct, 
     dbo.svTrnService.ServiceRequestDesc, 
     dbo.svTrnService.ConfirmChangingPart, 
     dbo.svTrnService.EstimateFinishDate, 
     dbo.svTrnService.LaborDppAmt, 
     dbo.svTrnService.PartsDppAmt, 
     dbo.svTrnService.MaterialDppAmt, 
     dbo.svTrnService.TotalDPPAmount, 
     dbo.svTrnService.TotalPpnAmount, 
     dbo.svTrnService.TotalPphAmount, 
     dbo.svTrnService.TotalSrvAmount, 
     employee.EmployeeName AS ForemanName, 
     custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3
      + '' + custBill.Address4 AS AddressBill, 
     custBill.NPWPNo, custBill.PhoneNo, custBill.FaxNo, 
     custBill.HPNo
FROM dbo.svTrnService WITH (NOLOCK, NOWAIT) 
     LEFT OUTER JOIN
     dbo.gnMstCustomer ON 
     dbo.gnMstCustomer.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     dbo.gnMstCustomer.CustomerCode = dbo.svTrnService.CustomerCode
      LEFT OUTER JOIN
     dbo.gnMstCustomer AS custBill ON 
     custBill.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     custBill.CustomerCode = dbo.svTrnService.CustomerCodeBill
      LEFT OUTER JOIN
     dbo.gnMstEmployee AS employee ON 
     employee.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     employee.BranchCode = dbo.svTrnService.BranchCode AND
      employee.EmployeeID = dbo.svTrnService.ForemanID LEFT
      OUTER JOIN
     dbo.svTrnSrvItem AS srvItem ON 
     srvItem.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvItem.BranchCode = dbo.svTrnService.BranchCode AND
      srvItem.ProductType = dbo.svTrnService.ProductType AND
      srvItem.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svTrnSrvTask AS srvTask ON 
     srvTask.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     srvTask.BranchCode = dbo.svTrnService.BranchCode AND
      srvTask.ProductType = dbo.svTrnService.ProductType AND
      srvTask.ServiceNo = dbo.svTrnService.ServiceNo LEFT
      OUTER JOIN
     dbo.svMstRefferenceService AS reffService ON 
     reffService.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     reffService.ProductType = dbo.svTrnService.ProductType
      AND 
     reffService.RefferenceCode = dbo.svTrnService.ServiceStatus
      AND 
     reffService.RefferenceType = 'SERVSTAS' LEFT OUTER JOIN
     dbo.svTrnInvoice AS invoice ON 
     invoice.CompanyCode = dbo.svTrnService.CompanyCode
      AND 
     invoice.BranchCode = dbo.svTrnService.BranchCode AND
      invoice.ProductType = dbo.svTrnService.ProductType AND
      invoice.JobOrderNo = dbo.svTrnService.JobOrderNo LEFT
      OUTER JOIN
     dbo.svTrnSrvVOR AS VOR ON 
     VOR.CompanyCode = dbo.svTrnService.CompanyCode AND
      VOR.BranchCode = dbo.svTrnService.BranchCode AND 
     VOR.ServiceNo = dbo.svTrnService.ServiceNo
WHERE (1 = 1) AND (dbo.svTrnService.ServiceStatus IN (0, 
     1, 2, 3, 4)) AND (srvTask.ServiceNo IS NOT NULL) AND 
     (srvTask.IsSubCon = 0)
GO
CREATE VIEW [dbo].[OmSelectReffSJTrueView]
AS
SELECT a.CompanyCode, a.BranchCode, a.BatchNo, b.SJNo, b.SJDate, b.SKPNo, b.DONo, a.DealerCode, c.ShipTo, b.DODate, c.PONo,
    (select SupplierName from gnMstSupplier where supplierCode = c.supplierCode) as DealerName, c.SupplierCode, b.FlagRevisi
FROM OmUtlSSJALHdr a
    inner join OmUtlSSJALDtl1 b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
        and a.BatchNo=b.BatchNo
    inner join omTrPurchaseBPU c on a.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
        and c.RefferenceDONo = b.DONo
WHERE 1=1
	-- and a.CompanyCode = convert(varchar,@CompanyCode)
	-- and a.BranchCode = convert(varchar,@BranchCode)
	-- and a.RcvDealerCode = convert(varchar,@CompanyCode)
    and c.status = '2'
    and b.Status = '0'
    and not exists (
        select 1 from omTrPurchaseBPU d 
        where 1=1
            and d.CompanyCode = a.CompanyCode and d.BranchCode = a.BranchCode 
            and d.RefferenceSJNo=b.SJNo
            and d.Status <> '3'
    )
-- order by FlagRevisi Desc,a.BatchNo,b.SJNo,b.SKPNo
GO
CREATE VIEW [dbo].[SvTrnSPKGeneralView]
as

SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + ' ' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + ' ' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + ' - ' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    ,svTrnService.ServiceStatus
    , case when svTrnService.ServiceStatus='4' then
            case when '4W'='4W' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatusDesc
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3 + '' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
    , svTrnService.CompanyCode
    ,svTrnService.BranchCode
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = 'SERVSTAS'
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
GO
CREATE VIEW [dbo].[OmTrPurchaseBPUDetailView]
AS
SELECT dtl.CompanyCode, dtl.BranchCode, dtl.BPUNo, dtl.PONo,dtl.BPUSeq, dtl.SalesModelCode, dtl.SalesModelYear, mdl.SalesModelDesc
    , dtl.ColourCode, ref.RefferenceDesc1 AS ColourName, dtl.ChassisCode
    , (CASE dtl.ChassisNo WHEN 0 THEN '' ELSE CONVERT(Varchar, dtl.ChassisNo) END) AS ChassisNo 
    , dtl.EngineCode, (CASE dtl.EngineNo WHEN 0 THEN '' ELSE CONVERT(Varchar, dtl.EngineNo) END) AS EngineNo
    , dtl.ServiceBookNo, dtl.KeyNo, dtl.Remark, dtl.isReturn
FROM OmTrPurchaseBPUDetail dtl
LEFT JOIN OmMstModelYear mdl ON dtl.CompanyCode = mdl.CompanyCode AND dtl.SalesModelCode = mdl.SalesModelCode
    AND dtl.SalesModelYear = mdl.SalesModelYear
LEFT JOIN OmMstRefference ref ON dtl.CompanyCode = ref.CompanyCode AND dtl.ColourCode = ref.RefferenceCode
    AND ref.RefferenceType = 'COLO'
GO
CREATE view [dbo].[SpEdpPartNo_Pembelian]  as    
SELECT c.CompanyCode, c.BranchCode, c.PartNo, c.PartName, c.PurchasePrice,  c.DiscPct, SUM(c.OnOrder) AS MaxReceived,
CASE WHEN c.ReceivedQty IS NULL  THEN SUM(c.OnOrder) ELSE SUM(c.OnOrder-c.ReceivedQty) END AS ReminQty
 , c.POSNo, c.BinningNo
FROM
(
    SELECT DISTINCT a.CompanyCode, a.BranchCode, a.POSNo,d.ReceivedQty, d.BinningNo,
     a.PartNo
    ,b.PartName 
    ,ISNULL((SELECT x.PurchasePrice FROM SpMstItemPrice x where x.CompanyCode = a.CompanyCode AND
     x.BranchCode = a.BranchCode AND x.PartNo = a.PartNo),0) AS PurchasePrice
    ,a.OnOrder
    ,a.DiscPct
    FROM spTrnPOrderBalance a, spMstItemInfo b, spTrnPBinnDtl d
    WHERE b.CompanyCode = a.CompanyCode
    and b.PartNo = a.PartNo
    AND d.CompanyCode = a.CompanyCode
    and d.BranchCode = a.BranchCode
    and d.DocNo = a.POSNo
    AND d.PartNo = a.PartNo
    --LEFT JOIN spMstItemInfo b
    --   ON b.CompanyCode = a.CompanyCode
    --  AND b.PartNo      = a.PartNo
    --  LEFT JOIN spTrnPBinnDtl d
    --  ON d.CompanyCode = a.CompanyCode
    --  and d.BranchCode = a.BranchCode
    --  AND d.DocNo = a.POSNo
    --  AND d.PartNo = a.PartNo
      --LEFT JOIN spTrnPPOSDtl e
      --on e.CompanyCode = d.CompanyCode
      --AND e.BranchCode = d.BranchCode
      --AND e.POSNo = d.DocNo
    --and a.CompanyCode = '6006410'
    --  AND a.BranchCode  = '600641001'
    --  AND a.PosNo       = 'POS/14/000121'
    --  AND d.BinningNo = 'BNL/14/000182'
   -- GROUP BY a.PartNo
) c
GROUP BY c.CompanyCode, c.BranchCode,c.PartNo ,c.PartName, c.PurchasePrice, c.DiscPct, c.POSNo, c.ReceivedQty, c.OnOrder, c.BinningNo
HAVING sum(c.OnOrder) > 0
GO
CREATE view [dbo].[SpEdpPartNo_Others]  as    
SELECT 
    TOP 500 a.CompanyCode, a.BranchCode, SupplierCode, a.ProductType, TypeOfGoods, ItemInfo.PartNo,
    ItemInfo.PartName,
    c.OnHand - (c.AllocationSP + c.AllocationSR + c.AllocationSL + c.ReservedSP + c.ReservedSR + c.ReservedSL) AS Available,
	a.MovingCode
FROM 
    SpMstItems a
    INNER JOIN SpMstItemInfo ItemInfo ON ItemInfo.PartNo = a.PartNo 
        AND ItemInfo.CompanyCode = a.CompanyCode
    INNER JOIN SpMstItemLoc c ON a.CompanyCode = c.CompanyCode
        AND a.BranchCode = c.BranchCode
        AND a.PartNo = c.PartNo
    INNER JOIN SpMstItemPrice d ON a.CompanyCode = d.CompanyCode 
		AND a.BranchCode = d.BranchCode
		AND a.PArtNo = d.PartNo
WHERE a.Status = '1'
    AND c.WarehouseCode = '00'
GO
CREATE view [dbo].[ITSClnUpKDPView]
with schemabinding

as
-- exec uspfn_ITSClnUpKDP '6006406', '6006406', '20131230'
--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @NextFollowUp as varchar(8)
--declare @SalesHead as varchar(15)
--declare @SalesCo as varchar(15)
--declare @Salesman as varchar(15)

--set @CompanyCode = '6006406'
--set @BranchCode = '6006405'
--set @NextFollowUp = '20131230'
--set @SalesHead = ''
--set @SalesCo = ''
--set @Salesman = ''

select a.CompanyCode, a.BranchCode, a.InquiryNumber, a.InquiryDate, convert(varchar, a.InquiryDate, 101) InquiryDateStr, a.NamaProspek, 
a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode, a.PerolehanData, c.EmployeeID, c.EmployeeID + ' - ' + c.EmployeeName Wiraniaga, 
d.EmployeeID SpvEmployeeID, d.EmployeeID + ' - ' + d.EmployeeName Coordinator, a.LastProgress, 
(select top 1 NextFollowUpDate from dbo.pmActivities where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber order by NextFollowUpDate) NextFollowUpDate
from dbo.pmKDP a with (nolock, nowait)
inner join dbo.gnMstEmployee c with (nolock, nowait) on
	a.CompanyCode = c.CompanyCode 
	and a.BranchCode = c.BranchCode
	and a.EmployeeID = c.EmployeeID
inner join dbo.gnMstEmployee d with (nolock, nowait) on
	a.CompanyCode = d.CompanyCode 
	and a.BranchCode = d.BranchCode
	and a.SpvEmployeeID = d.EmployeeID	
where a.LastProgress in ('P', 'HP', 'SPK')
GO
CREATE view [dbo].[SpEdpSupplier]  as  
  
SELECT a.CompanyCode, BranchCode, 
a.SupplierCode, a.SupplierName, (a.address1+' '+a.address2+' '+a.address3+' '+a.address4) as Alamat,
b.DiscPct as Diskon, (Case a.Status when 0 then 'Tidak Aktif' else 'Aktif' end) as StatusStr, a.Status, ProfitCenterCode,
(SELECT Lookupvaluename FROM gnmstlookupdtl WHERE codeid='PFCN' 
AND lookupvalue = b.ProfitCentercode) as ProfitCenterCodeStr, isBlackList
FROM 
gnMstSupplier a
JOIN gnmstSupplierProfitCenter b ON a.CompanyCode= b.CompanyCode
AND a.SupplierCode = b.SupplierCode
GO
create view [dbo].[dd]
as
 SELECT 
                    a.POSNo, a.PartNo, b.PartName, CAST(a.OrderQty as decimal(18,2)) as OrderQty, 
                    a.OnOrder, a.Intransit, a.Received,a.DiscPct, a.PurchasePrice, 
                    Convert(varchar(10),a.SeqNo) SeqNo, a.SupplierCode, a.PartNoOriginal, 
                    a.TypeOfGoods 
                FROM 
                    spTrnPOrderBalance a 
                INNER JOIN spMstItemInfo b
                   ON b.PartNo      = a.PartNo
GO
CREATE view [dbo].[SpEdpDnNo]  as    

SELECT DISTINCT a.CompanyCode, BranchCode,
a.DeliveryNo 
,a.SupplierCode
,ISNULL(b.SupplierName,'') as SupplierName 
FROM spUtlPINVDDTL a
LEFT JOIN GnMstSupplier b ON a.CompanyCode=b.CompanyCode 
AND a.SupplierCode=b.SupplierCode
WHERE a.Status in ('0','1')
GO
CREATE view [dbo].[SpEdpPartNo_Internal]  as    
SELECT 
    TOP 500 a.CompanyCode, a.BranchCode, a.ProductType, TypeOfGoods, ItemInfo.PartNo,
    ItemInfo.PartName,
    c.OnHand - (c.AllocationSP + c.AllocationSR + c.AllocationSL + c.ReservedSP + c.ReservedSR + c.ReservedSL) AS Available,
	a.MovingCode
FROM 
    SpMstItems a
    INNER JOIN SpMstItemInfo ItemInfo ON ItemInfo.PartNo = a.PartNo 
        AND ItemInfo.CompanyCode = a.CompanyCode
    INNER JOIN SpMstItemLoc c ON a.CompanyCode = c.CompanyCode
        AND a.BranchCode = c.BranchCode
        AND a.PartNo = c.PartNo
    INNER JOIN SpMstItemPrice d ON a.CompanyCode = d.CompanyCode 
		AND a.BranchCode = d.BranchCode
		AND a.PArtNo = d.PartNo
WHERE a.Status = '1'  AND WarehouseCode = '00'
/*    a.CompanyCode = @CompanyCode
    AND a.BranchCode  = @BranchCode 
    AND a.ProductType  = @ProductType
    AND a.TypeOfGoods = @TypeOfGoods
    AND a.Status = @Status
    AND c.WarehouseCode = @WarehouseCode*/
GO
CREATE view [dbo].[SpEdpPartNo]  as    
SELECT a.CompanyCode, a.BranchCode, 
 a.PartNo
,b.PartName
,c.CostPrice
,a.QtyBill,
CustomerCode, a.BPSFNo
FROM spTrnSBPSFDtl a
INNER JOIN spMstItemInfo b
   ON b.CompanyCode = a.CompanyCode
  AND b.PartNo      = a.PartNo
INNER JOIN spMstItemPrice c
   ON c.CompanyCode = a.CompanyCode
  AND c.BranchCode  = a.BranchCode
  AND c.PartNo      = a.PartNo
INNER JOIN spTrnSBPSFHdr d
   ON d.CompanyCode = a.CompanyCode
  AND d.BranchCode  = a.BranchCode
  AND d.BPSFNo      = a.BPSFNo
/*WHERE a.CompanyCode=@CompanyCode
  AND a.BranchCode=@BranchCode
  AND d.CustomerCode=@CustomerCode
  AND a.BPSFNo = @BPSFNo*/
GROUP BY a.PartNo, b.PartName, c.CostPrice, a.QtyBill, a.CompanyCode, a.BranchCode, CustomerCode, a.BPSFNo
GO
CREATE view [dbo].[SpEntryCS]  as    
  SELECT DISTINCT CompanyCode, BranchCode, a.ClaimNo, ClaimDate, a.TypeOfGoods, a.Status
  FROM spTrnPClaimHdr a
 WHERE a.Status IN ('0', '1')
GO
CREATE view [dbo].[HrEmployeeView]

as

SELECT 
	a.CompanyCode,
	a.EmployeeID,
	b.SalesID,
	c.ServiceID,
	a.EmployeeName,
	a.Email,
	a.FaxNo,
	a.Handphone1,
	a.Handphone2,
	a.Handphone3,
	a.Handphone4,
	a.Telephone1,
	a.Telephone2,
	a.OfficeLocation,
	a.IsLinkedUser,
	a.RelatedUser,
	FullName = (
		select top 1
			x.FullName
		from 
			SysUser x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.UserId = a.RelatedUser
	),
	a.JoinDate,
	a.Department,
	a.Position,
	a.Grade,
	a.Rank,
	Departmentstext = (
		select top 1
			x.OrgName
		from 
			gnMstOrgGroup x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.OrgGroupCode = 'DEPT'
			and
			x.OrgCode = a.Department
	),
	Positionstext = (
		select top 1
			x.PosName
		from	
			gnMstPosition x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.DeptCode = a.Department
			and
			x.PosCode = a.Position
	),
	a.Gender,
	a.TeamLeader,
	TeamLeaderName = (
		select top 1
			x.EmployeeName
		from	
			HrEmployee x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.EmployeeID = a.TeamLeader
	),
	a.PersonnelStatus,
	a.ResignDate, 
	a.ResignDescription,
	a.IdentityNo,
	a.NPWPNo,
	a.NPWPDate,
	a.BirthDate,
	a.BirthPlace,
	a.Address1 as Address,
	a.Address1,
	a.Address2,
	a.Address3,
	a.Address4,
	a.Province,
	a.District,
	a.SubDistrict,
	a.Village,
	a.ZipCode,
	a.DrivingLicense1,
	a.DrivingLicense2,
	a.MaritalStatus,
	a.MaritalStatusCode,
	a.Height,
	a.Weight,
	a.UniformSize,
	a.UniformSizeAlt,
	a.ShoesSize,
	a.FormalEducation,
	a.BloodCode,
	a.OtherInformation,
	a.Religion,
	AdditionalJob1 = (
		select top 1
			x.Position
		from
			HrEmployeeAdditionalJob x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.EmployeeID = a.EmployeeID
			and
			x.SeqNo = 1
	),
	AdditionalJob2 = (
		select top 1
			x.Position
		from
			HrEmployeeAdditionalJob x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.EmployeeID = a.EmployeeID
			and
			x.SeqNo = 2
	),
	Status = (CASE
		WHEN a.PersonnelStatus = '1' THEN
		'Aktif'
		WHEN a.PersonnelStatus = '2' THEN
		'Non Aktif'
		WHEN a.PersonnelStatus = '3' THEN
		'Keluar'
		WHEN a.PersonnelStatus = '4' THEN
		'Pensiun'
	END),
	DepartmentName = (
		select top 1
			x.OrgName
		from 
			gnMstOrgGroup x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.OrgGroupCode = 'DEPT'
			and
			x.OrgCode = a.Department
	),
	PositionName = (
		select top 1
			x.PosName
		from	
			gnMstPosition x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.DeptCode = a.Department
			and
			x.PosCode = a.Position
	),
	GradeName = (
		select top 1
			x.LookUpValueName
		from
			gnMstLookUpDtl x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CodeID = 'ITSG'
			and
			x.LookUpValue = a.Grade
	),
	AdditionalJob1Name = (
		select top 1
			x.PosName
		from	
			gnMstPosition x
		inner join	
			HrEmployeeAdditionalJob y
		on
			x.CompanyCode = y.CompanyCode
			and
			x.DeptCode = y.Department
			and
			x.PosCode = y.Position
		where
			x.CompanyCode = a.CompanyCode
			and
			x.DeptCode = a.Department
			and
			x.PosCode = a.Position
			and
			y.EmployeeID = a.EmployeeID
			and
			y.SeqNo = 1
	),
	AdditionalJob2Name = (
		select top 1
			x.PosName
		from	
			gnMstPosition x
		inner join	
			HrEmployeeAdditionalJob y
		on
			x.CompanyCode = y.CompanyCode
			and
			x.DeptCode = y.Department
			and
			x.PosCode = y.Position
		where
			x.CompanyCode = a.CompanyCode
			and
			x.DeptCode = a.Department
			and
			x.PosCode = a.Position
			and
			y.EmployeeID = a.EmployeeID
			and
			y.SeqNo = 2
	),
	RankName = (
		select top 1
			x.LookUpValueName
		from
			gnMstLookUpDtl x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CodeID = 'RANK'
			and
			x.LookUpValue = a.Rank
	),
	a.SelfPhoto,
	a.IdentityCardPhoto
FROM
  HrEmployee a
left join
	HrEmployeeSales b
on
	a.CompanyCode = b.CompanyCode
	and
	a.EmployeeID = b.EmployeeID
left join 
	HrEmployeeService c
on
	a.CompanyCode = c.CompanyCode
	and
	a.EmployeeID = c.EmployeeID
GO
CREATE view [dbo].[SpGridEntryWRS]  as    

SELECT A.CompanyCode, A.BranchCode, A.DocNo, A.PartNo, A.PurchasePrice, A.WRSNo,
A.DiscPct,  A.ReceivedQty, A.BoxNo, (select PartName from spMstItemInfo C
where C.CompanyCode=A.CompanyCode and C.PartNo=A.PartNo) as NmPart 
  FROM spTrnPRcvDtl A
 INNER JOIN spTrnPRcvHdr B ON 
 B.CompanyCode = A.CompanyCode
 AND B.BranchCode = A.BranchCode 
 AND B.WRSNo = A.WRSNo
GO
CREATE view [dbo].[SpGridPartNo]  as 
   
SELECT CompanyCode, BranchCode, ClaimNo, PartNo, PartNoWrong, ClaimType, DocNo, DocDate, SeqNo,OvertageQty, ReceivedQty, 
ShortageQty, DemageQty, WrongQty, TotClaimQty,PurchasePrice,CostPrice, ReasonCode, 
CASE ReasonCode WHEN 'CORR' THEN 'KOREKSI STOK' ELSE CASE ReasonCode WHEN 'DMG' THEN 'RUSAK STOK' 
ELSE 'DIHANCURKAN' END END as ReasonCodeStr, Status, ABCClass, MovingCode, ProductType, PartCategory
from spTrnPClaimDtl
GO
CREATE view [dbo].[HrTrnAttendanceFileDtlView]
as
select
	a.FileID,
	a.CompanyCode,
	a.EmployeeID,
	a.EmployeeName,
	a.MachineCode,
	a.AttendanceTime,
	ClockTime = left(convert(varchar, a.AttendanceTime, 108), 5),
	a.IdentityCode,
	AttendanceStatus = (
		case 
			when ltrim(rtrim(replace(a.IdentityCode, char(13), ''))) = 'O' then 'OUT'
			when ltrim(rtrim(replace(a.IdentityCode, char(13), ''))) = 'I' then 'IN'
		end
	),
	(	
		cast(datepart(year, a.AttendanceTime) as varchar(4)) + 
		right('0' + cast(datepart(month, a.AttendanceTime) as varchar(2)), 2) + 
		right('0' + cast(datepart(day, a.AttendanceTime) as varchar(2)), 2) 
	) as AttendanceDate,
	Shift = isnull((
		select top 1
			y.ShiftName
		from
			HrEmployeeShift x
		left join HrShift y
		  on y.CompanyCode=x.CompanyCode
		 and y.ShiftCode=x.ShiftCode
		where
			x.CompanyCode = a.CompanyCode
			and
			x.EmployeeID = a.EmployeeID
			and
			x.AttdDate = (	
				cast(datepart(year, a.AttendanceTime) as varchar(4)) + 
				right('0' + cast(datepart(month, a.AttendanceTime) as varchar(2)), 2) + 
				right('0' + cast(datepart(day, a.AttendanceTime) as varchar(2)), 2) 
			)
	), '-'),
	Status =  (
		case
			when a.IsTransfered = 0 then 'N'
			when a.IsTransfered = 1 then 'Y'
		end
	)
from
	HrTrnAttendanceFileDtl a
GO
CREATE view [dbo].[spgnMstAccountView]
 as
SELECT top 100 AccountNo, [Description], CompanyCode,
  BranchCode
  FROM gnMstAccount
GO
create view [dbo].[ITSClnUpKDP]
--declare
	--@CompanyCode varchar(15),
	--@BranchCode varchar(15),
	--@NextFollowUp varchar(8),
	--@SalesHead varchar(15),
	--@SalesCo varchar(15),
	--@Salesman varchar(15)
as
-- exec uspfn_ITSClnUpKDP '6006406', '6006406', '20131230'
--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @NextFollowUp as varchar(8)
--declare @SalesHead as varchar(15)
--declare @SalesCo as varchar(15)
--declare @Salesman as varchar(15)

--set @CompanyCode = '6006406'
--set @BranchCode = '6006405'
--set @NextFollowUp = '20131230'
--set @SalesHead = ''
--set @SalesCo = ''
--set @Salesman = ''

--begin
--select * into #t1 from(
select distinct a.CompanyCode, a.BranchCode, a.InquiryNumber, a.InquiryDate, a.NamaProspek, a.TipeKendaraan, a.Variant, a.Transmisi, a.ColourCode, 
a.PerolehanData, c.EmployeeID + ' - ' + c.EmployeeName Wiraniaga, d.EmployeeID SpvEmployeeID,
d.EmployeeID + ' - ' + d.EmployeeName Coordinator, a.LastProgress  -- b.NextFollowUpDate, 
from pmKDP a
left join pmActivities b on
	a.CompanyCode = b.CompanyCode 
	and a.BranchCode = b.BranchCode
	and a.InquiryNumber = b.InquiryNumber
left join gnMstEmployee c on
	a.CompanyCode = c.CompanyCode 
	and a.BranchCode = c.BranchCode
	and a.EmployeeID = c.EmployeeID
left join gnMstEmployee d on
	a.CompanyCode = d.CompanyCode 
	and a.BranchCode = d.BranchCode
	and a.SpvEmployeeID = d.EmployeeID	
--where a.CompanyCode = @CompanyCode
--	and (case when @BranchCode = '' then '' else a.BranchCode end) = @BranchCode
--	and convert(varchar, b.NextFollowUpDate, 112) <= @NextFollowUp
--	and (case when @SalesCo = '' then '' else c.EmployeeID end) = @SalesCo
--	and (case when @Salesman = '' then '' else d.EmployeeID end) = @Salesman) #t1
	
--IF (@SalesHead='')
--BEGIN
--    SELECT * FROM #t1 ORDER BY BranchCode, InquiryNumber 
--END
--ELSE
--BEGIN
--	declare @teamid varchar(max)
--	set @teamid = (select teamid from pmmstteammembers where companycode=@CompanyCode 
--		and branchcode=case @branchcode when '' then branchcode else @branchcode end
--		and employeeid=@SalesHead 
--		and issupervisor='1')
	
--	SELECT * FROM #t1 WHERE SpvEmployeeID IN (select employeeid from pmmstteammembers where companycode=@companycode 
--		and branchcode=case @branchcode when '' then branchcode else @branchcode end
--		and teamid=@teamid
--		and issupervisor='0') 
--	ORDER BY BranchCode, InquiryNumber 
--END
--drop table #t1	
--end

--select ActivityDate, ActivityDetail, ActivityType, NextFollowupDate 
--from pmActivities
--where CompanyCode = @CompanyCode
--	and BranchCode = @BranchCode
--	and InquiryNumber = 24484
GO
create view [dbo].[HrMstTrainingView]
as
select 
	a.CompanyCode,
	b.Department,
	b.Position,
	b.Grade,
	a.TrainingCode,
	a.TrainingName
from	
	HrMstTraining a
inner join
	HrDepartmentTraining b
on
	a.CompanyCode = b.CompanyCode
	and
	a.TrainingCode = b.TrainingCode
where
	a.IsDeleted != 1
GO
CREATE view [dbo].[HrLookupView]
as

select a.CompanyCode, a.CodeID, b.CodeDescription, a.LookUpValue, a.LookUpValueName, a.ParaValue, a.SeqNo
  from gnMstLookUpDtl a, HrLookupMapping b
 where b.CompanyCode = a.CompanyCode
   and b.CodeID = a.CodeID
GO
CREATE view [dbo].[SpEdpDetail]  as  
  
SELECT row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut, a.CompanyCode, a.BranchCode, a.BinningNo,
 a.DocNo,a.PartNo, a.PurchasePrice, a.DiscPct, 
a.ReceivedQty, a.BoxNo, (select PartName from spMstItemInfo c WITH(NOLOCK, NOWAIT)
WHERE c.CompanyCode=a.CompanyCode and c.PartNo=a.PartNo) as NmPart
FROM spTrnPBinnDtl a WITH(NOLOCK, NOWAIT)
INNER JOIN spTrnPBinnHdr b WITH(NOLOCK, NOWAIT) ON b.BinningNo = a.BinningNo 
AND b.CompanyCode = a.CompanyCode
AND b.BranchCode = a.BranchCode
GO
CREATE VIEW [dbo].[vw_SvRekapInsentifMekanik]
AS
SELECT     BranchCode, Periode, MechanicID, MechanicName, SUM(OperationHour) AS OperationHour, SUM(LaborGrossAmt) AS LaborGrossAmt, SUM(LaborDiscAmt) 
                      AS LaborDiscAmt, SUM(LaborGrossAmt) - SUM(LaborDiscAmt) AS LaborDppAmt
FROM         (SELECT     mek.BranchCode, LEFT(CONVERT(varchar, inv.InvoiceDate, 112), 6) AS Periode, mek.InvoiceNo, inv.InvoiceDate, mek.OperationNo, mek.MechanicID, 
                                              emp.EmployeeName AS MechanicName, CASE LEFT(inv.InvoiceNo, 3) WHEN 'INW' THEN tsk.ClaimHour ELSE tsk.OperationHour END AS OperationHour, 
                                              CONVERT(money, tsk.OperationCost * tsk.OperationHour) AS LaborGrossAmt, CONVERT(money, 
                                              tsk.OperationCost * tsk.OperationHour * inv.LaborDiscPct * 0.01) AS LaborDiscAmt
                       FROM          dbo.svTrnInvMechanic AS mek LEFT OUTER JOIN
                                              dbo.svTrnInvTask AS tsk ON tsk.CompanyCode = mek.CompanyCode AND tsk.BranchCode = mek.BranchCode AND tsk.InvoiceNo = mek.InvoiceNo AND 
                                              tsk.OperationNo = mek.OperationNo LEFT OUTER JOIN
                                              dbo.svTrnInvoice AS inv ON inv.CompanyCode = tsk.CompanyCode AND inv.BranchCode = tsk.BranchCode AND 
                                              inv.InvoiceNo = tsk.InvoiceNo LEFT OUTER JOIN
                                              dbo.gnMstEmployee AS emp ON emp.CompanyCode = mek.CompanyCode AND emp.BranchCode = mek.BranchCode AND 
                                              emp.EmployeeID = mek.MechanicID) AS [#]
GROUP BY BranchCode, Periode, MechanicID, MechanicName
GO
CREATE view [dbo].[RptWarehouseTransferBrowse]  as    

SELECT c.CompanyCode, c.BranchCode, c.WHTrfNo, c.WHTrfDate, c.ReferenceNo, 
c.ReferenceDate,c.TypeOfGoods 
FROM spTrnIWHTrfHdr c WITH(NOLOCK, NOWAIT)
WHERE c.Status <> '3'
GO
CREATE view [dbo].[sp_spMstCompanyAccountDtl]
		as
		  select  distinct  a.CompanyCode,a.CompanyCodeTo,d.LookUpValue as TPGO, d.LookUpValueName as TPGOName
		,a.InterCompanyAccNoTo AccountNo,b.[Description] as AccountName
		from spMstCompanyAccountdtl a
		inner join gnMstAccount b
		on a.CompanyCode=b.CompanyCode and
		a.InterCompanyAccNoTo=b.AccountNo
		inner join  spMstCompanyAccount c 
		on a.CompanyCode=c.CompanyCode and a.CompanyCodeTo=c.CompanyCodeTo 
		inner join gnMstLookUpDtl d
				on d.CompanyCode=b.CompanyCode and d.LookUpValue=a.TPGO 
				 where d.CodeID='TPGO'
GO
CREATE view [dbo].[RptWRSBrowse]  as
    
SELECT CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate,
TypeOfGoods, TransType
FROM SpTrnPRcvHdr
GO
CREATE view [dbo].[vw_SvCustomerVehicle]
as

select a.CompanyCode 
     , rtrim(a.ChassisCode) + convert(varchar, a.ChassisNo) Chassis
     , rtrim(a.EngineCode) + convert(varchar, a.EngineNo) Engine
     , a.BasicModel, a.PoliceRegNo, a.ServiceBookNo
     , a.CustomerCode
     , b.CustomerName
     , b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as CustAddress
     , a.TransmissionType
     , a.TechnicalModelCode
     , case a.LastServiceDate
         when ('19000101') then null
         else a.LastServiceDate
       end LastServiceDate
     , a.LastJobType
     , a.ColourCode
     , a.ChassisCode
     , a.ChassisNo
     , a.EngineCode
     , a.EngineNo
  from svMstCustomerVehicle a
  left join gnMstCustomer b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
 where isnull(a.BasicModel, '') <> ''
GO
CREATE view [dbo].[RptHPPBrowse]  as    

  SELECT a.CompanyCode, a.BranchCode, 
    a.HPPNo
    , a.HPPDate
    , a.WRSNo
    , a.WRSDate 
    ,(
        select LookUpValueName
		from gnMstLookUpDtl
		where CompanyCode=a.CompanyCode and CodeID='STAT' and LookUpValue=a.Status
    ) Status, a.TypeOfGoods
FROM 
    spTrnPHPP a
GO
CREATE view [dbo].[vw_SvJobOrder]
as

select top 500 a.CompanyCode, a.BranchCode
     , a.JobOrderNo, a.JobOrderDate
     , a.PoliceRegNo, a.ServiceBookNo
     , a.BasicModel, a.TransmissionType
     , a.ChassisCode + ' ' + cast(a.ChassisNo as  varchar) Chassis
     , a.EngineCode + ' ' + cast(a.EngineNo as varchar) Engine
     , a.ColorCode
     , a.CustomerCode + ' - ' + b.CustomerName as Customer
     , a.CustomerCodeBill + ' - ' + c.CustomerName as CustomerBill
     , c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as AddressBill
     , c.NPWPNo, c.PhoneNo, c.HPNo
     , a.Odometer, a.JobType
     , a.ForemanID, a.MechanicID
     , a.ServiceStatus
     , a.ServiceType
     , case when a.ServiceStatus in (0,1,2,3,4,5) then 'Outstanding Task' else 'Finish Task' end StatusTask
     , case when a.ServiceStatus='4' 
            then case when '4W'='4W'
                      then d.Description
                      else d.LockingBy end
            else d.Description end ServiceStatusDesc
     , a.ServiceRequestDesc
     , e.EmployeeName as ForemanName
  from svTrnService a
  left join gnMstCustomer b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join gnMstCustomer c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCodeBill
  left join svMstRefferenceService d
    on d.CompanyCode = a.CompanyCode
   and d.ProductType = a.ProductType    
   and d.RefferenceCode = a.ServiceStatus
   and d.RefferenceType = 'SERVSTAS'
  left join gnMstEmployee e
    on e.CompanyCode = a.CompanyCode
   and e.BranchCode = a.BranchCode
   and e.EmployeeID = a.ForemanID
  left join gnMstEmployee f
    on f.CompanyCode = a.CompanyCode
   and f.BranchCode = a.BranchCode
   and f.EmployeeID = a.ForemanID
 where 1 = 1
GO
CREATE view [dbo].[RptReservedBrowse]  as    

SELECT c.CompanyCode, c.BranchCode, c.ReservedNo, c.ReservedDate, c.ReferenceNo, 
c.ReferenceDate, c.TypeOfGoods
FROM spTrnIReservedHdr c WITH (NOLOCK, NOWAIT)
WHERE c.Status <> '3'
GO
CREATE VIEW [dbo].[vw_SvTrnInvoiceView]
AS

SELECT 
	Invoice.CompanyCode, Invoice.BranchCode, Invoice.ProductType, Invoice.InvoiceNo
	,isnull(Invoice.InvoiceDate,'19000101') InvoiceDate
	,Invoice.InvoiceStatus, Invoice.FPJNo, FPJ.FPJGovNo
	,isnull(Invoice.FPJDate,'19000101') FPJDate
	,Invoice.JobOrderNo
	,isnull(Invoice.JobOrderDate,'19000101') JobOrderDate
	,Invoice.JobType, Invoice.ChassisCode, Invoice.ChassisNo, Invoice.EngineCode
	,Invoice.EngineNo, Invoice.PoliceRegNo, Invoice.BasicModel, Invoice.CustomerCode, Invoice.CustomerCodeBill
	,Invoice.Remarks, (Invoice.CustomerCode + ' - ' + Cust.CustomerName) as Customer
	,(Invoice.CustomerCodeBill + ' - ' + CustBill.CustomerName) as CustomerBill
	, Invoice.Odometer, Invoice.LaborDiscPct, Invoice.PartsDiscPct, Invoice.MaterialDiscPct
	, Invoice.LaborDppAmt, Invoice.PartsDppAmt, Invoice.MaterialDppAmt
	, Invoice.TotalDppAmt, Invoice.TotalPpnAmt, Invoice.TotalSrvAmt
	
	, vehicle.ServiceBookNo
	
	, isnull(CustBill.CustomerName, '') CustomerName, isnull(CustBill.Address1, '') Address1, isnull(CustBill.Address2, '') Address2
	, isnull(CustBill.Address3, '') Address3, isnull(CustBill.Address4, '') Address4, isnull(CustBill.PhoneNo, '') PhoneNo
	, isnull(CustBill.HPNo, '') HPNo, isnull(CustBill.NPWPNo, '') NPWPNo, isnull(CustBill.NPWPDate,'19000101') NPWPDate, isnull(CustBill.SKPNo, '') SKPNo
	, isnull(CustBill.SKPDate,'19000101') SKPDate, isnull(CustBill.CityCode, '') CityCode, isnull(CityCode.LookUpValueName, '') CityDesc
	
	, isnull(CustProfCenter.TOPCode, '') TOPCode
	, isnull(TOPCode.LookUpValueName, '') TOPDesc
	
	, isnull(case AR.StatusFlag when '0' then 'Unposted' 
						 when '3' then 'Posted'
						 else 'Unknown' end, 'Unknown') StatusAR, isnull(AR.DebetAmt, 0) DebetAmt, isnull(AR.CreditAmt, 0) CreditAmt
    , isnull(AR.BlockAmt, 0) BlockAmt, isnull(AR.ReceiveAmt, 0) ReceiveAmt		
FROM svTrnInvoice Invoice
LEFT JOIN gnMstCustomer Cust
    ON Cust.CompanyCode = Invoice.CompanyCode AND Cust.CustomerCode = Invoice.CustomerCode
LEFT JOIN gnMstCustomer CustBill
    ON CustBill.CompanyCode = Invoice.CompanyCode AND CustBill.CustomerCode = Invoice.CustomerCodeBill
LEFT JOIN svMstcustomerVehicle vehicle 
	ON Invoice.CompanyCode = vehicle.CompanyCode and Invoice.ChassisCode = vehicle.ChassisCode and 
	Invoice.ChassisNo = vehicle.ChassisNo and Invoice.EngineCode = vehicle.EngineCode and 
	Invoice.EngineNo = vehicle.EngineNo and Invoice.BasicModel = vehicle.BasicModel	
LEFT JOIN svTrnFakturPajak FPJ 
	ON FPJ.CompanyCode = Invoice.CompanyCode
	AND FPJ.BranchCode = Invoice.BranchCode
	AND FPJ.FPJNo = Invoice.FPJNo
LEFT JOIN gnMstCustomerProfitCenter CustProfCenter
	ON CustProfCenter.CompanyCode = Invoice.CompanyCode
	AND CustProfCenter.BranchCode = Invoice.BranchCode
	AND CustProfCenter.CustomerCode = Invoice.CustomerCodeBill
	AND ProfitCenterCode = '200'
LEFT JOIN gnMstLookupDtl TOPCode
	ON TOPCode.CompanyCode = Invoice.CompanyCode
	AND TOPCode.CodeID = 'TOPC'
	AND TOPCode.LookupValue = CustProfCenter.TOPCode
LEFT JOIN gnMstLookupDtl CityCode
	ON CityCode.CompanyCode = Invoice.CompanyCode
	AND CityCode.CodeID = 'CITY'
	AND CityCode.LookupValue = CustBill.CityCode
LEFT JOIN ARInterface AR 
	ON AR.CompanyCode = Invoice.CompanyCode
	AND AR.BranchCode = Invoice.BranchCode
	AND AR.DocNo = Invoice.InvoiceNo
GO
CREATE VIEW [dbo].[SvCustomerView]
AS
SELECT        a.CompanyCode, b.CompanyName, a.CustomerCode, a.CustomerName, a.Address1, a.Address2, a.Address3, a.Address4, a.CityCode,
                             (SELECT        LookUpValueName
                               FROM            dbo.gnMstLookUpDtl
                               WHERE        (CodeID = 'CItY') AND (LookUpValue = a.CityCode)) AS CityName, a.FaxNo, a.PhoneNo, a.HPNo, a.NPWPNo, ISNULL(a.NPWPDate, '19000101') 
                         AS NPWPDate, a.SKPNo, ISNULL(a.SKPDate, '19000101') AS SKPDate, a.BirthDate
FROM            dbo.gnMstCustomer AS a LEFT OUTER JOIN
                         dbo.gnMstOrganizationHdr AS b ON b.CompanyCode = a.CompanyCode
GO
create view [dbo].[LookUpSO]
as
               SELECT a.CompanyCode, a.BranchCode,
                a.SONo, a.SODate, a.SalesType, a.CustomerCode, a.TOPCode, a.Installment, a.FinalPaymentDate,
                a.TOPDays, a.BillTo, a.ShipTo, a.ProspectNo, a.SKPKNo, a.Salesman, a.WareHouseCode, a.isLeasing, 
                a.LeasingCo, a.GroupPriceCode, a.Insurance, a.PaymentType, a.PrePaymentAmt, a.PrePaymentBy, 
                a.CommissionBy, a.CommissionAmt, a.PONo, a.ContractNo, a.Remark, a.Status,
                a.SalesCoordinator, a.SalesHead, a.BranchManager, a.RefferenceNo,
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
                then '' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDates, 
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
                CASE convert(varchar, a.RequestDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.RequestDate, 111) end as RequestDate,
                CASE convert(varchar, a.PrePaymentDate, 111) when convert(varchar, '1900/01/01') 
                then 'undefined' else convert(varchar, a.PrePaymentDate, 111) end as PrePaymentDate,
                e.Address1 + ' ' + e.Address2 + ' ' + e.Address3 + ' ' + e.Address4 as Address,
                case when year(a.RefferenceDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC1,
                case when a.SKPKNo <> '' then convert(bit,1) else convert(bit,0) end isC2,
                case when year(a.PrePaymentDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC3,
                case when year(a.RequestDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC4,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS CustomerName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID) as SalesmanName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.Shipto = b.CustomerCode)  
						AS ShipName,
                (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.LeasingCo = b.CustomerCode)  
						AS LeasingCoName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.PrePaymentby = c.EmployeeID) as PrePaymentName,
				(SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = 'GRPR' 
                        AND d.RefferenceCode = a.GroupPriceCode) AS GroupPriceName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS BillName,
				(SELECT b.lookupvaluename
                        FROM gnMstLookUpDtl b
                        WHERE a.WareHouseCode = b.LookUpValue
						AND a.WareHouseCode = b.LookUpValue and CodeID ='MPWH')  
						AS WareHouseName,
                (a.CustomerCode
                    + ' || '
                    + (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode))  
						AS Customer, 
                (a.Salesman
                    + ' || '
                    + (SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID))  AS Sales, 
                (a.GroupPriceCode
                    + ' || '
                    + (SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = 'GRPR' 
                        AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPrice, 
                CASE a.Status when 0 then 'OPEN'
                                when 1 then 'PRINTED'
                                when 2 then 'APPROVED'
                                when 3 then 'DELETED'
                                when 4 then 'REJECTED'
                                when 9 then 'FINISHED' END as Stat
                , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS TypeSales
                ,(select distinct x.TipeKendaraan
                    from pmKDP x
	                    left join gnMstEmployee b on x.CompanyCode=b.CompanyCode and x.BranchCode=b.BranchCode
		                    and x.EmployeeID=b.EmployeeID
	                    left join omTrSalesSO c on c.CompanyCode = x.CompanyCode 
		                    and c.BranchCode = x.BranchCode
		                    and c.ProspectNo = x.InquiryNumber
	                    left join omTrSalesInvoice d on d.CompanyCode = x.CompanyCode
		                    and d.BranchCode = x.BranchCode
		                    and d.SONo = c.SONo
	                    left join omTrSalesReturn e on e.CompanyCode = x.CompanyCode
		                    and e.BranchCode = x.BranchCode
		                    and e.InvoiceNo = d.InvoiceNo
                    where x.InquiryNumber=a.ProspectNo) as VehicleType
                FROM omTrSalesSO a
                INNER JOIN gnMstCustomer e
                ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode
GO
CREATE view [dbo].[SpClosePeriodPending]  as    

 SELECT DocumentNo, FiscalYear, FiscalMonth
, CASE Status 
    WHEN '0' THEN 'OPEN, BELUM PRINT DAN CLOSED'
    WHEN '1' THEN 'SUDAH PRINT, BELUM CLOSED'
    WHEN '2' THEN CASE LEFT(DocumentNo, 3) 
					WHEN 'WRL' THEN 'CLOSE, TETAPI BELUM DIBUATKAN HPP'
					WHEN 'WRN' THEN 'CLOSE, TETAPI BELUM DIBUATKAN HPP'
					WHEN 'BNL' THEN 'CLOSE, TETAPI BELUM DIBUATKAN WRS'
					WHEN 'SOC' THEN 'CLOSE, TETAPI BELUM DIBUATKAN PICKING LIST'					
				  END
    END AS Status
, ProfitCenter
, TableName 
, (
    SELECT LookupValueName
    FROM gnMstLookUpDtl
    WHERE LookupValue = a.TypeOfGoods
        AND CodeID = 'TPGO'
  ) AS TipePart
FROM gnErrorRaiseDtl a
GO
create view [dbo].[spCategoryCodeview] 
		 as
		 
		    select 
                a.LookupValue 'CategoryCode', a.LookupValueName 'CategoryName', a.CompanyCode
            from 
                gnMstLookupdtl a
				            where 
                          
                a.CodeID='CSCT'
GO
CREATE view [dbo].[vw_SyncEmployeeData]      
as      
select       
 distinct      
 --b.DealerName as DealerName,      
 --dbo.GetDealerName(a.CompanyCode) as DealerName,      
 BranchName = (      
  select       
   x.BranchName      
  from      
  gnMstOrganizationDtl x      
  where      
  CompanyCode = a.CompanyCode      
  and      
  BranchCode = a.BranchCode      
 ),      
 a.CompanyCode,      
 a.BranchCode,      
 a.EmployeeID,      
 a.EmployeeName,      
 a.SalesID,      
 a.DeptCode,      
 a.PosCode,      
 a.TeamLeaderID,      
 a.Grade,      
 convert(varchar(25),a.JoinDate,106) as JoinDate,      
 convert(varchar(25),a.ResignDate,106) as ResignDate,      
 convert(varchar(25),a.JoinDate,106) as JoinDates,      
 convert(varchar(25),a.ResignDate,106) as ResignDates,      
 a.AdditionalJob,      
 a.MaritalStatusCode,      
 a.ReligionCode,      
 a.GenderCode,      
 a.FormalEducation,      
 a.PersonnelStatus,      
 a.BirthPlace,      
 convert(varchar(25),a.BirthDate,106) as BirthDate,      
 convert(varchar(25),a.BirthDate,106) as BirthDates,      
 a.Address1,      
 a.Address2,      
 a.Address3,      
 a.ZipNo,      
 a.District,      
 a.CityCode,      
 a.IdentityNo,      
 a.Email,      
 a.PhoneNo,      
 a.HpNo,      
 a.Phone1,      
 a.Phone2,      
 a.Phone3,      
 a.Phone4,      
 a.FaxNo,      
 a.DrivingLicense1,      
 a.DrivingLicense2,      
 a.Height,      
 a.Weight,      
 a.BloodCode,      
 a.UniformSize,      
 a.ShoesSize,      
 a.ResignReason,      
 a.MutationTo,      
 convert(varchar(25),a.MutationDate,106) as MutationDate,      
 convert(varchar(25),a.MutationDate,106) as MutationDates,      
 a.EmployeeIDNew,      
 a.PromotionLevel,      
 convert(varchar(25),a.PromotionDate,106) as PromotionDate,      
 convert(varchar(25),a.PromotionDate,106) as PromotionDates,
 a.DemotionLevel,      
 convert(varchar(25),a.DemotionDate,106) as DemotionDate,      
 convert(varchar(25),a.DemotionDate,106) as DemotionDates,  
 TrnStdpDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate      
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%STDP%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSilverDate = (      
  select top 1      
  convert(varchar(25),x.TrainingDate,106) as TrainingDate     
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SPSS%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnGoldDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate       
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SPSG%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnPlatinumDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SPSP%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSCBasicDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SCB%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSCAdvDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SCA%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSHBasicDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SHB%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnSHIntDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%SHI%'      
  order by      
   x.TrainingSeq desc      
 ),      
 TrnBMDpDate = (      
  select top 1      
   convert(varchar(25),x.TrainingDate,106) as TrainingDate   
  from      
   SyncEmployeeTrainingHist x      
  where      
   x.CompanyCode = a.CompanyCode      
   and      
   x.EmployeeID = a.EmployeeID      
   and      
   x.TrainingCode like '%BMB%'      
  order by      
   x.TrainingSeq desc      
 ),      
 a.CreatedDate,      
 a.IsTransfered,      
 --a.TransferedID,      
 --a.TransferedDate,      
 a.IsDeleted,      
 PosName = (      
  select top 1      
   a1.PosName      
  from      
   gnMstPosition a1      
  where      
   a1.PosCode = a.PosCode      
   and      
  a1.DeptCode = a.DeptCode      
 ),      
 GradeName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'ITSG'      
   and      
   a1.LookupValue = a.Grade      
 ),      
 TeamLeaderName = (      
  select top 1      
   a1.EmployeeName      
  from       
   SyncEmployeeData a1      
  where      
   a1.EmployeeID = a.TeamLeaderID       
   and      
   a1.CompanyCode = a.CompanyCode        
 ),      
 MaritalStatusName = (      
  select top 1     a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'MRTL'      
   and      
   a1.LookupValue = a.MaritalStatusCode       
 ),      
 ReligionName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'RLGN'      
   and      
   a1.LookupValue = a.ReligionCode       
 ),      
 GenderName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'GNDR'      
   and      
   a1.LookupValue = a.GenderCode       
 ),      
 FormalEducatioName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'FEDU'      
   and      
   a1.LookupValue = a.FormalEducation       
 ),      
 PersonnelStatusName = (      
  select top 1      
   a1.LookupValueName      
  from       
   gnMstLookupDtl a1      
  where      
   a1.CodeID = 'PERS'      
   and      
   a1.LookupValue = a.PersonnelStatus       
 ),      
 MutationToName = (      
  select top 1      
   a1.BranchName      
  from       
   gnMstOrganizationDtl a1      
  where      
   a1.CompanyCode = a.CompanyCode      
   and      
   a1.BranchCode = a.MutationTo      
 ),      
 AdditionalJobName = (      
  select top 1      
   a1.PosName      
  from       
   gnMstPosition a1      
  where      
   a1.DeptCode = a.DeptCode      
   and      
   a1.PosCode = a.AdditionalJob      
 )      
from       
 SyncEmployeeData a      
left outer join      
 gnMstOrganizationDtl b      
on      
 b.BranchCode = a.BranchCode
GO
create view [dbo].[sp_spMstSalesTargetDtlview]
as

SELECT  [CompanyCode]
      ,[BranchCode]
      ,[Year]
      ,[Month]
      ,[CategoryCode]
	   ,(select  LookUpValueName from gnMstLookUpDtl where CompanyCode=spMstSalesTargetDtl.CompanyCode and CodeID='CSCT') as [CategoryName]
      
	,[QtyTarget]
      ,[AmountTarget]
       ,[TotalJaringan]
  FROM  spMstSalesTargetDtl
GO
create view [dbo].[sp_tempmodel]
as
            SELECT a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
GO
CREATE VIEW [dbo].[SvCustomerVehicleView]
AS
SELECT DISTINCT 
                         a.CompanyCode, e.BranchCode, a.ChassisCode + CONVERT(varchar, a.ChassisNo) AS VinNo, a.PoliceRegNo, ISNULL(b.CustomerName, '') AS CustomerName, 
                         RTRIM(RTRIM(b.Address1) + ' ' + RTRIM(b.Address2) + ' ' + RTRIM(b.Address3) + ' ' + RTRIM(b.Address4)) AS CustomerAddr, b.Address1, b.Address2, b.Address3, 
                         b.Address4, b.CityCode,
                             (SELECT        LookUpValueName
                               FROM            dbo.gnMstLookUpDtl
                               WHERE        (CodeID = 'CItY') AND (LookUpValue = b.CityCode)) AS CityName, b.PhoneNo, b.HPNo, b.FaxNo, a.ClubCode, a.ClubNo, 

							   case a.ClubDateFinish when '1900-01-01' then '' else 

                         ISNULL(REPLACE(CONVERT(varchar, a.ClubDateFinish, 6), ' ', '-'), '') end AS ClubEndPeriod, 
						 
						 
						 
						 d.IsActive AS ClubStatus, 
                         CASE a.IsClubStatus WHEN 1 THEN (CASE d .IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) ELSE '' END AS ClubStatusDesc, a.ContractNo, 
                         CASE a.IsContractStatus WHEN 1 THEN (CASE c.IsActive WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif' END) ELSE '' END AS ContractStatusDesc, 
                         CASE a.IsContractStatus WHEN 1 THEN (ISNULL(replace(CONVERT(varchar, a.RemainderDate, 6), ' ', '-'), '')) ELSE '' END AS ContractEndPeriod, a.BasicModel, 
                         a.ChassisNo, a.ChassisCode, a.EngineCode, a.EngineNo, a.TransmissionType, a.ServiceBookNo, CASE a.LastServiceDate WHEN ('19000101') 
                         THEN '' ELSE a.LastServiceDate END AS LastServiceDate, a.LastJobType, a.ColourCode, a.ColourCode AS ColorCode, a.CustomerCode
FROM            dbo.svMstCustomerVehicle AS a LEFT OUTER JOIN
                         dbo.gnMstCustomer AS b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode INNER JOIN
                         dbo.gnMstCustomerProfitCenter AS e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.CustomerCode LEFT OUTER JOIN
                         dbo.svMstContract AS c WITH (nowait, nolock) ON c.CompanyCode = a.CompanyCode AND c.ContractNo = a.ContractNo AND a.IsContractStatus = 1 LEFT OUTER JOIN
                         dbo.svMstClub AS d WITH (nowait, nolock) ON d.CompanyCode = a.CompanyCode AND d.ClubCode = a.ClubCode
WHERE        (a.IsActive = 1) AND (e.ProfitCenterCode = '200')
GO
create FUNCTION [dbo].[XSplitString] (
	@String varchar(max), @Delimiter char(1)
)
returns @temptable TABLE (Part varchar(8000))
as
begin
	declare @idx int
	declare @slice varchar(8000)

	select @idx = 1

	if len(@String)<1 or @String is null return

	while @idx!= 0
	begin
		set @idx = charindex(@Delimiter,@String)
		if @idx!=0
			set @slice = left(@String,@idx - 1)
		else
			set @slice = @String

		if(len(@slice)>0)
			insert into @temptable(Part) values(@slice)

		set @String = right(@String,len(@String) - @idx)
		if len(@String) = 0 break
	end
	return 
end
GO
CREATE TRIGGER [dbo].[trg_FPJNo]
   ON  [dbo].[omFakturPajakHdr]
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;
	UPDATE OmTrSalesInvoice SET FakturPajakNo = ISNULL((SELECT i.FakturPajakNo FROM inserted i WHERE i.CompanyCode = OmTrSalesInvoice.CompanyCode
	AND i.BranchCode = OmTrSalesInvoice.BranchCode AND i.InvoiceNo = OmTrSalesInvoice.InvoiceNo), FakturPajakNo), 
				FakturPajakDate = ISNULL((SELECT i.FakturPajakDate FROM inserted i WHERE i.CompanyCode = OmTrSalesInvoice.CompanyCode
	AND i.BranchCode = OmTrSalesInvoice.BranchCode AND i.InvoiceNo = OmTrSalesInvoice.InvoiceNo), FakturPajakDate)
		
END

--ROLLBACK
GO
CREATE procedure [dbo].[uspfn_PenjualFPLookup]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@ProfitCenterCode as varchar(15)
	,@CustomerCode as varchar(15)
as

declare @isBranch int
set @isBranch=(select isBranch from gnMstOrganizationDtl where CompanyCode=@CompanyCode and BranchCode=@BranchCode)

select a.CustomerCode, a.CustomerName,
       a.Address1+' '+a.Address2+' '+a.Address3+' '+a.Address4 as Address,
       c.LookUpValueName as ProfitCenter
from gnMstCustomer a 
	inner join gnMstCustomerProfitCenter b on 
		b.CustomerCode= b.CustomerCode and b.CustomerCode=a.CustomerCode
	inner join gnMstLookUpDtl c on c.CompanyCode= a.CompanyCode
		and c.LookupValue= b.ProfitCenterCode
		and c.CodeID= 'PFCN'
where a.CompanyCode=@CompanyCode
	and b.BranchCode=@BranchCode
	and b.ProfitCenterCode= @ProfitCenterCode
	and b.isBlackList=0
	and a.Status = 1
	and b.SalesType = '0' 
	and a.CustomerCode= (case when @isBranch=1 then @BranchCode else @CustomerCode end)
order by a.CustomerCode
GO
--uspfn_sfEmpTraining '9-9-2013'
					CREATE procedure [dbo].[uspfn_sfEmpTraining]
						@date    datetime
					as
					
select * into #temp from sfHistEmplMutation where 1=1
	and deptcode = 'SALES'
	and poscode = 'S'
	and left(convert(varchar,mutadate,112),6) <= left(convert(varchar,@date,112),6)

SELECT  
	 --a.CompanyCode ,a.CompanyGovName, a.BranchCode ,a.CompanyName
	a.CompanyCode, b.CompanyName, a.BranchCode, a.BranchName
	,isnull((SELECT count(*) FROM #temp 
							WHERE CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'IN'
								and isnull(isdeleted, 0) = 0
						 ), 0) -
						 isnull((SELECT count(*) FROM #temp 
							WHERE CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'OUT'
								and mutacode <> 'INACTIVE'
								and isnull(isdeleted, 0) = 0
						 ), 0) AS Total
							
						,isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '1'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'IN'
								and isnull(isdeleted, 0) = 0
							), 0) -
						 isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '1'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'OUT'
								and mutacode <> 'INACTIVE'
								and isnull(isdeleted, 0) = 0
							), 0) 
						 AS Trainee
							
						,isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '2'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'IN'
								and isnull(isdeleted, 0) = 0
							), 0) -
						 isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '2'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'OUT'
								and mutacode <> 'INACTIVE'
								and isnull(isdeleted, 0) = 0
							), 0) 
						 AS Silver
							
						,isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '3'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'IN'
								and isnull(isdeleted, 0) = 0
							), 0) -
						 isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '3'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'OUT'
								and mutacode <> 'INACTIVE'
								and isnull(isdeleted, 0) = 0
							), 0) 
						 AS Gold
							
						,isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '4'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'IN'
								and isnull(isdeleted, 0) = 0
							), 0) -
						 isnull((SELECT count(*) FROM #temp 
							WHERE Grade = '4'
								AND CompanyCode = a.CompanyCode
								and BranchCode = a.BranchCode
								and mutatype = 'OUT'
								and mutacode <> 'INACTIVE'
								and isnull(isdeleted, 0) = 0
							), 0) 
						 AS Platinum
							
						,(SELECT DISTINCT count(DISTINCT EmployeeID) FROM SyncEmployeeTrainingHist 
							WHERE BranchCode = a.BranchCode AND PosCode = 'S') AS Total
							
						,(SELECT DISTINCT count(DISTINCT EmployeeID) FROM SyncEmployeeTrainingHist 
							WHERE Grade = '1' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS Trainee
							
						,(SELECT DISTINCT count(DISTINCT EmployeeID) FROM SyncEmployeeTrainingHist 
							WHERE Grade = '2' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS Silver
							
						,(SELECT DISTINCT count(DISTINCT EmployeeID) FROM SyncEmployeeTrainingHist 
							WHERE Grade = '3' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS Gold
							
						,(SELECT DISTINCT count(DISTINCT EmployeeID) FROM SyncEmployeeTrainingHist 
							WHERE Grade = '4' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS Platinum
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'STDP7' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'STDP1' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP1
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'STDP2' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP2
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'STDP3' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP3
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'STDP4' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP4
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'STDP5' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP5
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'STDP6' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP6
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist
							WHERE TrainingCode = 'STDP7' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS STDP7
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'SPSS' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS SPSS
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist 
							WHERE TrainingCode = 'SPSG' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS SPSG
							
						,(SELECT DISTINCT count(*) FROM SyncEmployeeTrainingHist	
							WHERE TrainingCode = 'SPSP' AND BranchCode = a.BranchCode AND TrainingDate <= @date AND PosCode = 'S') AS SPSP
						
						,convert(varchar, @date, 111) AS thisDate
					--FROM gnMstCoProfile a
					  from GnMstOrganizationDtl a  
					  left join GnMstOrganizationHdr b on b.CompanyCode = a.CompanyCode
					ORDER BY BranchCode
GO
CREATE PROCEDURE [dbo].[uspfn_spModelGridLookup]
@CompanyCode varchar(15),
@CodeId varchar(15),
@PartNo varchar(30) = '',
@SEARCH varchar(30) = ''
AS
IF @PartNo <> ''
SELECT 
	 a.ModelCode, 
	 b.LookUpValueName as ModelName 
FROM spMstItemModel a
LEFT JOIN gnMstLookUpDtl b ON b.CompanyCode = @CompanyCode
						  AND b.CodeId = @CodeId
						  AND b.LookUpValue = a.ModelCode
WHERE a.CompanyCode=@CompanyCode  AND a.PartNo=@PartNo
ELSE IF @SEARCH <> ''
SELECT 
	 LookUpValue ModelCode, 
	 LookUpValueName as ModelName 
FROM gnMstLookUpDtl 
WHERE CompanyCode=@CompanyCode AND CodeId = @CodeId AND (
	LookUpValue LIKE @SEARCH + '%' OR
	LookUpValueName LIKE @SEARCH + '%'
)
ORDER By SeqNo
ELSE
SELECT 
	 LookUpValue ModelCode, 
	 LookUpValueName as ModelName 
FROM gnMstLookUpDtl 
WHERE CompanyCode=@CompanyCode AND CodeId = @CodeId
ORDER By SeqNo
GO
CREATE procedure [dbo].[sp_GetMaxQtyBinning]  (  
@CompanyCode varchar(10),
@BranchCode varchar(10),
@DocNo varchar(20),
@SupplierCode varchar(10),
--@CustomerCode varchar(10),
@PartNo varchar(20),
@BinningNo varchar(20),
@Opt varchar(10)
)
 as 
 
IF @Opt = 'P'
BEGIN
 
SELECT 
OrderQty, ReceivedQty
FROM
(
SELECT ISNULL(SUM(OnOrder),0) AS OrderQty
FROM SpTrnPOrderBalance with(nolock, nowait)
WHERE CompanyCode=@CompanyCode
AND BranchCode=@BranchCode
AND POSNo=@DocNo
AND SupplierCode=@SupplierCode
AND PartNo=@PartNo	                
) AS PO,
(
SELECT ISNULL(SUM(ReceivedQty),0) AS ReceivedQty
FROM spTrnPBinnDtl
INNER JOIN spTrnPBinnHdr ON spTrnPBinnDtl.CompanyCode = spTrnPBinnHdr.CompanyCode
AND spTrnPBinnDtl.BranchCode = spTrnPBinnHdr.BranchCode
AND spTrnPBinnDtl.BinningNo = spTrnPBinnHdr.BinningNo
WHERE spTrnPBinnDtl.CompanyCode = @CompanyCode 
AND spTrnPBinnDtl.BranchCode = @BranchCode AND DocNo = @DocNo AND PartNo = @PartNo
AND spTrnPBinnDtl.BinningNo NOT IN(@BinningNo) AND Status IN ('0', '1')
GROUP BY DocNo
) AS BINN            
END

ELSE 
BEGIN
SELECT 
OrderQty, ReceivedQty
FROM(
SELECT ISNULL(SUM(a.QtyBill),0) OrderQty
FROM SpTrnSBPSFDtl a with(nolock, nowait)
INNER JOIN SpTrnSBPSFHdr b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.BPSFNo = a.BPSFNo
WHERE a.CompanyCode = @CompanyCode
AND a.BranchCode = @BranchCode
AND a.BPSFNo = @DocNo
AND b.CustomerCode = @SupplierCode
AND a.PartNo = @PartNo                
) AS PO,
(
SELECT ISNULL(SUM(ReceivedQty),0) AS ReceivedQty
FROM spTrnPBinnDtl
INNER JOIN spTrnPBinnHdr ON spTrnPBinnDtl.CompanyCode = spTrnPBinnHdr.CompanyCode
AND spTrnPBinnDtl.BranchCode = spTrnPBinnHdr.BranchCode
AND spTrnPBinnDtl.BinningNo = spTrnPBinnHdr.BinningNo
WHERE spTrnPBinnDtl.CompanyCode = @CompanyCode 
AND spTrnPBinnDtl.BranchCode = @BranchCode AND DocNo = @DocNo AND PartNo = @PartNo	         
AND spTrnPBinnDtl.BinningNo NOT IN(@BinningNo)
) AS BINN  
END
GO
CREATE procedure [dbo].[uspfn_sp_partinquiry_subsitusi]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@PartNo varchar(32),
	@TypeOfGoods varchar(2)
AS

CREATE TABLE #TmpSubsitusi(
	[No] int,
	PartNo varchar(32),
	PartName varchar(122),
	InterchangeCode char(2),
	UnitConversion int,
	OnHand numeric(12,2),
	AllocationSP numeric(12,2),
	OnOrder numeric(12,2),
	InTransit numeric(12,2),
	Received numeric(12,2),
	isRegister varchar(22)
);

declare @interchangecode char(2), @newPartNo varchar(32), @partName varchar(200)
declare @onhand numeric(18,2), @alokasi numeric(18,2), @register varchar(22), @nomor int
declare @onorder numeric(18,2), @intransit numeric(18,2), @received numeric(18,2)

set @nomor = 1

declare c_subsitusi_cursor CURSOR LOCAL 
FOR
	SELECT ID,interchangecode FROM GetSUGGORModifikasi(@PartNo)
	where ID <> @PartNo

OPEN c_subsitusi_cursor

FETCH NEXT FROM c_subsitusi_cursor
INTO @newPartNo, @interchangecode  	

WHILE @@FETCH_STATUS = 0
BEGIN

	-- initialize default value
	select @onhand=0, @alokasi=0, @register = 'Not Register', @partName='', @onorder=0, @intransit=0, @received=0

	-- check registered part
	IF EXISTS(select onhand from spMstItems where partno=@newPartNo and CompanyCode=@CompanyCode and BranchCode=@BranchCode)
	begin
		select 
			@onhand= isnull(onhand,0), 
			@alokasi= isnull((AllocationSP + AllocationSL + AllocationSR),0),
			@register = 'Register'  
		from 
			spMstItems 
		where 
			partno=@newPartNo and 
			CompanyCode=@CompanyCode and 
			BranchCode=@BranchCode
	end

	-- get partname
	select @partName=partname from spMstItemInfo  
	where partno=@newPartNo and CompanyCode=@CompanyCode

	SELECT 
		@onorder = sum(a.OnOrder), 
		@intransit=sum(a.InTransit), 
		@received=sum(a.Received)
	FROM spTrnPOrderBalance a 
	WHERE a.CompanyCode=@CompanyCode
		AND a.BranchCode=@BranchCode
		AND a.PartNo=@newPartNo
		AND a.TypeOfGoods=@TypeOfGoods
	GROUP BY a.PartNo

	INSERT INTO  #TmpSubsitusi values (@nomor, @newPartNo, @partName, @interchangecode,1,@onhand,@alokasi,@onorder, @intransit, @received, @register);
	SET @nomor = @nomor + 1

	FETCH NEXT FROM c_subsitusi_cursor INTO @newPartNo, @interchangecode  

END

CLOSE c_subsitusi_cursor
DEALLOCATE c_subsitusi_cursor

select * from #TmpSubsitusi
GO
CREATE procedure [dbo].[uspfn_SelectFakturRetur]
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@TypeOfGoods as varchar(15)
as 
begin
--set @CompanyCode = '6006406'
--set @BranchCode = '6006401'
--set	@FPJNo = 'FPJ/14/000487'
--set	@TypeOfGoods = '5'
--set	@ProductType = '4W'
	select a.FpjNo
    , a.FpjDate
    , a.CustomerCode
    , isnull((
			select CustomerName from gnMstCustomer
			 where CompanyCode = a.CompanyCode and CustomerCode = a.CustomerCode
			), '') as CustomerName  
	 from spTrnSFpjHdr a, gnMstCoProfileSpare b
	where 1 = 1
	  and b.CompanyCode = a.CompanyCode
	  and b.BranchCode = a.BranchCode
	  and a.CompanyCode = @CompanyCode
	  and a.BranchCode  = @BranchCode 
	  and a.TypeOfGoods = @TypeOfGoods 
end
GO
CREATE procedure [dbo].[uspfn_PostingTaxIn]
	@CompanyCode nvarchar(25),
	@BranchCode nvarchar(25),
	@ProductType nvarchar(2),
	@PeriodYear int,
	@PeriodMonth int,
	@LastSeqNo int,
	@UserId varchar(max)
  
  as
  begin

SELECT * INTO #1 FROM (
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxIn WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth
UNION
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxInHistory WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth 
    AND IsDeleted = '1'
) Temp

/* AMBIL SEMUA DATA HPP SPARE */
select * into #t_1 from (
select b.SupplierCode, a.* 
from spTrnPHpp a
left join spTrnPRcvHdr b on b.CompanyCode = a.CompanyCode 
	and b.BranchCode = a.BranchCode
	and b.WRSNo = a.WRSNo
where
	a.CompanyCode	 = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	and a.YearTax	 = @PeriodYear
	and a.MonthTax	 = @PeriodMonth
)#t_1 

/* AMBIL SEMUA DATA BTT OTHER (AP) */
select * into #t_2 from (
select a.* 
from apTrnBTTOtherHdr a
where 
	a.CompanyCode = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	and a.FPJNo <> ''
	and SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    and RIGHT(a.FPJPeriod, 2) = @PeriodMonth
)#t_2 

/* DATA HPP SPARE YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA DENGAN BTT OTHER (NILAI DIJUMLAHKAN) */
SELECT * INTO #t_3 FROM (
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL((ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0)) + g.DppAmt,0) DPPAmt
, ISNULL((ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0)) + g.PPNAmt, 0) PPNAmt
, ISNULL(0 + g.PPNBmAmt, 0) PPNBmAmt
, 'PEMBELIAN SPARE PART' Description
, ISNULL(ISNULL(b.TotItem, 0)+(SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode 
							AND BranchCode = a.BranchCode AND BTTNo = g.BTTNo), 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
	INNER JOIN #t_2 g on g.BranchCode = a.BranchCode AND g.SupplierCode = b.SupplierCode
		AND g.FPJNo = a.TaxNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
) #t_3

-----------------------------------------------------------


SELECT * INTO #TaxIn FROM (
-- SALES : PURCHASE
SELECT
  a.CompanyCode
, a.BranchCode
, e.ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode 
, d.SupplierGovName SupplierName
, d.IsPKP 
, d.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.HPPNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, ISNULL((SELECT SUM(Quantity * (AfterDiscDPP + OthersDPP)) FROM omTrPurchaseHPPDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ), 0) DPPAmt
, ISNULL((SELECT SUM(Quantity * (AfterDiscPPn + OthersPPn)) FROM omTrPurchaseHPPDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ), 0) PPNAmt
, ISNULL((SELECT SUM(Quantity * AfterDiscPPnBM) FROM omTrPurchaseHPPDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ), 0) PPNBmAmt
, (SELECT TOP 1 SalesModelCode + ', NO. CHS. ' + CONVERT(VARCHAR, ChassisNo) FROM omTrPurchaseHPPSubDetail 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo) Description
, (SELECT COUNT(HPPSeq) FROM omTrPurchaseHPPSubDetail c 
	LEFT JOIN omTrPurchaseHPPDetailModel b ON c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode 
	AND c.HPPNo = b.HPPNo AND c.BPUNo = b.BPUNo
	WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.HPPNo = a.HPPNo) Quantity
FROM
	omTrPurchaseHPP a WITH(NOLOCK, NOWAIT)
	LEFT JOIN gnMstSupplier d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.SupplierCode = d.SupplierCode
	LEFT JOIN gnMstCoProfile e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
    INNER JOIN gnMstSupplierProfitCenter f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
	    AND a.BranchCode = f.BranchCode
        AND a.SupplierCode = f.SupplierCode
    INNER JOIN gnMstTax g WITH(NOLOCK, NOWAIT) ON a.CompanyCode = g.CompanyCode
        AND f.TaxCode = g.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND YEAR(a.LockingDate) = @PeriodYear
	AND MONTH(a.LockingDate) = @PeriodMonth
	AND a.Status NOT IN ('3')
    AND f.ProfitCenterCode = '100'
    AND g.TaxPct > 0
-------------------------------------------------------------------------------------
UNION
-- SALES : KAROSERI
SELECT
  a.CompanyCode
, a.BranchCode
, ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.KaroseriTerimaNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.Quantity, 0) * (ISNULL(a.DPPMaterial, 0) + ISNULL(a.DPPFee, 0) + ISNULL(a.DPPOthers, 0)) DPPAmt
, ISNULL(a.Quantity, 0) * ISNULL(a.PPn, 0) PPNAmt
, 0 PPNBmAmt
, a.KaroseriSPKNo Description
, ISNULL(a.Quantity, 0) Quantity
FROM
	omTrPurchaseKaroseriTerima a WITH(NOLOCK, NOWAIT)
	LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.SupplierCode = b.SupplierCode
	LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND YEAR(a.LockingDate) = @PeriodYear
	AND MONTH(a.LockingDate) = @PeriodMonth
	AND a.Status NOT IN ('3')
    AND d.ProfitCenterCode = '100'
    AND e.TaxPct > 0
-----------------------------------------------------------------------------------------
UNION
-- SALES : PURCHASE RETURN
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, YEAR(ReturnDate) PeriodYear
, MONTH(ReturnDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'R' DocumentType
, c.SupplierCode SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP IsPKP
, c.NPWPNo NPWP
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') FPJNo
, a.RefferenceDate FPJDate
, a.ReturnNo + ' (' + a.RefferenceNo + ')' ReferenceNo
, a.RefferenceDate ReferenceDate
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') TaxNo  
, a.RefferenceDate TaxDate
, a.ReturnDate SubmissionDate
, ISNULL((SELECT SUM(Quantity * (AfterDiscDPP + OthersDPP))FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 DPPAmt
, ISNULL((SELECT SUM(Quantity * (AfterDiscPPn + OthersPPn))FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 PPNAmt
, ISNULL((SELECT SUM(Quantity * AfterDiscPPnBM)FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 PPNBmAmt
, a.ReturnNo Description
, ISNULL((SELECT SUM(Quantity)FROM omTrPurchaseReturnDetailModel 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo), 0) * -1 Quantity
FROM
	omTrPurchaseReturn a WITH(NOLOCK, NOWAIT)
	LEFT JOIN omTrPurchaseHPP b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.HPPNo = b.HPPNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND YEAR(ReturnDate) = @PeriodYear
	AND MONTH(ReturnDate) = @PeriodMonth
	AND a.Status NOT IN ('3')
    AND e.ProfitCenterCode = '100'
    AND f.TaxPct > 0
---------------------------------------------------------------------------------------
UNION
-- SERVICE
SELECT
  a.CompanyCode
, a.BranchCode
, a.ProductType
, YEAR(RecDate) PeriodYear
, MONTH(RecDate) PeriodMonth
, '200' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP IsPKP
, b.NPWPNo NPWP
, a.FPJNo FPJNo
, a.FPJDate FPJDate
, a.PONo + ' (' + a.JobOrderNo + ')' ReferenceNo
, a.JobOrderDate RefferenceDate
, a.FPJGovNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.DPPAmt, 0) DPPAmt
, ISNULL(a.PPnAmt, 0) PPNAmt
, 0 PPNBmAmt
, a.RecNo Description
, 1 Quantity
FROM
	svTrnPOSubCon a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.SupplierCode = b.SupplierCode
    INNER JOIN gnMstSupplierProfitCenter c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
        AND a.SupplierCode = c.SupplierCode
    INNER JOIN gnMstTax d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
        AND c.TaxCode = d.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND a.ProductType = @ProductType
	AND YEAR(RecDate) = @PeriodYear
	AND MONTH(RecDate) = @PeriodMonth
    AND c.ProfitCenterCode = '200'
    AND d.TaxPct > 0
---------------------------------------------------------------------------------------
UNION 
-- SPAREPART
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0) DPPAmt
, ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0) PPNAmt
, 0 PPNBmAmt
, 'PEMB. S`PART' Description
, ISNULL(b.TotItem, 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
    AND a.BranchCode+'-'+b.SupplierCode+'-'+a.TaxNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- FINANCE
SELECT
  a.CompanyCode
, a.BranchCode
, c.ProductType
, SUBSTRING(a.FPJPeriod, 1, 4) PeriodYear
, RIGHT(a.FPJPeriod, 2) PeriodMonth
, '000' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.FPJNo
, a.FPJDate
, a.BTTNo + ' (' + a.ReffNo + ')' ReferenceNo
, a.ReffDate ReferenceDate
, a.FPJNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, a.DPPAmt
, a.PPNAmt
, a.PPnBMAmt
, (SELECT TOP 1 Description FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Description
, (SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Quantity	
FROM
    apTrnBTTOtherHdr a	WITH(NOLOCK, NOWAIT)    
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end 
    AND ProductType = @ProductType
    AND SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    AND RIGHT(a.FPJPeriod, 2) = @PeriodMonth
    AND a.Category = 'INV'
    AND d.ProfitCenterCode = '000'
    AND e.TaxPct > 0
    AND a.BranchCode+'-'+b.SupplierCode+'-'+a.FPJNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- SPARE PART DAN BTT YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA
SELECT * FROM #t_3
) #TaxIn

select ROW_NUMBER() OVER(ORDER BY #TaxIn2.BranchCode ASC, #TaxIn2.ProfitCenter ASC, #TaxIn2.TaxNo ASC) + @LastSeqNo SeqNo, * into #TaxIn2 from(
select 
	q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, ISNULL((SELECT TOP 1 TypeOfGoods FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo),'') TypeOfGoods
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, (SELECT TOP 1 FPJNo FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJNo
	, (SELECT TOP 1 FPJDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJDate
	, (SELECT TOP 1 ReferenceNo FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceNo
	, (SELECT TOP 1 ReferenceDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceDate
	, q1.TaxNo
	, (SELECT TOP 1 TaxDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) TaxDate
	, (SELECT TOP 1 SubmissionDate FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) SubmissionDate
	, sum(q1.DPPAmt) DPPAmt
	, sum(q1.PPNAmt) PPNAmt
	, sum(q1.PPnBMAmt) PPnBMAmt
	, (SELECT TOP 1 Description FROM #TaxIn WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) Description
	, sum(q1.Quantity) Quantity
from #TaxIn q1
group by
	q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, q1.TaxNo
) #TaxIn2
WHERE 
    #TaxIn2.BranchCode+'-'+#TaxIn2.TaxNo+'-'+#TaxIn2.SupplierCode 
        NOT IN (SELECT BranchCode+'-'+TaxNo+'-'+SupplierCode FROM #1)

INSERT INTO gnTaxIn SELECT CompanyCode, BranchCode, ProductType, PeriodYear, PeriodMonth, SeqNo, ProfitCenter, 
    TypeOfGoods, TaxCode, TransactionCode, StatusCode, DocumentCode, DocumentType, SupplierCode, SupplierName, 
    IsPKP, NPWP, FPJNo, FPJDate, ReferenceNo, ReferenceDate, TaxNo, TaxDate, SubmissionDate, DPPAmt, PPNAmt, 
    PPNBmAmt, Description, Quantity, 0 IsLocked, null LockingBy, null LockingDate, @UserId CreatedBy, 
    GETDATE() CreatedDate, @UserId LastupdateBy, GETDATE() LastupdateDate
    FROM #TaxIn2

DROP TABLE #1
DROP TABLE #TaxIn
DROP TABLE #TaxIn2
DROP TABLE #t_1
DROP TABLE #t_2
DROP TABLE #t_3
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirDataKendaraan] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @WarehouseCode varchar(100),
 @WarehouseCodeTo varchar(100),
 @SalesModelCode varchar(100),
 @SalesModelCodeTo varchar(100),
 @SalesModelYear varchar(100),
 @SalesModelYearTo varchar(100),
 @ChassisCode varchar(100),
 @ChassisCodeTo varchar(100),
 @ChassisNo varchar(100),
 @ChassisNoTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

select a.salesModelCode, (select b.SalesModelDesc from OmMstModel b
where a.CompanyCode = b.CompanyCode and a.SalesModelCode = b.SalesModelCode) as SalesModelDesc,
a.salesModelYear, a.chassisCode, convert(varchar, a.chassisNo) as chassisNo, a.engineCode, 
convert(varchar, a.engineNo) as engineNo,
CASE a.Status 
WHEN 0 THEN ''Ready''
WHEN 1 THEN ''Karoseri''
WHEN 2 THEN ''Return''
WHEN 3 THEN ''Order''
WHEN 4 THEN ''DO''
WHEN 5 THEN ''BPK''
WHEN 6 THEN ''Sales''
WHEN 7 THEN ''Transfer''
END as Status,
case a.isActive when 1 then ''Ya'' else ''Tidak'' end as isActive
from ommstvehicle a
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@WarehouseCode)) > 0
   set @pQuery = @pQuery + ' and a.WarehouseCode between ''' + rtrim(@WarehouseCode) + '''' + ' and ' + '''' + rtrim(@WarehouseCodeTo) + ''''

if len(rtrim(@SalesModelCode)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCode between ''' + rtrim(@SalesModelCode) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeTo) + ''''

if len(rtrim(@SalesModelYear)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYear) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@ChassisCode)) > 0
   set @pQuery = @pQuery + ' and a.ChassisCode between ''' + rtrim(@ChassisCode) + '''' + ' and ' + '''' + rtrim(@ChassisCodeTo) + ''''

if len(rtrim(@ChassisNo)) > 0
   set @pQuery = @pQuery + ' and a.ChassisNo between ''' + rtrim(@ChassisNo) + '''' + ' and ' + '''' + rtrim(@ChassisNoTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' 
set @pQuery = @pQuery + ' ORDER BY a.SalesModelCode '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
-- POSTING TRANSACTION MULTI COMPANY
-- ---------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT- , UIB-
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- --------------------------------------------------------------
-- execute [usprpt_PostingMultiCompany] '6006400001','2014/11/08'
-- --------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompany]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@UserId varchar(20)
AS	

BEGIN TRANSACTION



BEGIN TRY
 -- Check Posting Multi Company Date in table sysParameter
	declare @PostDate	varchar(10)
	declare @PostStatus	integer
	set @PostDate   = (select ParamValue from sysParaMeter where ParamId='POSTING_STATUS')
	set @PostStatus = (case when @PostDate is null                             then 0
	                        when @PostDate < convert(varchar,@PostingDate,111) then 1
					        else                                                    2
					   end)
	if @PostStatus = 0
		insert sysParaMeter values('POSTING_STATUS',convert(varchar,@PostingDate,111),'Posting Multi Company')
	else
		if @PostStatus = 1
			update sysParaMeter set ParamValue=convert(varchar,@PostingDate,111) where ParamId='POSTING_STATUS'
		else
			BEGIN
				select '0' [STATUS], 'Daily Posting tertanggal ' + convert(varchar,getdate(),106) + 'sudah pernah dilakukan sebelumnya....' [INFO]
				return
			END

  -- Check Tax/Seri Pajak online
		declare @TaxCompany					varchar(15)
		declare @TaxBranch					varchar(15)
		declare @TaxDB						varchar(50)
		declare @TaxTransCode				varchar(3)
		declare @swTaxBranch				varchar(15) = ''
		declare @swTaxDoc					varchar(15) = ''
		declare @TaxSeq						bigint
		declare @TaxSeqNo					int
		declare @SeriPajakNo				varchar(50) = ''

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			return

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode				varchar(15)
		declare @curBranchCode				varchar(15)
		declare @curDocNo					varchar(20)
		declare @curDocDate					datetime
		declare @curPartNo					varchar(20)
		declare @curPartSeq					integer
		declare @curWarehouseCode			varchar(15)
		declare @curQtyOrder				numeric(18,2)
		declare @curQty						numeric(18,2)
		declare @curDiscPct					numeric(06,2)
		declare @curCostPrice				numeric(18,2)
		declare @curRetailPrice				numeric(18,2)
		declare @curTypeOfGoods				varchar(15)
		declare @curCompanyMD				varchar(15)
		declare @curBranchMD				varchar(15)
		declare @curWarehouseMD				varchar(15)
		declare @curRetailPriceInclTaxMD	numeric(18,2)
		declare @curRetailPriceMD			numeric(18,2)
		declare @curCostPriceMD				numeric(18,2)
		declare @curQtyFlag					char(1)
		declare @curProductType				varchar(15)
		declare @curProfitCenterCode		varchar(15)
		declare @curStatus					char(1)
		declare @curProcessStatus			char(1)
		declare @curProcessDate				datetime
		declare @curCreatedBy				varchar(15)
		declare @curCreatedDate				datetime
		declare @curLastUpdateBy			varchar(15)
		declare @curLastUpdateDate			datetime
		declare @DocPrefix					varchar(15)
		declare @SONo						varchar(15)
		declare @PLNo						varchar(15)
		declare @INVNo						varchar(15)
		declare @FPJNo						varchar(15)
		declare @PosNo						varchar(15)
		declare @BinNo						varchar(15)
		declare @WrsNo						varchar(15)
		declare @HppNo						varchar(15)
		declare @APNo						varchar(15)
		declare @DocYear					numeric(4,0)
		declare @DocSeq						numeric(15,0)
		declare @SeqNo						integer
		declare @dbName						varchar(50)
		declare @dbNameMD					varchar(50)
		declare @sqlSelect					nvarchar(max)
		declare @sqlInsert					nvarchar(max)
		declare @sqlUpdate					nvarchar(max)
		declare @swCompanyCode				varchar(15) = ''
		declare @swBranchCode				varchar(15) = ''
		declare @swDocNo 					varchar(15) = ''
		declare @TotPurchaseAmt				numeric(18,0)
		declare @TotPurchaseNetAmt			numeric(18,0)
		declare @TotTaxAmt					numeric(18,0)
		declare @RetailPriceNet				numeric(18,0)
		declare @SalesAmt					numeric(18,0)
		declare @DiscAmt					numeric(18,0)
		declare @NetSales					numeric(18,0)
		declare @PPNAmt						numeric(18,0)
		declare @TotSalesAmt				numeric(18,0)
		declare @CostAmt 					numeric(18,0)
		declare @MovingCode					varchar(15)
		declare @ABCClass					char(1)
		declare @PartCategory				varchar(15)
		declare @LocationCode				varchar(10)
		declare @MovingCodeMD				varchar(15)
		declare @ABCClassMD					char(1)
		declare @PartCategoryMD				varchar(3)
		declare @LocationCodeMD				varchar(10)
		declare @ProductTypeMD				varchar(15)	
		declare @TypeOfGoodsMD				varchar(5)
		declare @PaymentCodeMD				varchar(15)
		declare @SalesCodeMD				varchar(15)
		declare @CustomerNameMD				varchar(100)
		declare @Address1MD					varchar(100)
		declare @Address2MD					varchar(100)
		declare @Address3MD					varchar(100)
		declare @Address4MD					varchar(100)
		declare @isPKPMD					varchar(100)
		declare @NPWPNoMD					varchar(100)
		declare @SKPNoMD					varchar(100)
		declare @SKPDateMD					datetime
		declare @NPWPDateMD					datetime
		declare @TopCodeMD					varchar(15)
		declare @TopDaysMD					integer
		declare @DueDateMD					date
		declare @AccNoArMD					varchar(50)
		declare @AccNoSalesMD				varchar(50)
		declare @AccNoTaxOutMD				varchar(50)
		declare @AccNoDisc1MD				varchar(50)
		declare @AccNoCogsMD				varchar(50)
		declare @AccNoInventoryMD			varchar(50)
		declare @AccNoInventory				varchar(50)
		declare @AccNoTaxIn					varchar(50)
		declare @AccNoAP					varchar(50)
		declare @SeqNoGlMD					numeric(10,0)
		declare @SeqNoGl					numeric(10,0)
		declare @DiscFlag					integer
		declare @CurrentDate				varchar(100) = convert(varchar,getdate(),121)
        declare cursvSDMovement cursor for
			select * from svSDMovement
             where left(DocNo,3) in ('LMP')--,'FPJ') 
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by CompanyCode, BranchCode, DocNo, TypeOfGoods, PartNo, PartSeq
		open cursvSDMovement

		fetch next from cursvSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
			       @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
				   @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
				   @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin
			 -- MD: MovingCode, ABCClass, PartCategory, Location Code, ProducType
				set @sqlSelect = N'select @MovingCodeMD=MovingCode from ' +@dbNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@MovingCodeMD varchar(15) output', @MovingCodeMD = @MovingCodeMD output
				set @sqlSelect = N'select @ABCClassMD=ABCClass from ' +@dbNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ABCClassMD char(1) output', @ABCClassMD = @ABCClassMD output
				set @sqlSelect = N'select @PartCategoryMD=PartCategory from ' +@dbNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@PartCategoryMD varchar(3) output', @PartCategoryMD = @PartCategoryMD output
				set @sqlSelect = N'select @LocationCodeMD=LocationCode from ' +@dbNameMD+ '..spMstItemLoc where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PartNo=''' +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @query=@sqlSelect, @params= N'@LocationCodeMD varchar(10) output', @LocationCodeMD = @LocationCodeMD output
				set @sqlSelect = N'select @ProductTypeMD=ProductType from ' +@dbNameMD+ '..gnMstCoProfile where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ProductTypeMD varchar(15) output', @ProductTypeMD = @ProductTypeMD output
				set @sqlSelect = N'select @TopCodeMD=TopCode from ' +@dbNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@TopCodeMD varchar(15) output', @TopCodeMD = @TopCodeMD output
				set @sqlSelect = N'select @PaymentCodeMD=PaymentCode from ' +@dbNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@PaymentCodeMD varchar(15) output', @PaymentCodeMD = @PaymentCodeMD output
				set @sqlSelect = N'select @SalesCodeMD=SalesCode from ' +@dbNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@SalesCodeMD varchar(15) output', @SalesCodeMD = @SalesCodeMD output
				set @sqlSelect = N'select @TopDaysMD=ParaValue from ' +@dbNameMD+ '..gnMstLookUpDtl 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' +@TopCodeMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@TopDaysMD integer output', @TopDaysMD = @TopDaysMD output
				set @sqlSelect = N'select @TypeOfGoodsMD=TypeOfGoods from ' +@dbNameMD+ '..spMstItems
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PartNo=''' +@curPartNo+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@TypeOfGoodsMD varchar(15) output', @TypeOfGoodsMD = @TypeOfGoodsMD output
				-- AR Account
				set @sqlSelect = N'select @AccNoArMD=c.ReceivableAccNo from ' 
				                          +@dbNameMD+ '..gnMstCustomerClass c,' 
										  +@dbNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ 
								  ''' and c.BranchCode      =''' +@curBranchMD+ 
								  ''' and c.ProfitCenterCode=''300''
								      and c.TypeOfGoods     =''' +@TypeOfGoodsMD+
								  ''' and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoArMD varchar(50) output', @AccNoArMD = @AccNoArMD output
				-- Sales Account
				set @sqlSelect = N'select @AccNoSalesMD=SalesAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoSalesMD varchar(50) output', @AccNoSalesMD = @AccNoSalesMD output
				-- Tax Account
				set @sqlSelect = N'select @AccNoTaxOutMD=c.TaxOutAccNo from ' 
										  +@dbNameMD+ '..gnMstCustomerClass c,' 
										  +@dbNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ ''' 
									  and c.BranchCode      =''' +@curBranchMD+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@TypeOfGoodsMD+ '''
									  and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoTaxOutMD varchar(50) output', @AccNoTaxOutMD = @AccNoTaxOutMD output
				-- Discount Account
				set @sqlSelect = N'select @AccNoDisc1MD=DiscAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoDisc1MD varchar(50) output', @AccNoDisc1MD = @AccNoDisc1MD output
				-- COGS Account
				set @sqlSelect = N'select @AccNoCogsMD=COGSAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoCogsMD varchar(50) output', @AccNoCogsMD = @AccNoCogsMD output
				-- Inventory Account
				set @sqlSelect = N'select @AccNoInventoryMD=InventoryAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoInventoryMD varchar(50) output', @AccNoInventoryMD = @AccNoInventoryMD output

				set @SalesAmt    = @curQty*@curRetailPriceInclTaxMD 
				set @DiscAmt     = round((@SalesAmt*@curDiscPct / 100),0)
				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt
				set @CostAmt     = @curQty*@curCostPriceMD 
				set @DueDateMD   = dateadd(day,isnull(@TopDaysMD,0),@curDocDate)

			 -- SD: MovingCode, ABCClass, PartCategory, Location Code
				-- A/P Account
				set @sqlSelect = N'select @AccNoAP=c.PayableAccNo from ' 
										  +@dbName+ '..gnMstSupplierClass c,' 
										  +@dbName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoAP varchar(50) output', @AccNoAP = @AccNoAP output

				-- TAX IN Account
				set @sqlSelect = N'select @AccNoTaxIn=c.TaxInAccNo from ' 
										  +@dbName+ '..gnMstSupplierClass c,' 
										  +@dbName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoTaxIn varchar(50) output', @AccNoTaxIn = @AccNoTaxIn output

				-- Inventory Account
				set @sqlSelect = N'select @AccNoInventory=InventoryAccNo from ' 
										  +@dbName+ '..spMstAccount
									where CompanyCode=''' +@curCompanyCode+ ''' 
									  and BranchCode =''' +@curBranchCode+ '''
									  and TypeOfGoods=''' +@CurTypeOfGoods+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoInventory varchar(50) output', @AccNoInventory = @AccNoInventory output

				set @sqlSelect = N'select @MovingCode=MovingCode from ' +@dbName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@MovingCode varchar(15) output', @MovingCode = @MovingCode output
				set @sqlSelect = N'select @ABCClass=ABCClass from ' +@dbName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ABCClass varchar(15) output', @ABCClass = @ABCClass output
				set @sqlSelect = N'select @PartCategory=PartCategory from ' +@dbName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@PartCategory varchar(15) output', @PartCategory = @PartCategory output
				set @sqlSelect = N'select @LocationCode=LocationCode from ' +@dbName+ '..spMstItemLoc where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and PartNo=''' +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @query=@sqlSelect, @params= N'@LocationCode varchar(15) output', @LocationCode = @LocationCode output

				set @RetailPriceNet    = round(@curRetailPriceMD * (100.00-@curDiscPct) / 100.00,0)
				set @TotPurchaseNetAmt = @CurQty * @RetailPriceNet
				set @TotTaxAmt         = round(@TotPurchaseNetAmt * 0.1,0)
			    set @TotPurchaseAmt    = @TotPurchaseNetAmt + @TotTaxAmt

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0

					 -- MD : Database Name, Company Code & Branch Code MD
						--set @dbNameMD = (select * from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)
					    set @dbNameMD = (select DbMD from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode)

					 -- SD : Database Name 
						set @dbName = (select DbName from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)

					 -- Discount Flag
						set @sqlSelect = N'select top 1 @DiscFlag=1 from ' +@dbName+ '..svSDMovement where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocNo=''' +@curDocNo+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@DiscFlag integer output', @DiscFlag = @DiscFlag output

					 -- SD : Insert data to table spTrnPPOSHdr
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='POS'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='POS'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
							execute sp_executesql @sqlUpdate 
						set @PosNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPPOSHdr 
										(CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, isBO, isSubstution, isSuggorProcess, 
										 Remark, ProductType, PrintSeq, ExPickingSlipNo, ExPickingSlipDate, Status, Transportation, TypeOfGoods, 
										 isGenPORDD, isDeleted, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
										 LockingDate, isDropSign, DropSignReffNo)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@PosNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''S'',0,0,0,''' 
												   +@curDocNo+ ''',''' +@curProductType+ ''',1,'''',NULL,7,NULL,''' 
												   +@curTypeOfGoods+ ''',0,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL,0,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD : Insert data to table spTrnSORDHdr 
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
							execute sp_executesql @sqlUpdate 
						set @SONo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSORDHdr 
										(CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill,
										 CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, isPORDD, OrderNo, OrderDate,
										 TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt,
										 TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate, isDropSign)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''' +@curBranchCode+ ''',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',0,0,1,''00'',''0'',0,''' 
												   +@PosNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@TopCodeMD+ ''',''' 
												   +convert(varchar,@TopDaysMD)+ ''',''' +@PaymentCodeMD+ ''',NULL,0.00,0,0,0,0,0,1,NULL,NULL,5,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,''' +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSPickingHdr 
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
							execute sp_executesql @sqlUpdate 
						set @PLNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSPickingHdr 
										(CompanyCode, BranchCode, PickingSlipNo, PickingSlipDate, CustomerCode, CustomerCodeBill, 
										 CustomerCodeShip, PickedBy, isBORelease, isSubstitution, isIncludePPN, TransType, SalesType, 
										 TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Remark, Status, 
										 PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchCode+
											   ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''POSTING'',0,0,1,''00'',''0'',0,0,0,0,0,0,NULL,2,1,'''
											           +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSInvoiceHdr 
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
								execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
								execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
								execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
								execute sp_executesql @sqlUpdate 
						set @INVNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
								execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
								execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
								execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
								execute sp_executesql @sqlUpdate 
						set @FPJNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSInvoiceHdr 
										(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, PickingSlipNo, PickingSlipDate, FPJNo, FPJDate,
										 TransType, SalesType, CustomerCode, CustomerCodeBill, CustomerCodeShip, TotSalesQty, TotSalesAmt, 
										 TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@PLNo+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''0'','''
													   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ 
											   ''',0,0,0,0,0,0,''2'',1,''' +left(@TypeOfGoodsMD,1)+
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSFPJHdr 
						--Tax / Seri Pajak Numbering

						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>@swTaxDoc
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlSelect = N'select top 1 @TaxSeq=FPJSeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlSelect, @params= N'@TaxSeq bigint output', @TaxSeq = @TaxSeq output

								set @sqlSelect = N'select top 1 @TaxSeqNo=SeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ '''and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlSelect, @params= N'@TaxSeqNo int output', @TaxSeqNo = @TaxSeqNo output

								set @sqlSelect = N'select top 1 @TaxTransCode=TaxTransCode from ' 
												+@TaxDb+ '..gnMstCoProfile where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch+ ''''
									execute sp_executesql @query=@sqlSelect, @params= N'@TaxTransCode varchar(3) output', @TaxTransCode = @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlUpdate = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlUpdate 

								set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
													+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
													+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
							end

						set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSFPJHdr 
										(CompanyCode, BranchCode, FPJNo, FPJDate, TPTrans, FPJGovNo, FPJSignature, 
										 FPJCentralNo, FPJCentralDate, DeliveryNo, InvoiceNo, InvoiceDate, PickingSlipNo, 
										 PickingSlipDate, TransType, CustomerCode, CustomerCodeBill, CustomerCodeShip, 
										 TOPCode, TOPDays, DueDate, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, 
										 TotFinalSalesAmt, isPKP, Status, PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, 
										 LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''P'',''' +@SeriPajakNo+ ''','''
											       +convert(varchar,@curDocDate,121)+ ''',NULL,'''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''',''' 
												   +@INVNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@PLNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' 
												   +@TopCodeMD+ ''',''' +convert(varchar,@TopDaysMD)+ ''',''' 
												   +convert(varchar,@DueDateMD,121)+ ''',0,0,0,0,0,0,1,1,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSFPJInfo
						set @sqlSelect = N'select @CustomerNameMD=CustomerGovName from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@CustomerNameMD varchar(100) output', @CustomerNameMD = @CustomerNameMD output
						set @sqlSelect = N'select @Address1MD=Address1 from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address1MD varchar(100) output', @Address1MD = @Address1MD output
						set @sqlSelect = N'select @Address2MD=Address1 from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address2MD varchar(100) output', @Address2MD = @Address2MD output
						set @sqlSelect = N'select @Address3MD=Address1 from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address3MD varchar(100) output', @Address3MD = @Address3MD output
						set @sqlSelect = N'select @Address4MD=Address1 from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@Address4MD varchar(100) output', @Address4MD = @Address4MD output
						set @sqlSelect = N'select @isPKPMD=isPKP from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@isPKPMD bit output', @isPKPMD = @isPKPMD output
						set @sqlSelect = N'select @NPWPNoMD=NPWPNo from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@NPWPNoMD varchar(100) output', @NPWPNoMD = @NPWPNoMD output
						set @sqlSelect = N'select @SKPNoMD=SKPNo from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@SKPNoMD varchar(100) output', @SKPNoMD = @SKPNoMD output
						set @sqlSelect = N'select @SKPDateMD=SKPDate from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@SKPDateMD datetime output', @SKPDateMD = @SKPDateMD output
						set @sqlSelect = N'select @NPWPDateMD=NPWPDate from ' +@dbNameMD+ '..gnMstCustomer 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CustomerCode=''' +@curBranchCode+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@NPWPDateMD datetime output', @NPWPDateMD = @NPWPDateMD output

						set @sqlInsert = 'insert into ' +@dbNameMD+ '..sptrnsfpjinfo 
										(CompanyCode, BranchCode, FPJNo, CustomerName, Address1, Address2, 
										 Address3, Address4, isPKP, NPWPNo, SKPNo, SKPDate, NPWPDate, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +@CustomerNameMD+ ''',''' +@Address1MD+ ''',''' 
											   +@Address2MD+ ''',''' +@Address3MD+ ''',''' +@Address4MD+ 
											   ''',''' +@isPKPMD+ ''',''' +@NPWPNoMD+ ''',''' +@SKPNoMD+ 
											   ''',''' +convert(varchar,@SKPDateMD,121)+ ''',''' 
											   +convert(varchar,@NPWPDateMD,121)+ ''',''POSTING'',''' 
											   +convert(varchar,@PostingDate,121)+ ''',''POSTING'',''' 
											   +@currentDate+ ''')'
							execute sp_executesql @sqlInsert

					 -- SD : Insert data to table spTrnPBinnHdr 
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='BNL'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='BNL'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
							execute sp_executesql @sqlUpdate 
						set @BinNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPBinnHdr 
										(CompanyCode, BranchCode, BinningNo, BinningDate, ReceivingType, DNSupplierNo, DNSupplierDate, TransType, 
										 SupplierCode, ReferenceNo, ReferenceDate, TotItem, TotBinningAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BinNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''','''
												   +@FPJNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' 
												   +@curTypeOfGoods+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert
					
					 -- SD : Insert data to table spTrnPRcvHdr 
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='WRL'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='WRL'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
							execute sp_executesql @sqlUpdate 
						set @WrsNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPRcvHdr 
										(CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate, ReceivingType, 
										 DNSupplierNo, DNSupplierDate, TransType, SupplierCode, ReferenceNo, ReferenceDate, 
										 TotItem, TotWRSAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WrsNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BinNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' 
												   +@curCompanyMD+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlInsert

					 -- SD : Insert data to spTrnPHPP 
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='HPP'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='HPP'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
							execute sp_executesql @sqlUpdate 
						set @HppNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)

						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNP'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNP'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNP'''
							execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNP'''
							execute sp_executesql @sqlUpdate 
						set @APNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)

						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPHPP 
										(CompanyCode, BranchCode, HPPNo, HPPDate, WRSNo, WRSDate, ReferenceNo, ReferenceDate,
										 TotPurchAmt, TotNetPurchAmt, TotTaxAmt, TaxNo, TaxDate, MonthTax, YearTax, DueDate,
										 DiffNetPurchAmt, DiffTaxAmt, TotHppAmt, CostPrice, PrintSeq, TypeOfGoods, Status, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HppNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WrsNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,0,''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,month(@curDocDate),121)+ ''',''' 
												   +convert(varchar,year(@curDocDate),121)+ ''',''' 
												   +convert(varchar,@DueDateMD,111)+ ''',0,0,0,0,1,''' 
												   +@curTypeOfGoods+ ''',2,''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''')'
							execute sp_executesql @sqlInsert
					end   

				set @SeqNo = @SeqNo + 1
			 -- SD: Insert data to table spTrnPPOSDtl 
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPPOSDtl
										(CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, PurchasePrice, DiscPct,
										 PurchasePriceNett, CostPrice, TotalAmount, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, Note)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@PosNo+ ''',''' +@curPartNo+ 
										  ''',' +convert(varchar,@SeqNo)+ ',' +convert(varchar,@curQty)+ 
										  ',' +convert(varchar,@curQtyOrder)+ ',' +convert(varchar,@curRetailPrice)+ 
										  ',' +convert(varchar,@curDiscPct)+ ',' +convert(varchar,@RetailPriceNet)+ 
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@TotPurchaseNetAmt)+ 
										  ',''' +@ABCClass+ ''',''' +@MovingCode+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curDocNo+ ''')'
					execute sp_executesql @sqlInsert  

			 -- SD: Insert data to table spTrnPOrderBalance
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPOrderBalance
										(CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
										 POSDate, OrderQty, OnOrder, Intransit, Received, Located, DiscPct, PurchasePrice, 
										 CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@PosNo+ ''',''' 
											  +@curBranchMD+ ''',''' +@curPartNo+ ''',' +convert(varchar,@SeqNo)+ ','''
											  +@curPartNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','
											  +convert(varchar,@curQty)+ ',0,0,' +convert(varchar,@curQty)+ ','
											  +convert(varchar,@curQty)+ ',' +convert(varchar,@curDiscPct)+ ','
											  +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+ ','''
											  +@ABCClass+ ''',''' +@MovingCode+ ''',''' +@WrsNo+ ''',''' 
											  +convert(varchar,@curDocDate,121)+ ''',''' +@curTypeOfGoods+ ''',''' 
											  +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											  +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Insert data to table spTrnSORDDtl
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSORDDtl
										(CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, 
										 ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, 
										 QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice,
										 CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, 
										 MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
										 StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +@curPartNo+ ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',0,0,0,'''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ ''','''
										  +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ ''','''
										  +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ ''','''
										  +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ ''','''
										  +@MovingCode+ ''',''' +left(@ABCClass,1)+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',5,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +convert(varchar,@curQtyOrder)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Insert data to table spTrnSOSupply  --select * from spTrnSOSupply where left(docNo,3)='SOC' order by DocNo desc
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSOSupply
										(CompanyCode, BranchCode, DocNo, SupSeq, PartNo, PartNoOriginal, PTSeq, 
										 PickingSlipNo, ReferenceNo, ReferenceDate, WarehouseCode, LocationCode, 
										 QtySupply, QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, 
										 DiscPct, MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',0,''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +convert(varchar,@SeqNo)+ ''',''' +@PLNo+
										  ''',''' +@PosNo+ ''',''' +convert(varchar,@curCreatedDate,121)+
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +@MovingCode+ ''',''' +@ABCClass+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',2,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Update data to table spTrnSORDHdr
				set @sqlUpdate = 'update ' +@dbNameMD+ '..spTrnSORDHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocNo=''' +@SONo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlInsert

			 -- MD: Insert/Update data to table spHstDemandItem 
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..spHstDemandItem as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
						                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert
			 --MD: Insert/Update data to table spHstDemandcust 
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..spHstDemandcust as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curBranchCode+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.CustomerCode= SRC.NewCustomer
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, CustomerCode, PartNo, DemandFreq, DemandQty, SalesFreq, 
									    SalesQty, MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

			 -- MD: Insert Data to table spTrnSPickingDtl
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSPickingDtl
										(CompanyCode, BranchCode, PickingSlipNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, 
										 QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, 
										 SalesAmt, DiscAmt, NetSalesAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, 
										 PartCategory, ExPickingSlipNo, ExPickingSlipDate, isClosed, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@PosNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQtyOrder)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@TotSalesAmt)+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ 
										  ''',NULL,NULL,0,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert
			 -- MD: Update data to table spTrnSPickingHdr
				set @sqlUpdate = 'update ' +@dbNameMD+ '..spTrnSPickingHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert Data to table spTrnSInvoiceDtl
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSInvoiceDtl
										(CompanyCode, BranchCode, InvoiceNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, 
										 MovingCode, ABCClass, ExPickingListNo, ExPickingListDate, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@InvNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@PosNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',NULL,NULL,''' 
										          +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Update data to table spTrnSInvoiceHdr
				set @sqlUpdate = 'update ' +@dbNameMD+ '..spTrnSInvoiceHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert Data to table spTrnSFPJDtl
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSFPJDtl
										(CompanyCode, BranchCode, FPJNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, MovingCode, 
										 ABCClass, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@PosNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert

			 -- MD: Update data to table spTrnSFPJHdr
				set @sqlUpdate = 'update ' +@dbNameMD+ '..spTrnSFPJHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''FAKTUR'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlInsert

			 -- MD: Insert/Update data to table arInterface
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..arInterface as ar using ( values(''' 
								 +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
								 +convert(varchar,@curDocDate,121)+ ''',''300'',''' 
								 +convert(varchar,@TotSalesAmt)+ ''',0,''' 
								 +convert(varchar,@curBranchCode)+ ''',''' +@TopCodeMD+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',''INVOICE'',0,0,0,'''
								 +@SalesCodeMD+ ''',NULL,0,''POSTING'',''' 
								 +convert(varchar,@PostingDate,111)+ ''',''' 
								 +@AccNoArMD+ ''',NULL,''' +convert(varchar,@curDocDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
								NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
								NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate)
						on ar.CompanyCode = SRC.NewCompany
					   and ar.BranchCode  = SRC.NewBranch
					   and ar.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NettAmt = NettAmt + NewNettAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode, NettAmt, ReceiveAmt, 
										 CustomerCode, TOPCode, DueDate, TypeTrans, BlockAmt, DebetAmt, CreditAmt, SalesCode, 
										 LeasingCode, StatusFlag, CreateBy, CreateDate, AccountNo, FakturPajakNo, FakturPajakDate)
								values (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
										NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
										NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate);'
					execute sp_executesql @sqlInsert

			 -- MD: Insert/Update data to table glInterface
				-- glInterface - AR
				set @SeqNoGLMD = 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoArMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@TotSalesAmt)+ 
											   ''',0,''AR'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AR''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - SALES
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoSalesMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@SalesAmt)+ 
											   ''',''SALES'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''SALES''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - TAX OUT
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoTaxOutMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@PPNAmt)+ 
											   ''',''TAX OUT'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX OUT''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - DISC1
				if isnull(@DiscFlag,0) = 1
				begin
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoDisc1MD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@DiscAmt)+ 
											   ''',0,''DISC1'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''DISC1''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert
				end

				-- glInterface - COGS
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoCogsMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@CostAmt)+ 
											   ''',0,''COGS'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''COGS''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - INVENTORY
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoInventoryMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@CostAmt)+ 
											   ''',''INVENTORY'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

			 -- SD: Insert data to table spTrnPBinnDtl 
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPBinnDtl
										(CompanyCode, BranchCode, BinningNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BinNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert  
			 -- SD: Update data to table spTrnPBinnHdr
				set @sqlUpdate = 'update ' +@dbName+ '..spTrnPBinnHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotBinningAmt = TotBinningAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BinNo + ''''
					execute sp_executesql @sqlUpdate 
			 -- SD: Insert data to table spTrnPRcvDtl 
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPRcvDtl
										(CompanyCode, BranchCode, WRSNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlInsert  
			 -- SD: Update data to table spTrnPRcvHdr
				set @sqlUpdate = 'update ' +@dbName+ '..spTrnPRcvHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotWRSAmt = TotWRSAmt + ' +convert(varchar,@TotPurchaseNetAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BinNo + ''''
					execute sp_executesql @sqlUpdate 

			 -- SD: Update data to table spTrnPHPP
				set @sqlUpdate = 'update ' +@dbName+ '..spTrnPHPP
								     set TotPurchAmt     = TotPurchAmt     + ' +convert(varchar,@TotPurchaseAmt)+ 
									  ', TotNetPurchAmt  = TotNetPurchAmt  + ' +convert(varchar,@TotPurchaseNetAmt)+ 
									  ', TotTaxAmt       = TotTaxAmt       + ' +convert(varchar,@TotTaxAmt)+ 
									  ', DiffNetPurchAmt = DiffNetPurchAmt   ' +
									  ', DiffTaxAmt      = DiffTaxAmt        ' +
									  ', TotHPPAmt       = TotHPPAmt       + ' +convert(varchar,@TotPurchaseAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and HPPNo=''' +@HPPNo + ''''
					execute sp_executesql @sqlUpdate 

				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt

			 -- SD: Insert/Update data to table apInterface
				set @sqlInsert = 'merge into ' +@dbName+ '..apInterface as ap using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HppNo+ ''',''' 
								 +@curProfitCenterCode+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +@WrsNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''' +@curCompanyMD+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''' +@AccNoAP+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',NULL,0,0,''POSTING'','''
								 +convert(varchar,@PostingDate,111)+ ''',0,''' +@SeriPajakNo+ ''','''
								 +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
								NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
								NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo)
						on ap.CompanyCode = SRC.NewCompany
					   and ap.BranchCode  = SRC.NewBranch
					   and ap.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NetAmt = NetAmt + NewNetAmt
										 , PPNAmt = PPNAmt + NewPPNAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, ProfitCenterCode, DocDate, Reference, 
										ReferenceDate, NetAmt, PPHAmt, SupplierCode, PPNAmt, PPnBM, AccountNo, 
										TermsDate, TermsName, TotalAmt, StatusFlag, CreateBy, CreateDate, 
										ReceiveAmt, FakturPajakNo, FakturPajakDate, RefNo)
								values (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
										NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
										NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo);'
					execute sp_executesql @sqlInsert

			 -- SD: Insert/Update data to table glInterface
				-- glInterface - INVENTORY
				set @SeqNoGL = 1
				set @sqlInsert = 'merge into ' +@dbName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoInventory+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''INVENTORY'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - TAX IN
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlInsert = 'merge into ' +@dbName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoTaxIn+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''TAX IN'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX IN''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

				-- glInterface - AP
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlInsert = 'merge into ' +@dbName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoAP+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',0,'''
								 +convert(varchar,@TotPurchaseAmt)+ ''',''AP'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AP''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlInsert

			 -- SD: Insert data to table glJournal 
			 -- SD: Insert data to table glJournalDtl
				--select * from spTrnPRcvHdr where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPRcvDtl where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPHPP    where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from apInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and Reference in ('WRL/14/102818','WRL/14/102819') --DocNo='HPP/14/102793'
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and DocNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournal    where CompanyCode='6006400001' and BranchCode='6006400131' and ProfitCenterCode='300' order by JournalNo desc --and ReffNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournalDtl where CompanyCode='6006400001' and BranchCode='6006400131' and Description in ('HPP/14/102808','HPP/14/102815')
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and left(DocNo,3) in ('FPJ','HPP') order by BatchNo desc

			 -- Update Daily Posting Process Status
				update svSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and PartNo     =@curPartNo
					  and PartSeq    =@curPartSeq

			 -- Read next record
				fetch next from cursvSDMovement
					into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
						 @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
						 @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
						 @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table svSDMovement to table svHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[svHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[svHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[PartNo] [varchar](20) NOT NULL,
				[PartSeq] [int] NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[QtyOrder] [numeric](18, 2) NOT NULL,
				[Qty] [numeric](18, 2) NOT NULL,
				[DiscPct] [numeric](5, 2) NOT NULL,
				[CostPrice] [numeric](18, 2) NOT NULL,
				[RetailPrice] [numeric](18, 2) NOT NULL,
				[TypeOfGoods] [varchar](5) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[RetailPriceInclTaxMD] [numeric](18, 2) NOT NULL,
				[RetailPriceMD] [numeric](18, 2) NOT NULL,
				[CostPriceMD] [numeric](18, 2) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[ProductType] [varchar](15) NOT NULL,
				[ProfitCenterCode] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NULL,
				[LastUpdateDate] [datetime] NULL)

		insert into svHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  svSDMovement
							  where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		delete svSDMovement   where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		close cursvSDMovement
		deallocate cursvSDMovement


END TRY

BEGIN CATCH
    select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		   ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		rollback transaction
	return
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting Done !!!' [INFO]
		--rollback transaction
		commit transaction
	end
GO
CREATE procedure [dbo].[uspfn_spMstCompanyAccountDtl] (  @CompanyCode varchar(10) , @Search varchar(50) = '')
 as
  IF @Search <> ''
		  select  distinct
		(select   LookUpValueName from gnMstLookUpDtl 
		inner join  gnMstAccount b
		on gnMstLookUpDtl.CompanyCode=b.CompanyCode  where CodeID='TPGO' and LookUpValue=a.TPGO ) as TPGO
		,a.InterCompanyAccNoTo AccountNo,b.[Description] as AccountName,a.CompanyCode,a.CompanyCodeTo
		from spMstCompanyAccountdtl a
		inner join gnMstAccount b
		on a.CompanyCode=b.CompanyCode and
		a.InterCompanyAccNoTo=b.AccountNo
		inner join  spMstCompanyAccount c 
		on a.CompanyCode=c.CompanyCode and a.CompanyCodeTo=c.CompanyCodeTo 
		where a.CompanyCode=@CompanyCode 
		and (b.[Description] like '%' + @Search + '%' or
		     [TPGO] like '%' + @Search + '%' or
			  a.InterCompanyAccNoTo like '%' + @Search + '%' or
			 a.CompanyCodeTo like '%' + @Search + '%'

		)



  else
		select    
		(select  LookUpValueName from gnMstLookUpDtl  where CodeID='TPGO' and LookUpValue=a.TPGO ) as 'TPGO'
		,a.InterCompanyAccNoTo  'AccountNo',b.[Description]  as 'AccountName',a.CompanyCode,a.CompanyCodeTo
		from spMstCompanyAccountdtl a
		inner join gnMstAccount b
		on a.CompanyCode=b.CompanyCode and
			a.InterCompanyAccNoTo=b.AccountNo
		inner join  spMstCompanyAccount c 
		on a.CompanyCode=c.CompanyCode and a.CompanyCodeTo=c.CompanyCodeTo 
			where a.CompanyCode=@CompanyCode
GO
create procedure [dbo].[sp_gnMstSupplierView]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
as
select 
CompanyCode,
SupplierCode,
BranchCode,
ProfitCenterCode,
SupplierName,
Alamat,
Address1,
Address2,
Address3,
Address4,
Phone,
DiscPct,
[Status],
ProfitCenterName,
TOPDays,
CityCode,
CityName
from gnMstSupplierView
where CompanyCode=@CompanyCode and   BranchCode=@BranchCode
GO
create procedure [dbo].[uspfn_sp_partinquiry_onorder]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@PartNo varchar(32)
AS
SELECT 
	ob.POSNo, ob.POSDate, ob.OnOrder, 
	ob.InTransit, ob.Received, ob.WRSNo,
	sp.SupplierName
FROM 
	spTrnPOrderBalance ob
	INNER JOIN gnMstSupplier sp ON sp.SupplierCode = ob.SupplierCode 
	AND sp.CompanyCode = ob.CompanyCode
WHERE 
    ob.CompanyCode    = @CompanyCode
    AND ob.BranchCode = @BranchCode
    AND ob.PartNo     = @PartNo
GO
CREATE PROCEDURE [dbo].[uspfn_SpcekvalidTrnPOrderBalance]
@CompanyCode varchar(15),
@BranchCode varchar(15) ,
@TypeOfGoods varchar(15) ,
@POSNo varchar(15)
AS    
	SELECT 
		DISTINCT a.POSNo
	FROM 
		spTrnPOrderBalance a 
	INNER JOIN gnMstSupplier b 
	   ON b.SupplierCode = a.SupplierCode 
	  AND b.CompanyCode  = a.CompanyCode 
	WHERE a.OrderQty > a.Received
	  AND a.CompanyCode = @CompanyCode
	  AND a.BranchCode  = @BranchCode
	  AND a.TypeOfGoods = @TypeOfGoods
	  AND a.POSNo       = @POSNo
	ORDER BY POSNo DESC
GO
Create procedure [dbo].[uspfn_omSlsReturnLkpSlsMdlCd]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @InvoiceNo varchar(15)
)  
AS  
BEGIN  
 SELECT * 
                  FROM omMstModel a, omTrSalesInvoiceModel b
                 WHERE a.CompanyCode = b.CompanyCode
                       AND a.SalesModelCode = b.SalesModelCode
                       AND a.CompanyCode = @CompanyCode
                       AND b.BranchCode = @BranchCode
                       AND b.InvoiceNo = @InvoiceNo
                       AND (b.Quantity - b.QuantityReturn) > 0        
                
END
GO
CREATE PROCEDURE [dbo].[uspfn_spBrowseSpTrnSPickingHdr] @CompanyCode varchar(15), @BranchCode varchar(15),
@TypeOfGoods varchar(3), @IsBORelease bit 
as
SELECT 
	DISTINCT(a.PickingSlipNo)
    , a.PickingSlipDate
    , ISNULL(b.CustomerCode,  c.BranchCodeTo) CustomerCode  
    , ISNULL(b.CustomerName,  c.BranchCodeToDesc) CustomerName
    , a.SalesType
    , a.TransType
    , a.PickedBy
    , g.EmployeeName as PickedByName
    , a.Remark
    --, spTrnSPickingDtl.ExPickingSlipNo
FROM 
	spTrnSPickingHdr a
LEFT JOIN gnMstCustomer b ON b.CompanyCode = a.CompanyCode
    AND b.CustomerCode = a.CustomerCode 		
LEFT JOIN spMstCompanyAccount c ON c.CompanyCode = a.CompanyCode
    AND c.BranchCodeTo = a.CustomerCode
LEFT JOIN gnMstCustomerProfitCenter d ON d.CompanyCode = a.CompanyCode 
	AND d.BranchCode = a.BranchCode
    AND d.CustomerCode = b.CustomerCode 
LEFT JOIN gnMstCustomerClass e ON e.CompanyCode = a.CompanyCode 
    AND e.BranchCode = a.BranchCode
    AND e.ProfitCenterCode = d.ProfitCenterCode 
	AND e.CustomerClass = d.CustomerClass 
LEFT JOIN spTrnSPickingDtl f ON f.CompanyCode = a.CompanyCode 
    AND f.BranchCode = a.BranchCode 
    AND f.PickingSlipNo = a.PickingSlipNo 
left JOIN gnMstEmployee g ON g.CompanyCode = a.CompanyCode
and g.BranchCode = a.BranchCode 
and g.EmployeeID = a.PickedBy
WHERE 
    a.CompanyCode= @CompanyCode
    AND a.BranchCode= @BranchCode
    AND (a.Status = 0 OR a.Status = 1) 
    AND a.TypeOfGoods = @TypeOfGoods
    and a.isBORelease = @IsBORelease
GO
create procedure [dbo].[uspfn_SyncView]

as

set nocount on

if exists (select * from sys.tables where name = 'CsLkuTDayCallView') drop table CsLkuTDayCallView

select * into CsLkuTDayCallView from (select * from CsLkuTDayCallViewSource)x

select 'Finish Job'
GO
CREATE procedure [dbo].[uspfn_GetPINVDData]
 @CompanyCode varchar(15),
 @BranchCode varchar(15),
 @DNNo varchar(15),
 @SupplierCode varchar(15),
 @TypeOfGoods varchar(2),
 @PPN bit
as 
begin
SELECT  row_number () OVER (ORDER BY a.CreatedDate) AS NoUrut,
a.CompanyCode,
a.BranchCode,
a.OrderNo AS DocNo,
a.DeliveryNo,
(
  SELECT TOP 1 DeliveryDate 
    FROM spUtlPINVDHdr d
  WHERE d.CompanyCode=a.CompanyCode AND
    d.BranchCode=a.BranchCode AND
    d.DealerCode=a.DealerCode AND
    d.DeliveryNo=a.DeliveryNo AND
	d.TypeOfGoods = a.typeOfGoods
) AS DeliveryDate,
(
  SELECT TOP 1 d.InvoiceNo 
    FROM spUtlPINVDHdr d
  WHERE d.CompanyCode=a.CompanyCode AND
    d.BranchCode=a.BranchCode AND
    d.DealerCode=a.DealerCode AND
    d.DeliveryNo=a.DeliveryNo AND
	d.TypeOfGoods = a.TypeOfGoods
) AS InvoiceNo,
a.PartNoShip as PartNo,
(
    SELECT PartName 
    FROM spMstItemInfo e
    WHERE e.CompanyCode=a.CompanyCode AND
                e.PartNo=a.PartNoShip
) AS NmPart
,
case when @PPN = 0 then a.PurchasePrice
else round(a.PurchasePrice + (a.PurchasePrice * (select (TaxPct/100) from gnMstTax
where TaxCode = (select ParaValue from gnMstLookUpDtl where CodeID = 'BINS' and SeqNo = 3))),0) end PurchasePrice
,a.DiscPct,a.QtyShipped AS ReceivedQty
,isnull(a.CaseNumber,'-') AS BoxNo,
--,'-' AS BoxNo,
a.SupplierCode,
(
  SELECT CostPrice FROM spMstItemPrice f
  WHERE f.CompanyCode=a.CompanyCode AND
        f.BranchCode=a.BranchCode AND
        f.PartNo=a.PartNoShip
) AS CostPrice, a.ProductType
FROM spUtlPINVDDtl a, spTrnPPOSDtl b
WHERE 
    a.CompanyCode=b.CompanyCode AND
    a.BranchCode=b.BranchCode AND
    a.OrderNo=b.POSNo AND
    a.PartNo=b.PartNo AND
    a.CompanyCode = @CompanyCode AND
    a.BranchCode = @BranchCode AND
    a.DeliveryNo = @DNNo AND
    a.SupplierCode = @SupplierCode AND
    a.Status IN ('0','1') AND
	a.TypeOfGoods = @TypeOfGoods
end
GO
CREATE procedure [dbo].[uspfn_omSlsReturnLkpInvoice]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15)
)  
AS  
BEGIN  
	SELECT 
			a.CompanyCode,a.BranchCode	,a.InvoiceNo	,a.InvoiceDate	,a.SONo	,a.CustomerCode	,			
			a.BillTo	,a.FakturPajakNo	
			,a.FakturPajakDate	,a.DueDate	,a.isStandard	,a.Remark	,a.Status,b.CustomerName,
			b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address,			
			c.SalesType, CASE ISNULL(c.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS SalesTypeDsc
	FROM 
			omTrSalesInvoice a
			LEFT JOIN gnMstCustomer b
			ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
			LEFT JOIN gnMstCustomerProfitCenter c
			ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = '100'                  
			
	WHERE
			a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
			AND a.Status IN ('2', '5')
			AND a.FakturPajakNo != '' 
	ORDER BY 
			a.InvoiceNo ASC                
END
GO
CREATE procedure [dbo].[sp_EdpTransNo] (  

@CompanyCode varchar(10),
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@LampiranNo varchar(10)
)


as

SELECT * INTO #t1 FROM ( 
SELECT
    a.LampiranNo
    , a.DealerCode as SupplierCode
    , ISNULL(b.SupplierName, '') as SupplierName
    , ISNULL(c.TypeOfGoods, '') TypeofGoods
FROM spUtlStockTrfHdr a
LEFT JOIN GnMstSupplier b ON b.CompanyCode = a.CompanyCode 
    AND b.SupplierCode = a.DealerCode
LEFT JOIN SpTrnSLmpHdr c ON c.CompanyCode = a.CompanyCode 
    AND c.BranchCode = a.DealerCode
    AND c.LmpNo = a.LampiranNo
WHERE a.CompanyCode = @CompanyCode
  AND a.BranchCode = @BranchCode
  AND a.Status in ('0','1') ) #t1
  
SELECT * FROM #t1 WHERE TypeofGoods = @TypeOfGoods
    AND LampiranNo = CASE @LampiranNo WHEN '' THEN LampiranNo ELSE @LampiranNo END

DROP TABLE #t1
GO
create proc [dbo].[uspfn_CsRptBPKBNOF]
@CompanyCode varchar(20),
@pDateFrom datetime,
@pDateTo datetime,
@pStatus char(1)
as
begin
select a.CompanyCode
     , b.CustomerCode
	 , i.CompanyName CompanyName
     , j.CompanyName BranchName
	 , e.BranchCode
     , c.CustomerName
     , c.PhoneNo
	 , BPKDate = convert(varchar(11),getdate(),106)
     , STNKDate = convert(varchar(11),getdate(),106)
	 , h.LeasingCode
  	 --Finance Institution
	 , h.Tenor
	 , BpkbReadyDate = convert(VARCHAR(11), h.BpkbReadyDate, 106)
	 , BpkbPickUp = convert(VARCHAR(11), h.BpkbPickUp,106)
	 , h.CustomerCategory
	 , h.ReqKtp
	 , h.ReqStnk
	 , h.ReqSuratKuasa
     , e.SalesModelCode as CarType
     , e.ColourCode as Color
     , d.PoliceRegNo
     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as Chassis
     , (a.EngineCode + convert(varchar, a.EngineNo)) as Engine
     , f.Salesman as SalesmanCode
     , g.EmployeeName as SalesmanName
	 , h.Comment
	 , h.Additional
     , (case h.Status when 0 then 'In Progress' else 'Finish' end) as StatusInfo
     , left(c.Address1, 40) as Address
   , h.ReqInfoLeasing  
   , h.ReqInfoCust
   , h.Status
   , convert(varchar(15),h.CreatedDate, 106) as CreatedDate    
   , convert(varchar(15),h.FinishDate, 106) as FinishDate
  from omTrSalesInvoiceVin a      
  left join omTrSalesInvoice b      
    on b.CompanyCode = a.CompanyCode      
   and b.BranchCode = a.BranchCode      
   and b.InvoiceNo = a.InvoiceNo      
  left join gnMstCustomer c      
    on c.CompanyCode = a.CompanyCode      
   and c.CustomerCode = b.CustomerCode      
  left join svMstCustomerVehicle d      
    on d.CompanyCode = a.CompanyCode      
   and d.ChassisCode = a.ChassisCode      
   and d.ChassisNo = a.ChassisNo      
  left join omTrSalesSOVin e      
    on e.CompanyCode = a.CompanyCode      
   and e.ChassisCode = a.ChassisCode      
   and e.ChassisNo = a.ChassisNo      
  left join omTrSalesSO f      
    on f.CompanyCode = e.CompanyCode
   and f.BranchCode = e.BranchCode
   and f.SONo = e.SONo
  left join gnMstEmployee g
    on g.CompanyCode = f.CompanyCode
   and g.BranchCode = f.BranchCode
   and g.EmployeeID = f.Salesman
  LEFT JOIN CsCustBpkb h
  on h.CompanyCode = a.CompanyCode
  and h.Chassis = a.ChassisCode + convert(varchar(20), a.ChassisNo)  
  left join gnMstOrganizationHdr i          
  on i.CompanyCode = f.CompanyCode          
  left join gnMstCoProfile j          
  on j.CompanyCode = f.CompanyCode          
  and j.BranchCode = f.BranchCode 
  where 1=1
	and j.companycode like @companycode
   and h.Status like case when @pStatus = 0 then @pStatus else '%' end
   and h.Status not like case when @pStatus = 0 then '' else '0' end
end
GO
CREATE procedure [dbo].[uspfn_spGetSpTrnSFPJHdr] @CompanyCode varchar(15), @BranchCode varchar(15)    
as    
select a.FPJNo, a.FPJdate, a.FPJGovNo, a.InvoiceNo, a.PickingSlipNo, a.CustomerCode, b.CustomerName, b.Address1, b.Address2, b.Address3, b.Address4, a.TOPDays, a.TOPCode from spTrnSFPJHdr a    
join gnMstCustomer b    
on b.CustomerCode = a.CustomerCode    
and b.CompanyCode = a.CompanyCode    
where a.CompanyCode = @CompanyCode    
and a.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[uspfn_PmStatusHistorySend]
--declare   
 @LastUpdateDate datetime,  
 @Segment int    
as

declare @isGreater bit
--select @LastUpdateDate='1990-01-01 00:00:00',@Segment=500    
if(@LastUpdateDate > GETDATE())
begin
	set @LastUpdateDate = GETDATE()
	set @isGreater = 0
end
else
begin
	set @isGreater = 1
end
--print @isGreater

if(@isGreater = 0)
begin
	select * into #t1 from (    
	select top (@Segment) InquiryNumber, CompanyCode, BranchCode, SequenceNo, LastProgress, UpdateDate, UpdateUser  
	  from pmStatusHistory
	 where UpdateDate is not null    
	   and UpdateDate <= @LastUpdateDate    
	 order by UpdateDate desc )#t1  
end
else
begin
	select * into #t2 from (    
	select top (@Segment) InquiryNumber, CompanyCode, BranchCode, SequenceNo, LastProgress, UpdateDate, UpdateUser  
	  from pmStatusHistory    
	 where UpdateDate is not null    
	   and UpdateDate > @LastUpdateDate    
	 order by UpdateDate asc )#t2 
end     

declare @LastUpdateQry datetime 
if(@isGreater = 0)
begin   
	set @LastUpdateQry = (select top 1 UpdateDate from #t1 order by UpdateDate desc)    
    
	select * from #t1    
	union   
	select top 100 InquiryNumber, CompanyCode, BranchCode, SequenceNo, LastProgress, UpdateDate, UpdateUser  
	from pmStatusHistory    
	where UpdateDate = @LastUpdateQry    
	order by UpdateDate desc    
	drop table #t1 
end
else
begin
	set @LastUpdateQry = (select top 1 UpdateDate from #t2 order by UpdateDate desc)    
	select * from #t2
	union   
	select top 100 InquiryNumber, CompanyCode, BranchCode, SequenceNo, LastProgress, UpdateDate, UpdateUser  
	from pmStatusHistory    
	where UpdateDate = @LastUpdateQry    
	order by UpdateDate desc
     
	drop table #t2 

end
GO
CREATE procedure [dbo].[uspfn_GetPartNoSuppliedWeb]   
(  
--DECLARE
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@ProductType as varchar(15),
@JobOrderNo as varchar(15),
@DocNo as varchar(15)

--set @CompanyCode = '6006406'
--set @BranchCode = '6006400'
--set	@ProductType = '4W'
--set	@JobOrderNo = 'SPK/12/000002'
--set @DocNo = 'SSS/12/000010'

)  
AS  

begin

declare @md bit
declare @dbMD varchar(25)
declare @CompanyMD varchar(25)

set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

if(@md = 1)
BEGIN

SELECT 
DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
	, SUM(QtyOrder) QtyOrder
    , QtySupply
    , DiscPct
FROM
(
SELECT
	DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
    , c.DocDate SupplySlipDate
	, a.PartNo
	, a.RetailPrice
	, f.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, Item.QtyOrder	
    , ISNULL(e.QtySupply,0) QtySupply
    , a.DiscPct
FROM
	SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
	LEFT JOIN SvTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
		AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice,
				SUM(ISNULL(DemandQty, 0) - ISNULL(SupplyQty, 0)) QtyOrder
				FROM SvTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = a.PartNo and Item.RetailPrice = a.RetailPrice
	LEFT JOIN SpTrnSORDHdr c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.JobOrderNo = c.UsageDocNo
	LEFT JOIN SpTrnSOSupply e WITH (NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
		AND c.DocNo = e.DocNo
		AND a.PartNo = e.PartNo
    INNER JOIN gnMstCompanyMapping cm WITH(NOLOCK, NOWAIT) ON cm.CompanyCode = a.CompanyCode
    LEFT JOIN SpMstItemPrice f WITH(NOLOCK, NOWAIT) ON cm.CompanyMD = f.CompanyCode
		AND a.BranchCode = f.BranchCode
		AND a.PartNo = f.PartNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND Item.QtyOrder > 0
    AND c.DocNo = @DocNo
	AND JobOrderNo = @JobOrderNo
    AND a.RetailPrice = Item.RetailPrice
)a
LEFT JOIN SpMstItemPrice c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.PartNo = c.PartNo
GROUP BY
a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
    , QtySupply
    , DiscPct

END
ELSE
BEGIN

set @dbMD = (select DISTINCT dbmd from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

--set @CompanyMD = (select DISTINCT CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
--select @CompanyMD
declare @query varchar(max)

if(isnull(cast(@dbMD as varchar(max)),'') = '')
BEGIN

SELECT 
DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
	, SUM(QtyOrder) QtyOrder
    , QtySupply
    , DiscPct
FROM
(
SELECT
	DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
    , c.DocDate SupplySlipDate
	, a.PartNo
	, a.RetailPrice
	, f.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, Item.QtyOrder	
    , ISNULL(e.QtySupply,0) QtySupply
    , a.DiscPct
FROM
	SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
	LEFT JOIN SvTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
		AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice,
				SUM(ISNULL(DemandQty, 0) - ISNULL(SupplyQty, 0)) QtyOrder
				FROM SvTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = a.PartNo and Item.RetailPrice = a.RetailPrice
	LEFT JOIN SpTrnSORDHdr c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.JobOrderNo = c.UsageDocNo
	LEFT JOIN SpTrnSOSupply e WITH (NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
		AND c.DocNo = e.DocNo
		AND a.PartNo = e.PartNo
    LEFT JOIN SpMstItemPrice f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
		AND a.BranchCode = f.BranchCode
		AND a.PartNo = f.PartNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND Item.QtyOrder > 0
    AND c.DocNo = @DocNo
	AND JobOrderNo = @JobOrderNo
    AND a.RetailPrice = Item.RetailPrice
)a
LEFT JOIN SpMstItemPrice c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.PartNo = c.PartNo
GROUP BY
a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
    , QtySupply
    , DiscPct

END
ELSE
BEGIN

set @query = '
SELECT 
DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
	, SUM(QtyOrder) QtyOrder
    , QtySupply
    , DiscPct
FROM
(
SELECT
	DISTINCT(a.CompanyCode) 
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
    , c.DocDate SupplySlipDate
	, a.PartNo
	, a.RetailPrice
	, f.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, Item.QtyOrder	
    , ISNULL(e.QtySupply,0) QtySupply
    , a.DiscPct
FROM
	SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
	LEFT JOIN SvTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
		AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice,
				SUM(ISNULL(DemandQty, 0) - ISNULL(SupplyQty, 0)) QtyOrder
				FROM SvTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, RetailPrice) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = a.PartNo and Item.RetailPrice = a.RetailPrice
	LEFT JOIN SpTrnSORDHdr c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.JobOrderNo = c.UsageDocNo
	LEFT JOIN SpTrnSOSupply e WITH (NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
		AND c.DocNo = e.DocNo
		AND a.PartNo = e.PartNo
    INNER JOIN gnMstCompanyMapping cm WITH(NOLOCK, NOWAIT) ON cm.CompanyCode = a.CompanyCode
    LEFT JOIN '+@dbMD+'..SpMstItemPrice f WITH(NOLOCK, NOWAIT) ON cm.CompanyMD = f.CompanyCode
		AND a.BranchCode = f.BranchCode
		AND a.PartNo = f.PartNo
WHERE
	a.CompanyCode = '+@CompanyCode+'
	AND a.BranchCode = '+@BranchCode+'
	AND a.ProductType = '+@ProductType+'
	AND Item.QtyOrder > 0
    AND c.DocNo = '+@DocNo+'
	AND JobOrderNo = '+@JobOrderNo+'
    AND a.RetailPrice = Item.RetailPrice
)a
LEFT JOIN SpMstItemPrice c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.PartNo = c.PartNo
GROUP BY
a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, ServiceNo
    , SupplySlipDate
	, a.PartNo
	, c.RetailPrice
	, c.CostPrice
    , TypeOfGoods
    , BillType
    , QtySupply
    , DiscPct
'
EXEC(@query)
print(@query)
				
		END	 
	END
end
GO
CREATE procedure [dbo].[uspfn_spGetReturnSSDetails] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(25)    
  as    
  SELECT a.*, b.*, a.DocNo as LmpNo, a.DocDate as LmpDate, c.CustomerCode, c.CustomerName, c.CustomerGovName, c.Address1, c.Address2, c.Address3, c.Address4, c.HPNo, c.FaxNo, c.CityCode, d.LookUpValueName as City FROM spTrnSRTurSSHdr a    
  join svTrnService b ON a.CompanyCode = b.CompanyCode     
  and a.BranchCode = b.BranchCode and a.SKPNo = b.JobOrderNo    
  left join gnMstCustomer c    
  ON a.CompanyCode = c.CompanyCode    
  and a.CustomerCode = c.CustomerCode    
  left JOIN GnMstLookupDtl d on d.CompanyCode = c.CompanyCode    
 and d.CodeID = 'City'    
 and d.LookupValue = c.CityCode    
  where a.ReturnNo = @ReturnNo    
  and a.BranchCode = @BranchCode    
  and a.CompanyCode = @CompanyCode
GO
create procedure [dbo].[uspfn_omSlsReturnLkpMdlYear]     
(    
 @CompanyCode varchar(15),    
 @BranchCode varchar(15),    
 @InvoiceNo varchar(15),  
 @SalesModelCode varchar(20)  
)    
AS   
begin  
SELECT a.SalesModelCode, a.SalesModelYear, a.SalesModelDesc, a.ChassisCode, b.BPKNo, b.
                       BeforeDiscDPP, b.AfterDiscDPP, b.AfterDiscPPn, b.AfterDiscPPnBM, b.
                       OthersDPP, b.OthersPPn, b.DiscExcludePPn 
                  FROM omMstModelYear a, omTrSalesInvoiceModel b
                 WHERE a.CompanyCode = b.companyCode
                       AND a.SalesModelCode = b.salesModelCode
                       AND a.SalesModelYear = b.salesModelYear
                       AND b.companyCode = @CompanyCode
                       AND b.branchCode = @BranchCode
                       AND b.invoiceNo = @InvoiceNo
                       AND b.salesModelCode = @SalesModelCode
                       AND (b.quantity - b.quantityReturn) > 0
                ORDER BY a.SalesModelYear ASC         
end
GO
CREATE procedure [dbo].[sp_EntryHPPBrowse] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@PeriodBeg varchar(30),
@PeriodEnd varchar(30))


as

SELECT a.*, c.DNSupplierNo,
    d.SupplierName,b.BinningNo, b.BinningDate, b.SupplierCode, 
	(
		select LookUpValueName
		from gnMstLookUpDtl
		where CompanyCode=a.CompanyCode and CodeID='STAT' and LookUpValue=a.Status
	) StatusStr
FROM 
    SpTrnPHPP a WITH(NoLock,NoWait)
LEFT JOIN SpTrnPRcvHdr b ON b.CompanyCode = a.CompanyCOde AND b.BranchCode = a.BranchCode
    AND b.WRSNo = a. WRSNo
LEFT JOIN SpTrnPBinnHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode
    AND c.BinningNo = b.BinningNo 
LEFT JOIN gnMstSupplier d ON d.CompanyCode = a.CompanyCode AND d.SupplierCode = c.SupplierCode
WHERE a.CompanyCode=@CompanyCode
      AND a.BranchCode=@BranchCode
      AND a.TypeOfGoods=@TypeOfGoods
      AND Convert(Varchar, a.HPPDate, 112) between @PeriodBeg and @PeriodEnd
      ORDER BY a.HPPNO DESC
GO
--uspfn_CsRptBirthday '%','%','%'
create proc [dbo].[uspfn_CsRptBirthday]
@CompanyCode varchar(20),
@pDateFrom datetime,
@pDateTo datetime
as
begin
select CompanyCode = a.CompanyCode
     , a.CustomerCode
	 , PeriodOfYear = datepart(year, a.SKPDate)
     , CompanyName = b.CompanyName
     , a.CustomerName
     , CustomerAddress = a.Address1
     , CustomerTelephone = a.PhoneNo
     , CustomerBirthDate = a.BirthDate
	 , CustomerTypeOfGift = c.TypeOfGift
	 , CustomerGiftSentDate = c.SentGiftDate
	 , CustomerGiftReceivedDate = c.ReceivedGiftDate
	 --, ParentGiftSentDate = (
		--select top 1
		--	x.SentGiftDate
		--from
		--	CsCustRelation x
		--where
		--	x.CompanyCode = a.CompanyCode
		--	and
		--	x.CustomerCode = a.CustomerCode
		--	and
		--	x.RelationType = ''
	 --)
	 , SpouseGiftSentDate = (
		select top 1
			x.SentGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 )
	 , ChildGiftSentDate1 =(
		select top 1
			x.SentGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_1'
	 )
	 , ChildGiftSentDate2 = (
		select top 1
			x.SentGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_2'
	 )
	 , ChildGiftSentDate3 = (
		select top 1
			x.SentGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_3'
	 )
	 --, ParentGiftReceivedDate = c.SouvRcvParent
	 , SpouseGiftReceivedDate = (
		select top 1
			x.ReceivedGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 )
	 , ChildGiftReceivedDate1 = (
		select top 1
			x.ReceivedGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_1'
	 )
	 , ChildGiftReceivedDate2 = (
		select top 1
			x.ReceivedGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_2'
	 )
	 , ChildGiftReceivedDate3 = (
		select top 1
			x.ReceivedGiftDate
		from
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_3'
	 )
	 -- ======================================== Spouse
	 , SpouseName = (
		select top 1
			x.FullName	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 )
	 , SpouseTelephone = (
		select top 1
			x.PhoneNo	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 ),
	 SpouseRelation = (
		select top 1
			x.RelationInfo	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 ),
	 SpouseBirthDate = (
		select top 1
			x.BirthDate	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 )
	 , SpouseComment = (
		select top 1
			x.Comment
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 )
	 , SpouseTypeOfGift = (
		select top 1
			x.TypeOfGift
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'SPOUSE'
	 )
	 -- ======================================== Child 1
	 , ChildName1 = (
		select top 1
			x.FullName	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_1'
	 )
	 , ChildTelephone1 = (
		select top 1
			x.PhoneNo	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_1'
	 )
	 , ChildBirthDate1 = (
		select top 1
			x.BirthDate	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_1'
	 )
	 , ChildComment1 = (
		select top 1
			x.Comment
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_1'
	 )
	 , ChildTypeOfGift1 = (
		select top 1
			x.TypeOfGift
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_1'
	 )
	 -- ======================================== Child 2
	 , ChildName2 = (
		select top 1
			x.FullName	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_2'
	 )
	 , ChildTelephone2 = (
		select top 1
			x.PhoneNo	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_2'
	 )
	 , ChildBirthDate2 = (
		select top 1
			x.BirthDate	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_2'
	 ),
	 ChildComment2 = (
		select top 1
			x.Comment
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_2'
	 )
	 , ChildTypeOfGift2 = (
		select top 1
			x.TypeOfGift
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_2'
	 )
	 -- ======================================== Child 3
	 , ChildName3 = (
		select top 1
			x.FullName	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_3'
	 )
	 , ChildTelephone3 = (
		select top 1
			x.PhoneNo	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_3'
	 )
	 , ChildBirthDate3 = (
		select top 1
			x.BirthDate	
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_3'
	 ),
	 ChildComment3 = (
		select top 1
			x.Comment
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_3'
	 )
	 , ChildTypeOfGift3 = (
		select top 1
			x.TypeOfGift
		from 
			CsCustRelation x
		where
			x.CompanyCode = a.CompanyCode
			and
			x.CustomerCode = a.CustomerCode
			and
			x.RelationType = 'CHILD_3'
	 )
     , BPKDate = convert(varchar(11),getdate(),106)
     , e.SalesModelCode as CarType
     , e.ColourCode as Color
     , h.PoliceRegNo 
     , e.EngineCode + convert(varchar, e.EngineNo) as Engine 
     , (e.ChassisCode + convert(varchar, e.ChassisNo)) Chassis
     , f.Salesman as SalesmanCode
     , g.EmployeeName as SalesmanName
	 , CustomerComment = c.Comment
	 , c.AdditionalInquiries
	 , c.Status
  from gnMstCustomer a
  inner join gnMstOrganizationHdr b
    on b.CompanyCode = a.CompanyCode
  inner join csCustBirthday c
	on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
  inner join CsTdayCall d
	on a.CompanyCode = d.CompanyCode
   and a.CustomerCode = d.CustomerCode
  left join omTrSalesSOVin e
    on e.CompanyCode = d.CompanyCode
   and (e.ChassisCode + convert(varchar, e.ChassisNo)) = d.Chassis
  left join omTrSalesSO f
    on f.CompanyCode = e.CompanyCode
   and f.BranchCode = e.BranchCode
   and f.SONo = e.SONo
  left join gnMstEmployee g
    on g.CompanyCode = f.CompanyCode
   and g.BranchCode = f.BranchCode
   and g.EmployeeID = f.Salesman
  left join svMstCustomerVehicle h
    on h.CompanyCode = d.CompanyCode
   and h.ChassisCode + convert(varchar, h.ChassisNo) = d.Chassis
  where 1=1
	and convert(varchar, @pDateFrom, 112) < left(convert(varchar, a.BirthDate, 112), 6) + convert(varchar, convert(int, right(convert(varchar, a.BirthDate, 112), 2)) + 3)
	and convert(varchar, @pDateTo, 112) > left(convert(varchar, a.BirthDate, 112), 6) + convert(varchar, convert(int, right(convert(varchar, a.BirthDate, 112), 2)) + 3)

end
GO
create procedure [dbo].[uspfn_sp_inquiry_sales_order_detail]
	@companycode varchar(15), 
	@branchcode varchar(15), 
	@PickingSlipNo varchar(50)
 AS
	SET NOCOUNT ON;

SELECT
    ROW_NUMBER() OVER(ORDER BY a.DocNo) RowNumber
	, a.PickingSlipNo
	, a.DocNo
	, a.PartNo
	, PartNoOriginal
	, ISNULL(QtyOrder, 0) QtyOrder
	, ISNULL(QtyPicked, 0) QtyPicked
	, ISNULL(a.QtyBill, 0) QtyBill
	, ISNULL(FPJ.QtyBill, 0) QtyFPJ
	, ISNULL(FPJ.RetailPrice, 0) RetailPrice
	, ISNULL(FPJ.SalesAmt, 0) SalesAmt
	, ISNULL(FPJ.DiscAmt, 0) DiscAmt
	, ISNULL(FPJ.NetSalesAmt, 0) NetSalesAmt
FROM
	spTrnSPickingDtl a WITH(NOLOCK, NOWAIT)
	LEFT JOIN (
		SELECT
			CompanyCode, BranchCode, DocNo, PartNo, QtyBill, RetailPrice, SalesAmt, DiscAmt, NetSalesAmt
		FROM
			spTrnSFPJDtl
	) FPJ ON a.CompanyCode = FPJ.CompanyCode
		AND a.BranchCode = FPJ.BranchCode
		AND a.DocNo = FPJ.DocNo
		AND a.PartNo = FPJ.PartNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryDebetNote] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @InvDateFrom DateTime,
 @InvDateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @CustomerFrom varchar(100),
 @CustomerTo varchar(100),
 @NoInvFrom varchar(100),
 @NoInvtTo varchar(100),
 @NoSKPKFrom varchar(100),
 @NoSKPKTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.DNNo as InvoiceNo, a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.DNDate,106) as InvoiceDate, 
case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as Type,
a.SONo, b.CustomerName, c.CustomerName AS BillTo, a.InvoiceNo as InvNo, 
case when year(a.DueDate) = ''1900'' then '''' else convert(varchar(20),a.DueDate,106) end as DueDate, a.Remark, 
pso.SKPKNo, convert(varchar(20),pso.SODate,106) as SODate, pdo.DONo,convert(varchar(20),pdo.DODate,106) as DODate, pbpk.BPKNo,
convert(varchar(20),pbpk.BPKDate,106) as BPKDate, pso.RefferenceNo,
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM omTrSalesDN a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.BillTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
LEFT JOIN omTrSalesDO pdo ON a.CompanyCode = pdo.CompanyCode AND a.BranchCode = pdo.BranchCode AND a.SONo = pdo.SONo
LEFT JOIN omTrSalesBPK pbpk ON a.CompanyCode = pbpk.CompanyCode AND a.BranchCode = pbpk.BranchCode AND a.SONO = pbpk.SONo AND pdo.DONo = pbpk.DONo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@InvDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.DNDate between ''' + convert(varchar(50),@InvDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@InvDateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@CustomerFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerFrom) + '''' + ' and ' + '''' + rtrim(@CustomerTo) + ''''

if len(rtrim(@NoInvFrom)) > 0
   set @pQuery = @pQuery + ' and a.DNNo between ''' + rtrim(@NoInvFrom) + '''' + ' and ' + '''' + rtrim(@NoInvFrom) + ''''

if len(rtrim(@NoSKPKFrom)) > 0
   set @pQuery = @pQuery + ' and pso.SKPKNo between ''' + rtrim(@NoSKPKFrom) + '''' + ' and ' + '''' + rtrim(@NoSKPKTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.DNNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
create procedure [dbo].[uspfn_CalculateActiveSalesWithIDInSummary] (
	@CompanyCode varchar(15),
	@BranchCode varchar(15)
)
as
begin
	select
		count(*) as ActiveSalesWithIDInSummary
	from
		SyncEmployeeData a
	where
		a.CompanyCode = @CompanyCode
		and
		a.BranchCode = @BranchCode 
		and
		a.DeptCode = 'SALES'
		and
		isnull(a.SalesId, '') != ''
		and
		a.PersonnelStatus = '1'
		and
		a.IsDeleted = 0;
end
GO
create procedure [dbo].[uspfn_spGetReturnSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(2)  
as  
SELECT ReturnNo, ReturnDate   
FROM spTrnSRTurSSHdr   
WHERE Status IN (0,1) AND  
    spTrnSRTurSSHdr.CompanyCode = @CompanyCode AND  
    spTrnSRTurSSHdr.BranchCode = @BranchCode AND  
    spTrnSRTurSSHdr.TypeOfGoods = @TypeOfGoods  
ORDER BY ReturnNo DESC
GO
---------------------------------------------------------
-- AUTOMATIC ORDER SPAREPART, by Hasim... 24 January 2014
---------------------------------------------------------
-- uspfn_spAutomaticOrderSparepart '6006406','6006406'
--
CREATE procedure [dbo].[uspfn_spAutomaticOrderSparepart]
	@CompanyCode		varchar(15),
	@BranchCode			varchar(15)
as

BEGIN
  --declare @CompanyCode		varchar(15)
  --declare @BranchCode			varchar(15)
	declare @PartNo				varchar(20)
	declare @NewPartNo			varchar(20)
	declare @OldPart			varchar(20)
	declare @NewPart			varchar(20)
	declare @StartDate			varchar(06)
	declare @EndDate			varchar(06)
	declare @SupplierCode 		varchar(15)
	declare @SupplierCode0		varchar(15)
	declare @SupplierCode1		varchar(15)
	declare @SupplierCode2		varchar(15)
	declare @TPGO				varchar(15)
	declare @SuggorNo			varchar(15)
	declare @POSNo				varchar(15)
	declare @DocPre				varchar(15)
	declare @AOS1               varchar(50)
	declare @AOS2               varchar(50)
	declare @MessageText        varchar(50)
	declare @DocNum				integer
	declare @DocYear			integer
	declare @Counter     		integer
	declare @Switch      		integer
	declare @PeriodYear  		integer
	declare @PeriodMonth		integer
	declare @PeriodDate			date
	declare @SuggorDate			datetime
	declare @SeqNo              numeric( 3,0)
	declare @DAvgFac            numeric(07,2)
	declare @DevFac             numeric(07,2)
	declare @DiscPct			numeric(07,2)
	declare @PurchasePriceNett	numeric(18,0)
  --set @CompanyCode = '6006406'
  --set @BranchCode  = '6006406'
	set @SuggorDate  = getdate()
	set @PeriodYear  = year(getdate())
	set @PeriodMonth = month(getdate())
	set @Counter     = 0
	set @PeriodDate  = RIGHT('0000'+convert(varchar(4),@PeriodYear ),4) + '/'
                     + RIGHT('00'+convert(varchar(2),@PeriodMonth),2) + '/01'

    if isnull((select ParaValue from gnMstLookUpDtl
                where CompanyCode=@CompanyCode and CodeID='AOS' and LookUpValue='AUTO'),'0') = 0
       return

    if isnull((select ParaValue from gnMstLookUpDtl 
                where CompanyCode=@CompanyCode and CodeID='ORTP' and LookUpValue='8'),'')=''
       begin
          set @SeqNo = isnull((select max(SeqNo) from gnMstLookUpDtl where CompanyCode=@CompanyCode and CodeID='ORTP'),0) + 1
          insert into gnMstLookUpDtl
                     (CompanyCode, CodeID, LookUpValue, SeqNo, ParaValue, LookUpValueName, 
                      CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
               values(@CompanyCode, 'ORTP', '8', @SeqNo, '0', 'AOS (AUTOMATIC ORDER SPAREPART)',
                      'SIM',@SuggorDate,'SIM',@SuggorDate)
       end
                  
	if isnull((select top 1 1 from spTrnPSUGGORHdr
                where CompanyCode=@CompanyCode and BranchCode=@BranchCode and OrderType='8'
                  and convert(varchar,SuggorDate,111)=convert(varchar,@SuggorDate,111)),0) = 1
       return
	   
    set @DocYear     = (select isnull(DocumentYear,9988) from gnMstDocument with(nolock,nowait)
                         where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR')

    if @DocYear<>YEAR(@SuggorDate) return

    set @SupplierCode0 = isnull((select ParaValue from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
	 							    and CodeID      = 'AOS'
	 							    and LookupValue = '0'),'')
    set @SupplierCode1 = isnull((select ParaValue from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
 								    and CodeID      = 'AOS'
 								    and LookupValue = '1'),'')
    set @SupplierCode2 = isnull((select ParaValue from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
 								    and CodeID      = 'AOS'
 								    and LookupValue = '2'),'')
    set @DAvgFac       = isnull((select convert(numeric(6,2),ParaValue) from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
      							    and CodeID      = 'AOS'
    								and LookupValue = 'DAVGFAC'),50.00)
    set @DevFac        = isnull((select convert(numeric(6,2),ParaValue) from gnMstLookupDtl
                                  where CompanyCode = @CompanyCode
    							    and CodeID      = 'AOS'
    								and LookupValue = 'DevFac'),0.60)
  --set @DAvgFac       = 50.00
  --set @DevFac        = 0.60

    create table #Suggor 
 	    ( [CompanyCode]		[varchar](15  ),
	      [BranchCode]    	[varchar](15  ),
	      [PartNo]        	[varchar](20  ),
	      [NewPartNo]     	[varchar](20  ),
	      [SupplierCode]  	[varchar](20  ),
	      [ProductType]   	[varchar](15  ),
	      [PartCategory]  	[varchar]( 3  ),
	      [TypeOfGoods]   	[varchar]( 5  ),
	      [MovingCode]    	[varchar](15  ),
	      [ABCClass]      	[char]   ( 1  ),
	      [OnHand]        	[numeric](12,2),
	      [OnOrder]       	[numeric](12,2),
	      [InTransit]     	[numeric](12,2),
	      [AllocationSP]  	[numeric](12,2),
	      [AllocationSR]  	[numeric](12,2),
	      [AllocationSL]  	[numeric](12,2),
	      [BackOrderSP]   	[numeric](12,2),
	      [BackOrderSR]   	[numeric](12,2),
	      [BackOrderSL]   	[numeric](12,2),
	      [ReservedSP]    	[numeric](12,2),
	      [ReservedSR]    	[numeric](12,2),
	      [ReservedSL]    	[numeric](12,2),
	      [DemandAvg]     	[numeric](15,5),
	      [OrderPoint]    	[numeric](12,0),
	      [SafetyStock]   	[numeric](12,0),
	      [AvailableQty]  	[numeric](12,2),
	      [OrderUnit]     	[numeric](12,2),
	      [PurchasePrice] 	[numeric](18,0),
	      [CostPrice]     	[numeric](18,0)
        )

    insert into #Suggor
              ( CompanyCode, BranchCode, PartNo, NewPartNo, SupplierCode, ProductType, PartCategory, 
	 		    TypeOfGoods, MovingCode, ABCClass, OnHand, OnOrder, InTransit, AllocationSP, AllocationSR, 
	 		    AllocationSL, BackOrderSP, BackOrderSR, BackOrderSL, ReservedSP, ReservedSR, ReservedSL, 
	 		    DemandAvg, OrderPoint, SafetyStock, AvailableQty, OrderUnit, PurchasePrice, CostPrice)
         select i.CompanyCode, i.BranchCode, i.PartNo, i.PartNo NewPartNo, f.SupplierCode, i.ProductType, 
		        i.PartCategory, i.TypeOfGoods, i.MovingCode, i.ABCClass, i.OnHand, i.OnOrder, i.InTransit, 
			    i.AllocationSP, i.AllocationSR, i.AllocationSL, i.BackOrderSP, i.BackOrderSR, i.BackOrderSL, 
			    i.ReservedSP, i.ReservedSR, i.ReservedSL, i.DemandAverage DemandAvg, i.OrderPointQty OrderPoint, 
			    i.SafetyStockQty SafetyStock,(i.OnHand-i.AllocationSP-i.AllocationSR-i.AllocationSL) AvailableQty, 
			    OrderUnit = case when isnull(i.OrderUnit,0.00)=0.00 then 1.00 else i.OrderUnit end, 
			    p.PurchasePrice, p.CostPrice
           from spMstItems i
                inner join spMstItemInfo f
			   	        on f.CompanyCode = i.CompanyCode
		               and f.PartNo      = i.PartNo
				       and f.Status      = 1
				       and f.SupplierCode in (@SupplierCode0, @SupplierCode1, @SupplierCode2)
	            inner join spMstItemPrice p
				        on p.CompanyCode = i.CompanyCode
				       and p.BranchCode  = i.BranchCode
		               and p.PartNo      = i.PartNo 
		  where i.CompanyCode = @CompanyCode
		    and i.BranchCode  = @BranchCode
		    and i.Status      = 1
		    and i.TypeOfGoods in ('0','1','2') -- 0:SGP, 1:SGO, 2:SGA

    create table #t1 
	    ( [CompanyCode] 	[varchar](15  ),
	      [BranchCode]  	[varchar](15  ),
	      [PartNo]      	[varchar](20  ),
	      [NewPartNo]   	[varchar](20  ),
	      [Year]        	[numeric]( 4,0),
	      [Month]       	[numeric]( 2,0),
	      [DemandQty]     	[numeric](18,2)
        )

    while @Counter < 6
      begin
         set @Counter = @Counter + 1
         if @PeriodMonth > 1
            begin
               set @PeriodYear  = @PeriodYear
               set @PeriodMonth = @PeriodMonth-1
            end
         else 
            begin
               set @PeriodYear  = @PeriodYear-1
               set @PeriodMonth = 12
            end

         insert into #t1
              select CompanyCode, BranchCode, PartNo, PartNo NewPartNo, 
                     @PeriodYear Year, @PeriodMonth Month, 
                     isnull((select DemandQty from spHstDemandItem
                              where CompanyCode = #Suggor.CompanyCode
                                and BranchCode  = #Suggor.BranchCode
                                and Year        = @PeriodYear
                                and Month       = @PeriodMonth
                                and PartNo      = #Suggor.PartNo),0.00) as DemandQty
                from #Suggor     -- spMstItems
               where CompanyCode = @CompanyCode
                 and BranchCode  = @BranchCode
      end
      
    declare ITEM   cursor for
            select CompanyCode, BranchCode, PartNo, NewPartNo from #t1
             where exists (select top 1 1 from spMstItemMod
                            where CompanyCode = #t1.CompanyCode
                              and BranchCode  = #t1.BranchCode
                              and PartNo      = #t1.PartNo
                              and NewPartNo  <> #t1.PartNo
                              and InterChangeCode in ('11','21'))
             order by PartNo
    open  ITEM
    fetch next from ITEM into @CompanyCode, @BranchCode, @PartNo, @NewPartNo

    while @@fetch_status=0
      begin
         set @OldPart  = @PartNo
         set @Switch   = 0
         while @Switch = 0
            begin
               set @NewPart = (select top 1 NewPartNo from spMstItemMod x
                                where PartNo=@OldPart and InterChangeCode in ('11','21')
                                  and not exists (select 1 from spMstItemMod
                                                   where CompanyCode=x.CompanyCode
                                                     and PartNo=x.NewPartNo
                                                     and NewPartNo=x.PartNo))
               if  @NewPart is NULL
                   begin
                      set @Switch = 1
                      set @NewPart = @OldPart
                   end
               else
                      set @OldPart = @NewPart
            end
         update #t1     set NewPartNo=@NewPart where PartNo=@PartNo
         update #Suggor set NewPartNo=@NewPart where PartNo=@PartNo
         fetch next from ITEM into @CompanyCode, @BranchCode, @PartNo, @NewPartNo
      end
    close ITEM
    deallocate ITEM

    select * into #t2
      from ( select CompanyCode, BranchCode, NewPartNo, Year, Month, sum(DemandQty) DemandQty
               from #t1 
              group by CompanyCode, BranchCode, NewPartNo, Year, Month) #t2

    select * into #t3
      from ( select CompanyCode, BranchCode, NewPartNo, 
                    sum  (isnull(DemandQty,0.0))    DmnQty, 
                   (sum  (isnull(DemandQty,0.0)))/6 DmnAvg, 
                    stdev(isnull(DemandQty,0.0))    StdDev,
                    case when sum  (isnull(DemandQty,0.0)) = 0.0
                         then 0.0
                         else round((stdev(isnull(DemandQty,0.0)) / 
                                   ((sum  (isnull(DemandQty,0.0)))/6)),2)
                    end as DevFac,
                    max  (isnull(DemandQty,0.0))    MaxQty,
                    min  (isnull(DemandQty,0.0))    MinQty
               from #t2
              group by CompanyCode, BranchCode, NewPartNo ) #t3

    select * into #t4
      from ( select #t3.CompanyCode, #t3.BranchCode, #t3.NewPartNo, #Suggor.MovingCode, 
                    #Suggor.ABCClass, #Suggor.ProductType, #Suggor.PartCategory, 
                    #Suggor.TypeOfGoods, #Suggor.SupplierCode, 
                    #Suggor.CostPrice, #Suggor.PurchasePrice,
                    DmnQty6      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-6,@PeriodDate))
                                       and Month      =month(dateadd(mm,-6,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty5      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-5,@PeriodDate))
                                       and Month      =month(dateadd(mm,-5,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty4      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-4,@PeriodDate))
                                       and Month      =month(dateadd(mm,-4,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty3      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-3,@PeriodDate))
                                       and Month      =month(dateadd(mm,-3,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty2      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-2,@PeriodDate))
                                       and Month      =month(dateadd(mm,-2,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    DmnQty1      = (select sum(isnull(DemandQty,0.00)) from #t2
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and Year       =year (dateadd(mm,-1,@PeriodDate))
                                       and Month      =month(dateadd(mm,-1,@PeriodDate))
                                       and NewPartNo  =#t3.NewPartNo),
                    OnHand       = (select sum(isnull(OnHand,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    OnOrder      = (select sum(isnull(OnOrder,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    InTransit    = (select sum(isnull(InTransit,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    AllocationSP = (select sum(isnull(AllocationSP,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),                                
                    AllocationSR = (select sum(isnull(AllocationSR,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    AllocationSL = (select sum(isnull(AllocationSL,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    BackOrderSP  = (select sum(isnull(BackOrderSP,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    BackOrderSR  = (select sum(isnull(BackOrderSR,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    BackOrderSL  = (select sum(isnull(BackOrderSL,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    ReservedSP   = (select sum(isnull(ReservedSP,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    ReservedSR   = (select sum(isnull(ReservedSR,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    ReservedSL   = (select sum(isnull(ReservedSL,0.00)) from #Suggor
                                     where CompanyCode=#t3.CompanyCode
                                       and BranchCode =#t3.BranchCode
                                       and NewPartNo  =#t3.NewPartNo),
                    999999999999.99 AvailableQty, #Suggor.OrderUnit, 
                    DmnQty, DmnAvg, StdDev, DevFac, MaxQty, MinQty,
                    LeadTime     = (select isnull(LeadTime,0.00) from spMstOrderParam
                                     where CompanyCode  = #t3.CompanyCode
                                       and BranchCode   = #t3.BranchCode
                                       and SupplierCode = case #Suggor.TypeOfGoods
                                                               when '0' then @SupplierCode0
                                                               when '1' then @SupplierCode1
                                                               when '2' then @SupplierCode2
                                                               else '***NO-ORDER***'
                                                          end
                                       and MovingCode   = 1),
                    OrderCycle   = (select isnull(OrderCycle,0.00) from spMstOrderParam
                                     where CompanyCode  = #t3.CompanyCode
                                       and BranchCode   = #t3.BranchCode
                                       and SupplierCode = case #Suggor.TypeOfGoods
                                                               when '0' then @SupplierCode0
                                                               when '1' then @SupplierCode1
                                                               when '2' then @SupplierCode2
                                                               else '***NO-ORDER***'
                                                          end
                                       and MovingCode   = 1),
                    SafetyStock  = (select isnull(SafetyStock,0.00) from spMstOrderParam
                                     where CompanyCode  = #t3.CompanyCode
                                       and BranchCode   = #t3.BranchCode
                                       and SupplierCode = case #Suggor.TypeOfGoods
                                                               when '0' then @SupplierCode0
                                                               when '1' then @SupplierCode1
                                                               when '2' then @SupplierCode2
                                                               else '***NO-ORDER***'
                                                          end
                                       and MovingCode   = 1),
                    999999999999.99 OrderPoint, 999999999999.99 SafetyStokPoint, 
                    999999999999.99 SuggorQty, 0 Status
               from #t3, #Suggor
              where #t3.CompanyCode=#Suggor.CompanyCode
                and #t3.BranchCode =#Suggor.BranchCode
                and #t3.NewPartNo  =#Suggor.PartNo
                and #Suggor.TypeOfGoods in ('0','1','2')) #t4 -- 0:SGP, 1:SGO, 2:SGA

    update #t4
       set AvailableQty    = (OnHand+OnOrder+InTransit)
                           - (AllocationSP+AllocationSR+AllocationSL
                           +  BackOrderSP +BackOrderSR +BackOrderSL
                           +  ReservedSP  +ReservedSR  +ReservedSL),
           OrderPoint      = ceiling(DmnAvg/30 * isnull((LeadTime+OrderCycle+SafetyStock),0.00)),
           SafetyStokPoint = ceiling(DmnAvg/30 * isnull(SafetyStock,0.00)),
           Status          = 1
    --where DmnAvg>=50.0 and DevFac<=0.6
      where DmnAvg>=@DAvgFac and DevFac<=@DevFac

    update #t4 
       set SuggorQty       = case when AvailableQty>0.00 and OrderPoint>AvailableQty 
                                  then ceiling((OrderPoint-AvailableQty)/OrderUnit) * OrderUnit
                                  else 0.00 
                             end,
           Status          = case when AvailableQty>0.00 and OrderPoint>AvailableQty 
                                  then 1 
                                  else 0 
                             end
     where Status = 1 

    if isnull((select COUNT(*) from #t4 where Status=1),0) = 0
       begin
           drop table #Suggor
	  	   drop table #t1
           drop table #t2
           drop table #t3
           drop table #t4
           return
       end
    select * from #t4 where Status=1 order by TypeOfGoods, SupplierCode, NewPartNo
      
  --insert to SUGGOR table   
    set @TPGO = ''
    set @AOS1 = ''
    set @AOS2 = ''

    declare @cur_NewPartNo       varchar(20)
    declare @cur_MovingCode      varchar(15)
    declare @cur_ABCClass        varchar(01)
    declare @cur_ProductType		varchar(15)
    declare @cur_PartCategory	varchar(03)
    declare @cur_TypeOfGoods		varchar(05)
    declare @cur_SupplierCode    varchar(20)
    declare @cur_CostPrice		numeric(18,2)
    declare @cur_PurchasePrice	numeric(18,2)
    declare @cur_OnHand          numeric(12,2)
    declare @cur_OnOrder         numeric(12,2)
    declare @cur_InTransit       numeric(12,2)
    declare @cur_AllocationSP    numeric(12,2)
    declare @cur_AllocationSR    numeric(12,2)
    declare @cur_AllocationSL    numeric(12,2)
    declare @cur_BackOrderSP     numeric(12,2)
    declare @cur_BackOrderSR     numeric(12,2)
    declare @cur_BackOrderSL     numeric(12,2)
    declare @cur_ReservedSP      numeric(12,2)
    declare @cur_ReservedSR      numeric(12,2)
    declare @cur_ReservedSL      numeric(12,2)
    declare @cur_AvailableQty    numeric(12,2)
    declare @cur_DmnAvg          numeric(15,5)
    declare @cur_OrderPoint      numeric(12,0)
    declare @cur_SafetyStokPoint numeric(12,0)
    declare @cur_SuggorQty       numeric(12,0)

    declare SUGGOR cursor for
            select NewPartNo, MovingCode, ABCClass, ProductType, PartCategory, TypeOfGoods, SupplierCode, 
                   CostPrice, PurchasePrice, OnHand, OnOrder, InTransit, AllocationSP, AllocationSR, 
                   AllocationSL, BackOrderSP, BackOrderSR, BackOrderSL, ReservedSP, ReservedSR, 
                   ReservedSL, AvailableQty, DmnAvg, OrderPoint, SafetyStokPoint, SuggorQty
              from #t4 where Status=1 order by TypeOfGoods, SupplierCode, NewPartNo
    open  SUGGOR
    fetch next from SUGGOR 
               into @cur_NewPartNo, @cur_MovingCode, @cur_ABCClass, @cur_ProductType, @cur_PartCategory, 
                    @cur_TypeOfGoods, @cur_SupplierCode, @cur_CostPrice, @cur_PurchasePrice, @cur_OnHand, 
                    @cur_OnOrder, @cur_InTransit, @cur_AllocationSP, @cur_AllocationSR, @cur_AllocationSL, 
                    @cur_BackOrderSP, @cur_BackOrderSR, @cur_BackOrderSL, @cur_ReservedSP, @cur_ReservedSR, 
                    @cur_ReservedSL, @cur_AvailableQty, @cur_DmnAvg, @cur_OrderPoint, @cur_SafetyStokPoint, 
                    @cur_SuggorQty

    while @@fetch_status=0
      begin
         if @TPGO<>@cur_TypeOfGoods or @SupplierCode<>@cur_SupplierCode
            begin
                set @Counter      = 0
                set @TPGO         = @cur_TypeOfGoods
                set @SupplierCode = @cur_SupplierCode
                -- setup nomor document for SUGGOR
                   set @DocPre    = (select isnull(DocumentPrefix,'XYZ') from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR')
                   set @DocNum    = (select isnull(DocumentSequence,999888) from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR')
                   if  @DocNum    = 999888  return
                   set @DocNum    = @DocNum + 1
                   update gnMstDocument set DocumentSequence = @DocNum
                    where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='SGR'
                   set @SuggorNo  = @DocPre + '/' + right('00'+right(convert(varchar(4),year(@SuggorDate)),2),2)
                                            + '/' + right('000000'+(convert(varchar(6),@DocNum,6)),6)
                 --set @AOS1      = @AOS1 + case when @AOS1='' then @SuggorNo else ', ' + @SuggorNo end
                   set @AOS1      = @AOS1 + case when @AOS1='' then @SuggorNo else ', ' + right(@SuggorNo,6) end

                -- setup nomor document POS
                   set @DocPre    = (select isnull(DocumentPrefix,'XYZ') from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='POS')
                   set @DocNum    = (select isnull(DocumentSequence,999888) from gnMstDocument
                                      where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='POS')
                   if  @DocNum    = 999888  return
                   set @DocNum    = @DocNum + 1
                   update gnMstDocument set DocumentSequence = @DocNum
                    where CompanyCode=@CompanyCode and BranchCode=@BranchCode and DocumentType='POS'
                   set @POSNo     = @DocPre + '/' + right('00'+right(convert(varchar(4),year(@SuggorDate)),2),2)
                                            + '/' + right('000000'+(convert(varchar(6),@DocNum,6)),6)
                 --set @AOS2      = @AOS2 + case when @AOS2='' then @POSNo else ', ' + @POSNo end
                   set @AOS2      = @AOS2 + case when @AOS2='' then @POSNo else ', ' + right(@POSNo,6) end

                -- insert Suggor Header table
                   insert into spTrnPSUGGORHdr
                              (CompanyCode, BranchCode, SuggorNo, SuggorDate, TypeOfGoods, POSNo, 
                               POSDate, SupplierCode, ProductType, MovingCode, OrderType, Status, 
                               PrintSeq, IsVoid, CreatedBy, CreatedDate, LastUpdateBy, 
                               LastUpdateDate, isLocked, LockingBy, LockingDate)
                        values(@CompanyCode, @BranchCode, @SuggorNo, @SuggorDate, @TPGO, @POSNo, 
                               @SuggorDate, @SupplierCode, @cur_ProductType, 1, '8', 1, 0, 0,  -- OrderType = 8 - AOS
                               'AOS', @SuggorDate, 'AOS', @SuggorDate, '0', NULL, NULL)

                -- insert POS Header table
                   insert into spTrnPPOSHdr
                              (CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, IsBO, 
                               IsSubstution, isSuggorProcess, Remark, ProductType, PrintSeq, ExPickingSlipNo, 
                               ExPickingSlipDate, Status, Transportation, TypeOfGoods, isGenPORDD, isDeleted, 
                               CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
                               LockingDate, isDropSign, DropSignReffNo)
                        values(@CompanyCode, @BranchCode, @POSNo, @SuggorDate, @SupplierCode, '8', 1, 
                               1, 1, 'MACHINE ORDER', @cur_ProductType, 1, NULL, NULL, 2, 'AOS', @TPGO, 
                               0, 0, 'AOS', @SuggorDate, 'AOS', @SuggorDate, 0, NULL, NULL, 0, NULL)
            end

         -- insert Suggor Detail table
            set @Counter = @Counter + 1
            insert into spTrnPSUGGORDtl
                       (CompanyCode, BranchCode, SuggorNo, PartNo, SeqNo, OnHand, OnOrder, InTransit, 
                        AllocationSP, AllocationSR, AllocationSL, BackOrderSP, BackOrderSR, BackOrderSL, 
                        ReservedSP, ReservedSR, ReservedSL, DemandAvg, OrderPoint, SafetyStock, AvailableQty, 
                        SuggorQty, SuggorCorrecQty, ProductType, PartCategory, PurchasePrice, CostPrice, 
                        isExistInItems, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
                 values(@CompanyCode, @BranchCode, @SuggorNo, @cur_NewPartNo, @Counter, @cur_OnHand, 
                        @cur_OnOrder, @cur_InTransit, @cur_AllocationSP, @cur_AllocationSR, @cur_AllocationSL, 
                        @cur_BackOrderSP, @cur_BackOrderSR, @cur_BackOrderSL, @cur_ReservedSP, 
                        @cur_ReservedSR, @cur_ReservedSL, @cur_DmnAvg, @cur_OrderPoint, 
                        @cur_SafetyStokPoint, @cur_AvailableQty, @cur_SuggorQty, @cur_SuggorQty,
                        @cur_ProductType, @cur_PartCategory, @cur_PurchasePrice, @cur_CostPrice, 
                        1, 'AOS', @SuggorDate, 'AOS', @SuggorDate)

         -- insert POS Detail table
            set @DiscPct = (select isnull(DiscPct,0.00) from gnMstSupplierProfitCenter 
                             where CompanyCode      = @CompanyCode
                               and BranchCode       = @BranchCode 
                               and SupplierCode     = @cur_SupplierCode 
                               and ProfitCenterCode = '300')
            set @PurchasePriceNett = floor(@cur_PurchasePrice * (100.00 - @DiscPct) / 100)
            insert into spTrnPPOSDtl
                       (CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, 
                        PurchasePrice, DiscPct, PurchasePriceNett, CostPrice, TotalAmount, 
                        ABCClass, MovingCode, ProductType, PartCategory, CreatedBy, 
                        CreatedDate, LastUpdateBy, LastUpdateDate, Note)
                 values(@CompanyCode, @BranchCode, @POSNo, @cur_NewPartNo, @Counter, 
                        @cur_SuggorQty, @cur_SuggorQty, @cur_PurchasePrice, @DiscPct, 
                        @PurchasePriceNett, @cur_CostPrice, @cur_SuggorQty * @PurchasePriceNett,
                        @cur_ABCClass, @cur_MovingCode, @cur_ProductType, @cur_PartCategory, 
                        'AOS', @SuggorDate, 'AOS', @SuggorDate, 'AOS')

         -- insert Suggor Sub-detail table
            insert into spTrnPSUGGORSubDtl
                 select @CompanyCode, @BranchCode, @SuggorNo, @cur_NewPartNo, PartNo,
                        ROW_NUMBER() over (order by PartNo) as row,
                        I   = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-6,@PeriodDate))
                                  and Month       = month(dateadd(mm,-6,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        II  = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-5,@PeriodDate))
                                  and Month       = month(dateadd(mm,-5,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        III = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-4,@PeriodDate))
                                  and Month       = month(dateadd(mm,-4,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        IV  = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-3,@PeriodDate))
                                  and Month       = month(dateadd(mm,-3,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        V   = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-2,@PeriodDate))
                                  and Month       = month(dateadd(mm,-2,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        VI  = (select DemandQty from #t1
                                where CompanyCode = @CompanyCode
                                  and BranchCode  = @BranchCode
                                  and Year        = year (dateadd(mm,-1,@PeriodDate))
                                  and Month       = month(dateadd(mm,-1,@PeriodDate))
                                  and NewPartNo   = @cur_NewPartNo
                                  and PartNo      = #Suggor.PartNo),
                        'AOS',@SuggorDate
                   from #Suggor
                  where CompanyCode = @CompanyCode
                    and BranchCode  = @BranchCode
                    and NewPartNo   = @cur_NewPartNo
                    
         -- insert order balance table
            insert into spTrnPOrderBalance
                       (CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
                        POSDate, OrderQty, OnOrder, InTransit, Received, Located, DiscPct, 
                        PurchasePrice, CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
                        CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
                 values(@CompanyCode, @BranchCode, @POSNo, @cur_SupplierCode, @cur_NewPartNo, @Counter, 
                        @cur_NewPartNo, @SuggorDate, @cur_SuggorQty, @cur_SuggorQty, 0.00, 0.00, 0.00, 
                        @DiscPct, @cur_PurchasePrice, @cur_CostPrice, @cur_ABCClass, @cur_MovingCode, 
                        NULL, NULL, @TPGO, 'AOS', @SuggorDate, 'AOS', @SuggorDate)

         -- update item master table
            update spMstItems 
               set OnOrder = OnOrder + @cur_SuggorQty
             where CompanyCode = @CompanyCode
               and BranchCode  = @BranchCode
               and PartNo      = @cur_NewPartNo

         fetch next from SUGGOR 
               into @cur_NewPartNo, @cur_MovingCode, @cur_ABCClass, @cur_ProductType, @cur_PartCategory, 
                    @cur_TypeOfGoods, @cur_SupplierCode, @cur_CostPrice, @cur_PurchasePrice, @cur_OnHand, 
                    @cur_OnOrder, @cur_InTransit, @cur_AllocationSP, @cur_AllocationSR, @cur_AllocationSL, 
                    @cur_BackOrderSP, @cur_BackOrderSR, @cur_BackOrderSL, @cur_ReservedSP, @cur_ReservedSR, 
                    @cur_ReservedSL, @cur_AvailableQty, @cur_DmnAvg, @cur_OrderPoint, @cur_SafetyStokPoint, 
                    @cur_SuggorQty
      end
    close SUGGOR
    deallocate SUGGOR
	 
    -- alert machine order
       set @Counter = isnull((select max(MessageID) from SysMessageBoards),0) + 1
       set @MessageText = 'AOS# ' + @AOS1 + '. ' + @AOS2
       insert into SysMessageBoards
                  (MessageID, MessageHeader, MessageText, MessageTo, MessageTarget, MessageParams, 
                   DateFrom, DateTo, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
            values(@Counter, 'MACHINE ORDER', @MessageText, 'ALL', '', NULL,
                   NULL, NULL, 'AOS', @SuggorDate, 'AOS', @SuggorDate)
       select top 1 * from SysMessageBoards order by MessageID desc
    
    drop table #Suggor
    drop table #t1
    drop table #t2
    drop table #t3
    drop table #t4

END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryBPU] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @BPUType varchar(2),
 @BPUDateFrom DateTime,
 @BPUDateTo DateTime,
 @PONoFrom varchar(100),
 @PONoTo varchar(100),
 @NoRefDOFrom varchar(100),
 @NoRefDOTo varchar(100),
 @NoRefSJFrom varchar(100),
 @NoRefSJTo varchar(100),
 @NoBPUFrom varchar(100),
 @NoBPUTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT 
case when a.BPUType = ''0'' then ''DO'' 
when a.BPUType = ''1'' then ''SJ''
when a.BPUType = ''2'' then ''DO & SJ'' 
when a.BPUType = ''3'' then ''SJ Booking''
end as BPUType, a.BPUNo,
convert(varchar(20),a.BPUDate,106) as BPUDate,
a.RefferenceDONo, 
convert(varchar(20),a.RefferenceDODate,106) as RefferenceDODate, 
a.RefferenceSJNo, 
case when year(a.RefferenceSJDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceSJDate,106) end as RefferenceSJDate, 
a.SupplierCode, 
(SELECT z.SupplierName FROM gnMstSupplier z 
WHERE z.CompanyCode = a.CompanyCode
AND z.SupplierCode = a.SupplierCode)  AS SupplierName, 
a.ShipTo, a.Expedition, 
(SELECT x.SupplierName
FROM gnMstSupplier x
WHERE x.CompanyCode = a.CompanyCode
AND x.SupplierCode = a.Expedition)  AS ExpeditionName, 
a.WarehouseCode, 
(SELECT y.RefferenceDesc1
FROM omMstRefference y
WHERE y.CompanyCode = a.CompanyCode
AND y.RefferenceCode = a.WarehouseCode
AND y.RefferenceType = ''WARE'')  AS WareHouseName, 
a.Remark, 
CASE WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM omTrPurchaseBPU a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@BPUType)) > 0
   set @pQuery = @pQuery + ' and a.BPUType = ''' + rtrim(@BPUType) + ''''

if year(@BPUDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.BPUDate between ''' + convert(varchar(50),@BPUDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@BPUDateTo) + ''''

if len(rtrim(@PONoFrom)) > 0
   set @pQuery = @pQuery + ' and a.PONo between ''' + rtrim(@PONoFrom) + '''' + ' and ' + '''' + rtrim(@PONoTo) + ''''

if len(rtrim(@NoRefDOFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceDONo between ''' + rtrim(@NoRefDOFrom) + '''' + ' and ' + '''' + rtrim(@NoRefDOTo) + ''''

if len(rtrim(@NoRefSJFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceSJNo between ''' + rtrim(@NoRefSJFrom) + '''' + ' and ' + '''' + rtrim(@NoRefSJTo) + ''''

if len(rtrim(@NoBPUFrom)) > 0
   set @pQuery = @pQuery + ' and a.BPUNo between ''' + rtrim(@NoBPUFrom) + '''' + ' and ' + '''' + rtrim(@NoBPUTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.BPUNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[usprpt_PostingMultiCompany_BACKUP_OLD]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@UserId varchar(20)
AS	

BEGIN
 -- Check Posting Multi Company Date in table sysParameter
	declare @PostDate	varchar(10)
	declare @PostStatus	integer
	set @PostDate   = (select ParamValue from sysParaMeter where ParamId='POSTING_STATUS')
	set @PostStatus = (case when @PostDate is null                             then 0
	                        when @PostDate < convert(varchar,@PostingDate,111) then 1
					        else                                                    2
					   end)
	if @PostStatus = 0
		insert sysParaMeter values('POSTING_STATUS',convert(varchar,@PostingDate,111),'Posting Multi Company')
	else
		if @PostStatus = 1
			update sysParaMeter set ParamValue=convert(varchar,@PostingDate,111) where ParamId='POSTING_STATUS'
		else
			BEGIN
				select '0' [STATUS], 'Daily Posting tertanggal ' + convert(varchar,getdate(),106) + 'sudah pernah dilakukan sebelumnya....' [INFO]
				return
			END

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode				varchar(15)
		declare @curBranchCode				varchar(15)
		declare @curDocNo					varchar(15)
		declare @curDocDate					datetime
		declare @curPartNo					varchar(20)
		declare @curPartSeq					integer
		declare @curWarehouseCode			varchar(15)
		declare @curQtyOrder				numeric(18,2)
		declare @curQty						numeric(18,2)
		declare @curDiscPct					numeric(06,2)
		declare @curCostPrice				numeric(18,2)
		declare @curRetailPrice				numeric(18,2)
		declare @curTypeOfGoods				varchar(15)
		declare @curCompanyMD				varchar(15)
		declare @curBranchMD				varchar(15)
		declare @curWarehouseMD				varchar(15)
		declare @curRetailPriceInclTaxMD	numeric(18,2)
		declare @curRetailPriceMD			numeric(18,2)
		declare @curCostPriceMD				numeric(18,2)
		declare @curQtyFlag					char(1)
		declare @curProductType				varchar(15)
		declare @curProfitCenterCode		varchar(15)
		declare @curStatus					char(1)
		declare @curProcessStatus			char(1)
		declare @curProcessDate				datetime
		declare @curCreatedBy				varchar(15)
		declare @curCreatedDate				datetime
		declare @curLastUpdateBy			varchar(15)
		declare @curLastUpdateDate			datetime
		declare @DocPrefix					varchar(15)
		declare @DocxPrefix					varchar(15)
		declare @SONo						varchar(15)
		declare @PLNo						varchar(15)
		declare @INVNo						varchar(15)
		declare @FPJNo						varchar(15)
		declare @PosNo						varchar(15)
		declare @BinNo						varchar(15)
		declare @WrsNo						varchar(15)
		declare @HppNo						varchar(15)
		declare @DocYear					numeric(4,0)
		declare @DocSeq						numeric(15,0)
		declare @SeqNo						integer
		declare @dbName						varchar(50)
		declare @dbNameMD					varchar(50)
		declare @sqlSelect					nvarchar(max)
		declare @sqlInsert					nvarchar(max)
		declare @sqlInsertMD				nvarchar(max)
		declare @sqlUpdate					nvarchar(max)
		declare @swCompanyCode				varchar(15) = ''
		declare @swBranchCode				varchar(15) = ''
		declare @swDocNo 					varchar(15) = ''
		declare @TotalAmount				numeric(18,0)
		declare @RetailPriceNet				numeric(18,0)
		declare @SalesAmt					numeric(18,0)
		declare @DiscAmt					numeric(18,0)
		declare @NetSales					numeric(18,0)
		declare @PPNAmt						numeric(18,0)
		declare @TotSalesAmt				numeric(18,0)
		declare @CostAmt 					numeric(18,0)
		declare @MovingCode					varchar(15)
		declare @ABCClass					char(1)
		declare @PartCategory				varchar(15)
		declare @LocationCode				varchar(10)
		declare @MovingCodeMD				varchar(15)
		declare @ABCClassMD					char(1)
		declare @PartCategoryMD				varchar(3)
		declare @LocationCodeMD				varchar(10)
		declare @ProductTypeMD				varchar(15)	
		declare @TypeOfGoodsMD				varchar(5)
		declare @TopCodeMD					varchar(15)
		declare @PaymentCodeMD				varchar(15)
		declare @SalesCodeMD				varchar(15)
		declare @TopDaysMD					integer
		declare @DueDateMD					date
		declare @AccNoArMD					varchar(50)
		declare @AccNoSalesMD				varchar(50)
		declare @AccNoTaxOutMD				varchar(50)
		declare @AccNoDisc1MD				varchar(50)
		declare @AccNoCogsMD				varchar(50)
		declare @AccNoInventoryMD			varchar(50)
		declare @SeqNoGlMD					numeric(10,0)
		declare @DiscFlag					integer
		declare @CurrentDate				varchar(50) = convert(varchar,getdate(),121)
        declare cursvMDMovement cursor for
			select * from svSDMovement
             where left(DocNo,3) = 'LMP'
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by CompanyCode, BranchCode, DocNo, TypeOfGoods, PartNo, PartSeq
		open cursvMDMovement

		fetch next from cursvMDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
			       @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
				   @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
				   @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin
			 -- MD: MovingCode, ABCClass, PartCategory, Location Code, ProducType
				set @sqlSelect = N'select @MovingCodeMD=MovingCode from ' +@dbNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@MovingCodeMD varchar(15) output', @MovingCodeMD = @MovingCodeMD output
				set @sqlSelect = N'select @ABCClassMD=ABCClass from ' +@dbNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ABCClassMD char(1) output', @ABCClassMD = @ABCClassMD output
				set @sqlSelect = N'select @PartCategoryMD=PartCategory from ' +@dbNameMD+ '..spMstItems where CompanyCode=''' +@curCompanyMD+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@PartCategoryMD varchar(3) output', @PartCategoryMD = @PartCategoryMD output
				set @sqlSelect = N'select @LocationCodeMD=LocationCode from ' +@dbNameMD+ '..spMstItemLoc where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PartNo=''' +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @query=@sqlSelect, @params= N'@LocationCodeMD varchar(10) output', @LocationCodeMD = @LocationCodeMD output
				set @sqlSelect = N'select @ProductTypeMD=ProductType from ' +@dbNameMD+ '..gnMstCoProfile where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ProductTypeMD varchar(15) output', @ProductTypeMD = @ProductTypeMD output
				set @sqlSelect = N'select @TopCodeMD=TopCode from ' +@dbNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@TopCodeMD varchar(15) output', @TopCodeMD = @TopCodeMD output
				set @sqlSelect = N'select @PaymentCodeMD=PaymentCode from ' +@dbNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@PaymentCodeMD varchar(15) output', @PaymentCodeMD = @PaymentCodeMD output
				set @sqlSelect = N'select @SalesCodeMD=SalesCode from ' +@dbNameMD+ '..gnMstCustomerProfitCenter 
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode=''' +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @query=@sqlSelect, @params= N'@SalesCodeMD varchar(15) output', @SalesCodeMD = @SalesCodeMD output
				set @sqlSelect = N'select @TopDaysMD=ParaValue from ' +@dbNameMD+ '..gnMstLookUpDtl 
						            where CompanyCode=''' +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' +@TopCodeMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@TopDaysMD integer output', @TopDaysMD = @TopDaysMD output
				set @sqlSelect = N'select @TypeOfGoodsMD=TypeOfGoods from ' +@dbNameMD+ '..spMstItems
						            where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PartNo=''' +@curPartNo+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@TypeOfGoodsMD varchar(15) output', @TypeOfGoodsMD = @TypeOfGoodsMD output
				-- AR Account
				set @sqlSelect = N'select @AccNoArMD=c.ReceivableAccNo from ' 
				                          +@dbNameMD+ '..gnMstCustomerClass c,' 
										  +@dbNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ 
								  ''' and c.BranchCode      =''' +@curBranchMD+ 
								  ''' and c.ProfitCenterCode=''300''
								      and c.TypeOfGoods     =''' +@TypeOfGoodsMD+
								  ''' and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoArMD varchar(50) output', @AccNoArMD = @AccNoArMD output
				-- Sales Account
				set @sqlSelect = N'select @AccNoSalesMD=SalesAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoSalesMD varchar(50) output', @AccNoSalesMD = @AccNoSalesMD output
				-- Tax Account
				set @sqlSelect = N'select @AccNoTaxOutMD=c.TaxOutAccNo from ' 
										  +@dbNameMD+ '..gnMstCustomerClass c,' 
										  +@dbNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ ''' 
									  and c.BranchCode      =''' +@curBranchMD+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@TypeOfGoodsMD+ '''
									  and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoTaxOutMD varchar(50) output', @AccNoTaxOutMD = @AccNoTaxOutMD output
				-- Discount Account
				set @sqlSelect = N'select @AccNoDisc1MD=DiscAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoDisc1MD varchar(50) output', @AccNoDisc1MD = @AccNoDisc1MD output
				-- COGS Account
				set @sqlSelect = N'select @AccNoCogsMD=COGSAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoCogsMD varchar(50) output', @AccNoCogsMD = @AccNoCogsMD output
				-- Inventory Account
				set @sqlSelect = N'select @AccNoInventoryMD=InventoryAccNo from ' 
										  +@dbNameMD+ '..spMstAccount
									where CompanyCode=''' +@curCompanyMD+ ''' 
									  and BranchCode =''' +@curBranchMD+ '''
									  and TypeOfGoods=''' +@TypeOfGoodsMD+ ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@AccNoInventoryMD varchar(50) output', @AccNoInventoryMD = @AccNoInventoryMD output

				set @SalesAmt    = @curQty*@curRetailPriceInclTaxMD 
				set @DiscAmt     = round((@SalesAmt*@curDiscPct / 100),0)
				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt
				set @CostAmt     = @curQty*@curCostPriceMD 
				set @DueDateMD   = dateadd(day,isnull(@TopDaysMD,0),@curDocDate)

			 -- SD: MovingCode, ABCClass, PartCategory, Location Code
				set @sqlSelect = N'select @MovingCode=MovingCode from ' +@dbName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@MovingCode varchar(15) output', @MovingCode = @MovingCode output
				set @sqlSelect = N'select @ABCClass=ABCClass from ' +@dbName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@ABCClass varchar(15) output', @ABCClass = @ABCClass output
				set @sqlSelect = N'select @PartCategory=PartCategory from ' +@dbName+ '..spMstItems where CompanyCode=''' +@curCompanyCode+ ''' and PartNo=''' +@curPartNo + ''''
					execute sp_executesql @query=@sqlSelect, @params= N'@PartCategory varchar(15) output', @PartCategory = @PartCategory output
				set @sqlSelect = N'select @LocationCode=LocationCode from ' +@dbName+ '..spMstItemLoc where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and PartNo=''' +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @query=@sqlSelect, @params= N'@LocationCode varchar(15) output', @LocationCode = @LocationCode output

				set @RetailPriceNet = round(@curRetailPriceMD * (100.00-@curDiscPct) / 100.00,0)
				set @TotalAmount    = @CurQty * @RetailPriceNet
				set @SeqNo = @SeqNo + 1

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0

					 -- MD : Database Name, Company Code & Branch Code MD
						--set @dbNameMD = (select * from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)
					    set @dbNameMD = (select DbMD from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode)

					 -- SD : Database Name 
						set @dbName = (select DbName from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)

					 -- Discount Flag
						set @sqlSelect = N'select top 1 @DiscFlag=1 from ' +@dbName+ '..svSDMovement where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocNo=''' +@curDocNo+ ''''
							execute sp_executesql @query=@sqlSelect, @params= N'@DiscFlag integer output', @DiscFlag = @DiscFlag output

					 -- SD : Insert data to table spTrnPPOSHdr
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='POS'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='POS'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''POS'''
						execute sp_executesql @sqlUpdate 
						set @PosNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPPOSHdr 
										(CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, isBO, isSubstution, isSuggorProcess, 
										 Remark, ProductType, PrintSeq, ExPickingSlipNo, ExPickingSlipDate, Status, Transportation, TypeOfGoods, 
										 isGenPORDD, isDeleted, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
										 LockingDate, isDropSign, DropSignReffNo)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@PosNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''S'',0,0,0,''' 
												   +@curDocNo+ ''',''' +@curProductType+ ''',1,'''',NULL,7,NULL,''' 
												   +@curTypeOfGoods+ ''',0,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL,0,NULL)'
						execute sp_executesql @sqlInsert

					 -- MD : Insert data to table spTrnSORDHdr 
						set @sqlSelect = N'select @DocxPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocxPrefix varchar(15) output', @DocxPrefix = @DocxPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''SOC'''
						execute sp_executesql @sqlUpdate 
						set @SONo = @DocxPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSORDHdr 
										(CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill,
										 CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, isPORDD, OrderNo, OrderDate,
										 TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt,
										 TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate, isDropSign)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''' +@curBranchCode+ ''',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',0,0,1,''00'',''0'',0,''' 
												   +@PosNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@TopCodeMD+ ''',''' 
												   +convert(varchar,@TopDaysMD)+ ''',''' +@PaymentCodeMD+ ''',NULL,0.00,0,0,0,0,0,1,NULL,NULL,5,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL,0)'
						execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSPickingHdr 
						set @sqlSelect = N'select @DocxPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocxPrefix varchar(15) output', @DocxPrefix = @DocxPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''PLS'''
						execute sp_executesql @sqlUpdate 
						set @PLNo = @DocxPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSPickingHdr 
										(CompanyCode, BranchCode, PickingSlipNo, PickingSlipDate, CustomerCode, CustomerCodeBill, 
										 CustomerCodeShip, PickedBy, isBORelease, isSubstitution, isIncludePPN, TransType, SalesType, 
										 TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Remark, Status, 
										 PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchCode+
											   ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''POSTING'',0,0,1,''00'',''0'',0,0,0,0,0,0,NULL,2,1,'''
											           +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL)'
						execute sp_executesql @sqlInsert

					 -- MD: Insert Data to table spTrnSInvoiceHdr 
						set @sqlSelect = N'select @DocxPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocxPrefix varchar(15) output', @DocxPrefix = @DocxPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''INV'''
						execute sp_executesql @sqlUpdate 
						set @INVNo = @DocxPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlSelect = N'select @DocxPrefix=DocumentPrefix from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocxPrefix varchar(15) output', @DocxPrefix = @DocxPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbNameMD+ '..gnMstDocument where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
						set @sqlUpdate = 'update ' +@dbNameMD+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocumentType=''FPJ'''
						execute sp_executesql @sqlUpdate 
						set @FPJNo = @DocxPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSInvoiceHdr 
										(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, PickingSlipNo, PickingSlipDate, FPJNo, FPJDate,
										 TransType, SalesType, CustomerCode, CustomerCodeBill, CustomerCodeShip, TotSalesQty, TotSalesAmt, 
										 TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@PLNo+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''0'','''
													   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ 
											   ''',0,0,0,0,0,0,''2'',1,''' +left(@TypeOfGoodsMD,1)+
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
						execute sp_executesql @sqlInsert

					 -- SD : Insert data to table spTrnPBinnHdr 
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='BNL'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='BNL'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''BNL'''
						execute sp_executesql @sqlUpdate 
						set @BinNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPBinnHdr 
										(CompanyCode, BranchCode, BinningNo, BinningDate, ReceivingType, DNSupplierNo, DNSupplierDate, TransType, 
										 SupplierCode, ReferenceNo, ReferenceDate, TotItem, TotBinningAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BinNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''PLS-MD'','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''',''FPJ-MD'','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
						execute sp_executesql @sqlInsert

					 -- SD : Insert data to table spTrnPRcvHdr 
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='WRL'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='WRL'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''WRL'''
						execute sp_executesql @sqlUpdate 
						set @WrsNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPRcvHdr 
										(CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate, ReceivingType, 
										 DNSupplierNo, DNSupplierDate, TransType, SupplierCode, ReferenceNo, ReferenceDate, 
										 TotItem, TotWRSAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WrsNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BinNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''PLS-MD'','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''',''FPJ-MD'','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
						execute sp_executesql @sqlInsert

					 -- SD : Insert data to spTrnPHPP 
					  --select @DocPrefix = DocumentPrefix, @DocYear = DocumentYear, @DocSeq = DocumentSequence from gnMstDocument
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='HPP'
						set @sqlSelect = N'select @DocPrefix=DocumentPrefix from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocPrefix varchar(15) output', @DocPrefix = @DocPrefix output
						set @sqlSelect = N'select @DocYear=DocumentYear from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocYear integer output', @DocYear = @DocYear output
						set @sqlSelect = N'select @DocSeq=DocumentSequence from ' +@dbName+ '..gnMstDocument where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
						execute sp_executesql @query=@sqlSelect, @params= N'@DocSeq integer output', @DocSeq = @DocSeq output
						set @DocSeq = @DocSeq + 1
					  --update gnMstDocument set DocumentSequence = @DocSeq 
					  -- where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode and DocumentType='HPP'
						set @sqlUpdate = 'update ' +@dbName+ '..gnMstDocument
										     set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
										 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and DocumentType=''HPP'''
						execute sp_executesql @sqlUpdate 
						set @HppNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
									 replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
						set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPHPP 
										(CompanyCode, BranchCode, HPPNo, HPPDate, WRSNo, WRSDate, ReferenceNo, ReferenceDate,
										 TotPurchAmt, TotNetPurchAmt, TotTaxAmt, TaxNo, TaxDate, MonthTax, YearTax, DueDate,
										 DiffNetPurchAmt, DiffTaxAmt, TotHppAmt, CostPrice, PrintSeq, TypeOfGoods, Status, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HppNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WrsNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''FPJ-MD'','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,0,''TaxNo-MD'','''
												   +convert(varchar,@curDocDate,121)+ 
												   ''',''' +convert(varchar,month(@curDocDate),121)+
												   ''',''' +convert(varchar,year(@curDocDate),112)+ 
												   ''',''' +convert(varchar,@curDocDate,111)+
												   ''',0.00,0.00,0,0,1,''' +@curTypeOfGoods+ ''',2,''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' +@currentDate+ ''')'
						execute sp_executesql @sqlInsert
					end   

			 -- SD: Insert data to table spTrnPPOSDtl 
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPPOSDtl
										(CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, PurchasePrice, DiscPct,
										 PurchasePriceNett, CostPrice, TotalAmount, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, Note)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@PosNo+ ''',''' +@curPartNo+ 
										  ''',' +convert(varchar,@SeqNo)+ ',' +convert(varchar,@curQty)+ 
										  ',' +convert(varchar,@curQtyOrder)+ ',' +convert(varchar,@curRetailPrice)+ 
										  ',' +convert(varchar,@curDiscPct)+ ',' +convert(varchar,@RetailPriceNet)+ 
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@TotalAmount)+ 
										  ',''' +@ABCClass+ ''',''' +@MovingCode+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curDocNo+ ''')'
				execute sp_executesql @sqlInsert  

			 -- SD: Insert data to table spTrnPOrderBalance
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPOrderBalance
										(CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
										 POSDate, OrderQty, OnOrder, Intransit, Received, Located, DiscPct, PurchasePrice, 
										 CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@PosNo+ ''',''' 
											  +@curBranchMD+ ''',''' +@curPartNo+ ''',' +convert(varchar,@SeqNo)+ ','''
											  +@curPartNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','
											  +convert(varchar,@curQty)+ ',0,0,' +convert(varchar,@curQty)+ ','
											  +convert(varchar,@curQty)+ ',' +convert(varchar,@curDiscPct)+ ','
											  +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+ ','''
											  +@ABCClass+ ''',''' +@MovingCode+ ''',''' +@WrsNo+ ''',''' 
											  +convert(varchar,@curDocDate,121)+ ''',''' +@curTypeOfGoods+ ''',''' 
											  +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											  +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
				execute sp_executesql @sqlInsert

			 -- MD: Insert data to table spTrnSORDDtl
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSORDDtl
										(CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, 
										 ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, 
										 QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice,
										 CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, 
										 MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
										 StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +@curPartNo+ ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',0,0,0,'''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ ''','''
										  +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ ''','''
										  +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ ''','''
										  +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ ''','''
										  +@MovingCode+ ''',''' +left(@ABCClass,1)+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',5,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +convert(varchar,@curQtyOrder)+ ''')'
				execute sp_executesql @sqlInsert

			 -- MD: Insert data to table spTrnSOSupply  --select * from spTrnSOSupply where left(docNo,3)='SOC' order by DocNo desc
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSOSupply
										(CompanyCode, BranchCode, DocNo, SupSeq, PartNo, PartNoOriginal, PTSeq, 
										 PickingSlipNo, ReferenceNo, ReferenceDate, WarehouseCode, LocationCode, 
										 QtySupply, QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, 
										 DiscPct, MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',0,''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +convert(varchar,@SeqNo)+ ''',''' +@PLNo+
										  ''',''' +@PosNo+ ''',''' +convert(varchar,@curCreatedDate,121)+
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +@MovingCode+ ''',''' +@ABCClass+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',2,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
				execute sp_executesql @sqlInsert

			 -- Update data to table spTrnSORDHdr
				set @sqlUpdate = 'update ' +@dbNameMD+ '..spTrnSORDHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocNo=''' +@SONo + ''''
				execute sp_executesql @sqlUpdate 
			 -- Update data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
								   --values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								   --       ''',''' +convert(varchar,@curDocDate,121)+ 
								   --       ''',''' +convert(varchar,@curCreatedDate,121)+ 
										 -- ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										 -- ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										 -- +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										 -- ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										 -- ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										 -- ''',''' +@PartCategoryMD+ ''',''POSTING'')'
				execute sp_executesql @sqlInsert
			 -- MD: Insert/Update data to table spHstDemandItem 
				--merge into spHstDemandItem as DMN
				--	 using (values(@curCompanyMD, @curBranchMD, year(@curDocDate), month(@curDocDate), 
				--				   @curPartNo, 1, @curQtyOrder, 1, @curQty, @MovingCodeMD, @ProductTypeMD, 
				--				   @PartCategoryMD, @ABCClassMD, @curLastUpdateBy, @curLastUpdateDate))
				--	    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
				--				NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
				--				NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
				--		on DMN.CompanyCode = SRC.NewCompany
				--	   and DMN.BranchCode  = SRC.NewBranch
				--	   and DMN.Year        = SRC.NewYear
				--	   and DMN.Month       = SRC.NewMonth
				--	   and DMN.PartNo      = SRC.NewPart
				--	  when matched 
				--		   then update set DemandFreq = DemandFreq + SRC.NewDemandFreq
				--		                 , DemandQty  = DemandQty  + SRC.NewDemandQty
				--						 , SalesFreq  = SalesFreq  + SRC.NewSalesFreq
				--						 , SalesQty   = SalesQty   + SRC.NewSalesQty
				--	  when not matched by target 
				--		   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
				--		                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
				--				values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
				--				        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
				--						NewABCClass, NewLastUpdateBy, NewLastUpdateDate);
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..spHstDemandItem as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
						                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert
			 --MD: Insert/Update data to table spHstDemandcust 
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..spHstDemandcust as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curBranchCode+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.CustomerCode= SRC.NewCustomer
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, CustomerCode, PartNo, DemandFreq, DemandQty, SalesFreq, 
									    SalesQty, MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert

			 -- MD: Insert Data to table spTrnSPickingDtl
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSPickingDtl
										(CompanyCode, BranchCode, PickingSlipNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, 
										 QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, 
										 SalesAmt, DiscAmt, NetSalesAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, 
										 PartCategory, ExPickingSlipNo, ExPickingSlipDate, isClosed, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@PosNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQtyOrder)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@TotSalesAmt)+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ 
										  ''',NULL,NULL,0,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
				execute sp_executesql @sqlInsert
			 -- MD: Update data to table spTrnSPickingHdr
				set @sqlUpdate = 'update ' +@dbNameMD+ '..spTrnSPickingHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
				execute sp_executesql @sqlUpdate 

			 -- MD: Insert Data to table spTrnSInvoiceDtl
				set @sqlInsert = 'insert into ' +@dbNameMD+ '..spTrnSInvoiceDtl
										(CompanyCode, BranchCode, InvoiceNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, 
										 MovingCode, ABCClass, ExPickingListNo, ExPickingListDate, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@InvNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@PosNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',NULL,NULL,''' 
										          +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
				execute sp_executesql @sqlInsert

			 -- MD: Update data to table spTrnSInvoiceHdr
				set @sqlUpdate = 'update ' +@dbNameMD+ '..spTrnSInvoiceHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
				execute sp_executesql @sqlUpdate 

			 -- MD: Insert/Update data to table arInterface
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..arInterface as ar using ( values(''' 
								 +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
								 +convert(varchar,@curDocDate,121)+ ''',''300'',''' 
								 +convert(varchar,@TotSalesAmt)+ ''',0,''' 
								 +convert(varchar,@curBranchCode)+ ''',''' +@TopCodeMD+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',''INVOICE'',0,0,0,'''
								 +@SalesCodeMD+ ''',NULL,0,''POSTING'',''' 
								 +convert(varchar,@PostingDate,111)+ ''',''' 
								 +@AccNoArMD+ ''',NULL,''' +convert(varchar,@curDocDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
								NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
								NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate)
						on ar.CompanyCode = SRC.NewCompany
					   and ar.BranchCode  = SRC.NewBranch
					   and ar.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NettAmt = NettAmt + NewNettAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode, NettAmt, ReceiveAmt, 
										 CustomerCode, TOPCode, DueDate, TypeTrans, BlockAmt, DebetAmt, CreditAmt, SalesCode, 
										 LeasingCode, StatusFlag, CreateBy, CreateDate, AccountNo, FakturPajakNo, FakturPajakDate)
								values (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
										NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
										NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate);'
				execute sp_executesql @sqlInsert
print @sqlInsert

			 -- MD: Insert/Update data to table glInterface
				-- glInterface - AR
				set @SeqNoGLMD = 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoArMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@TotSalesAmt)+ 
											   ''',0,''AR'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +convert(varchar,@currentDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AR''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert

				-- glInterface - SALES
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoSalesMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@SalesAmt)+ 
											   ''',''SALES'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +convert(varchar,@currentDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''SALES''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert

				-- glInterface - TAX OUT
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoTaxOutMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@PPNAmt)+ 
											   ''',''TAX OUT'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +convert(varchar,@currentDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX OUT''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert

				-- glInterface - DISC1
				if isnull(@DiscFlag,0) = 1
				begin
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoDisc1MD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@DiscAmt)+ 
											   ''',0,''DISC1'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +convert(varchar,@currentDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''DISC1''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert
				end

				-- glInterface - COGS
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoCogsMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@CostAmt)+ 
											   ''',0,''COGS'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +convert(varchar,@currentDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''COGS''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert

				-- glInterface - INVENTORY
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlInsert = 'merge into ' +@dbNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoInventoryMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@CostAmt)+ 
											   ''',''INVENTORY'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +convert(varchar,@currentDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
				execute sp_executesql @sqlInsert


--select * from bitsby..glInterface where CompanyCode='6006408' and BranchCode='6006431' and DocNo in ('FPJ/14/000808')





			 -- SD: Insert data to table spTrnPBinnDtl 
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPBinnDtl
										(CompanyCode, BranchCode, BinningNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BinNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
				execute sp_executesql @sqlInsert  
			 -- Update data to table spTrnPBinnHdr
				set @sqlUpdate = 'update ' +@dbName+ '..spTrnPBinnHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotBinningAmt = TotBinningAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BinNo + ''''
				execute sp_executesql @sqlUpdate 
			 -- SD: Insert data to table spTrnPRcvDtl 
				set @sqlInsert = 'insert into ' +@dbName+ '..spTrnPRcvDtl
										(CompanyCode, BranchCode, WRSNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
				execute sp_executesql @sqlInsert  
			 -- Update data to table spTrnPRcvHdr
				set @sqlUpdate = 'update ' +@dbName+ '..spTrnPRcvHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotWRSAmt = TotWRSAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BinNo + ''''
				execute sp_executesql @sqlUpdate 

			 -- Read next record
				fetch next from cursvMDMovement
					into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
						 @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
						 @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
						 @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 
		close cursvMDMovement
		deallocate cursvMDMovement

		--select * from spTrnPPOSHdr			order by POSNo desc
		--select * from spTrnPPOSDtl			order by POSNo desc
		--select * from spTrnPOrderBalance		order by POSNo desc
		--select * from spTrnPBinnHdr			order by BinningNo desc
		--select * from spTrnPBinnDtl			order by BinningNo desc
		--select * from spTrnPRcvHdr			order by WRSNo desc
		--select * from spTrnPRcvDtl			order by WRSNo desc
		--select * from spTrnPHPP				order by WRSNo desc
		--select * from bitsby..spTrnSORDHdr where CreatedBy='POSTING' order by DocNo desc
		--select * from bitsby..spTrnSORDDtl d where exists (select 1 from bitsby..spTrnSORDHdr 
		--                                                    where CompanyCode=d.CompanyCode 
		--													  and BranchCode=d.BranchCode
		--													  and DocNo=d.DocNo
		--													  and CreatedBy='POSTING')
		--select * from bitsby..spTrnSOSupply d where exists (select 1 from bitsby..spTrnSORDHdr 
		--                                                     where CompanyCode=d.CompanyCode 
		--													   and BranchCode=d.BranchCode
		--													   and DocNo=d.DocNo
		--													   and CreatedBy='POSTING')
		--select * from bitsby..spTrnIMovement where CreatedBy='POSTING'
		--select * from bitsby..spHstDemandItem order by year desc, month desc
		--select * from bitsby..spHstDemandcust order by year desc, month desc
		--select * from bitsby..spTrnSPickingHdr where CreatedBy='POSTING' order by CreatedDate desc
		--select * from bitsby..spTrnSPickingDtl d where exists (select 1 from bitsby..spTrnSPickingHdr 
		--                                                        where CompanyCode=d.CompanyCode 
		--													      and BranchCode=d.BranchCode
		--												   	      and PickingSlipNo=d.PickingSlipNo
		--													      and CreatedBy='POSTING')
		--select * from bitsby..spTrnSInvoiceHdr where CreatedBy='POSTING' order by CreatedDate desc
		--select * from bitsby..spTrnSInvoiceDtl d where exists (select 1 from bitsby..spTrnSInvoiceHdr 
		--                                                        where CompanyCode=d.CompanyCode 
		--													      and BranchCode=d.BranchCode
		--												   	      and InvoiceNo=d.InvoiceNo
		--													      and CreatedBy='POSTING')
		--select * from BITSBY..arInterface where CreateBy='POSTING' order by DocNo desc
		--select * from BITSBY..glInterface where CreateBy='POSTING' order by DocNo desc, SeqNo 


--begin try  
--end try
--begin catch
--				print @sqlInsert2
--				rollback transaction
--end catch 

SELECT '1' [STATUS], 'Posting Done !!!' [INFO]

END
GO
CREATE Procedure [dbo].[Uspfn_SOAccsUpdateSSReturnNo] @CompanyCode varchar(15), @BranchCode varchar(15),
@ProductType varchar(2), @ReturnNo varchar(25), @PartNo varchar(25), @IsSaveProcess bit, @LastUpdateBy varchar(25)
as
SELECT
	a.CompanyCode
	, a.BranchCode
	, d.SONo
	, a.PartNo
	, a.ReturnNo SSReturnNo
	, b.ReturnDate SSReturnDate
INTO
	#SOAccs
FROM
	spTrnSRturSSDtl a WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnSRturSSHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ReturnNo = b.ReturnNo
	LEFT JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.DocNo = c.DocNo
	LEFT JOIN omTrSalesSO d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
		AND c.UsageDocNo = d.SONo
	INNER JOIN omTrSalesSOAccsSeq e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
		AND a.BranchCode = e.BranchCode
		AND a.PartNo = e.PartNo
		AND d.SONo = e.SONo
        AND e.PartSeq=1
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ReturnNo = @ReturnNo
	AND a.PartNo = @PartNo

UPDATE
	omTrSalesSOAccsSeq
SET
	SSReturnNo = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnNo ELSE '' END
	, SSReturnDate = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnDate ELSE '1900-01-01 00:00:00.000' END
	, LastUpdateBy = @LastUpdateBy
	, LastUpdateDate = GETDATE()
FROM
	omTrSalesSOAccsSeq a, #SOAccs b
WHERE
	a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.SONo = b.SONo
	AND a.PartNo = b.PartNo
    AND a.PartSeq=1

DROP TABLE #SOAccs
GO
-- =============================================
-- Author:		David L.
-- Create date: 22 Sep 2014
-- Description:	Get Customer For Report Register 011 
--              (Report Register Penjualan Per Pelanggan (Tunai&Kredit))
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spCustRptRgs011] 
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@DateFrom datetime,
	@DateTo datetime,
	@PartType varchar(2),
	@PaymentCode nchar(1)
AS
BEGIN
	declare @TOPC varchar(15)
	set @TOPC = 'TOPC'

	if(@PaymentCode = '0')
	begin	
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     = 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else if(@PaymentCode = '1')
	begin 
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     > 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else
	begin
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryDeliveryOrderDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @NoDO varchar(15)
)
AS
BEGIN

SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
a.ColourCode, c.RefferenceDesc1 as ColourName, a.Remark, a.DOSeq
FROM   omTrSalesDODetail a	   
LEFT JOIN
omMstModelYear b
ON a.CompanyCode = b.CompanyCode
AND a.SalesModelCode = b.SalesModelCode
AND a.SalesModelYear = b.SalesModelYear      
AND a.ChassisCode = b.ChassisCode	   
LEFT JOIN
omMstRefference c
ON a.CompanyCode = c.CompanyCode
AND a.ColourCode = c.RefferenceCode
AND c.RefferenceType = 'COLO'
WHERE a.CompanyCode= @p_CompanyCode 
AND a.BranchCode= @p_BranchCode  
AND a.DONo= @NoDO
ORDER BY a.ChassisNo ASC

END
GO
CREATE PROCEDURE [dbo].[uspfn_getTreeMenus]
AS
select * from VW_TREEMENUS
order by menuheader,menuindex
GO
CREATE procedure [dbo].[uspfn_spGetFPJLookUp]        
@CompanyCode varchar(15),        
@BranchCode  varchar(15),        
@TypeOfGoods varchar(4),        
@IsPKPOnly  varchar(2)        
as        
SELECT         
    TOP 100 a. FPJNo        
    , a.FPJDate        
    , a.PickingSlipNo        
    , a.PickingSlipDate        
    , a.InvoiceNo        
    , a.InvoiceDate        
    , (SELECT CustomerName FROM gnMstCustomer WHERE CompanyCode = a.CompanyCode AND CustomerCode = a.CustomerCode) CustomerName        
    , a.CustomerCode       
    , a.TOPCode      
    , a.TOPDays      
    , a.TotSalesQty      
    , a.TotSalesAmt      
    , a.TotDiscAmt      
    , a.TotDPPAmt      
    , a.TotPPNAmt      
    , a.TotFinalSalesAmt      
    , a.TransType      
    , a.CustomerCodeBill      
    , a.CustomerCodeShip  
    , a.Status  
    , a.FPJGovNo  
    , a.FPJSignature      
    , c.CustomerCode CustomerCodeTagih      
    , b.CustomerName CustomerNameTagih    
    , b.Address1 Address1Tagih    
    , b.Address2 Address2Tagih    
    , b.Address3 Address3Tagih      
    , b.Address4 Address4Tagih     
    , c.CustomerName       
    , c.Address1       
    , c.Address2       
    , c.Address3     
    , c.Address4     
FROM             
    spTrnSFPJHdr a        
    join SpTrnSFPJInfo b      
    on a.CompanyCode = b.CompanyCode      
    and a.BranchCode = b.BranchCode      
    and a.FPJNo = b.FPJNo      
    join gnMstCustomer c      
    on a.CompanyCode = b.CompanyCode      
    and a.CustomerCode = c.CustomerCode      
WHERE             
    a.CompanyCode = @CompanyCode        
    AND a.BranchCode = @BranchCode        
 AND ((CASE WHEN @IsPKPOnly = 1 THEN a.IsPKP END) = 1 OR (CASE WHEN @IsPKPOnly = 0 THEN a.IsPKP END) = a.IsPKP)        
 AND ((CASE WHEN @TypeOfGoods = '%' THEN a.TypeOfGoods END) = a.TypeOfGoods OR (CASE WHEN @TypeOfGoods <> '%' THEN a.TypeOfGoods END) = '0')        
 ORDER BY a.FPJNo DESC
GO
create procedure [dbo].[uspfn_ReloadCustBDayResource]
as

begin
	declare @ParamDate datetime;
	declare @RecordCount int;
	
	set @ParamDate = convert(varchar(4), datepart(year, getdate()) )+ '-01-01';

	if object_id('CsLkuBirthdayView') is not null
	begin
		select 'CsLkuBirthdayView is exist';

		-- delete CsLkuBirthdayView 
		-- where DODate >= @ParamDate

		set @RecordCount = ( select count(CompanyCode) from CsLkuBirthdayView );

		if @RecordCount = 0
		begin
			select 'Record is null -> regenerating';

			drop table CsLkuBirthdayView;
			
			with x as (
				select * from CsLkuBirthdayViewSource
			)
			select *
			  into CsLkuBirthdayView
			  from x
		end
		

		insert into CsLkuBirthdayView
		select *
		  from CsLkuBirthdayViewSource
	end
	else
	begin
		select 'CsLkuTDayCallView is not exists';

		with x as (
			select * from CsLkuBirthdayViewSource
		)
		select *
		  into CsLkuBirthdayView
		  from x
	end

end;
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spCheckOutsQty]
	(
		@CompanyCode varchar(50),
		@BranchCode varchar(50),
		@CustCode varchar(50),
		@TransType varchar(50),
		@SalesType varchar(50),
		@PartNoOri varchar(50)

	)
AS
BEGIN
	SELECT 
		spTrnSORDDtl.DocNo, 
		CONVERT(varchar,spTrnSORDHdr.DocDate, 106) AS DocDate,
		spTrnSORDDtl.PartNo,
		CONVERT(NUMERIC(18,2), 
		ISNULL(spTrnSORDDtl.QtyBO, 0)) AS QtyBO, 
		CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) AS QtyBoSupply,
		CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBO, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOOts,
		CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOCancel, 
		spTrnSORDDtl.PartNoOriginal 
	FROM spTrnSORDDtl 
	INNER JOIN spTrnSORDHdr ON spTrnSORDDtl.DocNo = spTrnSORDHdr.DocNo 
				AND spTrnSORDHdr.CustomerCode=@CustCode AND  spTrnSORDHdr.TransType = @TransType 
				AND spTrnSORDHdr.SalesType = @SalesType AND spTrnSORDHdr.Status >= 2 
				AND spTrnSORDHdr.CompanyCode=@CompanyCode AND spTrnSORDHdr.BranchCode = @BranchCode
	WHERE 
	ISNULL(spTrnSORDDtl.QtyBO, 0) - ISNULL(spTrnSORDDtl.QtyBOSupply, 0) - ISNULL(spTrnSORDDtl.QtyBOCancel, 0) > 0 
	AND spTrnSORDDtl.CompanyCode=@CompanyCode AND spTrnSORDDtl.BranchCode = @BranchCode AND spTrnSORDDtl.PartNoOriginal = @PartNoOri  
	ORDER BY spTrnSORDHdr.DocDate DESC 
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryDeliveryOrder] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SODateFrom DateTime,
 @SODateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @NoDOFrom varchar(100),
 @NoDOTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT a.DONo, convert(varchar(20),a.DODate,106) as DODate, a.SONo, a.CustomerCode, b.CustomerName, 
b.CustomerName, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
c.SupplierName AS Expedition, case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
d.RefferenceDesc1 AS WareHouseName, e.CustomerName AS ShipTo, 
a.Remark, 
CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM omTrSalesDO a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstSupplier c ON c.CompanyCode = a.CompanyCode AND c.SupplierCode = a.Expedition
LEFT JOIN OmMstRefference d ON d.CompanyCode = a.CompanyCode AND d.RefferenceCode = a.WareHouseCode AND d.RefferenceType = ''WARE''
LEFT JOIN GnMstCustomer e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.ShipTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.DODate between ''' + convert(varchar(50),@SODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SODateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@NoDOFrom)) > 0
   set @pQuery = @pQuery + ' and a.DONo between ''' + rtrim(@NoDOFrom) + '''' + ' and ' + '''' + rtrim(@NoDOTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.DONo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_SelectAccOther]
	@CompanyCode varchar(25),
	@Reff varchar(25)
as
begin
	SELECT a.RefferenceCode
	     , a.RefferenceDesc1 RefferenceDesc1
      FROM dbo.omMstRefference a
     WHERE a.CompanyCode = @CompanyCode
       AND a.RefferenceType = @Reff
       AND a.Status != '0'
end
GO
CREATE procedure [dbo].[uspfn_spMstItems] 
@CompanyCode varchar(10),@BranchCode varchar(10),
 @UserId varchar(10),
 @SupplierCode varchar(20),@MovingCode varchar(10),
 @LeadTime decimal, @OrderCycle decimal,@SafetyStock decimal
as
UPDATE spMstItems
SET LeadTime = CONVERT(DECIMAL, @LeadTime),
    OrderCycle = CONVERT(DECIMAL, @OrderCycle),
    SafetyStock = CONVERT(DECIMAL, @SafetyStock),
    SafetyStockQty = CONVERT(DECIMAL, @SafetyStock) * a.DemandAverage,
    OrderPointQty = ((a.DemandAverage * (CONVERT(DECIMAL, @LeadTime) + CONVERT(DECIMAL, @OrderCycle))) + 
                     (a.DemandAverage * CONVERT(DECIMAL, @SafetyStock))),
    LastUpdateBy = @UserId,
    LastUpdateDate = getdate()
FROM spMstItems a INNER JOIN spMstItemInfo b 
ON a.CompanyCode=b.CompanyCode
AND a.PartNo=b.PartNo
WHERE a.CompanyCode=@CompanyCode
    AND a.BranchCode=@BranchCode
    AND b.SupplierCode=@SupplierCode
    AND a.MovingCode=@MovingCode
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryBPK] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SODateFrom DateTime,
 @SODateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @NoDOFrom varchar(100),
 @NoDOTo varchar(100),
 @NoBPKFrom varchar(100),
 @NoBPKTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT a.BPKNo, convert(varchar(20),a.BPKDate,106) as BPKDate, a.SONo, a.DONo, b.CustomerName, 
a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
c.SupplierName AS Expedition, case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
d.RefferenceDesc1 AS WareHouseName, e.CustomerName AS ShipTo, 
a.Remark, 
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Canceled''
	WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM omTrSalesBPK a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstSupplier c ON c.CompanyCode = a.CompanyCode AND c.SupplierCode = a.Expedition
LEFT JOIN OmMstRefference d ON d.CompanyCode = a.CompanyCode AND d.RefferenceCode = a.WareHouseCode AND d.RefferenceType = ''WARE''
LEFT JOIN GnMstCustomer e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.ShipTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.BPKDate between ''' + convert(varchar(50),@SODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SODateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@NoDOFrom)) > 0
   set @pQuery = @pQuery + ' and a.DONo between ''' + rtrim(@NoDOFrom) + '''' + ' and ' + '''' + rtrim(@NoDOTo) + ''''

if len(rtrim(@NoBPKFrom)) > 0
   set @pQuery = @pQuery + ' and a.BPKNo between ''' + rtrim(@NoBPKFrom) + '''' + ' and ' + '''' + rtrim(@NoBPKTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.BPKNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
create procedure [dbo].[uspfn_sp_inquiry_penerimaan_barang_detail]
 @companycode varchar(15), @branchcode varchar(15), @BinningNo varchar(25)
 AS
SELECT
    ROW_NUMBER() OVER(ORDER BY a.DocNo) RowNumber
	, BinningNo
	, a.DocNo
	, a.PartNo
	, (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, ISNULL(a.ReceivedQty, 0) ReceivedBinning
	, ISNULL(WRS.ReceivedQty, 0) ReceivedWRS
	, ISNULL(WRS.PurchasePrice, 0) PurchasePrice
	, ISNULL(WRS.PurchaseAmt, 0) PurchaseAmt
	, ISNULL(WRS.DiscPct, 0) DiscPct
	, ISNULL(WRS.DiscAmt, 0) DiscAmt
	, ISNULL(WRS.TotalAmt, 0) TotalAmt
FROM
	spTrnPBinnDtl a WITH(NOLOCK, NOWAIT)
	LEFT JOIN (
		SELECT
			CompanyCode, BranchCode, DocNo, PartNo, ReceivedQty, PurchasePrice, DiscPct, 
			ReceivedQty * PurchasePrice AS PurchaseAmt, 
			ROUND((ReceivedQty * PurchasePrice * DiscPct / 100), 0) AS DiscAmt,
			ReceivedQty * PurchasePrice - ROUND((ReceivedQty * PurchasePrice * DiscPct / 100), 0) TotalAmt
		FROM
			SpTrnPRcvDtl WITH(NOLOCK, NOWAIT)
	) WRS ON a.CompanyCode = WRS.CompanyCode
		AND a.BranchCode = WRS.BranchCode
		AND a.DocNo = WRS.DocNo
		AND a.PartNo = WRS.PartNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.BinningNo = @BinningNo
GO
create procedure [dbo].[uspfn_PmStatusHistory] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) InquiryNumber, CompanyCode, BranchCode, SequenceNo, LastProgress, UpdateDate, UpdateUser
  from pmStatusHistory
 where UpdateDate is not null
   and UpdateDate > @LastUpdateDate
 order by UpdateDate asc )#t1
 
declare @LastUpdateQry datetime
    set @LastUpdateQry = (select top 1 UpdateDate from #t1 order by UpdateDate desc)

select * from #t1
 union
select InquiryNumber, CompanyCode, BranchCode, SequenceNo, LastProgress, UpdateDate, UpdateUser
  from pmStatusHistory
 where UpdateDate = @LastUpdateQry
 
  drop table #t1

--go

--uspfn_pmStatusHistory @LastUpdateDate='2013-10-10 00:00:00',@Segment=500
GO
CREATE procedure [dbo].[uspfn_SpMstItemCheckPartCount]
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@PartNo varchar(32)
as
SELECT (OnOrder+InTransit+OnHand+AllocationSP+AllocationSR+AllocationSL+BackOrderSP+BackOrderSR+BackOrderSL+ReservedSP+ReservedSR+ReservedSL) J
FROM 
	[dbo].[spMstItems]
WHERE 
	[CompanyCode] = @CompanyCode
	and [BranchCode] = @BranchCode
	and Partno = @PartNo
	and (OnOrder+InTransit+OnHand+AllocationSP+AllocationSR+AllocationSL+BackOrderSP+BackOrderSR+BackOrderSL+ReservedSP+ReservedSR+ReservedSL) > 0
GO
Create procedure [dbo].[uspfn_Select4NoPartOrderBalance] @CompanyCode varchar(15),
@BranchCode varchar(15), @PosNo varchar(20)
as
SELECT 
	a.POSNo, a.PartNo, b.PartName, CAST(a.OrderQty as decimal(18,2)) as OrderQty, 
	a.OnOrder, a.Intransit, a.Received,a.DiscPct, a.PurchasePrice, 
	Convert(varchar(10),a.SeqNo) SeqNo, a.SupplierCode, a.OnOrder, a.PartNoOriginal, 
	a.TypeOfGoods 
FROM 
	spTrnPOrderBalance a 
INNER JOIN spMstItemInfo b
   ON b.PartNo      = a.PartNo
  AND b.CompanyCode = a.CompanyCode
WHERE a.CompanyCode = @CompanyCode
  AND a.BranchCode  = @BranchCode
  AND a.PosNo    like @PosNo
ORDER BY a.POSNo DESC, a.SeqNo
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryBPKDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @NoBPK varchar(15)
)
AS
BEGIN

SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
	a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
	a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
	a.ColourCode, c.RefferenceDesc1 as ColourName, a.Remark, a.StatusPDI,
	a.BPKSeq
FROM   omTrSalesBPKDetail a	   
	LEFT JOIN
	omMstModelYear b
	ON a.CompanyCode = b.CompanyCode
	AND a.SalesModelCode = b.SalesModelCode      
	AND a.ChassisCode = b.ChassisCode
	AND a.SalesModelYear = b.SalesModelYear	   
	LEFT JOIN
	omMstRefference c
	ON a.CompanyCode = c.CompanyCode
	AND a.ColourCode = c.RefferenceCode
	AND c.RefferenceType = 'COLO'
WHERE a.CompanyCode= @p_CompanyCode 
	AND a.BranchCode= @p_BranchCode 
	AND a.BPKNo= @NoBPK
ORDER BY a.ChassisNo ASC

END
GO
CREATE procedure [dbo].[uspfn_spGetLmpDoc] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(5), @TransType varchar(5),@BeginDate datetime, @EndDate datetime  
as  
--declare @CompanyCode varchar(15)  
--declare @BranchCode varchar(15)  
--declare @TypeOfGoods varchar(15)  
--declare @TransType varchar(5)  
--declare @BeginDate Datetime  
--declare @EndDate datetime  
--set @CompanyCode = '6006406'  
--set @BranchCode = '6006401'  
--set @TypeOfGoods = '0'  
--set @TransType = '1%'  
--set @BeginDate = '2014/03/01'  
--set @EndDate = '2014/05/30'  
SELECT  
  
 spTrnSLmpHdr.CompanyCode,  
 spTrnSLmpHdr.BranchCode,  
 spTrnSLmpHdr.LmpNo  
,spTrnSLmpHdr.LmpDate  
,spTrnSLmpHdr.BPSFNo  
,spTrnSLmpHdr.BPSFDate  
,spTrnSLmpHdr.PickingSlipNo  
,spTrnSLmpHdr.PickingSlipDate  
,spTrnSLmpHdr.TypeOfGoods  
,spTrnSLmpHdr.CustomerCodeShip  
,spTrnSLmpHdr.CustomerCode  
,spTrnSLmpHdr.CustomerCodeBill  
,spTrnSLmpHdr.TotSalesQty  
,spTrnSLmpHdr.TotSalesAmt  
,spTrnSLmpHdr.TotDiscAmt  
,spTrnSLmpHdr.TotDPPAmt  
,spTrnSLmpHdr.TotPPNAmt  
,spTrnSLmpHdr.CreatedBy  
,spTrnSLmpHdr.CreatedDate  
,spTrnSLmpHdr.LastUpdateBy  
,spTrnSLmpHdr.LastUpdateDate  
,spTrnSLmpHdr.LastUpdateBy  
,spTrnSLmpHdr.LastUpdateDate  
,spTrnSLmpHdr.isPKP  
,spTrnSLmpHdr.isLocked  
,spTrnSLmpHdr.LockingBy  
,spTrnSLmpHdr.LockingDate,  
 b.CustomerCode,  
 b.CustomerName,  
 b.Address1,  
 b.Address2,  
 b.Address3,  
 b.Address4,  
 b.CustomerCode CustomerCodeTagih,  
 b.CustomerName CustomerNameTagih,  
 b.Address1 Address1Tagih,  
 b.Address2 Address2Tagih,  
 b.Address3 Address3Tagih,  
 b.Address4 Address4Tagih,  
 c.LookUpValueName TransType    
  
FROM spTrnSLmpHdr  
join gnMstCustomer b  
ON spTrnSLmpHdr.CompanyCode = b.CompanyCode  
AND spTrnSLmpHdr.CustomerCode = b.CustomerCode   
join gnMstLookupDtl c on  
spTrnSLmpHdr.CompanyCode = c.CompanyCode  
and spTrnSLmpHdr.TransType= c.LookupValue   
AND c.CodeID = 'TTNP'  
WHERE spTrnSLmpHdr.CompanyCode=@CompanyCode  
  AND spTrnSLmpHdr.BranchCode=@BranchCode  
  AND spTrnSLmpHdr.TypeOfGoods = @TypeOfGoods   
  AND Convert(Varchar, spTrnSLmpHdr.LmpDate, 111) between @BeginDate and @EndDate  
  AND TransType LIKE @TransType  
ORDER BY spTrnSLmpHdr.LmpNo DESC
GO
CREATE procedure [dbo].[uspfn_SelectLMPDtl] @CompanyCode varchar(15), @BranchCode varchar(15), @LmpNo varchar(15)  
as  
SELECT     
	row_number () OVER (ORDER BY spTrnSLmpDtl.CreatedDate ASC) AS NoUrut,
	spTrnSLmpDtl.PartNo,
	spTrnSLmpDtl.PartNoOriginal,
	spTrnSLmpDtl.DocNo, 
	CONVERT(VARCHAR, spTrnSLmpDtl.DocDate, 106) AS DocDate, 
	spTrnSLmpDtl.ReferenceNo, 
	spTrnSLmpDtl.QtyBill
	FROM spTrnSLmpDtl
	WHERE
	spTrnSLmpDtl.CompanyCode = @CompanyCode AND
	spTrnSLmpDtl.BranchCode = @BranchCode AND
	spTrnSLmpDtl.LmpNo = @LmpNo
GO
create procedure [dbo].[uspfn_CsCustomerDataSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , AddPhone1
     , AddPhone2
     , ReligionCode
     , IsDeleted
     , CreatedBy
     , CreatedDate
     , UpdatedBy
     , UpdatedDate
  from CsCustData
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_CsCustomerDataSend @LastUpdateDate='2013-01-01', @Segment=1
GO
CREATE procedure [dbo].[uspfn_OmTrSalesSoVinSend]   
 @LastUpdateDate datetime,  
 @Segment int  
as  
  
select * into #t1 from (  
select top (@Segment) *
  from omTrSalesSOVin  
 where LastUpdateDate is not null  
   and LastUpdateDate > @LastUpdateDate  
 order by LastUpdateDate asc )#t1  
  
select * from #t1  
  
  drop table #t1
GO
create procedure [dbo].[uspfn_spgnMstAccountView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10), @Search varchar(50) = '')
 as
 IF @Search <> ''
	SELECT   AccountNo, [Description], CompanyCode,  BranchCode  FROM gnMstAccount 
	where CompanyCode=@CompanyCode and BranchCode=@BranchCode
	and (AccountNo like '%' + @Search + '%' or [Description] like '%' + @Search + '%')

 ELSE
	SELECT   AccountNo, [Description], CompanyCode,  BranchCode  FROM gnMstAccount 
	where CompanyCode=@CompanyCode and BranchCode=@BranchCode
GO
--declare @CompanyCode varchar(20)
--declare @BranchCode  varchar(20)
--declare @TypeJournal  varchar(20)
--declare @DocNo   varchar(20)

--set @CompanyCode = '6558201'
--set @BranchCode  = '655820100'
--set @TypeJournal = 'invoice'
--set @DocNo       = 'IVU/13/001280'

-- =============================================
-- Author:		<xxxxxx>
-- Create date: <xxxxxx>
-- Description:	<Get Journal>
-- Last Update By:	<yo - 29 Nov 2013>
-- =============================================

CREATE procedure [dbo].[uspfn_SelectInventory4All]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@Status		varchar(50),
	@StartDate	smalldatetime,
	@EndDate	smalldatetime
as 

select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFEROUT' as TypeJournal
	 , TransferOutNo as DocNo
	 , TransferOutDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferOut
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and TransferOutDate between @StartDate and @EndDate
UNION
select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFERIN' as TypeJournal
	 , TransferInNo as DocNo
	 , TransferInDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferIn
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and TransferInDate between @StartDate and @EndDate
UNION
select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFEROUTMULTIBRANCH' as TypeJournal
	 , TransferOutNo as DocNo
	 , TransferOutDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferOutMultiBranch
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and convert(varchar, TransferOutDate, 112) between @StartDate and @EndDate
UNION
select convert(bit, (case Status when '5' then '1' else '0' end)) as IsSelected
     , case isnull(Status, 0) when '5' then 'Posted' else 'UnPosted' end as Status
	 , CompanyCode
	 , BranchCode
	 , 'TRANSFERINMULTIBRANCH' as TypeJournal
	 , TransferInNo as DocNo
	 , TransferInDate as DocDate
	 , ReferenceNo as ReffNo
	 , BranchCodeFrom + '-' + WareHouseCodeFrom as BranchCodeFrom
	 , BranchCodeTo + '-' + WareHouseCodeTo as BranchCodeTo
  from omTrInventTransferInMultiBranch
 where 1 = 1
   and CompanyCode = @CompanyCode
   and BranchCode  = @BranchCode
   and Status      = @Status
   and BranchCodeFrom <> BranchCodeTo
   and TransferInDate between @StartDate and @EndDate
GO
create procedure [dbo].[uspfn_CsCustomerBirthdaySend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode
     , CustomerCode
	 , PeriodYear
	 , TypeOfGift
	 , SentGiftDate
	 , ReceivedGiftDate
	 , Comment
	 , AdditionalInquiries
	 , Status
	 , CreatedBy
	 , CreatedDate
	 , UpdatedBy
	 , UpdatedDate
  from CsCustBirthDay
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- usprpt_PmRpInqOutStanding_NewBySalesman '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewBySalesman] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;

-- TABLE INITIAL
--===============================================================================================================================
	SELECT * INTO #employee_stat_SM FROM(
		SELECT 
			a.CompanyCode,
			a.EmployeeID,
			a.EmployeeName,
			a.Position,
			'Salesman' PositionName, 
			a.TeamLeader,
			(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastProgress = 'P' AND (b.EmployeeID = a.EmployeeID) AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)) PROSPECT,
			(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastProgress = 'HP' AND (b.EmployeeID = a.EmployeeID) AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)) HOTPROSPECT,
			(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastProgress = 'SPK' AND (b.EmployeeID = a.EmployeeID) AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)) SPK
		FROM HrEmployee a
		WHERE a.CompanyCode = @CompanyCode  AND a.Department = 'SALES'
			AND a.TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @BranchManager))
	)#employee_stat_SM

	SELECT * INTO #employee_stat_SK FROM(
		SELECT
			a.CompanyCode,
			a.TeamLeader EmployeeID,
			b.EmployeeName,
			'SC' Position,
			'Sales Coordinator' PositionName, 
			b.TeamLeader ShEmployeeID,
			ISNULL(SUM(a.PROSPECT),0) PROSPECT,
			ISNULL(SUM(a.HOTPROSPECT),0) HOTPROSPECT,
			ISNULL(SUM(a.SPK),0) SPK
		FROM #employee_stat_SM a
		LEFT JOIN HrEmployee b
			ON b.CompanyCode = a.CompanyCode AND a.TeamLeader = b.EmployeeID
		WHERE b.TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE EmployeeID = @BranchManager))
		GROUP BY a.CompanyCode,
			b.EmployeeName,
			a.TeamLeader, b.TeamLeader
	)#employee_stat_SK

	SELECT * INTO #employee_stat_SH FROM(
		SELECT
			a.CompanyCode,
			a.ShEmployeeID EmployeeID,
			b.EmployeeName,
			'SH' PositionID,
			'Sales Head' PositionName, 
			b.TeamLeader BMEmployeeID,
			ISNULL(SUM(a.PROSPECT),0) PROSPECT,
			ISNULL(SUM(a.HOTPROSPECT),0) HOTPROSPECT,
			ISNULL(SUM(a.SPK),0) SPK
		FROM #employee_stat_SK a
		LEFT JOIN HrEmployee b
			ON b.CompanyCode = a.CompanyCode AND a.ShEmployeeID = b.EmployeeID
		WHERE b.TeamLeader = @BranchManager
		GROUP BY a.CompanyCode,
			b.EmployeeName,
			a.ShEmployeeID, b.TeamLeader
	)#employee_stat_SH

	SELECT * INTO #employee_stat_BM FROM(
		SELECT
			a.CompanyCode,
			a.BMEmployeeID EmployeeID,
			b.EmployeeName,
			'BM' PositionID,
			'Branch Manager' PositionName, 
			'' TeamLeader,
			ISNULL(SUM(a.PROSPECT),0) PROSPECT,
			ISNULL(SUM(a.HOTPROSPECT),0) HOTPROSPECT,
			ISNULL(SUM(a.SPK),0) SPK
		FROM #employee_stat_SH a
		LEFT JOIN HrEmployee b
			ON b.CompanyCode = a.CompanyCode AND a.BMEmployeeID = b.EmployeeID
		WHERE a.BMEmployeeID = @BranchManager
		GROUP BY a.CompanyCode,
			b.EmployeeName,
			a.BMEmployeeID
	)#employee_stat_BM

SELECT * INTO #employee_stat FROM(
	SELECT '4' PositionId, a.* FROM #employee_stat_SM a
	UNION
	SELECT '3' PositionId, a.* FROM #employee_stat_SK a
	UNION
	SELECT '2' PositionId, a.* FROM #employee_stat_SH a
	UNION
	SELECT '1' PositionId, a.* FROM #employee_stat_BM a
	) #employee_stat

	DROP TABLE #employee_stat_SM
	DROP TABLE #employee_stat_SK
	DROP TABLE #employee_stat_SH
	DROP TABLE #employee_stat_BM

IF @COO = ''
	BEGIN
-- == CASE I ==
		IF @SalesHead = '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN		
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode
		END
-- == CASE II ==
		ELSE IF @SalesHead <> '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @BranchManager
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesHead
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @SalesHead)
			UNION			
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @SalesHead))
		END
-- == CASE III ==
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman = ''
		BEGIN
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @BranchManager
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesHead
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesCoordinator
			UNION			
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @SalesCoordinator)
		END
-- == CASE IV ==
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman <> ''
		BEGIN
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @BranchManager
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesHead
			UNION
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @SalesCoordinator
			UNION			
			SELECT * FROM  #employee_stat WHERE CompanyCode = @CompanyCode AND EmployeeID = @Salesman
		END
	END
END
GO
CREATE PROCEDURE [dbo].[uspfn_spTrnIWHTrfDtlview]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@WHTrfNo  varchar(25) 
 
AS
select  a.PartNo ,b.PartName,a.FromWarehouseCode  ,d.LookUpValueName [FromWarehouseName], a.ToWarehouseCode ,c.LookUpValueName [ToWarehouseName],a.ReasonCode ,a.Qty
  from spTrnIWHTrfDtl a
inner join spMstItemInfo b

on a.PartNo=b.PartNo
inner join  gnMstLookUpDtl AS d
ON a.CompanyCode = d.CompanyCode 
						 AND a.FromWarehouseCode  = d.LookUpValue
inner join gnMstLookUpDtl c  ON a.CompanyCode = c.CompanyCode 
						 AND a.ToWarehouseCode  = c.LookUpValue
where    c.CodeID='WRCD' and   d.CodeID='WRCD' and a.CompanyCode=@CompanyCode and a.WHTrfNo =@WHTrfNo   and a.BranchCode=@BranchCode
GO
create procedure [dbo].[uspfn_spGetPickingListDtl] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25)
as                            
SELECT 
 row_number () OVER (ORDER BY spTrnSPickingDtl.CreatedDate ASC) AS NoUrut,
 spTrnSPickingDtl.DocNo,
 spTrnSPickingDtl.PartNo,
 spTrnSPickingDtl.PartNoOriginal,
 ExPickingSlipNo,
 QtyOrder AS QtyOrder,
 spTrnSPickingDtl.QtySupply AS QtyPick,
 spTrnSPickingDtl.QtyPicked AS QtyPicked,
 spTrnSPickingDtl.QtyBill AS QtyBill,
 spTrnSOSupply.SupSeq,
 spTrnSOSupply.PTSeq
FROM spTrnSPickingDtl with (nolock, nowait)
LEFT JOIN spTrnSOSupply ON spTrnSOSupply.PickingSlipNo = spTrnSPickingDtl.PickingSlipNo AND 
spTrnSOSupply.CompanyCode= spTrnSPickingDtl.CompanyCode AND 
spTrnSOSupply.BranchCode = spTrnSPickingDtl.BranchCode AND 
spTrnSOSupply.DocNo = spTrnSPickingDtl.DocNo AND
spTrnSOSupply.PartNo = spTrnSPickingDtl.PartNo AND
spTrnSOSupply.PartNoOriginal = spTrnSPickingDtl.PartNoOriginal
WHERE spTrnSPickingDtl.CompanyCode= @CompanyCode AND 
spTrnSPickingDtl.BranchCode= @BranchCode AND 
spTrnSPickingDtl.PickingSlipNo = @PickingSlipNo
GO
create procedure [dbo].[uspfn_omSlsInvSlctMdlYrVldt]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15),
 @InvoiceNo varchar(30),
 @SalesModelCode varchar(30)
)  
AS  
BEGIN  
 SELECT a.SalesModelYear, a.SalesModelDesc
                  FROM omMstModelYear a
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.Status = '1'
                       AND a.SalesModelCode = @SalesModelCode
                       AND a.SalesModelYear IN
                             (SELECT b.SalesModelYear
                                FROM omTrSalesBPKModel b
                               WHERE b.CompanyCode = a.CompanyCode
                                     AND b.BranchCode = @BranchCode
                                     AND b.BPKNo = @BPKNo
                                     AND b.SalesModelCode = a.SalesModelCode
                                     AND (b.QuantityBPK - b.QuantityInvoice) > 0)
                UNION
                SELECT z.SalesModelYear, (SELECT x.SalesModelDesc 
                       FROM omMstModelYear x
                       WHERE x.SalesModelYear = z.SalesModelYear and 
			                 x.SalesModelCode = z.SalesModelCode)  AS SalesModelDesc
                  FROM omTrSalesInvoiceModel z
                 WHERE z.CompanyCode = @CompanyCode
                       AND z.BranchCode = @BranchCode
                       AND z.InvoiceNo = @InvoiceNo
                       AND z.BPKNo = @BPKNo
                       AND z.SalesModelCode = @SalesModelCode
                ORDER BY a.SalesModelYear 
                
end
GO
create procedure [dbo].[uspfn_SelectColourModel]
	@CompanyCode varchar(17),
	@BranchCode varchar(17),
	@SalesModelCode varchar(17),
	@InquiryNumber varchar(17)
as

begin
	declare @ReffType varchar(4);
	set @ReffType = 'COLO';

	DECLARE @Colour AS VARCHAR(15)
	SET     @Colour = (SELECT ColourCode FROM pmKDP WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND InquiryNumber = @InquiryNumber)

	SELECT a.ColourCode
	     , (
				SELECT b.RefferenceDesc1
				  FROM omMstRefference b
				 WHERE b.RefferenceCode = a.ColourCode
				   AND b.CompanyCode = a.CompanyCode 
				   AND b.RefferenceType = @ReffType
		    ) AS colourDesc
		 , a.Remark
	  FROM omMstModelColour a
	 WHERE a.CompanyCode = @CompanyCode 
	   AND a.SalesModelCode = @SalesModelCode 
	   AND (	
				CASE 
					WHEN @InquiryNumber = '' THEN '' 
					ELSE a.ColourCode 
				END
			) = (CASE WHEN @InquiryNumber = '' THEN '' ELSE @Colour END)
end
GO
create procedure [dbo].[uspfn_TDaysCallOutstanding]
	@CompanyCode nvarchar(20),
	@BranchCode varchar(20)
as

--set @CompanyCode = '6006406'

declare @CurrDate datetime, @Param1 as varchar(20)
declare @t_rem as table
(
	RemCode varchar(20),
	RemDate datetime,
	RemValue int
)

set @CurrDate = getdate()

-- REM3DAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REM3DAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REM3DAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBDAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBDAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBDAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMHOLIDAYS
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMHOLIDAYS'), '0')
insert into @t_rem (RemCode, RemDate) values('REMHOLIDAYS', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMSTNKEXT
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMSTNKEXT'), '0')
insert into @t_rem (RemCode, RemDate) values('REMSTNKEXT', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBPKB
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBPKB'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBPKB', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')
   
declare @CurrentMonth tinyint;
declare @PreviousMonth tinyint;
declare @NextMonth tinyint;
declare @CurrentDay tinyint;
declare @DateComparison datetime;

  select a.CustomerCode
	   , b.CustomerName
	   , a.Chassis
	   , isnull(a.PoliceRegNo, '') as PoliceRegNo
	   , a.DODate
	from CsCustomerVehicleView a
   inner join CsCustomerView b 
	  on b.CompanyCode = a.CompanyCode
	 and b.CustomerCode = a.CustomerCode
	left join CsTdayCall c
	  on c.CompanyCode = a.CompanyCode
	 and c.CustomerCode = a.CustomerCode
	 and c.Chassis = a.Chassis
   where a.CompanyCode like @CompanyCode
 	 and a.BranchCode like @BranchCode
	 and isnull(c.Chassis, '') = ''
	 and a.DoDate >=  (select RemDate from @t_rem where RemCode = 'REM3DAYSCALL')
GO
Create PROCEDURE [dbo].[uspfn_spTrnIReservedDtlview]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@ReservedNo  varchar(25) 
 
AS
 


select  a.PartNo ,b.PartName  ,a.AvailableQty ,a.ReservedQty
  from spTrnIReservedDtl a
inner join spMstItemInfo b

on a.PartNo=b.PartNo
where  a.CompanyCode=@CompanyCode and a.ReservedNo =@ReservedNo   and a.BranchCode=@BranchCode
GO
Create procedure [dbo].[uspfn_omSlsInvSlsMdlYearVldt]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @InvoiceNo varchar(30),
 @BPKNo varchar(15),
 @SalesModelCode varchar(30)
)  
AS  
BEGIN 
SELECT a.SalesModelYear, a.SalesModelDesc
                  FROM omMstModelYear a
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.Status = '1'
                       AND a.SalesModelCode = @SalesModelCode
                       AND a.SalesModelYear IN
                             (SELECT b.SalesModelYear
                                FROM omTrSalesBPKModel b
                               WHERE b.CompanyCode = a.CompanyCode
                                     AND b.BranchCode = @BranchCode
                                     AND b.BPKNo = @BPKNo
                                     AND b.SalesModelCode = a.SalesModelCode
                                     AND (b.QuantityBPK - b.QuantityInvoice) > 0)
                UNION
                SELECT z.SalesModelYear, (SELECT x.SalesModelDesc 
                       FROM omMstModelYear x
                       WHERE x.SalesModelYear = z.SalesModelYear and 
			                 x.SalesModelCode = z.SalesModelCode)  AS SalesModelDesc
                  FROM omTrSalesInvoiceModel z
                 WHERE z.CompanyCode = @CompanyCode
                       AND z.BranchCode = @BranchCode
                       AND z.InvoiceNo = @InvoiceNo
                       AND z.BPKNo = @BPKNo
                       AND z.SalesModelCode = @SalesModelCode
                ORDER BY a.SalesModelYear
END
GO
CREATE procedure [dbo].[sp_CheckValidTrans] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@BegDate varchar(10),
@EndDate varchar(10))


as

SELECT CompanyCode, BranchCode, POSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPPOSHdr'
FROM spTrnPPOSHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5, 6, 7))
AND (CONVERT(VARCHAR,POSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, BinningNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPBinnHdr'
FROM spTrnPBinnHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (3, 4))
AND (CONVERT(VARCHAR,BinningDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WRSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPRcvHdr' 
FROM spTrnPRcvHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status  NOT IN (3, 4))
--AND (ReceivingType NOT IN (3))
AND ReceivingType = 1  -- add 30/10/2010  by dRU
AND TransType = 4      -- add 30/10/2010  by dRU
AND (CONVERT(VARCHAR,WRSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WRSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPRcvHdr' 
FROM spTrnPRcvHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2,3))
AND (ReceivingType IN (3))
AND (CONVERT(VARCHAR,WRSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WRSNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPHPP' 
FROM spTrnPHPP
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,WRSDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ClaimNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPClaimHdr'
FROM spTrnPClaimHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5, 6, 7))
AND (CONVERT(VARCHAR,ClaimDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ClaimReceivedNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnPRcvClaimHdr'
FROM spTrnPRcvClaimHdr
WHERE CompanyCode = @CompanyCode 
AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5, 6, 7, 8))
AND (CONVERT(VARCHAR,ClaimReceivedDate,111) BETWEEN @BegDate AND @EndDate)

SELECT a.CompanyCode, a.BranchCode, a.LampiranNo AS DocNo, a.Status, b.TypeOfGoods, TableName = 'spUtlStockTrfHdr' 
FROM spUtlStockTrfHdr a
	INNER JOIN SpTrnSLmpHdr b ON a.CompanyCode = b.CompanyCode AND a.DealerCode = b.BranchCode AND a.LampiranNo = b.LmpNo
WHERE a.CompanyCode = @CompanyCode 
    AND a.BranchCode = @BranchCode
	AND (a.Status <> 2)
	AND (CONVERT(VARCHAR,b.LmpDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, DocNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSORDHdr' 
FROM spTrnSORDHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3, 4, 5))
AND (CONVERT(VARCHAR,DocDate,111) BETWEEN @BegDate AND @EndDate)

SELECT DISTINCT a.CompanyCode, a.BranchCode, a.DocNo, b.Status, b.TypeOfGoods, TableName = 'spTrnSOSupply' 
FROM spTrnSOSupply a
	 INNER JOIN spTrnSORDHdr b ON a.CompanyCode = b.CompanyCode
	 AND a.BranchCode = b.BranchCode
	 AND a.DocNo = b.DocNo
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
AND (LEN(ISNULL(PickingSlipNo, '')) = 0)
AND (CONVERT(VARCHAR, b.DocDate, 111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, PickingSlipNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSPickingHdr' 
FROM spTrnSPickingHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,PickingSlipDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, InvoiceNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSInvoiceHdr'
FROM spTrnSInvoiceHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3)) 
AND (CONVERT(VARCHAR,InvoiceDate,111) BETWEEN @BegDate AND @EndDate)
                
SELECT CompanyCode, BranchCode, BPSFNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSBPSFHdr'
FROM spTrnSBPSFHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,BPSFDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, FPJNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSFPJHdr'
FROM spTrnSFPJHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (1, 2, 3))
AND ISNULL(FpjGovNo,'') = ''
AND (CONVERT(VARCHAR,FPJDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, LmpNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSLmpHdr'
FROM spTrnSLmpHdr 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (1, 2, 3))
AND (CONVERT(VARCHAR,LmpDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReturnNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSRturHdr' 
FROM spTrnSRturHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReturnDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReturnNo AS DocNo, Status, '-' TypeOfGoods, TableName = 'spTrnSRturSrvHdr' 
FROM spTrnSRturSrvHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReturnDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReturnNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnSRturSSHdr' 
FROM spTrnSRturSSHdr                           
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReturnDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, AdjustmentNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnIAdjustHdr'
FROM spTrnIAdjustHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,AdjustmentDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, WHTrfNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnIWHTrfHdr'
FROM spTrnIWHTrfHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,WHTrfDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, ReservedNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnIReservedHdr'
FROM spTrnIReservedHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,ReservedDate,111) BETWEEN @BegDate AND @EndDate)

SELECT CompanyCode, BranchCode, STHdrNo AS DocNo, Status, TypeOfGoods, TableName = 'spTrnStockTakingHdr'
FROM spTrnStockTakingHdr
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
AND (Status NOT IN (2, 3))
AND (CONVERT(VARCHAR,CreatedDate,111) BETWEEN @BegDate AND @EndDate)
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- [usprpt_PmRpInqOutStanding_NewByType] '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewByType] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;
SELECT * INTO #dByTipe FROM(
			SELECT b.EmployeeID, (b.TipeKendaraan + ' ' + b.Variant) ModelKendaraan, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)
		)#dByTipe

		SELECT * INTO #dSls FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.ModelKendaraan,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) SPK
			FROM #dByTipe a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.ModelKendaraan
		)#dSls

		IF @COO = ''
		BEGIN
		IF @SalesHead = '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))  
				AND a.ModelKendaraan <> ''
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)
					AND a.ModelKendaraan <> ''
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan	
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader = @SalesCoordinator
					AND a.ModelKendaraan <> ''
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan	
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman <> ''
			SELECT
					a.EmployeeID,
					a.Position,
					a.ModelKendaraan,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.EmployeeID = @Salesman
					AND a.ModelKendaraan <> ''   
				GROUP BY a.EmployeeID, a.Position, a.ModelKendaraan

		DROP TABLE #dSls
		DROP TABLE #dByTipe
		END
END
GO
Create procedure [dbo].[uspfn_omSlsInvSlctModelVldt]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15),
 @InvoiceNo varchar(30)
)  
AS  
BEGIN  
 SELECT a.SalesModelCode, a.SalesModelDesc
                  FROM omMstModel a
                 WHERE EXISTS
                          (SELECT 1
                             FROM omTrSalesBPKModel b
                            WHERE (b.QuantityBPK - b.QuantityInvoice) > 0
                                  AND a.SalesModelCode = b.SalesModelCode
                                  AND a.CompanyCode = b.CompanyCode
                                  AND b.BranchCode = @BranchCode
                                  AND b.BPKNo = @BPKNo)
                       AND a.CompanyCode = @CompanyCode
                UNION
                SELECT z.SalesModelCode, (SELECT x.SalesModelDesc
                       FROM omMstModel x
                       WHERE z.SalesModelCode = x.SalesModelCode)  AS SalesModelDesc
                  FROM omTrSalesInvoiceModel z
                 WHERE z.CompanyCode = @CompanyCode
                       AND z.BranchCode = @BranchCode
                       AND z.InvoiceNo = @InvoiceNo
                       AND z.BPKNo = @BPKNo
                ORDER BY a.SalesModelCode
                
end
GO
CREATE procedure [dbo].[sp_BBNKIRBrowse]  @CompanyCode varchar(10), @BranchCode varchar(10)
 as
 
SELECT a.CompanyCode, a.BranchCode, a.SupplierCode, b.SupplierName, a.CityCode, c.LookUpValueName as CityName
		, a.SalesModelCode, d.SalesModelDesc, a.SalesModelYear, d.SalesModelDesc as SalesModelYearDesc, CAST(a.Status as bit) as Status
		, a.BBN, a.KIR, a.Remark
FROM omMstBBNKIR a
INNER JOIN gnMstSupplier b
	ON a.SupplierCode = b.SupplierCode
INNER JOIN gnMstLookUpDtl c
	ON a.CityCode = c.LookUpValue AND c.CodeID = 'CITY'
INNER JOIN omMstModel d
	ON a.SalesModelCode = d.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[uspfn_spGetPickingList]        
@CompanyCode varchar(15),          
@BranchCode varchar(15),          
@TypeOfGoods varchar(10),          
@ProductType varchar(4),   
@ProfitCenterCode varchar(5)          
as          
SELECT * FROM          
(          
    SELECT           
    a.PickingSlipNo,           
    a.PickingSlipDate,           
    a.InvoiceNo,           
    a.InvoiceDate,          
    (          
        SELECT TOP 1 PRODUCTTYPE FROM spTrnSInvoiceDtl          
        WHERE a.CompanyCode = spTrnSInvoiceDtl.CompanyCode          
        AND a.BranchCode = spTrnSInvoiceDtl.BranchCode          
        AND a.InvoiceNo = spTrnSInvoiceDtl.InvoiceNo          
    ) AS ProductType,      
    a.TotDPPAmt,      
    a.TotPPNAmt,      
    a.TotFinalSalesAmt,      
    b.CustomerCode,      
    b.CustomerName,      
    b.Address1,      
    b.Address2,      
    b.Address3,      
    b.Address4,    
    a.TransType,    
    a.CustomerCodeShip,    
    a.CustomerCodeBill,    
    a.TotSalesAmt,    
    a.TotSalesQty,  
    c.TOPCode,  
    d.ParaValue as TOPDays      
FROM           
    spTrnSInvoiceHdr a         
left JOIN gnMstCustomer b      
on a.CompanyCode = b.CompanyCode      
AND a.CustomerCode = b.CustomerCode     
LEFT join gnMstCustomerDealerProfitCenter c  
ON c.CompanyCode = b.CompanyCode  
and c.BranchCode = a.BranchCode  
AND c.CustomerCode = b.CustomerCode  
and c.ProfitCenterCode = @ProfitCenterCode  
LEFT JOIN gnMstLookUpDtl d  
on d.CompanyCode = a.CompanyCode  
AND d.CodeID = 'TOPC'  
and d.LookUpValue  = c.TOPCode  
WHERE a.CompanyCode = @CompanyCode          
  AND a.BranchCode  = @BranchCode          
    AND a.TypeOfGoods       = @TypeOfGoods          
    AND a.Status        = 0           
) A          
WHERE A.ProductType = @ProductType          
ORDER BY A.PickingSlipNo DESC
GO
create procedure [dbo].[uspfn_BpkbReminderOutstanding]
	@CompanyCode nvarchar(20),
	@BranchCode varchar(20)
as

--set @CompanyCode = '6006406'

declare @CurrDate datetime, @Param1 as varchar(20)
declare @t_rem as table
(
	RemCode varchar(20),
	RemDate datetime,
	RemValue int
)

set @CurrDate = getdate()

-- REM3DAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REM3DAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REM3DAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBDAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBDAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBDAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMHOLIDAYS
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMHOLIDAYS'), '0')
insert into @t_rem (RemCode, RemDate) values('REMHOLIDAYS', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMSTNKEXT
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMSTNKEXT'), '0')
insert into @t_rem (RemCode, RemDate) values('REMSTNKEXT', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBPKB
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBPKB'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBPKB', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')
   
declare @CurrentMonth tinyint;
declare @PreviousMonth tinyint;
declare @NextMonth tinyint;
declare @CurrentDay tinyint;
declare @DateComparison datetime;
  
set @DateComparison = (select RemDate from @t_rem where RemCode = 'REMBDAYSCALL');
set @CurrentMonth = datepart(month, @DateComparison);
set @NextMonth = @CurrentMonth + 1;
set @PreviousMonth = @CurrentMonth - 1;

  select a.CustomerCode
       , b.CustomerName
	   , a.BPKDate
	   , a.PoliceRegNo
	   , a.Chassis
	from CsCustomerVehicleView a
   inner join CsCustomerView b 
	  on b.CompanyCode = a.CompanyCode
	 and b.CustomerCode = a.CustomerCode
	left join CsCustBpkb c
	  on c.CompanyCode = a.CompanyCode
	 and c.CustomerCode = a.CustomerCode
	 and c.Chassis = a.Chassis
   where a.CompanyCode like @CompanyCode
	 and a.BranchCode like @BranchCode
	 and ( 
			isnull(c.Chassis, '') = ''
			or 
			isnull(c.BpkbReadyDate, '') = ''
			or
			isnull(isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)), '') = ''
			or
			isnull(isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode order by x.RetrievalEstimationDate desc)), '') != '' and isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)) < getdate() 
			or
			isnull(c.BpkbReadyDate, '') != '' and isnull(isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)), '') = ''
		 )
	 and a.DoDate >=  (select RemDate from @t_rem where RemCode = 'REMBPKB')
GO
create procedure [dbo].[uspfn_spGetSumQtyQtyPicked] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25)
as
select sum(QtyPicked) as QtyPicked 
            from spTrnSPickingDtl with (nolock, nowait)
            where 
                CompanyCode = @CompanyCode and
                BranchCode = @BranchCode and
                PickingSlipNo = @PickingSlipNo
GO
Create procedure [dbo].[uspfn_omSlsInvOtherGetTotal4Tax]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
SELECT * INTO #f1 FROM(
          SELECT (ISNULL(SUM(b.Quantity), 0) * ISNULL(SUM(a.AfterDiscDPP), 0)) AS DPPAmt, ISNULL(SUM(b.Quantity), 0) AS TotQuantity
         , (ISNULL(SUM(b.Quantity), 0) * ISNULL(SUM(a.AfterDiscPPn), 0)) AS PPnAmt, (ISNULL(SUM(b.Quantity), 0)  * ISNULL(SUM(a.AfterDiscTotal), 0)) AS TotalAmt
          FROM omTrSalesInvoiceOthers a
          LEFT JOIN omTrSalesInvoiceModel b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
          AND b.InvoiceNo = a.InvoiceNo AND b.SalesModelCode = a.SalesModelCode AND b.SalesModelYear = a.SalesModelYear
          WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
          GROUP BY a.SalesModelCode, a.SalesModelYear, a.OtherCode
          ) #f1

          SELECT ISNULL(SUM(DPPAmt), 0) AS DPPAmt, ISNULL(SUM(TotQuantity), 0) AS TotQuantity, ISNULL(SUM(PPnAmt), 0) AS PPnAmt, ISNULL(SUM(TotalAmt), 0) AS TotalAmt
          FROM #f1
          DROP TABLE #f1
          
end
GO
Create procedure [dbo].[uspfn_omSlsInvModelGetTotal4Tax]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
		 SELECT * INTO #f1 FROM (
             SELECT ISNULL(SUM(a.Quantity) * SUM(a.BeforeDiscDPP), 0) AS DPPAmt, ISNULL(SUM(a.Quantity) * SUM(a.DiscExcludePPn), 0) AS DiscAmt
            , (ISNULL(SUM(a.Quantity) * SUM(a.BeforeDiscDPP), 0) - ISNULL(SUM(a.Quantity) * SUM(a.DiscExcludePPn), 0) + ISNULL(SUM(a.Quantity) * SUM(a.AfterDiscPPn), 0)) AS TotalAmt, ISNULL(SUM(a.Quantity) * SUM(a.AfterDiscPPn), 0) AS PPnAmt
            , ISNULL(SUM(a.Quantity), 0) AS TotQuantity, ISNULL(SUM(a.Quantity) * SUM(a.PPnBMPaid), 0) AS PPnBMPaid FROM omTrSalesInvoiceModel a
             WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
             GROUP BY a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
             ) #f1
            
            
         SELECT ISNULL(SUM(DPPAmt), 0) AS DPPAmt, ISNULL(SUM(DiscAmt), 0) AS DiscAmt
            , ISNULL(SUM(TotalAmt), 0) AS TotalAmt, ISNULL(SUM(PPnAmt), 0) AS PPnAmt
             , ISNULL(SUM(TotQuantity), 0) AS TotQuantity, ISNULL(SUM(PPnBMPaid), 0) AS PPnBMPaid FROM #f1
            
			DROP TABLE #f1

end
GO
create procedure [dbo].[uspfn_CsBpkbRetrievalInformation]
	@CompanyCode varchar(17),
	@CustomerCode varchar(17)
as
begin
	select a.CompanyCode
		 , a.CustomerCode
		 , a.RetrievalEstimationDate
		 , a.Notes
	  from CsBpkbRetrievalInformation a
	 where a.CompanyCode = @CompanyCode
	   and a.CustomerCode = @CustomerCode
	   and ( a.IsDeleted = 0 or a.IsDeleted is null)
	 order by a.RetrievalEstimationDate desc
end
GO
CREATE PROCEDURe [dbo].[uspfn_spGetTotDiscAmt] @CompanyCode varchar(15), @BranchCode varchar(15),
@PickingSlipNo varchar(25)
as
SELECT SUM(DiscAmt)
FROM spTrnSPickingDtl WITH (nolock, nowait)
WHERE CompanyCode = @CompanyCode
  AND BranchCode = @BranchCode
  AND PickingSlipNo = @PickingSlipNo
GO
CREATE procedure [dbo].[usprpt_HrMstEmployee]
	@CompanyCode varchar(50),
	@HolidayYear int

as

select CompanyCode, HolidayYear, HolidayCode, HolidayDesc, DateFrom, DateTo
     , case IsHoliday when 1 then 'Y' else 'N' end IsHoliday
  from HrHoliday
 where CompanyCode = @CompanyCode
   and HolidayYear = @HolidayYear
GO
create  procedure [dbo].[uspfn_spGetPL4TableSales] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25),
@CodeID varchar(5)
as
SELECT DISTINCT
                            spTrnSORDHdr.DocNo,      
                            spTrnSORDHdr.DocDate,                                                  
                            PaymentName = 
                            (select LookUpValueName from gnMstLookupDtl 
                            where LookupValue = spTrnSORDHdr.PaymentCode and CodeID = @CodeID),
                            spTrnSORDHdr.OrderNo,                            
                            spTrnSORDHdr.OrderDate,
                            CONVERT(bit, 1) ChkSelect                          
                            FROM spTrnSPickingHdr 
                            LEFT JOIN spTrnSPickingDtl ON spTrnSPickingHdr.PickingSlipNo = spTrnSPickingDtl.PickingSlipNo AND
                                spTrnSPickingHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND
                                spTrnSPickingHdr.BranchCode = spTrnSPickingDtl.BranchCode    
                            INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSPickingDtl.DocNo AND
                                spTrnSORDHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND
                                spTrnSORDHdr.BranchCode = spTrnSPickingDtl.BranchCode
                            WHERE spTrnSPickingHdr.PickingSlipNo = @PickingSlipNo AND
                            spTrnSPickingHdr.CompanyCode = @CompanyCode AND
                            spTrnSPickingHdr.BranchCode = @BranchCode
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- [[usprpt_PmRpInqOutStanding_NewByData]] '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewByData] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;
SELECT * INTO #dByTipe FROM(
			SELECT b.EmployeeID, b.PerolehanData, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND b.LastUpdateDate <=  CONVERT(VARCHAR, @Period, 112)
		)#dByTipe

		SELECT * INTO #dSls FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.PerolehanData,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) SPK
			FROM #dByTipe a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.PerolehanData
		)#dSls

		IF @COO = ''
		BEGIN
		IF @SalesHead = '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))   
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator = '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman = ''
		BEGIN
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.TeamLeader = @SalesCoordinator
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData	
		END
		ELSE IF @SalesHead <> '' AND @SalesCoordinator <> '' AND @Salesman <> ''
			SELECT
					a.EmployeeID,
					a.Position,
					a.PerolehanData,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK
				FROM #dSls a WHERE a.EmployeeID = @Salesman  
				AND a.PerolehanData <> ''
				GROUP BY a.EmployeeID, a.Position, a.PerolehanData

		DROP TABLE #dSls
		DROP TABLE #dByTipe
		END
END
GO
create procedure [dbo].[uspfn_spSelectSPKNoEnhance] @CompanyCode varchar(15),
@BranchCode varchar(15), @ProductType varchar(4)
as
SELECT
	DISTINCT(JobOrderNo)
	, JobOrderDate
	, CustomerCode
	, CustomerCodeBill
    , (SELECT CustomerName FROM GnMstCustomer WHERE CompanyCode = @CompanyCode AND CustomerCode = a.CustomerCode) CustomerName
FROM
	svTrnService a WITH(NOLOCK, NOWAIT)
	LEFT JOIN svTrnSrvItem b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ProductType = b.ProductType
        AND a.ServiceNo = b.ServiceNo
	LEFT JOIN (SELECT CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, 
				SUM(ISNULL(DemandQty, 0) - (ISNULL(SupplyQty, 0) - ISNULL(ReturnQty, 0))) QtyOrder
				FROM svTrnSrvItem 
				GROUP BY CompanyCode, BranchCode, ProductType, ServiceNo, PartNo) Item ON
		Item.CompanyCode = a.CompanyCode AND Item.BranchCode = a.BranchCode AND Item.ProductType =
			a.ProductType AND Item.ServiceNo = a.ServiceNo AND Item.PartNo = b.PartNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND ServiceStatus < 5
	AND ServiceType = '2'
	AND Item.QtyOrder > 0
ORDER BY
	JobOrderNo DESC
GO
create procedure [dbo].[uspfn_UpdateValidityCsBpkbRetrievalInformation]
	@BpkbReadyDate datetime,
	@CompanyCode varchar(13),
	@CustomerCode varchar(13)
as
begin
	update CsBpkbRetrievalInformation
	   set IsDeleted = 1
	 where CompanyCode=@CompanyCode
	   and CustomerCode=@CustomerCode
	   and RetrievalEstimationDate < @BpkbReadyDate
end
GO
CREATE PROCEDURE [dbo].[uspfn_spGetSO4NonPLNewOrderWindow] @CompanyCode nvarchar(15),
@BranchCode nvarchar(15),@CustomerCode nvarchar(15),
@SalesType nvarchar(2),@TransType nvarchar(3),
@TypeOfGoods nvarchar(2),@ProductType nvarchar(2)
as
SELECT DISTINCT
spTrnSOSupply.DocNo, 
DocDate, 
spTrnSORDHdr.CustomerCode,
ReferenceNo, 
ReferenceDate,
Convert(bit, 0) chkSelect
FROM spTrnSOSupply
INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSOSupply.DocNo AND
    spTrnSORDHdr.CompanyCode = spTrnSOSupply.CompanyCode AND
    spTrnSORDHdr.BranchCode = spTrnSOSupply.BranchCode
WHERE spTrnSOSupply.SupSeq = 0
AND spTrnSORDHdr.Status = 2
AND spTrnSOSupply.DocNo NOT IN (SELECT DISTINCT DocNo FROM spTrnSPickingDtl
WHERE spTrnSPickingDtl.CompanyCode = @CompanyCode AND
          spTrnSPickingDtl.BranchCode = @BranchCode)
AND spTrnSORDHdr.CompanyCode = @CompanyCode
AND spTrnSORDHdr.BranchCode = @BranchCode 
AND spTrnSORDHdr.CustomerCode = @CustomerCode
AND spTrnSORDHdr.SalesType =  @SalesType
AND spTrnSORDHdr.TransType = @TransType
AND spTrnSORDHdr.TypeOfGoods = @TypeOfGoods
AND spTrnSOSupply.ProductType = @ProductType
GO
CREATE procedure [dbo].[usprpt_PmRpInqSummaryWeb] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@PeriodBegin		DATETIME,
	@PeriodEnd			DATETIME,
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@Salesman			VARCHAR(15),
	@Jns				VARCHAR(1)
	
)
AS 
BEGIN
SET NOCOUNT ON;
IF @Jns = '1'
BEGIN
	SELECT * INTO #deptSales FROM(
		SELECT 
				'4' idx,
			   a.EmployeeID,
			   a.Position,
			   a.EmployeeName,
			   a.TeamLeader,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.StatusProspek <> '20' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) NEW,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'P' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'HP' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'SPK' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) SPK,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'DO' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) DO,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'DELIVERY' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) DELIVERY,
				(SELECT COUNT(StatusProspek) FROM PmKdp b WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
				AND b.LastProgress = 'LOST' AND (b.EmployeeID = a.EmployeeID) AND InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd) LOST
		FROM HrEmployee a WHERE a.Department = 'SALES' AND a.CompanyCode = @CompanyCode
	)#deptSales

	--Sales Coordinator
	SELECT * INTO #qryS_SC FROM(
		SELECT 
				'3' idx,
			   a.EmployeeID,
			   a.Position, 
			   a.EmployeeName,
			   a.TeamLeader,
				(SELECT ISNULL(SUM(NEW), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) NEW,
				(SELECT ISNULL(SUM(PROSPECT), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) PROSPECT, 
				(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) HOTPROSPECT,
				(SELECT ISNULL(SUM(SPK), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) SPK,
				(SELECT ISNULL(SUM(DO), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) DO,
				(SELECT ISNULL(SUM(DELIVERY), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) DELIVERY,
				(SELECT ISNULL(SUM(LOST), 0) FROM #deptSales b WHERE (b.TeamLeader = a.EmployeeID)) LOST
		FROM #deptSales a WHERE a.Position = 'SC'
	)#qryS_SC

	--Sales Head
	SELECT * INTO #qrySH FROM(
		SELECT 
				'2' idx,
			   a.EmployeeID,
			   a.Position, 
			   a.EmployeeName,
			   a.TeamLeader,
			   (SELECT ISNULL(SUM(NEW), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') NEW,
			   (SELECT ISNULL(SUM(PROSPECT), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') PROSPECT,
			   (SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') HOTPROSPECT,
			   (SELECT ISNULL(SUM(SPK), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') SPK,
			   (SELECT ISNULL(SUM(DO), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') DO,
			   (SELECT ISNULL(SUM(DELIVERY), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') DELIVERY,
			   (SELECT ISNULL(SUM(LOST), 0) FROM #qryS_SC b WHERE (b.TeamLeader = a.EmployeeID) AND b.Position = 'SC') LOST
		FROM #deptSales a WHERE a.Position = 'SH'
	)#qrySH

	IF(@SalesHead = '' AND @Salesman = '')
		BEGIN
			--Branch Manager
			SELECT * INTO #qryBM FROM(
				SELECT 
					'1' idx,
					a.EmployeeID,
					a.Position, 
					a.EmployeeName,
					a.TeamLeader,
  					(SELECT ISNULL(SUM(NEW), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) NEW,
					(SELECT ISNULL(SUM(PROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) PROSPECT,
					(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) HOTPROSPECT,
					(SELECT ISNULL(SUM(SPK), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) SPK,
					(SELECT ISNULL(SUM(DO), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DO,
					(SELECT ISNULL(SUM(DELIVERY), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DELIVERY,
					(SELECT ISNULL(SUM(LOST), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) LOST
				FROM #deptSales a WHERE a.Position = 'BM' AND a.EmployeeID = @BranchManager
			)#qryBM

			SELECT * INTO #qryAll FROM(
				SELECT * FROM #qryBM
				UNION
				SELECT * FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM)     
				UNION
				SELECT * FROM #qryS_SC WHERE TeamLeader IN (SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM)) 
				UNION
				SELECT * FROM #deptSales WHERE TeamLeader IN (SELECT EmployeeID FROM #qryS_SC WHERE TeamLeader IN (SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM))) 
			)#qryAll

			SELECT 
				CASE a.Position
				WHEN 'BM' THEN 'Branch Manager'
				WHEN 'SH' THEN 'Sales Head'
				WHEN 'SC' THEN 'Sales Coordinator'
				WHEN 'S' THEN 'Salesman'
				ELSE 'Sales'
				END AS Position,
				a.EmployeeName, a.NEW, a.PROSPECT, a.HOTPROSPECT, a.SPK, a.DO, a.DELIVERY, a.LOST  
			FROM #qryAll a ORDER BY a.idx ASC
		
			DROP TABLE #qryAll
			DROP TABLE #qryBM
		END
	ELSE IF(@Salesman = '')
		BEGIN
			--Branch Manager
			SELECT * INTO #qryBM2 FROM(
				SELECT
					'1' idx, 
					a.EmployeeID,
					a.Position, 
					a.EmployeeName,
					a.TeamLeader,
  					(SELECT ISNULL(SUM(NEW), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) NEW,
					(SELECT ISNULL(SUM(PROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) PROSPECT,
					(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) HOTPROSPECT,
					(SELECT ISNULL(SUM(SPK), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) SPK,
					(SELECT ISNULL(SUM(DO), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DO,
					(SELECT ISNULL(SUM(DELIVERY), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DELIVERY,
					(SELECT ISNULL(SUM(LOST), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) LOST
				FROM #deptSales a WHERE a.Position = 'BM' AND a.EmployeeID = @BranchManager
			)#qryBM2

			SELECT * INTO #qryAll2 FROM(
				SELECT * FROM #qryBM2
				UNION
				SELECT * FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM2) AND EmployeeID = @SalesHead     
				UNION
				SELECT * FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM2) AND EmployeeID = @SalesHead) 
				UNION
				SELECT * FROM #deptSales WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM2) AND EmployeeID = @SalesHead )) 
			)#qryAll2

			SELECT 
				CASE a.Position
				WHEN 'BM' THEN 'Branch Manager'
				WHEN 'SH' THEN 'Sales Head'
				WHEN 'SC' THEN 'Sales Coordinator'
				WHEN 'S' THEN 'Salesman'
				ELSE 'Sales'
				END AS Position,
				a.EmployeeName, a.NEW, a.PROSPECT, a.HOTPROSPECT, a.SPK, a.DO, a.DELIVERY, a.LOST  
			FROM #qryAll2 a ORDER BY a.idx ASC

			DROP TABLE #qryAll2
			DROP TABLE #qryBM2
		END
	ELSE
		BEGIN
			--Branch Manager
			SELECT * INTO #qryBM3 FROM(
				SELECT
					'1' idx, 
					a.EmployeeID,
					a.Position, 
					a.EmployeeName,
					a.TeamLeader,
  					(SELECT ISNULL(SUM(NEW), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) NEW,
					(SELECT ISNULL(SUM(PROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) PROSPECT,
					(SELECT ISNULL(SUM(HOTPROSPECT), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) HOTPROSPECT,
					(SELECT ISNULL(SUM(SPK), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) SPK,
					(SELECT ISNULL(SUM(DO), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DO,
					(SELECT ISNULL(SUM(DELIVERY), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) DELIVERY,
					(SELECT ISNULL(SUM(LOST), 0) FROM #qrySH b WHERE b.TeamLeader = a.EmployeeID) LOST
				FROM #deptSales a WHERE a.Position = 'BM' AND a.EmployeeID = @BranchManager
			)#qryBM3

			SELECT * INTO #qryAll3 FROM(
				SELECT * FROM #qryBM3
				UNION
				SELECT * FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM3) AND EmployeeID = @SalesHead     
				UNION
				SELECT * FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM3) AND EmployeeID = @SalesHead) 
				UNION
				SELECT * FROM #deptSales WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qryS_SC WHERE TeamLeader IN 
				(SELECT EmployeeID FROM #qrySH WHERE TeamLeader IN (SELECT EmployeeID FROM #qryBM3) AND EmployeeID = @SalesHead ))
				AND EmployeeID = @Salesman 
			)#qryAll3

			SELECT 
				CASE a.Position
				WHEN 'BM' THEN 'Branch Manager'
				WHEN 'SH' THEN 'Sales Head'
				WHEN 'SC' THEN 'Sales Coordinator'
				WHEN 'S' THEN 'Salesman'
				ELSE 'Sales'
				END AS Position,
				a.EmployeeName, a.NEW, a.PROSPECT, a.HOTPROSPECT, a.SPK, a.DO, a.DELIVERY, a.LOST 
			FROM #qryAll3 a ORDER BY a.idx ASC 

			DROP TABLE #qryAll3
			DROP TABLE #qryBM3
		END
		DROP TABLE #deptSales
		DROP TABLE #qryS_SC
		DROP TABLE #qrySH
	END
ELSE IF @Jns = '2'
	BEGIN
		SELECT * INTO #dByTipe FROM(
			SELECT b.EmployeeID, (b.TipeKendaraan + ' ' + b.Variant) ModelKendaraan, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND (b.InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd)
		)#dByTipe

		SELECT * INTO #dSls FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.ModelKendaraan,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.StatusProspek <> '20' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) NEW,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) SPK,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'DO' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) DO,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'DELIVERY' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) DELIVERY,
				(SELECT COUNT(StatusProspek) FROM #dByTipe b WHERE b.LastProgress = 'LOST' AND b.EmployeeID = a.EmployeeID 
				AND b.ModelKendaraan = a.ModelKendaraan) LOST
			FROM #dByTipe a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.ModelKendaraan
		)#dSls

		--Kondisi SH = '' AND S = ''
		IF (@SalesHead = '' AND @Salesman = '')
		BEGIN
			SELECT * INTO #dt27_1 FROM(
				SELECT
					a.ModelKendaraan,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST 
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))   
				GROUP BY a.ModelKendaraan
			)#dt27_1

			SELECT ModelKendaraan TipeKendaraan, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt27_1 ORDER BY ModelKendaraan

			DROP TABLE #dt27_1
		END
		--Kondisi S = ''
		ELSE IF (@Salesman = '')
		BEGIN
			SELECT * INTO #dt27_2 FROM(
				SELECT
					a.ModelKendaraan,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)) -- >ID SH   
				GROUP BY a.ModelKendaraan
			)#dt27_2

			SELECT ModelKendaraan TipeKendaraan, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt27_2 ORDER BY ModelKendaraan

			DROP TABLE #dt27_2
		END
		ELSE
			SELECT * INTO #dt27_3 FROM(
				SELECT
					a.ModelKendaraan,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls a WHERE a.EmployeeID = @Salesman   
				GROUP BY a.ModelKendaraan
			)#dt27_3

			SELECT ModelKendaraan TipeKendaraan, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt27_3 ORDER BY ModelKendaraan

			DROP TABLE #dt27_3

		DROP TABLE #dSls
		DROP TABLE #dByTipe
	END
ELSE IF @Jns = '3'
	BEGIN
		SELECT * INTO #dByTipe2 FROM(
			SELECT b.EmployeeID, b.PerolehanData, LastProgress, StatusProspek FROM PmKdp b 
			WHERE b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode
			AND (b.InquiryDate BETWEEN @PeriodBegin AND @PeriodEnd)
		)#dByTipe2

		SELECT * INTO #dSls2 FROM (
			SELECT 
				a.EmployeeID,
				c.Position,
				c.TeamLeader,
				a.PerolehanData,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.StatusProspek <> '20' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) NEW,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'P' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) PROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'HP' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) HOTPROSPECT,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'SPK' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) SPK,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'DO' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) DO,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'DELIVERY' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) DELIVERY,
				(SELECT COUNT(StatusProspek) FROM #dByTipe2 b WHERE b.LastProgress = 'LOST' AND b.EmployeeID = a.EmployeeID 
				AND b.PerolehanData = a.PerolehanData) LOST
			FROM #dByTipe2 a, HrEmployee c WHERE a.EmployeeID = c.EmployeeID
			GROUP BY a.EmployeeID, c.Position, c.TeamLeader, a.PerolehanData
		)#dSls2

		--Kondisi SH = '' AND S = ''
		IF (@SalesHead = '' AND @Salesman = '')
		BEGIN
			SELECT * INTO #dt37_1 FROM(
				SELECT
					a.PerolehanData,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST 
				FROM #dSls2 a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @BranchManager))   
				GROUP BY a.PerolehanData
			)#dt37_1

			SELECT PerolehanData SumberData, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt37_1 ORDER BY PerolehanData

			DROP TABLE #dt37_1
		END
		--Kondisi S = ''
		ELSE IF (@Salesman = '')
		BEGIN
			SELECT * INTO #dt37_2 FROM(
				SELECT
					a.PerolehanData,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls2 a WHERE a.TeamLeader IN (SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader IN
				(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader = @SalesHead)) -- >ID SH   
				GROUP BY a.PerolehanData
			)#dt37_2

			SELECT PerolehanData SumberData, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt37_2 ORDER BY PerolehanData

			DROP TABLE #dt37_2
		END
		ELSE
			SELECT * INTO #dt37_3 FROM(
				SELECT
					a.PerolehanData,
					SUM(a.NEW) NEW,
					SUM(a.PROSPECT) PROSPECT,
					SUM(a.HOTPROSPECT) HOTPROSPECT,
					SUM(a.SPK) SPK,
					SUM(a.DO) DO,
					SUM(a.DELIVERY) DELIVERY,
					SUM(a.LOST) LOST
				FROM #dSls a WHERE a.EmployeeID = @Salesman   
				GROUP BY a.PerolehanData
			)#dt37_3

			SELECT PerolehanData SumberData, NEW, PROSPECT, HOTPROSPECT, SPK, DO, DELIVERY, LOST FROM #dt37_3 ORDER BY PerolehanData

			DROP TABLE #dt37_3

		DROP TABLE #dSls2
		DROP TABLE #dByTipe2
	END
END
GO
Create procedure [dbo].[uspfn_omSlsInvSlctFrTblInvAccSeq]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN  
SELECT a.PartNo
    , ISNULL(b.PartName,'') AS PartName
    , a.SupplySlipNo
    , a.Quantity
    , a.DPP
    , a.PPn
    , a.Total * a.Quantity as Total
FROM omTrSalesInvoiceAccsSeq a
LEFT JOIN spMstItemInfo b ON b.CompanyCode=a.CompanyCode
    AND b.PartNo=a.PartNo
WHERE a.CompanyCode = @CompanyCode
   AND a.BranchCode = @BranchCode
   AND a.InvoiceNo = @InvoiceNo
End
GO
create  procedure [dbo].[uspfn_spGetPickingDtls] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25)
as
SELECT 
 row_number () OVER (ORDER BY spTrnSPickingDtl.CreatedDate ASC) AS NoUrut,
 spTrnSPickingDtl.DocNo,
 spTrnSPickingDtl.PartNo,
 spTrnSPickingDtl.PartNoOriginal,
 ExPickingSlipNo,
 QtyOrder AS QtyOrder,
 spTrnSPickingDtl.QtySupply AS QtyPick,
 spTrnSPickingDtl.QtyPicked AS QtyPicked,
 spTrnSPickingDtl.QtyBill AS QtyBill,
 spTrnSOSupply.SupSeq,
 spTrnSOSupply.PTSeq
FROM spTrnSPickingDtl with (nolock, nowait)
LEFT JOIN spTrnSOSupply ON spTrnSOSupply.PickingSlipNo = spTrnSPickingDtl.PickingSlipNo AND 
spTrnSOSupply.CompanyCode= spTrnSPickingDtl.CompanyCode AND 
spTrnSOSupply.BranchCode = spTrnSPickingDtl.BranchCode AND 
spTrnSOSupply.DocNo = spTrnSPickingDtl.DocNo AND
spTrnSOSupply.PartNo = spTrnSPickingDtl.PartNo AND
spTrnSOSupply.PartNoOriginal = spTrnSPickingDtl.PartNoOriginal
WHERE spTrnSPickingDtl.CompanyCode= @CompanyCode AND 
spTrnSPickingDtl.BranchCode= @BranchCode AND 
spTrnSPickingDtl.PickingSlipNo = @PickingSlipNo
GO
CREATE procedure [dbo].[uspfn_omSlsPrlgkpnOutLkpMdlDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @SalesModelCode varchar(20) 
 )  
AS  
BEGIN       
 SELECT DISTINCT a.PerlengkapanCode, a.PerlengkapanName,b.Remark,b.Quantity
            FROM OmMstPerlengkapan a
            INNER JOIN omMstModelPerlengkapan b ON
	            a.CompanyCode = b.CompanyCode
	            AND a.BranchCode = b.BranchCode
	            AND a.PerlengkapanCode = b.PerlengkapanCode
	            AND a.Status = '1'
	            AND b.salesModelCode = @SalesModelCode
            INNER JOIN omTrInventQtyPerlengkapan c
	            ON a.companyCode = c.companyCode
	            AND a.branchCode = c.branchCode
	            AND a.perlengkapanCode = c.perlengkapanCode
            WHERE a.CompanyCode = @CompanyCode
	            AND a.BranchCode = @BranchCode
	            --AND c.Year = year(getdate())
	            --AND c.Month = month(getdate())
                AND c.QuantityEnding > 0
            ORDER BY a.PerlengkapanCode ASC            
END
GO
create procedure [dbo].[uspfn_SelectSalesModel]
	@CompanyCode varchar(17),
	@BranchCode varchar(17),
	@InquiryNumber varchar(17)
as

begin
	if @InquiryNumber is null or @InquiryNumber = ''
	begin
		select distinct a.SalesModelCode, a.SalesModelDesc
          from omMstModelYear a 
	     where a.CompanyCode = @CompanyCode AND a.Status IN ('1', '2')
		 order by a.SalesModelCode asc
	end
	else
	begin
		select a.SalesModelCode, a.SalesModelDesc 
          from omMstModel a
         inner join pmKDP b on a.CompanyCode = a.CompanyCode
	       and b.BranchCode = @BranchCode	                            
	       and a.GroupCode = b.TipeKendaraan
	       and a.Transmissiontype = b.Transmisi
	       and a.TypeCode = b.Variant
         where a.CompanyCode = @CompanyCode
           and b.InquiryNumber = @InquiryNumber
	end
end
GO
CREATE procedure [dbo].[sp_EdpPartNo_Pembelian]  (  
@CompanyCode varchar(10),
@BranchCode varchar(10),
@DocNo varchar(20)
--@BinningNo varchar(20),
--@Opt varchar(10)
)
 as 
 
--SELECT DISTINCT a.POSNo, a.PartNo, c.PartName, CASE when e.ReceiveQty is null then a.OnOrder else a.OrderQty-e.ReceiveQty end as ReminQty,
--d.PurchasePrice, a.DiscPct, 
--a.OnOrder as MaxReceived
--from spTrnPOrderBalance a 
--LEFT JOIN spTrnPBinnDtl b ON
--a.CompanyCode = b.CompanyCode
--and a.BranchCode = b.BranchCode
--and a.POSNo = b.DocNo
--AND a.PartNo = b.PartNo
--LEFT JOIN spMstItemInfo c ON
--a.CompanyCode = c.CompanyCode
--and a.PartNo = c.PartNo
--LEFT JOIN SpMstItemPrice d ON
--a.CompanyCode = d.CompanyCode
--and a.BranchCode = d.BranchCode
--AND a.PartNo = d.PartNo LEFT JOIN
--(SELECT PartNo, DocNo, sum(ReceivedQty) as ReceiveQty from spTrnPBinnDtl WHERE CompanyCode = @CompanyCode
--AND BranchCode = @BranchCode
--and DocNo = @DocNo GROUP BY PartNo, DocNo) e
--ON a.PartNo = e.PartNo
--AND a.POSNo = e.DocNo
--where
--a.CompanyCode = @CompanyCode
--AND a.BranchCode = @BranchCode
--and a.POSNo = @DocNo

SELECT c.PartNo, c.PartName, c.PurchasePrice, c.DiscPct, SUM(c.OnOrder) AS MaxReceived
FROM
(
    SELECT
     a.PartNo
    ,b.PartName 
    ,ISNULL((SELECT round(x.PurchasePrice + (x.PurchasePrice * (select (TaxPct/100) from gnMstTax
where TaxCode = (select ParaValue from gnMstLookUpDtl where CodeID = 'BINS' and SeqNo = 3))),0)
FROM SpMstItemPrice x where x.CompanyCode = a.CompanyCode AND
     x.BranchCode = a.BranchCode AND x.PartNo = a.PartNo),0) AS PurchasePrice
    ,a.OnOrder
    ,a.DiscPct
    FROM spTrnPOrderBalance a 
    INNER JOIN spMstItemInfo b
       ON b.CompanyCode = a.CompanyCode
      AND b.PartNo      = a.PartNo
      WHERE a.CompanyCode = @CompanyCode
      AND a.BranchCode  = @BranchCode
      AND a.PosNo       = @DocNo      
) c
GROUP BY c.PartNo, c.PartName, c.PurchasePrice, c.DiscPct
HAVING sum(c.OnOrder) > 0
GO
Create procedure [dbo].[uspfn_spGetUtlPORDDdtl]   
(  
--DECLARE
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @CustomerCode varchar(15),
 @OrderNo varchar(20) 

--set @CompanyCode   = 6006400001
--set @BranchCode  = 6006400000
--set @CustomerCode ='0000028'
--set @OrderNo ='SOC/14/100143'

)  
AS  

begin

declare @md bit
declare @dbMD varchar(25)
declare @CompanyMD varchar(25)

set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)

if(@md = 1)
BEGIN

SELECT  row_number () OVER (ORDER BY a.CreatedDate ASC) AS No,
	                b.DealerCode,
	                a.PartNo,
	                c.PartName,                    
	                a.Qty AS QtyOrder,
                    0.00 as QtySupply,
                    0.00 as QtyBO,
                    e.RetailPrice,
	                (e.RetailPrice * a.Qty) AS SalesAmt,
	                0.00 AS DiscPct,
                    0.00 AS NetSalesAmt
                FROM
	                spUtlPORDDDtl AS a with(nolock, nowait) , 
					spUtlPORDDHDR AS b with(nolock, nowait) ,
	                spMstItemInfo AS c with(nolock, nowait) ,
					gnMstCompanyMapping AS d with(nolock, nowait),
	                spMstItemPrice AS e with(nolock, nowait)
                WHERE
                    a.CompanyCode=b.CompanyCode AND
					a.BranchCode=b.BranchCode AND					
					a.OrderNo=b.OrderNo AND
	                a.CompanyCode = c.CompanyCode AND
	                a.PartNo = c.PartNo AND
	                a.CompanyCode = d.CompanyCode AND
	                a.BranchCode = d.BranchCode AND
					d.CompanyMD = e.CompanyCode AND
	                a.PartNo = e.PartNo AND
	                a.CompanyCode = @CompanyCode AND
	                a.BranchCode = @BranchCode AND
	                b.DealerCode = @CustomerCode AND
	                a.OrderNo = @OrderNo
                ORDER BY a.PartNo
END
ELSE
BEGIN

set @dbMD = (select DISTINCT dbmd from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)

--set @CompanyMD = (select DISTINCT CompanyMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
--select @CompanyMD
declare @query varchar(max)

if(isnull(cast(@dbMD as varchar(max)),'') = '')
BEGIN
SELECT  row_number () OVER (ORDER BY a.CreatedDate ASC) AS No,
	                b.DealerCode,
	                a.PartNo,
	                c.PartName,                    
	                a.Qty AS QtyOrder,
                    0.00 as QtySupply,
                    0.00 as QtyBO,
                    d.RetailPrice,
	                (d.RetailPrice * a.Qty) AS SalesAmt,
	                0.00 AS DiscPct,
                    0.00 AS NetSalesAmt
                FROM
	                spUtlPORDDDtl AS a with(nolock, nowait) , 
					spUtlPORDDHDR AS b with(nolock, nowait) ,
	                spMstItemInfo AS c with(nolock, nowait) ,
	                spMstItemPrice AS d with(nolock, nowait) 
                WHERE
                    a.CompanyCode=b.CompanyCode AND
					a.BranchCode=b.BranchCode AND					
					a.OrderNo=b.OrderNo AND
	                a.CompanyCode = c.CompanyCode AND
	                a.PartNo = c.PartNo AND
	                a.CompanyCode = d.CompanyCode AND
	                a.BranchCode = d.BranchCode AND
	                a.PartNo = d.PartNo AND
	                a.CompanyCode = @CompanyCode AND
	                a.BranchCode = @BranchCode AND
	                b.DealerCode = @CustomerCode AND
	                a.OrderNo = @OrderNo
                ORDER BY a.PartNo
END
ELSE
BEGIN

set @query = '
SELECT  row_number () OVER (ORDER BY a.CreatedDate ASC) AS No,
	                b.DealerCode,
	                a.PartNo,
	                c.PartName,                    
	                a.Qty AS QtyOrder,
                    0.00 as QtySupply,
                    0.00 as QtyBO,
                    e.RetailPrice,
	                (e.RetailPrice * a.Qty) AS SalesAmt,
	                0.00 AS DiscPct,
                    0.00 AS NetSalesAmt
                FROM
	                spUtlPORDDDtl AS a with(nolock, nowait) , 
					spUtlPORDDHDR AS b with(nolock, nowait) ,
	                spMstItemInfo AS c with(nolock, nowait) ,
					gnMstCompanyMapping AS d with(nolock, nowait),
	                '+@dbMD+'..spMstItemPrice AS e with(nolock, nowait)
                WHERE
                    a.CompanyCode=b.CompanyCode AND
					a.BranchCode=b.BranchCode AND					
					a.OrderNo=b.OrderNo AND
	                a.CompanyCode = c.CompanyCode AND
	                a.PartNo = c.PartNo AND
	                a.CompanyCode = d.CompanyCode AND
	                a.BranchCode = d.BranchCode AND
					d.CompanyMD = e.CompanyCode AND
	                a.PartNo = e.PartNo AND
	                a.CompanyCode = '+@CompanyCode+' AND
	                a.BranchCode = '+@BranchCode +'AND
	                b.DealerCode = '''+@CustomerCode +'''AND
	                a.OrderNo = '''+@OrderNo+'''
                ORDER BY a.PartNo'
EXEC(@query)
print(@query)
				
		END	 
	END
end
GO
create procedure [dbo].[uspfn_CsInqStnkExt]
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@StnkExt varchar(20),
	@DateFrom datetime,
	@DateTo datetime
as

--declare
--	@CompanyCode varchar(20),
--	@BranchCode varchar(20),
--	@DateFrom datetime,
--	@DateTo datetime

--select 
--	@CompanyCode = '6006406',
--	@BranchCode = '',
--	@DateFrom = '2014-01-01',
--	@DateTo = '2014-03-31'

select a.CompanyCode
     , b.BranchCode
     , a.CustomerCode
	 , c.CustomerName
	 , b.Chassis
	 , b.Engine
	 , b.SalesModelCode
	 , b.SalesModelYear
	 , b.ColourCode
	 , isnull(a.BpkbDate, b.BPKDate) BpkbDate
	 , isnull(a.StnkDate, b.BPKDate) StnkDate
	 , b.BPKDate
	 , b.IsLeasing
	 , b.LeasingCo
	 , b.Installment
	 , case isnull(b.isLeasing, 0) when 0 then 'Cash' else 'Leasing' end as LeasingDesc
	 , case isnull(b.isLeasing, 0) when 0 then '-' else b.LeasingName end as LeasingName
	 , case isnull(b.isLeasing, 0) when 0 then '-' else (convert(varchar, isnull(b.Installment, 0)) + ' Month') end as Tenor
	 , c.Address
	 , c.PhoneNo
	 , c.HpNo
	 , c.AddPhone1
	 , c.AddPhone2
	 , b.SalesmanCode 
	 , b.SalesmanName
	 , a.IsStnkExtend
	 , case a.IsStnkExtend when 1 then 'Ya' when 2 then 'Tidak' else 'Tidak' end as StnkExtend
	 , case a.ReqStnk when 1 then 'Ya' when 2 then 'Tidak' else 'Tidak' end as ReqStnkDesc
	 , isnull(a.StnkExpiredDate, dateadd(year, 1, isnull(a.StnkDate, b.BPKDate))) as StnkExpiredDate
	 , a.ReqKtp
     , a.ReqStnk
     , a.ReqBpkb
     , a.ReqSuratKuasa
     , a.Chassis
     , a.Comment
     , a.Additional
     , a.Status
	 , (case a.Status when 1 then 'Finish' else 'In Progress' end) as StatusInfo
	 , b.PoliceRegNo
	 , a.CreatedDate
  from CsStnkExt a
  join CsCustomerVehicleView b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.Chassis = a.Chassis
  join CsCustomerView c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
 where a.CompanyCode = @CompanyCode
   and b.BranchCode = (case when (isnull(@BranchCode, '') = '') then b.BranchCode else @BranchCode end)
   and convert(varchar, a.CreatedDate, 112) between @DateFrom and @DateTo
   and a.IsStnkExtend = (case when (isnull(@StnkExt, '') = '') then a.IsStnkExtend else @StnkExt end)
 order by a.CreatedDate
GO
CREATE Procedure [dbo].[GetWarrantyClaimLookup]
@CompanyCode varchar(25),
@BranchCode varchar(25),
@ProductType varchar(3)
as
select 
	            a.BatchNo, a.BatchDate, a.ReceiptNo, 
                case convert(varchar, a.ReceiptDate, 112) when '19000101' Then '' else replace(convert(varchar, a.ReceiptDate, 106), ' ', '-') end as ReceiptDate, 
                a.FPJNo, 
                case convert(varchar, a.FPJDate, 112) when '19000101' Then '' else replace(convert(varchar, a.FPJDate, 106), ' ', '-') end as FPJDate, 
                a.FPJGovNo, a.LotNo, a.ProcessSeq,
	            sum(b.TotalNoOfItem) TotalNoOfItem, 
                sum(b.TotalClaimAmt) TotalClaimAmt, 
                sum(b.OtherCompensationAmt) OtherCompensationAmt
            from 
	            SvTrnClaim b
	            left join SvTrnClaimBatch a on a.CompanyCode = b.CompanyCode and 
		            a.BranchCode = b.BranchCode and a.ProductType = b.ProductType and
		            a.BatchNo = b.BatchNo
            where 
	            a.CompanyCode = @CompanyCode
	            and a.BranchCode LIKE @BranchCode
	            and a.ProductType = @ProductType 
	            group By a.BatchNo, a.BatchDate, a.ReceiptNo, a.ReceiptDate, 
	            a.FPJNo, a.FPJDate, a.FPJGovNo, a.LotNo, a.ProcessSeq
            order by a.BatchNo Desc
GO
create proc [dbo].[uspfn_CsSaveCustVehicle]
	@CompanyCode varchar(20),
	@CustomerCode varchar(50),
	@Chassis varchar(50),
	@StnkDate varchar(25),
	@BpkbDate varchar(25),
	@UserID varchar(20)
as

if exists ( select 1 from CsCustomerVehicle
			 where CompanyCode = @CompanyCode 
			   and Chassis = @Chassis)
begin
	update CsCustomerVehicle
	   set CustomerCode = @CustomerCode
	     , StnkDate = @StnkDate
	     , BpkbDate = @BpkbDate
	     , UpdatedBy = @UserID
	     , UpdatedDate = getdate()
	 where CompanyCode = @CompanyCode
	   and Chassis = @Chassis    
end
else
begin
	insert into CsCustomerVehicle (CompanyCode, CustomerCode, Chassis, StnkDate, BpkbDate, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate)
	values (@CompanyCode, @CustomerCode, @Chassis, @StnkDate, @BpkbDate, @UserID, getdate(), @UserID, getdate())
end
GO
CREATE procedure [dbo].[sp_EdpPelangganBrowse] (  

@CompanyCode varchar(10),
@BranchCode varchar(10),
@ProfitCenter varchar(30))


as

SELECT a.CustomerCode, a.CustomerName,
       a.Address1+' '+a.Address2+' '+a.Address3+' '+a.Address4 as Address,
       c.LookUpValueName as ProfitCenter
  FROM gnMstCustomer a with(nolock, nowait)
    INNER JOIN gnMstCustomerProfitCenter b with(nolock, nowait) ON 
        a.CompanyCode = b.CompanyCode 
        AND b.BranchCode = @BranchCode
        AND b.ProfitCenterCode = @ProfitCenter
        AND b.CustomerCode = a.CustomerCode
        AND b.isBlackList=0
    INNER JOIN gnMstLookUpDtl c ON c.CompanyCode= a.CompanyCode
         AND c.LookupValue= b.ProfitCenterCode
         AND c.CodeID= 'PFCN'
 WHERE  a.CompanyCode=@CompanyCode
    AND a.status = 1   
    ORDER BY a.CustomerCode
GO
create proc [dbo].[uspfn_CsRptStnkExt]
@CompanyCode varchar(20),
@pDateFrom datetime,
@pDateTo datetime,
@pStatus char(1)
as
begin
select a.CompanyCode     
     , b.CustomerCode     
	 , e.BranchCode    
	 , BPKDate = convert(varchar(11),getdate(),106)      
     , STNKDate = convert(varchar(11),getdate(),106) 
  	 , h.LeasingCode
  	 --Finance Institution
  	 , h.Tenor
     , h.IsStnkExtend
  	 , h.CustomerCategory
  	 , h.ReqKtp
  	 , h.ReqStnk
  	 , h.ReqBpkb
     , e.SalesModelCode as CarType
     , e.ColourCode as Color    
     , d.PoliceRegNo     
     , (a.ChassisCode + convert(varchar, a.ChassisNo)) as Chassis     
     , (a.EngineCode + convert(varchar, a.EngineNo)) as Engine 
     , f.Salesman as SalesmanCode     
     , g.EmployeeName as SalesmanName    
     , c.CustomerName    
     , c.PhoneNo      
     , i.CompanyName CompanyName        
     , j.CompanyName BranchName     
	 , StnkExpiredDate =  Convert(varchar(11), h.StnkExpiredDate, 106)
     , (case h.Status when 0 then 'In Progress' else 'Finish' end) as StatusInfo  
     , left(c.Address1, 40) as Address
  	 , h.Comment
  	 , h.Additional
  	 , h.Status
  	 , convert(varchar(15),h.CreatedDate, 106) as CreatedDate  
  	 , convert(varchar(15),h.FinishDate, 106) as FinishDate
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
    on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c    
    on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode    
  left join svMstCustomerVehicle d    
    on d.CompanyCode = a.CompanyCode    
   and d.ChassisCode = a.ChassisCode    
   and d.ChassisNo = a.ChassisNo    
  left join omTrSalesSOVin e    
    on e.CompanyCode = a.CompanyCode    
   and e.ChassisCode = a.ChassisCode    
   and e.ChassisNo = a.ChassisNo    
  left join omTrSalesSO f    
    on f.CompanyCode = e.CompanyCode    
   and f.BranchCode = e.BranchCode    
   and f.SONo = e.SONo    
  left join gnMstEmployee g    
    on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode    
   and g.EmployeeID = f.Salesman    
  LEFT JOIN CsStnkExt h  
  on h.CompanyCode = a.CompanyCode  
  and h.Chassis = a.ChassisCode + convert(varchar(20), a.ChassisNo)
  left join gnMstOrganizationHdr i        
  on i.CompanyCode = f.CompanyCode        
  left join gnMstCoProfile j        
  on j.CompanyCode = f.CompanyCode        
  and j.BranchCode = f.BranchCode   
	where 1=1
		and j.companycode like @companycode
   and h.Status like case when @pStatus = 0 then @pStatus else '%' end
   and h.Status not like case when @pStatus = 0 then '' else '0' end
end
GO
CREATE procedure [dbo].[uspfn_spMasterItemBrowse]
@CompanyCode varchar(15), 
@BranchCode varchar(15),
@TPGO varchar(15), 
@ProductType varchar(15),
@SEARCH varchar(50) = ''
AS
IF @SEARCH<>''
SELECT 
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = Items.CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,ItemInfo.SupplierCode
,Supplier.SupplierName
,Items.TypeOfGoods 
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = Items.CompanyCode) AS TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode

WHERE Items.CompanyCode = @CompanyCode
  AND Items.BranchCode  = @BranchCode    
  AND Items.TypeOfGoods = @TPGO
  AND Items.ProductType = @ProductType
  AND (
	Items.PartNo LIKE @SEARCH + '%' OR
	ItemInfo.PartName  LIKE @SEARCH + '%'
  )

ELSE

SELECT 
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = Items.CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,ItemInfo.SupplierCode
,Supplier.SupplierName
,Items.TypeOfGoods 
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = Items.CompanyCode) AS TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode

WHERE Items.CompanyCode = @CompanyCode
  AND Items.BranchCode  = @BranchCode    
  AND Items.TypeOfGoods = @TPGO
  AND Items.ProductType = @ProductType
GO
CREATE procedure [dbo].[uspfn_omSlsReturnBrowse]
(    
 @CompanyCode varchar(15),    
 @BranchCode varchar(15)   
)    
AS    
BEGIN    
--exec uspfn_omSlsReturnBrowse 6006410,600641001  
SELECT 
		a.CompanyCode ,
		a.BranchCode ,
		a.ReturnNo ,
		a.ReturnDate ,
		a.ReferenceNo ,
		a.ReferenceDate ,
		a.InvoiceNo ,
		a.InvoiceDate ,
		a.CustomerCode ,
		a.FakturPajakNo ,
		a.FakturPajakDate ,
		a.WareHouseCode ,
		a.Remark ,
		a.Status ,
		a.WareHouseCode,
		b.CustomerName, 
		b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address,
		(
			SELECT 
					c.RefferenceDesc1
			FROM 
					omMstRefference c
			WHERE 
					a.WareHouseCode = c.RefferenceCode
		)  AS WarehouseName, 
		CASE
			WHEN a.Status = '0' THEN 'OPEN'
			WHEN a.Status = '1' THEN 'PRINTED'
			WHEN a.Status = '2' THEN 'APPROVED'
			WHEN a.Status = '3' THEN 'DELETED'
			WHEN a.Status = '5' THEN 'POSTED'
			WHEN a.Status = '9' THEN 'FINISHED'
		END  AS StatusDsc
		, CASE ISNULL(c.SalesType, 0) WHEN 0 THEN 'Wholesales' ELSE 'Direct' END AS SalesTypeDsc
		,c.SalesType
FROM 
		omTrSalesReturn a
		LEFT JOIN gnMstCustomer b ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
		LEFT JOIN gnMstCustomerProfitCenter c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = '100'
WHERE 
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
order by 
		a.ReturnNo desc
End
GO
--uspfn_CsRptTDayCall '%','9-9-2010','9-9-2013','4'
create proc [dbo].[uspfn_CsRptTDayCall]
@CompanyCode varchar(20),
@pDateFrom datetime,
@pDateTo datetime,
@pStatus char(1)
as
begin
select a.CompanyCode 
     , a.CustomerCode
     , b.CustomerName
     , b.Address1
     , b.PhoneNo
     , BPKDate = convert(varchar(11),getdate(),106)
	 , STNKDate = convert(varchar(11),getdate(),106)
     , c.SalesModelCode as CarType
     , c.ColourCode as Color
     , f.PoliceRegNo 
     , c.EngineCode + convert(varchar, c.EngineNo) as Engine 
     , a.Chassis 
     , d.Salesman as SalesmanCode
     , e.EmployeeName as SalesmanName
     , a.IsDeliveredA 
     , a.IsDeliveredB 
     , a.IsDeliveredC 
     , a.IsDeliveredD 
     , a.IsDeliveredE 
     , a.IsDeliveredF 
     , a.Comment 
     , a.Additional 
     , a.Status 
     , (case a.Status when 0 then 'In Progress' else 'Finish' end) as StatusInfo
     , a.CreatedDate as InputDate
     , b.CustomerName
     , left(b.Address1, 40) as Address
     , c.BranchCode
     , (select top 1 BranchName from gnMstOrganizationDtl where branchcode = c.BranchCode) BranchName
     , c.CompanyCode
     , (select top 1 CompanyName from gnMstOrganizationHdr where companycode = c.CompanyCode) CompanyName
     , a.FinishDate
  from CsTDayCall a
  left join gnMstCustomer b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join omTrSalesSOVin c
    on c.CompanyCode = a.CompanyCode
   and (c.ChassisCode + convert(varchar, c.ChassisNo)) = a.Chassis
  left join omTrSalesSO d
    on d.CompanyCode = c.CompanyCode
   and d.BranchCode = c.BranchCode
   and d.SONo = c.SONo
  left join gnMstEmployee e
    on e.CompanyCode = d.CompanyCode
   and e.BranchCode = d.BranchCode
   and e.EmployeeID = d.Salesman
  left join svMstCustomerVehicle f
    on f.CompanyCode = a.CompanyCode
   and f.ChassisCode + convert(varchar, f.ChassisNo) = a.Chassis
  where 1=1
   and a.Status like case when @pStatus = 0 then @pStatus else '%' end
   and a.Status not like case when @pStatus = 0 then '' else '0' end
	--and convert(varchar, @pDateFrom, 112) < left(convert(varchar, BPKDate, 112), 6) + convert(varchar, convert(int, right(convert(varchar, BPKDate, 112), 2)) + 3)
	--and convert(varchar, @pDateTo, 112) > left(convert(varchar, BPKDate, 112), 6) + convert(varchar, convert(int, right(convert(varchar, BPKDate, 112), 2)) + 3)

end
GO
CREATE procedure [dbo].[uspfn_SalesModelCode4PO] 
 @DB varchar(50),
 @CompanyCode varchar(50),
 @BranchCode varchar(50),
 @SupplierCode varchar(50)

 as

 declare @sqlstr varchar(max)

 set @sqlstr = 'select a.SalesModelCode, b.SalesModelDesc 
from omMstPricelistBuy a
inner join  '+@DB+'.dbo.omMstModel b
	on a.SalesModelCode = b.SalesModelCode
where a.CompanyCode = '''+ @CompanyCode +'''
 and a.BranchCode = '''+ @BranchCode +'''
 and a.SupplierCode = '''+ @SupplierCode +'''
 and b.Status = ''1'''

 --select @sqlstr
 exec (@sqlstr)
GO
CREATE PROCEDURE [dbo].[uspfn_spMasterPartLookup]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@TypeOfGoods varchar(15),
@ProductType varchar(15),
@SEARCH varchar(50) = ''
AS
IF (@SEARCH='')

	SELECT 
	 Items.PartNo
	,Items.ProductType
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	   WHERE CodeID = 'PRCT' AND 
			 LookUpValue = Items.PartCategory AND 
			 CompanyCode = @CompanyCode) AS CategoryName
	,Items.PartCategory
	,ItemInfo.PartName
	,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
	,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
	,ItemInfo.OrderUnit
	,ItemInfo.SupplierCode
	,Supplier.SupplierName
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	  WHERE CodeID = 'TPGO' AND 
			LookUpValue = Items.TypeOfGoods AND 
			CompanyCode = @CompanyCode) AS TypeOfGoods
	FROM SpMstItems Items
	INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
							 AND Items.PartNo = ItemInfo.PartNo
	LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
							 AND Supplier.SupplierCode = ItemInfo.SupplierCode
	WHERE Items.CompanyCode = @CompanyCode
	  AND Items.BranchCode  = @BranchCode    
	  AND Items.TypeOfGoods = @TypeOfGoods
	  AND Items.ProductType = @ProductType

ELSE

	SELECT 
	 Items.PartNo
	,Items.ProductType
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	   WHERE CodeID = 'PRCT' AND 
			 LookUpValue = Items.PartCategory AND 
			 CompanyCode = @CompanyCode) AS CategoryName
	,Items.PartCategory
	,ItemInfo.PartName
	,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
	,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
	,ItemInfo.OrderUnit
	,ItemInfo.SupplierCode
	,Supplier.SupplierName
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	  WHERE CodeID = 'TPGO' AND 
			LookUpValue = Items.TypeOfGoods AND 
			CompanyCode = @CompanyCode) AS TypeOfGoods
	FROM SpMstItems Items
	INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
							 AND Items.PartNo = ItemInfo.PartNo
	LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
							 AND Supplier.SupplierCode = ItemInfo.SupplierCode
	WHERE Items.CompanyCode = @CompanyCode
	  AND Items.BranchCode  = @BranchCode    
	  AND Items.TypeOfGoods = @TypeOfGoods
	  AND Items.ProductType = @ProductType
	  AND (Items.PartNo LIKE @SEARCH + '%' OR ItemInfo.PartName  LIKE @SEARCH + '%')
GO
CREATE procedure [dbo].[uspfn_SvInqFpjStdData]    
		 @CompanyCode nvarchar(20),    
		 @BranchCode nvarchar(20),    
		 @ProductType nvarchar(2),
		 @FPJNo nvarchar(20),
		 @InvoiceNoStart nvarchar(20),
		 @InvoiceNoEnd nvarchar(20)
		
    
as    

--set @CompanyCode = '6006406'
--set @BranchCode = '6006402'
--set @ProductType = '4W'
--set @FPJNo = 'FPS/13/002075'
--set @InvoiceNoStart = 'INF/13/000472'
--set @InvoiceNoEnd = 'INF/13/000472'
    
declare	 @InvoiceStatus char(1)
set @InvoiceStatus = 0
if(@FPJNo != '')
Set @InvoiceStatus = 1

select	row_number() over(order by inv.InvoiceNo) RowNum
                        , convert(bit, 1) IsSelected
						, inv.CompanyCode
						, inv.BranchCode
                        , inv.ProductType
						, inv.InvoiceNo
		                , inv.InvoiceDate
		                , inv.JobOrderNo
		                , inv.JobOrderDate
		                , inv.TotalDPPAmt
		                , inv.TotalPPHAmt + TotalPPNAmt as TotalPpnAmt
		                , inv.TotalSrvAmt
		                , inv.JobType
		                , inv.PoliceRegNo
		                , inv.BasicModel
		                , inv.ChassisCode
		                , inv.ChassisNo
		                , inv.EngineCode
		                , inv.EngineNo
                        , inv.TOPCode
                        , inv.TOPDays
                        , inv.DueDate
                        , inv.FPJNo
                        , inv.FPJDate
                        , inv.CustomerCodeBill
                        , inv.Odometer
                        , inv.IsPkp
                        , inv.CustomerCode
		                , inv.CustomerCode + ' - ' + cust.CustomerName Pelanggan
		                , inv.CustomerCodeBill + ' - ' + custBill.CustomerName Pembayar
                        , inv.DueDate
                from	svTrnInvoice inv with(nolock, nowait)
		                left join gnMstCustomer cust with(nolock, nowait) on inv.CompanyCode = cust.CompanyCode
			                and inv.CustomerCode = cust.CustomerCode
		                left join gnMstCustomer custBill with(nolock, nowait) on inv.CompanyCode = custBill.CompanyCode
			                and inv.CustomerCodeBill = custBill.CustomerCode
                where	inv.CompanyCode = @CompanyCode 
		                and inv.BranchCode = @BranchCode 
		                and inv.ProductType = @ProductType
		                and inv.InvoiceNo between @InvoiceNoStart and @InvoiceNoEnd
		                and inv.CustomerCodeBill = isnull((select top 1 CustomerCodeBill from svTrnInvoice where InvoiceNo = @InvoiceNoStart),'')
                       and (CASE WHEN inv.InvoiceStatus = 0 THEN @InvoiceStatus ELSE inv.InvoiceStatus END) = inv.InvoiceStatus
                        and inv.FPJNo = @FPJNo
                        and (inv.InvoiceNo like 'INW%' or inv.InvoiceNo like 'INF%')
GO
create PROCEDURE [dbo].[uspfn_spTrnIAdjustDtl]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@AdjustmentNo varchar(25) 
 
AS
  
  
    SELECT 
        row_number () OVER (ORDER BY spTrnIAdjustDtl.CreatedDate) AS NoUrut,
        spTrnIAdjustDtl.PartNo,
        spMstItemInfo.PartName,
        spTrnIAdjustDtl.WarehouseCode,	
        spTrnIAdjustDtl.LocationCode,
        gnMstLookUpDtl_1.LookUpValueName AS AdjustmentCode,
	    gnMstLookUpDtl_2.LookUpValueName AS WarehouseName,
        spTrnIAdjustDtl.QtyAdjustment,
        gnMstLookUpDtl.LookUpValueName AS Reason
    FROM 
        spTrnIAdjustDtl
        INNER JOIN spTrnIAdjustHdr ON spTrnIAdjustHdr.AdjustmentNo = spTrnIAdjustDtl.AdjustmentNo 
            AND spTrnIAdjustHdr.CompanyCode =  spTrnIAdjustDtl.CompanyCode
            AND spTrnIAdjustHdr.BranchCode =  spTrnIAdjustDtl.BranchCode
        INNER JOIN spMstItemInfo ON spMstItemInfo.PartNo = spTrnIAdjustDtl.PartNo
            AND spMstItemInfo.CompanyCode = spTrnIAdjustDtl.CompanyCode
        INNER JOIN gnMstLookUpDtl ON gnMstLookUpDtl.LookUpValue = spTrnIAdjustDtl.ReasonCode
            AND gnMstLookUpDtl.CompanyCode = spTrnIAdjustDtl.CompanyCode
        INNER JOIN gnMstLookUpDtl AS gnMstLookUpDtl_1 ON gnMstLookUpDtl_1.LookUpValue = spTrnIAdjustDtl.AdjustmentCode
            AND gnMstLookUpDtl_1.CompanyCode = spTrnIAdjustDtl.CompanyCode
	    INNER JOIN gnMstLookUpDtl AS gnMstLookUpDtl_2 ON gnMstLookUpDtl_2.LookUpValue = spTrnIAdjustDtl.WarehouseCode
            AND gnMstLookUpDtl_2.CompanyCode = spTrnIAdjustDtl.CompanyCode
    WHERE 
        spTrnIAdjustDtl.CompanyCode = @CompanyCode
        AND spTrnIAdjustDtl.BranchCode = @BranchCode
        AND gnMstLookUpDtl.CodeId='RSAD'
	    AND gnMstLookUpDtl_2.CodeId='WRCD'
        AND gnMstLookUpDtl_1.CodeID = 'ADJS'
        AND spTrnIAdjustDtl.AdjustmentNo =  @AdjustmentNo
    ORDER BY spTrnIAdjustDtl.CreatedDate
GO
CREATE procedure [dbo].[uspfn_omSlsPrlgkpnOutBrwDocTransfer]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15)
 )  
AS  
BEGIN  
SELECT 
a.TransferOutNo, 
a.TransferOutDate, 
a.ReferenceNo, 
a.ReferenceDate, 
a.BranchCodeFrom, 
b.BranchName AS BranchNameFrom, 
a.BranchCodeTo, 
c.BranchName AS BranchNameTo, 
a.WareHouseCodeFrom, 
d.RefferenceDesc1 AS WareHouseNameFrom, 
a.WareHouseCodeTo, 
e.RefferenceDesc1 AS WareHouseNameTo, 
a.ReturnDate, 
a.Remark, 
a.Status,
CASE a.Status 
	WHEN '0' THEN 'OPEN' 
	WHEN '1' THEN 'PRINTED' 
	WHEN '2' THEN 'APPROVED' 
	WHEN '3' THEN 'DELETED' 
	WHEN '5' THEN 'TRANSFERED' 
	WHEN '9' THEN 'FINISHED' 
	ELSE '' 
END 
AS StatusDsc
FROM  OmTrInventTransferOut a 
LEFT JOIN gnMstOrganizationDtl b
ON    a.CompanyCode = b.CompanyCode 
AND   a.BranchCodeFrom = b.BranchCode 
LEFT JOIN gnMstOrganizationDtl c
ON    a.CompanyCode = c.CompanyCode 
AND   a.BranchCodeTo = c.BranchCode 
LEFT JOIN omMstRefference d
ON    a.CompanyCode = d.CompanyCode 
AND   a.WareHouseCodeFrom = d.RefferenceCode 
AND   d.RefferenceType = 'WARE' 
LEFT JOIN omMstRefference e
ON    e.CompanyCode = a.CompanyCode 
AND   e.RefferenceCode = a.WareHouseCodeTo 
AND   e.RefferenceType = 'WARE' 
WHERE a.CompanyCode = @CompanyCode
AND   a.BranchCode = @BranchCode
ORDER BY a.TransferOutNo DESC,a.TransferOutDate DESC        
END
GO
create procedure [dbo].[sp_columns]
(
    @table_name         nvarchar(384),
    @table_owner        nvarchar(384) = null,
    @table_qualifier    sysname = null,
    @column_name        nvarchar(384) = null,
    @ODBCVer            int = 2
)
as
    declare @full_table_name    nvarchar(769) -- 384 + 1 + 384
    declare @table_id           int
    declare @fUsePattern        bit

    select @fUsePattern = 1

    if (@ODBCVer is null) or (@ODBCVer <> 3)
        select @ODBCVer = 2

    if @table_qualifier is not null
    begin
        if db_name() <> @table_qualifier
        begin   -- If qualifier doesn't match current database
            raiserror (15250, -1,-1)
            return
        end
    end

    -- "ALL" is represented by NULL value.
    if @table_name = '%'
        select @table_name = null
    if @table_owner = '%'
        select @table_owner = null
    if @table_qualifier = '%'
        select @table_qualifier = null
    if @column_name = '%'
        select @column_name = null

    -- Empty string means nothing, so use invalid identifier.
    -- A quoted space will never match any object name.
    if @table_owner = ''
        select @table_owner = ' '

    select @full_table_name = isnull(quotename(@table_owner), '') + '.' + isnull(quotename(@table_name), '')
    select @table_id = object_id(@full_table_name)

    if (@fUsePattern = 1) -- Does the user want it?
    begin
        if ((isnull(charindex('%', @full_table_name),0) = 0) and
            (isnull(charindex('_', @full_table_name),0) = 0) and
            (isnull(charindex('[', @table_name),0) = 0) and
            (isnull(charindex('[', @table_owner),0) = 0) and
            (isnull(charindex('%', @column_name),0) = 0) and
            (isnull(charindex('_', @column_name),0) = 0) and
            (@table_id <> 0))
        begin
            select @fUsePattern = 0 -- not a single wild char, so go the fast way.
        end
    end

    if @fUsePattern = 0
    begin
        /* -- Debug output, do not remove it.
        print '*************'
        print 'No pattern matching.'
        print @fUsePattern
        print isnull(convert(sysname, @table_id), '@table_id = null')
        print isnull(@full_table_name, '@full_table_name = null')
        print isnull(@table_owner, '@table_owner = null')
        print isnull(@table_name, '@table_name = null')
        print isnull(@column_name, '@column_name = null')
        print '*************'
        */
        select
            TABLE_QUALIFIER             = s_cov.TABLE_QUALIFIER,
            TABLE_OWNER                 = s_cov.TABLE_OWNER,
            TABLE_NAME                  = s_cov.TABLE_NAME,
            COLUMN_NAME                 = s_cov.COLUMN_NAME,
            DATA_TYPE                   = s_cov.DATA_TYPE_28,
            TYPE_NAME                   = s_cov.TYPE_NAME_28,
            "PRECISION"                 = s_cov.PRECISION_28,
            "LENGTH"                    = s_cov.LENGTH_28,
            SCALE                       = s_cov.SCALE_90,
            RADIX                       = s_cov.RADIX,
            NULLABLE                    = s_cov.NULLABLE,
            REMARKS                     = s_cov.REMARKS,
            COLUMN_DEF                  = s_cov.COLUMN_DEF,
            SQL_DATA_TYPE               = s_cov.SQL_DATA_TYPE_28,
            SQL_DATETIME_SUB            = s_cov.SQL_DATETIME_SUB_90,
            CHAR_OCTET_LENGTH           = s_cov.CHAR_OCTET_LENGTH_28,
            ORDINAL_POSITION            = s_cov.ORDINAL_POSITION,
            IS_NULLABLE                 = s_cov.IS_NULLABLE,
            SS_DATA_TYPE                = s_cov.SS_DATA_TYPE

        from
            sys.spt_columns_odbc_view s_cov

        where
            s_cov.object_id = @table_id -- (2nd) (@table_name is null or o.name like @table_name)
            -- (2nd) and (@table_owner is null or schema_name(o.schema_id) like @table_owner)
            and (@column_name is null or s_cov.COLUMN_NAME = @column_name) -- (2nd)             and (@column_name is NULL or c.name like @column_name)
            and s_cov.ODBCVER = @ODBCVer
            and s_cov.OBJECT_TYPE <> 'TT'
            and ( s_cov.SS_IS_SPARSE = 0 OR objectproperty ( s_cov.OBJECT_ID, 'tablehascolumnset' ) = 0 )
        order by 17
    end
    else
    begin
        /* -- Debug output, do not remove it.
        print '*************'
        print 'THERE IS pattern matching!'
        print @fUsePattern
        print isnull(convert(sysname, @table_id), '@table_id = null')
        print isnull(@full_table_name, '@full_table_name = null')
        print isnull(@table_owner, '@table_owner = null')
        print isnull(@table_name, '@table_name = null')
        print isnull(@column_name, '@column_name = null')
        print '*************'
    */
        select
            TABLE_QUALIFIER             = s_cov.TABLE_QUALIFIER,
            TABLE_OWNER                 = s_cov.TABLE_OWNER,
            TABLE_NAME                  = s_cov.TABLE_NAME,
            COLUMN_NAME                 = s_cov.COLUMN_NAME,
            DATA_TYPE                   = s_cov.DATA_TYPE_28,
            TYPE_NAME                   = s_cov.TYPE_NAME_28,
            "PRECISION"                 = s_cov.PRECISION_28,
            "LENGTH"                    = s_cov.LENGTH_28,
            SCALE                       = s_cov.SCALE_90,
            RADIX                       = s_cov.RADIX,
            NULLABLE                    = s_cov.NULLABLE,
            REMARKS                     = s_cov.REMARKS,
            COLUMN_DEF                  = s_cov.COLUMN_DEF,
            SQL_DATA_TYPE               = s_cov.SQL_DATA_TYPE_28,
            SQL_DATETIME_SUB            = s_cov.SQL_DATETIME_SUB_90,
            CHAR_OCTET_LENGTH           = s_cov.CHAR_OCTET_LENGTH_28,
            ORDINAL_POSITION            = s_cov.ORDINAL_POSITION,
            IS_NULLABLE                 = s_cov.IS_NULLABLE,
            SS_DATA_TYPE                = s_cov.SS_DATA_TYPE

        from
            sys.spt_columns_odbc_view s_cov

        where
            s_cov.ODBCVER = @ODBCVer and
            s_cov.OBJECT_TYPE <> 'TT' and
            (@table_name is null or s_cov.TABLE_NAME like @table_name) and
            (@table_owner is null or schema_name(s_cov.SCHEMA_ID) like @table_owner) and
            (@column_name is null or s_cov.COLUMN_NAME like @column_name) and
            ( s_cov.SS_IS_SPARSE = 0 OR objectproperty ( s_cov.OBJECT_ID, 'tablehascolumnset' ) = 0 )

        order by 2, 3, 17
    end
GO
-- =============================================
-- Author:		RIJAL AL
-- Create date: <Create Date,,>
-- Description:	INQUIRY OUT STANDING PROSPECT
-- =============================================
-- [[usprpt_PmRpInqOutStanding_NewPrint]] '6043401', '604340101', '2010-11-01 14:33:00.000', '', 'ALL', 'ALL', 'ALL', 'ALL'

CREATE procedure [dbo].[usprpt_PmRpInqOutStanding_NewPrint] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@Period				DATETIME,
	@COO				VARCHAR(15),
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@SalesCoordinator	VARCHAR(15),
	@Salesman			VARCHAR(15)
	
)
AS 
BEGIN
SET NOCOUNT ON;

	EXEC usprpt_PmRpInqOutStanding_NewBySalesman @CompanyCode, @BranchCode, @Period, @COO, @BranchManager, @SalesHead, @SalesCoordinator, @Salesman

	EXEC usprpt_PmRpInqOutStanding_NewByType @CompanyCode, @BranchCode, @Period, @COO, @BranchManager, @SalesHead, @SalesCoordinator, @Salesman

	EXEC usprpt_PmRpInqOutStanding_NewByData @CompanyCode, @BranchCode, @Period, @COO, @BranchManager, @SalesHead, @SalesCoordinator, @Salesman

END
GO
create procedure [dbo].[uspfn_omSlsPrlgkpnOutBrwDocBPK]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @ProfitCenterCode varchar(15)
 )  
AS  
BEGIN  
SELECT Distinct a.BPKNo, a.CustomerCode ,c.CustomerName,a.CustomerCode  + ' - ' + c.CustomerName as Customer,
                c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as Address 
                    FROM omTrSalesBPK a, gnMstCustomerProfitCenter b, gnMstCustomer c
                 WHERE a.CompanyCode = b.CompanyCode
                       AND a.CompanyCode = @CompanyCode
                       AND a.BranchCode = @BranchCode
                       AND b.ProfitCenterCode = @ProfitCenterCode                    
					   AND a.CompanyCode = c.CompanyCode
					   AND a.CustomerCode = c.CustomerCode
                       AND a.Status = '2'                      
                ORDER BY a.BPKNo ASC                
END
GO
CREATE procedure [dbo].[uspfn_sfEmpMutation_SdmsWeb]
	@CompanyCode  varchar(20) = '%',
	@BranchCode   varchar(20) = '%',
	@pDate        char(8)
as

--declare @CompanyCode varchar(20), @BranchCode varchar(20), @pDate char(8)
--select @CompanyCode = '%', @BranchCode = '%', @pDate = '20130320'
--uspfn_sfEmpMutation_SdmsWeb default, default, '20130301'
--select * from SfHistEmplMutation
--select * from SyncEmployee

;with x as (
select a.CompanyCode, a.BranchCode, b.CompanyName, a.BranchName from gnMstOrganizationDtl a
	left join gnmstorganizationhdr b on a.CompanyCode = b.CompanyCode
	)
select * into #rebuildCompany from x
order by x.CompanyCode, x.BranchCode

select CompanyCode, CompanyName, BranchCode, BranchName  
     , EmpBeg = isnull((  
        select count(*) from sfHistEmplMutation  
         where CompanyCode = a.CompanyCode  
           and BranchCode = a.BranchCode  
           and DeptCode = 'SALES'  
           and PosCode = 'S'  
           and MutaType = 'IN'  
           and left(convert(varchar, MutaDate, 112), 6) < left(@pDate, 6)  
           and exists (select 1 from SyncEmployee where sfHistEmplMutation.CompanyCode = CompanyCode and sfHistEmplMutation.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)
		   and isnull(sfHistEmplMutation.IsDeleted, 0) = 0
       ), 0)  
       - isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and m.MutaType = 'OUT'  
           and left(convert(varchar, m.MutaDate, 112), 6) < left(@pDate, 6)  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
		   and isnull(m.IsDeleted, 0) = 0 
       ), 0)  
     , EmpJoin = isnull((  
        select count(*) from sfHistEmplMutation  
         where CompanyCode = a.CompanyCode  
           and BranchCode = a.BranchCode  
           and DeptCode = 'SALES'  
           and PosCode = 'S'  
           and left(convert(varchar, MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, MutaDate, 112) <= @pDate  
           and MutaType = 'IN'  
           and MutaCode = 'JOIN'  
           and exists (select 1 from SyncEmployee where sfHistEmplMutation.CompanyCode = CompanyCode and sfHistEmplMutation.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
		   and isnull(sfHistEmplMutation.IsDeleted, 0) = 0  
       ), 0)  
     , EmpMutaIn = isnull((  
        select count(*) from sfHistEmplMutation  
         where CompanyCode = a.CompanyCode  
           and BranchCode = a.BranchCode  
           and DeptCode = 'SALES'  
           and PosCode = 'S'  
           and left(convert(varchar, MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, MutaDate, 112) <= @pDate  
           and MutaType = 'IN'  
           and MutaCode != 'JOIN'  
           and exists (select 1 from SyncEmployee where sfHistEmplMutation.CompanyCode = CompanyCode and sfHistEmplMutation.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)
		   and isnull(sfHistEmplMutation.IsDeleted, 0) = 0		   
       ), 0)  
     , EmpResign = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and left(convert(varchar, m.MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and m.MutaType = 'OUT'  
           and m.MutaCode = 'RESIGN'  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
		   and isnull(m.IsDeleted, 0) = 0	
       ), 0)  
     , EmpMutaOut = isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and left(convert(varchar, m.MutaDate, 112), 6) = left(@pDate, 6)  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and m.MutaType = 'OUT'  
           and m.MutaCode != 'RESIGN'  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
		   and isnull(m.IsDeleted, 0) = 0
       ), 0)  
     , EmpAll = isnull((  
        select count(*) from sfHistEmplMutation  
         where CompanyCode = a.CompanyCode  
           and BranchCode = a.BranchCode  
           and DeptCode = 'SALES'  
           and PosCode = 'S'  
           and MutaType = 'IN'  
           and convert(varchar, MutaDate, 112) <= @pDate  
           and exists (select 1 from SyncEmployee where sfHistEmplMutation.CompanyCode = CompanyCode and sfHistEmplMutation.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
		   and isnull(sfHistEmplMutation.IsDeleted, 0) = 0
       ), 0)  
       - isnull((  
        select count(*) from sfHistEmplMutation m  
         where m.CompanyCode = a.CompanyCode  
           and m.BranchCode = a.BranchCode  
           and m.DeptCode = 'SALES'  
           and m.PosCode = 'S'  
           and m.MutaType = 'OUT'  
           and convert(varchar, m.MutaDate, 112) <= @pDate  
           and exists (select 1 from SyncEmployee where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and isnull(SalesID, '') != '' and isnull(IsDeleted, 0) = 0)  
           and exists (select 1 from sfHistEmplMutation where m.CompanyCode = CompanyCode and m.EmployeeID = EmployeeID and MutaCode = 'JOIN')  
		   and isnull(m.IsDeleted, 0) = 0
       ), 0)         
  from #rebuildCompany a
 where CompanyCode like @CompanyCode  
   and BranchCode like @BranchCode  
 order by CompanyName, BranchName
 
select isnull((select top 1 CompanyName from GnMstOrganizationHdr where CompanyCode = @CompanyCode), 'All Dealer') headercompanyname, replace(convert(varchar,convert(datetime,@pDate),106),' ','-') as FilterDate
GO
CREATE procedure [dbo].[uspfn_spSelectPickingSlipAfterLmp] 
--declare 
@CompanyCode varchar(15), @BranchCode varchar(15), 
		@ProductType varchar(4), @JobOrderNo varchar(25)
as
--set @CompanyCode = '6159401000'
--set @BranchCode = '6159401001'
--set @ProductType = '4W'
--set @JobOrderNo = 'SPK/15/002385'
SELECT * INTO #t1 FROM (
	SELECT
		DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
		e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
		d.PickedBy
	FROM
		svTrnService a
	LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
		AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
	LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
		AND c.DocNo = b.SupplySlipNo
	LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
		AND d.PickingSlipNo = c.ExPickingSlipNo
	LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
		AND e.PickingSlipNo = d.PickingSlipNo
	LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
		AND f.LookUpValue = c.TransType
	LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
		AND g.PickingSlipNo = d.PickingSlipNo
	WHERE 
		a.CompanyCode     = @CompanyCode
		AND a.BranchCode  = @BranchCode
		AND a.ProductType = @ProductType
		AND a.jobOrderNo  = @JobOrderNo
		--AND b.SupplySlipNo <> ''
		--AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			  -- AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
		--AND d.Status <= 2
)#t1
SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
DROP TABLE #t1
GO
CREATE procedure [dbo].[uspfn_omSlsPrlgkpnOutDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @PerlengkapanNo varchar(15),
 @SalesModelCode varchar(15)
 )  
AS  
BEGIN  
	SELECT 
		a.PerlengkapanNo, 
		b.PerlengkapanName, 
		a.SalesModelCode,  
		a.PerlengkapanCode,  
		a.QuantityStd,  
		a.Quantity,  
		a.Remark        	
	FROM OmTrSalesPerlengkapanOutDetail a
	LEFT JOIN OmMstPerlengkapan b
	ON a.CompanyCode = b.CompanyCode
	AND a.Branchcode = b.BranchCode
	AND a.PerlengkapanCode = b.PerlengkapanCode
	where a.CompanyCode = @CompanyCode
	and a.BranchCode = @BranchCode
	and a.PerlengkapanNo = @PerlengkapanNo and a.SalesModelCode = @SalesModelCode
	ORDER BY a.PerlengkapanCode ASC         
END
GO
CREATE procedure [dbo].[sp_EdpDocNoBrowse] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@ProductType varchar(10),
@SupplierCode varchar(30))


as

SELECT 
 a.POSNo
,a.PosDate
,a.SupplierCode
FROM SpTrnPOrderBalance a with(nolock, nowait)
INNER JOIN SpTrnPPOSHdr b ON b.POSNo = a.POSNo AND b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode
WHERE a.OnOrder > 0
  AND a.CompanyCode=@CompanyCode
  AND a.BranchCode=@BranchCode
  AND a.TypeOfGoods=@TypeOfGoods
  AND b.ProductType=@ProductType
  AND a.SupplierCode=@SupplierCode
  --and b.Status = 2
GROUP BY  a.POSNo, a.PosDate, a.SupplierCode 
ORDER BY  a.POSNo DESC
GO
CREATE PROCEDURE [dbo].[uspfn_CheckPostingStatus]
	@ModuleCode varchar(5)
AS
BEGIN
	declare @checklasttrans datetime, @retValue int, @procStatus int

	IF @ModuleCode='SPSRV'
		SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM [svSDMovement] with(nolock,nowait) order by docdate desc
	else
		SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM [omSDMovement] with(nolock,nowait) order by docdate desc

	IF (@checklasttrans IS NULL)
		set @retValue=1
	ELSE
	BEGIN
		IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
			set @retValue=0
		ELSE
			set @retValue=1
	END
	SELECT @retValue [SUCCESS], (select top 1 replace(ParamDescription, char(13),'</BR>') from sysParameter where ParamId='POSTING_STATUS') INFO

END
GO
CREATE procedure [dbo].[sp_EdpBpsNoBrowse] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10),
@ProductType varchar(10),
@CustomerCode varchar(30))


as

SELECT 
 a.BPSFNo
,a.BPSFDate
,a.PickingSlipNo
,a.PickingSlipDate
FROM spTrnSBPSFHdr a
WHERE a.CompanyCode=@CompanyCode
  AND a.BranchCode=@BranchCode
  AND a.CustomerCode=@CustomerCode
  AND a.TypeOfGoods=@TypeOfGoods
GROUP BY  a.BPSFNo, a.BPSFDate, a.PickingSlipNo, a.PickingSlipDate
ORDER BY  a.BPSFNo DESC
GO
create procedure [dbo].[uspfn_SvMsVehicle] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , ChassisCode
     , ChassisNo
     , EngineCode
     , EngineNo
     , PoliceRegNo
     , BasicModel
     , TransmissionType
     , TechnicalModelCode
     , ServiceBookNo
     , ColourCode
     , DealerCode
     , FakturPolisiDate
     , CustomerCode
     , ClubCode
     , ClubNo
     , ClubDateStart
     , ClubDateFinish
     , ClubSince
     , IsClubStatus
     , ContractNo
     , IsContractStatus
     , RemainderDate
     , RemainderDescription
     , FirstServiceDate
     , LastJobType
     , LastServiceDate
     , LastServiceOdometer
     , IsActive
     , ProductionYear
     , CreatedBy
     , CreatedDate
     , LastupdateBy
     , LastupdateDate
     , ContactName
     , ContactAddress
     , ContactPhone
  from svMstCustomerVehicle
 where LastupdateDate is not null
   and LastupdateDate > @LastUpdateDate
 order by LastupdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_SvMsVehicle @LastUpdateDate='2013-01-01', @Segment=1
GO
create procedure [dbo].[uspfn_CustomerBirthdaysOutstanding]
	@CompanyCode nvarchar(20),
	@BranchCode varchar(20)
as

--set @CompanyCode = '6006406'

declare @CurrDate datetime, @Param1 as varchar(20)
declare @t_rem as table
(
	RemCode varchar(20),
	RemDate datetime,
	RemValue int
)

set @CurrDate = getdate()

-- REM3DAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REM3DAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REM3DAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBDAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBDAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBDAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMHOLIDAYS
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMHOLIDAYS'), '0')
insert into @t_rem (RemCode, RemDate) values('REMHOLIDAYS', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMSTNKEXT
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMSTNKEXT'), '0')
insert into @t_rem (RemCode, RemDate) values('REMSTNKEXT', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBPKB
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBPKB'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBPKB', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')
   
declare @CurrentMonth tinyint;
declare @PreviousMonth tinyint;
declare @NextMonth tinyint;
declare @CurrentDay tinyint;
declare @DateComparison datetime;
  
set @DateComparison = (select RemDate from @t_rem where RemCode = 'REMBDAYSCALL');
set @CurrentMonth = datepart(month, @DateComparison);
set @NextMonth = @CurrentMonth + 1;
set @PreviousMonth = @CurrentMonth - 1;

select a.CustomerCode
     , b.CustomerName
	 , b.BirthDate as CustomerBirthDate  
	 , b.HPNo as CustomerTelephone
  from CsCustomerVehicleView a
 inner join CsCustomerView b 
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join CsCustBirthday c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
 where a.CompanyCode like @CompanyCode
   and a.BranchCode like @BranchCode
   and isnull(c.CustomerCode, '') = ''
   and datepart(month, b.BirthDate) >= @PreviousMonth
   and datepart(month, b.BirthDate) <= @CurrentMonth
GO
-- POSTING TRANSACTION MULTI COMPANY - DOCUMENT NUMBER
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------------------------
-- declare @DocNo varchar(15)  
-- execute [usprpt_PostingMultiCompany4DocNo] '6006400001','6006400131','SBTSBY','INV',@DocNo output
-- -------------------------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompany4DocNo]
	@Company	varchar(15),
	@Branch		varchar(15),
	@DBName		varchar(50),
	@DocID		varchar(15),
	@DocNo		varchar(15) output
AS	

--BEGIN TRANSACTION
--BEGIN TRY

BEGIN
 -- Document Number sequence
  --declare @Company		varchar(15)  = '6006400001'
  --declare @Branch			varchar(15)  = '6006400131'
  --declare @DBName			varchar(50)  = 'SBTSBY'
  --declare @DocID			varchar(15)  = 'INV'
  --declare @DocNo			varchar(15)
	declare @DocPrefix		varchar(15)
	declare @DocYear		integer
	declare @DocSeq			integer
	declare @sqlString		nvarchar(max)

	set @sqlString = N'select @DocPrefix=DocumentPrefix, @DocYear=DocumentYear, @DocSeq=DocumentSequence from '+@DBName+'..gnMstDocument ' +
						'where CompanyCode='''+@Company+''' and BranchCode='''+@Branch+''' and DocumentType='''+@DocID+''''

		execute sp_executesql @sqlString, 
			N'@DocPrefix varchar(15) output, @DocYear integer output, @DocSeq integer output', @DocPrefix output, @DocYear output, @DocSeq output

	set @DocSeq = @DocSeq + 1
	set @sqlString = 'update ' +@DBName+ '..gnMstDocument' +
						' set DocumentSequence = ' +convert(varchar,@DocSeq)+ 
						' where CompanyCode=''' +@Company+ ''' and BranchCode=''' +@Branch+ ''' and DocumentType='''+@DocID+''''
		execute sp_executesql @sqlString 

	set @DocNo = @DocPrefix + '/' + right(convert(varchar,@DocYear),2) + '/' + 
					replicate('0',6-len(convert(varchar,@DocSeq))) + convert(varchar,@DocSeq)
/*
END TRY

BEGIN CATCH
    select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		   ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		rollback transaction
	select '0' [STATUS], 'Posting fail !!!' [INFO]
	return
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting Done !!!' [INFO]
		--rollback transaction
		commit transaction
	end
*/
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryStokKendaraan] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @year varchar(10),
 @Month varchar(10),
 @WarehouseCode varchar(100),
 @WarehouseCodeTo Varchar(100),
 @SalesModelCode Varchar(100),
 @SalesModelCodeTo Varchar(100),
 @SalesModelYear Varchar(100),
 @SalesModelYearTo Varchar(100),
 @ColourCode Varchar(100),
 @ColourCodeTo Varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT CONVERT(Varchar,a.Year) as Year
     , CASE WHEN a.Month = 1 THEN ''Januari''
            WHEN a.Month = 2 THEN ''Februari''
            WHEN a.Month = 3 THEN ''Maret'' 
            WHEN a.Month = 4 THEN ''April'' 
            WHEN a.Month = 5 THEN ''Mei'' 
            WHEN a.Month = 6 THEN ''Juni''
            WHEN a.Month = 7 THEN ''Juli'' 
            WHEN a.Month = 8 THEN ''Agustus'' 
            WHEN a.Month = 9 THEN ''September'' 
            WHEN a.Month = 10 THEN ''Oktober''
            WHEN a.Month = 11 THEN ''November'' 
            WHEN a.Month = 12 THEN ''Desember'' 
        END AS Month
     , (select top 1 RefferenceDesc1
          from omMstRefference
         where CompanyCode = a.CompanyCode
           and RefferenceType = ''WARE''
           and RefferenceCode = a.WarehouseCode
         ) as WareHouseName
     , a.SalesModelCode
     , b.SalesModelDesc
     , CONVERT(Varchar,a.SalesModelYear) as ModelYear
     , (c.RefferenceCode + '' - '' + c.RefferenceDesc1) as ColourName
     , a.BeginningAV
     , a.QtyIn
     , a.Alocation
     , a.QtyOut
     , a.EndingAV
  FROM OmTrInventQtyVehicle a 
 INNER JOIN omMstModel b
    ON a.CompanyCode = b.CompanyCode
   AND a.SalesModelCode = b.SalesModelCode 
 INNER JOIN omMstRefference c
    ON a.CompanyCode = c.CompanyCode  
   AND a.ColourCode = c.RefferenceCode                                       
WHERE 1 = 1
'

if len(rtrim(@year)) > 0
   set @pQuery = @pQuery + ' and a.Year = ''' + rtrim(@year) + ''''

if len(rtrim(@Month)) > 0
   set @pQuery = @pQuery + ' and a.Month = ''' + rtrim(@Month) + ''''

if len(rtrim(@WarehouseCode)) > 0
   set @pQuery = @pQuery + ' and a.WarehouseCode between ''' + rtrim(@WarehouseCode) + '''' + ' and ' + '''' + rtrim(@WarehouseCodeTo) + ''''

if len(rtrim(@SalesModelCode)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCode between ''' + rtrim(@SalesModelCode) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeTo) + ''''

if len(rtrim(@SalesModelYear)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYear) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@ColourCode)) > 0
   set @pQuery = @pQuery + ' and a.ColourCode between ''' + rtrim(@ColourCode) + '''' + ' and ' + '''' + rtrim(@ColourCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.Year, a.Month, a.SalesModelCode '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
Create procedure [dbo].[uspfn_SvInqFpjHQGet]
	@CompanyCode nvarchar(20),
	@ProductType nvarchar(20),
	@BranchCodeStart nvarchar(20),
	@BranchCodeEnd nvarchar(20),
	@FPJNo nvarchar(20)

as
begin

select	row_number() over(order by inv.BranchCode,inv.InvoiceDate,inv.InvoiceNo) RowNum
        , convert(bit, 1) IsSelected
        , inv.BranchCode
        , inv.InvoiceNo
        , inv.InvoiceDate
        , inv.JobOrderNo
        , inv.JobOrderDate
        , isnull(inv.TotalDPPAmt,0) TotalDPPAmt
        , isnull(inv.TotalPPHAmt,0) + isnull(TotalPPNAmt,0) as TotalPpnAmt
        , isnull(inv.TotalSrvAmt,0) TotalSrvAmt
        , inv.JobType
        , inv.PoliceRegNo
        , inv.BasicModel
        , inv.ChassisCode
        , inv.ChassisNo
        , inv.EngineCode
        , inv.EngineNo
        , inv.TOPCode
        , inv.TOPDays
        , inv.DueDate
        , inv.FPJNo
        , inv.FPJDate
        , inv.CustomerCodeBill
        , inv.Odometer
        , inv.IsPkp
        , inv.CustomerCode
        , inv.CustomerCode + ' - ' + cust.CustomerName Pelanggan
        , inv.CustomerCodeBill + ' - ' + custBill.CustomerName Pembayar
        , inv.DueDate
from	svTrnInvoice inv with(nolock, nowait)
        left join gnMstCustomer cust with(nolock, nowait) on inv.CompanyCode = cust.CompanyCode
            and inv.CustomerCode = cust.CustomerCode
        left join gnMstCustomer custBill with(nolock, nowait) on inv.CompanyCode = custBill.CompanyCode
            and inv.CustomerCodeBill = custBill.CustomerCode
where	inv.CompanyCode = @CompanyCode 
        and inv.BranchCode between @BranchCodeStart and @BranchCodeEnd
        and inv.ProductType = @ProductType                     
        and inv.CustomerCodeBill = isnull((select top 1 CustomerCodeBill from svTrnInvoice where InvoiceNo = inv.InvoiceNo),'')
        and inv.Islocked = 1
        and inv.FPJNo = @FPJNo
        and (inv.InvoiceNo like 'INW%' or inv.InvoiceNo like 'INF%')

end
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usprpt_SpCheckType]
	@Type varchar(50)
AS
BEGIN
	declare @Query varchar(MAX)
	set @Query='
	select LookUpValue,LookUpValueName  
	from GnMstLookUpDtl 
	where CodeID=''GTGO'' and LookUpValue in ('+@Type+')'

	print(@Query)
	exec(@Query)
END
GO
CREATE procedure [dbo].[uspfn_GetLatestRecordByPartNo] @CompanyCode varchar(15), @BranchCode varchar(15), @PartNo  varchar(25)
as
SELECT
   CompanyCode,BranchCode,PartNo,UpdateDate,
   ISNULL(RetailPrice,0) AS RetailPrice, 
   ISNULL(RetailPriceInclTax,0) AS RetailPriceInclTax, 
   ISNULL(PurchasePrice,0) AS PurchasePrice,
   ISNULL(OldRetailPrice,0) AS OldRetailPrice, 
   ISNULL(OldPurchasePrice,0) AS OldPurchasePrice,
   ISNULL(Discount,0) AS Discount, ISNULL(OldDiscount,0) AS OldDiscount,
   ISNULL(CostPrice,0) AS CostPrice, ISNULL(OldCostPirce,0) AS OldCostPirce,
   CreatedBy,CreatedDate
FROM
	spHstItemPrice
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PartNo = @PartNo
	AND UpdateDate = (	SELECT
							MAX(UpdateDate)
						FROM
							spHstItemPrice
						WHERE
							CompanyCode = @CompanyCode
							AND BranchCode = @BranchCode
							AND PartNo = @PartNo)
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryStokPerlengkapan] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @Status varchar(10),
 @Year varchar(10),
 @Month varchar(10),
 @PerlengkapanCode varchar(100),
 @PerlengkapanCodeTo Varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT CONVERT(Varchar,a.Year) as Year, 
CASE WHEN a.Month = 1 THEN ''Januari'' 
	WHEN a.Month = 2 THEN ''Februari''
	WHEN a.Month = 3 THEN ''Maret'' 
	WHEN a.Month = 4 THEN ''April'' 
	WHEN a.Month = 5 THEN ''Mei'' 
	WHEN a.Month = 6 THEN ''Juni''
	WHEN a.Month = 7 THEN ''Juli'' 
	WHEN a.Month = 8 THEN ''Agustus'' 
	WHEN a.Month = 9 THEN ''September'' 
	WHEN a.Month = 10 THEN ''Oktober''
	WHEN a.Month = 11 THEN ''November'' 
	WHEN a.Month = 12 THEN ''Desember'' 
END AS Month
, a.PerlengkapanCode, b.PerlengkapanName, a.QuantityBeginning, a.QuantityIn, 
a.QuantityOut, a.QuantityEnding, CASE WHEN b.Status = 0 THEN ''Not Active'' WHEN b.Status = 1 THEN ''Active'' END AS Status 
FROM OMTrInventQtyPerlengkapan a 
INNER JOIN OMMstPerlengkapan b
ON a.CompanyCode = b.CompanyCode 
AND a.BranchCode = b.BranchCode
AND a.PerlengkapanCode = b.PerlengkapanCode

WHERE 1 = 1
'
if len(rtrim(@Status)) > 0
   set @pQuery = @pQuery + ' and b.Status = ''' + rtrim(@Status) + ''''

if len(rtrim(@Year)) > 0
   set @pQuery = @pQuery + ' and a.Year = ''' + rtrim(@year) + ''''

if len(rtrim(@Month)) > 0
   set @pQuery = @pQuery + ' and a.Month = ''' + rtrim(@Month) + ''''

if len(rtrim(@PerlengkapanCode)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanCode between ''' + rtrim(@PerlengkapanCode) + '''' + ' and ' + '''' + rtrim(@PerlengkapanCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.Year, a.Month, a.PerlengkapanCode '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
-- =========================================================================
-- Author:		Seandy A.K, Revision By: Osen Kusnadi (Convert to PivotGrid)
-- Create date: 19-7-2012, Revision On 2014-07-01
-- Description:	Sparepart Analysis Report
-- Query Activation : usprpt_SpRpSum024_Rev01 '','','','2012','1'
-- exec usprpt_SpRpSum024_Rev01 @Area=N'',@CompanyCode=N'', 
-- @BranchCode=N'',@Year=N'2013',@S1=N'''5'',''0'',''1'',''2'',''3'',''4'''
-- =========================================================================
CREATE procedure [dbo].[usprpt_SpRpSum024_Rev01]
	@Area			varchar(100),
	@CompanyCode	varchar(15),
	@BranchCode		varchar(15),
	@Year			varchar(4),
	@S1				varchar(50)
AS
BEGIN

declare @Query varchar(MAX), @Query1 varchar(MAX), @Query2 varchar(MAX)
declare @code varchar(15), @name varchar(250), @nCount INT, @nNum INT, @sDate varchar(10)

CREATE TABLE #TmpFilterEnum(
	[display]	[varchar](120),
	[value]		[varchar](32),
	[iconCls]	[varchar](22),
	[type]		[varchar](12) 
)

CREATE TABLE #TmpSalesSummary(
	id int,
	AccountID int,
	Account varchar(32),
	BranchCode varchar(15),
	BranchName varchar(64),
	[JAN] [decimal](18, 2) NOT NULL DEFAULT(0),
	[FEB] [decimal](18, 2) NOT NULL DEFAULT(0),
	[MAR] [decimal](18, 2) NOT NULL DEFAULT(0),
	[APR] [decimal](18, 2) NOT NULL DEFAULT(0),
	[MAY] [decimal](18, 2) NOT NULL DEFAULT(0),
	[JUN] [decimal](18, 2) NOT NULL DEFAULT(0),
	[JUL] [decimal](18, 2) NOT NULL DEFAULT(0),
	[AUG] [decimal](18, 2) NOT NULL DEFAULT(0),
	[SEP] [decimal](18, 2) NOT NULL DEFAULT(0),
	[OCT] [decimal](18, 2) NOT NULL DEFAULT(0),
	[NOV] [decimal](18, 2) NOT NULL DEFAULT(0),
	[DEC] [decimal](18, 2) NOT NULL DEFAULT(0)
)

CREATE TABLE #RawData(
	PeriodYear int,
	PeriodMonth int,
	BranchCode varchar(15),
	[N01] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N02] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N03] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N04] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N05] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N06] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N07] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N08] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N09] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N10] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N11] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N12] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N13] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N14] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N15] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N16] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N17] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N18] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N19] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N20] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N21] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N22] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N23] [decimal](18, 2) NOT NULL DEFAULT(0),
	[N24] [decimal](18, 2) NOT NULL DEFAULT(0)
)

-- STARTING TO PREPARE METADATA --

set @Query = '
	select distinct 
	a.BranchCode,
	b.OutletAbbreviation, ''active'',''outlet''
	from spHstSparePartAnalysis a
	left join GnMstDealerMapping c on a.CompanyCode = c.DealerCode
	left join GnMStDealerOutletMapping b on a.CompanyCode = b.DealerCode
		and a.BranchCode = b.OutletCode
	where a.PeriodYear = ''' + @Year + ''' and convert(varchar,a.TypeOfGoods) in (' + @S1 + ') '

	if @Area <> '' 
	begin
		IF (@Area = 'JABODETABEK' or @Area = 'CABANG')
			set @Query = @Query + ' AND c.Area IN (''JABODETABEK'',''CABANG'') '
		else
			set @Query = @Query + ' AND c.Area like ''' + @Area + ''' '
	end

	if @CompanyCode <> ''
	BEGIN
		set @Query = @Query + ' AND a.CompanyCode like ''' + @CompanyCode + ''' '
	END

	IF @BranchCode <> ''
	BEGIN
		set @Query = @Query + ' AND a.BranchCode like ''' + @BranchCode + ''' '
	END
									
	set @Query = @Query + ' order by a.BranchCode '

	select @Query1 = 'INSERT INTO #TmpFilterEnum ([value],display,iconCls,[type])  ' + @Query , @nNum=0

	print(@Query1)
	exec(@Query1)


WHILE @nNum < 12
BEGIN
	SET @nNum=@nNum+1
	SET @sDate = @Year + '-' +  RIGHT('0' + convert(varchar,@nnum),2) + '-01'
	SET @name = upper(datename(mm,@sDate))
	SET @code = SUBSTRING(@name,1,3)
	INSERT INTO #TmpFilterEnum ([value],display,iconCls,[type]) values ( @code,@name + ', ' + @Year,'active','period')	
END
-- PREPARING METADATA DONE

-- PREPARING ACCOUNT LIST --
DECLARE @AccountList table(id INT,name VARCHAR(32))
INSERT INTO @AccountList VALUES 
(1,'Penjualan Kotor'),(2,'Penjualan Bersih'),(3,'Penjualan ke 3S + 2S'),(4,'Penjualan ke Parts Shop'),
(5,'Penjualan ke Lain-lain'),(6,'Harga Pokok'),(7,'Penerimaan Pembelian'),(8,'Nilai Stock'),(9,'ITO'),
(10,'ITO (AVG)'),(11,'Ratio'),(12,'Ration Suzuki'),(13,'Demand Line'),(14,'Demand Qty'),
(15,'Demand Nilai'),(16,'Supply Line'),(17,'Supply Qty'),(18,'Supply Nilai'),(19,'Service Ratio Line'),
(20,'Service Ratio Qty'),(21,'Service Ratio Nilai'),(22,'Stock MC4'),(23,'Stock MC5'),(24,'Slow Moving')
-- ACCOUNT LIST DONE --

-- PREPARING PIVOT GRID --
select @Query1 = 'DECLARE BRANCH_CR CURSOR FOR ' + @Query
print(@Query1)
exec(@Query1)

DECLARE ACCOUNT_CR CURSOR FOR SELECT ID,NAME FROM @AccountList
DECLARE @gBranchCode varchar(15), @gBranchName varchar(108), @iconCls varchar(7), @gType varchar(17)

SET @nNum = 0

OPEN ACCOUNT_CR
FETCH NEXT FROM ACCOUNT_CR
INTO @code, @name

WHILE @@FETCH_STATUS = 0
BEGIN

	OPEN BRANCH_CR
	FETCH NEXT FROM BRANCH_CR
	INTO  @gBranchCode,@gBranchName,@iconCls,@gType 

	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		SET @nNum = @nNum + 1

		INSERT INTO #TmpSalesSummary(id,AccountID,Account,BranchCode,BranchName)
		VALUES (@nNum,@code, @name,@gBranchCode,@gBranchName)

		FETCH NEXT FROM BRANCH_CR 
		INTO @gBranchCode,@gBranchName,@iconCls,@gType 
	END

	CLOSE BRANCH_CR

	FETCH NEXT FROM ACCOUNT_CR 
	INTO @code, @name
END

CLOSE ACCOUNT_CR
DEALLOCATE ACCOUNT_CR
DEALLOCATE BRANCH_CR

-- PIVOT GRID TEMPLATE DONE --

-- STARTING TO PREPARE DATA SUMMARY
set @Query = ' select * into #Summary from(
select c.GroupNo
		, c.Area
		, a.CompanyCode
		, c.DealerAbbreviation
		, a.BranchCode
		, b.OutletAbbreviation
		, a.PeriodYear
		, a.PeriodMonth
		, JumlahJaringan
		, SUM(isnull(PenjualanKotor,0)) PenjualanKotor
		, SUM(isnull(PenjualanBersih,0)) PenjualanBersih
		, isnull((select SUM(isnull(PenjualanBersih,0))
			 from spHstSparePartAnalysisDtl
			where CompanyCode = a.CompanyCode
			  and BranchCode = a.BranchCode
			  and PeriodYear = a.PeriodYear
			  and PeriodMonth = a.PeriodMonth
			  and TypeOfGoods = a.TypeOfGoods
			  and CustomerCategory in (''00'',''01'')),0) Penjualan3S2S
		, isnull((select SUM(isnull(PenjualanBersih,0))
			 from spHstSparePartAnalysisDtl
			where CompanyCode = a.CompanyCode
			  and BranchCode = a.BranchCode
			  and PeriodYear = a.PeriodYear
			  and PeriodMonth = a.PeriodMonth
			  and TypeOfGoods = a.TypeOfGoods
			  and CustomerCategory in (''15'')),0) PenjualanPartShop
		, isnull((select SUM(isnull(PenjualanBersih,0))
			 from spHstSparePartAnalysisDtl
			where CompanyCode = a.CompanyCode
			  and BranchCode = a.BranchCode
			  and PeriodYear = a.PeriodYear
			  and PeriodMonth = a.PeriodMonth
			  and TypeOfGoods = a.TypeOfGoods
			  and CustomerCategory not in (''00'',''01'',''15'')),0) PenjualanOthers
		, SUM(isnull(HargaPokok,0)) HargaPokok
		, SUM(isnull(PenerimaanPembelian,0))PenerimaanPembelian
		, SUM(isnull(NilaiStock,0)) NilaiStock
		, (select SUM(isnull(e.NilaiStock,0))
				 from spHstSparepartAnalysis e
				where e.CompanyCode = a.CompanyCode
				  and e.BranchCode = a.BranchCode
				  and e.PeriodYear = a.PeriodYear
				  and e.PeriodMonth = a.PeriodMonth
				  '
set @Query = @Query + ' and convert(varchar,e.TypeOfGoods) in (' + @S1 + ')
				Group by CompanyCode, BranchCode,PeriodYear,PeriodMonth
				  ) test
		, case when SUM(isnull(HargaPokok,0)) = 0 
				then 0
				else (SUM(isnull(NilaiStock,0)) / case when SUM(isnull(HargaPokok,0)) = 0 then 1 else SUM(isnull(HargaPokok,0)) end) 
				end ITO
		, isnull((select case when SUM(isnull(d.HargaPokok,0)) = 0 
				then 0
				else (SUM(isnull(a.NilaiStock,0))
					/ (SUM(isnull(d.HargaPokok,0)) / (select distinct Count(d.PeriodYear)
					from spHstSparepartAnalysis e
								where e.CompanyCode = a.CompanyCode
								  and e.BranchCode = a.BranchCode
								  and convert(int,convert(varchar,e.PeriodYear) + RIGHT(''0'' + convert(varchar,e.PeriodMonth),2))
										between convert(int,convert(varchar, case when a.PeriodMonth < 7 
																	  then  
																			(a.PeriodYear - 1)
																	  else 
																			a.PeriodYear
																	  end) +
												RIGHT(''0'' + convert(varchar, case when a.PeriodMonth < 7
																	  then 
																		(12 + (a.PeriodMonth - 5))
																	  else
																		(a.PeriodMonth - 5)
																	  end), 2))
										and convert(int,convert(varchar,a.PeriodYear) + RIGHT(''0'' + convert(varchar,a.PeriodMonth),2))
										'
					set @Query = @Query + ' and TypeOfGoods in (' + @S1 + ') Group by CompanyCode,BranchCode)
					 ))
				end
			from spHstSparepartAnalysis d
			where d.CompanyCode = a.CompanyCode
			  and d.BranchCode = a.BranchCode
			  and convert(int,convert(varchar,d.PeriodYear) + RIGHT(''0'' + convert(varchar,d.PeriodMonth),2))
										between convert(int,convert(varchar, case when a.PeriodMonth < 7 
																	  then  
																			(a.PeriodYear - 1)
																	  else 
																			a.PeriodYear
																	  end) +
												RIGHT(''0'' + convert(varchar, case when a.PeriodMonth < 7
																	  then 
																		(12 + (a.PeriodMonth - 5))
																	  else
																		(a.PeriodMonth - 5)
																	  end), 2))
										and convert(int,convert(varchar,a.PeriodYear) + RIGHT(''0'' + convert(varchar,a.PeriodMonth),2))
										'
					set @Query = @Query + ' and d.TypeOfGoods in (' + @S1 + ') Group by CompanyCode,BranchCode
		  ),0) AVGITO
		, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(HargaPokok,0)) = 0 then 1 else SUM(HargaPokok) end * 100 Ratio
		, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(PenjualanBersih,0)) = 0 then 1 else SUM(PenjualanBersih) end * 100 RatioSuzuki
		, SUM(isnull(DemandLine,0)) DemandLine
		, SUM(isnull(DemandQuantity,0)) DemandQuantity
		, SUM(isnull(DemandNilai,0)) DemandNilai
		, SUM(isnull(SupplyLine,0)) SupplyLine
		, SUM(isnull(SupplyQuantity,0)) SupplyQuantity
		, SUM(isnull(SupplyNilai,0)) SupplyNilai
		, (SUM(isnull(SupplyLine,0)) / case when SUM(isnull(DemandLine,0)) = 0 then 1 else SUM(isnull(DemandLine,0)) end) * 100 ServiceRatioLine
		, (SUM(isnull(SupplyQuantity,0)) / case when SUM(isnull(DemandQuantity,0)) = 0 then 1 else SUM(isnull(DemandQuantity,0)) end) * 100 ServiceRatioQuantity
		, (SUM(isnull(SupplyNilai,0)) / case when SUM(isnull(DemandNilai,0)) = 0 then 1 else SUM(isnull(DemandNilai,0)) end) * 100 ServiceRatioNilai
		, SUM(isnull(DataStockMC4,0)) DataStockMC4
		, SUM(isnull(DataStockMC5,0)) DataStockMC5
		, (SUM(isnull(SlowMoving,0)) / case when SUM(isnull(NilaiStock,0)) = 0 then 1 else SUM(isnull(NilaiStock,0)) end) * 100 SlowMoving
	from spHstSparePartAnalysis a
	left join GnMstDealerMapping c on a.CompanyCode = c.DealerCode
	left join GnMStDealerOutletMapping b on a.CompanyCode = b.DealerCode
		and a.BranchCode = b.OutletCode
	where (c.Area like '
	set @Query = @Query + Case when @Area <> '' 
								then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
										then '''JABODETABEK'''
										else @Area end
								else '''%%''' end
	set @Query = @Query + ' or c.Area like ' + Case when @Area <> '' 
													then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
															then '''CABANG'''
															else @Area end
													else '''%%''' end
set @Query = @Query + ') and a.CompanyCode like ' 
set @Query = @Query + case when @CompanyCode <> '' then '''' + @CompanyCode + '''' else '''%%''' end
set @Query = @Query + ' and a.BranchCode like '
set @Query = @Query + case when @BranchCode <> '' then '''' + @BranchCode + '''' else '''%%''' end
set @Query = @Query + ' and a.PeriodYear = ''' + @Year + ''''
set @Query = @Query + ' and convert(varchar,a.TypeOfGoods) in (' + @S1 + ')'
set @Query = @Query + ' group by c.GroupNo
		, c.Area
		, a.CompanyCode
		, c.DealerAbbreviation
		, a.BranchCode
		, b.OutletAbbreviation
		, a.PeriodYear
		, a.PeriodMonth
		, a.JumlahJaringan
		, a.TypeOfGoods
)#Summary

select * into #PivotData from (
select PeriodYear
	, PeriodMonth
	, BranchCode
	, SUM(PenjualanKotor) PenjualanKotor
	, SUM(PenjualanBersih) PenjualanBersih
	, SUM(Penjualan3S2S) Penjualan3S2S
	, SUM(PenjualanPartShop) PenjualanPartShop
	, SUM(PenjualanOthers) PenjualanOthers
	, SUM(HargaPokok) HargaPokok
	, SUM(PenerimaanPembelian) PenerimaanPembelian
	, SUM(NilaiStock) NilaiStock
	, SUM(ITO) ITO
	, isnull((case when SUM(isnull(HargaPokok,0)) = 0 
				then 0
				else (SUM(isnull(NilaiStock,0))/ (SUM(isnull(HargaPokok,0)) / 6))
				end
		  ),0) AVGITO
	, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(HargaPokok,0)) = 0 then 1 else SUM(HargaPokok) end * 100 Ratio
	, SUM(isnull(PenjualanBersih,0) - isnull(HargaPokok,0)) / case when SUM(isnull(PenjualanBersih,0)) = 0 then 1 else SUM(PenjualanBersih) end * 100 RatioSuzuki
	, SUM(DemandLine) DemandLine
	, SUM(DemandQuantity) DemandQuantity
	, SUM(DemandNilai) DemandNilai
	, SUM(SupplyLine) SupplyLine
	, SUM(SupplyQuantity) SupplyQuantity
	, SUM(SupplyNilai) SupplyNilai
	, (SUM(isnull(SupplyLine,0)) / case when SUM(isnull(DemandLine,0)) = 0 then 1 else SUM(isnull(DemandLine,0)) end) * 100 ServiceRatioLine
	, (SUM(isnull(SupplyQuantity,0)) / case when SUM(isnull(DemandQuantity,0)) = 0 then 1 else SUM(isnull(DemandQuantity,0)) end) * 100 ServiceRatioQuantity
	, (SUM(isnull(SupplyNilai,0)) / case when SUM(isnull(DemandNilai,0)) = 0 then 1 else SUM(isnull(DemandNilai,0)) end) * 100 ServiceRatioNilai
	, SUM(DataStockMC4) DataStockMC4
	, SUM(DataStockMC5) DataStockMC5
	, (SUM(isnull(SlowMoving,0)) / case when SUM(isnull(NilaiStock,0)) = 0 then 1 else SUM(isnull(NilaiStock,0)) end) * 100 SlowMoving
from #Summary
group by 
	 PeriodYear
	, PeriodMonth
	, BranchCode) a

insert into #RawData select * from #PivotData

'
print(@Query)
exec(@Query)

select * from #TmpFilterEnum
select* from #TmpSalesSummary
select* from #RawData





END
GO
create procedure [dbo].[uspfn_spGetItemAlocation]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@PartNo varchar(32)
AS
SELECT WarehouseCode,
WarehouseName = 
(SELECT LookupValueName FROM gnMstLookupDtl 
WHERE LookUpValue = WarehouseCode AND CodeID = 'WRCD'),
LocationCode,
spMstItemLoc.Onhand,
spMstItemLoc.AllocationSP,
spMstItemLoc.AllocationSR,
spMstItemLoc.AllocationSL
FROM spMstItemLoc
INNER JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstItemLoc.PartNo AND spMstItemInfo.CompanyCode = spMstItemLoc.CompanyCode
INNER JOIN spMstItems ON spMstItems.CompanyCode = spMstItemInfo.CompanyCode AND spMstItems.CompanyCode = spMstItemLoc.CompanyCode
    AND spMstItems.BranchCode = spMstItemLoc.BranchCode
    AND spMstItems.PartNo = spMstItemInfo.PartNo
WHERE spMstItemInfo.PartNo = @PartNo
AND spMstItemInfo.CompanyCode = @CompanyCode
AND spMstItems.Branchcode = @BranchCode
GO
--DECLARE @as datetime  
--SET @as = getdate()  
--exec uspfn_CsCustomerSuzukiData @as, 100  
CREATE PROCEDURE [dbo].[uspfn_CsCustomerSuzukiData]  
--uspfn_CsCustomerSuzukiData '02-01-2013', 100  
@LastUpdateDate datetime,  
@segment int  
as  
--declare @LastUpdateDate datetime  
--set @LastUpdateDate = dateadd(mm,-0,getdate())
declare @SelectCode varchar(2)  
DECLARE @IsDataExist bit  
DECLARE @LastUpdateBy varchar(10)  
SET @LastUpdateBy ='AUTOUPDT'  
set @SelectCode = 'C' 
declare @DateData datetime           
            
IF(Year(@LastUpdateDate) >= Year(getdate()) and Month(@LastUpdateDate) >= month(getdate()))  
 begin  
  set @LastUpdateDate = getdate()  
 end
 set @DateData = dateadd(mm,1,(select convert(datetime,dateadd(mm,datediff(mm,0,@LastUpdateDate),0))))
--SELECT @LastUpdateDate as LastUpdateDate
--select @DateData as  DateData   
  
   
-- Query all Suzuki customer (3 digits VIN : JS2, JS3, JS4, JSA, MHY, MA3 & MMS)  
   select * into #t11 from  
        ( select 'UNIT SUZUKI' Kode, a.BranchCode, count(distinct a.CustomerCode) Total from omTrSalesInvoice a  
     where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
             and exists (select top 1 1 from omTrSalesInvoiceVIN  
                          where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and InvoiceNo=a.InvoiceNo  
                            and substring(ChassisCode,1,3) in ('JS2','JS3','JS4','JSA','MHY','MA3','MMS'))  
             AND a.InvoiceDate < @DateData 
           group by a.BranchCode) #t11  
  
   select * into #t8 from  
        ( select 'SERVICE SUZUKI' Kode, BranchCode, count(distinct a.CustomerCode) Total from svTrnInvoice a  
     where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
             and substring(a.ChassisCode,1,3) in ('JS2','JS3','JS4','JSA','MHY','MA3','MMS')  
             AND a.InvoiceDate < @DateData 
           group by a.BranchCode) #t8  
  
   select * into #t9 from  
       (( select 'UNIT&SERVICE' Kode, a.BranchCode, a.CustomerCode from omTrSalesInvoice a  
        where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
             and exists (select top 1 1 from omTrSalesInvoiceVIN   
           where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and InvoiceNo=a.InvoiceNo  
                            and substring(ChassisCode,1,3) in ('JS2','JS3','JS4','JSA','MHY','MA3','MMS'))  
             AND a.InvoiceDate < @DateData )  
    union   
     ( select 'UNIT&SERVICE' Kode, a.BranchCode, a.CustomerCode from svTrnInvoice a  
     where exists (select 1 from gnMstCustomer   
               where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode  
                            and substring(a.ChassisCode,1,3) in ('JS2','JS3','JS4','JSA','MHY','MA3','MMS'))  
           AND a.InvoiceDate < @DateData )   
       )  #t9  
  
   select * into #t10 from  
        ( select Kode, BranchCode, count(distinct CustomerCode) Total from #t9  
           group by Kode, BranchCode) #t10  
             
   select * INTO #t12 FROM(  
   select h.CompanyCode, d.BranchCode,  
       isnull(#t10.Total,0) 'TotalUnitService', isnull(#t11.Total,0) 'TotalUnit',   
    isnull(#t8.Total,0) 'TotalService'  
     from gnmstOrganizationHdr h  
          inner join gnMstOrganizationDtl d on h.CompanyCode=d.CompanyCode  
           left join #t11 on #t11.BranchCode=d.BranchCode  
           left join #t8 on #t8.BranchCode=d.BranchCode  
           left join #t10 on #t10.BranchCode=d.BranchCode)#t12  
   
 DECLARE   @tmpBranchCode      varchar(15)   
 DECLARE   c          CURSOR  
 FOR       SELECT     BranchCode   
     FROM       #t12  
 OPEN      c  
 FETCH     NEXT FROM c   
 INTO      @tmpBranchCode  
 WHILE     @@FETCH_STATUS = 0  
 BEGIN  
    --print @CustDataTrans  
    select @IsDataExist = (select count(*) from gnMstCustDealer where Year = Year(@LastUpdateDate) and Month = Month(@LastUpdateDate) and SelectCode = @SelectCode and BranchCode = @tmpBranchCode)  
    IF @IsDataExist = 0  
    begin   
    insert INTO gnMstCustDealer (CompanyCode, BranchCode, SelectCode, Year, Month, NoOfUnitService, NoOfUnit, NoOfService, NoOfSparePart, LastUpdateBy, LastUpdateDate)  
    SELECT a.CompanyCode CompanyCode,   
      @tmpBranchCode BranchCode,  
      @SelectCode SelectCode,  
      year(@LastUpdateDate) Year,  
      Month(@LastUpdateDate) Month,  
      a.TotalUnitService NoOfUnitService,  
      a.TotalUnit NoOfUnit,  
      a.TotalService NoOfService,  
      0 NoOfSparePart,  
      @LastUpdateBy LastUpdateBy,  
      @LastUpdateDate LastUpdateDate  
    from #t12 a  
    where a.BranchCode = @tmpBranchCode   
    end  
    else  
    begin  
    Update gnMstCustDealer  
    set gnMstCustDealer.NoOfService = b.TotalService  
    , gnMstCustDealer.NoOfUnit = b.TotalUnit  
    , gnMstCustDealer.NoOfUnitService = b.TotalUnitService  
    , gnMstCustDealer.LastUpdateBy = @LastUpdateBy  
    , gnMstCustDealer.LastUpdateDate = @LastUpdateDate  
    from #t12 b  
    join gnMstCustDealer on b.CompanyCode = gnMstCustDealer.CompanyCode  
    and b.BranchCode = gnMstCustDealer.BranchCode  
    and gnMstCustDealer.SelectCode = @SelectCode  
    and gnMstCustDealer.Year =  Year(@LastUpdateDate)  
    and gnMstCustDealer.Month = Month(@LastUpdateDate)  
    where  gnMstCustDealer.BranchCode = @tmpBranchCode and gnMstCustDealer.SelectCode = @SelectCode  
    and gnMstCustDealer.Year =  Year(@LastUpdateDate) and gnMstCustDealer.Month = Month(@LastUpdateDate)  
    end  
    FETCH NEXT from c INTO @tmpBranchCode  
 END  
 CLOSE      c  
 DEALLOCATE c  
   drop table #t11, #t8, #t9, #t10, #t12  
     
     
SELECT CompanyCode, BranchCode, SelectCode, Year, Month, NoOfUnitService, NoOfUnit, NoOfService, NoOfSparePart,  
  LastUpdateBy, LastUpdateDate from gnMstCustDealer  
where SelectCode = @SelectCode and Year = Year(@LastUpdateDate) and Month = Month(@LastUpdateDate)
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usprpt_OmRpSalRgs033D]
	(
	@companycode varchar(max),
	@branchcode varchar(max),
	@period1 varchar(max),
	@period2 varchar(max),
	@ID int,
	@tipe varchar(1)
	)
AS
BEGIN
	
	if(@tipe='A')
		begin
			--table 1--
			insert into TempDailySales1
			select @ID, CompanyCode Company, BranchCode Branch, BranchName 
			from gnmstorganizationdtl where companycode = @companycode order by BranchCode;

			--table 2--
			insert into TempDailySales2
			select @ID ,a.CompanyCode Company
							, a.branchcode Branch
							, ltrim(isnull(c.salesmodeldesc,'')) Model
							, isnull(count(a.invoiceno),0) Nilai
						from omtrsalesinvoicevin a
						inner join omtrsalesinvoice b on b.companycode = a.companycode 
							and b.branchcode = a.branchcode
							and b.invoiceno = a.invoiceno 
						left join ommstmodel c on c.companycode = a.companycode 
							and c.salesmodelcode = a.salesmodelcode	
						where a.companycode = @companycode
							and b.status in (2,5)
							and convert(varchar, b.invoicedate, 112) between @period1 and @period2
						group by a.CompanyCode, a.BranchCode, ltrim(isnull(c.salesmodeldesc,''))
						union all
						select @ID,d.CompanyCode Company
							, e.branchcode Branch
							, ltrim(isnull(c.salesmodeldesc,'')) Model
							, isnull(sum(e.quantity),0)*-1 Nilai
						from omtrsalesreturn d
						left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
							and d.branchcode = e.branchcode
							and d.returnno = e.returnno 
						left join ommstmodel c on c.companycode = e.companycode 
							and c.salesmodelcode = e.salesmodelcode	
						where d.companycode =  @companycode
							and d.status in (2,5)
							and convert(varchar, d.returndate, 112) between @period1 and @period2
						group by d.CompanyCode, e.BranchCode, ltrim(isnull(c.salesmodeldesc,'')) ;
			end
	else
		begin
			--table 1--
			insert into TempDailySales1
			select @ID, CompanyCode Company, BranchCode Branch, BranchName 
			from gnmstorganizationdtl where companycode = @companycode order by BranchCode;

			--table 2--
			insert into TempDailySales2
			select @ID,a.CompanyCode Company
                        , a.branchcode Branch
                        , ltrim(a.salesmodelcode) Model
                        , isnull(count(a.invoiceno),0) Nilai
                    from omtrsalesinvoicevin a
                    inner join omtrsalesinvoice b on b.companycode = a.companycode 
                        and b.branchcode = a.branchcode
                        and b.invoiceno = a.invoiceno 
                    left join ommstmodel c on c.companycode = a.companycode 
                        and c.salesmodelcode = a.salesmodelcode	
                    where a.companycode = @companycode
                        and b.status in (2,5)
                        and convert(varchar, b.invoicedate, 112)  between @period1 and @period2
                    group by a.CompanyCode, a.BranchCode, ltrim(a.salesmodelcode)
                    union all
                    select @ID , d.CompanyCode Company
                        , e.branchcode Branch
                        , ltrim(e.salesmodelcode) Model
                        , isnull(sum(e.quantity),0)*-1 Nilai
                    from omtrsalesreturn d
                    left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
                        and d.branchcode = e.branchcode
                        and d.returnno = e.returnno 
                    left join ommstmodel c on c.companycode = e.companycode 
                        and c.salesmodelcode = e.salesmodelcode	
                    where d.companycode = @companycode
                        and d.status in (2,5)
                        and convert(varchar, d.returndate, 112) between @period1 and @period2
                    group by d.CompanyCode, e.BranchCode, ltrim(e.salesmodelcode)  ;
		end

	-- TABLE I --
	select companygovname company, isnull(address1,'-') addr1, isnull(address2,'-') addr2, isnull(address3,'-') addr3, phoneno telp 
	from gnmstcoprofile where companycode = @companycode and branchcode = @branchcode

	-- TABLE II --
	select * into #tBranch from (
	select distinct companycode company, branchcode branch from gnmstorganizationdtl where companycode = @companycode
	union all
	select company, branch from TempDailySales1 where ID=@ID) #tBranch
	
	select * from #tBranch order by company, branch 
	
	declare @tabModel AS table
	(
		company varchar(50),
		branch varchar(50),
		model varchar(max),
		nilai int
	)
	
	if (@tipe ='A')
	begin
		insert into @tabModel 
			select a.CompanyCode company
				, a.branchcode branch
				, ltrim(isnull(c.salesmodeldesc,'')) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = @companycode
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between @period1 and @period2
			group by a.CompanyCode, a.BranchCode, ltrim(isnull(c.salesmodeldesc,''))
			union all
			select d.CompanyCode company
				, e.branchcode branch
				, ltrim(isnull(c.salesmodeldesc,'')) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = @companycode
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between @period1 and @period2
			group by d.CompanyCode, e.BranchCode, ltrim(isnull(c.salesmodeldesc,''))
				
		insert into @tabModel
			select company, branch, model, nilai from TempDailySales2 where ID=@ID		
	end
	else
	begin
		insert into @tabModel 
			select a.CompanyCode company
				, a.branchcode branch
				, ltrim(a.salesmodelcode) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = @companycode
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between @period1 and @period2
			group by a.CompanyCode, a.BranchCode, ltrim(a.salesmodelcode)
			union all
			select d.CompanyCode company
				, e.branchcode branch
				, ltrim(e.salesmodelcode) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = @companycode
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between @period1 and @period2
			group by d.CompanyCode, e.BranchCode, ltrim(e.salesmodelcode)
	
		insert into @tabModel
			select company, branch, model, nilai from TempDailySales2 where ID=@ID
	end
	
	select * into #tModel from (
		select * from @tabModel 
	) #tModel	
	
	-- Per Branch --
	----------------
	declare @1 varchar(max)
	declare @2 int
	declare @seq int
	declare @columns varchar(max)
	
	declare @colResult varchar(max)
	declare @columnsResult2 varchar(max)
	
	declare @columns2 varchar(max)
	declare @columns3 varchar(max)
	declare @columns4 varchar(max)
	declare @query varchar(max)

	set @columns = ''
	set @columns2 = ''
	set @columns3 = ''
	set @columns4 = ''

	set @2 = (select count(*) from #tBranch)
	set @seq = 1

	declare data cursor for
		select distinct branch from #tBranch
	open data
	fetch next from data into @1
	while @@fetch_status = 0 
	begin
		set @columns = @columns+'['+@1+']'	
		set @columns2 = @columns2+'isnull(['+@1+'],0) ['+@1+']'
		set @columns3 = @columns3+'isnull(['+@1+'],0)'
		set @columns4 = @columns4+'isnull(a.['+@1+'],0)'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columns = @columns+','
			set @columns2 = @columns2+', '
			set @columns3 = @columns3+'+'
			set @columns4 = @columns4+'+'
		end	 
		fetch next from data into @1
	end
	close data
	deallocate data;

	--set @columns2 = @columns3
	set @columns2 = @columns3+' AS GRAND TOTAL'+','+@columns2
	
	-- Per Company --
	-----------------
	declare @columnsSub varchar(max)
	declare @columnsSubDesc varchar(max)
	declare @columnsSub2 varchar(max)
	
	set @columnsSub = ''
	set @columnsSubDesc = ''
	set @columnsSub2 = ''
	
	set @2 = (select count( distinct company) from #tBranch)
	set @seq = 1

	declare dataCom cursor for
		select distinct company from #tBranch
	open dataCom
	
	fetch next from dataCom into @1
	while @@fetch_status = 0 
	begin
		set @columnsSub = @columnsSub+'['+@1+']'	
		set @columnsSubDesc = @columnsSubDesc+'['+@1+'] as Total ('+@1+')'	
		set @columnsSub2 = @columnsSub2+'isnull(['+@1+'],0) ['+@1+']'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columnsSub = @columnsSub+', '
			set @columnsSubDesc = @columnsSubDesc+', '
			set @columnsSub2 = @columnsSub2+', '
		end	 
		fetch next from dataCom into @1
	end
	close dataCom
	deallocate dataCom
	
	declare data1 cursor for
		select distinct company from #tBranch order by company
	
	declare @var1 varchar(max)
	declare @var2 varchar(max)
	set @colResult=''
	
	open data1
	fetch next from data1 into @var1
	while @@fetch_status=0
	begin
		declare @tot int
		set @tot = (select count(branch) from #tBranch where company=@var1)		
		set @seq=1
		
		declare data2 cursor for
			select branch from #tBranch where company=@var1 order by branch			
		open data2
		fetch next from data2 into @var2
		while @@fetch_status=0
		begin
			set @colResult = @colResult+'a.['+@var2+']'
			
			set @seq=@seq+1			
			if (@seq<=@tot)
				set @colresult=@colresult+','
			else
				set @colresult=@colresult+',b.['+@var1+'] as TOTAL ['+@var1+'],'
				
			fetch next from data2 into @var2
		end
		close data2
		deallocate data2		
		fetch next from data1 into @var1
	end
	
	close data1
	deallocate data1
	
	set @colResult = (select left(@colResult,len(@colResult)-1))
	
	-- TABLE III --	
	set @query = '
	select * into #tbl1 from (
	select model, '''+@columns2+null+'''
	from (
		select branch, model, sum(nilai) nilai
		from (
			select * from #tModel
		) x
		group by branch, model
	)p pivot
	(
		sum(nilai) for branch in ('''+@columns+null+''')
	)AS pvt 
	)#tbl1	
	
	select * into #tbl2 from (
	select model, '''+@columnsSub2+'''
	from (
		select company, model, sum(nilai) nilai
		from (
			select * from #tModel
		) x
		group by company, model 
	)p pivot
	(
		sum(nilai) for company in ('''+@columnsSub+''')
	) AS pvt 
	)#tbl2
	
	select a.model, '''+@columns4+''' as ''GRAND TOTAL'''+', '''+@colResult+'''
	from #tbl1 a
	left join #tbl2 b on a.model=b.model	
	
	drop table #tbl1
	drop table #tbl2
	'
	print (@query)
	exec (@query)
	
	-- Table IV --
	select branchcode+' : '+branchname keterangan from gnmstorganizationdtl 
		where companycode = @companycode
	union
	select Branch+' : '+BranchName keterangan from TempDailySales1 

	-- Table V -- Total Per Branch
	set @query = 'select '''+@columns2+null+'''
	from (
		select branch, sum(nilai) nilai
		from (
			select * from #tModel
		) x
		group by branch
	)p pivot
	(
	sum(nilai) for branch in ('''+@columns+null+''')
	) AS pvt '
	print (@query)
	exec (@query)
	
	-- Table VI --
	select company, sum(nilai) nilai from #tModel group by company order by company
	
	drop table #tBranch
	drop table #tModel
	
	delete TempDailySales1 where ID=@ID
	delete TempDailySales2 where ID=@ID

END
GO
CREATE procedure [dbo].[uspfn_sp_inquiry_supply_slip_detail]
	@companycode varchar(15), 
	@branchcode varchar(15), 
	@JobOrderNo varchar(20),
	@DocNo varchar(20)
 AS
SELECT a.JobOrderNo, a.ProductType, x.PartNo,
(SELECT s.PartName FROM SpMstItemInfo s where s.CompanyCode = '6159401' AND s.PartNo = x.PartNo) PartName,
x.DemandQty, x.SupplyQty, x.ReturnQty, ISNULL(x.CostPrice,0) CostPrice, ISNULL(x.RetailPrice,0) RetailPrice,
ISNULL(b.InvoiceNo,'-') InvoiceNo,
(SELECT InvoiceDate FROM SvTrnInvoice WHERE CompanyCode = d.CompanyCode 
AND BranchCode = d.BranchCode AND InvoiceNo = b.InvoiceNo) InvoiceDate
FROM SvTrnService a
LEFT JOIN 
(
SELECT CompanyCode, BranchCode, ServiceNo, PartNo, SUM(DemandQty) AS DemandQty, SUM(SupplyQty) AS SupplyQty,
SUM(ReturnQty) AS ReturnQty, CostPrice, RetailPrice
FROM SvTrnSrvItem GROUP BY ServiceNo, PartNo, CompanyCode, BranchCode, CostPrice, RetailPrice
) x ON a.CompanyCode = x.CompanyCode AND a.BranchCode = x.BranchCode AND a.ServiceNo = x.ServiceNo
LEFT  JOIN SpTrnSORDHdr c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.JobOrderNo = c.UsageDocNo
INNER JOIN SpTrnSLmpDtl d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND c.DocNo = d.DocNo AND d.PartNo = x.PartNo
LEFT JOIN SvTrnInvItemDtl b ON d.CompanyCode = b.CompanyCode AND d.BranchCode = b.BranchCode AND d.DocNo = b.SupplySlipNo AND d.PartNo = b.Partno
WHERE
a.CompanyCode =  @CompanyCode AND
a.BranchCode  = @BranchCode   AND 
a.JobOrderNo = @JobOrderNo    AND
c.DocNo = @DocNo
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySPK] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SPKDateFrom DateTime,
 @SPKDateTo DateTime,
 @NoSPKFrom varchar(100),
 @NoSPKTo varchar(100),
 @NoChassisFrom varchar(100),
 @NoChassisTo varchar(100),
 @SupplierCode varchar(100),
 @SupplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.SPKNo, 
convert(varchar(20),a.SPKDate,106) as SPKDate, 
a.RefferenceNo, 
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
b.SupplierName AS SupplierName, a.Remark, 
	CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM 
	omTrSalesSPK a
LEFT JOIN 
	gnMstSupplier b ON b.CompanyCode = a.CompanyCode AND b.SupplierCode = a.SupplierCode
LEFT JOIN omTrSalesSPKDetail c
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCode = c.BranchCode
	AND a.SPKNo = c.SPKNo
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SPKDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.SPKDate between ''' + convert(varchar(50),@SPKDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SPKDateTo) + ''''

if len(rtrim(@NoSPKFrom)) > 0
   set @pQuery = @pQuery + ' and a.SPKNo between ''' + rtrim(@NoSPKFrom) + '''' + ' and ' + '''' + rtrim(@NoSPKTo) + ''''

if len(rtrim(@NoChassisFrom)) > 0
   set @pQuery = @pQuery + ' and c.ChassisNo between ''' + rtrim(@NoChassisFrom) + '''' + ' and ' + '''' + rtrim(@NoChassisTo) + ''''

if len(rtrim(@SupplierCode)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@SupplierCode) + '''' + ' and ' + '''' + rtrim(@SupplierCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.SPKNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_spCustSOPickListBackOrder]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@ProfitCenterCode varchar(3),
@TypeOfGoods varchar(2)
as
SELECT x.CustomerCode,
                    (
	                    SELECT c.CustomerName 
	                    FROM gnMstCustomer c with(nolock, nowait)
	                    where  c.CompanyCode=x.CompanyCode
	                    AND c.CustomerCode= x.CustomerCode 
	                    AND c.CustomerCode=x.CustomerCode
                    ) AS CustomerName,
                    (
	                    SELECT c.Address1+' '+c.Address2+' '+c.Address3+' '+c.Address4 
	                    FROM gnMstCustomer c with(nolock, nowait)
	                    where  c.CompanyCode=x.CompanyCode
	                    AND c.CustomerCode= x.CustomerCode 
	                    AND c.CustomerCode=x.CustomerCode

                    ) as Address
                    , z.LookUpValueName as ProfitCenter
                    FROM 
                    (
                        SELECT DISTINCT spTrnSOrdHdr.CompanyCode, spTrnSOrdHdr.BranchCode, 
                        spTrnSOrdHdr. CustomerCode 
                        FROM spTrnSOrdDtl INNER JOIN
                        spTrnSOrdHdr 
                        ON spTrnSOrdDtl.CompanyCode=spTrnSOrdHdr.CompanyCode
                        AND spTrnSOrdDtl.BranchCode=spTrnSOrdHdr.BranchCode
                        AND spTrnSOrdDtl.DocNo=spTrnSOrdHdr.DocNo
                        AND (spTrnSOrdDtl.QtyBO - spTrnSOrdDtl.QtyBOSupply - spTrnSOrdDtl.QtyBOCancel)>0
                        AND spTrnSOrdHdr.TypeOfGoods=@TypeOfGoods
                    ) x 
                    INNER JOIN gnMstCustomerProfitCenter y WITH(nolock, nowait)
                    ON y.CompanyCode = x.CompanyCode 
                       AND y.BranchCode = x.BranchCode
                       AND y.CustomerCode = x.CustomerCode
                    INNER JOIN gnMstLookUpDtl z WITH(nolock, nowait)
                    ON z.CompanyCode= x.CompanyCode
                       AND z.CodeID='PFCN'
                       AND z.LookupValue=y.ProfitCenterCode
                    WHERE x.CompanyCode=@CompanyCode
                        AND x.BranchCode=@BranchCode
                        AND y.ProfitCenterCode=@ProfitCenterCode
GO
create procedure [dbo].[uspfn_omSoLkp] 
(
	@CompanyCode varchar(25),
	@BranchCode varchar(25)
)
as
 
 -- exec uspfn_omSoLkp '6159401000','6159401001'
 
 declare @DbMD as varchar(15)  
 declare @Sql as varchar(max) 
 declare @ssql as varchar(max) 
 
 set @DbMD = (select DbMD from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode)  
 


 set @ssql='select * from gnMstCompanyMapping '

set @Sql= 'SELECT a.CompanyCode, a.BranchCode,
                a.SONo, a.SODate, a.SalesType, a.CustomerCode, a.TOPCode, a.Installment, a.FinalPaymentDate,
                a.TOPDays, a.BillTo, a.ShipTo, a.ProspectNo, a.SKPKNo, a.Salesman, a.WareHouseCode, a.isLeasing, 
                a.LeasingCo, a.GroupPriceCode, a.Insurance, a.PaymentType, a.PrePaymentAmt, a.PrePaymentBy, 
                a.CommissionBy, a.CommissionAmt, a.PONo, a.ContractNo, a.Remark, a.Status,
                a.SalesCoordinator, a.SalesHead, a.BranchManager, a.RefferenceNo,
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then '''' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDates, 
                CASE convert(varchar, a.RefferenceDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RefferenceDate, 111) end as RefferenceDate, 
                CASE convert(varchar, a.RequestDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.RequestDate, 111) end as RequestDate,
                CASE convert(varchar, a.PrePaymentDate, 111) when convert(varchar, ''1900/01/01'') 
                then ''undefined'' else convert(varchar, a.PrePaymentDate, 111) end as PrePaymentDate,
                e.Address1 + '' '' + e.Address2 + '' '' + e.Address3 + '' '' + e.Address4 as Address,
                case when year(a.RefferenceDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC1,
                case when a.SKPKNo <> '''' then convert(bit,1) else convert(bit,0) end isC2,
                case when year(a.PrePaymentDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC3,
                case when year(a.RequestDate) <> 1900 then convert(bit,1) else convert(bit,0) end isC4,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS CustomerName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID) as SalesmanName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.Shipto = b.CustomerCode)  
						AS ShipName,
                (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.LeasingCo = b.CustomerCode)  
						AS LeasingCoName,
				(SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.PrePaymentby = c.EmployeeID) as PrePaymentName,
				(SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode) AS GroupPriceName,
				(SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode)  
						AS BillName,
				(SELECT b.lookupvaluename
                        FROM '+@DbMD+'..gnMstLookUpDtl b
                        WHERE a.WareHouseCode = b.LookUpValue
						AND a.WareHouseCode = b.LookUpValue and CodeID =''MPWH'')  
						AS WareHouseName,
                (a.CustomerCode
                    + '' || ''
                    + (SELECT b.CustomerName
                        FROM gnMstCustomer b
                        WHERE a.CompanyCode = b.CompanyCode
						AND a.CustomerCode = b.CustomerCode))  
						AS Customer, 
                (a.Salesman
                    + '' || ''
                    + (SELECT c.EmployeeName
                        FROM gnMstEmployee c
                        WHERE a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
					    AND a.Salesman = c.EmployeeID))  AS Sales, 
                (a.GroupPriceCode
                    + '' || ''
                    + (SELECT d.RefferenceDesc1
                        FROM omMstRefference d
                        WHERE a.CompanyCode = d.CompanyCode
						AND d.RefferenceType = ''GRPR'' 
                        AND d.RefferenceCode = a.GroupPriceCode))  AS GroupPrice, 
                CASE a.Status when 0 then ''OPEN''
                                when 1 then ''PRINTED''
                                when 2 then ''APPROVED''
                                when 3 then ''DELETED''
                                when 4 then ''REJECTED''
                                when 9 then ''FINISHED'' END as Stat
                , CASE ISNULL(a.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales
                ,(select distinct x.TipeKendaraan
                    from pmKDP x
	                    left join gnMstEmployee b on x.CompanyCode=b.CompanyCode and x.BranchCode=b.BranchCode
		                    and x.EmployeeID=b.EmployeeID
	                    left join omTrSalesSO c on c.CompanyCode = x.CompanyCode 
		                    and c.BranchCode = x.BranchCode
		                    and c.ProspectNo = x.InquiryNumber
	                    left join omTrSalesInvoice d on d.CompanyCode = x.CompanyCode
		                    and d.BranchCode = x.BranchCode
		                    and d.SONo = c.SONo
	                    left join omTrSalesReturn e on e.CompanyCode = x.CompanyCode
		                    and e.BranchCode = x.BranchCode
		                    and e.InvoiceNo = d.InvoiceNo
                    where x.InquiryNumber=a.ProspectNo) as VehicleType
                FROM omTrSalesSO a
                INNER JOIN gnMstCustomer e
                ON a.CompanyCode = e.CompanyCode AND a.CustomerCode = e.CustomerCode
				order by a.SONo desc
				'
--print @Sql

exec (@Sql)
GO
CREATE procedure [dbo].[uspfn_GetPartNoBasedOnMaxUpdateDate] @CompanyCode varchar(15), @BranchCode varchar(15)
as
SELECT
	a.PartNo,
	a.UpdateDate,
	ISNULL(RetailPrice,0) AS RetailPrice, 
	ISNULL(RetailPriceInclTax,0) AS RetailPriceInclTax, 
	ISNULL(PurchasePrice,0) AS PurchasePrice,
	ISNULL(CostPrice,0) AS CostPrice,
	ISNULL(Discount,0) AS Discount,
	ISNULL(OldRetailPrice,0) AS OldRetailPrice, 
	ISNULL(OldPurchasePrice,0) AS OldPurchasePrice,
	ISNULL(OldCostPirce,0) AS OldCostPirce,
	ISNULL(OldDiscount,0) AS OldDiscount,
    LastPurchaseUpdate,
    LastRetailPriceUpdate
FROM
	spHstItemPrice a
	INNER JOIN (SELECT 
					PartNo, MAX(UpdateDate) UpdateDate
				FROM
					spHstItemPrice b
				WHERE
					b.CompanyCode = @CompanyCode
					AND b.BranchCode = @BranchCode
				GROUP BY
					PartNo
	) LastUpdate ON LastUpdate.PartNo = a.PartNo AND LastUpdate.UpdateDate = a.UpdateDate
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
GO
create procedure [dbo].[uspfn_SyncCsLkuStnkExtView]
as
begin
	set nocount on  

	if exists (select * from sys.tables where name = 'CsLkuStnkExtView') 
		drop table CsLkuStnkExtView  

	select * into CsLkuStnkExtView from (select * from CsLkuStnkExtViewSource)x 
 
	select 'Finish Job'  
end
GO
CREATE PROCEDURE [dbo].[uspfn_spGet4TablePLFromBO] @CompanyCode varchar(15), @BranchCode varchar(15), @DocNo varchar(20)
as
SELECT DISTINCT 
     row_number () OVER (ORDER BY spTrnSORDDtl.DocNo, spTrnSORDDtl.CreatedDate ASC) AS NoUrut
    ,spTrnSORDDtl.DocNo
    ,spTrnSORDDtl.PartNo 
    ,PartNoOriginal
    ,spTrnSORDHdr.ExPickingSlipNo                                                            
    ,(CONVERT(decimal(10,5), CONVERT(varbinary(20), ISNULL(QtyBO, 0))) -
		CONVERT(decimal(10,5), CONVERT(varbinary(20), ISNULL(QtyBoSupply, 0))) - 
		CONVERT(decimal(10,5), CONVERT(varbinary(20), ISNULL(QtyBOCancel, 0)))) AS QtyBOOutstd
FROM spTrnSORDDtl                           
    LEFT JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSORDDtl.DocNo AND
        spTrnSORDHdr.CompanyCode = spTrnSORDDtl.CompanyCode AND
        spTrnSORDHdr.BranchCode = spTrnSORDDtl.BranchCode
WHERE spTrnSORDDtl.CompanyCode = @CompanyCode
AND spTrnSORDDtl.BranchCode = @BranchCode 
AND QtyBO - QtyBOSupply - QtyBOCancel > 0 AND (spTrnSORDDtl.DocNo = @DocNo )  ORDER BY spTrnSORDDtl.DocNo, NoUrut
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferInDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @TransferInNo varchar(15)
)
AS
BEGIN

SELECT a.SalesModelCode,Convert(varchar,a.SalesModelYear) as SalesModelYear,b.SalesModelDesc,
a.ChassisCode,Convert(varchar,a.ChassisNo) as ChassisNo,a.EngineCode,Convert(varchar,a.EngineNo) as EngineNo,a.ColourCode,
c.RefferenceDesc1 as ColourName,a.Remark
FROM OmTrInventTransferInDetail a
LEFT JOIN omMstModel b
ON a.CompanyCode = b.CompanyCode
AND a.SalesModelCode = b.SalesModelCode
LEFT JOIN omMstRefference c
ON a.CompanyCode = c.CompanyCode
AND a.ColourCode = c.RefferenceCode
WHERE c.RefferenceType = 'COLO'
AND a.CompanyCode = @p_CompanyCode
AND a.BranchCode = @p_BranchCode
AND a.TransferInNo = @TransferInNo
ORDER BY a.SalesModelCode,a.SalesModelYear,a.ChassisNo ASC

END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferOut] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @TransferOutDateFrom DateTime,
 @TransferOutDateTo DateTime,
 @NoTransferOutFrom varchar(100),
 @NoTransferOutTo varchar(100),
 @GudangAsalAwal varchar(100),
 @GudangAsalAkhir varchar(100),
 @CabangTujuanAwal varchar(100),
 @CabangTujuanAkhir varchar(100),
 @GudangTujuanAwal varchar(100),
 @GudangTujuanAkhir varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
	a.TransferOutNo, convert(varchar(20),a.TransferOutDate,106) as TransferOutDate,
	a.ReferenceNo, case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate,
	c.BranchName as BranchNameFrom, 
	(select b.RefferenceDesc1  from OmTrInventTransferOut x 
	INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode 
	AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeFrom = b.RefferenceCode 
	AND x.TransferOutNo= a.TransferOutNo)as WareHouseNameFrom,
	d.BranchName as BranchNameTo, 
	(select b.RefferenceDesc1  from OmTrInventTransferOut x 
	INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode 
	AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeTo = b.RefferenceCode 
	AND x.TransferOutNo= a.TransferOutNo)as WareHouseNameTo,
	case when year(a.ReturnDate) = ''1900'' then '''' else convert(varchar(20),a.ReturnDate,106) end as ReturnDate,
	a.Remark, CASE WHEN a.Status = 0 THEN ''Open'' WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Closed'' WHEN a.Status = 3 THEN ''Canceled'' END AS Status
FROM 
	OmTrInventTransferOut a 
	INNER JOIN gnMstOrganizationDtl c 
	ON a.CompanyCode = c.CompanyCode 
	AND a.BranchCodeFrom = c.BranchCode
	INNER JOIN gnMstOrganizationDtl d 
	ON a.CompanyCode = d.CompanyCode 
	AND a.BranchCodeTo = d.BranchCode
WHERE 1 = 1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@TransferOutDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.TransferOutDate between ''' + convert(varchar(50),@TransferOutDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@TransferOutDateTo) + ''''

if len(rtrim(@NoTransferOutFrom)) > 0
   set @pQuery = @pQuery + ' and a.TransferOutNo between ''' + rtrim(@NoTransferOutFrom) + '''' + ' and ' + '''' + rtrim(@NoTransferOutTo) + ''''

if len(rtrim(@GudangAsalAwal)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCodeFrom between ''' + rtrim(@GudangAsalAwal) + '''' + ' and ' + '''' + rtrim(@GudangAsalAkhir) + ''''

if len(rtrim(@CabangTujuanAwal)) > 0
   set @pQuery = @pQuery + ' and a.BranchCodeTo between ''' + rtrim(@CabangTujuanAwal) + '''' + ' and ' + '''' + rtrim(@CabangTujuanAkhir) + ''''

if len(rtrim(@GudangTujuanAwal)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCodeTo between ''' + rtrim(@GudangTujuanAwal) + '''' + ' and ' + '''' + rtrim(@GudangTujuanAkhir) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.TransferOutNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
-- SP to get CSZKTRDET      
CREATE Procedure [dbo].[uspfn_CustSzkDetailTrans]          
--uspfn_CustSzkDetailTrans '2012-01-01', 100          
@LastUpdateDate datetime,          
@segment int          
as     
DECLARE @LastUpdateBy varchar(8)          
SET @LastUpdateBy ='AUTOUPDT'          
declare @LastUpdateDateTmp datetime          
set @LastUpdateDateTmp = @LastUpdateDate          
-- Query all Suzuki customer (3 digits VIN : JS2, JS3, JS4, JSA, MHY, MA3 & MMS)          
-- depend on transaction period, examples: last transaction in 3 years          
-- Customer detail information           
   select * into #t14 from          
        ( select distinct 'UNIT' Kode, a.CompanyCode,          
                 a.BranchCode, b.CustomerCode, b.CustomerName, b.CustomerGovName, b.CustomerStatus,           
                 b.Address1+b.Address2+b.Address3+b.Address4 Address,          
                 isnull((select top 1 LookUpValueName from gnMstLookUpDtl           
                          where CompanyCode=a.CompanyCode and CodeID='PROV' and LookUpValue=b.ProvinceCode),'') ProvinceName,           
                 isnull((select top 1 LookUpValueName from gnMstLookUpDtl           
                          where CompanyCode=a.CompanyCode and CodeID='CITY' and LookUpValue=b.CityCode),'') CityName,          
                 b.ZipNo, b.KelurahanDesa, b.KecamatanDistrik, b.KotaKabupaten, b.IbuKota,           
                 b.PhoneNo, b.HPNo, b.FaxNo, b.OfficePhoneNo, b.Email, b.BirthDate, b.isPKP,           
                 b.NPWPNo, b.NPWPDate, b.SKPNo, b.SKPDate, b.CustomerType, b.Gender, b.Spare01 KTP, a.InvoiceDate          
            from omTrSalesInvoice a, gnMstCustomer b, gnMstDealerMapping c          
           where a.CompanyCode=b.CompanyCode and a.CustomerCode=b.CustomerCode and a.CompanyCode =c.DealerCode          
           --and a.InvoiceDate>=dateadd(year,-3,(select convert(date,dateadd(mm,datediff(mm,0,getdate()),0))))          
             and a.InvoiceDate> @LastUpdateDate          
             and exists (select top 1 1 from omTrSalesInvoiceVIN          
                          where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and InvoiceNo=a.InvoiceNo          
                            and substring(ChassisCode,1,3) in ('JS2','JS3','JS4','JSA','MHY','MA3','MMS')) ) #t14          
              
   select * into #t15 from          
        ( select distinct 'SERVICE' Kode,  a.CompanyCode,          
                 a.BranchCode, b.CustomerCode, b.CustomerName, b.CustomerGovName, b.CustomerStatus,           
                 b.Address1+b.Address2+b.Address3+b.Address4 Address,          
                 isnull((select top 1 LookUpValueName from gnMstLookUpDtl           
                          where CompanyCode=a.CompanyCode and CodeID='PROV' and LookUpValue=b.ProvinceCode),'') ProvinceName,           
                 isnull((select top 1 LookUpValueName from gnMstLookUpDtl           
                          where CompanyCode=a.CompanyCode and CodeID='CITY' and LookUpValue=b.CityCode),'') CityName,          
                 b.ZipNo, b.KelurahanDesa, b.KecamatanDistrik, b.KotaKabupaten, b.IbuKota,           
                 b.PhoneNo, b.HPNo, b.FaxNo, b.OfficePhoneNo, b.Email, b.BirthDate, b.isPKP,           
                 b.NPWPNo, b.NPWPDate, b.SKPNo, b.SKPDate, b.CustomerType, b.Gender, b.Spare01 KTP, a.InvoiceDate          
            from svTrnInvoice a, gnMstCustomer b, gnMstDealerMapping c          
           where a.CompanyCode=b.CompanyCode and a.CustomerCode=b.CustomerCode and a.CompanyCode =c.DealerCode          
           --and a.InvoiceDate>=dateadd(year,-3,(select convert(date,dateadd(mm,datediff(mm,0,getdate()),0))))          
             and a.InvoiceDate>@LastUpdateDate          
             and substring(a.ChassisCode,1,3) in ('JS2','JS3','JS4','JSA','MHY','MA3','MMS')) #t15          
          
   select * into #t16 from       
        ( select 'UNITSERVICE' Kode,  CompanyCode, BranchCode, CustomerCode, CustomerName,           
                 CustomerGovName, CustomerStatus, Address, ProvinceName, CityName, ZipNo, KelurahanDesa,           
                 KecamatanDistrik, KotaKabupaten, IbuKota, PhoneNo, HPNo, FaxNo, OfficePhoneNo, Email,           
                 BirthDate, isPKP, NPWPNo, NPWPDate, SKPNo, SKPDate, CustomerType, Gender, KTP, InvoiceDate from #t14          
    union           
          select 'UNITSERVICE' Kode, CompanyCode, BranchCode, CustomerCode, CustomerName,           
                 CustomerGovName, CustomerStatus, Address, ProvinceName, CityName, ZipNo, KelurahanDesa,           
                 KecamatanDistrik, KotaKabupaten, IbuKota, PhoneNo, HPNo, FaxNo, OfficePhoneNo, Email,           
                 BirthDate, isPKP, NPWPNo, NPWPDate, SKPNo, SKPDate, CustomerType, Gender, KTP, InvoiceDate from #t15 ) #t16          
          
           
 SELECT * into #t17 FROM           
 (          
   select distinct * from #t16          
   union all          
   select * from #t14          
   union all          
   select * from #t15) #t17          
           
 select * into #t18 from(          
 select TOP (@segment) * from #t17 a          
 where a.InvoiceDate > @LastUpdateDate order BY a.InvoiceDate asc)#t18          
           
 set @LastUpdateDate = (select TOP 1 InvoiceDate from #t18 a order BY a.InvoiceDate desc)          

begin try 
 insert INTO gnMstCustDealerDtl (CompanyCode, BranchCode, CustomerCode,           
         CustomerName, CustomerGovName, CustomerStatus,           
         Address, ProvinceName, CityName, ZipNo,           
         KelurahanDesa, KecamatanDistrik, KotaKabupaten,           
         IbuKota, PhoneNo, HpNo, FaxNo, OfficePhoneNo,          
         Email, BirthDate, isPKP, NPWPNo, NPWPDate, SKPNo,          
         SKPDate, CustomerType, Gender, KTP,           
         LastTransactionDate, TransType, LastUpdateBy, LastUpdateDate)          
 SELECT TOP (@segment) a.CompanyCode, a.BranchCode, a.CustomerCode, a.CustomerName, a.CustomerGovName,          
  a.CustomerStatus, a.Address, a.ProvinceName, a.CityName, a.ZipNo, a.KelurahanDesa,          
  a.KecamatanDistrik, a.KotaKabupaten, a.Ibukota, a.PhoneNo, a.HpNo, a.FaxNo,          
  a.OfficePhoneNo, a.Email, a.BirthDate, a.isPKP, a.NPWPNo, a.NPWPDate, a.SKPNo, a.SKPDate,          
  a.CustomerType, a.Gender, a.KTP, a.InvoiceDate, a.Kode, @LastUpdateBy, @LastUpdateDate          
 from #t18 a            
 end try          
 begin catch          
 end catch          
                     
 begin try          
 insert INTO gnMstCustDealerDtl (CompanyCode, BranchCode, CustomerCode,           
         CustomerName, CustomerGovName, CustomerStatus,           
         Address, ProvinceName, CityName, ZipNo,           
         KelurahanDesa, KecamatanDistrik, KotaKabupaten,           
         IbuKota, PhoneNo, HpNo, FaxNo, OfficePhoneNo,          
         Email, BirthDate, isPKP, NPWPNo, NPWPDate, SKPNo,          
         SKPDate, CustomerType, Gender, KTP,           
         LastTransactionDate, TransType, LastUpdateBy, LastUpdateDate)          
 SELECT TOP (@segment) a.CompanyCode, a.BranchCode, a.CustomerCode, a.CustomerName, a.CustomerGovName,          
  a.CustomerStatus, a.Address, a.ProvinceName, a.CityName, a.ZipNo, a.KelurahanDesa,          
  a.KecamatanDistrik, a.KotaKabupaten, a.Ibukota, a.PhoneNo, a.HpNo, a.FaxNo,          
  a.OfficePhoneNo, a.Email, a.BirthDate, a.isPKP, a.NPWPNo, a.NPWPDate, a.SKPNo, a.SKPDate,          
  a.CustomerType, a.Gender, a.KTP, a.InvoiceDate, a.Kode, @LastUpdateBy, @LastUpdateDate          
 from #t17 a          
 where a.Kode = (SELECT top 1 Kode from #t18 b order BY b.InvoiceDate desc)          
 and a.InvoiceDate = (SELECT top 1 InvoiceDate from #t18 b order BY b.InvoiceDate desc)          
 end try          
 begin catch          
 end catch          
           
 drop table #t14, #t15, #t16, #t17, #t18          
           
 select top(@segment) a.CompanyCode, a.BranchCode, a.CustomerCode, a.CustomerName, a.CustomerGovName,          
  a.CustomerStatus, a.Address, a.ProvinceName, a.CityName, a.ZipNo, a.KelurahanDesa,          
  a.KecamatanDistrik, a.KotaKabupaten, a.Ibukota, a.PhoneNo, a.HpNo, a.FaxNo,          
  a.OfficePhoneNo, a.Email, a.BirthDate, a.isPKP, a.NPWPNo, a.NPWPDate, a.SKPNo, a.SKPDate,          
  a.CustomerType, a.Gender, a.KTP, a.LastTransactionDate, a.TransType, a.LastUpdateBy, a.LastUpdateDate  from gnMstCustDealerDtl a where a.LastTransactionDate > @LastUpdateDateTmp
GO
CREATE procedure [dbo].[uspfn_spGetNoPartsReturnSS] @CompanyCode varchar(15), @BranchCode varchar(15),         
@ProductType varchar(5), @TypeOfGoods varchar(2), @DocNo varchar(25)        
as        
select distinct a.CompanyCode, a.BranchCode, a.DocNo, a.WarehouseCode, a.PartNo, a.PartNoOriginal, a.QtyBill as QtyLmp, a.DocNo,    
    c.LmpNo, c.LmpDate        
                from spTrnSLmpDtl a, spTrnSORDHdr b, spTrnSLmpHdr c with(nolock, nowait)        
                where a.CompanyCode = @CompanyCode        
                        and a.BranchCode = @BranchCode        
                        and b.CompanyCode = @CompanyCode        
                  and b.BranchCode = @BranchCode        
      and a.DocNo = b.DocNo         
      and b.Salestype IN ('2', '3')        
                  and c.CompanyCode = @CompanyCode        
                  and c.BranchCode = @BranchCode        
                        and a.LmpNo = c.LmpNo        
                        and a.LmpNo = @DocNo        
      and ProductType = @ProductType        
      and c.TypeOfGoods = @TypeOfGoods        
                        and (a.QtyBill -         
(select ISNULL(SUM (QtyReturn),0) AS MaxQtyRetur FROM spTrnSRturSSdtl        
            LEFT JOIN spTrnSRturSSHdr ON spTrnSRturSSHdr.ReturnNo = spTrnSRturSSdtl.ReturnNo AND        
                spTrnSRturSSHdr.CompanyCode = spTrnSRturSSdtl.CompanyCode AND        
                spTrnSRturSSHdr.BranchCode = spTrnSRturSSdtl.BranchCode        
            WHERE spTrnSRturSSdtl.CompanyCode = @CompanyCode        
                AND spTrnSRturSSdtl.BranchCode = @BranchCode        
                AND spTrnSRturSSHdr.DocNo = a.DocNo        
                AND spTrnSRturSSdtl.PartNo = a.PartNo         
                AND spTrnSRturSSdtl.PartNoOriginal = a.PartNoOriginal         
    AND spTrnSRturSSDtl.DocNo = a.DocNo         
                AND spTrnSRturSSHdr.Status = 2        
    AND ProductType = @ProductType        
    AND TypeOfGoods = @TypeOfGoods)) > 0
GO
create procedure [dbo].[uspfn_CheckChassisNoMatch]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SONumber varchar(50)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;

	set @CountSOVin = (
		select count(a.SONo)
		  from omTrSalesSOVin a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and a.SONo = @SONumber
		   and a.ChassisNo != 0
	);

	set @CountSOModel = (
		select SUM(QuantitySO) 
		  from omTrSalesSOModel a
		 where a.CompanyCode = @CompanyCode
		   and a.BranchCode = @BranchCode
		   and a.SONo = @SONumber
	);

	if @CountSOModel = 0
		select convert(bit, 0) as Status;
	if @CountSOModel = @CountSOVin
		select convert(bit, 1) as Status;
	else
		select convert(bit, 0) as Status
end
GO
-- ===================================================
-- Query Activation : 
-- usprpt_SvRpCrm002V2 '6006406','6006405','20110706','REMINDER',3,0
-- ===================================================

CREATE PROCEDURE [dbo].[usprpt_SvRpCrm002V3]
	@CompanyCode	Varchar(15),
	@BranchCode		Varchar(15),
	@DateParam		Datetime,
	@OptionType		Varchar(100), 
	@Range			int, 
	@Interval		int
	
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;

IF (@OptionType = 'REMINDER')
BEGIN
select ROW_NUMBER()OVER(order BY a.PoliceRegNo) as No, * from (
	select distinct 
		  case when b.LastServiceDate is null then 'New' else case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then 'NEW' else 'Walk In' end end KategoriPelanggan
		 , b.BasicModel typeA
		 , b.PoliceRegNo
		 , case when b.TransmissionType is null then 'MT' else case when b.TransmissionType = ' ' then 'MT' else b.TransmissionType end end TM
		 , b.ProductionYear ProdYear
		 , b.EngineCode
		 , b.EngineNo
		 , b.ChassisCode
		 , b.ChassisNo
		 , c.CustomerName
		 , c.PhoneNo
		 , c.OfficePhoneNo
		 , c.HPNo
		 , case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then null else b.LastServiceDate end VisitDate
		 , case when (convert(varchar, c.BirthDate, 112) = '19000101') then null else c.BirthDate end BirthDate
		 , case(c.Gender) when 'M' then 'Pria' else 'Wanita' end Gender
		 , isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') Address
		 , case when b.ContactName is null then c.CustomerName else b.ContactName end ContactName
		 , case when b.ContactAddress is null then isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') else b.ContactAddress end ContactAddress
		 , case when b.ContactPhone is null then c.PhoneNo else b.ContactPhone end ContactPhone
		 , b.RemainderDescription LastRemark
		 , ISNULL((SELECT TOP 1 CompanyName FROM gnMstCoProfile WHERE CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) ,'') CompanyName
		 , YEAR(getdate()) PeriodYear
		 , DateName( month , DateAdd( month , month(GetDate()) , 0 ) - 1 ) PeriodMonth 
		 , c.Address1
		 , c.Address2
		 , c.Address3
		 , c.Address4
	  from svTrnService a
	  left join SvMstCustomerVehicle b	on a.Companycode = b.CompanyCode 
			and a.ChassisCode = b.ChassisCode 
			and a.ChassisNo = b.ChassisNo
	  left join GnMstCustomer c on a.CompanyCode = c.CompanyCode
			and a.CustomerCode = c.CustomerCode
	  left join svTrnDailyRetention d on d.CompanyCode = a.CompanyCode
			and d.BranchCode = a.BranchCode and d.PeriodYear = year(a.JobOrderDate)
			and d.PeriodMonth = month(a.JobOrderDate) and d.CustomerCode = a.CustomerCode
	  left join gnMstLookupDtl e on e.CompanyCode = a.CompanyCode
			and e.CodeID = 'CIRS'
			and e.LookupValue = d.VisitInitial
	  left join gnMstLookUpDtl f on b.CompanyCode = a.CompanyCode
			and f.CodeId = 'CCRS'
			and f.LookUpValue = d.CustomerCategory
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode	= @BranchCode
	   ) a
END
ELSE
BEGIN
select ROW_NUMBER()OVER(order BY b.PoliceRegNo) as No, * from (
	select distinct 
		case when b.LastServiceDate is null then 'New' else case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then 'NEW' else 'Walk In' end end KategoriPelanggan
		 , b.BasicModel typeA
		 , b.PoliceRegNo
		 , case when b.TransmissionType is null then 'MT' else case when b.TransmissionType = ' ' then 'MT' else b.TransmissionType end end TM 
		 , b.ProductionYear ProdYear
		 , b.EngineCode
		 , b.EngineNo
		 , b.ChassisCode
		 , b.ChassisNo
		 , c.CustomerName
		 , c.PhoneNo
		 , c.OfficePhoneNo
		 , c.HPNo
		 , case when (convert(varchar, b.LastServiceDate, 112) = '19000101') then null else b.LastServiceDate end VisitDate
		 , case when (convert(varchar, c.BirthDate, 112) = '19000101') then null else c.BirthDate end BirthDate
		 , case(c.Gender) when 'M' then 'Pria' else 'Wanita' end Gender
		 , isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') Address
		 , case when b.ContactName is null then c.CustomerName else b.ContactName end ContactName
		 , case when b.ContactAddress is null then isnull(c.Address1, '')+' '+isnull(c.Address2, '')+' '+isnull(c.Address3, '')+' '+isnull(c.Address4, '') else b.ContactAddress end ContactAddress
		 , case when b.ContactPhone is null then c.PhoneNo else b.ContactPhone end ContactPhone
		 , b.RemainderDescription LastRemark
		 , ISNULL((SELECT TOP 1 CompanyName FROM gnMstCoProfile WHERE CompanyCode = a.CompanyCode and BranchCode = a.BranchCode) ,'') CompanyName
		 , YEAR(getdate()) PeriodYear
		 , DateName( month , DateAdd( month , month(GetDate()) , 0 ) - 1 ) PeriodMonth
		 , c.Address1
		 , c.Address2
		 , c.Address3
		 , c.Address4
	  from svTrnService a
	  left join SvMstCustomerVehicle b	on a.Companycode = b.CompanyCode 
			and a.ChassisCode = b.ChassisCode 
			and a.ChassisNo = b.ChassisNo
	  left join GnMstCustomer c on a.CompanyCode = c.CompanyCode
			and a.CustomerCode = c.CustomerCode
	  left join svTrnDailyRetention d on d.CompanyCode = a.CompanyCode
			and d.BranchCode = a.BranchCode and d.PeriodYear = year(a.JobOrderDate)
			and d.PeriodMonth = month(a.JobOrderDate) and d.CustomerCode = a.CustomerCode
	  left join gnMstLookupDtl e on e.CompanyCode = a.CompanyCode
			and e.CodeID = 'CIRS'
			and e.LookupValue = d.VisitInitial
	  left join gnMstLookUpDtl f on b.CompanyCode = a.CompanyCode
			and f.CodeId = 'CCRS'
			and f.LookUpValue = d.CustomerCategory
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode	= @BranchCode
	   ) b
END
END
GO
create procedure [dbo].[uspfn_sp_partinquiry_locationhq]
	@CompanyCode varchar(15),
	@PartNo varchar(32)
AS
SELECT 
	spMstItemLoc.BranchCode,
	spMstItemLoc.WarehouseCode,
	gnMstLookUpDtl.LookUpValueName,
	spMstItemLoc.LocationCode,
	spMstItemLoc.OnHand,
	spMstItemLoc.AllocationSP,
	spMstItemLoc.AllocationSL,
	spMstItemLoc.AllocationSR,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.OnOrder ELSE 0 END AS OnOrder,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.InTransit ELSE 0 END AS InTransit,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.BorrowQty ELSE 0 END AS BorrowQty,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.BorrowedQty ELSE 0 END AS BorrowedQty,
	spMstItemLoc.BackOrderSP,
	spMstItemLoc.BackOrderSL,
	spMstItemLoc.BackOrderSR,
	spMstItemLoc.ReservedSP,
	spMstItemLoc.ReservedSL,
	spMstItemLoc.ReservedSR
FROM spMstItemLoc
INNER JOIN spMstItems ON spMstItems.PartNo = spMstItemLoc.PartNo AND
    spMstItems.CompanyCode = spMstItemLoc.CompanyCode AND
    spMstItems.BranchCode = spMstItemLoc.BranchCode
INNER JOIN gnMstLookUpDtl ON gnMstLookUpDtl.LookUpValue = spMstItemLoc.WarehouseCode AND
    gnMstLookUpDtl.CompanyCode = spMstItemLoc.CompanyCode    
WHERE spMstItemLoc.CompanyCode=@CompanyCode
AND gnMstLookUpDtl.CodeID ='WRCD'
AND spMstItems.PartNo = @PartNo
AND gnMstLookUpDtl.LookUpValue NOT LIKE 'X%'
GO
create procedure [dbo].[uspfn_AbGetEmployeeWorkingExperience] (
	@CompanyCode varchar(17),
	@EmployeeID varchar(25)
)
as
begin
	select row_number() over (order by a.JoinDate) as [Index]
		 , a.CompanyCode
		 , a.EmployeeID
		 , a.NameOfCompany
		 , a.JoinDate
		 , a.ResignDate
		 , a.ReasonOfResign
		 , a.LeaderName
		 , a.LeaderPhone
		 , a.LeaderHP
	  from HrEmployeeExperience a
	 where 1=1
	   and a.CompanyCode=@CompanyCode
	   and a.EmployeeID=@EmployeeID
end
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferIn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @TransferInDateFrom DateTime,
 @TransferInDateTo DateTime,
 @NoTransferInFrom varchar(100),
 @NoTransferInTo varchar(100),
 @NoTransferOutFrom varchar(100),
 @NoTransferOutTo varchar(100),
 @GudangTujuanAwal varchar(100),
 @GudangTujuanAkhir varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'


SELECT 
	a.TransferInNo, 
	convert(varchar(20),a.TransferInDate,106) as TransferInDate,
	a.TransferOutNo, a.ReferenceNo, 
	case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate, 
	c.BranchName as BranchNameFrom, 
	(select b.RefferenceDesc1  from OmTrInventTransferIn x INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeFrom = b.RefferenceCode AND x.TransferInNo= a.TransferInNo)as WareHouseNameFrom , 
	d.BranchName as BranchNameTo, 
	(select b.RefferenceDesc1  from OmTrInventTransferIn x INNER JOIN omMstRefference b 
	ON x.CompanyCode = b.CompanyCode AND x.BranchCode = a.BranchCode
	AND x.WareHouseCodeTo = b.RefferenceCode AND x.TransferInNo= a.TransferInNo)as WareHouseNameTo, 
	case when year(a.ReturnDate) = ''1900'' then '''' else convert(varchar(20),a.ReturnDate,106) end as ReturnDate, 
	a.Remark, CASE WHEN a.Status = 0 THEN ''Open'' WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Closed'' WHEN a.Status = 3 THEN ''Canceled'' END AS Status
FROM 
	OmTrInventTransferIn a 
INNER JOIN 
	gnMstOrganizationDtl c 
	ON a.CompanyCode = c.CompanyCode
	AND a.BranchCodeFrom = c.BranchCode
INNER JOIN 
	gnMstOrganizationDtl d 
	ON a.CompanyCode = d.CompanyCode
	AND a.BranchCodeTo = d.BranchCode
WHERE 1 = 1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@TransferInDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.TransferInDate between ''' + convert(varchar(50),@TransferInDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@TransferInDateTo) + ''''

if len(rtrim(@NoTransferOutFrom)) > 0
   set @pQuery = @pQuery + ' and a.TransferOutNo between ''' + rtrim(@NoTransferOutFrom) + '''' + ' and ' + '''' + rtrim(@NoTransferOutTo) + ''''

if len(rtrim(@NoTransferInFrom)) > 0
   set @pQuery = @pQuery + ' and a.TransferInNo between ''' + rtrim(@NoTransferInFrom) + '''' + ' and ' + '''' + rtrim(@NoTransferInTo) + ''''

if len(rtrim(@GudangTujuanAwal)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCodeTo between ''' + rtrim(@GudangTujuanAwal) + '''' + ' and ' + '''' + rtrim(@GudangTujuanAkhir) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.TransferInNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
create procedure [dbo].[uspfn_GetElementSettings] (
	@HashLink varchar(100) 
)
as
begin
	select 
		* 
	from 
		SysMenuDms a
	--where
		--a.MenuUrl like '%@HashLink%'
end
GO
create procedure [dbo].[uspfn_sp_partinquiry_location]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@PartNo varchar(32)
AS
SELECT 
	spMstItemLoc.WarehouseCode,
	gnMstLookUpDtl.LookUpValueName,
	spMstItemLoc.LocationCode,
	spMstItemLoc.OnHand,
	spMstItemLoc.AllocationSP,
	spMstItemLoc.AllocationSL,
	spMstItemLoc.AllocationSR,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.OnOrder ELSE 0 END AS OnOrder,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.InTransit ELSE 0 END AS InTransit,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.BorrowQty ELSE 0 END AS BorrowQty,
	CASE spMstItemLoc.WarehouseCode WHEN '00' THEN spMstItems.BorrowedQty ELSE 0 END AS BorrowedQty,
	spMstItemLoc.BackOrderSP,
	spMstItemLoc.BackOrderSL,
	spMstItemLoc.BackOrderSR,
	spMstItemLoc.ReservedSP,
	spMstItemLoc.ReservedSL,
	spMstItemLoc.ReservedSR
FROM spMstItemLoc
INNER JOIN spMstItems ON spMstItems.PartNo = spMstItemLoc.PartNo AND
    spMstItems.CompanyCode = spMstItemLoc.CompanyCode AND
    spMstItems.BranchCode = spMstItemLoc.BranchCode
INNER JOIN gnMstLookUpDtl ON gnMstLookUpDtl.LookUpValue = spMstItemLoc.WarehouseCode AND
    gnMstLookUpDtl.CompanyCode = spMstItemLoc.CompanyCode    
WHERE spMstItemLoc.CompanyCode=@CompanyCode
AND spMstItemLoc.BranchCode= @BranchCode
AND gnMstLookUpDtl.CodeID ='WRCD'
AND spMstItems.PartNo = @PartNo
AND gnMstLookUpDtl.LookUpValue NOT LIKE 'X%'
GO
create procedure [dbo].[uspfn_spSelectPickingSlipLmp] @CompanyCode varchar(15), @BranchCode varchar(15), 
@ProductType varchar(4), @JobOrderNo varchar(25)
as
SELECT * INTO #t1 FROM (
                SELECT
                    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
                    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
                    d.PickedBy
                FROM
                    svTrnService a
                LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
	                AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
                LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
	                AND c.DocNo = b.SupplySlipNo
                LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
	                AND d.PickingSlipNo = c.ExPickingSlipNo
                LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
	                AND e.PickingSlipNo = d.PickingSlipNo
                LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
                    AND f.LookUpValue = c.TransType
                LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
                    AND g.PickingSlipNo = d.PickingSlipNo
                WHERE 
                    a.CompanyCode     = @CompanyCode
                    AND a.BranchCode  = @BranchCode
                    AND a.ProductType = @ProductType
                    AND a.jobOrderNo  = @JobOrderNo
                    AND b.SupplySlipNo <> ''
                    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		                   AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
                    AND d.Status <= 2
            )#t1
            SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
            DROP TABLE #t1
GO
CREATE procedure [dbo].[uspfn_GnDailyPostingBranch]
    @CompanyCode varchar(20),
    @BranchCode  varchar(20),
    @DocDate     date
as

set nocount on

begin transaction

declare @DbMD      varchar(50)
declare @SqlQry1   varchar(max)
declare @SqlQry2   varchar(max)
declare @SqlQry3   varchar(max)
declare @SqlQry4   varchar(max)

set @DbMD   = isnull((select top 1 DbMD from GnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode), '')

-- insert into SvSDMovement
set @SqlQry1 = N'
;with x as (
select a.CompanyCode
	, a.BranchCode
	, a.DocNo
	, a.DocDate
	, a.PartNo
	, a.PartSeq
	, a.WarehouseCode
	, a.QtyOrder
	, a.Qty
	, a.DiscPct
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.CompanyMD
	, a.BranchMD
	, a.WarehouseMD
	, a.RetailPriceInclTaxMD
	, a.RetailPriceMD
	, a.CostPriceMD
	, a.QtyFlag
	, a.ProductType
	, a.ProfitCenterCode
	, a.Status
	, a.CreatedBy
	, a.CreatedDate
	, a.LastUpdateBy
	, a.LastUpdateDate
	, IsPosting = 0
	, PostingDate = getdate()
  from SvSDMovement a
 where 1 = 1
   and CompanyCode = '''+ @CompanyCode + N'''
   and BranchCode = '''+ @BranchCode + N'''
   and convert(date, DocDate) = '''+ convert(varchar, @DocDate, 112) + N'''
)
insert into ' + @DbMD + N'..SvMDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD, QtyFlag, ProductType, ProfitCenterCode, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, IsPosting, PostingDate)
select * from x
 where not exists (
   select top 1 1 from ' + @DbMD + N'..SvMDMovement
    where CompanyCode = x.CompanyCode
      and BranchCode = x.BranchCode
      and DocNo = x.DocNo
      and PartNo = x.PartNo
      and PartSeq = x.PartSeq
 )';

-- insert into spTrnSOrdHdr
set @SqlQry2 = N'
;with x as (
select a.CompanyMD as CompanyCode
	, a.BranchMD as BranchCode
	, DocNo = (
select top 1 DocumentPrefix + ''/'' 
     + right(convert(varchar, DocumentYear), 2) + ''/''
  from ' + @DbMD + '..gnMstDocument
 where CompanyCode = a.CompanyMD
   and BranchCode = a.BranchMD
   and DocumentType = ''SOC'')
	, DocSeq = (
select top 1 convert(varchar, DocumentSequence)
  from ' + @DbMD + '..gnMstDocument
 where CompanyCode = a.CompanyMD
   and BranchCode = a.BranchMD
   and DocumentType = ''SOC'')
	, row_number() over(order by a.DocNo) as SeqNo
	, DocDate = (select top 1 DocDate from ' + @DbMD + '..SvMdMovement where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and DocNo = a.DocNo)
	, UsageDocNo = a.DocNo
	, CustomerCode = a.CompanyCode
	, CustomerCodeBill = a.CompanyCode
	, CustomerCodeShip = a.CompanyCode
	, OrderNo = a.BranchCode
	, TypeOfGoods = a.TypeOfGoods
	, ProfitCenterCode
  from ' + @DbMD + '..SvMdMovement a
 where isnull(a.IsPosting, 0) = 0
   and CompanyCode = '''+ @CompanyCode + N'''
   and BranchCode = '''+ @BranchCode + N'''
 group by a.CompanyCode, a.BranchCode, a.CompanyMD, a.BranchMD, a.DocNo, a.TypeOfGoods, a.ProfitCenterCode
)
, y as (
select x.CompanyCode
	, x.BranchCode
	, (x.DocNo + right(''000000'' + convert(varchar, x.DocSeq + x.SeqNo), 6)) as DocNo
	, x.DocDate
	, x.UsageDocNo
	, UsageDocDate = x.DocDate
	, x.CustomerCode
	, x.CustomerCodeBill
	, x.CustomerCodeShip
	, 0 as isBO
	, 0 as isSubstitution
	, 1 as isIncludePPN
	, ''00'' as TransType
	, ''0'' as SalesType
	, 0 as IsPORDD
	, x.OrderNo
	, OrderDate = x.DocDate
	, TOPCode = isnull((select top 1 a.TopCode 
                  from ' + @DbMD + '..gnMstCustomerProfitCenter a
                 where CompanyCode = x.CompanyCode
                   and BranchCode = x.BranchCode
                   and CustomerCode = x.CustomerCode
                   and ProfitCenterCode = x.ProfitCenterCode), ''--'')
	, TOPDays = isnull((select b.ParaValue
                  from ' + @DbMD + '..gnMstCustomerProfitCenter a
                  join ' + @DbMD + '..gnMstLookupDtl b
                    on b.CompanyCode = a.CompanyCode
                   and b.CodeID = ''TOPC''
                   and b.LookUpValue = a.TopCode
                 where a.CompanyCode = x.CompanyCode
                   and a.BranchCode = x.BranchCode
                   and a.CustomerCode = x.CustomerCode
                   and a.ProfitCenterCode = x.ProfitCenterCode), ''0'')
	, ''CR'' PaymentCode
	, null as PaymentRefNo
	, 0 as TotSalesQty
	, 0 as TotSalesAmt
	, 0 as TotDiscAmt
	, 0 as TotDPPAmt
	, 0 as TotPPNAmt
	, 0 as TotFinalSalesAmt
	, 1 as isPKP
	, null as ExPickingSlipNo
	, null as ExPickingSlipDate
	, 5 as Status
	, 1 as PrintSeq
	, x.TypeOfGoods
	, ''DAILYPOSTING'' as CreatedBy
	, getdate() as CreatedDate
	, (select top 1 CreatedBy from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo) as LastUpdateBy
	, (select top 1 CreatedDate from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo) as LastUpdateDate
	, 0 isLocked
	, 0 isDropSign
  from x
)
insert into ' + @DbMD + '..spTrnSORDHdr (CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill, CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, IsPORDD, OrderNo, OrderDate, TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt, TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, isDropSign)
select * from y';

-- insert into spTrnSOrdDtl (1)
set @SqlQry3 = N'
;with x as (
select distinct a.CompanyMD as CompanyCode
	, a.BranchMD as BranchCode
	, DocNo = (select top 1 DocNo from ' + @DbMD + '..spTrnSORDHdr where CompanyCode = a.CompanyMD and BranchCode = a.BranchMD and UsageDocNo = a.DocNo)
	, a.PartNo, a.WarehouseCode, PartNoOriginal = a.PartNo
	, UsageDocNo = a.DocNo, CustomerCode = a.CompanyCode
	, a.ProfitCenterCode
	, a.ProductType
  from ' + @DbMD + '..SvMdMovement a
 where isnull(a.IsPosting, 0) = 0
   and CompanyCode = '''+ @CompanyCode + N'''
   and BranchCode = '''+ @BranchCode + N'''
)
, y as (
select x.*, b.LocationCode, ReferenceNo = x.UsageDocNo
	, ReferenceDate = (select top 1 DocDate from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, QtyOrder = (select sum(QtyOrder) from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, QtySupply = (select sum(Qty) from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, QtyBill = (select sum(Qty) from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, RetailPriceInclTax = (select top 1 RetailPriceInclTaxMD from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, RetailPrice = (select top 1 RetailPriceMD from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, CostPrice = (select top 1 CostPrice from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, isnull(c.DiscPct, 0) as DiscPct
	, CreatedBy = (select top 1 CreatedBy from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, CreatedDate = (select top 1 CreatedDate from ' + @DbMD + '..SvMdMovement where CompanyMD = x.CompanyCode and BranchMD = x.BranchCode and DocNo = x.UsageDocNo and PartNo = x.PartNo and WarehouseCode = x.WarehouseCode)
	, c.TaxCode
  from x
  left join ' + @DbMD + '..spMstItemLoc b
    on b.CompanyCode = x.CompanyCode 
   and b.BranchCode = x.BranchCode
   and b.PartNo = x.PartNo
   and b.WarehouseCode = x.WarehouseCode
  left join ' + @DbMD + '..gnMstCustomerProfitCenter c
    on c.CompanyCode = x.CompanyCode 
   and c.BranchCode = x.BranchCode
   and c.CustomerCode = x.CustomerCode
   and c.ProfitCenterCode = x.ProfitCenterCode
)
, z as (
select y.*
	, y.QtyBill * y.RetailPrice as SalesAmt
	, y.DiscPct * (y.QtyBill * y.RetailPrice) * 0.01 as DiscAmt
	, (1 - (y.DiscPct * 0.01)) * y.QtyBill * y.RetailPrice as NetSalesAmt
	, (1 - (y.DiscPct * 0.01)) * y.QtyBill * y.RetailPrice * (isnull(c.TaxPct, 0)) * 0.01 as PpnAmt
	, b.MovingCode, b.ABCClass, b.PartCategory
  from y
  left join ' + @DbMD + '..spMstItems b
    on b.CompanyCode = y.CompanyCode
   and b.BranchCode = y.BranchCode
   and b.PartNo = y.PartNo
  left join ' + @DbMD + '..gnMstTax c
    on c.CompanyCode = y.CompanyCode 
   and c.TaxCode = y.TaxCode
)
select * into ##TSOrdDtl from z
';

-- insert into spTrnSOrdDtl (2)
set @SqlQry4 = N'
insert into ' + @DbMD + '..spTrnSORDDtl (CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, PartCategory, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
select CompanyCode
	, BranchCode
	, DocNo
	, PartNo
	, WarehouseCode
	, PartNoOriginal
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyOrder
	, QtySupply
	, 0 QtyBO
	, 0 QtyBOSupply
	, 0 QtyBOCancel
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, PPNAmt
	, (NetSalesAmt - PPNAmt)TotSalesAmt
	, MovingCode
	, ABCClass
	, ProductType
	, PartCategory
	, 5 as Status
	, ''DAILYPOSTING'' as CreatedBy
	, getdate() CreatedDate
	, CreatedBy as LastUpdateBy
	, CreatedDate as LastUpdateDate
	, CreatedBy as StockAllocatedBy
	, CreatedDate as StockAllocatedDate
	, QtyOrder as FirstDemandQty
  from ##TSOrdDtl a

;with x as (select top 1 * from ##TSOrdDtl order by DocNo desc)
,y as (
select a.CompanyCode, a.BranchCode, a.DocumentType, a.DocumentPrefix
     , a.DocumentYear, a.DocumentSequence, x.DocNo
	 , convert(int, right(x.DocNo, 6)) DocSeqNew
  from ' + @DbMD + '..gnMstDocument a
  join x
    on a.CompanyCode = x.CompanyCode
   and a.BranchCode = x.BranchCode
   and a.DocumentType = ''SOC''
)
update y set DocumentSequence = DocSeqNew';

--print (@SqlQry1)
--print (@SqlQry2)

exec (@SqlQry1)
exec (@SqlQry2)
exec (@SqlQry3)
exec (@SqlQry4)

rollback transaction
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesOrder] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @SODateFrom DateTime,
 @SODateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @CustomerCodeFrom varchar(100),
 @CustomerCodeTo varchar(100),
 @SalesmanFrom varchar(100),
 @SalesmanTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.SONo, 
convert(varchar(20),a.SODate,106) as SODate, 
a.RefferenceNo, a.CustomerCode,  case a.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
b.CustomerName, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address, 
c.EmployeeName AS SalesmanName, d.RefferenceDesc1 AS WareHouseName, 
e.CustomerName AS BillTo, f.CustomerName AS ShipTo, g.RefferenceDesc1 AS GroupPriceName, a.Remark, 
CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 4 THEN ''Rejected''
WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM 
	omTrSalesSO a
LEFT JOIN 
	GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN 
	GnMstEmployee c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.EmployeeID = a.Salesman
LEFT JOIN 
	OmMstRefference d ON d.CompanyCode = a.CompanyCode AND d.RefferenceCode = a.WareHouseCode AND d.RefferenceType = ''WARE''
LEFT JOIN 
	GnMstCustomer e ON e.CompanyCode = a.CompanyCode AND e.CustomerCode = a.BillTo
LEFT JOIN 
	GnMstCustomer f ON f.CompanyCode = a.CompanyCode AND f.CustomerCode = a.ShipTo
LEFT JOIN 
	OmMstRefference g ON g.CompanyCode = a.CompanyCode AND g.RefferenceCode = a.GroupPriceCode AND g.RefferenceType = ''GRPR''
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@SODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.SODate between ''' + convert(varchar(50),@SODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@SODateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@CustomerCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerCodeFrom) + '''' + ' and ' + '''' + rtrim(@CustomerCodeTo) + ''''

if len(rtrim(@SalesmanFrom)) > 0
   set @pQuery = @pQuery + ' and a.Salesman between ''' + rtrim(@SalesmanFrom) + '''' + ' and ' + '''' + rtrim(@SalesmanTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.SONo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
create procedure [dbo].[uspfn_Cs3DayCallSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , Chassis
     , IsDeliveredA
     , IsDeliveredB
     , IsDeliveredC
     , IsDeliveredD
     , IsDeliveredE
     , IsDeliveredF
     , IsDeliveredG
     , Comment
     , Additional
     , Status
     , FinishDate
     , CreatedBy
     , CreatedDate
     , UpdatedBy
     , UpdatedDate
  from CsTDayCall
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_Cs3DayCallSend @LastUpdateDate='2013-01-01', @Segment=1
GO
CREATE procedure [dbo].[uspfn_omSlsBPKLkpDO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @ProfitCenterCode varchar(15)
 )  
AS 

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
 
BEGIN  
-- exec uspfn_omSlsBPKLkpDO  6006410,600641001,'100'
SET @QRYTemp =
	'SELECT Distinct a.DONo, a.DODate, a.SONo, g.SKPKNo, g.RefferenceNo, a.CustomerCode ,c.CustomerName, 
            c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4 as Address,
            a.ShipTo, c1.CustomerName as ShipName, 
            a.WareHouseCode, f.LookUpValueName as WareHouseName, a.Expedition, e.SupplierName as ExpeditionName,
            b.SalesType,(CASE ISNULL(b.SalesType, 0) WHEN 0 THEN ''WholeSales'' ELSE ''Direct'' END) AS SalesTypeDsc, a.Remark
            FROM omTrSalesDO a
            LEFT JOIN gnMstCustomerProfitCenter b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.CustomerCode = a.CustomerCode
			LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.CustomerCode
            LEFT JOIN gnMstCustomer c1 ON c1.CompanyCode = a.CompanyCode AND c1.CustomerCode = a.ShipTo
			LEFT JOIN  omTrSalesDODetail d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode AND d.DoNo = a.DoNo
			LEFT JOIN gnMstSupplier e ON e.CompanyCode = a.CompanyCode AND e.SupplierCode = a.Expedition 
			LEFT JOIN ' + @DBMD + '.dbo.gnMstLookUpDtl f ON f.CompanyCode = ''' + @CompanyMD + ''' AND f.LookUpValue = a.WareHouseCode and f.CodeID =''MPWH''
            LEFT JOIN omTrSalesSO g ON a.CompanyCode = g.CompanyCode AND a.BranchCode = g.BranchCode AND a.SONo = g.SONo            
            WHERE a.Status = ''2''
            and d.StatusBPK <> ''1''  
            AND a.CompanyCode = ''' + @CompanyCode + '''
            AND b.BranchCode = ''' + @BranchCode + '''
			AND b.ProfitCenterCode = ''' + @ProfitCenterCode + '''                   
            ORDER BY a.DONo ASC'

	EXEC (@QRYTemp);
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesReq] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @Jenis varchar(10),
 @PermohonanDateFrom DateTime,
 @PermohonanDateTo DateTime,
 @NoPermohonanFrom varchar(100),
 @NoPermohonanTo varchar(100),
 @CustomerCode varchar(100),
 @CustomerCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT a.ReqNo,convert(varchar(20),a.ReqDate,106) as ReqDate, a.ReffNo, case when year(a.ReffDate) = ''1900'' then '''' else convert(varchar(20),a.ReffDate,106) end as ReffDate, 
b.CustomerName AS SubDealerName, CASE ISNULL(StatusFaktur, ''0'') WHEN ''0'' THEN ''NON FAKTUR'' WHEN ''1'' THEN ''FAKTUR'' END AS StatusFaktur,
a.Remark, 
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM omTrSalesReq a
LEFT JOIN gnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.SubDealerCode
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@Jenis)) > 0
   set @pQuery = @pQuery + ' and a.StatusFaktur = ''' + rtrim(@Jenis) + ''''

if year(@PermohonanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.ReqDate between ''' + convert(varchar(50),@PermohonanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PermohonanDateTo) + ''''

if len(rtrim(@NoPermohonanFrom)) > 0
   set @pQuery = @pQuery + ' and a.ReqNo between ''' + rtrim(@NoPermohonanFrom) + '''' + ' and ' + '''' + rtrim(@NoPermohonanTO) + ''''

if len(rtrim(@CustomerCode)) > 0
   set @pQuery = @pQuery + ' and a.SubDealerCode between ''' + rtrim(@CustomerCode) + '''' + ' and ' + '''' + rtrim(@CustomerCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.ReqNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_TaxUpdateTotal]
	@CompanyCode nvarchar(25),
	@BranchCode nvarchar(25),
	@ProductType nvarchar(2),
	@Period datetime 

  as
  begin

update gnTaxPPN
set PPNStd= (
                isnull((	select	case when PPNStd > 0 then 0 else PPNStd end PPNStd
			                from	gnTaxPPN
			                where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(dateadd(month,-1,@Period))
					                and PeriodMonth = month(dateadd(month,-1,@Period)) 
					                and TaxType= '5'),0) +
                isnull((	select	sum(PPNStd)
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('1','2')),0)-
                isnull((	select	sum(PPNStd) 
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('3','4')),0)
            )
,PPNSdh= (
                isnull((	select	case when PPNSdh > 0 then 0 else PPNSdh end PPNSdh
			                from	gnTaxPPN
			                where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(dateadd(month,-1,@Period))
					                and PeriodMonth = month(dateadd(month,-1,@Period)) 
					                and TaxType= '5'),0) +
                isnull((	select	sum(PPNSdh)
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('1','2')),0)-
                isnull((	select	sum(PPNSdh) 
							from	gnTaxPPN 
							where	CompanyCode= a.CompanyCode and BranchCode= a.BranchCode
					                and ProductType= a.ProductType
					                and PeriodYear = year(@Period)
					                and PeriodMonth = month(@Period) 
									and TaxType in ('3','4')),0)
            )
from gnTaxPPN a
where
    CompanyCode= @CompanyCode
	AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    and ProductType= @ProductType and PeriodYear = year(@Period)
    and PeriodMonth = month(@Period) and TaxType = '5'
	end
GO
create procedure [dbo].[uspfn_Select4SalesModelYear]
	@CompanyCode varchar(17),
	@SalesModelCode varchar(25),
	@GroupPriceCode varchar(25)
as
	
begin
	SELECT DISTINCT 
		   a.*  
      FROM omMstModelYear a  
	  LEFT JOIN omMstPriceListSell b  
	    ON a.CompanyCode = b.CompanyCode  
	   AND a.SalesModelCode = b.SalesModelCode  
	   AND a.SalesModelYear = b.SalesModelYear  
	   AND b.GroupPriceCode = @GroupPriceCode  
	 WHERE a.CompanyCode = @CompanyCode  
	   AND a.SalesModelCode = @SalesModelCode  
	   AND a.Status = '1'  ORDER BY a.SalesModelYear ASC
end
GO
CREATE procedure [dbo].[uspfn_RepostingCancelInvoice]
  @CompanyCode  varchar(15),
  @BranchCode   varchar(15),
  @InvoiceNo	varchar(15)
as
begin

declare @CustomerCode as varchar(15)
declare @OldTotSrvAmt as decimal

set @CustomerCode = (select CustomerCodeBill from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo = @InvoiceNo)
set @OldTotSrvAmt = (select TotalSrvAmt from svTrnInvoice where CompanyCode = @CompanyCode and BranchCode = @BranchCode and InvoiceNo = @InvoiceNo)

delete from glInterface
 where ProfitCenterCode = '200'
   and StatusFlag = 0
   and CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and DocNo = @InvoiceNo

delete from arInterface
 where ProfitCenterCode = '200'
   and StatusFlag = 0
   and CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and DocNo = @InvoiceNo

update gnTrnBankBook set SalesAmt = SalesAmt - @OldTotSrvAmt
 where ProfitCenterCode = '200'
	and CompanyCode = @CompanyCode
	and BranchCode = @BranchCode
	and CustomerCode = @CustomerCode

end
GO
CREATE procedure [dbo].[uspfn_SvTrnCustVehicle]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ChassisCode varchar(15),
	@ChassisNo varchar (15),
	@TransPeriod DateTime
as  

select
    a.PoliceRegNo
   ,a.ServiceBookNo
   ,a.BasicModel
   ,a.TransmissionType
   ,a.ChassisCode
   ,a.ChassisNo
   ,a.EngineCode
   ,a.EngineNo
   ,a.ColourCode ColorCode
   ,rtrim(rtrim(a.ColourCode) +
    case isnull(f.RefferenceDesc2,'') when '' then '' else ' - ' end +
    isnull(f.RefferenceDesc2,'')) as ColorCodeDesc
   ,b.CustomerCode CustCode
   ,b.CustomerName CustName
   ,b.Address1 CustAddr1
   ,b.Address2 CustAddr2
   ,b.Address3 CustAddr3
   ,b.Address4 CustAddr4
   ,b.CityCode CustCityCode
   ,g.LaborDiscPct
   ,g.PartDiscPct
   ,g.MaterialDiscPct
   ,e.LookupValueName CustCityName
   ,b.PhoneNo
   ,b.FaxNo
   ,b.HPNo
   -- Contract No
   ,isnull(c.ContractNo,'') ContractNo
   ,case isnull(c.ContractNo,'') when '' then '' else c.EndPeriod end ContractEndPeriod
   ,c.IsActive ContractStatus
   ,case isnull(c.ContractNo,'')
      when '' then ''
      else (case c.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
    end ContractStatusDesc
   -- Club Code
   ,d.ClubCode
   ,case isnull(d.ClubCode,'') when '' then '' else a.ClubDateFinish end ClubEndPeriod
   ,d.IsActive ClubStatus
   ,case isnull(d.ClubCode,'')
      when '' then ''
      else (case d.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end)
    end ClubStatusDesc
   ,isnull(i.TaxCode,'') TaxCode
   ,isnull(j.TaxPct,0) TaxPct
  from svMstCustomerVehicle a with (nowait,nolock)
  left join gnMstCustomer b with (nowait,nolock)
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join svMstContract c with (nowait,nolock)
    on c.IsActive = 1
   and c.CompanyCode = a.CompanyCode
   and c.ContractNo = a.ContractNo
   and c.BeginPeriod <= @TransPeriod
  left join svMstClub d with (nowait,nolock)
    on d.IsActive = 1
   and d.CompanyCode = a.CompanyCode
   and d.ClubCode = a.ClubCode
  left join gnMstLookupDtl e with (nowait,nolock)
    on e.CompanyCode = a.CompanyCode
   and e.CodeID = 'CITY'
   and e.LookUpValue = b.CityCode
  left join omMstRefference f with (nowait,nolock)
    on f.CompanyCode = a.CompanyCode
   and f.RefferenceCode = 'COLO'
   and f.RefferenceCode = a.ColourCode
  left join gnMstCustomerProfitCenter g with (nowait,nolock)
    on g.CompanyCode = a.CompanyCode
   and g.BranchCode = @BranchCode
   and g.CustomerCode = a.CustomerCode
   and g.ProfitCenterCode = '200'
  left join gnMstCustomerProfitCenter i with (nowait,nolock)
    on i.CompanyCode = a.CompanyCode
   and i.BranchCode = @BranchCode
   and i.CustomerCode = a.CustomerCode
   and i.ProfitCenterCode = '200'
  left join gnMstTax j with (nowait,nolock)
    on j.CompanyCode = a.CompanyCode
   and j.TaxCode = i.TaxCode
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.ChassisCode = @ChassisCode
   and a.ChassisNo = @ChassisNo
   and a.ClubDateStart <= @TransPeriod
GO
CREATE procedure [dbo].[sp_InsertHistoryItemStatusTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year numeric(10),
@Month numeric(10),
@CreatedBy varchar(10))


as

DELETE spHstItemStatus WHERE YEAR = @Year AND MONTH = @Month and CompanyCode = @CompanyCode and BranchCode = @BranchCode
SELECT
	a.CompanyCode     
	, a.BranchCode      
	, @Year Year                                    
	, @Month Month                                   
	, a.PartNo   
	, a.WarehouseCode            
	, b.MovingCode      
	, b.ABCClass 
	, ISNULL(c.PurchasePrice, 0) PurchasePrice                           
	, ISNULL(c.CostPrice, 0) CostPrice                               
	, ISNULL(c.RetailPrice, 0) RetailPrice                             
	, ISNULL(c.RetailPriceInclTax, 0) RetailPriceInclTax                     
	, ISNULL(b.LeadTime, 0) LeadTime                                
	, ISNULL(b.OrderPointQty, 0) OrderPoint                              
	, ISNULL(b.SafetyStock, 0) SafetyStock                             
	, ISNULL(b.OrderCycle, 0) OrderCycle                             
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(b.OnOrder, 0) ELSE 0 END OnOrder 
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(b.InTransit, 0) ELSE 0 END InTransit                              
	, ISNULL(a.OnHand, 0) OnHand                                  
	, ISNULL(a.AllocationSP, 0) AllocationSP                           
	, ISNULL(a.AllocationSR, 0) AllocationSR                            
	, ISNULL(a.AllocationSL, 0) AllocationSL                           
	, ISNULL(a.ReservedSP, 0) ReservedSP                             
	, ISNULL(a.ReservedSR, 0) ReservedSR                             
	, ISNULL(a.ReservedSL, 0) ReservedSL                             
	, ISNULL(a.BackOrderSP, 0) BackOrderSP                            
	, ISNULL(a.BackOrderSR, 0) BackOrderSR                           
	, ISNULL(a.BackOrderSL, 0) BackOrderSL                            
	, ISNULL(b.BorrowQty, 0) BorrowQty                              
	, ISNULL(b.BorrowedQty, 0) BorrowedQty                             
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(b.DemandAverage, 0) ELSE 0 END DemandAverage
	, (SELECT ISNULL(DiscPct, 0) FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) DiscPct                                
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN b.LastPurchaseDate ELSE '' END LastPurchaseDate       
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN b.LastDemandDate ELSE '' END LastDemandDate        
	, CASE WHEN a.WarehouseCode BETWEEN '00' AND '96' THEN b.LastSalesDate ELSE '' END LastSalesDate         
	, b.Status 
	, b.ProductType 
	, b.PartCategory 
	, b.TypeOfGoods 
	, @CreatedBy CreatedBy       
	, GETDATE() CreatedDate
INTO #TempHstItemStatus	
FROM
	spMstItemLoc a
	LEFT JOIN spMstItems b WITH(NOWAIT, NOLOCK) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
	LEFT JOIN spMstItemPrice c WITH(NOWAIT, NOLOCK) ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo	
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode

INSERT INTO SpHstItemStatus SELECT * FROM #TempHstItemStatus
DROP TABLE #TempHstItemStatus
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPurchaseReturn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @ReturnDateFrom DateTime,
 @ReturnDateTo DateTime,
 @HPPNoFrom varchar(100),
 @HPPNoTo varchar(100),
 @NoReturnFrom varchar(100),
 @NoReturnTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT DISTINCT
a.ReturnNo, 
convert(varchar(20),a.ReturnDate,106) as ReturnDate, 
a.RefferenceNo, 
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
a.HPPNo, a.RefferenceFakturPajakNo, a.Remark, 
CASE WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM 
omTrPurchaseReturn a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@ReturnDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.ReturnDate between ''' + convert(varchar(50),@ReturnDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@ReturnDateTo) + ''''

if len(rtrim(@HPPNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.HPPNo between ''' + rtrim(@HPPNoFrom) + '''' + ' and ' + '''' + rtrim(@HPPNoTo) + ''''

if len(rtrim(@NoReturnFrom)) > 0
   set @pQuery = @pQuery + ' and a.ReturnNo between ''' + rtrim(@NoReturnFrom) + '''' + ' and ' + '''' + rtrim(@NoReturnTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.ReturnNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_TaxRecalculatePPN]
	@CompanyCode nvarchar(15),
	@BranchCode nvarchar(15),
	@ProductType nvarchar(2),
	@PeriodYear int,
	@PeriodMonth int,
	@ProfitCenter nvarchar(15),
	@DocumentType nvarchar(2)

  as
  begin

update gnTaxPPN
set DPPStd=	(
            select 
                isnull(sum(DPPAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 1
        )
,DPPSdh= (
            select 
                isnull(sum(DPPAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 0
        )
,PPNStd= (
            select 
                isnull(sum(PPNAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 1
        )
,PPNSdh= (
            select 
                isnull(sum(PPNAmt),0) 
            from 
                gnTaxIn
            where
                CompanyCode= @CompanyCode and BranchCode= @BranchCode
                and ProductType= @ProductType and PeriodYear= @PeriodYear
                and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
                and DocumentType= @DocumentType and IsPKP= 0
        )
where
CompanyCode= @CompanyCode and BranchCode= @BranchCode
and ProductType= @ProductType and PeriodYear= @PeriodYear
and PeriodMonth= @PeriodMonth and ProfitCenter= @ProfitCenter
and TaxType= case when @DocumentType= 'F' then '3' else '4' end
end
GO
CREATE procedure [dbo].[uspfn_omSlsBPKBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
 
BEGIN  
--exec uspfn_omSlsBPKBrowse 6006410,600641001
 SET @QRYTemp = 
 'SELECT Distinct a.BPKNo, a.BPKDate, a.DONo, a.SONo, d.SKPKNo, d.RefferenceNo, a.CustomerCode  , c.CustomerName , a.ShipTo , e.CustomerName as ShipToDsc,
            c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4 as Address, a.WareHouseCode, f.LookUpValueName as WrhDsc, a.Expedition,g.SupplierName as ExpeditionDsc,a.Status,
            CASE a.Status WHEN ''0'' THEN ''Open'' WHEN ''1'' THEN ''Printed'' WHEN ''2'' THEN ''Approved'' WHEN ''3'' THEN ''Canceled'' WHEN ''9'' THEN ''Finished'' END as StatusDsc       
            ,b.SalesType, CASE ISNULL(b.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales, a.Remark
            FROM omTrSalesBPK a
            LEFT JOIN gnMstCustomerProfitCenter b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.CustomerCode = b.CustomerCode AND b.ProfitCenterCode = ''100''
            LEFT JOIN gnMstCustomer c ON a.CompanyCode = c.CompanyCode AND a.CustomerCode = c.CustomerCode
            LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND a.SONo = d.SONo
            LEFT JOIN gnMstCustomer e ON a.CompanyCode = e.CompanyCode AND a.shipto = e.CustomerCode
            Left join ' + @DBMD + '.dbo.gnMstLookUpDtl f on f.CompanyCode = ''' + @CompanyMD + ''' and a.WarehouseCode=f.LookUpValue and f.CodeID=''MPWH''
            LEFT JOIN gnMstSupplier g ON a.CompanyCode = g.CompanyCode AND a.Expedition = g.SupplierCode
            WHERE a.CompanyCode = ''' + @CompanyCode + '''
               AND a.BranchCode = ''' + @BranchCode + '''                             
            ORDER BY a.BPKNo DESC'

	Exec (@QRYTemp);
End
GO
CREATE procedure [dbo].[uspfn_GnDailyPosting_branch]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@DocDate     date
as

set nocount on

declare @DbMD    varchar(50)
declare @SqlQry	 varchar(max)

set @DbMD   = isnull((select top 1 DbMD from GnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode), '')
set @SqlQry = N'
;with x as (
select a.CompanyCode
     , a.BranchCode
	 , a.DocNo
	 , a.DocDate
	 , a.PartNo
	 , a.PartSeq
	 , a.WarehouseCode
	 , a.Qty
	 , a.DiscPct
	 , a.CostPrice
	 , a.RetailPrice
	 , a.TypeOfGoods
	 , a.CompanyMD
	 , a.BranchMD
	 , a.WarehouseMD
	 , a.QtyFlag
	 , a.Status
	 , a.CreatedBy
	 , a.CreatedDate
	 , a.LastUpdateBy
	 , a.LastUpdateDate
	 , IsPosting = 0
	 , PostingDate = getdate()
  from SvSDMovement a
 where 1 = 1
   and CompanyCode = '''+ @CompanyCode + N'''
   and BranchCode = '''+ @BranchCode + N'''
   and convert(date, DocDate) = '''+ convert(varchar, @DocDate, 112) + N'''
)
insert into ' + @DbMD + N'..SvMDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, BranchMD, WarehouseMD, QtyFlag, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, IsPosting, PostingDate)
select * from x
 where not exists (
   select top 1 1 from ' + @DbMD + N'..SvMDMovement
    where CompanyCode = x.CompanyCode
	  and BranchCode = x.BranchCode
	  and DocNo = x.DocNo
	  and PartNo = x.PartNo
	  and PartSeq = x.PartSeq
 )';

--print (@SqlQry)
exec (@SqlQry)
GO
CREATE procedure [dbo].[uspfn_sp_inquiry_supply_slip_detail_sum]
	@companycode varchar(15), 
	@branchcode varchar(15), 
	@DocNo varchar(20)
 AS
SELECT 
	ISNULL(SUM(SalesAmt),0) SalesAmt, 
	ISNULL(SUM(DiscAmt),0) DiscAmt, 
	ISNULL(SUM(NetSalesAmt),0) DPPAmt 
FROM spTrnSLmpDtl 
WHERE 
	CompanyCode = @CompanyCode AND 
	BranchCode = @BranchCode AND 
	DocNo = @DocNo
GO
CREATE procedure [dbo].[uspfn_SppartView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@PosNo varchar(20))
   as
 SELECT 
                    a.POSNo, a.PartNo, b.PartName, CAST(a.OrderQty as decimal(18,2)) as OrderQty, 
                    a.OnOrder, a.Intransit, a.Received,a.DiscPct, a.PurchasePrice, 
                    Convert(varchar(10),a.SeqNo) SeqNo, a.SupplierCode, a.OnOrder, a.PartNoOriginal, 
                    a.TypeOfGoods 
                FROM 
                    spTrnPOrderBalance a 
                INNER JOIN spMstItemInfo b
                   ON b.PartNo      = a.PartNo
                  AND b.CompanyCode = a.CompanyCode
                WHERE a.CompanyCode = @CompanyCode
                  AND a.BranchCode  = @BranchCode
                  AND a.PosNo    like @PosNo
                ORDER BY a.POSNo DESC, a.SeqNo
GO
create procedure [dbo].[uspfn_GetRturSumAmtSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(15)
as
SELECT	ReturnNo, sum(QtyReturn) as TotReturQty, sum(ReturAmt) as TotReturAmt,
                        sum(DiscAmt) as TotDiscAmt, sum(NetReturAmt) as TotDPPAmt,
                        sum(PPNAmt) as TotPPNAmt, sum(TotReturAmt) as TotFinalReturAmt,
                        sum(CostAmt) as TotCostAmt 
                FROM	spTrnSRturSSDtl with (nolock, nowait)
                WHERE	CompanyCode = @CompanyCode
                        and BranchCode = @BranchCode
                        and ReturnNo = @ReturnNo
                GROUP BY ReturnNo
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usprpt_OmRpSalRgs033C] 
	@companycode varchar(max),
	@branchcode varchar(max),
	@period1 varchar(max),
	@period2 varchar(max),
	@tipe varchar(1)
AS
BEGIN
	declare @1 varchar(max)
	declare @2 int
	declare @seq int
	declare @columns varchar(max)
	declare @columns2 varchar(max)
	declare @columns3 varchar(max)
	declare @query varchar(max)

	-- TABLE I --
	select companygovname company, isnull(address1,'-') addr1, isnull(address2,'-') addr2, isnull(address3,'-') addr3, phoneno telp 
	from gnmstcoprofile where companycode = @companycode and branchcode = @branchcode

	-- TABLE II --
	select distinct convert(varchar, right(branchcode,2)) code from gnmstorganizationdtl where companycode = @companycode
	
	if(@tipe='A')

	begin
	-- TABLE III --

	--declare @1 varchar(max)
	--declare @2 int
	--declare @seq int
	--declare @columns varchar(max)
	--declare @columns2 varchar(max)
	--declare @columns3 varchar(max)
	--declare @query varchar(max)

	set @columns = ''
	set @columns2 = ''
	set @columns3 = ''

	set @2 = (select count(*) from gnmstorganizationdtl)
	set @seq = 1

	declare data cursor for
		select distinct cast(right(branchcode,2) as varchar) code from gnmstorganizationdtl
	open data
	fetch next from data into @1
	while @@fetch_status = 0 
	begin
		set @columns = @columns+'['+@1+']'	
		set @columns2 = @columns2+'isnull(['+@1+'],0) ['+@1+']'
		set @columns3 = @columns3+'isnull(['+@1+'],0)'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columns = @columns+', '
			set @columns2 = @columns2+', '
			set @columns3 = @columns3+'+'
		end
	 
		fetch next from data into @1
	end
	close data
	deallocate data

	set @columns2 = @columns2+', '+@columns3+' as Total'

	set @query = '
	select model, '+@columns2+'
	from (
		select code,model,sum(nilai) nilai
		from (
			select cast(right(a.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = '''+@companycode+''' 
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between '''+@period1+''' and '''+@period2+'''
			group by a.BranchCode, ltrim(c.salesmodeldesc)
			union ALL
			select cast(right(e.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = '''+@companycode+''' 
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between '''+@period1+''' and '''+@period2+'''
			group by e.BranchCode, ltrim(c.salesmodeldesc)
		) x
		group by code,model
	)p pivot
	(
	sum(nilai) for code in ('+@columns+')
	) as pvt 
	'
	print (@query)
	exec (@query)
	end
	
	else
	begin
		-- TABLE III --
	--declare @1 varchar(max)
	--declare @2 int
	--declare @seq int
	--declare @columns varchar(max)
	--declare @columns2 varchar(max)
	--declare @columns3 varchar(max)
	--declare @query varchar(max)

	set @columns = ''
	set @columns2 = ''
	set @columns3 = ''

	set @2 = (select count(*) from gnmstorganizationdtl)
	set @seq = 1

	declare data cursor for
		select distinct cast(right(branchcode,2) as varchar) code from gnmstorganizationdtl
	open data
	fetch next from data into @1
	while @@fetch_status = 0 
	begin
		set @columns = @columns+'['+@1+']'	
		set @columns2 = @columns2+'isnull(['+@1+'],0) ['+@1+']'
		set @columns3 = @columns3+'isnull(['+@1+'],0)'

		set @seq = @seq+1
		if (@seq <= @2)
		begin
			set @columns = @columns+', '
			set @columns2 = @columns2+', '
			set @columns3 = @columns3+'+'
		end
	 
		fetch next from data into @1
	end
	close data
	deallocate data

	set @columns2 = @columns2+', '+@columns3+' as Total'

	set @query = '
	select model, '+@columns2+'
	from (
		select code,model,sum(nilai) nilai
		from (
			select cast(right(a.branchcode,2) as varchar) code
				, ltrim(a.salesmodelcode) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = '''+@companycode+''' 
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between '''+@period1+''' and '''+@period2+'''
			group by a.BranchCode, a.salesmodelcode
			union
			select cast(right(e.branchcode,2) as varchar) code
				, ltrim(e.salesmodelcode) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = '''+@companycode+''' 
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between '''+@period1+''' and '''+@period2+'''
			group by e.BranchCode, e.salesmodelcode
		) x
		group by code,model
	)p pivot
	(
	sum(nilai) for code in ('+@columns+')
	) as pvt 
	'
	print (@query)
	exec (@query) 
	end
	
	
	-- Table IV --
	select distinct cast(right(branchcode,2) as varchar)+' : '+branchname keterangan from gnmstorganizationdtl 
		where companycode = @companycode

	-- Table V -- Total Per Branch
	set @query = '
	select '+@columns2+'
	from (
		select code,sum(nilai) nilai
		from (
			select cast(right(a.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(count(a.invoiceno),0) nilai
			from omtrsalesinvoicevin a
			inner join omtrsalesinvoice b on b.companycode = a.companycode 
				and b.branchcode = a.branchcode
				and b.invoiceno = a.invoiceno 
			left join ommstmodel c on c.companycode = a.companycode 
				and c.salesmodelcode = a.salesmodelcode	
			where a.companycode = '''+@companycode+''' 
				and b.status in (2,5)
				and convert(varchar, b.invoicedate, 112) between '''+@period1+''' and '''+@period2+'''
			group by a.BranchCode, a.salesmodelcode, c.salesmodeldesc
			union ALL
			select cast(right(e.branchcode,2) as varchar) code
				, ltrim(c.salesmodeldesc) model
				, isnull(sum(e.quantity),0)*-1 nilai
			from omtrsalesreturn d
			left join omtrsalesreturndetailmodel e on d.companycode = e.companycode 
				and d.branchcode = e.branchcode
				and d.returnno = e.returnno 
			left join ommstmodel c on c.companycode = e.companycode 
				and c.salesmodelcode = e.salesmodelcode	
			where d.companycode = '''+@companycode+''' 
				and d.status in (2,5)
				and convert(varchar, d.returndate, 112) between '''+@period1+''' and '''+@period2+'''
			group by e.BranchCode, e.salesmodelcode, c.salesmodeldesc
		) x
		group by code
	)p pivot
	(
	sum(nilai) for code in ('+@columns+')
	) as pvt 
	'
	print (@query)
	exec (@query)
END
GO
create procedure [dbo].[uspfn_GetSupSeq] @CompanyCode varchar(15), @BranchCode varchar(15), @DocNo varchar(25)
as
SELECT MAX (SupSeq) + 1 FROM spTrnSOSupply WITH(nowait,nolock)
WHERE CompanyCode = @CompanyCode AND
BranchCode = @BranchCode AND
DocNo = @DocNo
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesReturnDetailModel] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @ReturnNo varchar(100)
)
AS
BEGIN

SELECT *, (SELECT z.SalesModelDesc
			FROM omMstModelYear z
			WHERE a.CompanyCode = z.CompanyCode
			AND a.SalesModelCode = z.SalesModelCode
			AND a.salesmodelyear = z.salesmodelyear)  AS salesModelDesc
FROM    omTrSalesReturnDetailModel a
INNER JOIN
	omTrSalesReturnVIN b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.BPKNo = b.BPKNo
	AND a.ReturnNo = b.ReturnNo
	AND a.SalesModelCode = b.SalesModelCode
	AND a.SalesModelYear = b.SalesModelYear
WHERE a.CompanyCode = @p_CompanyCode
	AND a.BranchCode = @p_BranchCode
	AND a.ReturnNo = @ReturnNo

END
GO
create procedure [dbo].[uspfn_OmTrSalesInvoiceVinSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , BranchCode
	 , InvoiceNo
	 , BPKNo
	 , SalesModelCode
	 , SalesModelYear
	 , InvoiceSeq
	 , ColourCode
	 , ChassisCode
	 , ChassisNo
	 , EngineCode
	 , EngineNo
	 , COGS
	 , IsReturn
	 , CreatedBy
	 , CreatedDate
	 , LastUpdateBy
	 , LastUpdateDate
  from omTrSalesInvoiceVin
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_OmTrSalesInvoiceVinSend @LastUpdateDate='2013-01-01', @Segment=1
GO
create procedure [dbo].[uspfn_omSlsBPKLkpMdlCode]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpMdlCode 6006410,600641001,''
SELECT DISTINCT  
	a.CompanyCode
	,a.SalesModelCode
	,a.SalesModelDesc
	,a.FakturPolisiDesc
	,a.EngineCode
	,a.PpnBmCodeBuy
	,a.PpnBmPctBuy
	,a.PpnBmCodeSell
	,a.PpnBmPctSell
	,a.PpnBmCodePrincipal
	,a.PpnBmPctPrincipal
	,a.Remark
	,a.BasicModel
	,a.TechnicalModelCode
	,a.ProductType
	,a.TransmissionType
	,a.IsChassis
	,a.IsCbu
	,a.SMCModelCode
	,a.GroupCode
	,a.TypeCode
	,a.CylinderCapacity
	,a.fuel
	,a.ModelPrincipal
	,a.Specification
	,a.ModelLine
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.IsLocked
	,a.LockedBy
	,a.LockedDate
	,a.MarketModelCode
	,a.GroupMarketModel
	,a.ColumnMarketModel
FROM omMstModel a
INNER JOIN OmTrSalesDODetail b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND b.DONo = @DONo
AND b.StatusBPK = '0'
ORDER BY a.SalesModelCode ASC
end
GO
create procedure [dbo].[uspfn_spPickingHdrNonSales] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25)
as    
SELECT DISTINCT
                            spTrnSORDHdr.DocNo, 
                            spTrnSORDHdr.DocDate,
                            spTrnSPickingHdr.CustomerCode,
                            spTrnSPickingDtl.ReferenceNo,
                            spTrnSPickingDtl.ReferenceDate,
                            CONVERT(bit, 1) ChkSelect
                            FROM spTrnSPickingHdr 
                            LEFT JOIN spTrnSPickingDtl ON spTrnSPickingHdr.PickingSlipNo = spTrnSPickingDtl.PickingSlipNo AND
                                spTrnSPickingHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND
                                spTrnSPickingHdr.BranchCode = spTrnSPickingDtl.BranchCode
                            INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSPickingDtl.DocNo AND
                                spTrnSORDHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND
                                spTrnSORDHdr.BranchCode = spTrnSPickingDtl.BranchCode
                            WHERE spTrnSPickingHdr.PickingSlipNo = @PickingSlipNo AND
                            spTrnSPickingHdr.CompanyCode = @CompanyCode AND
                            spTrnSPickingHdr.BranchCode = @BranchCode
GO
create procedure [dbo].[uspfn_GetPTSeq] @CompanyCode varchar(15), @BranchCode varchar(15), @DocNo varchar(15),
@supSeq int
as
SELECT COUNT (*) 
FROM spTrnSOSupply
WHERE CompanyCode = @CompanyCode 
                AND BranchCode = @BranchCode
                AND DocNo = @DocNo
                AND SupSeq = @SupSeq
GO
create procedure [dbo].[uspfn_ReloadBPKBReminderResource]
as

begin
	declare @ParamDate datetime;
	declare @RecordCount int;
	
	set @ParamDate = convert(varchar(4), datepart(year, getdate()) )+ '-01-01';

	if object_id('CsLkuBpkbView') is not null
	begin
		select 'CsLkuBpkbView is exist';

		delete CsLkuBpkbView 
		 where BpkbDate >= @ParamDate

		set @RecordCount = ( select count(CompanyCode) from CsLkuBpkbView );

		if @RecordCount = 0
		begin
			select 'Record is null -> regenerating';

			drop table CsLkuBpkbView;
			
			with x as (
				select * from CsLkuBpkbViewSource
			)
			select *
			  into CsLkuBpkbView
			  from x
		end

		insert into CsLkuBpkbView
		select *
		  from CsLkuBpkbViewSource
		 where BpkbDate >= @ParamDate
	end
	else
	begin
		select 'CsLkuBpkbView is not exists';

		with x as (
			select * from CsLkuBpkbViewSource
		)
		select *
		  into CsLkuBpkbView
		  from x
	end

end;
GO
CREATE procedure [dbo].[uspfn_GnGetPostingDate]
	@CompanyCode varchar(20)

as

select isnull((select top 1 dateadd(d, 1, PostingDate) from GnDailyPostingHist where CompanyCode = @CompanyCode order by PostingDate desc), (select top 1 DocDate from SvSdMovement order by DocDate)) as PostingDate
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquirySalesReturn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @ReturnDateFrom DateTime,
 @ReturnDateTo DateTime,
 @NoInvFrom varchar(100),
 @NoInvTo varchar(100),
 @NoReturnFrom varchar(100),
 @NoReturnTo varchar(100),
 @CustomerFrom varchar(100),
 @CustomerTo varchar(100),
 @WarehouseFrom varchar(100),
 @WarehouseFromTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.ReturnNo, b.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.ReturnDate,106) as ReturnDate, 
a.ReferenceNo, 
case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate, 
a.InvoiceNo, 
case when year(a.InvoiceDate) = ''1900'' then '''' else convert(varchar(20),a.InvoiceDate,106) end as InvoiceDate, 
b.CustomerName, a.FakturPajakNo, 
case when year(a.FakturPajakDate) = ''1900'' then '''' else convert(varchar(20),a.FakturPajakDate,106) end as FakturPajakDate, 
c.RefferenceDesc1 AS WareHouseName, a.Remark, 
CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Deleted''
WHEN a.Status = 9 THEN ''Finished''
END as Status 
FROM 
	omTrSalesReturn a
LEFT JOIN 
	GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN 
	OmMstRefference c ON c.CompanyCode = a.CompanyCode AND c.RefferenceCode = a.WareHouseCode AND c.RefferenceType = ''WARE''
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@ReturnDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.ReturnDate between ''' + convert(varchar(50),@ReturnDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@ReturnDateTo) + ''''

if len(rtrim(@NoInvFrom)) > 0
   set @pQuery = @pQuery + ' and a.InvoiceNo between ''' + rtrim(@NoInvFrom) + '''' + ' and ' + '''' + rtrim(@NoInvTo) + ''''

if len(rtrim(@NoReturnFrom)) > 0
   set @pQuery = @pQuery + ' and a.ReturnNo between ''' + rtrim(@NoReturnFrom) + '''' + ' and ' + '''' + rtrim(@NoReturnTo) + ''''

if len(rtrim(@CustomerFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerFrom) + '''' + ' and ' + '''' + rtrim(@CustomerTo) + ''''

if len(rtrim(@WarehouseFrom)) > 0
   set @pQuery = @pQuery + ' and a.WareHouseCode between ''' + rtrim(@WarehouseFrom) + '''' + ' and ' + '''' + rtrim(@WarehouseFrom) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.InvoiceNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[usprpt_GnGenerateSeqTaxWoBranchUnion]
	@CompanyCode as varchar(15)
	,@BranchCode as varchar(15)
	,@StartDate as varchar(8)
	,@FPJDate as varchar(8)
	,@ProfitCenterCode as varchar(3)
	,@UserId as varchar(15)
	,@DocNo as varchar(5000)
AS
BEGIN

--declare @CompanyCode as varchar(15)
--	,@BranchCode as varchar(15)
--	,@StartDate as varchar(8)
--	,@FPJDate as varchar(8)
--	,@ProfitCenterCode as varchar(3)
--	,@UserId as varchar(15)
--	,@DocNo as varchar(5000)

--set @CompanyCode = '6115204001'
--set @BranchCode = '6115204301'
--set @StartDate = '20140901'
--set @FPJDate = '20140909'
--set @ProfitCenterCode = '300'
--set @UserId = 'ga'
--set @DocNo = '|6115204301 INV/14/102569|'

declare @IsUnion as varchar(1)
set @IsUnion = '0'

if(select count(LookUpValue) from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH') > 0
	set @IsUnion = '1'

declare @t_tax table(
	CompanyCode varchar(15)
	,BranchCode varchar(15)
	,ProfitCenterCode varchar(3)
	,DocNo varchar(15)
	,DocDate varchar(15)
	,DueDate datetime 
	,RefNo varchar(15)
	,RefDate datetime
	,TaxTransCode varchar(2)
	,CustomerCodeBill varchar(15)
)

if @ProfitCenterCode='' or @ProfitCenterCode='300'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '300' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, convert(varchar,DueDate,112) DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
						AND CustomerCode = a.CustomerCodeBill AND ProfitCenterCode = '300'
			) AS TaxTransCode
			, CustomerCodeBill
	FROM	SpTrnSFPJHdr a
	WHERE	CompanyCode = @CompanyCode  
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end) = BranchCode+' '+InvoiceNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|'+BranchCode+' '+InvoiceNo+'|%')
	GROUP BY CompanyCode, BranchCode, InvoiceNo, CustomerCodeBill,convert(varchar,InvoiceDate,112),convert(varchar,DueDate,112), CustomerCodeBill
end

if @ProfitCenterCode='' or @ProfitCenterCode='200'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '200' AS ProfitCenterCode, FPJNo AS DocNo, convert(varchar,FPJDate,112) AS DocDate, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = SVTrnFakturPajak.CompanyCode AND BranchCode = SVTrnFakturPajak.BranchCode 
						AND CustomerCode = SVTrnFakturPajak.CustomerCodeBill AND ProfitCenterCode = '200'
			) AS TaxTransCode
			, CustomerCodeBill
	FROM	SVTrnFakturPajak
	WHERE	CompanyCode = @CompanyCode 
			AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			AND IsLocked= 0
			AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
			AND ((case when @ProfitCenterCode='' then BranchCode+' '+FPJNo end)=BranchCode+' '+FPJNo
				or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+FPJNo + '|%'
			)
end

if @ProfitCenterCode='' or @ProfitCenterCode='100'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '100' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, DueDate
			, '' AS RefNo, NULL AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = OmFakturPajakHdr.CompanyCode AND BranchCode = OmFakturPajakHdr.BranchCode 
						AND CustomerCode = OmFakturPajakHdr.CustomerCode AND ProfitCenterCode = '100') AS TaxTransCode
			, CustomerCode
	FROM	OmFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
		AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
			or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
		)
end

if @ProfitCenterCode='' or @ProfitCenterCode='000'
begin
	insert into @t_tax
	SELECT	CompanyCode, BranchCode, '000' AS ProfitCenterCode, InvoiceNo AS DocNo, convert(varchar,InvoiceDate,112) AS DocDate, DueDate
			, FPJNo AS RefNo, FPJDate AS RefDate
			,(
				SELECT	ISNULL(TaxTransCode, '') 
				FROM	GnMstCustomerProfitCenter 
				WHERE	CompanyCode = ARFakturPajakHdr.CompanyCode AND BranchCode = ARFakturPajakHdr.BranchCode 
						AND CustomerCode = ARFakturPajakHdr.CustomerCode AND ProfitCenterCode = '000'
			) AS TaxTransCode
			, CustomerCode
	FROM	ARFakturPajakHdr
	WHERE	CompanyCode = @CompanyCode 
			AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
		AND ((case when @ProfitCenterCode='' then BranchCode+' '+InvoiceNo end)=BranchCode+' '+InvoiceNo
			or (case when @ProfitCenterCode<>'' then @DocNo end) like '%|' + BranchCode+' '+InvoiceNo + '|%'
		)
end

select * into #f1
from (
	select row_number() over(order by a.BranchCode,a.DocDate,b.LookupValue,a.CustomerCodeBill,a.ProfitCenterCode asc) OrderNo,a.*,isnull(b.LookupValue,'')LookupValue
	from @t_tax a
	left join gnMstLookupDtl b on b.CompanyCode = a.CompanyCode
		and b.CodeID = 'FPJG'
		and b.LookupValue = a.CustomerCodeBill	
) #f1  order by LookupValue desc
		
SELECT	* INTO #f2 
FROM 
	( 
		SELECT  TaxCabCode 
		FROM	GnMstCoProfile  
		WHERE	CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
) #f2 

-- create FPJGovNo
select * into #f3 
from (
	select 
		a.OrderNo,a.CompanyCode,a.BranchCode,year(DocDate) PeriodTaxYear
		,month(DocDate) PeriodTaxMonth,ProfitCenterCode
		,DocDate as FPJGovDate,DocNo,convert(datetime,DocDate) DocDate,RefNo,RefDate,@UserId CreatedBy,getDate() CreatedDate
		,TaxTransCode
		,CustomerCodeBill
		,LookupValue
	from 
		#f1 a	
) #f3

--drop table #f3, #f1, #f2

if convert(varchar,@FPJDate,112) < '20130401'
begin
	select * into #f4 from(
		select * 		
			, LEFT(TaxTransCode+'000',3)+'.'+
			RIGHT('000'+isnull((select TaxCabCode from #f2),'000'),3)+'-'+
			RIGHT( isnull(convert(varchar(4),year(DocDate)),year(getDate())),2 )+'.'+ 
			RIGHT( '00000000'+convert(varchar,isnull(
												(select	isnull(FPJSeqNo,0)
												from	GnMstFPJSeqNo
												where	CompanyCode= a.CompanyCode and BranchCode= @BranchCode
														and Year= year(DocDate)
														and convert(varchar,EffectiveDate,112) < '20130401'), 0)+a.OrderNo
												),8 )FPJGovNo
			from #f3 a
	)#f4
	
	--insert to tabel GenerateTax
	insert into
		GnGenerateTax(
			CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
			FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	) 
	select 
		CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
		FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
	from 
		#f4
	
	drop table #f1
	drop table #f2

	-- update Master Sequence
	update	GnMstFPJSeqNo
	set		FPJSeqNo = FPJSeqNo + isnull((select max(OrderNo) from #f4),0)
	from	GnMstFPJSeqNo
	where	CompanyCode= @CompanyCode and BranchCode= @BranchCode and Year= (select top 1 PeriodTaxYear from #f3)
	
	-- update Sparepart
	update	SPTrnSFPJHdr
	set		FPJGovNo= a.FPJGovNo
			,FPJSignature= a.FPJGovDate
	from	#f4 a, SPTrnSFPJHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Service
	update	SVTrnFakturPajak
	set		FPJGovNo= a.FPJGovNo
			,SignedDate= a.FPJGovDate
	from	#f4 a, SVTrnFakturPajak b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.FPJNo

	-- update Sales
	update	OmFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate 
	from	#f4 a, OmFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	-- update Finance
	update	ArFakturPajakHdr
	set		FakturPajakNo= a.FPJGovNo
			,FakturPajakDate= a.FPJGovDate
	from	#f4 a, ArFakturPajakHdr b
	where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo

	--select top 1 convert(decimal,right(FPJGovNo,8)) from #f4 order by right(FPJGovNo,8) desc
	drop table #f3,#f4
end
else
begin
 ---------------------------------------------------------------------------------------------------
 --									Region Setelah Tanggal 1 April 2013                           --
 ---------------------------------------------------------------------------------------------------
	Declare @TotalFPJ				varchar(25)
	Declare @TotalFPJX				varchar(25)
	Declare @EndFPJ					varchar(25)
	Declare @CurrentFPJ				varchar(25)
	Declare @CountFPJNo				int
	Declare @CountUnValidFPJ		int
	Declare @CurrentDocNo			varchar(100)
	Declare @CurrentCompanyCode		varchar(15)
	Declare @CurrentBranchCode		varchar(15)
	Declare @CurrentTaxTransCode	varchar(2)
	Declare @CurrentCustCodeBill	varchar(15)			
			
	select * into #tblSeqNoFPJ from (
		select row_number() over(order by CompanyCode, BranchCode ,Year ,SeqNo asc) OrderNo, *
		  from GnMstFPJSeqNo with (NOLOCK, NOWAIT)
		 where CompanyCode = @CompanyCode 
			and 
			(
				(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
					or (case when @IsUnion = 1 then BranchCode end) = 
						(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
			)
			and Year = YEAR(getdate()) 
			and isActive = 1
			and EffectiveDate <= getdate()
			and isnull(BeginTaxNo,'') <> '' 
			and isnull(EndTaxNo,'') <> ''
	)#tblSeqNoFPJ	
				
	set @TotalFPJ = isnull((select TOP 1 FPJSeqNo from #tblSeqNoFPJ order by SeqNo Asc),'')
	set @EndFPJ = isnull((select TOP 1 EndTaxNo from #tblSeqNoFPJ order by SeqNo asc),'')
	set @CountFPJNo = (select SUM(convert(bigint,EndTaxNo) - convert(bigint,FPJSeqNo)) from #tblSeqNoFPJ where LEN(FPJSeqNo) <= 11) 			
						
	if (@TotalFPJ = '0' or @TotalFPJ = '')
	begin
		drop table #f1, #f2, #f3, #tblSeqNoFPJ
		raiserror('Tidak terdapat No Faktur Pajak yang aktif. Silahkan setting No Faktur Pajak terlebih dahulu',16 ,1);
		return
	end
	else
	begin
		if @CountFPJNo - isnull((select max(OrderNo) from #f1),0) < 0
		begin
			drop table #f1, #f2, #f3, #tblSeqNoFPJ
			raiserror('Faktur Pajak Aktif tidak mencukupi jumlah dokumen yang diperlukan. Silahkan setting No Faktur Pajak dengan no seq aktif selanjutnya.',16 ,1);
			return
		end
	end
	
	declare @Awal as bit
	declare @CCodeBill as varchar(15)
	set @Awal = 1	
									
	DECLARE temp CURSOR FOR
	SELECT	CompanyCode, BranchCode, DocNo, TaxTransCode, CustomerCodeBill
	FROM	#f3 

	OPEN temp
	FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode,@CurrentCustCodeBill
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		if @Awal = 1
		begin -- -1
			print 'Nothing to do'
			set @Awal = 0
			set @CCodeBill = @CurrentCustCodeBill
		end	--	-1		
		else
		begin	-- 0			
			if @CurrentCustCodeBill = (select top 1 LookupValue from gnMstLookupDtl where CompanyCode = @CurrentCompanyCode and CodeID = 'FPJG' and LookupValue = @CurrentCustCodeBill)
			begin --1
				if @CCodeBill = @CurrentCustCodeBill
				begin
					print @CurrentFPJ + ' for ' + @CurrentCustCodeBill				
				end
				else
				begin
					print 'update ' + convert(varchar, convert(bigint,@TotalFPJ) + 1)
					-- update Master Sequence
					if convert(bigint,@TotalFPJ) + 1 < convert(bigint,@EndFPJ)
					begin
						update	GnMstFPJSeqNo
						set		FPJSeqNo = convert(bigint,@TotalFPJ) + 1
						where	CompanyCode= @CompanyCode
							and 
							(
								(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
							)
						  and	Year = YEAR(getdate())
						  and	SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
											and 
											(
												(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
											)
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end
					else
					begin
						update GnMstFPJSeqNo
						set FPJSeqNo = convert(bigint,@TotalFPJ) + 1, isActive = 0
						where CompanyCode = @CompanyCode
							and 
							(
								(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
							)
						  and Year = YEAR(getdate())
						  and SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
											and 
											(
												(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
											)
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end
				end
			end
			else
			begin
				if @CCodeBill = @CurrentCustCodeBill
				begin
					print @CurrentFPJ + ' for ' + @CurrentCustCodeBill					
				end
				else
				begin					
					print 'update ' + convert(varchar, convert(bigint,@TotalFPJ) + 1)
					 --update Master Sequence
					if convert(bigint,@TotalFPJ) + 1 < convert(bigint,@EndFPJ)
					begin --3
						update	GnMstFPJSeqNo
						set		FPJSeqNo = convert(bigint,@TotalFPJ) + 1
						where	CompanyCode= @CompanyCode
						  and	(
									(case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								) 
						  and	Year = YEAR(getdate())
						  and	SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
										  and	(
													(case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
												) 
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end --3
					else
					begin --4
						update GnMstFPJSeqNo
						set FPJSeqNo = convert(bigint,@TotalFPJ) + 1, isActive = 0
						where CompanyCode = @CompanyCode
						  and	(
									(case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								) 
						  and Year = YEAR(getdate())
						  and SeqNo = (select MIN(SeqNo)
										   from GnMstFPJSeqNo 
										  where CompanyCode = @CompanyCode 
										  and	(
													(case when @IsUnion = 0 then BranchCode end)= @BranchCode
													or (case when @IsUnion = 1 then BranchCode end) = 
														(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
												) 
											and Year = YEAR(getdate())
											and isActive = 1
											and EffectiveDate <= getdate()
											and isnull(BeginTaxNo,0) <> 0 
											and isnull(EndTaxNo,0) <> 0)
					end --4
				end				
			end
		end
		
		set @CCodeBill = @CurrentCustCodeBill
		set @TotalFPJ =   (select FPJSeqNo
							  from GnMstFPJSeqNo
							 where CompanyCode = @CompanyCode 
								and 
								(
									(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
										or (case when @IsUnion = 1 then BranchCode end) = 
											(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								)
							   and Year = YEAR(getdate()) 
							   and isActive = 1
							   and EffectiveDate <= getdate()
							   and isnull(BeginTaxNo,'') <> '' 
							   and isnull(EndTaxNo,'') <> ''
							   and SeqNo = (select MIN(SeqNo)
											  from GnMstFPJSeqNo 
											 where CompanyCode = @CompanyCode 
												and 
												(
													(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
														or (case when @IsUnion = 1 then BranchCode end) = 
															(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
												)
												and Year = YEAR(getdate()) 
												and isActive = 1 
												and EffectiveDate <= getdate()
												and isnull(BeginTaxNo,0) <> 0 
												and isnull(EndTaxNo,0) <> 0))
		set @EndFPJ = (select EndTaxNo
							  from GnMstFPJSeqNo
							 where CompanyCode = @CompanyCode 
								and 
								(
									(	case when @IsUnion = 0 then BranchCode end)= @BranchCode
										or (case when @IsUnion = 1 then BranchCode end) = 
											(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								)
								and Year = YEAR(getdate()) 
							   and isActive = 1
							   and EffectiveDate <= getdate()
							   and isnull(BeginTaxNo,'') <> '' 
							   and isnull(EndTaxNo,'') <> ''
							   and SeqNo = (select MIN(SeqNo)
											  from GnMstFPJSeqNo 
											 where CompanyCode = @CompanyCode 
											   and BranchCode = @BranchCode
											   and Year = YEAR(getdate()) 
											   and isActive = 1 
											   and EffectiveDate <= getdate()
											   and isnull(BeginTaxNo,0) <> 0 
											   and isnull(EndTaxNo,0) <> 0))
											   
     
        set @TotalFPJX  = RIGHT('00000000000'+convert(varchar(11),@TotalFPJ),11)
		set @CurrentFPJ = (select LEFT (convert(varchar,@CurrentTaxTransCode) + '000',3)+'.'+
						   	      LEFT (convert(varchar,@TotalFPJX),3) + '-' +
								  RIGHT(convert(varchar,YEAR(getdate())),2) + '.' +
								  RIGHT('00000000'+convert(varchar,(convert(bigint,@TotalFPJ)+1)),8))											  		
		
		--insert to tabel GenerateTax
		insert into
			GnGenerateTax(
				CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode, FPJGovNo, 
				FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
		) 
		select 
			CompanyCode, BranchCode, PeriodTaxYear, PeriodTaxMonth, ProfitCenterCode
			, @CurrentFPJ FPJGovNo
			, FPJGovDate, DocNo, DocDate , RefNo, RefDate, CreatedBy, CreatedDate
		from 
			#f3
		where CompanyCode = @CurrentCompanyCode
		  and BranchCode = @CurrentBranchCode
		  and DocNo = @CurrentDocNo
		  and TaxTransCode = @CurrentTaxTransCode			
			  						
			---- update Sparepart
			update	SPTrnSFPJHdr
			set		FPJGovNo= @CurrentFPJ
					,FPJSignature= a.FPJGovDate
			from	#f3 a, SPTrnSFPJHdr b
			where	a.CompanyCode= b.CompanyCode and a.BranchCode= b.BranchCode and a.DocNo= b.InvoiceNo 
				and b.CompanyCode = @CurrentCompanyCode and b.BranchCode = @CurrentBranchCode and b.InvoiceNo = @CurrentDocNo

			-- update Service
			update	SVTrnFakturPajak
			set		FPJGovNo= @CurrentFPJ
					,SignedDate= a.FPJGovDate
			from	#f3 a, SVTrnFakturPajak b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.FPJNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.FPJNo = @CurrentDocNo

			-- update Sales
			update	OmFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.FPJGovDate 
			from	#f3 a, OmFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo

			-- update Finance
			update	ArFakturPajakHdr
			set		FakturPajakNo= @CurrentFPJ
					,FakturPajakDate= a.FPJGovDate
			from	#f3 a, ArFakturPajakHdr b
			where	a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.DocNo= b.InvoiceNo
				and b.CompanyCode = @CurrentCompanyCode  and b.BranchCode = @CurrentBranchCode  and b.InvoiceNo = @CurrentDocNo
				
			FETCH NEXT FROM temp INTO @CurrentCompanyCode,@CurrentBranchCode,@CurrentDocNo,@CurrentTaxTransCode,@CurrentCustCodeBill
		END
	CLOSE temp
	DEALLOCATE temp

	declare @countLoop as int = 0
	set @countLoop = (SELECT COUNT(*) FROM #f3)
	IF @countLoop = 1
	begin --4
		update GnMstFPJSeqNo
		set FPJSeqNo = convert(bigint,@TotalFPJ) + 1, isActive = 0
		where CompanyCode = @CompanyCode
		  and	(
					(case when @IsUnion = 0 then BranchCode end)= @BranchCode
					or (case when @IsUnion = 1 then BranchCode end) = 
						(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
				) 
		  and Year = YEAR(getdate())
		  and SeqNo = (select MIN(SeqNo)
						   from GnMstFPJSeqNo 
						  where CompanyCode = @CompanyCode 
						  and	(
									(case when @IsUnion = 0 then BranchCode end)= @BranchCode
									or (case when @IsUnion = 1 then BranchCode end) = 
										(select ParaValue from gnMstLookUpDtl where CompanyCode= @CompanyCode and LookUpValue=@BranchCode and CodeID='BRANCH')
								) 
							and Year = YEAR(getdate())
							and isActive = 1
							and EffectiveDate <= getdate()
							and isnull(BeginTaxNo,0) <> 0 
							and isnull(EndTaxNo,0) <> 0)
	end --4
					
	--select convert(varchar,convert(bigint,@TotalFPJ) + 1) FPJGovNo	
	drop table #f1, #f2, #f3, #tblSeqNoFPJ		
end	
	-- update TransDate Sparepart
	update GnMstCoProfileSpare 
	set TransDate = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDate, 112) < @FPJDate

	-- update TransDate Service
	update GnMstCoProfileService 
	set TransDate = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDate, 112) < @FPJDate 

	-- update TransDate Sales
	update GnMstCoProfileSales 
	set TransDate = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDate, 112) < @FPJDate 

	-- update TransDate Finance
	update GnMstCoProfileFinance 
	set TransDateAR = convert(datetime, @FPJDate) 
	WHERE CompanyCode= @CompanyCode and convert(datetime, TransDateAR, 112) < @FPJDate
	
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryTransferOutDetail] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @TransferOutNo varchar(15)
)
AS
BEGIN

SELECT Convert(varchar,a.TransferOutSeq) as TransferOutSeq,a.SalesModelCode,Convert(varchar,a.SalesModelYear) as SalesModelYear,b.SalesModelDesc,
a.ChassisCode,Convert(varchar,a.ChassisNo) as ChassisNo,a.EngineCode,Convert(varchar,a.EngineNo) as EngineNo,a.ColourCode,
c.RefferenceDesc1 as ColourName,a.Remark
FROM OmTrInventTransferOutDetail a
LEFT JOIN omMstModel b
ON a.CompanyCode = b.CompanyCode
AND a.SalesModelCode = b.SalesModelCode
LEFT JOIN omMstRefference c
ON a.CompanyCode = c.CompanyCode
AND a.ColourCode = c.RefferenceCode
WHERE c.RefferenceType = 'COLO'
AND a.CompanyCode = @p_CompanyCode
AND a.BranchCode = @p_BranchCode
AND a.TransferOutNo = @TransferOutNo
ORDER BY a.TransferOutSeq, a.SalesModelCode,a.SalesModelYear,a.ChassisNo ASC

END
GO
create procedure [dbo].[uspfn_spMstCompanyAccountDtl2] (@CompanyCode varchar(10) , @CompanyCodeTo varchar(10))
 as
SELECT [CompanyCode]
      ,[CompanyCodeTo]
      ,[TPGO]
      ,[TPGOName]
      ,[AccountNo]
      ,[AccountName]
FROM [sp_spMstCompanyAccountDtl]
where CompanyCode=@CompanyCode and CompanyCodeTo=@CompanyCodeTo
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPerlengkapanAdjustent] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PerlengkapanDateFrom DateTime,
 @PerlengkapanDateTo DateTime,
 @NoReffFrom varchar(100),
 @NoReffTo varchar(100),
 @NoAdjustmentFrom varchar(100),
 @NoAdjustmentTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.AdjustmentNo, 
convert(varchar(20),a.AdjustmentNo,106) as AdjustmentDate,
a.RefferenceNo,
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate,
CASE a.PerlengkapanType WHEN 1 THEN ''BPU'' WHEN 2 THEN ''Transfer'' WHEN 3 THEN ''Return'' ELSE a.PerlengkapanType END AS PerlengkapanType , a.Remark,
CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Deleted'' WHEN 3 THEN ''Canceled'' WHEN 9 THEN ''Finished'' END AS Status
FROM 
OmTrPurchasePerlengkapanAdjustment a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@PerlengkapanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PerlengkapanDate between ''' + convert(varchar(50),@PerlengkapanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PerlengkapanDateTo) + ''''

if len(rtrim(@NoReffFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceNo between ''' + rtrim(@NoReffFrom) + '''' + ' and ' + '''' + rtrim(@NoReffTo) + ''''

if len(rtrim(@NoAdjustmentFrom)) > 0
   set @pQuery = @pQuery + ' and a.AdjustmentNo between ''' + rtrim(@NoAdjustmentFrom) + '''' + ' and ' + '''' + rtrim(@NoAdjustmentTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.AdjustmentNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
create procedure [dbo].[uspfn_omSlsBPKLkpMdlYear]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15),
 @SalesModelCode varchar(20)
)  
AS  
begin
	SELECT DISTINCT a.*
FROM omMstModelYear a
INNER JOIN OmTrSalesDODetail b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode
AND b.salesModelYear = a.SalesModelYear
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND a.Status = '1'
AND b.StatusBPK = '0'
AND b.DONo = @DONo
AND b.SalesModelCode = @SalesModelCode					 
end
GO
create procedure [dbo].[uspfn_spUpdateIsExternal] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(20),
@UserId varchar(25)
as
if exists   (
    select isLocked from spTrnSORDHdr
    where companycode=@CompanyCode 
        and branchcode=@BranchCode 
        and docno in (select distinct docno from spTrnSPickingDtl where companycode=@CompanyCode and branchcode=@BranchCode 
            and pickingslipno=@PickingSlipNo)
        and isLocked = '1'
            )
begin
    update spTrnSPickingHdr
    set isLocked = '1', LockingBy= @UserId, LockingDate=getdate()
    where companycode=@CompanyCode and branchcode=@BranchCode and pickingslipno=@PickingSlipNo
end
GO
CREATE procedure [dbo].[uspfn_GetVehicleInfo_SubNew]  
 @CompanyCode  varchar(20),  
 @BranchCode   varchar(20),  
 @ProductType  varchar(10),  
 @PoliceRegNo  varchar(20),  
 @ChassisCode  varchar(20),  
 @ChassisNo    varchar(10),  
 @BasicModel   varchar(20),  
 @JobOrderDate varchar(20),
 @CustomerCode varchar(20),
 @IsAllBranch  bit = 1,
 @JobOrderNo   varchar(20)
 
as  
  
select * into #t1 from (  
select 0 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , c.MechanicId+' - '+  
  (  
  select EmployeeName   
  from gnMstEmployee   
  where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and EmployeeID=c.MechanicId  
  ) MechanicId  
     , a.ForemanId  
     , b.OperationNo  
     , isnull(b.OperationHour, 0) as OperationQty  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.0) as OperationAmt  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.1) as TotalSrvAmount  
     , isnull(b.SharingTask, 0) SharingTask  
     , case when f.Description is null then (select TOP 1 Description   
    from svMstTask   
     where BasicModel = a.BasicModel  
      and OperationNo = b.OperationNo) else f.Description end Description  
    , isnull(g.EmployeeName, '') NameSA  
    , isnull(h.EmployeeName, '') NameForeman  
    , b.CreatedDate  
 from svTrnService a with(nolock, nowait)  
 left join svTrnSrvTask b with(nolock, nowait)  
   on b.CompanyCode = a.CompanyCode  
  and b.BranchCode  = a.BranchCode  
  and b.ProductType = a.ProductType  
  and b.ServiceNo   = a.ServiceNo  
 left join svTrnSrvMechanic c with(nolock, nowait)  
   on c.CompanyCode = b.CompanyCode  
  and c.BranchCode  = b.BranchCode  
  and c.ProductType = b.ProductType  
  and c.ServiceNo   = b.ServiceNo  
  and c.OperationNo = b.OperationNo  
 left join svTrnInvoice d with(nolock, nowait)  
   on d.CompanyCode = a.CompanyCode  
  and d.BranchCode  = a.BranchCode  
  and d.InvoiceNo   = a.InvoiceNo  
 left join svMstRefferenceService e with(nolock, nowait)  
   on e.CompanyCode    = a.CompanyCode  
  and e.RefferenceCode = a.jobType  
  and e.ProductType    = a.ProductType  
  and e.RefferenceType = 'JOBSTYPE'  
 left join svMstTask f with(nolock, nowait)  
   on f.CompanyCode = b.CompanyCode  
  and f.ProductType = b.ProductType  
  and f.OperationNo = b.OperationNo   
  and f.JobType     = a.JobType  
  and f.BasicModel  = a.BasicModel  
 left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
  and g.BranchCode = a.BranchCode   
  and g.EmployeeId = a.ForemanID  
 left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
  and h.BranchCode = a.BranchCode   
  and h.EmployeeId = a.MechanicID  
where a.JobOrderNo <> ''  
  and a.CompanyCode = @CompanyCode  
  and a.BranchCode  = @BranchCode  
  and a.ProductType = @ProductType  
  and a.ChassisCode = @ChassisCode  
  and a.ChassisNo   = @ChassisNo  
  and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
  and a.CustomerCode = @CustomerCode
  and a.JobOrderNo = @JobOrderNo
) #t1  
  
--declare @t_spk_task as table(JobOrderNo varchar(20), OperationNo varchar(20))  
  
--insert into @t_spk_task   
--select a.JobOrderNo  
--  , isnull((  
--  select top 1 OperationNo from #t1  
--      where JobOrderNo = a.JobOrderNo  
--      order by CreatedDate   
--     ), '') OperationNo  
--  from #t1 a group by a.JobOrderNo  
  
insert into #t1  
select 1 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , ''  
     , ''  
     , b.PartNo  
     , (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) as OperationQty  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.0) as OperationAmt  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.1)
     , 1  
     , f.PartName  
     , isnull(g.EmployeeName, '') NameSA  
     , isnull(h.EmployeeName, '') NameForeman  
     , b.CreatedDate  
  from svTrnService a with(nolock, nowait)  
  left join svTrnSrvItem b with(nolock, nowait)  
    on b.CompanyCode = a.CompanyCode  
   and b.BranchCode  = a.BranchCode  
   and b.ProductType = a.ProductType  
   and b.ServiceNo   = a.ServiceNo  
  left join svTrnInvoice d with(nolock, nowait)  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode  = a.BranchCode  
   and d.InvoiceNo   = a.InvoiceNo  
  left join svMstRefferenceService e with(nolock, nowait)  
    on e.CompanyCode    = a.CompanyCode  
   and e.RefferenceCode = a.jobType  
   and e.ProductType    = a.ProductType  
   and e.RefferenceType = 'JOBSTYPE'  
  left join spMstItemInfo f with(nolock, nowait)  
    on f.CompanyCode = b.CompanyCode  
   and f.PartNo      = b.PartNo   
  left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
   and g.BranchCode = a.BranchCode   
   and g.EmployeeId = a.ForemanID  
  left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
   and h.BranchCode = a.BranchCode   
   and h.EmployeeId = a.MechanicID  
 where a.JobOrderNo <> ''  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and a.ProductType = @ProductType  
   and a.ChassisCode = @ChassisCode  
   and a.ChassisNo   = @ChassisNo  
   and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
   and a.CustomerCode = @CustomerCode
   and a.JobOrderNo = @JobOrderNo
;with x as (  
select a.JobOrderNo, a.OperationNo, a.TotalSrvAmount, b.TotalSrvAmount TotalSrvAmountNew  
  from #t1 a  
  left join svTrnService b  
    on b.CompanyCode = @CompanyCode  
   and b.BranchCode  = @BranchCode  
   and b.ProductType = @ProductType  
   and b.JobOrderNo  = a.JobOrderNo  
)  
update x set TotalSrvAmount = TotalSrvAmountNew  
  
select *  
from #t1 
where OperationQty > 0
order by JobOrderNo, TaskPartSeq, CreatedDate
  
drop table #t1
GO
CREATE PROCEDURE [dbo].[uspfn_spGetSpTrnSBPSFDtl]   
@CompanyCode varchar(15), @BranchCode varchar(15), @BPSFNo varchar(15)  
as  
select PartNo, PartNoOriginal, DocNo, DocDate, ReferenceNo, QtyBill from spTrnSBPSFDtl  
where CompanyCode = @CompanyCode and BranchCode = @BranchCode and BPSFNo = @BPSFNo
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryKaroseriTerima] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @KaroseriDateFrom DateTime,
 @KaroseriDateTo DateTime,
 @SalesModelCodeOldFrom varchar(100),
 @SalesModelCodeOldTo varchar(100),
 @SalesModelYearFrom varchar(100),
 @SalesModelYearTo varchar(100),
 @NoSPKKaroseriFrom varchar(100),
 @NoSPKKaroseriTo varchar(100),
 @NoKaroseriTerimaFrom varchar(100),
 @NoKaroseriTerimaTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.KaroseriTerimaNo, 
convert(varchar(20),a.KaroseriTerimaDate,106) as KaroseriTerimaDate,
a.RefferenceInvoiceNo,
case when year(a.RefferenceInvoiceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceInvoiceDate,106) end as RefferenceInvoiceDate,
a.RefferenceFakturPajakNo, 
case when year(a.RefferenceFakturPajakDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceFakturPajakDate,106) end  as RefferenceFakturPajakDate,
b.SupplierName, a.SalesModelCodeOld, a.SalesModelYear, a.SalesModelCodeNew, a.Quantity, 
a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.PPh, a.Total, case when year(a.DueDate) = ''1900'' then '''' else convert(varchar(20),a.DueDate,106) end as DueDate, a.Remark, 
CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Closed'' WHEN 3 THEN ''Canceled'' WHEN 9 THEN ''Finished'' END AS Status
FROM 
OmTrPurchaseKaroseriTerima a
LEFT JOIN 
gnMstSupplier b 
ON a.CompanyCode = b.CompanyCode 
AND a.SupplierCode =  b.SupplierCode  
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@KaroseriDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.KaroseriSPKDate between ''' + convert(varchar(50),@KaroseriDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@KaroseriDateTo) + ''''

if len(rtrim(@SalesModelCodeOldFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCodeOld between ''' + rtrim(@SalesModelCodeOldFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeOldFrom) + ''''

if len(rtrim(@SalesModelYearFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYearFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@NoSPKKaroseriFrom)) > 0
   set @pQuery = @pQuery + ' and a.KaroseriSPKNo between ''' + rtrim(@NoSPKKaroseriFrom) + '''' + ' and ' + '''' + rtrim(@NoSPKKaroseriTo) + ''''

if len(rtrim(@NoKaroseriTerimaFrom)) > 0
   set @pQuery = @pQuery + ' and a.KaroseriTerimaNo between ''' + rtrim(@NoKaroseriTerimaFrom) + '''' + ' and ' + '''' + rtrim(@NoKaroseriTerimaTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.KaroseriTerimaNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_omSlsDoBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS 

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 


BEGIN  
--exec uspfn_omSlsDoBrowse 6006410,600641001

 set @QRYTemp =  'SELECT Distinct a.DONo, a.DODate, d.SKPKNo, d.RefferenceNo, a.CustomerCode, c.CustomerName , a.ShipTo ,c.CustomerName as ShipToDsc,
            c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4 as Address,
            a.WareHouseCode, a.Expedition, a.SONo, f.CustomerName as ExpeditionDsc,a.Remark,
            CASE a.Status WHEN 0 THEN ''OPEN'' WHEN 1 THEN ''PRINT'' WHEN 2 THEN ''APPROVED'' WHEN 3 THEN ''CANCEL'' WHEN 9 THEN ''FINISH'' END as StatusDsc,a.Status
            , CASE ISNULL(b.SalesType, 0) WHEN 0 THEN ''Wholesales'' ELSE ''Direct'' END AS TypeSales, e.LookUpValueName as WrhDsc
            FROM omTrSalesDO a
            LEFT JOIN gnMstCustomerProfitCenter b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.CustomerCode = b.CustomerCode AND b.ProfitCenterCode = ''100''
            LEFT JOIN gnMstCustomer c ON a.CompanyCode = c.CompanyCode AND a.CustomerCode = c.CustomerCode
            LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND a.SONo = d.SONo      
            Left join ' + @DBMD + '.dbo.gnMstLookUpDtl e on a.WarehouseCode=e.LookUpValue and e.CodeID=''MPWH''
            LEFT JOIN gnMstCustomer f ON a.CompanyCode = c.CompanyCode AND a.Expedition = c.CustomerCode
            WHERE a.CompanyCode = ''' + @CompanyCode + '''
               AND a.BranchCode = ''' + @BranchCode + '''                             
            ORDER BY a.DONo DESC'

	exec (@QRYTemp);
end
GO
create procedure [dbo].[uspfn_SyncCsLkuBpkbView]
as
begin
	set nocount on  

	if exists (select * from sys.tables where name = 'CsLkuBpkbView') 
		drop table CsLkuBpkbView  

	select * into CsLkuBpkbView from (select * from CsLkuBpkbViewSource)x 
 
	select 'Finish Job'  
end
GO
Create procedure [dbo].[uspfn_SvInqFpjHQList]
	@CompanyCode nvarchar(20),
	@BranchCode nvarchar(20)

as

 select distinct
	trnFakturPajak.FPJNo
	, trnFakturPajak.FPJDate
	, (
		(	
			select top 1 InvoiceNo+' ('+substring(BranchCode,len(BranchCode)-1,3)+')'
			from svTrnInvoice 
			where CompanyCode = trnFakturPajak.CompanyCode 
				and FPJNo = trnFakturPajak.FPJNo 
				and isLocked = 1
			order by BranchCode,InvoiceNo
		) 
		+ ' s/d ' + 
		(	
			select top 1 InvoiceNo+' ('+substring(BranchCode,len(BranchCode)-1,3)+')'
			from svTrnInvoice 
			where CompanyCode = trnFakturPajak.CompanyCode 
				and FPJNo = trnFakturPajak.FPJNo 
				and isLocked = 1
			order by InvoiceNo,BranchCode desc
		)
	) as Invoice	
	, (
		select top 1 BranchCode 
		from svTrnInvoice 
		where CompanyCode = trnFakturPajak.CompanyCode  
			and FPJNo = trnFakturPajak.FPJNo 
			and isLocked = 1
		order by BranchCode, InvoiceNo
	) as BranchStart
    , (
		select top 1 BranchCode 
		from svTrnInvoice	
		where CompanyCode = trnFakturPajak.CompanyCode  
			and FPJNo = trnFakturPajak.FPJNo 
			and isLocked = 1
		order by BranchCode desc
	) as BranchEnd
	, (	trnFakturPajak.CustomerCode + ' - ' + 
		(
			select CustomerName 
			from gnMstCustomer
			where CompanyCode = trnFakturPajak.CompanyCode  and CustomerCode = trnFakturPajak.CustomerCode
		)
	) as Customer
	, (	trnFakturPajak.CustomerCodeBill + ' - ' + 
		(
			select CustomerName 
			from gnMstCustomer 
			where CompanyCode = trnFakturPajak.CompanyCode  and CustomerCode = trnFakturPajak.CustomerCodeBill
		)
	) as CustomerBill
from svTrnFakturPajak trnFakturPajak
left join svTrnInvoice trnInvoice on 
	trnInvoice.CompanyCode = trnFakturPajak.CompanyCode 
	--and trnInvoice.BranchCode = trnFakturPajak.BranchCode
	and trnInvoice.FPJNo = trnFakturPajak.FPJNo
	and trnInvoice.IsLocked=1
where 
    trnFakturPajak.CompanyCode = @CompanyCode
	and trnFakturPajak.BranchCode = @BranchCode
	and trnFakturPajak.FPJNo like 'FPH%' 
order by trnFakturPajak.FPJNo desc
GO
CREATE procedure [dbo].[uspfn_GnDailyPosting]
	@CompanyCode varchar(20),
	@UserId      varchar(50)
as

set nocount on

declare @DocDate    date 
declare @BranchCode varchar(20)
declare @SqlQry	    varchar(max)

begin transaction
	begin try
		set @DocDate = isnull((select top 1 dateadd(d, 1, PostingDate) from GnDailyPostingHist where CompanyCode = @CompanyCode order by PostingDate desc), (select top 1 DocDate from SvSdMovement order by DocDate))
		set @BranchCode = isnull((select top 1 BranchCode from GnMstCompanyMapping order by BranchCode), '')

		while @BranchCode != ''
		begin
			exec uspfn_GnDailyPostingBranch @CompanyCode = @CompanyCode, @BranchCode = @BranchCode, @DocDate = @DocDate
			set @BranchCode = isnull((select top 1 BranchCode from GnMstCompanyMapping where BranchCode > @BranchCode order by BranchCode), '')
		end

		insert into GnDailyPostingHist (CompanyCode, PostingDate, PostingSeq, PostingLog, CreatedBy, CreatedDate)
		select @CompanyCode as CompanyCode
			 , @DocDate as PostingDate
			 , isnull((
				 select top 1 PostingSeq
				   from GnDailyPostingHist
				  where CompanyCode = @CompanyCode
					and convert(date, PostingDate) = @DocDate
				  order by PostingSeq desc), 0) + 1 as PostingSeq
			 , convert(varchar, count(*)) + ' data terproses' as PostingLog
			 , @UserId as CreatedBy
			 , getdate() as CreatedDate
		  from SvSDMovement where CompanyCode = @CompanyCode and convert(date, DocDate) = @DocDate

		select * from GnDailyPostingHist where convert(date, PostingDate) = @DocDate
	commit transaction
end try
begin catch
  select error_number() as ErrorNumber, error_message() as ErrorMessage;
  rollback transaction
end catch 

--go

--exec uspfn_GnDailyPosting '6006400001', 'demo'
GO
create procedure [dbo].[uspfn_sfDaftarLengkap] @CompanyCode varchar(25), @BranchCode varchar(25), @pDate datetime          
as      
select         
  a.*        
 from        
  vw_SyncEmployeeData a        
where a.DeptCode = 'SALES'      
and convert(varchar, a.JoinDate, 112) <= convert(VARCHAR, @pDate,112)      
and ResignDate is Null      
and a.CompanyCode like @CompanyCode      
and a.BranchCode like @BranchCode
GO
-- =============================================
-- Author:		SDMS - David
-- Create date: 5 Feb 2015
-- Description:	Menututup bulan service
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_SvClosingMonth]
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@FiscalYear int,
	@FiscalMonth int,
	@PeriodeNum int,
	@NextFiscalYear int,
	@NextPeriodeNum int,
	@ProfitCenterCode varchar(20),
	@Month int
AS
BEGIN

    update gnMstPeriode
   set StatusService = '2'
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and FiscalYear = @FiscalYear
   and FiscalMonth = @FiscalMonth
   and PeriodeNum = @PeriodeNum

update gnMstPeriode
   set StatusService = '1'
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and FiscalYear = @NextFiscalYear
   and PeriodeNum = @NextPeriodeNum
   and FiscalMonth = @FiscalMonth

update gnMstCoProfileService 
   set FiscalYear = @NextFiscalYear
      ,FiscalPeriod = @NextPeriodeNum
      ,PeriodBeg = isnull((
            select FromDate from gnMstPeriode
             where CompanyCode = @CompanyCode
               and BranchCode = @BranchCode
               and FiscalYear = @NextFiscalYear
               and PeriodeNum = @NextPeriodeNum
               and FiscalMonth = @FiscalMonth
           ),0)
      ,PeriodEnd = isnull((
            select EndDate from gnMstPeriode
             where CompanyCode = @CompanyCode
               and BranchCode = @BranchCode
               and FiscalYear = @NextFiscalYear
               and PeriodeNum = @NextPeriodeNum
               and FiscalMonth = @FiscalMonth
           ),0)
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode

   IF (@Month = 12)
   BEGIN
   update gnMstDocument
   set DocumentYear = convert(int, @FiscalYear) + 1
      ,DocumentSequence = 0
      ,LastUpdateBy = 'closing_month'
      ,LastUpdateDate = GetDate()
 where CompanyCode = @CompanyCode
   and BranchCode = @BranchCode
   and ProfitCenterCode = @ProfitCenterCode
   and DocumentType <> 'LOT'
   END 
   
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPerlengkapanIn] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PerlengkapanType varchar(2),
 @PerlengkapanDateFrom DateTime,
 @PerlengkapanDateTo DateTime,
 @NoReffFrom varchar(100),
 @NoReffTo varchar(100),
 @NoPerlengkapanFrom varchar(100),
 @NoPerlengkapanTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.PerlengkapanNo, 
convert(varchar(20),a.PerlengkapanDate,106) as PerlengkapanDate,
a.RefferenceNo,
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate,
CASE a.PerlengkapanType WHEN 1 THEN ''BPU'' WHEN 2 THEN ''Transfer'' WHEN 3 THEN ''Return'' ELSE a.PerlengkapanType END AS PerlengkapanType , 
a.SourceDoc, a.Remark, 
CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Deleted'' WHEN 3 THEN ''Canceled'' WHEN 9 THEN ''Finished'' END AS Status
FROM 
OmTrPurchasePerlengkapanIn a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@PerlengkapanType)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanType = ''' + rtrim(@PerlengkapanType) + ''''

if year(@PerlengkapanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PerlengkapanDate between ''' + convert(varchar(50),@PerlengkapanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PerlengkapanDateTo) + ''''

if len(rtrim(@NoReffFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceNo between ''' + rtrim(@NoReffFrom) + '''' + ' and ' + '''' + rtrim(@NoReffTo) + ''''

if len(rtrim(@NoPerlengkapanFrom)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanNo between ''' + rtrim(@NoPerlengkapanFrom) + '''' + ' and ' + '''' + rtrim(@NoPerlengkapanTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.PerlengkapanNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
create procedure [dbo].[sp_updateOmMstVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@ChassisCode varchar(25),
	@ChassisNo varchar(25),
	@SONO varchar(25),
	@userId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	declare @dbMD varchar(25), @sqlStr varchar(max);
	
	--set @Month = (select FiscalPeriod from gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		if exists (select * from '+ @dbMD +'.dbo.omMstVehicle where ChassisCode = '''+@ChassisCode+''' and ChassisNo = '''+@ChassisNo+''')
		begin
			update '+ @dbMD +'.dbo.omMstVehicle
			set status=3, SONo = '''+@SONO+''', LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate()
			where ChassisCode = '''+@ChassisCode+''' and ChassisNo= '''+@ChassisNo+'''

			select convert(bit, 1) as Status
		end
		else select convert(bit, 0) as Status
	'
	
	--if exists (select * from BAT_UAT.dbo.omMstVehicle where ChassisCode = @ChassisCode and ChassisNo =@ChassisNo)
	--begin
		--update BAT_UAT.dbo.omMstVehicle
		--set status=3, SONo = @SONO, LastUpdateBy = @userId, LastUpdateDate =getdate()
		--where ChassisCode = @ChassisCode and ChassisNo=@ChassisNo

		--select convert(bit, 1) as Status
	--end
	--else select convert(bit, 0) as Status
	--select	@sqlStr
	exec(@sqlStr)
end
GO
create procedure [dbo].[uspfn_SpcekprosesSugor] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@MovingCode varchar(5),@SupplierCode  varchar(10),@TypeOfGoods  varchar(15))
 as
SELECT 
 a.PartNo
,ISNULL(a.DemandAverage, 0) AS DemandAverage
,ISNULL(c.LeadTime, 0) AS LeadTime
,ISNULL(c.OrderCycle, 0) AS OrderCycle
,ISNULL(c.SafetyStock, 0) AS SafetyStock
,CAST(0 AS int) AS No
,CAST(0 AS Numeric(4,0)) AS SeqNo
,CAST(ISNULL(a.OnHand, 0) - (
    ISNULL(a.AllocationSP, 0) 
    + ISNULL(a.AllocationSL, 0) 
    + ISNULL(a.AllocationSR, 0)
    + ISNULL(a.ReservedSP, 0) 
    + ISNULL(a.ReservedSL, 0) 
    + ISNULL(a.ReservedSR, 0)
) AS decimal(18,2)) AS AvailableQty
,CAST(0 AS Numeric(4,0)) AS SuggorQty
,CAST(0 AS Numeric(4,0)) AS SuggorCorrecQty
,CAST('' AS varchar(3)) AS ProductType
,a.PartCategory
,CAST(0 AS Numeric(18,0)) AS PurchasePrice
,CAST(0 AS Numeric(18,0)) AS CostPrice
,ISNULL(a.OrderPointQty, 0) AS OrderPoint
,ISNULL(a.OnHand, 0) AS OnHand
,ISNULL(a.OnOrder, 0) AS OnOrder
,ISNULL(a.InTransit, 0) AS InTransit
,ISNULL(a.AllocationSP, 0) AS AllocationSP
,ISNULL(a.AllocationSR, 0) AS AllocationSR
,ISNULL(a.AllocationSL, 0) AS AllocationSL
,ISNULL(a.BackOrderSP, 0) AS BackOrderSP
,ISNULL(a.BackOrderSR, 0) AS BackOrderSR
,ISNULL(a.BackOrderSL, 0) AS BackOrderSL
,ISNULL(a.ReservedSP, 0) AS ReservedSP
,ISNULL(a.ReservedSR, 0) AS ReservedSR
,ISNULL(a.ReservedSL, 0) AS ReservedSL
FROM spMstItems a with(nolock, nowait)
INNER JOIN spMstItemInfo b with(nolock, nowait) ON b.CompanyCode=a.CompanyCode AND b.PartNo=a.PartNo
INNER JOIN SpMstOrderParam c with(nolock, nowait) ON c.CompanyCode=a.CompanyCode AND c.BranchCode=a.BranchCode AND 
		   c.SupplierCode=b.SupplierCode AND c.MovingCode=a.MovingCode
WHERE a.CompanyCode=@CompanyCode 
AND a.BranchCode=@BranchCode
AND a.MovingCode=@MovingCode
AND b.SupplierCode=@SupplierCode
AND a.TypeOfGoods=@TypeOfGoods
AND a.Status = '1'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spGetEmployeeAllBranchs]
	@CompanyCode varchar(15)
AS
BEGIN
	SELECT EmployeeID, EmployeeName
	FROM gnMstEmployee 
	WHERE CompanyCode = @CompanyCode
	AND TitleCode IN ('7','58')
	AND PersonnelStatus = '1'
	ORDER BY EmployeeName ASC
END
GO
create procedure [dbo].[uspfn_SvMsiSend] 
	@LastUpdateDate datetime,
	@Segment int

--select @LastUpdateDate='1990-01-01 00:00:00',@Segment=500
as

select * into #t1 from (
select top (@Segment) CompanyCode, BranchCode, PeriodYear, PeriodMonth, SeqNo, MsiGroup, MsiDesc, Unit, MsiData, CreatedBy, CreatedDate
  from svHstSzkMSI
 where CreatedDate is not null
   and CreatedDate > @LastUpdateDate
 order by CreatedDate asc )#t1
 
declare @LastUpdateQry datetime
    set @LastUpdateQry = (select top 1 CreatedDate from #t1 order by CreatedDate desc)

select * from #t1
 union
select CompanyCode, BranchCode, PeriodYear, PeriodMonth, SeqNo, MsiGroup, MsiDesc, Unit, MsiData, CreatedBy, CreatedDate
  from svHstSzkMSI
 where CreatedDate = @LastUpdateQry
 
  drop table #t1
GO
CREATE PROCEDURE [dbo].[uspfn_spGet4TablePLFromNewOrder] @CompanyCode varchar(15), @BranchCode varchar(15), @DocNo varchar(20)
as
SELECT DISTINCT 
     row_number () OVER (ORDER BY spTrnSOSupply.DocNo, spTrnSOSupply.CreatedDate ASC) AS NoUrut
    ,spTrnSOSupply.DocNo
    ,spTrnSOSupply.PartNo 
    ,spTrnSOSupply.PartNoOriginal
    ,spTrnSOSupply.SupSeq
    ,spTrnSOSupply.PTSeq
    ,spTrnSORDHdr.ExPickingSlipNo                                                            
	,CONVERT(decimal(10,5), CONVERT(varbinary(20), spTrnSOSupply.QtySupply)) AS QtyPick
	,CONVERT(decimal(10,5), CONVERT(varbinary(20), spTrnSOSupply.QtySupply)) AS QtyPicked                                                           
	,CONVERT(decimal(10,5), CONVERT(varbinary(20), spTrnSOSupply.QtyBill)) AS QtyBill                                
    ,CONVERT(varchar, spTrnSORDHdr.DocDate, 106)
FROM spTrnSOSupply WITH (nolock, nowait)                               
    INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSOSupply.DocNo AND
        spTrnSORDHdr.CompanyCode = spTrnSOSupply.CompanyCode AND
        spTrnSORDHdr.BranchCode = spTrnSOSupply.BranchCode
WHERE spTrnSOSupply.CompanyCode = @CompanyCode
AND spTrnSOSupply.BranchCode = @BranchCode
AND spTrnSOSupply.SupSeq = 0 AND (spTrnSOSupply.DocNo = @DocNo ) ORDER BY spTrnSOSupply.DocNo, NoUrut
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spGetDataOutstandingBO]
	(
	@CompanyCode varchar(50),
	@BranchCode varchar(50),
	@CustCode varchar(50),
	@TransType varchar(50),
	@TypeOfGoods varchar(50),
	@SalesType varchar(50),
	@ProductType varchar(50)
	)
AS
BEGIN
	SELECT 
		Convert(bit, 0) chkSelect 
		, spTrnSORDDtl.DocNo
		, CONVERT(NUMERIC(18,2),0) AS QtyBOProc
		, spTrnSORDHdr.DocDate
		, spTrnSORDDtl.PartNo
		, CONVERT(NUMERIC(18,2)
		, ISNULL(spTrnSORDDtl.QtyBO, 0)) AS QtyBO
		, CONVERT(NUMERIC(18,2)
		, ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) AS QtyBoSupply
		, CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBO, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBoSupply, 0)) - CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOOts
		, CONVERT(NUMERIC(18,2), ISNULL(spTrnSORDDtl.QtyBOCancel, 0)) AS QtyBOCancel
		, spTrnSORDDtl.PartNoOriginal 
	FROM spTrnSORDDtl 
	INNER JOIN spTrnSORDHdr ON spTrnSORDDtl.DocNo = spTrnSORDHdr.DocNo AND spTrnSORDHdr.CustomerCode=@CustCode AND
				spTrnSORDHdr.TransType = @TransType AND spTrnSORDHdr.SalesType = @SalesType AND spTrnSORDHdr.Status >= 2 AND
				spTrnSORDHdr.TypeOfGoods = @TypeOfGoods AND spTrnSORDHdr.CompanyCode=@CompanyCode AND spTrnSORDHdr.BranchCode = @BranchCode
    WHERE 
	ISNULL(spTrnSORDDtl.QtyBO, 0) -  ISNULL(spTrnSORDDtl.QtyBOSupply, 0) - ISNULL(spTrnSORDDtl.QtyBOCancel, 0) > 0 
	AND spTrnSORDDtl.CompanyCode=@CompanyCode AND spTrnSORDDtl.BranchCode = @BranchCode AND spTrnSORDDtl.ProductType = @ProductType  
	ORDER BY spTrnSORDHdr.DocDate DESC 
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryHPP] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @HPPDateFrom DateTime,
 @HPPDateTo DateTime,
 @refNoFrom varchar(100),
 @refNoTo varchar(100),
 @HPPNoFrom varchar(100),
 @HPPNoTo varchar(100),
 @PONoFrom varchar(100),
 @PONoTo varchar(100),
 @supplierCodeFrom varchar(100),
 @supplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT a.HPPNo, convert(varchar(20),a.HPPDate,106) as HPPDate, a.PONo, a.RefferenceInvoiceNo, convert(varchar(20),a.RefferenceInvoiceDate,106) as RefferenceInvoiceDate,
a.RefferenceFakturPajakNo, convert(varchar(20),a.RefferenceFakturPajakDate,106) as RefferenceFakturPajakDate, a.SupplierCode, 
(select z.SupplierName from gnMstSupplier z where a.CompanyCode = z.CompanyCode and
a.SupplierCode = z.SupplierCode) as SupplierName,
a.BillTo, convert(varchar(20),a.DueDate,106) as DueDate, a.Remark, CASE
WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM omTrPurchaseHPP a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@HPPDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.HPPDate between ''' + convert(varchar(50),@HPPDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@HPPDateTo) + ''''

if len(rtrim(@refNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceInvoiceNo between ''' + rtrim(@refNoFrom) + '''' + ' and ' + '''' + rtrim(@refNoTo) + ''''

if len(rtrim(@HPPNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.HPPNo between ''' + rtrim(@HPPNoFrom) + '''' + ' and ' + '''' + rtrim(@HPPNoTo) + ''''

if len(rtrim(@PONoFrom)) > 0
   set @pQuery = @pQuery + ' and a.PONo between ''' + rtrim(@PONoFrom) + '''' + ' and ' + '''' + rtrim(@PONoTo) + ''''

if len(rtrim(@supplierCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@supplierCodeFrom) + '''' + ' and ' + '''' + rtrim(@supplierCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.HPPNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spGetEmployeeBranchs]
	@CompanyCode varchar(15), 
	@BranchCode varchar(15)
AS
BEGIN
	 SELECT EmployeeID, EmployeeName
	FROM gnMstEmployee 
	WHERE CompanyCode =  @CompanyCode 
	AND BranchCode = @BranchCode
	AND TitleCode IN  ('7','58')
	AND PersonnelStatus = '1'
	ORDER BY EmployeeName ASC
END
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryKaroseri] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @KaroseriDateFrom DateTime,
 @KaroseriDateTo DateTime,
 @SalesModelCodeOldFrom varchar(100),
 @SalesModelCodeOldTo varchar(100),
 @SalesModelYearFrom varchar(100),
 @SalesModelYearTo varchar(100),
 @NoSPKKaroseriFrom varchar(100),
 @NoSPKKaroseriTo varchar(100),
 @SupplierCodeFrom varchar(100),
 @SupplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.KaroseriSPKNo, 
convert(varchar(20),a.KaroseriSPKDate,106) as KaroseriSPKDate, 
a.RefferenceNo, 
case when year(a.RefferenceDate) = ''1900'' then '''' else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
a.SupplierCode,b.SupplierName, a.SalesModelCodeOld, a.SalesModelYear, a.SalesModelCodeNew, 
a.Quantity, a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.Total, a.DurationDays, 
a.Remark, CASE ISNULL(a.Status, 0) WHEN 0 THEN ''Open'' WHEN 1 THEN ''Printed'' WHEN 2 THEN ''Approved'' WHEN 3 THEN ''Canceled'' END AS Status        
FROM 
OmTrPurchaseKaroseri a
LEFT JOIN 
gnMstSupplier b 
ON a.CompanyCode = b.CompanyCode 
AND a.SupplierCode =  b.SupplierCode
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@KaroseriDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.KaroseriSPKDate between ''' + convert(varchar(50),@KaroseriDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@KaroseriDateTo) + ''''

if len(rtrim(@SalesModelCodeOldFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelCodeOld between ''' + rtrim(@SalesModelCodeOldFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelCodeOldFrom) + ''''

if len(rtrim(@SalesModelYearFrom)) > 0
   set @pQuery = @pQuery + ' and a.SalesModelYear between ''' + rtrim(@SalesModelYearFrom) + '''' + ' and ' + '''' + rtrim(@SalesModelYearTo) + ''''

if len(rtrim(@NoSPKKaroseriFrom)) > 0
   set @pQuery = @pQuery + ' and a.KaroseriSPKNo between ''' + rtrim(@NoSPKKaroseriFrom) + '''' + ' and ' + '''' + rtrim(@NoSPKKaroseriTo) + ''''

if len(rtrim(@SupplierCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@SupplierCodeFrom) + '''' + ' and ' + '''' + rtrim(@SupplierCodeTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + ''''+ ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.KaroseriSPKNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_spTrnPOrderBalance] (  @CompanyCode varchar(15) ,  @BranchCode varchar(15) )
 as

 		    SELECT 
                DISTINCT a.POSNo, a.SupplierCode, b.SupplierName ,a.CompanyCode,a.BranchCode
            FROM 
                spTrnPOrderBalance a 
            INNER JOIN gnMstSupplier b 
               ON b.SupplierCode = a.SupplierCode 
              AND b.CompanyCode  = a.CompanyCode 
            WHERE a.OrderQty > a.Received
              AND a.CompanyCode = @CompanyCode
              AND a.BranchCode  = @BranchCode
            
            ORDER BY POSNo DESC
GO
create procedure [dbo].[uspfn_GetVehicleInfo_New]  
 @CompanyCode  varchar(20),  
 @BranchCode   varchar(20),  
 @ProductType  varchar(10),  
 @PoliceRegNo  varchar(20),  
 @ChassisCode  varchar(20),  
 @ChassisNo    varchar(10),  
 @BasicModel   varchar(20),  
 @JobOrderDate varchar(20),
 @CustomerCode varchar(20),
 @IsAllBranch  bit = 1
 
as  
  
select * into #t1 from (  
select 0 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , c.MechanicId+' - '+  
  (  
  select EmployeeName   
  from gnMstEmployee   
  where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode and EmployeeID=c.MechanicId  
  ) MechanicId  
     , a.ForemanId  
     , b.OperationNo  
     , isnull(b.OperationHour, 0) as OperationQty  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.0) as OperationAmt  
     , convert(decimal, isnull(b.OperationCost, 0) * isnull(b.OperationHour, 0) * 1.1) as TotalSrvAmount  
     , isnull(b.SharingTask, 0) SharingTask  
     , case when f.Description is null then (select TOP 1 Description   
    from svMstTask   
     where BasicModel = a.BasicModel  
      and OperationNo = b.OperationNo) else f.Description end Description  
    , isnull(g.EmployeeName, '') NameSA  
    , isnull(h.EmployeeName, '') NameForeman  
    , b.CreatedDate  
 from svTrnService a with(nolock, nowait)  
 left join svTrnSrvTask b with(nolock, nowait)  
   on b.CompanyCode = a.CompanyCode  
  and b.BranchCode  = a.BranchCode  
  and b.ProductType = a.ProductType  
  and b.ServiceNo   = a.ServiceNo  
 left join svTrnSrvMechanic c with(nolock, nowait)  
   on c.CompanyCode = b.CompanyCode  
  and c.BranchCode  = b.BranchCode  
  and c.ProductType = b.ProductType  
  and c.ServiceNo   = b.ServiceNo  
  and c.OperationNo = b.OperationNo  
 left join svTrnInvoice d with(nolock, nowait)  
   on d.CompanyCode = a.CompanyCode  
  and d.BranchCode  = a.BranchCode  
  and d.InvoiceNo   = a.InvoiceNo  
 left join svMstRefferenceService e with(nolock, nowait)  
   on e.CompanyCode    = a.CompanyCode  
  and e.RefferenceCode = a.jobType  
  and e.ProductType    = a.ProductType  
  and e.RefferenceType = 'JOBSTYPE'  
 left join svMstTask f with(nolock, nowait)  
   on f.CompanyCode = b.CompanyCode  
  and f.ProductType = b.ProductType  
  and f.OperationNo = b.OperationNo   
  and f.JobType     = a.JobType  
  and f.BasicModel  = a.BasicModel  
 left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
  and g.BranchCode = a.BranchCode   
  and g.EmployeeId = a.ForemanID  
 left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
  and h.BranchCode = a.BranchCode   
  and h.EmployeeId = a.MechanicID  
where a.JobOrderNo <> ''  
  and a.CompanyCode = @CompanyCode  
  and a.BranchCode  = @BranchCode  
  and a.ProductType = @ProductType  
  and a.ChassisCode = @ChassisCode  
  and a.ChassisNo   = @ChassisNo  
  and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
  and a.CustomerCode = @CustomerCode
) #t1  
  
--declare @t_spk_task as table(JobOrderNo varchar(20), OperationNo varchar(20))  
  
--insert into @t_spk_task   
--select a.JobOrderNo  
--  , isnull((  
--  select top 1 OperationNo from #t1  
--      where JobOrderNo = a.JobOrderNo  
--      order by CreatedDate   
--     ), '') OperationNo  
--  from #t1 a group by a.JobOrderNo  
  
insert into #t1  
select 1 TaskPartSeq  
     , a.BranchCode  
     , a.JobOrderNo  
     , a.JobOrderDate  
     , d.InvoiceNo  
     , d.InvoiceDate  
     , d.FPJNo  
     , d.FPJDate  
     , a.JobType + ' - ' + e.Description JobType  
     , a.Odometer  
     , ''  
     , ''  
     , b.PartNo  
     , (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) as OperationQty  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.0) as OperationAmt  
     , convert(int, (isnull(b.DemandQty,0) - isnull(b.ReturnQty,0)) * isnull(b.RetailPrice,0) * 1.1)
     , 1  
     , f.PartName  
     , isnull(g.EmployeeName, '') NameSA  
     , isnull(h.EmployeeName, '') NameForeman  
     , b.CreatedDate  
  from svTrnService a with(nolock, nowait)  
  left join svTrnSrvItem b with(nolock, nowait)  
    on b.CompanyCode = a.CompanyCode  
   and b.BranchCode  = a.BranchCode  
   and b.ProductType = a.ProductType  
   and b.ServiceNo   = a.ServiceNo  
  left join svTrnInvoice d with(nolock, nowait)  
    on d.CompanyCode = a.CompanyCode  
   and d.BranchCode  = a.BranchCode  
   and d.InvoiceNo   = a.InvoiceNo  
  left join svMstRefferenceService e with(nolock, nowait)  
    on e.CompanyCode    = a.CompanyCode  
   and e.RefferenceCode = a.jobType  
   and e.ProductType    = a.ProductType  
   and e.RefferenceType = 'JOBSTYPE'  
  left join spMstItemInfo f with(nolock, nowait)  
    on f.CompanyCode = b.CompanyCode  
   and f.PartNo      = b.PartNo   
  left join gnMstEmployee g on g.CompanyCode = a.CompanyCode  
   and g.BranchCode = a.BranchCode   
   and g.EmployeeId = a.ForemanID  
  left join gnMstEmployee h on h.CompanyCode = a.CompanyCode  
   and h.BranchCode = a.BranchCode   
   and h.EmployeeId = a.MechanicID  
 where a.JobOrderNo <> ''  
   and a.CompanyCode = @CompanyCode  
   and a.BranchCode  = @BranchCode  
   and a.ProductType = @ProductType  
   and a.ChassisCode = @ChassisCode  
   and a.ChassisNo   = @ChassisNo  
   and convert(varchar, a.JobOrderDate, 112) >= @JobOrderDate  
   and a.CustomerCode = @CustomerCode
;with x as (  
select a.JobOrderNo, a.OperationNo, a.TotalSrvAmount, b.TotalSrvAmount TotalSrvAmountNew  
  from #t1 a  
  left join svTrnService b  
    on b.CompanyCode = @CompanyCode  
   and b.BranchCode  = @BranchCode  
   and b.ProductType = @ProductType  
   and b.JobOrderNo  = a.JobOrderNo  
)  
update x set TotalSrvAmount = TotalSrvAmountNew  
  
select BranchCode  
     , JobOrderNo  
     , SUM(OperationAmt)  TotalSrvAmount
from #t1 
where OperationQty > 0
group BY BranchCode, JobOrderNo, TotalSrvAmount
order by JobOrderNo
  
drop table #t1
GO
create procedure [dbo].[uspfn_CsGetStnkExt]
	@CompanyCode  varchar(20),
	@CustomerCode varchar(20),
	@Chassis      varchar(50)
as

--select @CompanyCode = '6006406', @CustomerCode = '1000581', @Chassis = 'MHYGDN42VBJ352996'
select a.CompanyCode     
	 , a.BranchCode
	 , b.CustomerCode
	 , c.CustomerName
	 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
	 , a.EngineCode + convert(varchar, a.EngineNo) Engine
	 , a.SalesModelCode
	 , a.SalesModelYear
	 , a.ColourCode
	 , isnull(k.BpkbDate,  isnull(k.BpkbDate, g.BPKDate)) BpkbDate
	 , isnull(ax01.STNKInDate, isnull(k.StnkDate, isnull(k.StnkDate, g.BPKDate))) StnkDate
	 , g.BPKDate
	 , h.isLeasing as IsLeasing
	 , h.LeasingCo
	 , isnull(h.isLeasing, 0) as IsLeasing
	 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
	 , i.CustomerName as LeasingName
	 , h.Installment
	 , convert(varchar, isnull(h.Installment, 0)) + ' Month' as Tenor
     , left(c.Address1, 40) as Address
     , c.PhoneNo
     , h.Salesman
     , j.EmployeeName as SalesmanName
     , k.IsStnkExtend
	 , k.Ownership
     , isnull(k.StnkExpiredDate, dateadd(year, 1, isnull(k.StnkDate, g.BPKDate)))  as StnkExpiredDate
     , k.ReqKtp
     , k.ReqStnk
     , k.ReqBpkb
     , k.ReqSuratKuasa
     , k.Comment, k.Additional, k.Status
     , (case k.Status when 1 then 'Finish' else 'In Progress' end) as StatusInfo
     , case (isnull(k.Chassis, '')) when '' then 1 else 0 end as IsNew
     , l.PoliceRegNo
	 , k.Ownership
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
	on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c
	on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode
  left join omTrSalesDODetail d
	on d.CompanyCode = a.CompanyCode    
   and d.BranchCode = a.BranchCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
 -- left join CsCustomerVehicle e
	--on e.CompanyCode = a.CompanyCode    
 --  and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join omTrSalesDO f
	on f.CompanyCode = d.CompanyCode    
   and f.BranchCode = d.BranchCode
   and f.DONo = d.DONo
  left join omTrSalesBPK g
	on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode
   and g.DONo = f.DONo
  left join omTrSalesSO h
	on h.CompanyCode = g.CompanyCode    
   and h.BranchCode = g.BranchCode
   and h.SONo = g.SONo
  left join gnMstCustomer i
	on i.CompanyCode = h.CompanyCode
   and i.CustomerCode = h.LeasingCo
  left join HrEmployee j
	on j.CompanyCode = h.CompanyCode
   and j.EmployeeID = h.Salesman
  left join CsStnkExt k
	on k.CompanyCode = a.CompanyCode
   and k.CustomerCode = b.CustomerCode
   and k.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join svMstCustomerVehicle l
	on l.CompanyCode = a.CompanyCode
   and l.ChassisCode = a.ChassisCode
   and l.ChassisNo = a.ChassisNo
 outer apply (
			select top 1
			       x.STNKInDate
			  from OmTrSalesSpkDetail x
			 where x.ChassisCode = a.ChassisCode
			   and x.ChassisNo = a.ChassisNo
	   ) as ax01
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and b.CustomerCode = @CustomerCode
   and a.ChassisCode + convert(varchar, a.ChassisNo) = @Chassis
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryInvoice] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @InvDateFrom DateTime,
 @InvDateTo DateTime,
 @NoSOFrom varchar(100),
 @NoSOTo varchar(100),
 @CustomerFrom varchar(100),
 @CustomerTo varchar(100),
 @NoInvFrom varchar(100),
 @NoInvTo varchar(100),
 @NoSKPKFrom varchar(100),
 @NoSKPKTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.InvoiceNo, a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.InvoiceDate,106) as InvoiceDate, 
case pso.SalesType when ''0'' then ''W'' when ''1'' then ''D'' end as SalesType,
a.SONo, b.CustomerName, c.CustomerName AS BillTo, a.FakturPajakNo, isnull(pdn.DNNo,'''') as DNNo,
case when year(a.FakturPajakDate) = ''1900'' then '''' else convert(varchar(20),a.FakturPajakDate,106) end as FakturPajakDate, 
case when year(a.DueDate) = ''1900'' then '''' else convert(varchar(20),a.DueDate,106) end as DueDate, a.Remark, 
pso.SKPKNo, convert(varchar(20),pso.SODate,106) as SODate, pdo.DONo,convert(varchar(20),pdo.DODate,106) as DODate, pbpk.BPKNo,
convert(varchar(20),pbpk.BPKDate,106) as BPKDate, pso.RefferenceNo,
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Approved''
	WHEN a.Status = 3 THEN ''Deleted''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM omTrSalesInvoice a
LEFT JOIN GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
LEFT JOIN GnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.BillTo
LEFT JOIN omTrSalesSO pso ON a.CompanyCode = pso.CompanyCode AND a.BranchCode = pso.BranchCode AND a.SONo = pso.SONo
LEFT JOIN omTrSalesDO pdo ON a.CompanyCode = pdo.CompanyCode AND a.BranchCode = pdo.BranchCode AND a.SONo = pdo.SONo
LEFT JOIN omTrSalesBPK pbpk ON a.CompanyCode = pbpk.CompanyCode AND a.BranchCode = pbpk.BranchCode AND a.SONO = pbpk.SONo AND pdo.DONo = pbpk.DONo
LEFT JOIN omTrSalesDN pdn ON a.CompanyCode = pdn.CompanyCode AND a.BranchCode = pdn.BranchCode AND a.InvoiceNo = pdn.InvoiceNo
Where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@InvDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.InvoiceDate between ''' + convert(varchar(50),@InvDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@InvDateTo) + ''''

if len(rtrim(@NoSOFrom)) > 0
   set @pQuery = @pQuery + ' and a.SONo between ''' + rtrim(@NoSOFrom) + '''' + ' and ' + '''' + rtrim(@NoSOTo) + ''''

if len(rtrim(@CustomerFrom)) > 0
   set @pQuery = @pQuery + ' and a.CustomerCode between ''' + rtrim(@CustomerFrom) + '''' + ' and ' + '''' + rtrim(@CustomerTo) + ''''

if len(rtrim(@NoInvFrom)) > 0
   set @pQuery = @pQuery + ' and a.InvoiceNo between ''' + rtrim(@NoInvFrom) + '''' + ' and ' + '''' + rtrim(@NoInvTo) + ''''

if len(rtrim(@NoSKPKFrom)) > 0
   set @pQuery = @pQuery + ' and pso.SKPKNo between ''' + rtrim(@NoSKPKFrom) + '''' + ' and ' + '''' + rtrim(@NoSKPKTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.InvoiceNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_spTrnPOrderBalancePart] (  @CompanyCode varchar(15) ,  @BranchCode varchar(15), @PosNo varchar(35) )
 as
    
			    SELECT 
                    a.POSNo, a.PartNo, b.PartName, CAST(a.OrderQty as decimal(18,2)) as OrderQty, 
                    a.OnOrder, a.Intransit, a.Received,a.DiscPct, a.PurchasePrice, 
                    Convert(varchar(10),a.SeqNo) SeqNo, a.SupplierCode, a.OnOrder, a.PartNoOriginal, 
                    a.TypeOfGoods ,a.CompanyCode ,a.BranchCode
                FROM 
                    spTrnPOrderBalance a 
                INNER JOIN spMstItemInfo b
                   ON b.PartNo      = a.PartNo
                  AND b.CompanyCode = a.CompanyCode
                WHERE a.CompanyCode = @CompanyCode
                  AND a.BranchCode  = @BranchCode
                  AND a.PosNo like @PosNo
                ORDER BY a.POSNo DESC, a.SeqNo
GO
create procedure [dbo].[uspfn_CSMstCustomerSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , StandardCode
     , CustomerName
     , CustomerAbbrName
     , CustomerGovName
     , CustomerType
     , CategoryCode
     , Address1
     , Address2
     , Address3
     , Address4
     , PhoneNo
     , HPNo
     , FaxNo
     , isPKP
     , NPWPNo
     , NPWPDate
     , SKPNo
     , SKPDate
     , ProvinceCode
     , AreaCode
     , CityCode
     , ZipNo
     , Status
     , CreatedBy
     , CreatedDate
     , LastUpdateBy
     , LastUpdateDate
     , isLocked
     , LockingBy
     , LockingDate
     , Email
     , BirthDate
     , Spare01
     , Spare02
     , Spare03
     , Spare04
     , Spare05
     , Gender
     , OfficePhoneNo
     , KelurahanDesa
     , KecamatanDistrik
     , KotaKabupaten
     , IbuKota
     , CustomerStatus
  from gnMstCustomer
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_CSMstCustomerSend @LastUpdateDate='2013-01-01', @Segment=1
GO
create procedure [dbo].[uspfn_HrUpdateJoinDateAchievement]
	@CompanyCode varchar(25),
	@EmployeeID varchar(25),
	@JoinDate datetime,
	@ResignDate datetime

as
begin
	declare @Department varchar(35);
	declare @Position varchar(35);
	declare @Grade varchar(35);

	set @Department = ( select top 1 Department from HrEmployee where CompanyCode = @CompanyCode and EmployeeID =  @EmployeeID );
	set @Position = ( select top 1 Position from HrEmployee where CompanyCode = @CompanyCode and EmployeeID =  @EmployeeID );
	set @Grade = ( select top 1 Grade from HrEmployee where CompanyCode = @CompanyCode and EmployeeID =  @EmployeeID );

	begin try
		update HrEmployeeAchievement
		   set AssignDate=@JoinDate
		 where CompanyCode=@CompanyCode
		   and EmployeeID=@EmployeeID
		   and IsJoinDate=1
	end try
	begin catch
		update HrEmployeeAchievement
		   set IsDeleted=0
		     , IsJoinDate=1
		 where CompanyCode=@CompanyCode
		   and EmployeeID=@EmployeeID
		   and convert(datetime, AssignDate)=@JoinDate
	end catch

	update HrEmployeeAchievement
	   set IsDeleted=1
	 where CompanyCode=@CompanyCode
	   and EmployeeID=@EmployeeID
	   and convert(datetime,AssignDate) < @JoinDate

	update HrEmployeeAchievement
	   set IsDeleted=1
	 where CompanyCode=@CompanyCode
	   and EmployeeID=@EmployeeID
	   and convert(datetime, AssignDate) > @ResignDate

	update HrEmployee
	   set Department = isnull((
				select top 1
				       a.Department
				  from HrEmployeeAchievement a
				 where a.CompanyCode=@CompanyCode
				   and a.EmployeeID=@EmployeeID
			       and a.IsDeleted != 1
				 order by a.AssignDate desc
		   ), @Department)
		 , Position = isnull((
				select top 1
				       a.Position
				  from HrEmployeeAchievement a
				 where a.CompanyCode=@CompanyCode
				   and a.EmployeeID=@EmployeeID
			       and a.IsDeleted != 1
				 order by a.AssignDate desc
		   ), @Position)
		 , Grade = isnull((
				select top 1
				       a.Grade
				  from HrEmployeeAchievement a
				 where a.CompanyCode=@CompanyCode
				   and a.EmployeeID=@EmployeeID
			       and a.IsDeleted != 1
				 order by a.AssignDate desc
		   ),@Grade)
     where CompanyCode=@CompanyCode
	   and EmployeeID=@EmployeeID
end
GO
create procedure [dbo].[uspfn_ExtractData]
	@FileContent varchar(max)
as
begin
	begin try
		select * from XSplitString(@FileContent, char(10))

		--declare c cursor for 
		--	select * from XSplitString(@FileContent, char(10))
		--declare @Record varchar(100);

		--open c
		--	fetch next from c into @Record

		--	while @@FETCH_STATUS=0
		--	begin
		--		select @Record;

		--		fetch next from c into @Record
		--	end
		--close c
		--deallocate c

	end try
	begin catch
		select Convert(bit, 0);
	end catch
end
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSelectBookingData]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15),
	@ShowAll bit
AS

declare @Query varchar(max)
declare @Condition varchar(4000);

set @Condition = ' ORDER BY svTrnService.BookingNo DESC';
if(@ShowAll = 0) begin
	set @Condition = ' AND svTrnService.ServiceStatus IN (0,1,2,3,4,5) ORDER BY svTrnService.BookingNo DESC';
end 

set @Query = '
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + '' '' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + '' '' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + '' - '' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + '' - '' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus=''4'' then
            case when ''' + @ProductType + '''=''4W'' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '''' + custBill.Address2 + '''' + custBill.Address3 + '''' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = ''SERVSTAS''
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = ''' + @CompanyCode + '''
    AND svTrnService.BranchCode = ''' + @BranchCode + '''
 AND svTrnService.ServiceType =''1'''
 + @Condition;
 
 exec (@Query);
GO
CREATE procedure [dbo].[sp_InsertHistoryMovementTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year int,
@Month int,
@PID varchar(10)
)


as

-- delete spHstStockMovement based on Year and Month
-- Include all coloumn into one than insert spHstStockMovement

delete spHstStockMovement where Year = @Year AND Month = @Month and CompanyCode = @CompanyCode and BranchCode = @BranchCode

SELECT * INTO #A1 FROM
(
SELECT a.CompanyCode, a.BranchCode, a.PartNo PartNo, a.WarehouseCode WareHouseCode, 
a.LocationCode LocationCode,  
a.OnHand OnHand,
a.BOMInvQty BOMInvQty,
(SELECT ISNULL(SUM(x.ReceivedQty), 0) RcvQty FROM spTrnPRcvDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.WRSNo = b.WRSNo
	WHERE Year(b.WRSDate) = @Year
	  AND Month(b.WRSDate) = @Month
	  AND b.CompanyCode = @CompanyCode
      AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
      AND b.Status NOT IN (0, 1, 3)) AS RcvQtyIN,
(SELECT ISNULL(SUM(x.QtyAdjustment), 0) AdjQty FROM spTrnIAdjustDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIAdjustHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.AdjustmentNo = b.AdjustmentNo
	WHERE YEAR(b.AdjustmentDate) = @Year
      AND MONTH(b.AdjustmentDate) = @Month
      AND b.CompanyCode = @CompanyCode
      AND b.BranchCode = @BranchCode
      AND x.WarehouseCode = a.WarehouseCode
      AND x.PartNo = a.PartNo
      AND x.AdjustmentCode = '+'
      AND b.Status = 2) AS AdjQtyIN,
(SELECT ISNULL(SUM(x.Qty),0) FROM spTrnIWHTrfDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIWHTrfHDR b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.WHTrfNo = b.WHTrfNo 
	WHERE YEAR(b.WHTrfDate) = @Year
	  AND MONTH(b.WHTrfDate) = @Month
	  AND b.CompanyCode =@CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.ToWarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND b.Status = 2
) AS WhtQtyIN,
(SELECT ISNULL(SUM(x.QtyReturn), 0) RturQty FROM spTrnSRturDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnSRturHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.ReturnNo = b.ReturnNo
	WHERE YEAR(b.ReturnDate) = @Year
	  AND MONTH(b.ReturnDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND b.Status = 2) AS RtrQtyIN,
(SELECT ISNULL(SUM(x.QtyReturn),0) RturQty FROM spTrnSRturSSDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnSRturSSHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.ReturnNo = b.ReturnNo
	WHERE YEAR(b.ReturnDate) = @Year
	  AND MONTH(b.ReturnDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo	
	  AND b.Status = 2) AS SSQtyIN,
(SELECT ISNULL(SUM(x.QtyBill)  ,0) FROM spTrnSFPJDtl x WITH(NOLOCK, NOWAIT)JOIN spTrnSFPJHdr b WITH(NOLOCK, NOWAIT)
 ON  x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.FPJNo = b.FPJNo
	WHERE YEAR(b.FPJDate) = @Year
	  AND MONTH(b.FPJDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo) AS FpjQtyOUT,
(SELECT ISNULL(SUM(x.QtyBill) ,0)FROM spTrnSLmpDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnSLmpHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.LmpNo = b.LmpNo 
	WHERE YEAR(b.LmpDate) = @Year
	  AND MONTH(b.LmpDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo) AS LmpQtyOUT,
(SELECT ISNULL(SUM(x.QtyAdjustment), 0) AdjQty FROM spTrnIAdjustDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIAdjustHdr b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.AdjustmentNo = b.AdjustmentNo 
	WHERE YEAR(b.AdjustmentDate) = @Year
	  AND MONTH(b.AdjustmentDate) = @Month
	  AND b.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.WarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND x.AdjustmentCode = '-'
	  AND b.Status = 2) AS AdjQtyOUT,
(SELECT ISNULL(SUM(x.Qty),0) FROM spTrnIWHTrfDtl x WITH(NOLOCK, NOWAIT) JOIN spTrnIWHTrfHDR b WITH(NOLOCK, NOWAIT)
 ON x.CompanyCode = b.CompanyCode
	AND x.BranchCode = b.BranchCode
    AND x.WHTrfNo = b.WHTrfNo 
	WHERE YEAR(b.WHTrfDate) = @Year
	  AND MONTH(b.WHTrfDate) = @Month
	  AND b.CompanyCode =@CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND x.FromWarehouseCode = a.WarehouseCode
	  AND x.PartNo = a.PartNo
	  AND b.Status = 2) AS WhtQtyOUT 
FROM spMstItemLoc a WITH(NOLOCK, NOWAIT)
WHERE a.CompanyCode = @CompanyCode
  AND a.BranchCode = @BranchCode
) a1

SELECT * INTO #A2 FROM
(
	SELECT a.CompanyCode, a.BranchCode, @Year AS Year, @Month AS Month, a.WarehouseCode, a.LocationCode, a.PartNo, 
        BOMInvQty AS BOMStock, 
		(RcvQtyIN + AdjQtyIN + WhtQtyIN + RtrQtyIN + SSQtyIN) AS MoveIn,
        (FpjQtyOUT + LmpQtyOUT + AdjQtyOUT + WhtQtyOUT ) AS MoveOut,
        (BOMInvQty + ((RcvQtyIN + AdjQtyIN + WhtQtyIN + RtrQtyIN + SSQtyIN ) - 
        (FpjQtyOUT + LmpQtyOUT + AdjQtyOUT + WhtQtyOUT))) AS EOMStock, 
		ISNULL(b.CostPrice,0) AS CostPrice,
        @PID AS CreatedBy, GetDate() AS CreatedDate,
		@PID AS LastUpdateBy, GetDate() AS LastUpdateDate
	FROM #A1 a WITH(NOLOCK, NOWAIT)
		LEFT JOIN SpMstItemPrice b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
) b1

insert into spHstStockMovement select * from #A2
drop table #A1
drop table #A2
GO
CREATE procedure [dbo].[uspfn_abInqAttendanceDaily]
	@CompanyCode nvarchar(25),
	@Department nvarchar(17),
	@Position nvarchar(17),
	@Grade nvarchar(17),
	@DateFrom datetime,
	@DateTo datetime,
	@ShiftCode nvarchar(17),
	@EmployeeID varchar(25),
	@EmployeeName varchar(200)
as
begin
	  create table #Attendance (
		CompanyCode varchar(17),
		EmployeeID varchar(25),
		EmployeeName varchar(150),
		Department varchar(100),
		Position varchar(55),
		Grade varchar(25),
		DepartmentName varchar(55),
		PositionName varchar(200),
		GradeName varchar(25),
		AttendanceDate char(8),
		ShiftCode varchar(7),
		ShiftName varchar(25),
		IsAbsence varchar(5),
		ClockInTime char(5),
		ClockOutTime char(5),
		OnDutyTime char(5),
		OffDutyTime char(5),
		CalcOvertime int,
		Overtime char(5),
		CalcLateTime int,
		LateTime char(5),
		CalcReturnBeforeTheTime int, 
		ReturnBeforeTheTime char(5)
	  );

	  delete #Attendance

	  insert into #Attendance
	  select  a.CompanyCode
			, a.EmployeeID
			, b.EmployeeName
			, b.Department
			, b.Position
			, b.Grade
			, DepartmentName = c.OrgName
			, PositionName = d.PosName
			, GradeName = e.LookUpValueName
			, a.AttdDate 
			, a.ShiftCode
			, f.ShiftName
			, IsAbsence = (
				case
					when a.ClockInTime is null or a.ClockInTime = '' then 'Yes'
					else 'No'
				end
			  )
			, a.ClockInTime
			, a.ClockOutTime
			, a.OnDutyTime
			, a.OffDutyTime
			, isnull(a.CalcOvertime, 0)
			, Overtime = (
				case
					when a.ClockOutTime > a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.OffDutyTime, 108), 5), left(convert(varchar, a.ClockOutTime, 108), 5)))
					else '-'
				end
		      )
			, CalcLateTime = (
				case 
					when a.ClockInTime > a.OnDutyTime then datediff(minute, a.OnDutyTime, a.ClockInTime)
					else 0
				end
			  )
			, LateTime = (
				case
					when a.ClockInTime > a.OnDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.OnDutyTime, 108), 5), left(convert(varchar, a.ClockInTime, 108), 5)))
					else '-'
				end
		      )
			, CalcReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_CalculateMinute(left(convert(varchar, a.ClockOutTime, 108), 5), left(convert(varchar, a.OffDutyTime, 108), 5))
					else '-'
				end
		      )
			, ReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.ClockOutTime, 108), 5), left(convert(varchar, a.OffDutyTime, 108), 5)))
					else '-'
				end
		      )
		from HrEmployeeShift a
		left join HrEmployee b
		  on a.CompanyCode=b.CompanyCode
		 and a.EmployeeID=b.EmployeeID
		left join gnMstOrgGroup c
		  on c.CompanyCode=a.CompanyCode
		 and c.OrgCode=b.Department
		left join gnMstPosition d
		  on d.CompanyCode=c.CompanyCode
		 and d.DeptCode=b.Department
		 and d.PosCode=b.Position
		left join gnMstLookUpDtl e
		  on e.CompanyCode=a.CompanyCode
		 and e.CodeID='ITSG'
		 and e.LookUpValue=b.Grade
		left join HrShift f
		  on f.CompanyCode=a.CompanyCode
		 and f.ShiftCode=a.ShiftCode
	   where a.CompanyCode=@CompanyCode 
		 and a.AttdDate>=replace(convert(varchar, @DateFrom, 111), '/', '')
		 and a.AttdDate<=replace(convert(varchar, @DateTo, 111), '/', '')
		 and a.ClockInTime is not null

		declare @Query nvarchar(1000);
		declare @ParameterDeclaration nvarchar(1000);
		set @Query='select * from #Attendance a where 1=1 ';
		set @ParameterDeclaration='';
			
		if ltrim(rtrim(@Department)) != '' or @Department is null
		begin
			set @Query = @Query + ' and a.Department=@p0';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p0 nvarchar(17),' 
		end
		else
		begin 
			set @Department='%';
			set @Query = @Query + ' and a.Department like @p0';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p0 nvarchar(17),' 
		end

		if ltrim(rtrim(@Position)) != ''
		begin
			set @Query = @Query + ' and a.Position=@p1';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p1 nvarchar(17),' 
		end
		else
		begin
			set @Position='%';
			set @Query = @Query + ' and a.Position like @p1';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p1 nvarchar(17),' 
		end

		if ltrim(rtrim(@Grade)) != ''
		begin
			set @Query = @Query + ' and a.Grade=@p2';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p2 nvarchar(17),' 
		end
		else
		begin
			set @Grade = '%'
			set @Query = @Query + ' and a.Grade like @p2';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p2 nvarchar(17),' 
		end

		if ltrim(rtrim(@ShiftCode)) != ''
		begin
			set @Query = @Query + ' and a.ShiftCode=@p3';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p3 nvarchar(17),' 
		end
		else
		begin
			set @ShiftCode='%'
			set @Query = @Query + ' and a.ShiftCode like @p3';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p3 nvarchar(17),' 
		end
		
		if ltrim(rtrim(@EmployeeID)) != ''
		begin
			set @Query = @Query + ' and a.EmployeeID=@p4';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p4 nvarchar(25),' 
		end
		else
		begin
			set @EmployeeID='%'
			set @Query = @Query + ' and a.EmployeeID like @p4';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p4 nvarchar(25),' 
		end
		
		if ltrim(rtrim(@EmployeeName)) != ''
		begin
			set @EmployeeName='%' + @EmployeeName + '%'
			set @Query = @Query + ' and a.EmployeeName like @p5';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p5 nvarchar(200),' 
		end
		else
		begin
			set @EmployeeName='%'
			set @Query = @Query + ' and a.EmployeeName like @p5';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p5 nvarchar(200),' 
		end

		set @ParameterDeclaration = substring(@ParameterDeclaration, 0, len(@ParameterDeclaration));
		exec sp_executesql @statement=@Query
		                 , @parameters=@ParameterDeclaration
						 , @p0=@Department
						 , @p1=@Position
						 , @p2=@Grade
						 , @p3=@ShiftCode
						 , @p4=@EmployeeID
						 , @p5=@EmployeeName
		
		drop table #Attendance
end
GO
CREATE procedure [dbo].[uspfn_spGetReturnSSDtl] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(20)    
  as    
  select a.CompanyCode, a.BranchCode,a.ReturnNo,a.WarehouseCode , a.PartNo, a.PartNoOriginal, a.DocNo, c.QtyBill as QtyLmp, a.QtyReturn as QtyBill   from spTrnSRturSSDtl a    
  join spTrnSRturSSHdr b     
  ON a.CompanyCode = b.CompanyCode    
  and a.BranchCode = b.BranchCode    
  and a.ReturnNo = b.ReturnNo    
  join spTrnSLmpDtl c    
  on c.CompanyCode = b.CompanyCode    
  and c.BranchCode = b.BranchCode    
  and c.LmpNo = b.DocNo    
  and c.WarehouseCode = a.WarehouseCode  
  and c.PartNo = a.PartNo  
  and c.PartNoOriginal = a.PartNoOriginal  
  where a.CompanyCode = @CompanyCode    
  and a.BranchCode = @BranchCode    
  and a.ReturnNo = @ReturnNo
GO
CREATE procedure [dbo].[uspfn_spGetNoLampiranReturSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15),   
@TypeOfGoods varchar(1), @ProductType varchar(2)  
as  
SELECT * FROM   
(  
 -- SalesType = 2 (Service / SSS)  
 SELECT  
  a.LmpNo  
  , a.LmpDate  
  , c.DocNo  
  , c.UsageDocNo  
 FROM  
  spTrnSLmpHdr a WITH(NOLOCK, NOWAIT)  
  LEFT JOIN spTrnSLmpDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode  
   AND a.BranchCode = b.BranchCode  
   AND a.LmpNo = b.LmpNo  
  INNER JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode  
   AND a.BranchCode = c.BranchCode  
   AND b.DocNo = c.DocNo  
  INNER JOIN svTrnService d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode  
   AND a.BranchCode = d.BranchCode  
   AND b.ProductType = d.ProductType   
   AND c.UsageDocNo = d.JobOrderNo  
 WHERE  
  a.CompanyCode = @CompanyCode  
  AND a.BranchCode = @BranchCode  
  AND a.TypeOfGoods = @TypeOfGoods  
  AND b.ProductType = @ProductType  
  AND c.SalesType = '2'  
  AND d.ServiceStatus < 5  
  AND b.QtyBill -   
  ISNULL((  
   SELECT SUM(ISNULL(QtyReturn, 0))  
   FROM spTrnSRturSSDtl dtl WITH(NOLOCK, NOWAIT)  
    LEFT JOIN spTrnSRturSSHdr hdr WITH(NOLOCK, NOWAIT) ON dtl.CompanyCode = hdr.CompanyCode  
     AND dtl.BranchCode = hdr.BranchCode  
     AND dtl.ReturnNo = hdr.ReturnNo   
   WHERE dtl.CompanyCode = a.CompanyCode  
    AND dtl.BranchCode = a.BranchCode  
    AND TypeOfGoods = a.TypeOfGoods  
    AND ProductType = b.ProductType  
    AND PartNo = b.PartNo  
    AND PartNoOriginal = b.PartNoOriginal  
    AND dtl.DocNo = b.DocNo  
  ), 0) > 0  
  
 UNION  
  
 -- SalesType = 3 (Unit / SSU)  
 SELECT  
  a.LmpNo  
  , a.LmpDate  
  , c.DocNo  
  , c.UsageDocNo  
 FROM  
  spTrnSLmpHdr a WITH(NOLOCK, NOWAIT)  
  LEFT JOIN spTrnSLmpDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode  
   AND a.BranchCode = b.BranchCode  
   AND a.LmpNo = b.LmpNo  
  INNER JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode  
   AND a.BranchCode = c.BranchCode  
   AND b.DocNo = c.DocNo  
  INNER JOIN omTrSalesSO d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode  
   AND a.BranchCode = d.BranchCode  
   AND c.UsageDocNo = d.SONo  
 WHERE  
  a.CompanyCode = @CompanyCode  
  AND a.BranchCode = @BranchCode  
  AND a.TypeOfGoods = @TypeOfGoods  
  AND b.ProductType = @ProductType  
  AND c.SalesType = '3'  
  AND d.Status IN ('2', '4')  
  AND b.QtyBill -   
  ISNULL((  
   SELECT SUM(ISNULL(QtyReturn, 0))  
   FROM spTrnSRturSSDtl dtl WITH(NOLOCK, NOWAIT)  
    LEFT JOIN spTrnSRturSSHdr hdr WITH(NOLOCK, NOWAIT) ON dtl.CompanyCode = hdr.CompanyCode  
     AND dtl.BranchCode = hdr.BranchCode  
     AND dtl.ReturnNo = hdr.ReturnNo   
   WHERE dtl.CompanyCode = a.CompanyCode  
    AND dtl.BranchCode = a.BranchCode  
    AND TypeOfGoods = a.TypeOfGoods  
    AND ProductType = b.ProductType  
    AND PartNo = b.PartNo  
    AND PartNoOriginal = b.PartNoOriginal  
    AND dtl.DocNo = b.DocNo  
  ), 0) > 0  
) Lampiran  
ORDER BY  
 Lampiran.LmpNo DESC
GO
CREATE procedure [dbo].[uspfn_PmHstITSSend]  
--declare   
 @LastUpdateDate datetime,  
 @Segment int    
as    

if(@LastUpdateDate > getdate())
begin
	set @LastUpdateDate = getDate()
end

--select @LastUpdateDate='1990-01-01 00:00:00',@Segment=500    

---start insert PmHstIts---
declare @CompanyCode varchar(max)
set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationDtl)

declare @BranchCode varchar(max)
set @BranchCode = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0)

declare @DealerCode varchar(max)
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileSales where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode)

declare @DealerName varchar(max)
set @DealerName = isnull((select top 1 CompanyName from gnmstorganizationhdr where companycode=@companyCode),
					(select isnull(BranchName,' ') from gnMstOrganizationDtl where companycode=@companycode and branchcode=@dealercode))

declare @LastDate datetime
declare @NoInquiry int

select * into #t2
from (
select pp.CompanyCode, pp.BranchCode, pp.EmployeeID BranchHeadID, ge.EmployeeName BranchHeadName, pt.TeamID
  from pmPosition pp
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pp.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
  left join pmMstTeamMembers pt
	on pp.CompanyCode = pt.CompanyCode
   and pp.BranchCode = pt.BranchCode
   and pp.EmployeeID = pt.EmployeeID
   and pt.IsSupervisor = 1
 where pp.PositionId = '40'
) #t2

select * into #t3
from (
select pp.CompanyCode, pp.BranchCode, pp.BranchHeadID, pp.BranchHeadName,
	   pt.EmployeeID SalesHeadID, ge.EmployeeName SalesHeadName, pd.TeamID
  from #t2 pp
  left join pmMstTeamMembers pt
	on pp.CompanyCode=pt.CompanyCode
   and pp.BranchCode=pt.BranchCode
   and pp.TeamID=pt.TeamID
   and pt.IsSupervisor=0
  left join pmMstTeamMembers pd
	on pp.CompanyCode = pd.CompanyCode
   and pp.BranchCode = pd.BranchCode
   and pt.EmployeeID = pd.EmployeeID
   and pd.IsSupervisor = 1
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pt.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
) #t3


select * into #t4
from (
select pp.CompanyCode, pp.BranchCode, pp.BranchHeadID, pp.BranchHeadName, pp.SalesHeadID, pp.SalesHeadName, 
	   pt.EmployeeID SalesCoordinatorID, ge.EmployeeName SalesCoordinatorName, pd.TeamID
  from #t3 pp
  left join pmMstTeamMembers pt
	on pp.CompanyCode=pt.CompanyCode
   and pp.BranchCode=pt.BranchCode
   and pp.TeamID=pt.TeamID
   and pt.IsSupervisor=0
  left join pmMstTeamMembers pd
	on pp.CompanyCode = pd.CompanyCode
   and pp.BranchCode = pd.BranchCode
   and pt.EmployeeID = pd.EmployeeID
   and pd.IsSupervisor = 1
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pt.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
) #t4

select * into #t5
from (
select pp.CompanyCode, pp.BranchCode, pp.BranchHeadID, pp.BranchHeadName, pp.SalesHeadID, pp.SalesHeadName, 
	   pp.SalesCoordinatorID, pp.SalesCoordinatorName, pt.EmployeeID SalesmanID, ge.EmployeeName SalesmanName
  from #t4 pp
  left join pmMstTeamMembers pt
	on pp.CompanyCode=pt.CompanyCode
   and pp.BranchCode=pt.BranchCode
   and pp.TeamID=pt.TeamID
   and pt.IsSupervisor=0
  left join pmMstTeamMembers pd
	on pp.CompanyCode = pd.CompanyCode
   and pp.BranchCode = pd.BranchCode
   and pt.EmployeeID = pd.EmployeeID
   and pd.IsSupervisor = 1
  left join gnMstEmployee ge
	on pp.CompanyCode = ge.CompanyCode
   and pp.BranchCode = ge.BranchCode
   and pt.EmployeeID = ge.EmployeeID
   and ge.PersonnelStatus = 1
) #t5

insert into PmHstITS
select a.CompanyCode
	 , a.BranchCode
	 , a.InquiryNumber
	 , a.InquiryDate
	 , a.OutletID
	 , LEFT(isnull((select Top 1 BranchHeadname from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesCoordinatorID = a.SpvEmployeeID),''),50) BranchHead
	 , LEFT(isnull((select Top 1 SalesHeadName from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesCoordinatorID = a.SpvEmployeeID),''),50) SalesHead
	 , LEFT(isnull((select Top 1 SalesCoordinatorName from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesCoordinatorID = a.SpvEmployeeID),''),50) SalesCoordinator
	 , LEFT(isnull((select Top 1 SalesmanName from #t5 where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and SalesmanID = a.EmployeeID),''),50) Wiraniaga
	 , a.StatusProspek
	 , a.PerolehanData
	 , LEFT(replace(replace(isnull(a.NamaProspek,' '),CHAR(13), ' '),CHAR(10), ' '),50) NamaProspek
	 , LEFT(replace(replace(replace(isnull(a.AlamatProspek,' '),';',':'),CHAR(13), ' '),CHAR(10), ' '),200) AlamatProspek
	 , LEFT(a.TelpRumah,15) TelpRumah
	 , LEFT(isnull((select TOP 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'CITY' and LookUpValue = a.CityID),''),50) City
	 , LEFT(replace(replace(isnull(a.NamaPerusahaan,' '),CHAR(13), ' '),CHAR(10), ' '),50) NamaPerusahaan
	 , LEFT(replace(replace(replace(isnull(a.AlamatPerusahaan,' '),';',':'),CHAR(13), ' '),CHAR(10), ' '),200) AlamatPerusahaan
	 , a.Jabatan
	 , a.Handphone
	 , a.Faximile
	 , a.Email
	 , a.TipeKendaraan
	 , a.Variant
	 , a.Transmisi
	 , a.ColourCode
	 , LEFT(isnull((select TOP 1 RefferenceDesc1 from omMstRefference where CompanyCode = a.CompanyCode and RefferenceType = 'COLO' and RefferenceCode = a.ColourCode),''),50) ColourDescription
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMBY' and LookUpValue = a.CaraPembayaran),''),30) CaraPembayaran
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMOP' and LookUpValue = a.TestDrive),''),15) TestDrive
	 , a.QuantityInquiry
	 , LEFT(a.LastProgress,15) LastProgress
	 , a.LastUpdateStatus
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('P','PROSPECT')),'19000101') ProspectDate
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('HP','HOT')),'19000101') HotDate
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('SPK')),'19000101') SPKDate
	 , isnull((select top 1 isnull(UpdateDate,'19000101') from pmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber and LastProgress IN ('DELIVER','DO','DELIVERY','DEAL')),'19000101') DeliveryDate
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'LSNG' and LookUpValue = a.Leasing),''),30) Leasing
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'DWPM' and LookUpValue = a.DownPayment),''),30) DownPayment
	 , LEFT(isnull((select Top 1 LookUpValueName from GnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'TENOR' and LookUpValue = a.Tenor),''),30) Tenor
	 , a.LostCaseDate
	 , LEFT(replace(replace(isnull(a.LostCaseCategory,' '),CHAR(13), ' '),CHAR(10), ' '),30) LostCaseCategory
	 , LEFT(a.LostCaseReasonID,30) LostCaseReasonID
	 , LEFT(replace(replace(isnull(a.LostCaseOtherReason,' '),CHAR(13), ' '),CHAR(10), ' '),100) LostCaseOtherReason
	 , LEFT(replace(replace(isnull(a.LostCaseVoiceOfCustomer,' '),CHAR(13), ' '),CHAR(10), ' '),200) LostCaseVoiceOfCustomer
	 , LEFT(a.MerkLain,50) MerkLain
	 , a.CreatedBy
	 , a.CreationDate CreatedDate
	 , a.LastUpdateBy
	 , a.LastUpdateDate
from pmKDP a
where 1 = 1
and not exists (select * from PmHstITS b
				 where  b.CompanyCode = a.CompanyCode
				   and b.BranchCode = a.BranchCOde
				   and b.InquiryNumber = a.InquiryNumber)
				   order by LAstUPDateDAte

drop table #t2
drop table #t3
drop table #t4
drop table #t5

---end insert PmHstIts---
    
select * into #t1 from (    
select top (@Segment) CompanyCode, BranchCode, InquiryNumber, InquiryDate, OutletID  
     , BranchHead, SalesHead, SalesCoordinator, Wiraniaga, StatusProspek, PerolehanData  
  , NamaProspek, AlamatProspek, TelpRumah, City, NamaPerusahaan, AlamatPerusahaan  
  , Jabatan, Handphone, Faximile, Email, TipeKendaraan, Variant, Transmisi, ColourCode  
  , ColourDescription, CaraPembayaran, TestDrive, QuantityInquiry, LastProgress, LastUpdateStatus  
  , ProspectDate, HotDate, SPKDate, DeliveryDate, Leasing, DownPayment, Tenor  
  , LostCaseDate, LostCaseCategory, LostCaseReasonID, LostCaseOtherReason, LostCaseVoiceOfCustomer  
  , MerkLain, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate  
  from pmHstITS    
 where LastUpdateDate is not null    
   and LastUpdateDate > @LastUpdateDate    
 order by LastUpdateDate asc )#t1    
     
declare @LastUpdateQry datetime    
    set @LastUpdateQry = (select top 1 LastUpdateDate from #t1 order by LastUpdateDate desc)    
    
select * from #t1    
 union   
select top 100 CompanyCode, BranchCode, InquiryNumber, InquiryDate, OutletID  
     , BranchHead, SalesHead, SalesCoordinator, Wiraniaga, StatusProspek, PerolehanData  
  , NamaProspek, AlamatProspek, TelpRumah, City, NamaPerusahaan, AlamatPerusahaan  
  , Jabatan, Handphone, Faximile, Email, TipeKendaraan, Variant, Transmisi, ColourCode  
  , ColourDescription, CaraPembayaran, TestDrive, QuantityInquiry, LastProgress, LastUpdateStatus  
  , ProspectDate, HotDate, SPKDate, DeliveryDate, Leasing, DownPayment, Tenor  
  , LostCaseDate, LostCaseCategory, LostCaseReasonID, LostCaseOtherReason, LostCaseVoiceOfCustomer  
  , MerkLain, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate  
  from pmHstITS    
 where LastUpdateDate = @LastUpdateQry    
     
  drop table #t1
GO
create procedure [dbo].[uspfn_HrUpdateJoinDateTraining]
	@CompanyCode varchar(25),
	@EmployeeID varchar(25),
	@JoinDate datetime,
	@ResignDate date

as
begin
	update HrEmployeeTraining
	   set IsDeleted=1
	 where CompanyCode=@CompanyCode
	   and EmployeeID=@EmployeeID
	   and convert(datetime,TrainingDate) < @JoinDate

	update HrEmployeeTraining
	   set IsDeleted=1
	 where CompanyCode=@CompanyCode
	   and EmployeeID=@EmployeeID
	   and convert(datetime, TrainingDate) > @ResignDate
end
GO
CREATE procedure [dbo].[sp_InqVehicleHistory4Lookup] (
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProfitCenterCode varchar(15)
)
as
begin
	 select distinct
                     a.PoliceRegNo
                    ,a.CustomerCode
                    ,b.CustomerName
                    ,  rtrim(rtrim(a.CustomerCode) + ' - ' + rtrim(b.CustomerName)) as CustomerDesc
                    ,  rtrim(rtrim(b.Address1) + ' ' + rtrim(b.Address2) + ' ' + rtrim(b.Address3) + ' ' + rtrim(b.Address4)) as CustomerAddr
                    , b.Address1, b.Address2, b.Address3 + ' ' + b.Address4 Address3
                    ,a.DealerCode
                    ,c.CustomerName DealerName
                    , (a.CustomerCode + ' - ' + c.CustomerName) as DealerDesc
                    ,a.ChassisCode
                    ,  cast(a.ChassisNo as varchar) ChassisNo
                    ,a.EngineCode
                    ,  cast(a.EngineNo as varchar) EngineNo
                    ,a.ServiceBookNo
                    ,a.ClubCode
                    ,a.ColourCode
                    ,case a.FakturPolisiDate when ('19000101') then null else a.FakturPolisiDate end FakturPolisiDate
                    ,a.ClubNo
                    ,case a.ClubDateStart when ('19000101') then null else a.ClubDateStart end ClubDateStart
                    ,case a.ClubDateFinish when ('19000101') then null else a.ClubDateFinish end ClubDateFinish
                    ,case a.ClubSince when ('19000101') then null else a.ClubSince end ClubSince
                    , (case a.IsClubStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsClubStatusDesc
                    ,a.IsClubStatus
                    , (case a.IsContractStatus when 1 then 'Aktif' else 'Tidak Aktif' end) as IsContractStatusDesc
                    ,a.IsActive
                    , (case a.IsActive when 1 then 'Aktif' else 'Tidak Aktif' end) as IsActiveDesc
                    ,a.BasicModel
                    ,a.TransmissionType
                    ,case a.LastServiceDate when ('19000101') then null else a.LastServiceDate end LastServiceDate
                    ,a.LastJobType
                    ,a.ChassisNo
                    ,a.ContractNo
                    ,a.ContactName
                    ,b.CityCode
                    ,f.LookUpValueName CityName
                    from svMstCustomerVehicle a
                    left join gnMstCustomer b on b.CompanyCode = a.CompanyCode 
	                    and b.CustomerCode = a.CustomerCode
                    left join gnMstCustomer c on c.CompanyCode = a.CompanyCode 
	                    and c.CustomerCode = a.DealerCode
                    left join svMstJob d on 
	                    d.CompanyCode = a.CompanyCode and
	                    d.BasicModel = a.BasicModel 	
                    inner join gnMstCustomerProfitCenter e on 
                        e.CompanyCode = a.CompanyCode and
                        e.CustomerCode = a.CustomerCode
                    left join gnMstLookupDtl f on 
                        f.CompanyCode = a.CompanyCode and
                        f.CodeID = 'CITY' and
                        f.LookUpValue = b.CityCode
                    where a.CompanyCode=@CompanyCode and a.IsActive = 1 and e.BranchCode = @BranchCode and e.ProfitCenterCode = @ProfitCenterCode
END
GO
create procedure [dbo].[uspfn_spGetMaxQtyReturSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15), @PartNo varchar(25),  
@PartNoOriginal varchar(25), @DocNo varchar(20), @LmpNo varchar(25), @ReturnNo varchar(25)  
as  
            SELECT   
            ISNULL((SELECT QtyBill FROM spTrnSLmpDtl WHERE LmpNo = @LmpNo AND   
                PartNo = @PartNo AND   
                PartNoOriginal = @PartNoOriginal AND      
                CompanyCode = @CompanyCode AND  
                BranchCode = @BranchCode  
             ) -  
            ISNULL(SUM (QtyReturn),0), 0) AS MaxQtyRetur FROM spTrnSRturSSdtl  
            LEFT JOIN spTrnSRturSSHdr ON spTrnSRturSSHdr.ReturnNo = spTrnSRturSSdtl.ReturnNo AND  
                spTrnSRturSSHdr.CompanyCode = spTrnSRturSSdtl.CompanyCode AND  
                spTrnSRturSSHdr.BranchCode = spTrnSRturSSdtl.BranchCode  
            WHERE spTrnSRturSSdtl.CompanyCode = @CompanyCode  
                AND spTrnSRturSSdtl.BranchCode = @BranchCode  
                --AND spTrnSRturSSHdr.DocNo = @DocNo  
                AND spTrnSRturSSdtl.PartNo = @PartNo  
                AND spTrnSRturSSdtl.PartNoOriginal = @PartNoOriginal  
    AND spTrnSRturSSDtl.DocNo = @DocNo  
                AND spTrnSRturSSHdr.Status NOT IN ('3')  
                AND spTrnSRturSSHdr.ReturnNo <> @ReturnNo
GO
create procedure [dbo].[uspfn_omsdmovementsoinsert]
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@SONo as varchar(15)
as
--exec spfn_omsdmovementsoinsert '6159401000','6159401001','SOR/15/000233'
declare @sql varchar(max);

set @sql='insert into '+dbo.GetDbMD(@CompanyCode,@BranchCode)+'..omSDMovement
   select a.CompanyCode,a.BranchCode,a.SONo,a.SODate,b.SOSeq,b.SalesModelCode,b.SalesModelYear,
   b.ChassisCode,b.ChassisNo,b.enginecode, b.EngineNo,b.ColourCode,a.WareHouseCode,a.CustomerCode,''-'',
   dbo.getcompanymd(a.CompanyCode,a.BranchCode),dbo.GetBranchMD(a.companycode,a.branchcode),
   dbo.GetWarehouseMD(a.companyCode,a.branchcode),a.Status,''0'',GETDATE(),a.ApproveBy,GETDATE(),a.ApproveBy,GETDATE()   
   from omTrSalesSO a inner join omTrSalesSOVin b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode and a.SONo=b.SONo
   where a.companycode='+@CompanyCode+' and a.branchcode='+@BranchCode+' and a.SONo='''+@SONo+'''';
--print @sql;
exec(@sql)
GO
create procedure [dbo].[uspfn_HrUpdateJoinDateMutation]
	@CompanyCode varchar(25),
	@EmployeeID varchar(25),
	@JoinDate datetime,
	@ResignDate datetime

as
begin
	update HrEmployee
	   set JoinDate = @JoinDate
	 where CompanyCode = @CompanyCode
	   and EmployeeID = EmployeeID
	   and JoinDate = @JoinDate

	begin try
		update HrEmployeeMutation
		   set MutationDate=@JoinDate
		 where CompanyCode=@CompanyCode
		   and EmployeeID=@EmployeeID
		   and IsJoinDate=1
	end try
	begin catch
		update HrEmployeeMutation
		   set IsDeleted=0
		     , IsJoinDate=1
		 where CompanyCode=@CompanyCode
		   and EmployeeID=@EmployeeID
		   and convert(datetime, MutationDate)=@JoinDate
	end catch

	--update HrEmployeeMutation
	--   set IsDeleted=1
	-- where CompanyCode=@CompanyCode
	--   and EmployeeID=@EmployeeID
	--   and convert(datetime,MutationDate) < @JoinDate

	update HrEmployeeMutation
	   set IsDeleted=1
	 where CompanyCode=@CompanyCode
	   and EmployeeID=@EmployeeID
	   and MutationDate < @JoinDate

	update HrEmployeeMutation
	   set IsDeleted=1
	 where CompanyCode=@CompanyCode
	   and EmployeeID=@EmployeeID
	   and convert(datetime, MutationDate) > @ResignDate
end
GO
create procedure [dbo].[uspfn_SyncCsLkuTDayCallView]
as
begin
	set nocount on  

	if exists (select * from sys.tables where name = 'CsLkuTDayCallView') 
		drop table CsLkuTDayCallView  

	select * into CsLkuTDayCallView from (select * from CsLkuTDayCallViewSource)x 
 
	select 'Finish Job'  
end
GO
create procedure [dbo].[uspfn_ReloadCSTdayCallResource]
as

begin
	declare @ParamDate datetime;
	declare @RecordCount int;
	
	set @ParamDate = convert(varchar(4), datepart(year, getdate()) )+ '-01-01';

	if object_id('CsLkuTDayCallView') is not null
	begin
		select 'CsLkuTDayCallView is exist';

		delete CsLkuTDayCallView 
		 where DODate >= @ParamDate

		set @RecordCount = ( select count(CompanyCode) from CsLkuTDayCallView );

		if @RecordCount = 0
		begin
			select 'Record is null -> regenerating';

			drop table CsLkuTDayCallView;
			
			with x as (
				select * from CsLkuTDayCallViewSource
			)
			select *
			  into CsLkuTDayCallView
			  from x
		end
		

		insert into CsLkuTDayCallView (CompanyCode, BranchCode, CustomerCode, Chassis, CustomerName, Engine, SalesModelCode, SalesModelYear, DODate, BPKDate, PoliceRegNo, OutStanding, BirthDate, AddPhone1, AddPhone2, ReligionCode)
		select CompanyCode, BranchCode, CustomerCode, Chassis, CustomerName, Engine, SalesModelCode, SalesModelYear, DODate, BPKDate, PoliceRegNo, OutStanding, BirthDate, AddPhone1, AddPhone2, ReligionCode
		  from CsLkuTDayCallViewSource
		 where DODate >= @ParamDate
	end
	else
	begin
		select 'CsLkuTDayCallView is not exists';

		with x as (
			select * from CsLkuTDayCallViewSource
		)
		select *
		  into CsLkuTDayCallView
		  from x
	end

end;
GO
CREATE procedure [dbo].[uspfn_SvInqVehicleHistoryWSDS]
	 @CompanyCode varchar(20),
	 @BranchCode  varchar(20),
	 @PoliceRegNo varchar(20) = '',
	 @BasicModel  varchar(20) = '',
	 @CustomerCode varchar(20) = '',
	 @CustomerName varchar(20) = '',
	 @ChassisCode  varchar(20) = '',
	 @ChassisNo    varchar(20) = '',
	 @EngineCode  varchar(20) = '',
	 @EngineNo    varchar(20) = ''

as

select distinct convert(bit, '0') as IsSelect
     , a.PoliceRegNo
     , a.BasicModel
     , '' as TransmissionType
     , ltrim(rtrim(a.ChassisCode)) + ' ' + cast(a.ChassisNo as char) Chassis 
     , a.ChassisCode
     , cast(a.ChassisNo as varchar) as ChassisNo
     , ltrim(rtrim(a.EngineCode)) + ' ' + cast(a.EngineNo as char) Engine
     , '' as ServiceBookNo
     , '' as ColourCode
     , a.CustomerCode + ' - ' + b.CustomerName Customer
     , '' as FakturPolisiDate	
     , '' as LastServiceDate
     , '' as LastServiceOdometer
     , '' as Dealer
     , b.CustomerName
 from svHstVehicle a
 left join gnMstCustomer b with(nolock, nowait)
   on a.CompanyCode = b.CompanyCode
  and a.CustomerCode = b.CustomerCode
   and a.PoliceRegNo like ('%' + @PoliceRegNo + '%')
   and a.BasicModel like ('%' + @BasicModel + '%')
   and a.CustomerCode like ('%' + @CustomerCode + '%')
   and b.CustomerName like ('%' + @CustomerName + '%')
   and a.ChassisCode like ('%' + @ChassisCode + '%')
   and convert(varchar, a.ChassisNo) like ('%' + @ChassisNo + '%')
   and a.EngineCode like ('%' + @EngineCode + '%')
   and convert(varchar, a.EngineNo) like ('%' + @EngineNo  + '%')
GO
CREATE proc [dbo].[uspfn_sfEmpTrainHist]
@date datetime
as
begin

declare @dealer varchar(20)
set @dealer = '%'

SELECT * INTO #1 FROM (
SELECT 
	 EmployeeID
	,left(datename(month, TrainingDate),3) as Bulan
	,PostTest
FROM SyncEmployeeTrainingHist
WHERE 
left(datename(year, TrainingDate),110) = left(datename(year, getdate()),110)
AND PostTest IS NOT NULL AND PostTest <> 0)#1

SELECT * INTO #pivot FROM (
SELECT DISTINCT [EmployeeID], [Jan],[Feb],[Mar],[Apr],[May],[Jun],[Jul],[Aug],[Sep],[Oct],[Nov],[Dec]
FROM #1
	PIVOT (SUM(PostTest) 
	FOR Bulan IN ([Jan],[Feb],[Mar],[Apr],[May],[Jun],[Jul],[Aug],[Sep],[Oct],[Nov],[Dec])) 
AS Priodik)#pivot

SELECT DISTINCT
	row_number() over(order by a.EmployeeName asc) Nomer
	,a.BranchCode
	,a.EmployeeID
	,a.EmployeeName
	,a.TitleCode
	,b.GradeCode
	,(SELECT TOP 1 DealerAbbreviation FROM gnMstDealerMapping WHERE DealerCode like '%' + @dealer + '%') AS DealerName
	,c.OutletAbbreviation AS Outlet
	
	,(SELECT TOP 1 PosName
		FROM gnMstPosition 
	   WHERE PosCode = b.PosCode) 
	      AS JobDesc
	      
	,(SELECT LookUpValueName 
		FROM gnMstLookUpDtl 
	   WHERE CodeID = 'ITSG' AND LookUpValue = b.GradeCode) 
	      AS Grade
	      
	,a.JoinDate
	
	,(SELECT TOP 1 AssignedDate 
		FROM SfEmployeeGradeHistory 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND HistoryGrade = '1'
			 AND AssignedDate <= @date) 
	      AS TraineeDate
	      
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP1'
			 AND TrainingDate <= @date) AS TRN01
		  
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP2'
			 AND TrainingDate <= @date) AS TRN02
		  
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP3'
			 AND TrainingDate <= @date)  AS TRN03
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP4'
			 AND TrainingDate <= @date)  AS TRN04
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP5'
			 AND TrainingDate <= @date)  AS TRN05
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP6'
			 AND TrainingDate <= @date)   AS TRN06
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP7'
			 AND TrainingDate <= @date)   AS TRN07
			 
	,(SELECT TOP 1 Qualitatif
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '1'
			 AND TrainingCode = 'STDP7'
			 AND TrainingDate <= @date)  AS TRN07review
			 
	,(SELECT TOP 1 AssignedDate 
		FROM SfEmployeeGradeHistory 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND HistoryGrade = '2'
			 AND AssignedDate <= @date) AS SilverDate	      
				 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '2'
			 AND TrainingCode = 'SPSS'
			 AND TrainingDate <= @date)  AS SPSSilver
			 
    ,(SELECT TOP 1 AssignedDate 
		FROM SfEmployeeGradeHistory 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND HistoryGrade = '3'
			 AND AssignedDate <= @date) AS GoldDate	      
				 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '3'
			 AND TrainingCode = 'SPSG'
			 AND TrainingDate <= @date)  AS SPSGold
			 
	,(SELECT TOP 1 AssignedDate 
		FROM SfEmployeeGradeHistory 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND HistoryGrade = '4'
			 AND AssignedDate <= @date) AS PlatinumDate	      
				 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND Grade = '4'
			 AND TrainingCode = 'SPSP'
			 AND TrainingDate <= @date)  AS SPSPlatinum

	,(SELECT TOP 1 MutaDate
		FROM SfHistEmplMutation 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SC'
			 AND MutaCode LIKE '%PROMOTION%'
			 AND MutaDate <= @date) AS SCDate			 
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SC'
			 AND TrainingCode = 'SCB'
			 AND TrainingDate <= @date) AS SCBasic
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SC'
			 AND TrainingCode = 'SCA'
			 AND TrainingDate <= @date)  AS SCAdvance
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SC'
			 AND TrainingCode = 'SCI'
			 AND TrainingDate <= @date)  AS SCInterMediate			 
			 
	,(SELECT TOP 1 MutaDate
		FROM SfHistEmplMutation 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SH'
			 AND MutaCode LIKE '%PROMOTION%'
			 AND MutaDate <= @date) AS SHDate
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SH'
			 AND TrainingCode = 'SHB'
			 AND TrainingDate <= @date)  AS SHBasic
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SH'
			 AND TrainingCode = 'SHP'
			 AND TrainingDate <= @date) AS SHPersonalTask
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SH'
			 AND TrainingCode = 'SHS'
			 AND TrainingDate <= @date) AS SHSist
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SH'
			 AND TrainingCode = 'SHI'
			 AND TrainingDate <= @date) AS SHIntermediate
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'SH'
			 AND TrainingCode = 'SHA'
			 AND TrainingDate <= @date) AS SHAdvance
			 
	,(SELECT TOP 1 MutaDate
		FROM SfHistEmplMutation 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'BM'
			 AND MutaCode LIKE '%PROMOTION%'
			 AND MutaDate <= @date) AS BMTitle
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'BM'
			 AND TrainingCode = 'BM1'
			 AND TrainingDate <= @date) AS BMBasic
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'BM'
			 AND TrainingCode = 'BMP'
			 AND TrainingDate <= @date) AS BMPersonalTask
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'BM'
			 AND TrainingCode = 'BMI'
			 AND TrainingDate <= @date) AS BMIntermediate
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'BM'
			 AND TrainingCode = 'BM2'
			 AND TrainingDate <= @date) AS BMAdvance
			 
,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'TFT'
			 AND TrainingCode = 'TFTB'
			 AND TrainingDate <= @date) AS TFTBasic
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'TFT'
			 AND TrainingCode = 'TFTI'
			 AND TrainingDate <= @date) AS TFTIntermediate
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'TFT'
			 AND TrainingCode = 'TFTA'
			 AND TrainingDate <= @date) AS TFTAdvance
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'CRO'
			 AND TrainingCode = 'CROB'
			 AND TrainingDate <= @date) AS CROBasic
			 
    ,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'CRO'
			 AND TrainingCode = 'CROI'
			 AND TrainingDate <= @date) AS CROIntermediate
			 
	,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 AND PosCode = 'CRO'
			 AND TrainingCode = 'CROA'
			 AND TrainingDate <= @date) AS CROAdvance
			 
    ,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 --AND PosCode = 'HRDGA'
			 AND TrainingCode = 'HRDGA'
			 AND TrainingDate <= @date) AS HRDGA
			 
	 ,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 --AND PosCode = 'MARK'
			 AND TrainingCode = 'HRDGA'
			 AND TrainingDate <= @date) AS Marketing
			 
	 ,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 --AND PosCode = 'HRDGA'
			 AND TrainingCode = 'LOGS'
			 AND TrainingDate <= @date)  AS LOGISTIC
			 
	 ,(SELECT TOP 1 TrainingDate
		FROM SyncEmployeeTrainingHist 
	   WHERE BranchCode = a.BranchCode 
			 AND EmployeeID = a.EmployeeID 
			 --AND PosCode = 'HRDGA'
			 AND TrainingCode = 'CS'
			 AND TrainingDate <= @date)  AS CustomerService
	,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec
FROM gnMstEmployee a
LEFT JOIN gnMstEmployeeData b
	ON a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.EmployeeID = b.EmployeeID
LEFT JOIN gnMstDealerOutletMapping c
	ON a.BranchCode = c.OutletCode
LEFT JOIN #pivot pvt
	ON a.EmployeeID = pvt.EmployeeID				
WHERE
	 a.PersonnelStatus = '1' AND
	 b.OrgCode = 'SALES'
	 ORDER BY BranchCode,JobDesc --and b.InActiveDate is null
	 
DROP TABLE #1
DROP TABLE #pivot

end
GO
create procedure [dbo].[uspfn_HrListEmployeeAchieveSend] 
	@LastUpdateDate datetime,
	@Segment int

--select @LastUpdateDate='1990-01-01 00:00:00',@Segment=500
as

select * into #t1 from (
select top (@Segment) CompanyCode
     , EmployeeID, AssignDate, Department, Position, Grade, IsJoinDate
	 , CreatedBy, CreatedDate, UpdatedBy, UpdatedDate
  from HrEmployeeAchievement
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1
 
declare @LastUpdateQry datetime
    set @LastUpdateQry = (select top 1 UpdatedDate from #t1 order by UpdatedDate desc)

select * from #t1
 union
select CompanyCode
     , EmployeeID, AssignDate, Department, Position, Grade, IsJoinDate
	 , CreatedBy, CreatedDate, UpdatedBy, UpdatedDate
  from HrEmployeeAchievement
 where UpdatedDate = @LastUpdateQry
 
  drop table #t1
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPerlengkapanOut] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PerlengkapanType varchar(2),
 @PerlengkapanDateFrom DateTime,
 @PerlengkapanDateTo DateTime,
 @NoPerlengkapanFrom varchar(100),
 @NoPerlengkapanTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'

SELECT 
a.PerlengkapanNo, a.CustomerCode, b.Address1 + '' '' + b.Address2 + '' '' + b.Address3 + '' '' + b.Address4 as Address,
convert(varchar(20),a.PerlengkapanDate,106) as PerlengkapanDate, 
a.ReferenceNo, 
case when year(a.ReferenceDate) = ''1900'' then '''' else convert(varchar(20),a.ReferenceDate,106) end as ReferenceDate, 
a.SourceDoc, b.CustomerName, CASE ISNULL(PerlengkapanType, ''0'') WHEN ''1'' THEN ''BPK'' WHEN ''2'' THEN ''TRANSFER'' WHEN 3 THEN ''RETURN'' ELSE ''Unknown Type'' END AS PerlengkapanType, 
a.Remark, 
CASE
	WHEN a.Status = 0 THEN ''Open''
	WHEN a.Status = 1 THEN ''Printed''
	WHEN a.Status = 2 THEN ''Closed''
	WHEN a.Status = 3 THEN ''Canceled''
	WHEN a.Status = 9 THEN ''Finished''
	END as Status 
FROM 
	omTrSalesPerlengkapanOut a
LEFT JOIN 
	GnMstCustomer b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if len(rtrim(@PerlengkapanType)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanType = ''' + rtrim(@PerlengkapanType) + ''''

if year(@PerlengkapanDateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PerlengkapanDate between ''' + convert(varchar(50),@PerlengkapanDateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PerlengkapanDateTo) + ''''

if len(rtrim(@NoPerlengkapanFrom)) > 0
   set @pQuery = @pQuery + ' and a.PerlengkapanNo between ''' + rtrim(@NoPerlengkapanFrom) + '''' + ' and ' + '''' + rtrim(@NoPerlengkapanTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.PerlengkapanNo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_omSlsDoUpdateSOVin]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15) 
)  
AS  

DECLARE 
	@QRYTemp as varchar(max),
	@CompanyMD as varchar(15),
	@DBMD as varchar(15)
 
set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode)

begin
--exec uspfn_omSlsDoUpdateSOVin 6006410,600641001,'DOS/14/000025'

set @QRYTemp =
'select a.*,b.SONo,c.ServiceBookNo,c.KeyNo from OmTrSalesDODetail a inner join OmTrSalesDO b 
	on a.companyCode = b.companyCode and a.branchCode = b.branchCode and a.DONo = b.DONo
	inner join ' + @DBMD + '.dbo.OmMstVehicle c on a.chassisCode = c.chassisCode and a.chassisNo = c.chassisNo
where a.companyCode = ''' + @CompanyCode + '''
and a.branchCode = ''' + @BranchCode + ''' and a.DONo = ''' + @DONo + ''''
				
	exec (@QRYTemp);	 
end
GO
CREATE procedure [dbo].[sp_InsertTransactionHistoryTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Month int,
@Year int,
@CreatedBy varchar(10),
@CreatedDate datetime
)


as

DELETE spHstTransaction WHERE YEAR = @Year AND MONTH = @Month and CompanyCode = @CompanyCode and BranchCode = @BranchCode
SELECT 
	itemLoc.CompanyCode
    , itemLoc.BranchCode
    , itemLoc.PartNo
	, @Year Year
	, @Month Month
    , itemLoc.WarehouseCode
    , ProductType
    , PartCategory
    , MovingCode
    , ABCClass
    , TypeOfGoods
    , ISNULL(CostPrice, 0) CostPrice        
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForPurchaseQty, 0) ELSE 0 END ReceivingForPurchaseQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForNPurchaseQty, 0) ELSE 0 END ReceivingForNPurchaseQty
	, ISNULL(Adjustment.AdjustmentPlusQty, 0) AdjustmentPlusQty
	, ISNULL(Adjustment.AdjustmentMinusQty, 0) AdjustmentMinusQty
	, ISNULL(WHTrf.WTHOutQty, 0) WTHOutQty
	, ISNULL(WHTrf.WTHInQty, 0) WTHInQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCreditQty, 0) ELSE 0 END SalesForCreditQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCashQty, 0) ELSE 0 END SalesForCashQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForBPSQty, 0) ELSE 0 END SalesForBPSQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForServiceQty, 0) ELSE 0 END SalesForServiceQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForUnitQty, 0) ELSE 0 END SalesForUnitQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCreditQty, 0) ELSE 0 END ReturForSalesCreditQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCashQty, 0) ELSE 0 END ReturForSalesCashQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturnForBPSQty, 0) ELSE 0 END ReturnForBPSQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForServiceQty, 0) ELSE 0 END ReturForServiceQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForUnitQty, 0) ELSE 0 END ReturForUnitQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(POS.PurchaseOrderQty, 0) ELSE 0 END PurchaseOrderQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.OnOrderQty, 0) ELSE 0 END OnOrderQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.InTransitQty, 0) ELSE 0 END InTransitQty
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(BO.BackOrderQty, 0) ELSE 0 END BackOrderQty
	, ISNULL(itemLoc.OnHand, 0) OnHand
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForPurchaseAmt, 0) ELSE 0 END ReceivingForPurchaseAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Receiving.ReceivingForNPurchaseAmt, 0) ELSE 0 END ReceivingForNPurchaseAmt
	, ISNULL(Adjustment.AdjustmentPlusAmt, 0) AdjustmentPlusAmt
	, ISNULL(Adjustment.AdjustmentMinusAmt, 0) AdjustmentMinusAmt
	, ISNULL(WHTrf.WTHOutAmt, 0) WTHOutAmt
	, ISNULL(WHTrf.WTHInAmt, 0) WTHInAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCreditAmt, 0) ELSE 0 END SalesForCreditAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(FPJ.SalesForCashAmt, 0) ELSE 0 END SalesForCashAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForBPSAmt, 0) ELSE 0 END SalesForBPSAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForServiceAmt, 0) ELSE 0 END SalesForServiceAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Lmp.SalesForUnitAmt, 0) ELSE 0 END SalesForUnitAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCreditAmt, 0) ELSE 0 END ReturForSalesCreditAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRtur.ReturForSalesCashAmt, 0) ELSE 0 END ReturForSalesCashAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturnForBPSAmt, 0) ELSE 0 END ReturnForBPSAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForServiceAmt, 0) ELSE 0 END ReturForServiceAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(SRturSS.ReturForUnitAmt, 0) ELSE 0 END ReturForUnitAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(POS.PurchaseOrderAmt, 0) ELSE 0 END PurchaseOrderAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.OnOrderAmt, 0) ELSE 0 END OnOrderAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(Balance.InTransitAmt, 0) ELSE 0 END InTransitAmt
	, CASE WHEN itemLoc.WarehouseCode BETWEEN '00' AND '96' THEN ISNULL(BO.BackOrderAmt, 0) ELSE 0 END BackOrderAmt
	, ISNULL(itemLoc.OnHand, 0) * ISNULL(itemPrice.CostPrice, 0) OnHandAmt
	, @CreatedBy CreatedBy
	, @CreatedDate CreatedDate
INTO #HstTransaction
FROM spMstItemLoc itemLoc WITH(NOLOCK, NOWAIT)
	LEFT JOIN (SELECT rcvDtl.PartNo, rcvDtl.WarehouseCode 
		    , SUM(CASE WHEN (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) ELSE 0 END) ReceivingForPurchaseQty
            , SUM(CASE WHEN NOT (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) ELSE 0 END) ReceivingForNPurchaseQty	
            , SUM(CASE WHEN (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) - ROUND(ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) * ISNULL(rcvDtl.DiscPct, 0) / 100, 0) ELSE 0 END) ReceivingForPurchaseAmt
            , SUM(CASE WHEN NOT (rcvHdr.ReceivingType in (1,2) AND rcvHdr.TransType = 4) THEN ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) - ROUND(ISNULL(rcvDtl.ReceivedQty, 0) * ISNULL(rcvDtl.PurchasePrice, 0) * ISNULL(rcvDtl.DiscPct, 0) / 100, 0) ELSE 0 END) ReceivingForNPurchaseAmt			
		FROM spTrnPRcvHdr rcvHdr WITH(NOLOCK, NOWAIT)
			INNER JOIN spTrnPRcvDtl rcvDtl with (nolock, nowait) ON rcvHdr.WRSNo = rcvDtl.WrsNo
				AND rcvHdr.CompanyCode = rcvDtl.CompanyCode
				AND rcvHdr.BranchCode = rcvDtl.BranchCode				                
		WHERE	rcvHdr.CompanyCode = @CompanyCode
			AND rcvHdr.BranchCode = @BranchCode
			AND MONTH(rcvHdr.WRSDate) = @Month 
			AND YEAR(rcvHdr.WRSDate) = @Year
			AND rcvHdr.Status NOT IN (0, 1, 3)
		GROUP BY rcvDtl.PartNo, rcvDtl.WarehouseCode			
	) Receiving ON itemLoc.PartNo = Receiving.PartNo AND itemloc.WarehouseCode = Receiving.WarehouseCode
	LEFT JOIN (SELECT adjDtl.PartNo, adjDtl.WarehouseCode
			, SUM(CASE adjustmentCode WHEN '+' THEN ISNULL(QtyAdjustment, 0) ELSE 0 END) AdjustmentPlusQty
			, SUM(CASE adjustmentCode WHEN '-' THEN ISNULL(QtyAdjustment, 0) ELSE 0 END) AdjustmentMinusQty	
            , SUM(CASE adjustmentCode WHEN '+' THEN ISNULL(QtyAdjustment, 0) * ISNULL(CostPrice, 0) ELSE 0 END) AdjustmentPlusAmt
			, SUM(CASE adjustmentCode WHEN '-' THEN ISNULL(QtyAdjustment, 0) * ISNULL(CostPrice, 0) ELSE 0 END) AdjustmentMinusAmt	
		FROM spTrnIAdjustHdr adjHdr WITH(NOLOCK, NOWAIT)
			INNER JOIN spTrnIAdjustDtl adjDtl WITH(NOLOCK, NOWAIT) ON adjHdr.AdjustmentNo = adjDtl.AdjustmentNo
				AND adjHdr.CompanyCode = adjDtl.CompanyCode 
				AND adjHdr.BranchCode = adjDtl.BranchCode				                
		WHERE adjHdr.CompanyCode = @CompanyCode
			AND adjHdr.BranchCode  = @BranchCode
			AND MONTH(adjHdr.AdjustmentDate) = @Month
			AND YEAR(adjHdr.AdjustmentDate) = @Year
			AND adjHdr.Status = 2
		GROUP BY adjDtl.PartNo, adjDtl.WarehouseCode
	) Adjustment ON itemLoc.PartNo = Adjustment.PartNo AND itemloc.WarehouseCode = Adjustment.WarehouseCode
	LEFT JOIN (SELECT aWHTrf.PartNo, aWHTrf.warehouseCode 
			, SUM(ISNULL(aWHTrf.WTHOutQty, 0))WTHOutQty , SUM(ISNULL(aWHTrf.WTHInQty, 0))WTHInQty  
            , SUM(ISNULL(aWHTrf.WTHOutAmt, 0))WTHOutAmt , SUM(ISNULL(aWHTrf.WTHInAmt, 0))WTHInAmt
        FROM 
        (SELECT whTrfDtl.PartNo, whTrfDtl.FromWarehouseCode warehouseCode 
			    , SUM(ISNULL(Qty,0)) WTHOutQty, 0 WTHInQty 
                , SUM(ISNULL(Qty, 0) * ISNULL(CostPrice, 0)) WTHOutAmt, 0 WTHInAmt
	        FROM spTrnIWhTrfHdr whTrfHdr WITH(NOLOCK, NOWAIT)
				INNER JOIN spTrnIWhTrfDtl whTrfDtl WITH(NOLOCK, NOWAIT) ON whTrfHdr.WHTrfNo = whTrfDtl.WHTrfNo
				AND whTrfHdr.CompanyCode = whTrfDtl.CompanyCode
				AND whTrfHdr.BranchCode = whTrfDtl.BranchCode			                
			WHERE whTrfHdr.CompanyCode = @CompanyCode
				AND whTrfHdr.BranchCode = @BranchCode
				AND MONTH(whTrfHdr.WHTrfDate) = @Month
				AND YEAR(whTrfHdr.WHTrfDate) = @Year
				AND whTrfHdr.Status = 2
			GROUP BY whTrfDtl.PartNo, whTrfDtl.FromWarehouseCode
			UNION ALL
			SELECT whTrfDtl.PartNo, whTrfDtl.ToWarehouseCode warehouseCode 
				,0 WTHOutQty, SUM(ISNULL(Qty, 0)) WTHInQty 
                ,0 WTHOutAmt, SUM(ISNULL(Qty, 0) * ISNULL(CostPrice, 0)) WTHInAmt 
			FROM spTrnIWhTrfHdr whTrfHdr WITH(NOLOCK, NOWAIT)
				INNER JOIN spTrnIWhTrfDtl whTrfDtl WITH(NOLOCK, NOWAIT) ON whTrfHdr.WHTrfNo = whTrfDtl.WHTrfNo
				AND whTrfHdr.CompanyCode = whTrfDtl.CompanyCode
				AND whTrfHdr.BranchCode = whTrfDtl.BranchCode			                
			WHERE whTrfHdr.CompanyCode = @CompanyCode
				AND whTrfHdr.BranchCode = @BranchCode
				AND MONTH(whTrfHdr.WHTrfDate) = @Month
				AND YEAR(whTrfHdr.WHTrfDate) = @Year
				AND whTrfHdr.Status = 2
			GROUP BY whTrfDtl.PartNo, whTrfDtl.ToWarehouseCode 
        ) aWHTrf
        GROUP BY aWHTrf.PartNo, aWHTrf.WarehouseCode
	) WHTrf ON itemLoc.PartNo = WHTrf.PartNo AND itemloc.WarehouseCode = WHTrf.WarehouseCode
	LEFT JOIN (SELECT fpjDtl.PartNo, fpjDtl.WarehouseCode
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(QtyBill, 0) ELSE 0 END) as SalesForCashQty
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(QtyBill, 0) ELSE 0 END) as SalesForCreditQty
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(QtyBill, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as SalesForCashAmt
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(QtyBill, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as SalesForCreditAmt
        FROM spTrnSFPJHdr fpjHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSFPJDtl fpjDtl WITH(NOLOCK, NOWAIT) ON fpjHdr.FPJNo = fpjDtl.FPJNo
                AND fpjHdr.CompanyCode = fpjDtl.CompanyCode
                AND fpjHdr.BranchCode = fpjDtl.BranchCode				                
        WHERE fpjHdr.CompanyCode = @CompanyCode
            AND fpjHdr.BranchCode = @BranchCode
            AND MONTH(fpjHdr.FPJDate) = @Month
            AND YEAR(fpjHdr.FPJDate) = @Year
        GROUP BY fpjDtl.PartNo, fpjDtl.WarehouseCode
	) FPJ ON itemLoc.PartNo = FPJ.PartNo AND itemloc.WarehouseCode = FPJ.WarehouseCode
	LEFT JOIN (SELECT lmpDtl.PartNo, lmpDtl.WarehouseCode
            , SUM(CASE bpsHdr.SalesType WHEN 1 THEN ISNULL(lmpDtl.QtyBill, 0) ELSE 0 END) as SalesForBPSQty
            , SUM(CASE bpsHdr.SalesType WHEN 2 THEN ISNULL(lmpDtl.QtyBill, 0) ELSE 0 END) as SalesForServiceQty
            , SUM(CASE bpsHdr.SalesType WHEN 3 THEN ISNULL(lmpDtl.QtyBill, 0) ELSE 0 END) as SalesForUnitQty
            , SUM(CASE bpsHdr.SalesType WHEN 1 THEN ISNULL(lmpDtl.QtyBill, 0) * ISNULL(lmpDtl.CostPrice, 0) ELSE 0 END) as SalesForBPSAmt
            , SUM(CASE bpsHdr.SalesType WHEN 2 THEN ISNULL(lmpDtl.QtyBill, 0) * ISNULL(lmpDtl.CostPrice, 0) ELSE 0 END) as SalesForServiceAmt
            , SUM(CASE bpsHdr.SalesType WHEN 3 THEN ISNULL(lmpDtl.QtyBill, 0) * ISNULL(lmpDtl.CostPrice, 0) ELSE 0 END) as SalesForUnitAmt
        FROM spTrnSLmpHdr lmpHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSBPSFHdr bpsHdr WITH(NOLOCK, NOWAIT) ON lmpHdr.BPSFNo = bpsHdr.BPSFNo
                AND lmpHdr.CompanyCode = bpsHdr.CompanyCode
                AND lmpHdr.BranchCode = bpsHdr.BranchCode
            INNER JOIN spTrnSLmpDtl lmpDtl WITH(NOLOCK, NOWAIT) ON lmpHdr.LmpNo = lmpDtl.LmpNo
                AND lmpHdr.CompanyCode = lmpDtl.CompanyCode
                AND lmpHdr.BranchCode = lmpDtl.BranchCode				                
        WHERE lmpHdr.CompanyCode = @CompanyCode
            AND lmpHdr.BranchCode = @BranchCode
            AND MONTH(lmpHdr.LmpDate) = @Month
            AND YEAR(lmpHdr.LmpDate) = @Year
        GROUP BY lmpDtl.PartNo, lmpDtl.WarehouseCode
	) Lmp ON itemLoc.PartNo = Lmp.PartNo AND itemloc.WarehouseCode = Lmp.WarehouseCode
	LEFT JOIN (SELECT rtrDtl.PartNo, rtrDtl.WarehouseCode
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(rtrDtl.QtyReturn, 0) ELSE 0 END) as ReturForSalesCashQty
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(rtrDtl.QtyReturn, 0) ELSE 0 END) as ReturForSalesCreditQty
            , SUM(CASE WHEN (fpjHdr.TOPDays = 0) THEN ISNULL(rtrDtl.QtyReturn, 0) * ISNULL(rtrDtl.CostPrice, 0) ELSE 0 END) as ReturForSalesCashAmt
            , SUM(CASE WHEN (fpjHdr.TOPDays > 0) THEN ISNULL(rtrDtl.QtyReturn, 0) * ISNULL(rtrDtl.CostPrice, 0) ELSE 0 END) as ReturForSalesCreditAmt
        FROM spTrnSRturHdr rtrHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSFPJHdr fpjHdr WITH(NOLOCK, NOWAIT) ON rtrHdr.FPJNo = fpjHdr.FPJNo
                AND rtrHdr.CompanyCode = fpjHdr.CompanyCode
                AND rtrHdr.BranchCode = fpjHdr.BranchCode
            INNER JOIN spTrnSRturDtl rtrDtl WITH(NOLOCK, NOWAIT) ON rtrHdr.ReturnNo = rtrDtl.ReturnNo
                AND rtrHdr.CompanyCode = rtrDtl.CompanyCode 
                AND rtrHdr.BranchCode = rtrDtl.BranchCode 				                
        WHERE	rtrHdr.CompanyCode = @CompanyCode
            AND rtrHdr.BranchCode = @BranchCode
            AND MONTH(rtrHdr.ReturnDate) = @Month
            AND YEAR(rtrHdr.ReturnDate) = @Year
            AND rtrHdr.Status = 2
        GROUP BY rtrDtl.PartNo, rtrDtl.WarehouseCode
	) SRtur ON itemLoc.PartNo = SRtur.PartNo AND itemloc.WarehouseCode = SRtur.WarehouseCode
	LEFT JOIN (SELECT rtrSSDtl.PartNo, rtrSSDtl.WarehouseCode
            , SUM(CASE rtrSSHdr.SalesType WHEN 1 THEN ISNULL(QtyReturn, 0) ELSE 0 END) as ReturnForBPSQty
            , SUM(CASE rtrSSHdr.SalesType WHEN 2 THEN ISNULL(QtyReturn, 0) ELSE 0 END) as ReturForServiceQty
            , SUM(CASE rtrSSHdr.SalesType WHEN 3 THEN ISNULL(QtyReturn, 0) ELSE 0 END) as ReturForUnitQty
            , SUM(CASE rtrSSHdr.SalesType WHEN 1 THEN ISNULL(QtyReturn, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as ReturnForBPSAmt
            , SUM(CASE rtrSSHdr.SalesType WHEN 2 THEN ISNULL(QtyReturn, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as ReturForServiceAmt
            , SUM(CASE rtrSSHdr.SalesType WHEN 3 THEN ISNULL(QtyReturn, 0) * ISNULL(CostPrice, 0) ELSE 0 END) as ReturForUnitAmt
        FROM spTrnSRturSSHdr rtrSSHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSRturSSDtl rtrSSDtl WITH(NOLOCK, NOWAIT) ON rtrSSHdr.ReturnNo = rtrSSDtl.ReturnNo
                AND rtrSSHdr.CompanyCode = rtrSSDtl.CompanyCode
                AND rtrSSHdr.BranchCode = rtrSSDtl.BranchCode				                
        WHERE	rtrSSHdr.CompanyCode = @CompanyCode
            AND rtrSSHdr.BranchCode = @BranchCode
            AND MONTH(rtrSSHdr.ReturnDate) = @Month
            AND YEAR(rtrSSHdr.ReturnDate) = @Year
            AND rtrSSHdr.Status = 2
        GROUP BY rtrSSDtl.PartNo, rtrSSDtl.WarehouseCode
	) SRturSS ON itemLoc.PartNo = SRturSS.PartNo AND itemloc.WarehouseCode = SRturSS.WarehouseCode
	LEFT JOIN (SELECT posDtl.PartNo, SUM(ISNULL(posDtl.OrderQty, 0)) PurchaseOrderQty,
            SUM(ISNULL(posDtl.OrderQty, 0) * ISNULL(posDtl.PurchasePrice, 0) - ROUND(ISNULL(posDtl.OrderQty, 0) * ISNULL(posDtl.PurchasePrice, 0) * ISNULL(posDtl.DiscPct, 0) / 100, 0)) PurchaseOrderAmt
        FROM spTrnPPOSHdr posHDr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnPPOSDtl posDtl WITH(NOLOCK, NOWAIT) ON posHdr.POSNo = posDtl.POSNo
                AND posHdr.CompanyCode = posDtl.CompanyCode
                AND posHdr.BranchCode = posDtl.BranchCode				                
        WHERE posHdr.CompanyCode = @CompanyCode 
            AND posHdr.BranchCode = @BranchCode                                
            AND MONTH(posHdr.POSDate) = @Month
            AND YEAR(posHdr.POSDate) = @Year
            AND posHdr.Status NOT IN (0, 1, 3)
        GROUP BY posDtl.PartNo
	) POS ON itemLoc.PartNo = POS.PartNo
	LEFT JOIN (SELECT PartNo, SUM(ISNULL(OnOrder, 0)) OnOrderQty, SUM(ISNULL(InTransit, 0)) InTransitQty,
            SUM(ISNULL(OnOrder, 0) * ISNULL(PurchasePrice, 0) - ROUND(ISNULL(OnOrder, 0) * ISNULL(PurchasePrice, 0) * ISNULL(DiscPct, 0) / 100, 0)) OnOrderAmt,
            SUM(ISNULL(InTransit, 0) * ISNULL(PurchasePrice, 0) - ROUND(ISNULL(InTransit, 0) * ISNULL(PurchasePrice, 0) * ISNULL(DiscPct, 0) / 100, 0)) InTransitAmt
        FROM spTrnPOrderBalance WITH(NOLOCK, NOWAIT)
        WHERE MONTH(POSDate) = @Month
            AND YEAR(POSDate) = @Year
            AND CompanyCode = @CompanyCode 
            AND BranchCode = @BranchCode
        GROUP BY PartNo
	) Balance ON itemLoc.PartNo = Balance.PartNo
	LEFT JOIN (SELECT ordDtl.PartNo, ordDtl.WarehouseCode
            , SUM(ISNULL(ordDtl.QtyBO, 0) - ISNULL(ordDtl.QtyBOSupply, 0) - ISNULL(ordDtl.QtyBOCancel, 0)) BackOrderQty
            , SUM((ISNULL(ordDtl.QtyBO, 0) - ISNULL(ordDtl.QtyBOSupply, 0) - ISNULL(ordDtl.QtyBOCancel, 0)) * ISNULL(ordDtl.CostPrice, 0)) BackOrderAmt
        FROM spTrnSORDHdr ordHdr WITH(NOLOCK, NOWAIT)
            INNER JOIN spTrnSORDDtl ordDtl WITH(NOLOCK, NOWAIT) ON ordHdr.DocNo = ordDtl.DocNo 
                AND ordHdr.CompanyCode = ordDtl.CompanyCode		
                AND ordHdr.BranchCode = ordDtl.BranchCode				                
        WHERE ordHdr.CompanyCode = @CompanyCode
            AND ordHdr.BranchCode = @BranchCode
            AND MONTH(ordHdr.DocDate) = @Month
            AND YEAR(ordHdr.DocDate) = @Year
            AND ordHdr.Status NOT IN (0, 1, 3)
        GROUP BY ordDtl.PartNo, ordDtl.WarehouseCode
	) BO ON itemLoc.PartNo = BO.PartNo AND itemloc.WarehouseCode = BO.WarehouseCode 
    LEFT JOIN spMstItems items WITH(NOLOCK, NOWAIT) ON itemLoc.PartNo = items.PartNo
        AND itemLoc.CompanyCode = items.CompanyCode
        AND itemLoc.BranchCode = items.BranchCode
    LEFT JOIN spMstItemPrice itemPrice WITH(NOLOCK, NOWAIT) ON itemLoc.PartNo = itemPrice.PartNo
        AND itemLoc.CompanyCode = itemPrice.CompanyCode
        AND itemLoc.BranchCode = itemPrice.BranchCode		
WHERE itemLoc.CompanyCode = @CompanyCode 
	AND itemLoc.BranchCode = @BranchCode		

INSERT INTO spHstTransaction SELECT * FROM #HstTransaction
DROP TABLE #HstTransaction
GO
CREATE PROCEDURE [dbo].[uspfn_spGetSO4NonPLBackOrderWindow] @CompanyCode nvarchar(15),
@BranchCode nvarchar(15),@CustomerCode nvarchar(15),
@SalesType nvarchar(2),@TransType nvarchar(3),
@TypeOfGoods nvarchar(2),@ProductType nvarchar(2)
as
SELECT DISTINCT
    spTrnSORDHdr.DocNo, 
    DocDate, 
    CustomerCode,
    OrderNo AS ReferenceNo, 
    ReferenceDate, 
    Convert(bit, 0) chkSelect  
FROM spTrnSORDHdr
INNER JOIN spTrnSORDDtl ON spTrnSORDDtl.DocNo = spTrnSORDHdr.DocNo AND
    spTrnSORDDtl.CompanyCode = spTrnSORDHdr.CompanyCode AND
    spTrnSORDDtl.BranchCode = spTrnSORDHdr.BranchCode
WHERE  
    (spTrnSORDDtl.QtyBO - spTrnSORDDtl.QtyBOSupply - spTrnSORDDtl.QtyBOCancel > 0)
    AND spTrnSORDHdr.CompanyCode = @CompanyCode
    AND spTrnSORDHdr.BranchCode = @BranchCode 
    AND spTrnSORDHdr.CustomerCode = @CustomerCode
    AND spTrnSORDHdr.SalesType = @SalesType
    AND spTrnSORDHdr.TransType = @TransType
    AND spTrnSORDHdr.TypeOfGoods = @TypeOfGoods
    AND spTrnSORDDtl.ProductType = @ProductType
    AND spTrnSORDHdr.DocNo not in 
        (SELECT spTrnSOSupply.DocNo from spTrnSOSupply 
            WHERE 
        spTrnSOSupply.CompanyCode = spTrnSORDHdr.CompanyCode
        AND spTrnSOSupply.BranchCode = spTrnSORDHdr.BranchCode
        AND spTrnSOSupply.DocNo = spTrnSORDHdr.DocNo
        AND spTrnSOSupply.Status = 0)
GO
create procedure [dbo].[uspfn_HrUpdateEmployeeJoinDate]
	@CompanyCode varchar(25),
	@EmployeeID varchar(25),
	@JoinDate datetime
as
begin
	update HrEmployee
	   set JoinDate = @JoinDate
	 where CompanyCode = @CompanyCode
	   and EmployeeID = EmployeeID
	   and JoinDate = @JoinDate
end
GO
create procedure [dbo].[uspfn_HrInqPersInfo2W]
	@CompanyCode varchar(20),
	@DeptCode varchar(20),
	@PosCode varchar(20),
	@Status varchar(20),
	@BranchCode varchar(20) = ''
as

declare @CompanyName varchar(500);
set @CompanyName = ( select top 1 x.CompanyGovName from gnMstCoProfile x );

;with x as (
select a.EmployeeID
     , e.SalesID
     , a.EmployeeName
	 , AreaCode = '5'
	 , DealerGroup = ''
	 , a.CompanyCode
	 , CompanyName = @CompanyName
     , BranchCode = isnull((select top 1 BranchCode from HrEmployeeMutation where CompanyCode = a.CompanyCode and EmployeeID = a.EmployeeID order by MutationDate desc), '')
     , OutletType = ''
     , BranchName = isnull((
		select top 1 y.CompanyName
		  from HrEmployeeMutation x
		  left join GnMstCoProfile y
		    on y.CompanyCode = x.CompanyCode
		   and y.BranchCode = x.BranchCode
		 where x.CompanyCode = a.CompanyCode
		   and x.EmployeeID = a.EmployeeID
		 order by x.MutationDate desc), '')
     , PositionCode = c.PosCode
     , Position = upper(a.Department)
         + upper(case isnull(c.PosName, '') when '' then '' else ' - ' + c.PosName end)
         + upper(case isnull(d.LookUpValueName, '') when '' then '' else ' - ' + d.LookUpValueName end)
     , Status = (case isnull(a.PersonnelStatus, '')
		when '1' then 'Aktif'
		when '2' then 'Non Aktif'
		when '3' then 'Keluar'
		when '4' then 'Pensiun'
		else 'No Status' end)
	 , a.Address1
	 , a.Address2
	 , a.Address3
	 , a.Address4
	 , Address = a.Address1 + ' ' + ltrim(a.Address2) + ' ' + ltrim(a.Address3) + ' ' + ltrim(a.Address4)
	 , GradeCode = d.LookUpValue
	 , Grade = d.LookUpValueName
	 , a.BirthDate
	 , a.BirthPlace
	 , a.BloodCode
	 , SubOrdinates = (select count(x.EmployeeID) from HrEmployee x where x.TeamLeader=a.EmployeeID)
	 , MutationTimes = (select count(x.EmployeeID) from HrEmployeeMutation x where x.CompanyCode=a.CompanyCode and x.EmployeeID=a.EmployeeID and x.IsDeleted != 1)
	 , AchieveTimes = (select count(x.EmployeeID) from HrEmployeeAchievement x where x.CompanyCode=a.CompanyCode and x.EmployeeID=a.EmployeeID and x.IsDeleted != 1)
	 , a.TeamLeader
	 , TeamLeaderName = (select top 1 x.EmployeeName from HrEmployee x where x.EmployeeID=a.TeamLeader)
	 , TeamLeaderSalesID = (select top 1 x.SalesID from HrEmployeeSales x where x.EmployeeID=a.TeamLeader)
	 , a.JoinDate
	 , a.ResignDate
	 , a.ResignDescription
	 , MaritalStatus = f.LookUpValueName
	 , Religion = g.LookUpValueName
	 , Education = f.LookUpValueName
	 , a.Province
	 , a.District
	 , a.SubDistrict
	 , a.Village
	 , a.ZipCode
	 , a.IdentityNo
	 , a.NPWPNo
	 , a.NPWPDate
	 , a.Email
	 , a.FaxNo
	 , a.Telephone1
	 , a.Telephone2
	 , a.Handphone1
	 , a.Handphone2
	 , a.Handphone3
	 , a.Handphone4
	 , a.DrivingLicense1
	 , a.DrivingLicense2
	 , a.Height
	 , a.Weight
	 , a.UniformSize
	 , a.UniformSizeAlt
	 , Gender = i.LookUpValueName 
	 , StatusSF = ''
	 , StatusSM = ''
  from HrEmployee a
  left join GnMstPosition c
    on c.CompanyCode = a.CompanyCode
   and c.DeptCode = a.Department
   and c.PosCode = a.Position
  left join GnMstLookUpDtl d
    on d.CompanyCode = a.CompanyCode
   and d.CodeID = 'ITSG'
   and d.LookUpValue = a.Grade
  left join GnMstLookUpDtl f
    on f.CompanyCode = a.CompanyCode
   and f.CodeID = 'MRTL'
   and f.LookUpValue = a.MaritalStatus
  left join GnMstLookUpDtl g
    on g.CompanyCode = a.CompanyCode
   and g.CodeID = 'RLGN'
   and g.LookUpValue = a.Religion
  left join GnMstLookUpDtl h
    on h.CompanyCode = a.CompanyCode
   and h.CodeID = 'FEDU'
   and h.LookUpValue = a.Religion
  left join GnMstLookUpDtl i
    on i.CompanyCode = a.CompanyCode
   and i.CodeID = 'GNDR'
   and i.LookUpValue = a.Religion
  left join HrEmployeeSales e
    on e.CompanyCode = a.CompanyCode
   and e.EmployeeID = a.EmployeeID
 where a.CompanyCode = @CompanyCode
   and a.Department = @DeptCode
   and a.Position = (case @PosCode when '' then a.Position else @PosCode end)
   and a.PersonnelStatus = (case @Status when '' then a.PersonnelStatus else @Status end)
)
select * from x where isnull(x.BranchCode, '') = (case @BranchCode when '' then x.BranchCode else @BranchCode end)
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- =============================================
CREATE procedure [dbo].[sp_InquiryPurchaseOrder] 
(
 @p_CompanyCode varchar(15),
 @p_BranchCode varchar(15),
 @p_Status varchar(2),
 @PODateFrom DateTime,
 @PODateTo DateTime,
 @refNoFrom varchar(100),
 @refNoTo varchar(100),
 @PONoFrom varchar(100),
 @PONoTo varchar(100),
 @supplierCodeFrom varchar(100),
 @supplierCodeTo varchar(100)
)
AS
BEGIN

declare @pQuery varchar(max)
set @pQuery =
'
SELECT 
a.PONo, 
 case Year(a.PODate) when (1900) then null else convert(varchar(20),a.PODate,106) end as PODate, 
a.RefferenceNo, 
	case Year(a.RefferenceDate) when (1900) then null else convert(varchar(20),a.RefferenceDate,106) end as RefferenceDate, 
a.SupplierCode, ( SELECT sup.SupplierName FROM gnMstSupplier sup 
WHERE sup.SupplierCode = a.SupplierCode AND a.CompanyCode = sup.CompanyCode) AS SupplierName, 
a.BillTo, a.ShipTo, a.Remark, 
CASE WHEN a.Status = 0 THEN ''Open''
WHEN a.Status = 1 THEN ''Printed''
WHEN a.Status = 2 THEN ''Approved''
WHEN a.Status = 3 THEN ''Canceled''
WHEN a.Status = 9 THEN ''Finished''
END  AS Status
FROM 
omTrPurchasePO a
where 1=1
'

if len(rtrim(@p_Status)) > 0
   set @pQuery = @pQuery + ' and a.Status = ''' + rtrim(@p_Status) + ''''

if year(@PODateFrom) <> '1900'
   set @pQuery = @pQuery + ' and a.PODate between ''' + convert(varchar(50),@PODateFrom) + '''' + ' and ' + '''' + convert(varchar(50),@PODateTo) + ''''

if len(rtrim(@supplierCodeFrom)) > 0
   set @pQuery = @pQuery + ' and a.SupplierCode between ''' + rtrim(@supplierCodeFrom) + '''' + ' and ' + '''' + rtrim(@supplierCodeTo) + ''''

if len(rtrim(@refNoFrom)) > 0
   set @pQuery = @pQuery + ' and a.RefferenceNo between ''' + rtrim(@refNoFrom) + '''' + ' and ' + '''' + rtrim(@refNoTo) + ''''

if len(rtrim(@PONoFrom)) > 0
   set @pQuery = @pQuery + ' and a.PONo between ''' + rtrim(@PONoFrom) + '''' + ' and ' + '''' + rtrim(@PONoTo) + ''''

set @pQuery = @pQuery + ' and a.CompanyCode = ''' + rtrim(@p_CompanyCode) + '''' + ' and a.BranchCode = ''' + rtrim(@p_BranchCode) + ''''
set @pQuery = @pQuery + ' ORDER BY a.PONo '

print(@pQuery)
exec(@pQuery)
END
--------------------------------------------------- BATAS ----------------------------------------------------------
GO
CREATE procedure [dbo].[uspfn_sfEmpPica]
						 @date    datetime
					
						--	DECLARE @date    datetime
						--SET @date = (SELECT getdate())
					as
					
					
					SELECT DISTINCT 
						a.PosCode as poscode,
						a.Grade as grades,
						(select LookUpValueName from gnMstLookUpDtl where CodeID = 'ITSG' AND LookUpValue = a.Grade) as grade,
						a.TrainingCode as trncode,
						(SELECT count(DISTINCT EmployeeID) FROM gnMstEmployeeData WHERE 
							GradeCode = a.Grade AND InActiveDate is null) jml_manpower,
						(SELECT count(DISTINCT EmployeeID) FROM SyncEmployeeTrainingHist WHERE 
							TrainingCode = a.TrainingCode 
							AND 
							PosCode = a.PosCode
							AND 
							Grade = a.Grade AND TrainingDate <= @date) trained,
						((SELECT count(DISTINCT EmployeeID) FROM gnMstEmployeeData WHERE 
							GradeCode = a.Grade AND InActiveDate IS null) - (SELECT count(DISTINCT EmployeeID) FROM SyncEmployeeTrainingHist WHERE 
							TrainingCode = a.TrainingCode 
							AND 
							PosCode = a.PosCode
							AND 
							Grade = a.Grade AND TrainingDate <= @date)) belum,
						(SELECT 'Reason ?') reason
							
					FROM SyncEmployeeTrainingHist a
					ORDER BY a.Grade
GO
-- POSTING TRANSACTION MULTI COMPANY - SALES RETURN
-- ------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -----------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySalesReturn] '6006400001','2014/11/30','0'
-- -----------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompanySalesReturn]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN

	  --declare @CompanyCode			varchar(15) = '6006400001'
	  --declare @PostingDate			datetime	= '2014/04/30'
	  --declare @Status					varchar(1)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode			varchar(15) --= '6006400001'
		declare @curBranchCode			varchar(15) --= '6006400131'
		declare @curDocNo				varchar(15)	--= 'IU131/14/100010'
		declare @curDocDate				datetime    --= '2015/03/08'
		declare @curSeq					int			
		declare @curSalesModelCode		varchar(20)	
		declare @curSalesModelYear		numeric(4,0)	
		declare @curChassisCode			varchar(15)	
		declare @curChassisNo			numeric(10,0) 
		declare @curEngineCode			varchar(15)	
		declare @curEngineNo			numeric(10,0) 
		declare @curColourCode			varchar(15)	
		declare @curWarehouseCode		varchar(15)	
		declare @curCustomerCode		varchar(15)	
		declare @curQtyFlag				char(1)		
		declare @curCompanyMD			varchar(15)
		declare @curBranchMD			varchar(15)	
		declare @curWarehouseMD			varchar(15)	
		declare @curStatus				char(1)		
		declare @curProcessStatus		char(1)		
		declare @curProcessDate			datetime		
		declare @curCreatedBy			varchar(15)	
		declare @curCreatedDate			datetime		
		declare @curLastUpdateBy		varchar(15)	
		declare @curLastUpdateDate		datetime
		declare @sqlString				nvarchar(max)

	 -- MD
		declare @HPPNo					varchar(15)
		declare @INVNo					varchar(15)
		declare @FPJNo					varchar(25)
		declare @BPKNo					varchar(15)
		declare @BPUNo					varchar(15)
		declare @HPPDate				datetime
		declare @INVDate				datetime
		declare @FPJDate				datetime
	 -- SD
		declare @VTONo					varchar(15)
		declare @VTINo					varchar(15)
		declare @RTPNo					varchar(15)
		declare @RTSNo					varchar(15)

		declare @WHFrom					varchar(15)
		declare @WHTo					varchar(15)
		declare @RemarkHdr				varchar(100)
		declare @RemarkDtl				varchar(100)
		declare @BeforeDiscDPP			numeric(18,0)
		declare @DiscExcludePPn			numeric(18,0)
		declare @AfterDiscDPP			numeric(18,0)
		declare @AfterDiscPPn			numeric(18,0)
		declare @AfterDiscPPnBM			numeric(18,0)
		declare @AfterDiscTotal			numeric(18,0)
		declare @OthersDPP				numeric(18,0)
		declare @OthersPPn				numeric(18,0)

		declare @DBName					varchar(50)
		declare @DBNameMD				varchar(50)
		declare @CentralBranch			varchar(15)
		declare @SeqNo					integer
		declare @swCompanyCode			varchar(15)  = ' '
		declare @swBranchCode			varchar(15)  = ' '
		declare @swDocNo 				varchar(15)  = ' '
		declare @CurrentDate			varchar(100) = convert(varchar,getdate(),121)

        declare curomSDMovement cursor for
			select sd.* 
			  from omSDMovement sd, gnMstDocument doc
             where sd.CompanyMD        =doc.CompanyCode
			   and sd.BranchMD         =doc.BranchCode
			   and doc.DocumentType    ='RTS' 
			   and doc.ProfitCenterCode='100'
			   and left(sd.DocNo,len(doc.DocumentPrefix))=doc.DocumentPrefix
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by sd.CompanyCode, sd.BranchCode, sd.DocNo, sd.SalesModelCode, 
					  sd.SalesModelYear, sd.ColourCode, sd.ChassisCode, sd.ChassisNo
		open curomSDMovement

		fetch next from curomSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
				   @curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
				   @curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
				   @curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
				   @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
				  
		while (@@FETCH_STATUS =0)
			begin

			 -- MD Database & SD Database from gnMstCompanyMapping
				select @DBNameMD=DBMD, @DBName=DBName from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode

			 -- Centralize unit Purchasing & Transfer for SBT, SMG, SIT, SST dealer
				set @sqlString = N'select @CentralBranch=BranchCode from ' +@DBName+ '..gnMstOrganizationDtl ' +  
								   'where CompanyCode=''' +@curCompanyCode+ ''' and isBranch=''0'''
					execute sp_executesql @sqlString, 
							N'@CentralBranch varchar(15) output', @CentralBranch output
										
			 -- SD: Collect HPP, FPJ & INV (No & Date) information from omTrPurchaseHPP, omTrPurchaseHPPSubDetail & omTrSalesInvoice
				set @sqlString = N'select @HPPNo=h.HPPNo, @HPPDate=h.HPPDate, @FPJNo=h.RefferenceFakturPajakNo, ' +
										 '@FPJDate=h.RefferenceFakturPajakDate, @INVNo=h.RefferenceInvoiceNo, ' +
										 '@INVDate=h.RefferenceInvoiceDate, @BPUNo=d.BPUNo from ' +
										 +@DBName+ '..omTrPurchaseHPP h, ' +@DBName+ '..omTrPurchaseHPPSubDetail d ' +
										 'where h.CompanyCode=d.CompanyCode and h.BranchCode=d.BranchCode and h.HPPNo=d.HPPNo ' +
										   'and d.CompanyCode=''' +@curCompanyCode+ ''' and d.BranchCode=''' +@CentralBranch+ 
										''' and d.ChassisCode=''' +@curChassisCode+ ''' and d.ChassisNo=''' +convert(varchar,@curChassisNo)+ ''''
					execute sp_executesql @sqlString, 
							N'@HPPNo varchar(15) output, @HPPDate datetime output, 
							  @FPJNo varchar(25) output, @FPJDate datetime output,
							  @INVNo varchar(15) output, @INVDate datetime output,
							  @BPUNo varchar(15) output', 
							  @HPPNo output,             @HPPDate output, 
							  @FPJNo output,             @FPJDate output,
							  @INVNo output,			 @INVDate output,
							  @BPUNo output

				set @HPPNo   = isnull(@HPPNo,'')
				set @FPJNo   = isnull(@FPJNo,'')
				set @INVNo   = isnull(@INVNo,'')
				set @BPUNo   = isnull(@BPUNo,'')
				set @HPPDate = isnull(@HPPDate,'1900/01/01')
				set @FPJDate = isnull(@FPJDate,'1900/01/01')
				set @INVDate = isnull(@INVDate,'1900/01/01')

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0
		
					 -- SD: Collect Warehouse From & Remark Header information from Retur Sales
						set @sqlString = N'select @WHFrom=WareHouseCode, @RemarkHdr=Remark from ' +@DBName+ '..omTrSalesReturn ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+
											''' and ReturnNo=''' +@curDocNo+''''
							execute sp_executesql @sqlString, 
									N'@WHFrom varchar(15) output, @RemarkHdr varchar(100) output', @WHFrom output, @RemarkHdr output

				     -- SD: Collect Warehouse To Information from gnMstLookupDtl
						set @sqlString = N'select @WHTO=LookUpValue from ' +@DBName+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyCode+ ''' and CodeID=''MPWH'' and ParaValue=''' 
											+@CentralBranch+ ''''
							execute sp_executesql @sqlString, N'@WHTO varchar(15) output', @WHTO output

						set @RemarkHdr = isnull(@RemarkHdr,'')
						set @WHFrom    = isnull(@WHFrom,'')
						set @WHTo      = isnull(@WHTo,'')

						if @curBranchCode <> @CentralBranch
							begin
							 -- SD: Insert data to table omTrInventTransferOut
								execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'VTO', @VTONo output

								set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferOut 
														(CompanyCode, BranchCode, TransferOutNo, TransferOutDate, ReferenceNo, 
														 ReferenceDate, BranchCodeFrom, WareHouseCodeFrom, BranchCodeTo, 
														 WareHouseCodeTo, ReturnDate, Remark, Status, CreatedBy, CreatedDate, 
														 LastUpdateBy, LastUpdateDate, isLocked, LockedBy, LockedDate)
												  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
														 +@VTONo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curBranchCode+ ''',''' +@WHFrom+ ''','''
														 +@CentralBranch+ ''',''' +@WHTO+ ''','''
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@RemarkHdr+ ''',''5'',''POSTING'',''' 
														 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
														 +@CurrentDate+ ''',0,NULL,NULL)'
									execute sp_executesql @sqlString

							 -- SD: Insert data to table omTrInventTransferIn
								execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'VTI', @VTINo output
								set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferIn 
														(CompanyCode, BranchCode, TransferInNo, TransferInDate, TransferOutNo, 
													     ReferenceNo, ReferenceDate, BranchCodeFrom, WareHouseCodeFrom, 
														 BranchCodeTo, WareHouseCodeTo, ReturnDate, Remark, Status, CreatedBy, 
														 CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockedBy, LockedDate)
												  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''','''
														 +@VTINo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@VTONo+ ''',''' +@curDocNo+ ''',''' 
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@curBranchCode+ ''',''' +@WHFrom+ ''','''
														 +@CentralBranch+ ''',''' +@WHTO+ ''','''
														 +convert(varchar,@curDocDate,121)+ ''',''' 
														 +@RemarkHdr+ ''',''2'',''POSTING'',''' 
														 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
														 +@CurrentDate+ ''',0,NULL,NULL)'
									execute sp_executesql @sqlString
							end

					 -- SD: Insert data to table omTrPurchaseReturn
					 	execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'RTP', @RTPNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseReturn 
												(CompanyCode, BranchCode, ReturnNo, ReturnDate, RefferenceNo, RefferenceDate, 
												 HPPNo, RefferenceFakturPajakNo, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
												 +@RTPNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@HPPNo+ ''',''' +convert(varchar,@HPPDate,121)+ ''',''' 
												 +@HPPNo+ ''',''' +@FPJNo+ ''',''' +@RemarkHdr+ 
												 ''',''5'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												 ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesReturn
					 	execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @RTSNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesReturn 
												(CompanyCode, BranchCode, ReturnNo, ReturnDate, ReferenceNo, ReferenceDate, 
												 InvoiceNo, InvoiceDate, CustomerCode, FakturPajakNo, FakturPajakDate, 
												 WareHouseCode, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, 
												 LastUpdateDate, isLocked, LockedBy, LockedDate)
										  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
												 +@RTSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@RTPNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												 +@INVNo+ ''',''' +convert(varchar,@INVDate,121)+ ''','''
												 +@CentralBranch+ ''',''' +@FPJNo+ ''',''' 
												 +convert(varchar,@FPJDate,121)+ ''',''' 
												 +@WHTo+ ''',''' +@RemarkHdr+ ''',''5'',''POSTING'',''' 
												 +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												 +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString
					end

-----------------------------------------------------------------------------------------  DETAIL PROCESS
				set @SeqNo = @SeqNo + 1

			 -- MD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBNameMD+ '..omMstVehicle
										set SOReturnNo='''+@RTSNo+ 
										''', Status=''0'', isActive=''1'' where CompanyCode='''
										+@curCompanyMD+ ''' and ChassisCode=''' 
										+@curChassisCode+ ''' and ChassisNo='
										+convert(varchar,@curChassisNo)+ ''
					execute sp_executesql @sqlString

			 -- SD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBName+ '..omMstVehicle
										set POReturnNo='''+@RTPNo+ 
										''', TransferOutNo='''+@VTONo+ 
										''', TransferInNo='''+@VTINo+ 
										''', Status=''2'', isActive=''0''  where CompanyCode='''+@curCompanyMD+
										''' and ChassisCode=''' +@curChassisCode+ 
										''' and ChassisNo='+convert(varchar,@curChassisNo) +''
					execute sp_executesql @sqlString

			 -- SD: Collect Remark Detail information table omTrSalesReturnVIN
				set @sqlString = N'select top 1 @RemarkDtl=Remark from ' +@DBName+ '..omTrSalesReturnVIN ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+
											''' and ReturnNo=''' +@curDocNo+ ''' and ChassisCode=''' +@curChassisCode+
											''' and ChassisNo=''' +convert(varchar,@curChassisNo)+ ''' order by ReturnNo desc'
							execute sp_executesql @sqlString, 
									N'@RemarkDtl varchar(100) output', @RemarkDtl output
				set @RemarkDtl = isnull(@RemarkDtl,'')

			 -- SD: Transfer unit from branch to holding
				if @curBranchCode <> @CentralBranch
					begin
					 -- SD: Insert data to table omTrInventTransferOutDetail
						set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferOutDetail 
												(CompanyCode, BranchCode, TransferOutNo, TransferOutSeq, 
												 SalesModelCode, SalesModelYear, ChassisCode, ChassisNo, 
												 EngineCode, EngineNo, ColourCode, Remark, StatusTransferIn, 
												 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
												 +@VTONo+ ''',''' +convert(varchar,@SeqNo)+ ''','''
												 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
												 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
												 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
												 +@curColourCode+ ''',''' +@RemarkDtl+ ''',''1'',''' 
												 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
												 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
							execute sp_executesql @sqlString

					 -- SD: Insert data to table omTrInventTransferInDetail
						set @sqlString = 'insert into ' +@DBName+ '..omTrInventTransferInDetail 
												(CompanyCode, BranchCode, TransferInNo, TransferInSeq, 
												 SalesModelCode, SalesModelYear, ChassisCode, ChassisNo, 
												 EngineCode, EngineNo, ColourCode, Remark, StatusTransferOut, 
												 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
												 +@VTINo+ ''',''' +convert(varchar,@SeqNo)+ ''','''
												 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
												 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
												 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
												 +@curColourCode+ ''',''' +@RemarkDtl+ ''',''1'',''' 
												 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
												 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
							execute sp_executesql @sqlString

					 -- SD: Insert / Update data to table omTrInventQtyVehicle - @WHFrom
						set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
													   +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
													   +convert(varchar,year(@curDocDate))+ ''',''' 
													   +convert(varchar,month(@curDocDate))+  ''',''' 
													   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
													   +@curColourCode+ ''',''' +@WHFrom+ ''',1,0,1,0,0,0,0,NULL,1,''' 
													   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
													   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
													   ''',0,NULL,NULL))
											   as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
													   NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
													   NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
													   NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
													   NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate)
												   on  VEH.CompanyCode    = SRC.NewCompany
												  and  VEH.BranchCode	  = SRC.NewBranch
												  and  VEH.Year		      = SRC.NewYear
												  and  VEH.Month		  = SRC.NewMonth
												  and  VEH.SalesModelCode = SRC.NewSalesModelCode
												  and  VEH.SalesModelYear = SRC.NewSalesModelYear 
												  and  VEH.ColourCode	  = SRC.NewColourCode
												  and  VEH.WarehouseCode  = SRC.NewWarehouseCode
										 when matched
												 then update set QtyIn  = QtyIn  - SRC.NewQtyIn
															   , QtyOut = QtyOut - SRC.NewQtyOut
															   , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
															   , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
									 when not matched by target 
												 then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
															  ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
															  EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, CreatedDate, 
															  LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
													  values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
															  NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
															  NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
															  NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
															  NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, 
															  NewLockedDate);'
							execute sp_executesql @sqlString
					end

			 -- SD: Insert / Update data to table omTrInventQtyVehicle - @WHTo
				set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
											   +convert(varchar,year(@curDocDate))+ ''',''' 
											   +convert(varchar,month(@curDocDate))+  ''',''' 
											   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
											   +@curColourCode+ ''',''' +@WHTo+ ''',1,0,1,0,0,0,0,NULL,1,''' 
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
											   ''',0,NULL,NULL))
									  as SRC  (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
											   NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, 
											   NewAlocation, NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, 
											   NewEndingAV, NewRemark, NewStatus, NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate)
										  on   VEH.CompanyCode    = SRC.NewCompany
										 and   VEH.BranchCode	  = SRC.NewBranch
										 and   VEH.Year			  = SRC.NewYear
										 and   VEH.Month		  = SRC.NewMonth
										 and   VEH.SalesModelCode = SRC.NewSalesModelCode
										 and   VEH.SalesModelYear = SRC.NewSalesModelYear 
										 and   VEH.ColourCode	  = SRC.NewColourCode
										 and   VEH.WarehouseCode  = SRC.NewWarehouseCode
								when matched
										then  update set QtyIn  = QtyIn  + SRC.NewQtyIn
													   , QtyOut = QtyOut + SRC.NewQtyOut
													   , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
													   , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
						    when not matched by target 
										then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
													 ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
													 EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, 
													 CreatedDate, LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
											 values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
													 NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
													 NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
													 NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
													 NewIsLocked, NewLockedBy, NewLockedDate);'
						execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseReturnDetail
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseReturnDetail as RTP using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' 
											   +@RTPNo+ ''',''' +@BPUNo+ ''',''' +@RemarkDtl+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPUNo,  NewRemark,
											   NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
										   on  RTP.CompanyCode = SRC.NewCompany
										  and  RTP.BranchCode  = SRC.NewBranch
										  and  RTP.ReturnNo    = SRC.NewReturnNo
										  and  RTP.BPUNo       = SRC.NewBPUNo
										 when  matched 
											   then update set Remark         = SRC.NewRemark
															 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										 when  not matched by target 
											   then insert (CompanyCode, BranchCode, ReturnNo, BPUNo, Remark, 
															CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
													values (NewCompany, NewBranch, NewReturnNo, NewBPUNo,  NewRemark,
															NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString


			 -- SD: Collect price information from table omTrPurchaseHPP
				set @sqlString = N'select @BeforeDiscDPP=p.BeforeDiscDPP, @DiscExcludePPn=p.DiscExcludePPn, ' +
								  '@AfterDiscDPP=p.AfterDiscDPP, @AfterDiscPPn=p.AfterDiscPPn, ' +
								  '@AfterDiscPPnBM=p.AfterDiscPPnBM, @AfterDiscTotal=p.AfterDiscTotal, ' +
								  '@OthersDPP=p.OthersDPP, @OthersPPn=p.OthersPPn from ' +@DBName+ 
								  '..omTrPurchaseHPPSubDetail v, ' +@DBName+ '..omTrPurchaseHPPDetailModel p ' +
								  'where v.CompanyCode=p.CompanyCode and v.BranchCode=p.BranchCode ' +
									'and v.HPPNo=p.HPPNo and v.BPUNo=p.BPUNo and v.SalesModelCode=p.SalesModelCode ' +
									'and v.SalesModelYear=p.SalesModelYear and v.CompanyCode=''' +@curCompanyCode+ 
								  ''' and v.BranchCode=''' +@CentralBranch+ ''' and v.BPUNo=''' +@BPUNo+
								  ''' and ChassisCode=''' +@curChassisCode+ ''' and ChassisNo='
								  +convert(varchar,@curChassisNo)+ ''
						execute sp_executesql @sqlString, 
								N'@BeforeDiscDPP	numeric(18)	output,
								  @DiscExcludePPn	numeric(18)	output,
								  @AfterDiscDPP		numeric(18)	output,
								  @AfterDiscPPn		numeric(18) output,
								  @AfterDiscPPnBM	numeric(18) output,
								  @AfterDiscTotal	numeric(18) output,
								  @OthersDPP		numeric(18) output,
								  @OthersPPn		numeric(18) output',
								  @BeforeDiscDPP	output,
								  @DiscExcludePPn	output,
								  @AfterDiscDPP		output,
								  @AfterDiscPPn		output,
								  @AfterDiscPPnBM	output,
								  @AfterDiscTotal	output,
								  @OthersDPP		output,
								  @OthersPPn		output

			 -- SD: Insert data to table omTrPurchaseReturnDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseReturnDetailModel as RTP using (values(''' 
											   +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@RTPNo+ ''',''' +@BPUNo+ 
											   ''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',1,''' 
											   +convert(varchar,@BeforeDiscDPP)+ ''',''' +convert(varchar,@DiscExcludePPn)+ ''','''
											   +convert(varchar,@AfterDiscDPP)+ ''',''' +convert(varchar,@AfterDiscPPn)+ ''','''
											   +convert(varchar,@AfterDiscPPnBM)+ ''',''' +convert(varchar,@AfterDiscTotal)+ ''','''
											   +convert(varchar,@OthersDPP)+ ''',''' +convert(varchar,@OthersPPn)+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPUNo, 
											   NewSalesModelCode, NewSalesModelYear, NewQuantity, 
											   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
											   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
											   NewOthersDPP, NewOthersPPn, NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate)
										   on  RTP.CompanyCode    = SRC.NewCompany
										  and  RTP.BranchCode     = SRC.NewBranch
										  and  RTP.ReturnNo       = SRC.NewReturnNo
										  and  RTP.BPUNo          = SRC.NewBPUNo
										  and  RTP.SalesModelCode = SRC.NewSalesModelCode
										  and  RTP.SalesModelYear = SRC.NewSalesModelYear
										 when  matched 
											   then update set Quantity       = Quantity + SRC.NewQuantity
															 , BeforeDiscDPP  = BeforeDiscDPP  + SRC.NewBeforeDiscDPP
															 , DiscExcludePPn = DiscExcludePPn + SRC.NewDiscExcludePPn
															 , AfterDiscDPP   = AfterDiscDPP   + SRC.NewAfterDiscDPP
															 , AfterDiscPPn   = AfterDiscPPn   + SRC.NewAfterDiscPPn
															 , AfterDiscPPnBM = AfterDiscPPnBM + SRC.NewAfterDiscPPnBM
															 , AfterDiscTotal = AfterDiscTotal + SRC.NewAfterDiscTotal
															 , OthersDPP      = OthersDPP      + SRC.NewOthersDPP
															 , OthersPPn      = OthersPPn      + SRC.NewOthersPPn
															 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										when  not matched by target 
											  then insert (CompanyCode, BranchCode, ReturnNo, BPUNo, SalesModelCode,
														   SalesModelYear, Quantity, BeforeDiscDPP, DiscExcludePPn,
														   AfterDiscDPP, AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, 
														   OthersDPP, OthersPPn, CreatedBy, CreatedDate, LastUpdateBy, 
														   LastUpdateDate)
												   values (NewCompany, NewBranch, NewReturnNo, NewBPUNo, 
														   NewSalesModelCode, NewSalesModelYear, NewQuantity, 
														   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
														   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
														   NewOthersDPP, NewOthersPPn, NewCreatedBy, NewCreatedDate, 
														   NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseReturnSubDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseReturnSubDetail
										(CompanyCode, BranchCode, ReturnNo, BPUNo, ReturnSeq, 
										 SalesModelCode, SalesModelYear, ColourCode, ChassisCode, 
										 ChassisNo, EngineCode, EngineNo, Remark, CreatedBy, 
										 CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@RTPNo+ ''',''' 
										 +@BPUNo+ ''',''' +Convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''','''
								         +convert(varchar,@curSalesModelYear)+ ''',''' +@curColourCode+ ''',''' 
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@RemarkDtl+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- SD: Update data to table omTrPurchaseHPPSubDetail
				set @sqlString = 'update ' +@DBName+ '..omTrPurchaseHPPSubDetail ' +
										'set isReturn = 1 where CompanyCode=''' +@curCompanyCode+ 
										''' and BranchCode=''' +@CentralBranch+ ''' and HPPNo=''' +@HPPNo+ 
										''' and BPUNo=''' +@BPUNo+ ''' and ChassisCode=''' +@curChassisCode+ 
										''' and ChassisNo=''' +convert(varchar,@curChassisNo)+''''
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesReturnBPK
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesReturnBPK as RTS using (values(''' 
											   +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
											   +@RTSNo+ ''',''' +@BPKNo+ ''','''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPKNo, NewCreatedBy, 
											   NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
										   on RTS.CompanyCode = SRC.NewCompany
										  and RTS.BranchCode  = SRC.NewBranch
										  and RTS.ReturnNo    = SRC.NewReturnNo
										  and RTS.BPKNo       = SRC.NewBPKNo
										 when matched 
											  then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															, LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										 when not matched by target 
											  then insert (CompanyCode, BranchCode, ReturnNo, BPKNo, CreatedBy, 
														   CreatedDate, LastUpdateBy, LastUpdateDate)
												   values (NewCompany, NewBranch, NewReturnNo, NewBPKNo, NewCreatedBy, 
														   NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
						execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesReturnDetailModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesReturnDetailModel as RTS using (values(''' 
											   +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@RTSNo+ ''',''' +@BPKNo+ ''','''
											   +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
											   +convert(varchar,@BeforeDiscDPP)+ ''',''' +convert(varchar,@DiscExcludePPn)+ ''','''
											   +convert(varchar,@AfterDiscDPP)+ ''',''' +convert(varchar,@AfterDiscPPn)+ ''','''
											   +convert(varchar,@AfterDiscPPnBM)+ ''',''' +convert(varchar,@AfterDiscTotal)+ ''','''
											   +convert(varchar,@OthersDPP)+ ''',''' +convert(varchar,@OthersPPn)+ ''',1,'''
											   +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											   +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
									   as SRC (NewCompany, NewBranch, NewReturnNo, NewBPKNo,  
											   NewSalesModelCode, NewSalesModelYear, 
											   NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
											   NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
											   NewOthersDPP, NewOthersPPn, NewQuantity, 
											   NewCreatedBy, NewCreatedDate, 
											   NewLastUpdateBy, NewLastUpdateDate)
										   on RTS.CompanyCode    = SRC.NewCompany
										  and RTS.BranchCode     = SRC.NewBranch
										  and RTS.ReturnNo       = SRC.NewReturnNo
									      and RTS.BPKNo          = SRC.NewBPKNo
										  and RTS.SalesModelCode = SRC.NewSalesModelCode
										  and RTS.SalesModelYear = SRC.NewSalesModelYear
										 when matched 
											  then update set Quantity       = Quantity       + SRC.NewQuantity
															, BeforeDiscDPP  = BeforeDiscDPP  + SRC.NewBeforeDiscDPP
															, DiscExcludePPn = DiscExcludePPn + SRC.NewDiscExcludePPn
															, AfterDiscDPP   = AfterDiscDPP   + SRC.NewAfterDiscDPP
															, AfterDiscPPn   = AfterDiscPPn   + SRC.NewAfterDiscPPn
															, AfterDiscPPnBM = AfterDiscPPnBM + SRC.NewAfterDiscPPnBM
															, AfterDiscTotal = AfterDiscTotal + SRC.NewAfterDiscTotal
															, OthersDPP      = OthersDPP      + SRC.NewOthersDPP
															, OthersPPn      = OthersPPn      + SRC.NewOthersPPn
															, LastUpdateBy   = ''' +@curLastUpdateBy+ '''
															, LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
										when not matched by target 
											 then insert (CompanyCode, BranchCode, ReturnNo, BPKNo, 
														  SalesModelCode, SalesModelYear, 
														  BeforeDiscDPP, DiscExcludePPn, AfterDiscDPP,
														  AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, 
														  OthersDPP, OthersPPn, Quantity, 
														  CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
												  values (NewCompany, NewBranch, NewReturnNo, NewBPKNo,  
														  NewSalesModelCode, NewSalesModelYear, 
														  NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, 
														  NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, 
														  NewOthersDPP, NewOthersPPn, NewQuantity, NewCreatedBy, 
														  NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
						execute sp_executesql @sqlString

			 -- SD: Collect price information from table omTrPurchaseHPP
				set @sqlString = N'select @BPKNo=BPKNo from ' +@DBNameMD+ '..omTrSalesInvoiceVin where CompanyCode='''
										  +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and InvoiceNo=''' 
										  +@INVNo+ ''' and ChassisCode=''' +@curChassisCode+ ''' and ChassisNo='''
										  +convert(varchar,@curChassisNo) + ''''
						execute sp_executesql @sqlString, 
								N'@BPKNo	varchar(15) output', @BPKNo	output

			 -- MD: Insert data to table omTrSalesReturnVIN
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesReturnVIN
										(CompanyCode, BranchCode, ReturnNo, BPKNo, SalesModelCode, SalesModelYear, 
										 ReturnSeq, ColourCode, ChassisCode, ChassisNo, EngineCode, EngineNo, 
										 Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
										 +@RTSNo+ ''',''' +@BPKNo+ ''',''' 
										 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
										 +convert(varchar,@SeqNo)+ ''',''' +@curColourCode+ ''',''' 
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@RemarkDtl+ ''','''  
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

/*				
			USE POSTING JOURNAL IN UTILITY SALES MODULE 
			FOR UPDATE DATA TO TABLE ARINTERFACE & GLINTERFACE
			 -- MD: Update data to table arInterface
			 -- MD: Update data to table glInterface
			 -- SD: Update data to table apInterface
			 -- SD: Update data to table glInterface
*/

   			 -- Update Daily Posting Process Status
				update omSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and DocDate    =@curDocDate
					  and Seq        =@curSeq

			 -- Read next record
				fetch next from curomSDMovement
					  into  @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
							@curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
							@curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
							@curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
							@curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table omSDMovement to table omHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[omHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[omHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[Seq] [int] NOT NULL,
				[SalesModelCode] [varchar](20) NOT NULL,
				[SalesModelYear] [numeric](4, 0) NOT NULL,
				[ChassisCode] [varchar](15) NOT NULL,
				[ChassisNo] [numeric](10, 0) NOT NULL,
				[EngineCode] [varchar](15) NOT NULL,
				[EngineNo] [numeric](10, 0) NOT NULL,
				[ColourCode] [varchar](15) NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[CustomerCode] [varchar](15) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NOT NULL,
				[LastUpdateDate] [datetime] NOT NULL)
			
		insert into omHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  omSDMovement
							  where	 ProcessStatus = 1
                                 or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		delete omSDMovement   where	 ProcessStatus = 1
                                 or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		close curomSDMovement
		deallocate curomSDMovement

END
GO
create procedure [dbo].[sp_SpMstItemLocItemLookupView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
	ItemInfo.PartNo,
	Items.ABCClass,
	ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,
	Items.OnOrder,
	Items.ReservedSP,
	Items.ReservedSR,
	Items.ReservedSL,
	Items.MovingCode,
	ItemInfo.SupplierCode,
	ItemInfo.PartName,
	ItemPrice.RetailPrice,
	ItemPrice.RetailPriceInclTax,
	ItemPrice.PurchasePrice
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode
                        AND Items.PartNo = ItemLoc.PartNo
WHERE Items.Status > 0
  AND ItemLoc.WarehouseCode = '00'

and Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode
GO
CREATE procedure [dbo].[uspfn_spGetLatestRecordByPartNo] @CompanyCode varchar(15), @BranchCode varchar(15), @PartNo  varchar(25)  
as  
SELECT  
   CompanyCode,BranchCode,PartNo,UpdateDate,  
   ISNULL(RetailPrice,0) AS RetailPrice,   
   ISNULL(RetailPriceInclTax,0) AS RetailPriceInclTax,   
   ISNULL(PurchasePrice,0) AS PurchasePrice,  
   ISNULL(OldRetailPrice,0) AS OldRetailPrice,   
   ISNULL(OldPurchasePrice,0) AS OldPurchasePrice,  
   ISNULL(Discount,0) AS Discount, ISNULL(OldDiscount,0) AS OldDiscount,  
   ISNULL(CostPrice,0) AS CostPrice, ISNULL(OldCostPirce,0) AS OldCostPirce,  
   CreatedBy,CreatedDate  
FROM  
 spHstItemPrice  
WHERE  
 CompanyCode = @CompanyCode  
 AND BranchCode = @BranchCode  
 AND PartNo = @PartNo  
 AND UpdateDate = ( SELECT  
       MAX(UpdateDate)  
      FROM  
       spHstItemPrice  
      WHERE  
       CompanyCode = @CompanyCode  
       AND BranchCode = @BranchCode  
       AND PartNo = @PartNo)
GO
CREATE procedure [dbo].[uspfn_spGetReturnDtlByReturnNo] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(20)
as
select row_number () OVER (ORDER BY spTrnSRturDtl.CreatedDate ASC) AS NoUrut, 
spTrnSRturDtl.PartNo, spTrnSRturDtl.PartNoOriginal, spTrnSRturDtl.DocNo, spTrnSRturDtl.QtyReturn, spTrnSFPJDtl.QtyBill
                from	spTrnSRturDtl
                left join spTrnSRturHdr on spTrnSRturHdr.CompanyCode = spTrnSRturDtl.CompanyCode and
                    spTrnSRturHdr.BranchCode = spTrnSRturDtl.BranchCode and
                    spTrnSRturHdr.ReturnNo = spTrnSRturDtl.ReturnNo
                left join spTrnSFPJDtl on spTrnSFPJDtl.CompanyCode = spTrnSRturDtl.CompanyCode and
                    spTrnSFPJDtl.BranchCode = spTrnSRturDtl.BranchCode and
                    spTrnSFPJDtl.FPJNo = spTrnSRturHdr.FPJNo and
                    spTrnSFPJDtl.DocNo = spTrnSRturDtl.DocNo and
                    spTrnSFPJDtl.PartNo = spTrnSRturDtl.PartNo and
                    spTrnSFPJDtl.PartNoOriginal = spTrnSRturDtl.PartNoOriginal
                where	spTrnSRturDtl.CompanyCode = @CompanyCode and 
                        spTrnSRturDtl.BranchCode = @BranchCode and
                        spTrnSRturDtl.ReturnNo = @ReturnNo
GO
create procedure [dbo].[uspfn_UpdateEmployee]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployee a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployee (
		   CompanyCode
		 , EmployeeID
		 , EmployeeName
		 , Email
		 , FaxNo
		 , Handphone1
		 , Handphone2
		 , Handphone3
		 , Handphone4
		 , Telephone1
		 , Telephone2
		 , OfficeLocation
		 , IsLinkedUser
		 , RelatedUser
		 , JoinDate
		 , Department
		 , Position
		 , Grade
		 , Rank
		 , Gender
		 , TeamLeader
		 , PersonnelStatus
		 , ResignDate
		 , ResignDescription
		 , IdentityNo
		 , NPWPNo
		 , NPWPDate
		 , BirthDate
		 , BirthPlace
		 , Address1
		 , Address2
		 , Address3
		 , Address4
		 , Province
		 , District
		 , SubDistrict
		 , Village
		 , ZipCode
		 , DrivingLicense1
		 , DrivingLicense2
		 , MaritalStatus
		 , MaritalStatusCode
		 , Height
		 , Weight
		 , UniformSize
		 , UniformSizeAlt
		 , ShoesSize
		 , FormalEducation
		 , BloodCode
		 , OtherInformation
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , Religion
		 , SelfPhoto
		 , IdentityCardPhoto
		 , IsDeleted
		 , ResignCategory
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
		 , a.EmployeeName
		 , a.Email
		 , a.FaxNo
		 , a.Handphone1
		 , a.Handphone2
		 , a.Handphone3
		 , a.Handphone4
		 , a.Telephone1
		 , a.Telephone2
		 , a.OfficeLocation
		 , a.IsLinkedUser
		 , a.RelatedUser
		 , a.JoinDate
		 , a.Department
		 , a.Position
		 , a.Grade
		 , a.Rank
		 , a.Gender
		 , a.TeamLeader
		 , a.PersonnelStatus
		 , a.ResignDate
		 , a.ResignDescription
		 , a.IdentityNo
		 , a.NPWPNo
		 , a.NPWPDate
		 , a.BirthDate
		 , a.BirthPlace
		 , a.Address1
		 , a.Address2
		 , a.Address3
		 , a.Address4
		 , a.Province
		 , a.District
		 , a.SubDistrict
		 , a.Village
		 , a.ZipCode
		 , a.DrivingLicense1
		 , a.DrivingLicense2
		 , a.MaritalStatus
		 , a.MaritalStatusCode
		 , a.Height
		 , a.Weight
		 , a.UniformSize
		 , a.UniformSizeAlt
		 , a.ShoesSize
		 , a.FormalEducation
		 , a.BloodCode
		 , a.OtherInformation
		 , a.CreatedBy
		 , a.CreatedDate
		 , a.UpdatedBy
		 , a.UpdatedDate
		 , a.Religion
		 , a.SelfPhoto
		 , a.IdentityCardPhoto
		 , a.IsDeleted
		 , a.ResignCategory
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
CREATE procedure [dbo].[uspfn_spGetRturSumAmtSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(15)  
as  
SELECT ReturnNo, sum(QtyReturn) as TotReturQty, sum(ReturAmt) as TotReturAmt,  
                        sum(DiscAmt) as TotDiscAmt, sum(NetReturAmt) as TotDPPAmt,  
                        sum(PPNAmt) as TotPPNAmt, sum(TotReturAmt) as TotFinalReturAmt,  
                        sum(CostAmt) as TotCostAmt   
                FROM spTrnSRturSSDtl with (nolock, nowait)  
                WHERE CompanyCode = @CompanyCode  
                        and BranchCode = @BranchCode  
                        and ReturnNo = @ReturnNo  
                GROUP BY ReturnNo
GO
CREATE procedure [dbo].[uspfn_spGetPartReturDetails] @CompanyCode varchar(15), @BranchCode varchar(15), @FPJNo varchar(25),
@TypeOfGoods varchar(3), @ProductType varchar(3)
as
select distinct a.PartNo, a.PartNoOriginal, a.QtyBill, a.DocNo
from	spTrnSFPJDtl a, spTrnSFPJHdr c with(nolock, nowait)
where	a.CompanyCode = @CompanyCode
        and a.BranchCode = @BranchCode
        and c.CompanyCode = @CompanyCode
        and c.BranchCode = @BranchCode
        and a.FPJNo = c.FPJNo
        and a.FPJNo = @FPJNo
		and TypeOfGoods = @TypeOfGoods
		and ProductType = @ProductType
        and (a.QtyBill - 
(select ISNULL(SUM (QtyReturn),0) AS MaxQtyRetur FROM spTrnSRturdtl
LEFT JOIN spTrnSRturHdr ON spTrnSRturHdr.ReturnNo = spTrnSRturdtl.ReturnNo AND
spTrnSRturHdr.CompanyCode = spTrnSRturdtl.CompanyCode AND
spTrnSRturHdr.BranchCode = spTrnSRturdtl.BranchCode
WHERE spTrnSRturdtl.CompanyCode = @CompanyCode
AND spTrnSRturdtl.BranchCode = @BranchCode
AND spTrnSRturHdr.FPJNo = a.FPJNo --''FPJ/08/000003''
AND spTrnSRturdtl.PartNo = a.PartNo --''P002''
AND spTrnSRturdtl.PartNoOriginal = a.PartNoOriginal -- ''Y-001''
AND spTrnSRturDtl.DocNo = a.DocNo --''SOC/08/000095''
AND TypeOfGoods = @TypeOfGoods
AND ProductType = @ProductType
AND spTrnSRturHdr.Status = 2)) > 0
GO
create procedure [dbo].[uspfn_spGetPurchaseCampaign]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@SupplierCode varchar(15),
@PartCode varchar(32)
AS
SELECT * FROM SpMstPurchCampaign
WHERE CompanyCode=@CompanyCode
  AND BranchCode=@BranchCode
  AND SupplierCode=@SupplierCode
  AND PartNo=@PartCode
  AND getdate() BETWEEN begdate AND enddate
GO
CREATE procedure [dbo].[uspfn_spGetMaxQtyReturPenjualan] 
@CompanyCode varchar(15), @BranchCode varchar(15), @PartNo varchar(25), 
@PartNoOriginal  varchar(25), @ReturnNo varchar(15), @DocNo varchar(25), @FPJNo varchar(15)
as
SELECT 
            ISNULL((SELECT QtyBill FROM spTrnSFPJDtl WHERE FPJNo = @FPJNo AND 
                PartNo = @PartNo AND 
                PartNoOriginal = @PartNoOriginal AND
				DocNo = @DocNo AND
                CompanyCode = @CompanyCode AND
                BranchCode = @BranchCode
             ) -
            ISNULL(SUM (QtyReturn),0), 0) AS MaxQtyRetur FROM spTrnSRturdtl
            LEFT JOIN spTrnSRturHdr ON spTrnSRturHdr.ReturnNo = spTrnSRturdtl.ReturnNo AND
                spTrnSRturHdr.CompanyCode = spTrnSRturdtl.CompanyCode AND
                spTrnSRturHdr.BranchCode = spTrnSRturdtl.BranchCode
            WHERE spTrnSRturdtl.CompanyCode = @CompanyCode
                AND spTrnSRturdtl.BranchCode = @BranchCode
                AND spTrnSRturHdr.FPJNo = @FPJNo
                AND spTrnSRturdtl.PartNo = @PartNo
                AND spTrnSRturdtl.PartNoOriginal = @PartNoOriginal
				AND spTrnSRturDtl.DocNo = @DocNo
                AND spTrnSRturHdr.Status NOT IN ('3')
                AND spTrnSRturdtl.ReturnNo <> @ReturnNo
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceInsertDefaultTaskNew]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@ServiceNo bigint,
	@ServiceBookNo varchar(15),
	@UserID varchar(15)
as      

--declare @CompanyCode varchar(15),
--		@BranchCode varchar(15),
--		@ProductType varchar(15),
--		@ServiceNo bigint,
--		@ServiceBookNo varchar(15)		

--set @CompanyCode = '6006406'
--set	@BranchCode = '6006401'
--set	@ProductType = '4W'
--set	@ServiceNo = '40655'
--set @ServiceBookNo = 'EJ06'

-- check jika count svTrnSrvTask ada maka tidak perlu insert task 
if(select count(*) from svTrnSrvTask
    where 1 = 1
      and CompanyCode = @CompanyCode
      and BranchCode  = @BranchCode
      and ProductType = @ProductType
      and ServiceNo   = @ServiceNo) > 0
	return

-- select data svTrnService
select * into #srv from (
  select a.* from svTrnService a
	where 1 = 1
	  and a.CompanyCode = @CompanyCode
	  and a.BranchCode  = @BranchCode
	  and a.ProductType = @ProductType
	  and a.ServiceNo   = @ServiceNo
)#srv

-----------------------------------------------
-- insert default svTrnSrvTask
-----------------------------------------------
select * into #task from(
select a.CompanyCode, a.ProductType, a.BasicModel, a.JobType, a.OperationNo, a.Description
	 , isnull(c.OperationHour, a.OperationHour) OperationHour
	 , isnull(c.ClaimHour, a.ClaimHour) ClaimHour
	 , isnull(c.LaborCost, a.LaborCost) LaborCost
	 , isnull(c.LaborPrice, a.LaborPrice) LaborPrice
	 , a.IsSubCon, a.IsCampaign, b.CreatedBy as LastupdateBy, getdate() as  LastupdateDate
	 , case when exists (
			select pkg.CompanyCode, pkg.PackageCode, pkg.JobType
			  from svMstPackage pkg
			 inner join svMstPackageTask tsk
				on tsk.CompanyCode = pkg.CompanyCode
			   and tsk.PackageCode = pkg.PackageCode
			 inner join svMstPackageContract con
				on con.CompanyCode = pkg.CompanyCode
			   and con.PackageCode = pkg.PackageCode
			 where pkg.CompanyCode = b.CompanyCode
			   and pkg.JobType = b.JobType
			   and tsk.OperationNo = a.OperationNo
			   and con.ChassisCode = b.ChassisCode
			   and con.ChassisNo = b.ChassisNo
		) then 'P' else (case when isnull(a.BillType, '') = '' then 'C' else a.BillType end)
		  end as BillType
  from svMstTask a
 inner join #srv b
    on b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.BasicModel  = a.BasicModel
   and b.JobType     = a.JobType
  left join svMstTaskPrice c
	on c.CompanyCode = a.CompanyCode
   and c.BranchCode  = b.BranchCode
   and c.ProductType = a.ProductType
   and c.BasicModel  = a.BasicModel
   and c.JobType     = a.JobType
   and c.OperationNo = a.OperationNo
 where 1 = 1
)#task

-- jika svMstTask tidak tepat 1 record, return
if (select count(*) from #task) <> 1 return

select * into #job from(
select a.* from svMstJob a, #task b
 where 1 = 1
   and a.CompanyCode = b.CompanyCode
   and a.ProductType = b.ProductType
   and a.BasicModel  = b.BasicModel
   and a.JobType     = b.JobType
)#job

-- jika svMstJob tidak tepat 1 record, return
if (select count(*) from #job) <> 1 return

-- prepare data svTrnSrvTask yg akan di Insert
declare @JobType varchar(15) set @JobType = (select JobType from #job)

if (left(@JobType,3) = 'FSC' or left(@JobType,3) = 'PDI')
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.OperationHour
		,OperationCost = isnull((select top 1 a.RegularLaborAmount
						   from svMstPdiFscRate a, #srv b, #task c, #job d 
						  where 1 = 1
						    and a.CompanyCode = b.CompanyCode
						    and a.ProductType = b.ProductType
						    and a.BasicModel = b.BasicModel
						    and a.IsCampaign = c.IsCampaign
						    and a.TransmissionType = a.TransmissionType
						    and a.PdiFscSeq = d.PdiFscSeq
						    and a.EffectiveDate <= getdate()
						    and a.IsActive = 1
						 order by a.EffectiveDate desc),0)
		,IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,ClaimHour
		,'L' TypeOfGoods
	    , case when isnull(a.BillType, '') = '' then 'C' else a.BillType end as BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,isnull((
			select cus.LaborDiscPct
			  from svMstBillingType bil
			 inner join gnMstCustomerProfitCenter cus
				on cus.CompanyCode = bil.CompanyCode
			   and cus.CustomerCode = bil.CustomerCode 
			 where 1 = 1
			   and bil.CompanyCode = @CompanyCode
			   and cus.BranchCode = @BranchCode
			   and cus.ProfitCenterCode = '200'
			   and bil.BillType = 'F'
			), b.LaborDiscPct) as LaborDiscPct
	from #task a, #srv b
end
else if @JobType = 'CLAIM'
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.ClaimHour OperationHour
		,a.LaborPrice OperationCost
		,a.IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,a.ClaimHour
		,'L' TypeOfGoods
		,'W' BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,b.LaborDiscPct
	from #task a, #srv b
end
else if @JobType = 'REWORK'
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.OperationHour
		,a.LaborPrice OperationCost
		,a.IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,ClaimHour
		,'L' TypeOfGoods
		,'I' BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,b.LaborDiscPct
	from #task a, #srv b
end
else
begin
	insert into svTrnSrvTask (CompanyCode, BranchCode, ProductType, ServiceNo, OperationNo, OperationHour, OperationCost, IsSubCon, SubConPrice, PONo, ClaimHour, TypeOfGoods, BillType, SharingTask, TaskStatus, StartService, FinishService, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
	select
		 @CompanyCode CompanyCode
		,@BranchCode BranchCode
		,@ProductType ProductType
		,@ServiceNo ServiceNo
		,a.OperationNo
		,a.OperationHour
		,a.LaborPrice OperationCost
		,IsSubCon
		,a.LaborCost SubConPrice
		,'' PONo
		,ClaimHour
		,'L' TypeOfGoods
		, case when isnull(a.BillType, '') = '' then 'C' else a.BillType end as BillType
		,'0' SharingTask
		,'0' TaskStatus
		,null StartService
		,null FinishService
		,b.LastupdateBy CreatedBy
		,b.LastupdateDate CreatedDate
		,b.LastupdateBy
		,b.LastupdateDate
		,isnull((
			select top 1 tsk.DiscPct
			  from svMstPackage pkg
			 inner join svMstPackageTask tsk
				on tsk.CompanyCode = pkg.CompanyCode
			   and tsk.PackageCode = pkg.PackageCode
			 inner join svMstPackageContract con
				on con.CompanyCode = pkg.CompanyCode
			   and con.PackageCode = pkg.PackageCode
			 where pkg.CompanyCode = b.CompanyCode
			   and pkg.JobType = b.JobType
			   and tsk.OperationNo = a.OperationNo
			   and con.ChassisCode = b.ChassisCode
			   and con.ChassisNo = b.ChassisNo
			), b.LaborDiscPct) LaborDiscPct
		
	from #task a, #srv b
end
-----------------------------------------------
-- insert default svTrnSrvItem
-----------------------------------------------
select * into #part from(
select a.* from svMstTaskPart a, #task b
 where 1 = 1
   and a.CompanyCode = b.CompanyCode
   and a.ProductType = b.ProductType
   and a.BasicModel  = b.BasicModel
   and a.JobType     = b.JobType
   and a.OperationNo = b.OperationNo
)#part

insert into svTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
select 
	 @CompanyCode CompanyCode
	,@BranchCode BranchCode
	,@ProductType ProductType
	,@ServiceNo ServiceNo
	,a.PartNo
	,(row_number() over (order by a.PartNo)) PartSeq
	,a.Quantity DemandQty
	,'0' SupplyQty
	,'0' ReturnQty
	,c.CostPrice
	,case rtrim(a.BillType) when 'F' then a.RetailPrice else c.RetailPrice end RetailPrice
	,d.TypeOfGoods
	,case when exists (
			select pkg.CompanyCode, pkg.PackageCode, pkg.JobType
			  from svMstPackage pkg
			 inner join svMstPackagePart prt
				on prt.CompanyCode = pkg.CompanyCode
			   and prt.PackageCode = pkg.PackageCode
			 inner join svMstPackageContract con
				on con.CompanyCode = pkg.CompanyCode
			   and con.PackageCode = pkg.PackageCode
			 inner join #srv srv
				on srv.CompanyCode = con.CompanyCode
			   and srv.ChassisCode = con.ChassisCode
			   and srv.ChassisNo = con.ChassisNo
			 where pkg.CompanyCode = b.CompanyCode
			   and pkg.JobType = b.JobType
			   and prt.PartNo = a.PartNo
		) then 'P' else 
		(case when isnull(a.BillType, '') = '' then 'C' else 
			(case when substring(@ServiceBookNo, 1, 2) >= 'EJ' and f.PartName like '%OIL FILTER%' and (select PdiFscSeq from #job) = 1 then 'C' else 		
			
				(case when substring(@ServiceBookNo, 1, 2) >= 'EJ' and f.PartName like '%ENGINE%' and (select PdiFscSeq from #job) = 3 then 'C' else 		
				a.BillType 
				end)
			
			end)		
		end)
		  end as BillType
	,null SupplySlipNo
	,null SupplySlipDate
	,null SSReturnNo
	,null SSReturnDate
	,b.LastupdateBy CreatedBy
	,b.LastupdateDate CreatedDate
	,b.LastupdateBy
	,b.LastupdateDate
	,isnull((
		select top 1 prt.DiscPct
		  from svMstPackage pkg
		 inner join svMstPackagePart prt
			on prt.CompanyCode = pkg.CompanyCode
		   and prt.PackageCode = pkg.PackageCode
		 inner join svMstPackageContract con
			on con.CompanyCode = pkg.CompanyCode
		   and con.PackageCode = pkg.PackageCode
		 inner join #srv srv
			on srv.CompanyCode = con.CompanyCode
		   and srv.ChassisCode = con.ChassisCode
		   and srv.ChassisNo = con.ChassisNo
		 where pkg.CompanyCode = b.CompanyCode
		   and pkg.JobType = b.JobType
		   and prt.PartNo = a.PartNo
		), 
		(case when rtrim(a.BillType) = 'F' and rtrim(e.ParaValue) = 'SPAREPART' then 0
		      when rtrim(a.BillType) = 'F' then 0
		      when rtrim(e.ParaValue) = 'SPAREPART' then (select top 1 PartDiscPct from #srv) 
			  else (select top 1 MaterialDiscPct from #srv) end)
		) as DiscPct
  from #part a
  left join #task b
    on b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.BasicModel  = a.BasicModel
   and b.JobType     = a.JobType
   and b.OperationNo = a.OperationNo
  left join spMstItemPrice c
    on c.CompanyCode = a.CompanyCode
   and c.BranchCode  = @BranchCode
   and c.PartNo      = a.PartNo
  left join spMstItems d
    on d.CompanyCode = a.CompanyCode
   and d.BranchCode  = @BranchCode
   and d.PartNo      = a.PartNo
  left join gnMstLookupDtl e
    on e.CompanyCode = d.CompanyCode
   and e.CodeID = 'GTGO'
   and e.LookupValue = d.TypeOfGoods
   left join spMstItemInfo f
	on f.CompanyCode = a.CompanyCode
	and f.PartNo = a.PartNo
 where 1 = 1
   and b.CompanyCode = a.CompanyCode
   and b.ProductType = a.ProductType
   and b.BasicModel  = a.BasicModel
   and b.JobType     = a.JobType
   and b.OperationNo = a.OperationNo
exec uspfn_SvInsertDefaultTaskMovement @CompanyCode, @BranchCode, @ProductType, @ServiceNo, @UserID

drop table #srv
drop table #task
drop table #part
drop table #job
GO
create procedure [dbo].[uspfn_SyncCsCustomerVehicleView]
as

;with x as (
select a.CompanyCode
     , b.BranchCode
     , a.CustomerCode
	 , (d.ChassisCode + convert(varchar, d.ChassisNo)) as Chassis
	 , (d.EngineCode + convert(varchar, d.EngineNo)) as Engine
	 , b.SONo
     , c.DONo
	 , c.DODate
	 , g.BpkNo
     , d.SalesModelCode as CarType
     , d.ColourCode as Color
	 , b.Salesman as SalesmanCode
	 , f.EmployeeName as SalesmanName
     , e.PoliceRegNo
     , c.DODate as DeliveryDate
	 , d.SalesModelCode
	 , d.SalesModelYear
	 , d.ColourCode
	 , g.BPKDate
	 , b.IsLeasing
	 , b.LeasingCo
	 , h.CustomerName as LeasingName
	 , b.Installment
  from GnMstCustomer a
 inner join omTrSalesSO b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join omTrSalesDO c
    on c.CompanyCode = b.CompanyCode
   and c.CustomerCode = b.CustomerCode
   and c.SONo = b.SONo
  left join omTrSalesDODetail d
    on d.CompanyCode = c.CompanyCode
   and d.BranchCode = c.BranchCode
   and d.DONo = c.DONo
  left join svMstCustomerVehicle e
    on e.CompanyCode = d.CompanyCode
   and e.ChassisCode = d.ChassisCode
   and e.ChassisNo = d.ChassisNo
  left join HrEmployee f
    on f.CompanyCode = b.CompanyCode
   and f.EmployeeID = b.Salesman
  left join OmTrSalesBpk g
    on g.CompanyCode = c.CompanyCode
   and g.BranchCode = c.BranchCode
   and g.DONo = c.DONo
   and g.SONo = c.SONo
  left join gnMstCustomer h
    on h.CompanyCode = b.CompanyCode
   and h.CustomerCode = b.LeasingCo
 where 1 = 1
   and d.ChassisCode is not null
   and d.EngineCode is not null
   and b.SODate is not null
   and c.DODate is not null
   and g.BpkNo is not null
   and isnull(d.StatusBPK, 3) != '3'
   and isnull(g.Status, 3) != '3'
   and year(c.DODate) = year(getdate())
)

--select * from x
select * into #t1 from (select * from x)#

delete CsCustomerVehicleView
 where exists (
	select top 1 1 from #t1
	 where #t1.CompanyCode = CsCustomerVehicleView.CompanyCode
	   and #t1.BranchCode = CsCustomerVehicleView.BranchCode
	   and #t1.Chassis = CsCustomerVehicleView.Chassis
 )

insert into CsCustomerVehicleView (CompanyCode, BranchCode, CustomerCode, Chassis, Engine, SONo, DONo, DoDate, BpkNo, CarType, Color, SalesmanCode, SalesmanName, PoliceRegNo, DeliveryDate, SalesModelCode, SalesModelYear, ColourCode, BpkDate, IsLeasing, LeasingCo,
 LeasingName, Installment)
select * from #t1

--drop table CsCustomerVehicleView
--select * into CsCustomerVehicleView from #t1

drop table #t1
GO
CREATE procedure [dbo].[sp_SpMstItemConversionview]    (  @CompanyCode varchar(10)  )
as
select   a.CompanyCode,a.PartNo,a.ProductType, b.PartName, FromQty, ToQty ,IsActive
from SpMstItemConversion a
left join spMstItemInfo b on
    a.CompanyCode = b.CompanyCode
    and a.ProductType = b.ProductType
    and a.PartNo = b.PartNo
 where   a.CompanyCode=@CompanyCode
GO
CREATE procedure [dbo].[uspfn_AbMappingShiftInit]
	@CompanyCode varchar(20),
	@BranchCode varchar(20), 
	@Department varchar(20),
	@Position varchar(20), 
	@DateFrom datetime = '19000101',
	@DateTo datetime = '19000101',
	@UserID varchar(20)
as

declare @sDateFrom char(8), @sDateTo char(8), @ActDate datetime
select @sDateFrom = convert(varchar, @DateFrom, 112), @sDateTo = convert(varchar, @DateTo, 112)

if (@sDateFrom > '19000101') and (@sDateFrom <= @sDateTo) 
begin
	set @ActDate = @DateFrom

	while (@ActDate <= @DateTo)
	begin
		print @ActDate
		
		insert into HrEmployeeShift (CompanyCode, EmployeeID, AttdDate, ShiftCode, CreatedBy, CreatedDate)
		select a.CompanyCode, a.EmployeeID, convert(varchar, @ActDate, 112), '', @UserID, getdate()
		  from HrEmployee a
		 where a.CompanyCode = @CompanyCode
		   and a.Department = @Department
		   and a.Position = (case @Position when '' then a.Position else @Position end)
		   and not exists (
			select 1 from HrEmployeeShift
			 where CompanyCode = a.CompanyCode
			   and EmployeeID = a.EmployeeID
			   and AttdDate = convert(varchar, @ActDate, 112)
		   )

		set @ActDate = dateadd(day, 1, @ActDate)
	end
end
GO
create procedure [dbo].[uspfn_sysgetpermission] 
@roleid varchar(50)
AS
BEGIN
	select * from vw_rolemenupermission where roleid=@roleid
	order by MenuLevel,MenuIndex
END
GO
create procedure [dbo].[uspfn_spListMovingCode]
@CompanyName varchar(15)
AS
SELECT MovingCode, MovingCodeName,
Formula = Cast(Param1 as varchar(10)) + Sign1 + Variable + Sign2 + Cast(Param2 as varchar(10)),
Param1, Sign1, Variable, Param2, Sign2
FROM spMstMovingCode
WHERE CompanyCode=@CompanyName
GO
create procedure [dbo].[uspfn_UpdateTraining]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeTraining a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeTraining (
		   CompanyCode
		 , EmployeeID
		 , TrainingCode
		 , TrainingDate
		 , TrainingSeq
		 , TrainingDuration
		 , PreTest
		 , PreTestAlt
		 , PostTest
		 , PostTestAlt
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
	     , a.TrainingCode
	     , a.TrainingDate
	     , a.TrainingSeq
	     , a.TrainingDuration
	     , a.PreTest
	     , a.PreTestAlt
	     , a.PostTest
	     , a.PostTestAlt
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_spGetTrnSInvoiceDtl] @CompanyCode varchar(15),
	@BranchCode varchar(15), @InvoiceNo varchar(25)
as
SELECT 
 row_number () OVER (ORDER BY spTrnSInvoiceDtl.CreatedDate ASC) AS NoUrut,
 spTrnSInvoiceDtl.PartNo,
 spTrnSInvoiceDtl.PartNoOriginal,
 spTrnSInvoiceDtl.DocNo,
 CONVERT(VARCHAR, spTrnSInvoiceDtl.DocDate, 106) AS DocDate,
 spTrnSORDHdr.OrderNo,
 spTrnSORDHdr.OrderDate,
 spTrnSInvoiceDtl.QtyBill
FROM spTrnSInvoiceDtl
INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSInvoiceDtl.DocNo AND
spTrnSORDHdr.CompanyCode = spTrnSInvoiceDtl.CompanyCode AND
spTrnSORDHdr.BranchCode = spTrnSInvoiceDtl.BranchCode
WHERE spTrnSInvoiceDtl.CompanyCode=@CompanyCode AND 
spTrnSInvoiceDtl.BranchCode=@BranchCode AND 
InvoiceNo = @InvoiceNo
GO
CREATE procedure [dbo].[sp_SpMstItemModifSelect]  (  @CompanyCode varchar(10),@PartNo varchar(50))
 as

SELECT 
                     ItemInfo.PartNo
                    ,ItemInfo.ProductType
					   ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRDT' AND 
                             LookUpValue = ItemInfo.ProductType AND 
                             CompanyCode = @CompanyCode) AS ProductTypeName
                    ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRCT' AND 
                             LookUpValue = ItemInfo.PartCategory AND 
                             CompanyCode = @CompanyCode) AS CategoryName
                    ,ItemInfo.PartCategory
                    ,ItemInfo.PartName
                    ,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
                    ,ItemInfo.OrderUnit
                    ,ItemInfo.SupplierCode
                    ,Supplier.SupplierName ,ItemInfo.CompanyCode 
                FROM SpMstItemInfo ItemInfo
                LEFT JOIN GnMstSupplier Supplier ON 
                    Supplier.CompanyCode  = ItemInfo.CompanyCode 
                AND Supplier.SupplierCode = ItemInfo.SupplierCode

				where  ItemInfo.CompanyCode= @CompanyCode
				and ItemInfo.PartNo=@PartNo
GO
create procedure [dbo].[uspfn_spGetTrnSFPJDtl] @CompanyCode varchar(15), @BranchCode varchar(15), @FPJNo varchar(25)
as
SELECT 
 row_number () OVER (ORDER BY spTrnSFPJDtl.CreatedDate ASC) AS NoUrut,
 spTrnSFPJDtl.PartNo,
 spTrnSFPJDtl.PartNoOriginal,
 spTrnSFPJDtl.DocNo,
 CONVERT(VARCHAR, spTrnSFPJDtl.DocDate, 106) AS DocDate,
 spTrnSORDHdr.OrderNo,
 spTrnSORDHdr.OrderDate,
 spTrnSFPJDtl.QtyBill
FROM spTrnSFPJDtl
INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.CompanyCode = spTrnSFPJDtl.CompanyCode
    AND spTrnSORDHdr.BranchCode = spTrnSFPJDtl.BranchCode  
	AND spTrnSORDHdr.DocNo = spTrnSFPJDtl.DocNo
WHERE spTrnSFPJDtl.CompanyCode=@CompanyCode AND 
spTrnSFPJDtl.BranchCode=@BranchCode AND 
FPJNo = @FPJNo
GO
CREATE procedure [dbo].[uspfn_spGetRturSumAmt] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(20)
as  
 SELECT	ReturnNo, sum(QtyReturn) as TotReturQty, sum(ReturAmt) as TotReturAmt,
                        sum(DiscAmt) as TotDiscAmt, sum(NetReturAmt) as TotDPPAmt,
                        sum(PPNAmt) as TotPPNAmt, sum(TotReturAmt) as TotFinalReturAmt,
                        sum(CostAmt) as TotCostAmt 
                FROM	spTrnSRturDtl with (nolock, nowait)
                WHERE	CompanyCode = @CompanyCode
                        and BranchCode = @BranchCode
                        and ReturnNo = @ReturnNo
                GROUP BY ReturnNo
GO
create procedure [dbo].[sp_SpMstItemLocView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
	 ItemLoc.PartNo
	,ItemInfo.PartName
	,ItemInfo.SupplierCode
	,ItemLoc.WarehouseCode
	,ItemLoc.LocationCode
	,Items.PartCategory
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM spMstItemLoc ItemLoc
INNER JOIN spMstItems Items 
    ON ItemLoc.CompanyCode=Items.CompanyCode
    AND ItemLoc.BranchCode=Items.BranchCode
    AND ItemLoc.PartNo=Items.PartNo
INNER JOIN spMstItemInfo ItemInfo 
    ON ItemLoc.CompanyCode=ItemInfo.CompanyCode
    AND ItemLoc.PartNo=ItemInfo.PartNo
WHERE
	ItemLoc.WarehouseCode NOT LIKE 'X%'


and Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode
GO
create procedure [dbo].[uspfn_spMstCompanyAccount] (  @CompanyCode varchar(10), @Search varchar(50) = '')
 as
  IF @Search <> ''
	 select 
		CompanyCode,
		CompanyCodeTo,
		CompanyCodeToDesc,
		BranchCodeTo,
		BranchCodeToDesc,
		WarehouseCodeTo,
		WarehouseCodeToDesc,
		UrlAddress,
		isActive
		from spMstCompanyAccount
		where CompanyCode= @CompanyCode
		and (
		CompanyCodeTo like '%' + @Search + '%' or
		CompanyCodeToDesc like '%' + @Search + '%' or
		BranchCodeTo like '%' + @Search + '%' or
		BranchCodeToDesc like '%' + @Search + '%' or
		WarehouseCodeTo like '%' + @Search + '%' or
		WarehouseCodeToDesc like '%' + @Search + '%' 

		)
  else

		select 
		CompanyCode,
		CompanyCodeTo,
		CompanyCodeToDesc,
		BranchCodeTo,
		BranchCodeToDesc,
		WarehouseCodeTo,
		WarehouseCodeToDesc,
		UrlAddress,
		isActive
		from spMstCompanyAccount
		where CompanyCode= @CompanyCode
GO
CREATE procedure [dbo].[sp_SpMstItemModifInfo]  (  @CompanyCode varchar(10))
 as

SELECT distinct
                     ItemInfo.PartNo
                    ,ItemInfo.ProductType
					   ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRDT' AND 
                             LookUpValue = ItemInfo.ProductType AND 
                             CompanyCode = @CompanyCode) AS ProductTypeName
                    ,(SELECT LookupValueName 
                        FROM gnMstLookupDtl 
                       WHERE CodeID = 'PRCT' AND 
                             LookUpValue = ItemInfo.PartCategory AND 
                             CompanyCode = @CompanyCode) AS CategoryName
                    ,ItemInfo.PartCategory
                    ,ItemInfo.PartName
                    ,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
                    ,ItemInfo.OrderUnit
                    ,ItemInfo.SupplierCode
                    ,Supplier.SupplierName ,ItemInfo.CompanyCode 
                FROM SpMstItemInfo ItemInfo
                LEFT JOIN GnMstSupplier Supplier ON 
                    Supplier.CompanyCode  = ItemInfo.CompanyCode 
                AND Supplier.SupplierCode = ItemInfo.SupplierCode

				where  ItemInfo.CompanyCode= @CompanyCode
GO
create procedure [dbo].[uspfn_UpdateAchievement]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeAchievement a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeAchievement (
		   CompanyCode
		 , EmployeeID
		 , AssignDate
		 , Department
		 , Position
		 , Grade
		 , IsJoinDate
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
	     , a.AssignDate
	     , a.Department
	     , a.Position
	     , a.Grade
	     , a.IsJoinDate
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
-- =============================================
-- Author:		David L.
-- Create date: 22 Sep 2014
-- Description:	Get Customer For Report Register 011 & 017B
--              (Report Register Penjualan Per Pelanggan (Tunai&Kredit))
-- =============================================
create PROCEDURE [dbo].[uspfn_spCustRptRgs] 
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@DateFrom datetime,
	@DateTo datetime,
	@PartType varchar(2),
	@PaymentCode nchar(1)
AS
BEGIN
	declare @TOPC varchar(15)
	set @TOPC = 'TOPC'

	if(@PaymentCode = '0')
	begin	
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     = 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else if(@PaymentCode = '1')
	begin 
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
			    AND d.ParaValue     > 0 			 		
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
	else
	begin
	SELECT DISTINCT
			    a.CustomerCode,
			    UPPER(b.CustomerName) CustomerName
		      FROM 
			    SpTrnSFPJHdr a,
			    GnMstCustomer b,
			    (
				    SELECT 
					    row_number()OVER(ORDER BY SpTrnSFPJHdr.customerCode)rowNum,
					    SpTrnSFPJHdr.customerCode 
				    FROM 
					    SpTrnSFPJHdr 
					    left join gnMstLookupDtl on SpTrnSFPJHdr.CompanyCode = gnMstLookupDtl.CompanyCode
						    AND gnMstLookupDtl.CodeId = @TOPC
				    WHERE
					    SpTrnSFPJHdr.CompanyCode	= @CompanyCode
					    AND SpTrnSFPJHdr.BranchCode = @BranchCode
					    AND convert(varchar,SpTrnSFPJHdr.FPJDate, 112) 
						    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
						    AND convert(varchar, convert(datetime, @DateTo), 112)
					    AND gnMstLookupDtl.ParaValue = 0
				    GROUP BY customerCode
			    )c,
			    gnMstLookupDtl d	
		     WHERE 
			    a.CompanyCode		= b.CompanyCode
			    AND a.CustomerCode	= b.CustomerCode
			    AND a.CustomerCode	= c.CustomerCode
			    AND a.CompanyCode	= @CompanyCode
			    AND a.BranchCode	= @BranchCode
			    AND convert(varchar, a.FPJDate, 112) 
					    BETWEEN convert(varchar, convert(datetime, @DateFrom), 112) 
					    AND convert(varchar, convert(datetime, @DateTo), 112)
			    AND a.CompanyCode	= d.CompanyCode
			    AND d.CodeId		= @TOPC
			    AND a.TOPCode		= d.LookupValue	
                AND (CASE WHEN @PartType = '' THEN '' ELSE a.TypeOfGoods END) = @PartType
		     ORDER BY CustomerCode
	end
END
GO
CREATE PROCEDURE [dbo].[sp_spMasterPartSelect4Lookup] ( 
	@CompanyCode varchar(15)
	,@BranchCode varchar(15)
	,@TypeOfGoods varchar(15)
	,@ProductType varchar(15)
)
AS
	SELECT 
	 Items.PartNo
	,Items.ProductType
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	   WHERE CodeID = 'PRCT' AND 
			 LookUpValue = Items.PartCategory AND 
			 CompanyCode = @CompanyCode) AS CategoryName
	,Items.PartCategory
	,ItemInfo.PartName
	,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
	,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
	,ItemInfo.OrderUnit
	,ItemInfo.SupplierCode
	,Supplier.SupplierName
	,(SELECT LookupValueName 
		FROM gnMstLookupDtl 
	  WHERE CodeID = 'TPGO' AND 
			LookUpValue = Items.TypeOfGoods AND 
			CompanyCode = @CompanyCode) AS TypeOfGoods
	FROM SpMstItems Items
	INNER JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
							 AND Items.PartNo = ItemInfo.PartNo
	LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
							 AND Supplier.SupplierCode = ItemInfo.SupplierCode
	WHERE Items.CompanyCode = @CompanyCode
	  AND Items.BranchCode  = @BranchCode    
	  AND Items.TypeOfGoods = @TypeOfGoods
	  AND Items.ProductType = @ProductType
GO
CREATE procedure [dbo].[sp_spmasterpartview] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as

 select a.CompanyCode,ItemPrice.BranchCode,a.PartNo,a.PartName,a.SupplierCode,gnMstSupplier.SupplierName,
a.IsGenuinePart,a.ProductType,a.PartCategory ,u.LookUpValueName as CategoryName
,a.OrderUnit as 'FromQty'
,ItemPrice.PurchasePrice
,ItemPrice.RetailPriceInclTax
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice

from SpMstItemInfo a 
inner join  gnMstLookUpDtl u on (a.PartCategory =u.ParaValue)
left join  spMstItemPrice ItemPrice       ON ItemPrice.CompanyCode=a.CompanyCode 
    AND ItemPrice.PartNo=a.PartNo 
	 LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = a.SupplierCode AND
        gnMstSupplier.CompanyCode = a.CompanyCode
WHERE  u.CodeID='PRCT'  and a.Status > 0  

and a.CompanyCode=@CompanyCode and ItemPrice.BranchCode=@BranchCode
GO
-- POSTING TRANSACTION MULTI COMPANY - SPARE PART & SERVICE
-- --------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- --------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- ----------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySparePartService] '6006406','2014/11/30','0'
-- ----------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompanySparePartService]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN 
  -- Check Tax/Seri Pajak online
		declare @TaxCompany					varchar(15)
		declare @TaxBranch					varchar(15)
		declare @TaxDB						varchar(50)
		declare @TaxTransCode				varchar(3)
		declare @swTaxBranch				varchar(15) = ''
		declare @swTaxDoc					varchar(15) = ''
		declare @TaxSeq						bigint
		declare @TaxSeqNo					int
		declare @SeriPajakNo				varchar(50) = ''
		declare @sqlString					nvarchar(max)

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			begin
				set @Status = '1'
				return
			end
		
		set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
									   +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
									   +@TaxCompany+ ''' and BranchCode=''' 
									   +@TaxBranch+ ''' and Year=''' 
									   +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
									   +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
			execute sp_executesql @sqlString, 
								N'@TaxSeq 		bigint  	output,
								  @TaxSeqNo 	int 		output', 
								  @TaxSeq 		output,
								  @TaxSeqNo 	output
		if isnull(@TaxSeq,0)=0 and isnull(@TaxSeqNo,0)=0
			begin
				set @Status = '1'
				return
			end
		set @TaxSeq   = isnull(@TaxSeq,0)
		set @TaxSeqNo = isnull(@TaxSeqNo,0)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode				varchar(15)
		declare @curBranchCode				varchar(15)
		declare @curDocNo					varchar(20)
		declare @curDocDate					datetime
		declare @curPartNo					varchar(20)
		declare @curPartSeq					integer
		declare @curWarehouseCode			varchar(15)
		declare @curQtyOrder				numeric(18,2)
		declare @curQty						numeric(18,2)
		declare @curDiscPct					numeric(06,2)
		declare @curCostPrice				numeric(18,2)
		declare @curRetailPrice				numeric(18,2)
		declare @curTypeOfGoods				varchar(15)
		declare @curCompanyMD				varchar(15)
		declare @curBranchMD				varchar(15)
		declare @curWarehouseMD				varchar(15)
		declare @curRetailPriceInclTaxMD	numeric(18,2)
		declare @curRetailPriceMD			numeric(18,2)
		declare @curCostPriceMD				numeric(18,2)
		declare @curQtyFlag					char(1)
		declare @curProductType				varchar(15)
		declare @curProfitCenterCode		varchar(15)
		declare @curStatus					char(1)
		declare @curProcessStatus			char(1)
		declare @curProcessDate				datetime
		declare @curCreatedBy				varchar(15)
		declare @curCreatedDate				datetime
		declare @curLastUpdateBy			varchar(15)
		declare @curLastUpdateDate			datetime
		declare @DocPrefix					varchar(15)
		declare @SONo						varchar(15)
		declare @PLNo						varchar(15)
		declare @INVNo						varchar(15)
		declare @FPJNo						varchar(15)
		declare @POSNo						varchar(15)
		declare @BINNo						varchar(15)
		declare @WRSNo						varchar(15)
		declare @HPPNo						varchar(15)
		declare @APNo						varchar(15)
		declare @DocYear					numeric(4,0)
		declare @DocSeq						numeric(15,0)
		declare @SeqNo						integer
		declare @DBName						varchar(50)
		declare @DBNameMD					varchar(50)
		declare @swCompanyCode				varchar(15) = ''
		declare @swBranchCode				varchar(15) = ''
		declare @swDocNo 					varchar(15) = ''
		declare @TotPurchaseAmt				numeric(18,0)
		declare @TotPurchaseNetAmt			numeric(18,0)
		declare @TotTaxAmt					numeric(18,0)
		declare @RetailPriceNet				numeric(18,0)
		declare @SalesAmt					numeric(18,0)
		declare @DiscAmt					numeric(18,0)
		declare @NetSales					numeric(18,0)
		declare @PPNAmt						numeric(18,0)
		declare @TotSalesAmt				numeric(18,0)
		declare @CostAmt 					numeric(18,0)
		declare @MovingCode					varchar(15)
		declare @ABCClass					char(1)
		declare @PartCategory				varchar(15)
		declare @LocationCode				varchar(10)
		declare @MovingCodeMD				varchar(15)
		declare @ABCClassMD					char(1)
		declare @PartCategoryMD				varchar(3)
		declare @LocationCodeMD				varchar(10)
		declare @ProductTypeMD				varchar(15)	
		declare @TypeOfGoodsMD				varchar(5)
		declare @PaymentCodeMD				varchar(15)
		declare @SalesCodeMD				varchar(15)
		declare @CustomerNameMD				varchar(100)
		declare @Address1MD					varchar(100)
		declare @Address2MD					varchar(100)
		declare @Address3MD					varchar(100)
		declare @Address4MD					varchar(100)
		declare @isPKPMD					varchar(100)
		declare @NPWPNoMD					varchar(100)
		declare @SKPNoMD					varchar(100)
		declare @SKPDateMD					datetime
		declare @NPWPDateMD					datetime
		declare @TopCodeMD					varchar(15)
		declare @TopDaysMD					integer
		declare @DueDateMD					date
		declare @AccNoArMD					varchar(50)
		declare @AccNoSalesMD				varchar(50)
		declare @AccNoTaxOutMD				varchar(50)
		declare @AccNoDisc1MD				varchar(50)
		declare @AccNoCogsMD				varchar(50)
		declare @AccNoInventoryMD			varchar(50)
		declare @AccNoInventory				varchar(50)
		declare @AccNoTaxIn					varchar(50)
		declare @AccNoAP					varchar(50)
		declare @SeqNoGlMD					numeric(10,0)
		declare @SeqNoGl					numeric(10,0)
		declare @DiscFlag					integer
		declare @CurrentDate				varchar(100) = convert(varchar,getdate(),121)

        declare cursvSDMovement cursor for
			select * from svSDMovement
             where left(DocNo,3) in ('LMP','FPJ') 
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus='0'
             order by CompanyCode, BranchCode, DocNo, TypeOfGoods, PartNo, PartSeq
		open cursvSDMovement

		fetch next from cursvSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
			       @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
				   @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
				   @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin
			 -- MD : Database Name, Company Code & Branch Code MD
				set @DBNameMD = (select DbMD   from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode)

			 -- SD : Database Name 
				set @DBName   = (select DbName from gnMstCompanyMapping where CompanyCode=@curCompanyCode and BranchCode=@curBranchCode)

			 -- MD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCodeMD=MovingCode, @ABCClassMD=ABCClass, @PartCategoryMD=PartCategory, @TypeOfGoodsMD=TypeOfGoods from ' 
										  +@DBNameMD+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCodeMD		varchar(15) output,
										  @ABCClassMD 		char(1) 	output,
										  @PartCategoryMD 	varchar(3) 	output,
										  @TypeOfGoodsMD 	varchar(15) output', 
										  @MovingCodeMD 	output,
										  @ABCClassMD 		output,
										  @PartCategoryMD 	output,
										  @TypeOfGoodsMD 	output
										  
			 -- MD: Location Code
				set @sqlString = N'select @LocationCodeMD=LocationCode from ' 
										  +@DBNameMD+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCodeMD 	varchar(10) output', 
										  @LocationCodeMD 	output

			 -- MD: ProducType
				set @sqlString = N'select @ProductTypeMD=ProductType from ' 
										  +@DBNameMD+ '..gnMstCoProfile where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''''
					execute sp_executesql @sqlString, 
										N'@ProductTypeMD 	varchar(15) output', 
										  @ProductTypeMD 	output

			 -- MD: Top Code, Payment Code, Sales Code
				set @sqlString = N'select @TopCodeMD=TopCode, @PaymentCodeMD=PaymentCode, @SalesCodeMD=SalesCode from ' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode=''' 
										  +@curBranchMD+ ''' and CustomerCode=''' 
										  +@curBranchCode+ ''' and ProfitCenterCode=''300'''
					execute sp_executesql @sqlString, 
										N'@TopCodeMD 		varchar(15) output,
										  @PaymentCodeMD 	varchar(15) output,
										  @SalesCodeMD 		varchar(15) output', 
										  @TopCodeMD 		output,
										  @PaymentCodeMD 	output,
										  @SalesCodeMD 		output

			 -- MD: Top Days
				set @sqlString = N'select @TopDaysMD=ParaValue from ' 
										  +@DBNameMD+ '..gnMstLookUpDtl where CompanyCode=''' 
										  +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' 
										  +@TopCodeMD+ ''''
					execute sp_executesql @sqlString, 
										N'@TopDaysMD 		integer	output', 
										  @TopDaysMD 		output
										  
				-- MD: AR Account
				set @sqlString = N'select @AccNoArMD=c.ReceivableAccNo from ' 
				                          +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ 
								  ''' and c.BranchCode      =''' +@curBranchMD+ 
								  ''' and c.ProfitCenterCode=''300''
								      and c.TypeOfGoods     =''' +@TypeOfGoodsMD+
								  ''' and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoArMD 		varchar(50) output', 
										  @AccNoArMD 		output
										  
				-- MD: Sales Account
				set @sqlString = N'select @AccNoSalesMD=SalesAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoSalesMD 	varchar(50) output', 
										  @AccNoSalesMD 	output
										  
				-- MD: Tax Account
				set @sqlString = N'select @AccNoTaxOutMD=c.TaxOutAccNo from ' 
										  +@DBNameMD+ '..gnMstCustomerClass c,' 
										  +@DBNameMD+ '..gnMstCustomerProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.CustomerClass   =p.CustomerClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyMD+ ''' 
									  and c.BranchCode      =''' +@curBranchMD+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@TypeOfGoodsMD+ '''
									  and p.CustomerCode    =''' +@curBranchCode+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoTaxOutMD 	varchar(50) output', 
										  @AccNoTaxOutMD 	output
										  
				-- MD: Discount, COGS & Inventory Account
				set @sqlString = N'select @AccNoDisc1MD=DiscAccNo, @AccNoCogsMD=COGSAccNo, @AccNoInventoryMD=InventoryAccNo from ' 
										  +@DBNameMD+ '..spMstAccount where CompanyCode=''' 
										  +@curCompanyMD+ ''' and BranchCode =''' 
										  +@curBranchMD+ ''' and TypeOfGoods=''' 
										  +@TypeOfGoodsMD+ ''''
					execute sp_executesql @sqlString,
										N'@AccNoDisc1MD 	varchar(50) output,
										  @AccNoCogsMD 		varchar(50) output,
										  @AccNoInventoryMD varchar(50) output', 
										  @AccNoDisc1MD 	output,
										  @AccNoCogsMD 		output,
										  @AccNoInventoryMD output
										  
				set @SalesAmt    = @curQty*@curRetailPriceInclTaxMD 
				set @DiscAmt     = round((@SalesAmt*@curDiscPct / 100),0)
				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt
				set @CostAmt     = @curQty*@curCostPriceMD 
				set @DueDateMD   = dateadd(day,isnull(@TopDaysMD,0),@curDocDate)

				-- SD: A/P, TAX IN  Account
				set @sqlString = N'select @AccNoAP=c.PayableAccNo, @AccNoTaxIn=c.TaxInAccNo from ' 
										  +@DBName+ '..gnMstSupplierClass c,' 
										  +@DBName+ '..gnMstSupplierProfitCenter p
									where c.CompanyCode     =p.CompanyCode
									  and c.BranchCode      =p.BranchCode
									  and c.SupplierClass   =p.SupplierClass
									  and c.ProfitCenterCode=p.ProfitCenterCode
									  and c.CompanyCode     =''' +@curCompanyCode+ ''' 
									  and c.BranchCode      =''' +@curBranchCode+ '''
									  and c.ProfitCenterCode=''300''
									  and c.TypeOfGoods     =''' +@curTypeOfGoods+ '''
									  and p.SupplierCode    =''' +@curCompanyMD+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoAP 			varchar(50) output,
										  @AccNoTaxIn 		varchar(50) output', 
										  @AccNoAP 			output,
										  @AccNoTaxIn 		output

				-- SD: Inventory Account
				set @sqlString = N'select @AccNoInventory=InventoryAccNo from ' 
										  +@DBName+ '..spMstAccount
									where CompanyCode=''' +@curCompanyCode+ ''' 
									  and BranchCode =''' +@curBranchCode+ '''
									  and TypeOfGoods=''' +@CurTypeOfGoods+ ''''
					execute sp_executesql @sqlString, 
										N'@AccNoInventory 	varchar(50) output', 
										  @AccNoInventory 	output

			 -- SD: MovingCode, ABCClass, PartCategory
				set @sqlString = N'select @MovingCode=MovingCode, @ABCClass=ABCClass, @PartCategory=PartCategory from ' 
										  +@DBName+ '..spMstItems where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''''
					execute sp_executesql @sqlString, 
										N'@MovingCode		varchar(15) output,
										  @ABCClass 		char(1) 	output,
										  @PartCategory 	varchar(3) 	output',
										  @MovingCode 		output,
										  @ABCClass 		output,
										  @PartCategory 	output

			 -- SD: Location Code
				set @sqlString = N'select @LocationCode=LocationCode from ' 
										  +@DBName+ '..spMstItemLoc where CompanyCode=''' 
										  +@curCompanyCode+ ''' and BranchCode=''' 
										  +@curBranchCode+ ''' and PartNo=''' 
										  +@curPartNo + ''' and WarehouseCode=''00'''
					execute sp_executesql @sqlString, 
										N'@LocationCode 	varchar(15) output', 
										  @LocationCode 	output

				set @RetailPriceNet    = round(@curRetailPriceMD * (100.00-@curDiscPct) / 100.00,0)
				set @TotPurchaseNetAmt = @CurQty * @RetailPriceNet
				set @TotTaxAmt         = round(@TotPurchaseNetAmt * 0.1,0)
			    set @TotPurchaseAmt    = @TotPurchaseNetAmt + @TotTaxAmt


				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0

					 -- Discount Flag
						--set @sqlString = N'select top 1 @DiscFlag=1 from ' 
						--						  +@DBName+ '..svSDMovement where CompanyCode=''' 
						--						  +@curCompanyCode+ ''' and BranchCode=''' 
						--						  +@curBranchCode+ ''' and DocNo=''' 
						--						  +@curDocNo+ ''''
						--	execute sp_executesql @sqlString, 
						--						N'@DiscFlag 	integer output', 
						--						  @DiscFlag  	output
						set @DiscFlag = 1

					 -- SD : Insert data to table spTrnPPOSHdr
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'POS', @POSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSHdr 
										(CompanyCode, BranchCode, POSNo, POSDate, SupplierCode, OrderType, isBO, isSubstution, isSuggorProcess, 
										 Remark, ProductType, PrintSeq, ExPickingSlipNo, ExPickingSlipDate, Status, Transportation, TypeOfGoods, 
										 isGenPORDD, isDeleted, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, 
										 LockingDate, isDropSign, DropSignReffNo)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''S'',0,0,0,''' 
												   +@curDocNo+ ''',''' +@curProductType+ ''',1,'''',NULL,7,NULL,''' 
												   +@curTypeOfGoods+ ''',0,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL,0,NULL)'
							execute sp_executesql @sqlString

					 -- MD : Insert data to table spTrnSORDHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'SOC', @SONo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDHdr 
										(CompanyCode, BranchCode, DocNo, DocDate, UsageDocNo, UsageDocDate, CustomerCode, CustomerCodeBill,
										 CustomerCodeShip, isBO, isSubstitution, isIncludePPN, TransType, SalesType, isPORDD, OrderNo, OrderDate,
										 TOPCode, TOPDays, PaymentCode, PaymentRefNo, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDPPAmt, TotPPNAmt,
										 TotFinalSalesAmt, isPKP, ExPickingSlipNo, ExPickingSlipDate, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate, isDropSign)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''' +@curBranchCode+ ''',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',0,0,1,''00'',''0'',0,''' 
												   +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@TopCodeMD+ ''',''' 
												   +convert(varchar,@TopDaysMD)+ ''',''' +@PaymentCodeMD+ ''',NULL,0.00,0,0,0,0,0,1,NULL,NULL,5,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,''' +@curDocNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSPickingHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'PLS', @PLNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingHdr 
										(CompanyCode, BranchCode, PickingSlipNo, PickingSlipDate, CustomerCode, CustomerCodeBill, 
										 CustomerCodeShip, PickedBy, isBORelease, isSubstitution, isIncludePPN, TransType, SalesType, 
										 TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Remark, Status, 
										 PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchCode+
											   ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''POSTING'',0,0,1,''00'',''0'',0,0,0,0,0,0,NULL,2,1,'''
											           +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSInvoiceHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'INV', @INVNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'FPJ', @FPJNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceHdr 
										(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, PickingSlipNo, PickingSlipDate, FPJNo, FPJDate,
										 TransType, SalesType, CustomerCode, CustomerCodeBill, CustomerCodeShip, TotSalesQty, TotSalesAmt, 
										 TotDiscAmt, TotDppAmt, TotPPNAmt, TotFinalSalesAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
										       ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@PLNo+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+
											   ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''0'','''
													   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ 
											   ''',0,0,0,0,0,0,''2'',1,''' +left(@TypeOfGoodsMD,1)+
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJHdr 
						--Tax / Seri Pajak Numbering

						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>left(@swTaxDoc,3)
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
														  +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
														  +@TaxCompany+ ''' and BranchCode=''' 
														  +@TaxBranch+ ''' and Year=''' 
														  +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
														  +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @sqlString, 
														N'@TaxSeq 		bigint  	output,
														  @TaxSeqNo 	int 		output', 
														  @TaxSeq 		output,
														  @TaxSeqNo 	output

								set @sqlString = N'select top 1 @TaxTransCode=TaxTransCode from ' 
														  +@TaxDb+ '..gnMstCoProfile where CompanyCode=''' 
														  +@TaxCompany + ''' and BranchCode=''' 
														  +@TaxBranch+ ''''
									execute sp_executesql @sqlString, 
														N'@TaxTransCode varchar(3) 	output', 
														  @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlString = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' 
														+@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlString 

								--set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
								--					+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
								--					+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								if len(convert(varchar,@TaxSeq))>8
									set @SeriPajakNo =  @TaxTransCode + '0.' + replicate('0', 3-(len(convert(varchar,@TaxSeq))-8)) +
														left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) +
														'-' +right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								else
									set @SeriPajakNo =  @TaxTransCode + '0.000-'+right(convert(varchar,year(@PostingDate)),2)+ '.'
														+replicate('0',8-len(convert(varchar,@TaxSeq)))+convert(varchar,@TaxSeq)
							end

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJHdr 
										(CompanyCode, BranchCode, FPJNo, FPJDate, TPTrans, FPJGovNo, FPJSignature, 
										 FPJCentralNo, FPJCentralDate, DeliveryNo, InvoiceNo, InvoiceDate, PickingSlipNo, 
										 PickingSlipDate, TransType, CustomerCode, CustomerCodeBill, CustomerCodeShip, 
										 TOPCode, TOPDays, DueDate, TotSalesQty, TotSalesAmt, TotDiscAmt, TotDppAmt, TotPPNAmt, 
										 TotFinalSalesAmt, isPKP, Status, PrintSeq, TypeOfGoods, CreatedBy, CreatedDate, 
										 LastupdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''P'',''' +@SeriPajakNo+ ''','''
											       +convert(varchar,@curDocDate,121)+ ''',NULL,'''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''',''' 
												   +@INVNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@PLNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''00'',''' 
												   +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' +@curBranchCode+ ''',''' 
												   +@TopCodeMD+ ''',''' +convert(varchar,@TopDaysMD)+ ''',''' 
												   +convert(varchar,@DueDateMD,121)+ ''',0,0,0,0,0,0,1,1,1,''' 
												   +@TypeOfGoodsMD+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert Data to table spTrnSFPJInfo
						set @sqlString = N'select @CustomerNameMD=CustomerGovName, @Address1MD=Address1, @Address2MD=Address2, ' +
												  '@Address3MD=Address3, @Address4MD=Address4, @isPKPMD=isPKP, @NPWPNoMD=NPWPNo, ' +
												  '@SKPNoMD=SKPNo, @SKPDateMD=SKPDate, @NPWPDateMD=NPWPDate from ' 
												  +@DBNameMD+ '..gnMstCustomer where CompanyCode=''' 
												  +@curCompanyMD+ ''' and CustomerCode=''' 
												  +@curBranchCode+ ''''
							execute sp_executesql @sqlString, 
												N'@CustomerNameMD 	varchar(100) output,
												  @Address1MD 		varchar(100) output,
												  @Address2MD 		varchar(100) output,
												  @Address3MD 		varchar(100) output,
												  @Address4MD 		varchar(100) output,
												  @isPKPMD 			bit 		 output,
												  @NPWPNoMD 		varchar(100) output,
												  @SKPNoMD 			varchar(100) output,
												  @SKPDateMD 		datetime 	 output,
												  @NPWPDateMD 		datetime     output', 
												  @CustomerNameMD 	output,
												  @Address1MD 		output,
												  @Address2MD 		output,
												  @Address3MD 		output,
												  @Address4MD 		output,
												  @isPKPMD 			output,
												  @NPWPNoMD 		output,
												  @SKPNoMD 			output,
												  @SKPDateMD 		output,
												  @NPWPDateMD 		output

						set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJInfo 
										(CompanyCode, BranchCode, FPJNo, CustomerName, Address1, Address2, 
										 Address3, Address4, isPKP, NPWPNo, SKPNo, SKPDate, NPWPDate, 
										 CreatedBy, CreatedDate, LastupdateBy, LastUpdateDate)
										values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +@CustomerNameMD+ ''',''' +@Address1MD+ ''',''' 
											   +@Address2MD+ ''',''' +@Address3MD+ ''',''' +@Address4MD+ 
											   ''',''' +@isPKPMD+ ''',''' +@NPWPNoMD+ ''',''' +@SKPNoMD+ 
											   ''',''' +convert(varchar,@SKPDateMD,121)+ ''',''' 
											   +convert(varchar,@NPWPDateMD,121)+ ''',''POSTING'',''' 
											   +convert(varchar,@PostingDate,121)+ ''',''POSTING'',''' 
											   +@currentDate+ ''')'
							execute sp_executesql @sqlString

					 -- SD : Insert data to table spTrnPBinnHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNL', @BINNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnHdr 
										(CompanyCode, BranchCode, BinningNo, BinningDate, ReceivingType, DNSupplierNo, DNSupplierDate, TransType, 
										 SupplierCode, ReferenceNo, ReferenceDate, TotItem, TotBinningAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' +@curBranchMD+ ''','''
												   +@FPJNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' 
												   +@curTypeOfGoods+ ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString
					
					 -- SD : Insert data to table spTrnPRcvHdr 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'WRL', @WRSNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvHdr 
										(CompanyCode, BranchCode, WRSNo, WRSDate, BinningNo, BinningDate, ReceivingType, 
										 DNSupplierNo, DNSupplierDate, TransType, SupplierCode, ReferenceNo, ReferenceDate, 
										 TotItem, TotWRSAmt, Status, PrintSeq, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BINNo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''1'',''' +@PLNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''4'',''' 
												   +@curCompanyMD+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,4,1,''' +@curTypeOfGoods+ 
											   ''',''POSTING'',''' +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
											       +@currentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- SD : Insert data to spTrnPHPP 
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'HPP', @HPPNo output
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @curBranchCode, @DBName, 'BNP', @APNo output
						set @sqlString = 'insert into ' +@DBName+ '..spTrnPHPP 
										(CompanyCode, BranchCode, HPPNo, HPPDate, WRSNo, WRSDate, ReferenceNo, ReferenceDate,
										 TotPurchAmt, TotNetPurchAmt, TotTaxAmt, TaxNo, TaxDate, MonthTax, YearTax, DueDate,
										 DiffNetPurchAmt, DiffTaxAmt, TotHppAmt, CostPrice, PrintSeq, TypeOfGoods, Status, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
										values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WRSNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',0,0,0,''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,month(@curDocDate),121)+ ''',''' 
												   +convert(varchar,year(@curDocDate),121)+ ''',''' 
												   +convert(varchar,@DueDateMD,111)+ ''',0,0,0,0,1,''' 
												   +@curTypeOfGoods+ ''',2,''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''')'
							execute sp_executesql @sqlString
					end   

				set @SeqNo = @SeqNo + 1
			 -- SD: Insert data to table spTrnPPOSDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPPOSDtl
										(CompanyCode, BranchCode, POSNo, PartNo, SeqNo, OrderQty, SuggorQty, PurchasePrice, DiscPct,
										 PurchasePriceNett, CostPrice, TotalAmount, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, Note)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' +@curPartNo+ 
										  ''',' +convert(varchar,@SeqNo)+ ',' +convert(varchar,@curQty)+ 
										  ',' +convert(varchar,@curQtyOrder)+ ',' +convert(varchar,@curRetailPrice)+ 
										  ',' +convert(varchar,@curDiscPct)+ ',' +convert(varchar,@RetailPriceNet)+ 
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@TotPurchaseNetAmt)+ 
										  ',''' +@ABCClass+ ''',''' +@MovingCode+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curDocNo+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Insert data to table spTrnPOrderBalance
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPOrderBalance
										(CompanyCode, BranchCode, POSNo, SupplierCode, PartNo, SeqNo, PartNoOriginal, 
										 POSDate, OrderQty, OnOrder, Intransit, Received, Located, DiscPct, PurchasePrice, 
										 CostPrice, ABCClass, MovingCode, WRSNo, WRSDate, TypeOfGoods, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@POSNo+ ''',''' 
											  +@curBranchMD+ ''',''' +@curPartNo+ ''',' +convert(varchar,@SeqNo)+ ','''
											  +@curPartNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','
											  +convert(varchar,@curQty)+ ',0,0,' +convert(varchar,@curQty)+ ','
											  +convert(varchar,@curQty)+ ',' +convert(varchar,@curDiscPct)+ ','
											  +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+ ','''
											  +@ABCClass+ ''',''' +@MovingCode+ ''',''' +@WRSNo+ ''',''' 
											  +convert(varchar,@curDocDate,121)+ ''',''' +@curTypeOfGoods+ ''',''' 
											  +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
											  +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSORDDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSORDDtl
										(CompanyCode, BranchCode, DocNo, PartNo, WarehouseCode, PartNoOriginal, 
										 ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, QtyBO, 
										 QtyBOSupply, QtyBOCancel, QtyBill, RetailPriceInclTax, RetailPrice,
										 CostPrice, DiscPct, SalesAmt, DiscAmt, NetSalesAmt, PPNAmt, TotSalesAmt, 
										 MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
										 StockAllocatedBy, StockAllocatedDate, FirstDemandQty)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +@curPartNo+ ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',0,0,0,'''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ ''','''
										  +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ ''','''
										  +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ ''','''
										  +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ ''','''
										  +@MovingCode+ ''',''' +left(@ABCClass,1)+ ''',''' +left(@curProductType,3)+
										  ''',''' +@PartCategory+ ''',5,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +convert(varchar,@curQtyOrder)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table spTrnSOSupply 
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSOSupply
										(CompanyCode, BranchCode, DocNo, SupSeq, PartNo, PartNoOriginal, PTSeq, 
										 PickingSlipNo, ReferenceNo, ReferenceDate, WarehouseCode, LocationCode, 
										 QtySupply, QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, 
										 DiscPct, MovingCode, ABCCLass, ProductType, PartCategory, Status,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',0,''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +convert(varchar,@SeqNo)+ ''',''' +@PLNo+
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curCreatedDate,121)+
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +@MovingCode+ ''',''' +@ABCClass+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',2,''' +@curCreatedBy+ 
										  ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSORDHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSORDHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and DocNo=''' +@SONo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''SA-PJUAL'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table spHstDemandItem 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandItem as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, PartNo, DemandFreq, DemandQty, SalesFreq, SalesQty,
						                MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
			 --MD: Insert/Update data to table spHstDemandcust 
				set @sqlString = 'merge into ' +@DBNameMD+ '..spHstDemandcust as DMN using (values(''' 
							     +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +convert(varchar,year(@curDocDate))+ ''',''' 
								 +convert(varchar,month(@curDocDate))+ ''',''' +@curBranchCode+ ''',''' +@curPartNo+ ''',1,''' 
								 +convert(varchar,@curQtyOrder)+ ''',1,''' +convert(varchar,@curQty)+ ''',''' 
								 +@MovingCodeMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategoryMD+ ''',''' 
								 +@ABCClassMD+ ''',''POSTING'',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, 
								NewDemandQty, NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, 
								NewPartCategory, NewABCClass, NewLastUpdateBy, NewLastUpdateDate)
						on DMN.CompanyCode = SRC.NewCompany
					   and DMN.BranchCode  = SRC.NewBranch
					   and DMN.Year        = SRC.NewYear
					   and DMN.Month       = SRC.NewMonth
					   and DMN.CustomerCode= SRC.NewCustomer
					   and DMN.PartNo      = SRC.NewPart
					  when matched 
						   then update set DemandFreq     = DemandFreq + SRC.NewDemandFreq
						                 , DemandQty      = DemandQty  + SRC.NewDemandQty
										 , SalesFreq      = SalesFreq  + SRC.NewSalesFreq
										 , SalesQty       = SalesQty   + SRC.NewSalesQty
										 , LastUpdateBy   = ''POSTING''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, CustomerCode, PartNo, DemandFreq, DemandQty, SalesFreq, 
									    SalesQty, MovingCode, ProductType, PartCategory, ABCCLass, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewCustomer, NewPart, NewDemandFreq, NewDemandQty, 
								        NewSalesFreq, NewSalesQty, NewMovingCode, NewProductType, NewPartCategory, 
										NewABCClass, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert Data to table spTrnSPickingDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSPickingDtl
										(CompanyCode, BranchCode, PickingSlipNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyOrder, QtySupply, 
										 QtyPicked, QtyBill, RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, 
										 SalesAmt, DiscAmt, NetSalesAmt, TotSalesAmt, MovingCode, ABCClass, ProductType, 
										 PartCategory, ExPickingSlipNo, ExPickingSlipDate, isClosed, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@PLNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' +convert(varchar,@curQtyOrder)+ 
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curQty)+
										  ''',''' +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@TotSalesAmt)+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ 
										  ''',NULL,NULL,0,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSPickingHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSPickingHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSInvoiceDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSInvoiceDtl
										(CompanyCode, BranchCode, InvoiceNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, 
										 MovingCode, ABCClass, ExPickingListNo, ExPickingListDate, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',NULL,NULL,''' 
										          +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSInvoiceHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSInvoiceHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert Data to table spTrnSFPJDtl
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnSFPJDtl
										(CompanyCode, BranchCode, FPJNo, WarehouseCode, PartNo, PartNoOriginal, 
										 DocNo, DocDate, ReferenceNo, ReferenceDate, LocationCode, QtyBill, 
										 RetailPriceInclTax, RetailPrice, CostPrice, DiscPct, SalesAmt, DiscAmt, 
										 NetSalesAmt, PPNAmt, TotSalesAmt, ProductType, PartCategory, MovingCode, 
										 ABCClass, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +@curWarehouseCode+ ''',''' +@curPartNo+ ''',''' +@curPartNo+ 
										  ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+ 
										  ''',''' +@LocationCodeMD+ ''',''' ++convert(varchar,@curQty)+ 
										  ''',''' +convert(varchar,@curRetailPriceInclTaxMD)+
										  ''',''' +convert(varchar,@curRetailPriceMD)+ ''',''' +convert(varchar,@curCostPriceMD)+ 
										  ''',''' +convert(varchar,@curDiscPct)+ ''',''' +convert(varchar,@SalesAmt)+ 
										  ''',''' +convert(varchar,@DiscAmt)+ ''',''' +convert(varchar,@NetSales)+ 
										  ''',''' +convert(varchar,@PPNAmt)+ ''',''' +convert(varchar,@TotSalesAmt)+ 
										  ''',''' +@ProductTypeMD+ ''',''' +@PartCategory+ ''',''' +@MovingCodeMD+ 
										  ''',''' +@ABCClassMD+ ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Update data to table spTrnSFPJHdr
				set @sqlString = 'update ' +@DBNameMD+ '..spTrnSFPJHdr
								     set TotSalesQty = TotSalesQty + ' +convert(varchar,@CurQty)+ ', TotSalesAmt = TotSalesAmt + ' +convert(varchar,@SalesAmt)+ 
								      ', TotDiscAmt = TotDiscAmt + ' +convert(varchar,@DiscAmt)+ ', TotDppAmt = TotDppAmt + ' +convert(varchar,@NetSales)+ 
								      ', TotPpnAmt = TotPpnAmt + ' +convert(varchar,@PpnAmt)+ ', TotFinalSalesAmt = TotFinalSalesAmt + ' +convert(varchar,@TotSalesAmt)+ 
								 ' where CompanyCode=''' +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and PickingSlipNo=''' +@PLNo + ''''
					execute sp_executesql @sqlString 

			 -- MD: Insert data to table spTrnIMovement  (KEY: CompanyCode, BranchCode, DocNo, DocDate, CreatedDate => PartNo)
				set @sqlString = 'insert into ' +@DBNameMD+ '..spTrnIMovement
										(CompanyCode, BranchCode, DocNo, DocDate, CreatedDate, WarehouseCode, 
										 LocationCode, PartNo, SignCode, SubSignCode, Qty, Price, CostPrice, 
										 ABCClass, MovingCode, ProductType, PartCategory, CreatedBy)
								   values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
								          ''',''' +convert(varchar,@curDocDate,121)+ 
								          ''',''' +convert(varchar,getdate(),121)+ 
										  ''',''' +@curWarehouseCode+ ''',''' +@LocationCodeMD+ 
										  ''',''' +@curPartNo+ ''',''OUT'',''FAKTUR'','''
										  +convert(varchar,@curQty)+ ''',''' +convert(varchar,@curRetailPriceMD)+
										  ''',''' +convert(varchar,@curCostPriceMD)+ ''',''' +@ABCClassMD+
										  ''',''' +@MovingCodeMD+ ''',''' +@ProductTypeMD+
										  ''',''' +@PartCategoryMD+ ''',''POSTING'')'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table arInterface
				set @sqlString = 'merge into ' +@DBNameMD+ '..arInterface as ar using ( values(''' 
								 +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ ''',''' 
								 +convert(varchar,@curDocDate,121)+ ''',''300'',''' 
								 +convert(varchar,@TotSalesAmt)+ ''',0,''' 
								 +convert(varchar,@curBranchCode)+ ''',''' +@TopCodeMD+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',''INVOICE'',0,0,0,'''
								 +@SalesCodeMD+ ''',NULL,0,''POSTING'',''' 
								 +convert(varchar,@PostingDate,111)+ ''',''' 
								 +@AccNoArMD+ ''',NULL,''' +convert(varchar,@curDocDate,111)+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
								NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
								NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate)
						on ar.CompanyCode = SRC.NewCompany
					   and ar.BranchCode  = SRC.NewBranch
					   and ar.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NettAmt = NettAmt + NewNettAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, DocDate, ProfitCenterCode, NettAmt, ReceiveAmt, 
										 CustomerCode, TOPCode, DueDate, TypeTrans, BlockAmt, DebetAmt, CreditAmt, SalesCode, 
										 LeasingCode, StatusFlag, CreateBy, CreateDate, AccountNo, FakturPajakNo, FakturPajakDate)
								values (NewCompany, NewBranch, NewDocNo, NewDocDate, NewProfitCenterCode, NewNettAmt, 
										NewReceiveAmt, NewCustomerCode, NewTOPCode, NewDueDate, NewTypeTrans, NewBlockAmt, 
										NewDebetAmt, NewCreditAmt, NewSalesCode, NewLeasingCode, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewAccountNo, NewFakturPajakNo, NewFakturPajakDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert/Update data to table glInterface
				-- glInterface - AR
				set @SeqNoGLMD = 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoArMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@TotSalesAmt)+ 
											   ''',0,''AR'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AR''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - SALES
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoSalesMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@SalesAmt)+ 
											   ''',''SALES'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''SALES''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX OUT
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoTaxOutMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@PPNAmt)+ 
											   ''',''TAX OUT'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX OUT''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - DISC1
				if isnull(@DiscFlag,0) = 1
				begin
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoDisc1MD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@DiscAmt)+ 
											   ''',0,''DISC1'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''DISC1''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
				end

				-- glInterface - COGS
				set @SeqNoGLMD = @SeqNoGLMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoCogsMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',''' +convert(varchar,@CostAmt)+ 
											   ''',0,''COGS'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''COGS''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - INVENTORY
				set @SeqNoGLMD = @SeqNoGlMD + 1
				set @sqlString = 'merge into ' +@DBNameMD+ '..glInterface as gl using ( values(''' 
								+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@FPJNo+ 
										       ''',''' +convert(varchar,@SeqNoGlMD)+ 
											   ''',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''300'',''' +convert(varchar,@curDocDate,121)+ 
											   ''',''' +@AccNoInventoryMD+ ''',''SPAREPART'',''INVOICE'',''' 
											   +@FPJNo+ ''',0,''' +convert(varchar,@CostAmt)+ 
											   ''',''INVENTORY'',NULL,NULL,0,''POSTING'',''' 
											   +convert(varchar,@PostingDate,111)+ 
											   ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table spTrnPBinnDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPBinnDtl
										(CompanyCode, BranchCode, BinningNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@BINNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPBinnHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPBinnHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotBinningAmt = TotBinningAmt + ' +convert(varchar,@curQty*@RetailPriceNet)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Insert data to table spTrnPRcvDtl 
				set @sqlString = 'insert into ' +@DBName+ '..spTrnPRcvDtl
										(CompanyCode, BranchCode, WRSNo, PartNo, DocNo, DocDate, 
										 WarehouseCode, LocationCode, BoxNo, ReceivedQty, PurchasePrice, 
										 CostPrice, DiscPct, ABCCLass, MovingCode, ProductType, PartCategory,
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								   values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@WRSNo+ ''',''' 
											  +@curPartNo+ ''',''' +@POSNo+ ''',''' +convert(varchar,@curDocDate,121)+
										  ''',''00'',''' +@LocationCode+ ''',''00'',' +convert(varchar,@curQty)+
										  ',' +convert(varchar,@RetailPriceNet)+ ',' +convert(varchar,@RetailPriceNet)+
										  ',' +convert(varchar,@curDiscPct)+ ',''' +@ABCClass+ ''',''' +@MovingCode+ 
										  ''',''' +left(@curProductType,3)+ ''',''' +@PartCategory+ 
										  ''',''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
										  ''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString  

			 -- SD: Update data to table spTrnPRcvHdr
				set @sqlString = 'update ' +@DBName+ '..spTrnPRcvHdr
								     set TotItem = ' +convert(varchar,@SeqNo)+ ', TotWRSAmt = TotWRSAmt + ' +convert(varchar,@TotPurchaseNetAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and BinningNo=''' +@BINNo + ''''
					execute sp_executesql @sqlString 

			 -- SD: Update data to table spTrnPHPP
				set @sqlString = 'update ' +@DBName+ '..spTrnPHPP
								     set TotPurchAmt     = TotPurchAmt     + ' +convert(varchar,@TotPurchaseAmt)+ 
									  ', TotNetPurchAmt  = TotNetPurchAmt  + ' +convert(varchar,@TotPurchaseNetAmt)+ 
									  ', TotTaxAmt       = TotTaxAmt       + ' +convert(varchar,@TotTaxAmt)+ 
									  ', DiffNetPurchAmt = DiffNetPurchAmt   ' +
									  ', DiffTaxAmt      = DiffTaxAmt        ' +
									  ', TotHPPAmt       = TotHPPAmt       + ' +convert(varchar,@TotPurchaseAmt)+ 
								 ' where CompanyCode=''' +@curCompanyCode+ ''' and BranchCode=''' +@curBranchCode+ ''' and HPPNo=''' +@HPPNo + ''''
					execute sp_executesql @sqlString 

				set @NetSales    = @SalesAmt-@DiscAmt
				set @PPNAmt      = round((@NetSales*0.1),0)
				set @TotSalesAmt = @NetSales+@PPNAmt

			 -- SD: Insert/Update data to table apInterface
				set @sqlString = 'merge into ' +@DBName+ '..apInterface as ap using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +@curProfitCenterCode+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +@WRSNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''' +@curCompanyMD+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''' +@AccNoAP+ ''',''' 
								 +convert(varchar,@DueDateMD,111)+ ''',NULL,0,0,''POSTING'','''
								 +convert(varchar,@PostingDate,111)+ ''',0,''' +@SeriPajakNo+ ''','''
								 +convert(varchar,@curDocDate,121)+ ''',''' +@FPJNo+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
								NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
								NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
								NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo)
						on ap.CompanyCode = SRC.NewCompany
					   and ap.BranchCode  = SRC.NewBranch
					   and ap.DocNo       = SRC.NewDocNo
					  when matched 
						   then update set NetAmt = NetAmt + NewNetAmt
										 , PPNAmt = PPNAmt + NewPPNAmt
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, ProfitCenterCode, DocDate, Reference, 
										ReferenceDate, NetAmt, PPHAmt, SupplierCode, PPNAmt, PPnBM, AccountNo, 
										TermsDate, TermsName, TotalAmt, StatusFlag, CreateBy, CreateDate, 
										ReceiveAmt, FakturPajakNo, FakturPajakDate, RefNo)
								values (NewCompany, NewBranch, NewDocNo, NewProfitCenterCode, NewDocDate, NewReference, 
										NewReferenceDate, NewNetAmt, NewPPHAmt, NewSupplierCode, NewPPNAmt, NewPPnBM, 
										NewAccountNo, NewTermsDate, NewTermsName, NewTotalAmt, NewStatusFlag, NewCreateBy, 
										NewCreateDate, NewReceiveAmt, NewFakturPajakNo, NewFakturPajakDate, NewRefNo);'
					execute sp_executesql @sqlString

			 -- SD: Insert/Update data to table glInterface
				-- glInterface - INVENTORY
				set @SeqNoGL = 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoInventory+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotPurchaseNetAmt)+ ''',0,''INVENTORY'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''INVENTORY''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - TAX IN
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoTaxIn+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@TotTaxAmt)+ ''',0,''TAX IN'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''TAX IN''
					  when matched 
						   then update set AmountDb = AmountDb + convert(numeric(18,2),NewAmountDb)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

				-- glInterface - AP
				set @SeqNoGL = @SeqNoGl + 1
				set @sqlString = 'merge into ' +@DBName+ '..glInterface as gl using ( values(''' 
								 +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
								 +convert(varchar,@SeqNoGl)+ ''',''' +convert(varchar,@curDocDate,121)+ 
								 ''',''300'',''' +convert(varchar,@curDocDate,121)+ ''',''' +@AccNoAP+
								 ''',''SPAREPART'',''PURCHASE'',''' +@HPPNo+ ''',0,'''
								 +convert(varchar,@TotPurchaseAmt)+ ''',''AP'',''' +@APNo+ 
								 ''',NULL,0,''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
								 ''',''POSTING'',''' +@currentDate+ '''))
						as SRC (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, 
								NewAccDate, NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, 
								NewAmountDb, NewAmountCr, NewTypeTrans, NewBatchNo, NewBatchDate, 
								NewStatusFlag, NewCreateBy, NewCreateDate, NewLastUpdateBy, NewLastUpdateDate)
						on gl.CompanyCode      = SRC.NewCompany
					   and gl.BranchCode	   = SRC.NewBranch
					   and gl.DocNo			   = SRC.NewDocNo
					   and gl.ProfitCenterCode = SRC.NewProfitCenterCode
					   and gl.TypeTrans        = ''AP''
					  when matched 
						   then update set AmountCr = AmountCr + convert(numeric(18,2),NewAmountCr)
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, DocNo, SeqNo, DocDate, ProfitCenterCode, AccDate, AccountNo,
										 JournalCode, TypeJournal, ApplyTo, AmountDb, AmountCr, TypeTrans, BatchNo, BatchDate,
										 StatusFlag, CreateBy, CreateDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewDocNo, NewSeqNo, NewDocDate, NewProfitCenterCode, NewAccDate, 
								        NewAccountNo, NewJournalCode, NewTypeJournal, NewApplyTo, NewAmountDb, NewAmountCr, 
										NewTypeTrans, NewBatchNo, NewBatchDate, NewStatusFlag, NewCreateBy, NewCreateDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table glJournal 
			 -- SD: Insert data to table glJournalDtl
				--select * from spTrnPRcvHdr where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPRcvDtl where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from spTrnPHPP    where CompanyCode='6006400001' and BranchCode='6006400131' and WRSNo in ('WRL/14/102818','WRL/14/102819')
				--select * from apInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and Reference in ('WRL/14/102818','WRL/14/102819') --DocNo='HPP/14/102793'
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and DocNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournal    where CompanyCode='6006400001' and BranchCode='6006400131' and ProfitCenterCode='300' order by JournalNo desc --and ReffNo in ('HPP/14/102808','HPP/14/102815')
				--select * from glJournalDtl where CompanyCode='6006400001' and BranchCode='6006400131' and Description in ('HPP/14/102808','HPP/14/102815')
				--select * from glInterface  where CompanyCode='6006400001' and BranchCode='6006400131' and left(DocNo,3) in ('FPJ','HPP') order by BatchNo desc

			 -- Update Daily Posting Process Status
				update svSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and PartNo     =@curPartNo
					  and PartSeq    =@curPartSeq

			 -- Read next record
				fetch next from cursvSDMovement
					into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curPartNo, @curPartSeq, @curWarehouseCode, @curQtyOrder, 
						 @curQty, @curDiscPct, @curCostPrice, @curRetailPrice, @curTypeOfGoods, @curCompanyMD, @curBranchMD, @curWarehouseMD, 
						 @curRetailPriceInclTaxMD, @curRetailPriceMD, @curCostPriceMD, @curQtyFlag, @curProductType, @curProfitCenterCode, 
						 @curStatus, @curProcessStatus, @curProcessDate, @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table svSDMovement to table svHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[svHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[svHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[PartNo] [varchar](20) NOT NULL,
				[PartSeq] [int] NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[QtyOrder] [numeric](18, 2) NOT NULL,
				[Qty] [numeric](18, 2) NOT NULL,
				[DiscPct] [numeric](5, 2) NOT NULL,
				[CostPrice] [numeric](18, 2) NOT NULL,
				[RetailPrice] [numeric](18, 2) NOT NULL,
				[TypeOfGoods] [varchar](5) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[RetailPriceInclTaxMD] [numeric](18, 2) NOT NULL,
				[RetailPriceMD] [numeric](18, 2) NOT NULL,
				[CostPriceMD] [numeric](18, 2) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[ProductType] [varchar](15) NOT NULL,
				[ProfitCenterCode] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NULL,
				[LastUpdateDate] [datetime] NULL)

		insert into svHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, PartNo, PartSeq, WarehouseCode,
								     QtyOrder, Qty, DiscPct, CostPrice, RetailPrice, TypeOfGoods, CompanyMD, 
									 BranchMD, WarehouseMD, RetailPriceInclTaxMD, RetailPriceMD, CostPriceMD,
									 QtyFlag, ProductType, ProfitCenterCode, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  svSDMovement
							  where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		delete svSDMovement   where	 ProcessStatus = 1
							     or  (left(docno,3) in ('INC','INF','INI','INW','PLS','SOC','SPK','SSS','SSU') --'STR'
                                and  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111))

		close cursvSDMovement
		deallocate cursvSDMovement
END
GO
CREATE procedure [dbo].[uspfn_spGet4FakturRetur] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(15)
as
select a.FPJNo
    , a.FPJDate
    , a.CustomerCode
    , isnull((
			select CustomerName from gnMstCustomer
			 where CompanyCode = a.CompanyCode and CustomerCode = a.CustomerCode
			), '') as CustomerName  
 from spTrnSFpjHdr a, gnMstCoProfileSpare b
where 1 = 1
  and b.CompanyCode = a.CompanyCode
  and b.BranchCode = a.BranchCode
  and a.CompanyCode = @CompanyCode
  and a.BranchCode  = @BranchCode 
  and a.TypeOfGoods = @TypeOfGoods
GO
create procedure [dbo].[uspfn_SpcekprosesSuggor] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@MovingCode varchar(5),@SupplierCode  varchar(10),@TypeOfGoods  varchar(15))
 as
SELECT 
 a.PartNo
,ISNULL(a.DemandAverage, 0) AS DemandAverage
,ISNULL(c.LeadTime, 0) AS LeadTime
,ISNULL(c.OrderCycle, 0) AS OrderCycle
,ISNULL(c.SafetyStock, 0) AS SafetyStock
,CAST(0 AS int) AS No
,CAST(0 AS Numeric(4,0)) AS SeqNo
,CAST(ISNULL(a.OnHand, 0) - (
    ISNULL(a.AllocationSP, 0) 
    + ISNULL(a.AllocationSL, 0) 
    + ISNULL(a.AllocationSR, 0)
    + ISNULL(a.ReservedSP, 0) 
    + ISNULL(a.ReservedSL, 0) 
    + ISNULL(a.ReservedSR, 0)
) AS decimal(18,2)) AS AvailableQty
,CAST(0 AS Numeric(4,0)) AS SuggorQty
,CAST(0 AS Numeric(4,0)) AS SuggorCorrecQty
,CAST('' AS varchar(3)) AS ProductType
,a.PartCategory
,CAST(0 AS Numeric(18,0)) AS PurchasePrice
,CAST(0 AS Numeric(18,0)) AS CostPrice
,ISNULL(a.OrderPointQty, 0) AS OrderPoint
,ISNULL(a.OnHand, 0) AS OnHand
,ISNULL(a.OnOrder, 0) AS OnOrder
,ISNULL(a.InTransit, 0) AS InTransit
,ISNULL(a.AllocationSP, 0) AS AllocationSP
,ISNULL(a.AllocationSR, 0) AS AllocationSR
,ISNULL(a.AllocationSL, 0) AS AllocationSL
,ISNULL(a.BackOrderSP, 0) AS BackOrderSP
,ISNULL(a.BackOrderSR, 0) AS BackOrderSR
,ISNULL(a.BackOrderSL, 0) AS BackOrderSL
,ISNULL(a.ReservedSP, 0) AS ReservedSP
,ISNULL(a.ReservedSR, 0) AS ReservedSR
,ISNULL(a.ReservedSL, 0) AS ReservedSL
FROM spMstItems a with(nolock, nowait)
INNER JOIN spMstItemInfo b with(nolock, nowait) ON b.CompanyCode=a.CompanyCode AND b.PartNo=a.PartNo
INNER JOIN SpMstOrderParam c with(nolock, nowait) ON c.CompanyCode=a.CompanyCode AND c.BranchCode=a.BranchCode AND 
		   c.SupplierCode=b.SupplierCode AND c.MovingCode=a.MovingCode
WHERE a.CompanyCode=@CompanyCode 
AND a.BranchCode=@BranchCode
AND a.MovingCode=@MovingCode
AND b.SupplierCode=@SupplierCode
AND a.TypeOfGoods=@TypeOfGoods
AND a.Status = '1'
GO
CREATE Procedure [dbo].[Uspfn_SrvItemUpdateSSReturnNo] @CompanyCode varchar(15), @BranchCode varchar(15),
@ProductType varchar(2), @ReturnNo varchar(25), @PartNo varchar(25), @IsSaveProcess bit, @LastUpdateBy varchar(25)
as
SELECT
	a.CompanyCode
	, a.BranchCode
	, d.ProductType
	, d.ServiceNo
	, a.PartNo
	, (SELECT TOP 1 PartSeq FROM svTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
        AND ProductType = d.ProductType AND ServiceNo = d.ServiceNo AND PartNo = a.PartNo AND SupplySlipNo = 
        c.DocNo ORDER BY PartSeq DESC) PartSeq
	, a.ReturnNo SSReturnNo
	, b.ReturnDate SSReturnDate
INTO
	#SrvItem
FROM 
	spTrnSRturSSDtl a WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnSRturSSHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ReturnNo = b.ReturnNo
	LEFT JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.DocNo = c.DocNo
	LEFT JOIN svTrnService d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
		AND c.UsageDocNo = d.JobOrderNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND d.ProductType = @ProductType
	AND a.ReturnNo = @ReturnNo
	AND a.PartNo = @PartNo

UPDATE
	svTrnSrvItem
SET
	SSReturnNo = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnNo ELSE '' END 
    , SSReturnDate = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnDate ELSE '1900-01-01 00:00:00.000' END
	, LastupdateBy = @LastupdateBy
	, LastupdateDate = GETDATE()
FROM
	svTrnSrvItem a, #SrvItem b
WHERE
	a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq

DROP TABLE #SrvItem
GO
create procedure [dbo].[sp_SpMasteritemview] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as


 SELECT  
 a.PartNo 
,a.ProductType
,a.PartCategory
,u.LookupValueName  as CategoryName
,a.MovingCode
,a.OnHand - (a.AllocationSL + a.AllocationSP + a.AllocationSR + a.ReservedSL + a.ReservedSP + a.ReservedSR)  AS AvailableItems
,b.PartName
,b.IsGenuinePart
,b.OrderUnit
,b.SupplierCode
,c.SupplierName
,a.BornDate
,a.Status

,a.SalesUnit
,a.PurcDiscPct
,a.LastPurchaseDate
,b.DiscPct
,a.LastDemandDate
--,a.ProductTypedesc
,a.LastSalesDate
,a.ABCClass
,b.UOMCode
,a.DemandAverage

,a.Utility1
,a.Utility2
,a.Utility3
,a.Utility4


--ItemInventory
,a.OnOrder
,a.InTransit
,a.BorrowQty
,a.BorrowedQty
,a.BackOrderSR
,a.ReservedSR
,a.BackOrderSP
,a.ReservedSP
,a.BackOrderSL
,a.ReservedSL

--StockAlokasi
,d.WarehouseCode
--,a.WarehouseName
,d.LocationCode
,d.OnHand
,d.AllocationSP
,d.AllocationSR
,d.AllocationSL


--HPemPenj
--HargaSupplier
--PotonganBeli
--PotonganBelipercen
--HargaBeli
--HargaJual
--HargaJualPPn
--AvarageCost

--OrderParam
,a.OrderPointQty
,a.OrderCycle
,a.SafetyStock
,a.LeadTime





,a.CompanyCode 
,d.BranchCode 
FROM SpMstItems a
INNER JOIN SpMstItemInfo b   ON a.CompanyCode  = b.CompanyCode                          
                         AND a.PartNo = b.PartNo
LEFT JOIN GnMstSupplier c ON c.CompanyCode  = a.CompanyCode 
                         AND c.SupplierCode = b.SupplierCode
INNER JOIN spMstItemLoc d ON a.CompanyCode  = d.CompanyCode   
                         AND a.BranchCode = d.BranchCode                       
                         AND a.PartNo = d.PartNo
						 inner join  gnMstLookUpDtl u on (a.PartCategory =u.ParaValue)
WHERE  u.CodeID='PRCT'
and a.Status > 0
 
and a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode
GO
create procedure [dbo].[uspfn_QueryFPJGenerated]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@ProfitCenter varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @ProfitCenter  = '300'
--set @IsFPJCentral  = '1'

as
begin

select 
    y.No,y.chkSelect,y.CompanyCode,y.BranchCode,y.ProfitCenter,y.FPJGovNo
    ,y.FPJGovDate,y.DocNo,convert(datetime,y.DocDate) DocDate
from(
    select 
        row_number() over(order by DocDate, BranchCode,ProfitCenter asc) as No
        , Convert(bit, 0) chkSelect, x.CompanyCode, x.BranchCode
        , a.LookUpValueName ProfitCenter, x.FPJGovNo, x.FPJGovDate
        , x.DocNo, x.DocDate
    from (
	    SELECT	CompanyCode, BranchCode,'300' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	SpTrnSFPJHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 
                AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'200' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,FPJNo as DocNo,convert(varchar,FPJDate,112) AS DocDate
	    FROM	SvTrnFakturPajak
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'100' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	OmFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        ) 
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'000' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	ArFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
                AND DPPAMt > 0
    ) x 
    left join gnMstLookUpDtl a on a.CompanyCode= x.CompanyCode and a.CodeID='PFCN' and a.LookUpValue= x.ProfitCenter
    where x.ProfitCenter like ''+@ProfitCenter+''
) y
end
GO
CREATE procedure [dbo].[sp_spmasterpart] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@TypeOfGoods varchar(10),@ProductType varchar(10))
as
            SELECT TOP 1500
             ItemPrice.PartNo
            ,ItemInfo.PartName,ItemInfo.SupplierCode,ItemInfo.ProductType,ItemPrice.LastPurchaseUpdate,ItemPrice.LastRetailPriceUpdate
            ,ItemPrice.PurchasePrice
            ,ItemPrice.RetailPriceInclTax
            ,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
			,ItemPrice.OldPurchasePrice
			,ItemPrice.OldCostPrice
			,ItemPrice.OldRetailPrice
			,OldRetailPrice
            ,Items.PartCategory
            ,(SELECT LookupValueName 
                FROM gnMstLookupDtl 
                WHERE CodeID = 'PRCT' AND 
                LookUpValue = Items.PartCategory AND 
                CompanyCode ='6004001') CategoryName
            FROM spMstItemPrice ItemPrice 
            INNER JOIN spMstItems Items 
                ON ItemPrice.CompanyCode=Items.CompanyCode 
                AND ItemPrice.BranchCode=Items.BranchCode
                AND ItemPrice.PartNo=Items.PartNo
            INNER JOIN spMstItemInfo ItemInfo 
                ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
                AND ItemPrice.PartNo = ItemInfo.PartNo
            WHERE ItemPrice.CompanyCode=@CompanyCode
                AND ItemPrice.BranchCode= @BranchCode
                AND Items.TypeOfGoods=@TypeOfGoods
                AND Items.ProductType= @ProductType
GO
CREATE procedure [dbo].[uspfn_GetSpTrnSFPJDtl] @CompanyCode varchar(15), @BranchCode varchar(15),@FPJNo varchar(15)  
as  
select a.PartNo, a.DocNo, a.QtyBill, a.SalesAmt, a.DiscPct, a.WarehouseCode, b.PartName, a.PartNoOriginal, a.DocNo from  spTrnSFPJDtl a  
left JOIN SpMstItemInfo b  
ON a.CompanyCode = b.CompanyCode and a.PartNo = b.PartNo  
where a.CompanyCode = @CompanyCode  
and a.BranchCode = @BranchCode  
and a.FPJNo = @FPJNo
GO
create Procedure [dbo].[uspfn_GetSelectCostPrice] @CompanyCode varchar(15), @BranchCode varchar(15), @PartNo varchar(25), 
@TypeOfGoods varchar(3), @ProductType varchar(3)
as
SELECT A.CompanyCode, A.BranchCode, A.PartNo,
       C.SupplierCode, A.OnHand, B.CostPrice
  FROM spMstItems A
       INNER JOIN spMstItemPrice B 
            ON (A.CompanyCode = B.CompanyCode) AND (A.BranchCode = B.BranchCode) AND (A.PartNo = B.PartNo)
        INNER JOIN spMstItemInfo C
            ON C.CompanyCode = A.CompanyCode AND C.PartNo = A.PartNo
WHERE A.CompanyCode = @CompanyCode
AND A.BranchCode = @BranchCode
AND A.TypeOfGoods = @TypeOfGoods
AND A.ProductType = @ProductType
AND A.PartNo = @PartNo
 ORDER BY
   A.CompanyCode ASC,
   A.BranchCode ASC,
   A.PartNo ASC
GO
CREATE PROCEDURE [dbo].[uspfn_spGetDcsUploadFileAllStatus] @ProductType varchar(2), @ProductType1 varchar(2),
   @DataID varchar(6), @DateFrom datetime, @DateTo datetime 
   as
   select ID, DataID, CustomerCode, ProductType, Contents
     , CASE WHEN Status = 'A' THEN 'BARU' ELSE CASE WHEN Status = 'X' THEN 'GAGAL' ELSE CASE WHEN Status = 'P' THEN 'BERHASIL' END END END Status
     , CreatedDate, UpdatedDate, Header
  from gnDcsUploadFile
 where 1 = 1
   and DataID = @DataID
   and (convert(varchar, CreatedDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112)) 
   and ProductType in (@ProductType,@ProductType1)
GO
-- =============================================
-- Author:		<DL>
-- Create date: <March 5 2014>
-- Description:	<Untuk Menampilkan Claim App>
-- =============================================

-- uspfn_SvGetClaimApp '6006406','6006401','4W','CLA/13/000060'
CREATE procedure [dbo].[uspfn_SvGetClaimApp]
--declare 
	 @CompanyCode  varchar(20),
	 @BranchCode   varchar(20),
	 @ProductType  varchar(20),
	 @GenerateNo   varchar(20)
--
as


   select 
	(row_number() over (order by claimApp.GenerateSeq)) as No
	,claimApp.CategoryCode 
	,(select Description from svMstRefferenceService WHERE RefferenceType='CLAIMCAT' and RefferenceCode = claimApp.CategoryCode) as CategoryName
	,claimApp.IssueNo 
	,claimApp.IssueDate 
	,claimApp.ServiceBookNo  
	,claimApp.ChassisCode
	,claimApp.ChassisNo
	,claimApp.EngineCode
	,claimApp.EngineNo
	,claimApp.IsCBU
	,claimApp.BasicModel
	,claimApp.RegisteredDate
	,claimApp.RepairedDate
	,claimApp.Odometer
	,claimApp.ComplainCode
    ,(select Description from svMstRefferenceService WHERE RefferenceType='COMPLNCD' and RefferenceCode = claimApp.ComplainCode) as ComplainDesc
	,claimApp.DefectCode
    ,(select Description from svMstRefferenceService WHERE RefferenceType='DEFECTCD' and RefferenceCode = claimApp.DefectCode) as DefectDesc
	,claimApp.SubletHour
	,substring(claimApp.OperationNo, 1, 6) as BasicCode
	,Description
	,substring(claimApp.OperationNo, 7, 9) as VarCom
	,claimApp.OperationNo
	,claimApp.OperationHour as Hours
    ,claimApp.GenerateSeq
    ,claimApp.TroubleDescription
    ,claimApp.ProblemExplanation
from svTrnClaimApplication claimApp
JOIN SvBasicCodeView on claimApp.BasicModel = SvBasicCodeView.BasicModel and claimApp.OperationNo = SvBasicCodeView.OperationNo and VarCom = VarCom
where 
    claimApp.CompanyCode = @CompanyCode and
    claimApp.BranchCode = @BranchCode and
    claimApp.ProductType = @ProductType and
    claimApp.GenerateNo = @GenerateNo
order by GenerateSeq Asc
GO
create procedure [dbo].[uspfn_sp_partinquiry_demandandsales]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@PartNo varchar(32)
AS
SELECT 
	a.Year
	, Month = 
	case a.Month 
	  when 1 then 'Jan'
	  when 2 then 'Feb'
	  when 3 then 'Mar'
	  when 4 then 'Apr'
	  when 5 then 'Mei'
	  when 6 then 'Jun'
	  when 7 then 'Jul'
	  when 8 then 'Ags'
	  when 9 then 'Sep'
	  when 10 then 'Okt'
	  when 11 then 'Nov'
	  else 'Des'
	end
	,a.DemandFreq
	,a.DemandQty
	,a.SalesFreq
	,a.SalesQty
FROM spHstDemandItem a
WHERE a.CompanyCode = @CompanyCode
  AND a.BranchCode = @BranchCode
  AND a.PartNo = @PartNo
Order By a.Year DESC, a.Month DESC
GO
CREATE procedure [dbo].[sp_SpMstItemcondition] (  @CompanyCode varchar(10) )  
	 as
                SELECT 
                    a.PartNo, a.NewPartNo, a.InterchangeCode, a.ProductType, a.PartCategory, a.UnitConversion,EndMark , a.CompanyCode
                FROM 
                    spMstItemMod a 
                WHERE a.CompanyCode=@CompanyCode
                    ORDER BY a.PartNo, a.NewPartNo
GO
create procedure [dbo].[sfm_UpdateEmployeeData] (
	@EmployeeID varchar(25)
)
as
begin
	declare @LatestDate datetime;
	declare @CreatedDate datetime;
	declare @UpdatedDate datetime;
	select @LatestDate = getdate();
	select @CreatedDate = getdate();
	select @UpdatedDate = getdate();
	declare @TempEmployeeData table(
		CompanyCode varchar(15),
		BranchCode varchar(15),
		EmployeeID varchar(15),
		SalesID varchar(15),
		OrgCode varchar(15),
		GradeCode varchar(15),
		PersonnelStatus varchar(5),
		JoinDate datetime,
		ResignDate datetime
	);

	select @CreatedDate = (select 
		max(b.CreatedDate)
	from 
		gnMstEmployee a
	inner JOIN
		gnMstEmployeeData b
	ON
		a.CompanyCode = b.CompanyCode	
		and
		a.BranchCode = b.BranchCode	
		and
		a.EmployeeID = b.EmployeeID
	where
		a.EmployeeID = @EmployeeID
	group BY a.EmployeeID);

	select @UpdatedDate = (select 
		max(b.UpdatedDate)
	from 
		gnMstEmployee a
	inner JOIN
		gnMstEmployeeData b
	ON
		a.CompanyCode = b.CompanyCode	
		and
		a.BranchCode = b.BranchCode	
		and
		a.EmployeeID = b.EmployeeID
	where
		a.EmployeeID = @EmployeeID
	group BY a.EmployeeID);

	select @LatestDate = (
		select 
			max(val)
		from	
			(
				SELECT @CreatedDate as val 
				UNION
				select @UpdatedDate as val
			) as Temp
	);

	insert INTO @TempEmployeeData
	select top 1
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		b.SalesID,
		b.OrgCode,
		b.GradeCode,
		a.PersonnelStatus,
		b.EmpJoinDate,
		b.EmpResignDate
	from
		gnMstEmployee a
	inner JOIN
		gnMstEmployeeData b
	ON
		a.CompanyCode = b.CompanyCode
		and
		a.BranchCode = b.BranchCode
		and
		a.EmployeeID = b.EmployeeID
		and
		a.EmployeeID = @EmployeeID
		and 
		(
			b.CreatedDate = @LatestDate
			or
			b.UpdatedDate = @LatestDate
		);
	
--	select @EmployeeID as EmployeeID, @CreatedDate as CreatedDate, @UpdatedDate as UpdatedDate, @LatestDate as LatestDate;
		
	update
		SyncEmployeeData
	SET
		BranchCode = (SELECT x.BranchCode from @TempEmployeeData x),
		DeptCode = (SELECT x.OrgCode from @TempEmployeeData x),
		SalesID = (SELECT x.SalesID from @TempEmployeeData x),
		Grade = (SELECT x.GradeCode from @TempEmployeeData x),
		PersonnelStatus = (SELECT x.PersonnelStatus from @TempEmployeeData x),
		JoinDate = (SELECT x.JoinDate from @TempEmployeeData x),
		ResignDate = (SELECT x.ResignDate from @TempEmployeeData x),
		IsTransfered = 0
	where
		CompanyCode = (SELECT x.CompanyCode from @TempEmployeeData x)
		and
		EmployeeID = (SELECT x.EmployeeID from @TempEmployeeData x);
end
GO
create procedure [dbo].[sp_spMstCompanyAccount]  (  @CompanyCode varchar(10)  )
as
select 
CompanyCode,
CompanyCodeTo,
CompanyCodeToDesc,
BranchCodeTo,
BranchCodeToDesc,
WarehouseCodeTo,
WarehouseCodeToDesc,
UrlAddress,
isActive
from spMstCompanyAccount
where CompanyCode= @CompanyCode
GO
CREATE procedure [dbo].[uspfn_CheckIsOverdueOrder] @CompanyCode nvarchar(15),
@BranchCode nvarchar(15),@CustomerCode nvarchar(15),
@DueDate datetime,@ProfitCenterCode nvarchar(3)
as
SELECT top 1 * 
                FROM arinterface a with(nolock, nowait)
                INNER JOIN spTrnSORDHdr b with(nolock, nowait) on a.CustomerCode = b.CustomerCode
                                        AND a.CompanyCode = b.CompanyCode
                                        AND a.BranchCode = b.BranchCode
		        WHERE b.CompanyCode = @CompanyCode
                AND b.BranchCode = @BranchCode	
                AND b.CustomerCode = @CustomerCode
                AND a.ProfitCenterCode = @ProfitCenterCode
                AND Convert(varchar, a.DueDate,112) <= convert(varchar,@DueDate,112)
                AND NettAmt > (ReceiveAmt+CreditAmt-DebetAmt)
GO
create procedure [dbo].[sp_spMstAccountView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as

 SELECT a.TypeOfGoods, 
                           b.LookUpValueName as NameOfGoods,  
                           a.SalesAccNo,  a.COGSAccNo,  a.InventoryAccNo,  a.DiscAccNo,  a.ReturnAccNo, 
                            a.ReturnPybAccNo,  a.OtherIncomeAccNo,  a.OtherReceivableAccNo,  a.InTransitAccNo, a.CompanyCode, a.BranchCode
                    FROM   spMstAccount a 
					inner join gnMstLookUpDtl b on b.LookUpValue=a.TypeOfGoods
                    WHERE  B.CodeID='TPGO' 

and a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode
GO
create procedure [dbo].[uspfn_spGetDcsUploadFile] @ProductType varchar(2), @ProductType1 varchar(2),
   @DataID varchar(6), @DateFrom datetime, @DateTo datetime 
   as
   select ID, DataID, CustomerCode, ProductType, Contents
     , CASE WHEN Status = 'A' THEN 'BARU' ELSE CASE WHEN Status = 'X' THEN 'GAGAL' ELSE CASE WHEN Status = 'P' THEN 'BERHASIL' END END END Status
     , CreatedDate, UpdatedDate, Header
  from gnDcsUploadFile
 where 1 = 1
   and DataID = @DataID
   and (convert(varchar, CreatedDate, 112) between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112)) 
   and ProductType in (@ProductType,@ProductType1)
   and Status = 'A'
GO
-- POSTING TRANSACTION MULTI COMPANY - MAIN PROCESS
-- ---------------------------------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- ---------------------------------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST , UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -------------------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanyMainProcess] '6006400001','2014/11/14','HTO'
-- update sysParaMeter set ParamValue='2014/11/01' where ParamId='POSTING_STATUS'
-- -------------------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompanyMainProcess]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@UserId			varchar(20)
AS	

BEGIN TRANSACTION
BEGIN TRY

BEGIN
 -- Check Posting Multi Company Date in table sysParameter
	declare @PostDate	varchar(10)
	declare @PostStatus	integer
	set @PostDate   = (select ParamValue from sysParaMeter where ParamId='POSTING_STATUS')
	set @PostStatus = (case when @PostDate is null                             then 0
	                        when @PostDate < convert(varchar,@PostingDate,111) then 1
					        else                                                    2
					   end)
	if @PostStatus = 0
		insert sysParaMeter values('POSTING_STATUS',convert(varchar,@PostingDate,111),'Posting Multi Company')
	else
		if @PostStatus = 1
			update sysParaMeter set ParamValue=convert(varchar,@PostingDate,111) where ParamId='POSTING_STATUS'
		else
			begin
				select '0' [STATUS], 'Daily Posting tertanggal ' + convert(varchar,@PostingDate,106) + ' sudah pernah dilakukan sebelumnya....' [INFO]
				return
			end

	declare @Status	varchar(1)

	execute [usprpt_PostingMultiCompanySales] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales fail...' [INFO]
			return
		end

	execute [usprpt_PostingMultiCompanySalesReturn] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting Sales Return fail...' [INFO]
			return
		end


	execute [usprpt_PostingMultiCompanySparepartService] @CompanyCode, @PostingDate, @Status OUTPUT
	if @Status = '1'
		begin
			select '0' [STATUS], 'Daily Posting SparePart & Service fail...' [INFO]
			return
		end
END		

END TRY

BEGIN CATCH
    --select ERROR_NUMBER()    AS ErrorNumber,    ERROR_SEVERITY() AS ErrorSeverity, ERROR_STATE()   AS ErrorState,
		  -- ERROR_PROCEDURE() AS ErrorProcedure, ERROR_LINE()     AS ErrorLine    , ERROR_MESSAGE() AS ErrorMessage
	if @@TRANCOUNT > 0
		begin
			select '0' [STATUS], 'Posting gagal !!!' [INFO]
			rollback transaction
			return
		end
END CATCH

IF @@TRANCOUNT > 0
	begin
		select '1' [STATUS], 'Posting berhasil !!!' [INFO]
		--rollback transaction
		commit transaction
	end
GO
create procedure [dbo].[uspfn_sp_partinquiry_demandandsaleshq]
	@CompanyCode varchar(15),
	@PartNo varchar(32)
AS
SELECT a.BranchCode,
 a.Year
,Month = 
case a.Month 
  when 1 then 'Jan'
  when 2 then 'Feb'
  when 3 then 'Mar'
  when 4 then 'Apr'
  when 5 then 'Mei'
  when 6 then 'Jun'
  when 7 then 'Jul'
  when 8 then 'Ags'
  when 9 then 'Sep'
  when 10 then 'Okt'
  when 11 then 'Nov'
  else 'Des'
end
,a.DemandFreq
,a.DemandQty
,a.SalesFreq
,a.SalesQty
FROM spHstDemandItem a
WHERE a.CompanyCode = @CompanyCode  AND a.PartNo = @PartNo
GO
create procedure [dbo].[uspfn_CekINVBasedSONo]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SONumber varchar(50)
as

begin
	  select count(*) as Jumlah 
		from omTrSalesBPK a
	   inner join omTrSalesBPKDetail b
		  on a.CompanyCode = b.CompanyCode
		 and a.BranchCode = b.BranchCode
		 and a.BPKNo = b.BPKNo
	   where a.CompanyCode = @CompanyCode
	     and a.BranchCode  = @BranchCode
		 and a.SONo = @SONumber
		 and b.StatusInvoice = 1
		  and a.Status <> 3;
end
GO
CREATE procedure [dbo].[uspfn_spTrnPPOSHdrView] 
@CompanyCode varchar(10),@BranchCode varchar(10),
@TypeOfGoods varchar(10),
 @Status  int
as               
				
				SELECT a.POSNo, a.PosDate , a.Status ,a.SupplierCode ,b.SupplierName
                FROM spTrnPPOSHdr a
                INNER JOIN gnMstSupplier b ON b.SupplierCode = a.SupplierCode and b.CompanyCode = a.CompanyCode
                WHERE a.CompanyCode=@CompanyCode 
                AND a.BranchCode=@BranchCode
                AND a.TypeOfGoods=@TypeOfGoods
GO
create procedure [dbo].[uspfn_UpdateIDChangedHistory]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeIDChangedHistory a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeIDChangedHistory (
		   CompanyCode
		 , OldEmployeeID
		 , NewEmployeeID
		 , CreatedBy
		 , CreatedDate
		 )
	select CompanyCode = @CompanyCode_B
	     , a.OldEmployeeID
	     , a.NewEmployeeID
	     , a.CreatedBy
	     , a.CreatedDate
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
CREATE procedure [dbo].[sp_spMstSalesTargetDtlSum]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@Year Varchar(4),@Month varchar(2))
as
select 

sum(a.QtyTarget) as sumQtyTarget,
sum(a.AmountTarget) as sumAmountTarget,
sum(a.TotalJaringan) as sumTotalJaringan
from spMstSalesTargetDtl a
 WHERE a.CompanyCode=@CompanyCode and  a.BranchCode=@BranchCode
and a.[Year]=@Year and a.[Month]=@Month
GO
create procedure [dbo].[uspfn_LookupCustomer]
	@CompanyCode varchar(13),
	@BranchCode varchar(13)
as
begin
	SELECT distinct 
	       a.CustomerCode
		 , a.CustomerName
	     , isnull(a.Address1,'') + ' ' + isnull(a.Address2,'') + ' ' + isnull(a.Address3,'') +' ' + isnull(a.Address4,'') as Address
		 , a.Address1
		 , a.Address2
		 , a.Address3
		 , a.Address4
		 , '' as LookupValue
		 , '' as ProfitCenter
	  FROM gnMstCustomer a with(nolock, nowait)
	  left JOIN gnMstCustomerProfitCenter b with(nolock, nowait)
		ON b.CompanyCode = a.CompanyCode
	   AND b.CustomerCode = a.CustomerCode
	   AND b.BranchCode = @BranchCode
	   AND b.isBlackList = 0
	  left JOIN gnMstLookUpDtl c
		ON c.CompanyCode = a.CompanyCode
	   AND c.CodeID = 'PFCN'
	   AND c.LookupValue = b.ProfitCenterCode
	 WHERE 1 = 1
	   AND a.CompanyCode = @CompanyCode
end
GO
CREATE procedure [dbo].[sp_spMstSalesTargetDtl]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@Year Varchar(4),@Month varchar(2))
as
select 
a.CompanyCode,
a.BranchCode,
 a.[Year],
a.[Month],
a.CategoryCode,
   b.LookUpValueName  CategoryName,
a.QtyTarget,
a.AmountTarget,
a.TotalJaringan
from spMstSalesTargetDtl a
inner join gnMstLookUpDtl b on 
a.CompanyCode=b.CompanyCode 
and a.CategoryCode=b.LookUpValue
WHERE  b.CodeID='CSCT' and a.CompanyCode=@CompanyCode and  a.BranchCode=@BranchCode
and a.[Year]=@Year and a.[Month]=@Month
GO
CREATE procedure [dbo].[sp_spMstSalesTargetDetil] (
	@CompanyCode varchar(10),
	@BranchCode varchar(10)
)
as
select 
	a.CompanyCode,
	a.BranchCode,
	a.[Year],
	a.[Month],
	a.CategoryCode,
	(select LookUpValueName from gnMstLookUpDtl where CodeID='CSCT' and CompanyCode= a.CompanyCode and LookUpValue = a.CategoryCode) CategoryName,
	a.QtyTarget,
	a.AmountTarget,
	a.TotalJaringan
from spMstSalesTargetDtl a
WHERE a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode
GO
CREATE procedure [dbo].[uspfn_GetLookupLMP4Srv]   
@CompanyCode varchar(15), @BranchCode varchar(15),  
@SalesType varchar(5), @TypeOfGoods varchar(15), @ProductType varchar(15)  
as  
SELECT * FROM   
(  
SELECT  
 PickingSlipNo,   
 PickingSlipDate,  
 BPSFNo,   
 BPSFDate,  
 (  
   SELECT TOP 1 PRODUCTTYPE FROM spTrnSBPSFDtl  
  WHERE spTrnSBPSFHdr.CompanyCode = spTrnSBPSFDtl.CompanyCode  
  AND spTrnSBPSFHdr.BranchCode = spTrnSBPSFDtl.BranchCode  
  AND spTrnSBPSFHdr.BPSFNo = spTrnSBPSFDtl.BPSFNo  
 ) AS ProductType,
 spTrnSBPSFHdr.CustomerCode,
 spTrnSBPSFHdr.CustomerCodeShip,
 spTrnSBPSFHdr.CustomerCodeBill as CustomerCodeTagih,
 b.CustomerName,
 b.Address1,
 b.Address2,
 b.Address3,
 b.Address4,
 b.CustomerName CustomerNameTagih,
 b.Address1 Address1Tagih,
 b.Address2 Address2Tagih,
 b.Address3 Address3Tagih,
 b.Address4 Address4Tagih,
 c.LookUpValueName TransType  
FROM spTrnSBPSFHdr  
join gnMstCustomer b
ON spTrnSBPSFHdr.CompanyCode = b.CompanyCode
AND spTrnSBPSFHdr.CustomerCode = b.CustomerCode
join gnMstLookupDtl c on
spTrnSBPSFHdr.CompanyCode = c.CompanyCode
and spTrnSBPSFHdr.TransType= c.LookupValue 
AND c.CodeID = 'TTSR'
WHERE spTrnSBPSFHdr.CompanyCode = @CompanyCode  
AND spTrnSBPSFHdr.BranchCode    = @BranchCode  
AND spTrnSBPSFHdr.SalesType     = @SalesType  
AND spTrnSBPSFHdr.TypeOfGoods   = @TypeOfGoods  
AND (spTrnSBPSFHdr.Status = '1' OR spTrnSBPSFHdr.Status = '0')  
AND (spTrnSBPSFHdr.PickingSlipNo NOT IN (SELECT PickingSlipNo FROM spTrnSLmpHdr where CompanyCode = @CompanyCode AND BranchCode = @BranchCode))  
) A  
WHERE A.ProductType = @ProductType
GO
CREATE procedure [dbo].[uspfn_spProcessSuggor] 
(  
		@CompanyCode varchar(10),
		@BranchCode varchar(10),
		@MovingCode varchar(5),
		@SupplierCode  varchar(10),
		@TypeOfGoods  varchar(15)
)
 as
SELECT
 a.PartNo
,ISNULL(a.DemandAverage, 0) AS DemandAverage
,ISNULL(c.LeadTime, 0) AS LeadTime
,ISNULL(c.OrderCycle, 0) AS OrderCycle
,ISNULL(c.SafetyStock, 0) AS SafetyStock
,CAST(0 AS int) AS No
,CAST(0 AS Numeric(4,0)) AS SeqNo
,CAST(ISNULL(a.OnHand, 0) - (
    ISNULL(a.AllocationSP, 0) 
    + ISNULL(a.AllocationSL, 0) 
    + ISNULL(a.AllocationSR, 0)
    + ISNULL(a.ReservedSP, 0) 
    + ISNULL(a.ReservedSL, 0) 
    + ISNULL(a.ReservedSR, 0)
) AS decimal(18,2)) AS AvailableQty
,CAST(0 AS Numeric(4,0)) AS SuggorQty
,CAST(0 AS Numeric(4,0)) AS SuggorCorrecQty
,CAST('' AS varchar(3)) AS ProductType
,a.PartCategory
,CAST(0 AS Numeric(18,0)) AS PurchasePrice
,CAST(0 AS Numeric(18,0)) AS CostPrice
,ISNULL(a.OrderPointQty, 0) AS OrderPoint
,ISNULL(a.OnHand, 0) AS OnHand
,ISNULL(a.OnOrder, 0) AS OnOrder
,ISNULL(a.InTransit, 0) AS InTransit
,ISNULL(a.AllocationSP, 0) AS AllocationSP
,ISNULL(a.AllocationSR, 0) AS AllocationSR
,ISNULL(a.AllocationSL, 0) AS AllocationSL
,ISNULL(a.BackOrderSP, 0) AS BackOrderSP
,ISNULL(a.BackOrderSR, 0) AS BackOrderSR
,ISNULL(a.BackOrderSL, 0) AS BackOrderSL
,ISNULL(a.ReservedSP, 0) AS ReservedSP
,ISNULL(a.ReservedSR, 0) AS ReservedSR
,ISNULL(a.ReservedSL, 0) AS ReservedSL
FROM spMstItems a with(nolock, nowait)
INNER JOIN spMstItemInfo b with(nolock, nowait) ON b.CompanyCode=a.CompanyCode AND b.PartNo=a.PartNo
INNER JOIN SpMstOrderParam c with(nolock, nowait) ON c.CompanyCode=a.CompanyCode AND c.BranchCode=a.BranchCode AND 
		   c.SupplierCode=b.SupplierCode AND c.MovingCode=a.MovingCode
WHERE a.CompanyCode=@CompanyCode 
AND a.BranchCode=@BranchCode
AND a.MovingCode=@MovingCode
AND b.SupplierCode=@SupplierCode
AND a.TypeOfGoods=@TypeOfGoods
AND a.Status = '1'
GO
create procedure [dbo].[uspfn_UpdateExperience]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeExperience a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeExperience (
		   CompanyCode
		 , EmployeeID
		 , ExpSeq
		 , NameOfCompany
		 , JoinDate
		 , ResignDate
		 , ReasonOfResign
		 , LeaderName
		 , LeaderPhone
		 , LeaderHP
		 , CreatedBy
		 , CreatedDate
		 , UpdateBy
		 , UpdateDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
	     , a.ExpSeq
	     , a.NameOfCompany
	     , a.JoinDate
	     , a.ResignDate
	     , a.ReasonOfResign
	     , a.LeaderName
	     , a.LeaderPhone
	     , a.LeaderHP
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdateBy
	     , a.UpdateDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
CREATE PROCEDURE [dbo].[uspfn_gnCheckPostingStatus]
AS
BEGIN
	declare @checklasttrans datetime, @retValue int, @tax int,
			@procStatus int,@retValue2 int, @prmValue varchar(20),
			@sql nvarchar(2000)	

	select @prmValue=ParamValue from sysParameter where paramid='SPSRV'
	
	declare @dbmd varchar(20)
	select top 1 @dbmd=dbmd from gnMstCompanyMapping

	set @tax = 1

	IF @prmValue='ON'
	BEGIN

		set @sql = 'SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM ' + @dbmd + '..[svSDMovement] with(nolock,nowait) order by docdate desc'

		exec sp_Executesql @sql, N'@checklasttrans datetime output, @procStatus int output', @checklasttrans output, @procStatus output
	
		IF (@checklasttrans IS NULL)
			set @retValue=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				select @retValue=0, @tax = 0
			ELSE
				set @retValue=1
		END
	END
	ELSE
		set @retValue=2

	SELECT @checklasttrans = NULL, @procStatus = 0

	select @prmValue=ParamValue from sysParameter where paramid='SLS'
	IF @prmValue='ON'
	BEGIN

		set @sql = 'SELECT top 1 @checklasttrans=[DocDate], @procStatus = ProcessStatus 
		FROM  ' + @dbmd + '..[omSDMovement] with(nolock,nowait) order by docdate desc'

		exec sp_Executesql @sql, N'@checklasttrans datetime output, @procStatus int output', @checklasttrans output, @procStatus output

		IF (@checklasttrans IS NULL)
			set @retValue2=1
		ELSE
		BEGIN
			IF  (convert(varchar(10),@checklasttrans,120) <  convert(varchar(10),getdate(),120)) AND @procStatus=0
				BEGIN
					select @retValue2=0, @tax = 0	
					IF @retValue <> 2
						set @retValue=0
				END
			ELSE
				BEGIN
					set @retValue2=1
				END
		END
		
		IF @retValue2=1 and @retValue=0 
			set @retValue2=0
		
	END
	ELSE
		set @retValue2=1
		
	IF @retValue = 2
		set @retValue=1
		
	SELECT @retValue [SPSRV], @retValue2 [SALES], 
	(select top 1 replace(ParamDescription, char(13),'</BR>') from sysParameter where ParamId='POSTING_STATUS') INFO, 
	(select top 1 case when ISNULL(ParamValue,'OFF')='OFF' then 1 else @tax end from sysParameter where paramid='PAJAK') TAX

END
GO
CREATE procedure [dbo].[uspfn_SvGetWRcvClaimDtlFile]
	@CompanyCode  varchar(15),
	@BranchCode   varchar(15),
	@ProductType varchar(15),
	@Reimbursement varchar(15),
	@ReceivedDate datetime,
	@ReceivedDealerCode varchar(15) 	
as
set nocount on
begin
	select 
		a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateSeq
		,a.SuzukiRefferenceNo, a.ReceivedDate, a.DivisionCode, a.JudgementCode
		,a.PaymentOprAmt, a.PaymentOprHour, a.PaymentSubletAmt, a.PaymentSubletHour
		, ActualLaborTime = right('000'+convert(varchar(3),convert(int,a.PaymentOprHour * 10)),3)
		, SubletWorkTime = right('000'+convert(varchar(3),convert(int,a.PaymentSubletHour * 10)),3)
		,(a.PaymentOprAmt + a.PaymentSubletAmt + d.PaymentTotalPrice) TotalClaimAmt
		,d.PaymentTotalPrice PartCost
		,b.SenderDealerCode, b.LotNo 	
		,SUBSTRING(c.IssueNo, 1, PATINDEX('%-%', c.IssueNo) - 1) IssueNo
		, c.ServiceBookNo, c.ChassisCode, c.ChassisNo, c.EngineCode
		,c.EngineNo, c.OperationNo, c.TechnicalModel
	from 
		SvTrnClaimJudgement a
		inner join SvTrnClaim b on a.CompanyCode = b.CompanyCode 
			and a.BranchCode = b.BranchCode and a.ProductType = b.ProductType
			and a.GenerateNo = b.GenerateNo
		inner join SvTrnClaimApplication c on a.CompanyCode = c.CompanyCode
			and a.BranchCode = c.BranchCode and a.ProductType = c.ProductType 
			and a.GenerateNo = c.GenerateNo and a.GenerateSeq = c.GenerateSeq		
		inner join (	
			Select 
				a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateSeq
				,sum(b.PaymentTotalPrice) PaymentTotalPrice
			from 
			SvTrnClaimJudgement a
				inner join SvTrnClaimPart b on a.CompanyCode = b.CompanyCode 
					and a.BranchCode = b.BranchCode and a.ProductType = b.ProductType
					and a.GenerateNo = b.GenerateNo and a.GenerateSeq = b.GenerateSeq
				inner join SvTrnClaim c on a.CompanyCode = c.CompanyCode 
					and a.BranchCode = b.BranchCode and a.ProductType = c.ProductType
					and a.GenerateNo = c.GenerateNo
			where 
				a.CompanyCode = @CompanyCode
				and a.BranchCode = @BranchCode
				and a.ProductType = @ProductType
				and a.SuzukiRefferenceNo = @Reimbursement
				and Convert(varchar, a.ReceivedDate, 110) = @ReceivedDate
				and c.SenderDealerCode = @ReceivedDealerCode			
			group by a.CompanyCode, a.BranchCode, a.ProductType, a.GenerateNo, a.GenerateSeq
		) as d on a.CompanyCode = d.CompanyCode and a.BranchCode = d.BranchCode 
			and a.ProductType = d.ProductType and a.GenerateNo = d.GenerateNo 
			and a.GenerateSeq = d.GenerateSeq
	where 
		a.CompanyCode = @CompanyCode
		and a.BranchCode = @BranchCode
		and a.ProductType = @ProductType
		and a.SuzukiRefferenceNo = @Reimbursement
		and Convert(varchar, a.ReceivedDate, 110) = @ReceivedDate
		and b.SenderDealerCode = @ReceivedDealerCode
end
GO
create procedure [dbo].[uspfn_CekBPKBasedSONo]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SONumber varchar(50)
as

begin
	  SELECT count(*) as Jumlah
        FROM omTrSalesBPK
       WHERE CompanyCode = @CompanyCode
         AND BranchCode = @BranchCode
         AND SONo = @SONumber 
         AND Status NOT IN (3, 4);
end
GO
CREATE procedure [dbo].[uspfn_SvGetWRcvClaimHdrFile]
	@CompanyCode  varchar(15),
	@BranchCode   varchar(15),
	@ProductType varchar(15),
	@DataID varchar(15),
	@ReimbursementNo varchar(15),
	@ReceiveDealerCode varchar(15),
	@ReceiveDate datetime,
	@SenderDealerName varchar(50) 	
as

set nocount on
begin
	select
		RecordID, DataID, DealerCode, ReceivedDealerCode, ReceivedDealerName
		, DealerName, TotalItems = (		
			select 
				count(app.GenerateSeq)	
			from 
				SvTrnClaim cla 
				inner join SvTrnClaimJudgement jud on cla.CompanyCode = jud.CompanyCode 
					and cla.BranchCode = jud.BranchCode and cla.ProductType = jud.ProductType
					and cla.GenerateNo = jud.GenerateNo
				inner join SvtrnClaimApplication app on cla.CompanyCode = app.CompanyCode 
					and cla.BranchCode = app.BranchCode and cla.ProductType = app.ProductType
					and cla.GenerateNo = app.GenerateNo and app.GenerateSeq = jud.GenerateSeq
			where
				cla.CompanyCode = @CompanyCode
				and cla.BranchCode = @BranchCode
				and cla.ProductType = @ProductType
				and jud.SuzukiRefferenceNo = @ReimbursementNo
				and cla.SenderDealerCode = @ReceiveDealerCode
				and Convert(varchar, jud.ReceivedDate , 110) = @ReceiveDate	
		), ProductType = '4W' , ReimbursementNo
		, ReimbursementDate , BlankFiller = ''
	from (
		select TOP 1
			RecordID = 'H'
			, DataID = @DataID
			, DealerCode = a.CompanyCode
			, a.SenderDealerCode ReceivedDealerCode
			, a.SenderDealerName ReceivedDealerName
			, DealerName = @SenderDealerName
			, ProductType = a.ProductType
			, b.SuzukiRefferenceNo ReimbursementNo
			, SuzukiRefferenceDate ReimbursementDate
			, BlankFiller = ''
		from 
			SvTrnClaim a
			inner join SvTrnClaimJudgement b on a.CompanyCode = b.CompanyCode 
				and a.BranchCode = b.BranchCode and a.ProductType = b.ProductType
				and a.GenerateNo = b.GenerateNo
		where
			a.CompanyCode = @CompanyCode
			and a.BranchCode = @BranchCode
			and a.ProductType = @ProductType
			and b.SuzukiRefferenceNo = @ReimbursementNo
			and a.SenderDealerCode = @ReceiveDealerCode
			and Convert(varchar, b.ReceivedDate, 110) = @ReceiveDate	
	) as Header
end
GO
CREATE procedure [dbo].[uspfn_itsinqAchievementSourceData]
(  
 @CompanyCode  VARCHAR(15),  
 @BMEmployeeID  VARCHAR(15),  
 @SHEmployeeID  VARCHAR(15),  
 @SCEmployeeID  VARCHAR(15),  
 @SMEmployeeID  VARCHAR(15),  
 @Year    INT  
)  
AS  
BEGIN  

--declare @CompanyCode  VARCHAR(15)  
--SET @CompanyCode = '6006406'
--declare @BMEmployeeID  VARCHAR(15)
--SET @BMEmployeeID = 'BM189'  
--declare @SHEmployeeID  VARCHAR(15) 
--SET @SHEmployeeID = '225' 
--declare @SCEmployeeID  VARCHAR(15)
--SET @SCEmployeeID = '50395'  
--declare @SMEmployeeID  VARCHAR(15)
--SET @SMEmployeeID ='%'
--DECLARE  @Year    INT  
--SET @Year = 2013

 select * into #ListOfSalesman from (  
  select tmSalesman.CompanyCode, tmSalesman.BranchCode  
   , tmSalesman.EmployeeID, tmSalesman.TeamID   
   , tmSalesman.IsSupervisor    
  from   
   PmMstTeamMembers tmSalesman,  
   (  
    -- Sales Coordinator ---  
    select tmSalesmanTemp.CompanyCode, tmSalesmanTemp.BranchCode  
     , tmSalesmanTemp.EmployeeID, tmSalesmanTemp.TeamID   
     , tmSalesmanTemp.IsSupervisor   
    from   
     PmMstTeamMembers tmSalesmanTemp,  
     (  
      -- Team Members of Sales Head ----------  
      select tmSC.CompanyCode, tmSC.BranchCode  
       , tmSC.EmployeeID, tmSC.TeamID , tmSC.IsSupervisor   
      from   
       PmMstTeamMembers tmSC,   
       (  
        -- Sales Head ----------  
        select tmSH.CompanyCode, tmSH.BranchCode  
         , tmSH.EmployeeID, tmSH.TeamID , tmSH.IsSupervisor  
        from   
         PmMstTeamMembers tmSH,   
         (  
          -- Team Members of Branch Manager -----  
          select tmSHTemp.CompanyCode, tmSHTemp.BranchCode  
           , tmSHTemp.EmployeeID, tmSHTemp.TeamID, tmBM.IsSupervisor  
          from   
           PmMstTeamMembers tmSHTemp, (  
            -- Branch Manager --  
            select tmBM.CompanyCode, tmBM.BranchCode, tmBM.IsSupervisor  
             ,tmBM.EmployeeID, tmBM.TeamID  
            from PmMstTeamMembers tmBM  
             inner join PmPosition posBM on tmBM.CompanyCode = posBM.CompanyCode  
              and tmBM.EmployeeID = posBM.EmployeeID and posBM.PositionID = 40   
            where tmBM.CompanyCode = @CompanyCode and tmBM.EmployeeID like @BMEmployeeID -- employeeID of Branch Manager  
            --------------------  
           ) tmBM  
          where   
           tmBM.CompanyCode = tmSHTemp.CompanyCode   
           and tmBM.BranchCode = tmSHTemp.BranchCode  
           and tmBM.TeamID = tmSHTemp.TeamID   
           and tmSHTemp.IsSupervisor != 1   
           and tmSHTemp.EmployeeID like @SHEmployeeID -- employeeID of SalesHead  
          ----------------------------------------  
         ) tmSHTemp_NotSup  
        where tmSH.CompanyCode = tmSHTemp_NotSup.CompanyCode   
         and tmSH.BranchCode = tmSHTemp_NotSup.BranchCode  
         and tmSH.EmployeeID = tmSHTemp_NotSup.EmployeeID  
         and tmSH.IsSupervisor = 1  
        ---------------------------------  
       ) tmSCTemp  
      where  
       tmSC.CompanyCode = tmSCTemp.CompanyCode   
       and tmSC.BranchCode = tmSCTemp.BranchCode  
       and tmSC.TeamID = tmSCTemp.TeamID  
       and tmSC.IsSupervisor != 1  
       and tmSC.EmployeeID like @SCEmployeeID -- EmployeeID of Sales Coordinator  
      --------------------------------  
     )tmSCTemp_NotSup  
    where tmSalesmanTemp.CompanyCode = tmSCTemp_NotSup.CompanyCode   
     and tmSalesmanTemp.BranchCode = tmSCTemp_NotSup.BranchCode  
     and tmSalesmanTemp.EmployeeID = tmSCTemp_NotSup.EmployeeID  
     and tmSalesmanTemp.IsSupervisor = 1  
    --------------  
   ) tmSalesmanTemp  
  where  
   tmSalesman.CompanyCode = tmSalesmanTemp.CompanyCode   
   and tmSalesman.BranchCode = tmSalesmanTemp.BranchCode  
   and tmSalesman.TeamID = tmSalesmanTemp.TeamID  
   and tmSalesman.IsSupervisor != 1  
   and tmSalesman.EmployeeID like @SMEmployeeID -- EmployeeID of Salesman  
 ) #ListOfSalesman 
 
select * into #SSD from (  
  select CompanyCode, '' BranchCode, TypeOf1, TypeOf2  
   , isnull(Jan, 0) Jan, isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May, isnull(Jun, 0) Jun  
   , isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep, isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec  
  from (  
   select kdp.CompanyCode, '' BranchCode, kdp.PerolehanData TypeOf1, '' TypeOf2  
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth, count(kdp.EmployeeID) InquiryCount  
   from PmKDP kdp  
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year  
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)        
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)  
   group by kdp.CompanyCode, kdp.PerolehanData, substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)) as Header  
  pivot  
  (  
   sum (inquiryCount)  
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  
  ) pvt  
 ) #SSD 
 
select    
    '1' inc, 'Sales Source of Data' initial, tempSSD.CompanyCode, '' BranchCode, lkpDtl.LookUpValue TypeOf1, tempSSD.TypeOf2  
   , isnull(tempSSD.Jan, 0) Jan, isnull(tempSSD.Feb, 0) Feb, isnull(tempSSD.Mar, 0) Mar  
   , isnull(tempSSD.Apr, 0) Apr, isnull(tempSSD.May, 0) May, isnull(tempSSD.Jun, 0) Jun  
   , isnull(tempSSD.Jul, 0) Jul, isnull(tempSSD.Aug, 0) Aug, isnull(tempSSD.Sep, 0) Sep  
   , isnull(tempSSD.Oct, 0) Oct, isnull(tempSSD.Nov, 0) Nov, isnull(tempSSD.Dec, 0) Dec  
   , isnull((tempSSD.Jan + tempSSD.Feb + tempSSD.Mar + tempSSD.Apr + tempSSD.May + tempSSD.Jun), 0) Sem1  
   , isnull((tempSSD.Jul + tempSSD.Aug + tempSSD.Sep + tempSSD.Oct + tempSSD.Nov+ tempSSD.Dec), 0) Sem2  
   , isnull((tempSSD.Jan + tempSSD.Feb + tempSSD.Mar + tempSSD.Apr + tempSSD.May + tempSSD.Jun  
    + tempSSD.Jul + tempSSD.Aug + tempSSD.Sep + tempSSD.Oct + tempSSD.Nov  
    + tempSSD.Dec), 0) Total  
  from   
   GnMstLookUpDtl lkpDtl  
    left join #SSD tempSSD on lkpDtl.CompanyCode = tempSSD.CompanyCode  
    and lkpDtl.LookUpValue = tempSSD.TypeOf1   
  where   
   lkpDtl.CodeID = 'PSRC' and lkpDtl.CompanyCode = @CompanyCode  
  
 
 drop TABLE #LIstOfSalesman
 drop TABLE #SSD
 end
GO
--declare @CompanyCode varchar(20)
--declare @BranchCode  varchar(20)
--declare @TypeJournal  varchar(20)
--declare @DocNo   varchar(20)

--set @CompanyCode = '6558201'
--set @BranchCode  = '655820100'
--set @TypeJournal = 'invoice'
--set @DocNo       = 'IVU/13/001280'

-- =============================================
-- Author:		<xxxxxx>
-- Create date: <xxxxxx>
-- Description:	<Get Journal>
-- Last Update By:	<yo - 29 Nov 2013>
-- =============================================

CREATE procedure [dbo].[uspfn_OmGetJournalDebetCredit]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@TypeJournal varchar(50),
	@DocNo       varchar(50)
as 

declare @t_journal as table (
	SeqCode     varchar(50),
	TypeTrans   varchar(50),
	AccountNo   varchar(50),
	AccountDesc varchar(100),
	AmountDb    decimal,
	AmountCr    decimal
)

--#region TypeJournal = 'TRANSFEROUT'
if @TypeJournal = 'TRANSFEROUT'
begin
	declare @t_trans_out as table (
		CompanyCode varchar(50),
		BranchCode  varchar(50),
		DocInfo     varchar(50),
		Amount      decimal
	)

	insert into @t_trans_out
	select a.CompanyCode, a.BranchCode, a.SalesModelCode 
		 , isnull(b.CogsUnit, 0) + isnull(b.COGSKaroseri, 0) + isnull(b.COGSOthers, 0)
	  from omTrInventTransferOutDetail a
	  left join omMstVehicle b on 1 = 1
	   and b.CompanyCode = a.CompanyCode
	   and b.ChassisCode = a.ChassisCode
	   and b.ChassisNo   = a.ChassisNo
	   and b.EngineCode  = a.EngineCode
	   and b.EngineNo    = a.EngineNo
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	 where 1 = 1 
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode  = @BranchCode
	   and a.TransferOutNo = @DocNo

	insert into @t_journal
	select '01', 'PSEMENTARA'
		 , isnull(b.InTransitTransferStockAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_out a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InTransitTransferStockAccNo= c.AccountNo

	insert into @t_journal
	select '02', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	  from @t_trans_out a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo
end

--#region TypeJournal = 'TRANSFERIN'
if @TypeJournal = 'TRANSFERIN'
begin
	declare @t_trans_in as table (
		CompanyCode varchar(50),
		BranchCode  varchar(50),
		BranchCodeFrom varchar(50),
		BranchCodeTo varchar(50),
		DocInfo     varchar(50),
		Amount      decimal
	)

	insert into @t_trans_in
	select a.CompanyCode, a.BranchCode, c.BranchCodeFrom, c.BranchCodeTo, a.SalesModelCode 
		 , isnull(b.CogsUnit, 0) + isnull(b.COGSKaroseri, 0) + isnull(b.COGSOthers, 0)
	  from omTrInventTransferInDetail a
	  left join omMstVehicle b on 1 = 1
	   and b.CompanyCode = a.CompanyCode
	   and b.ChassisCode = a.ChassisCode
	   and b.ChassisNo   = a.ChassisNo
	   and b.EngineCode  = a.EngineCode
	   and b.EngineNo    = a.EngineNo
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	  left join omTrInventTransferIn c on 1 = 1
	   and c.CompanyCode = a.CompanyCode
	   and c.BranchCode  = a.BranchCode
	   and c.TransferInNo = a.TransferInNo
	 where 1 = 1 
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode  = @BranchCode
	   and a.TransferInNo = @DocNo

	insert into @t_journal
	select '01', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_in a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeTo=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo

	insert into @t_journal
	select '02', 'PSEMENTARA'
		 , isnull(b.InTransitTransferStockAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	  from @t_trans_in a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeFrom=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InTransitTransferStockAccNo= c.AccountNo

end
--#endregion

--#region TypeJournal = 'TRANSFEROUTMULTIBRANCH'
if @TypeJournal = 'TRANSFEROUTMULTIBRANCH'
begin
	declare @t_trans_outMB as table (
	CompanyCode		varchar(50),
	BranchCode		varchar(50),
	CompanyCodeTo	varchar(50),
	DocInfo			varchar(50),
	Amount			decimal
	)

	insert into @t_trans_outMB
		select a.CompanyCode
			, a.BranchCode
			, b.CompanyCodeTo
			, a.SalesModelCode 
			, isnull(a.CogsUnit, 0) + isnull(a.COGSKaroseri, 0) + isnull(a.COGSOthers, 0)
		from omTrInventTransferOutDetailMultiBranch a
		left join omTrInventTransferOutMultiBranch b on b.CompanyCode = a.CompanyCode
			and b.BranchCode = a.BranchCode
			and b.TransferOutNo = a.TransferOutNo
		where 1 = 1 
		   and a.CompanyCode = @CompanyCode
		   and a.BranchCode  = @BranchCode
		   and a.TransferOutNo = @DocNo
		   
	insert into @t_journal
	select '01', 'PSEMENTARA'
		 , isnull(b.InterCompanyAccNoTo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	from @t_trans_outMB a
	left join omMstCompanyAccount b on b.CompanyCode = a.CompanyCode
		and b.CompanyCodeTo = a.CompanyCodeTo
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
		and b.InterCompanyAccNoTo = c.AccountNo

	insert into @t_journal
	select '02', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	from @t_trans_outMB a
	left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
		and a.DocInfo=b.SalesModelCode
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
		and b.InventoryAccNo= c.AccountNo
end
--#endregion

--#region TypeJournal = 'TRANSFERINMULTIBRANCH'
if @TypeJournal = 'TRANSFERINMULTIBRANCH'
begin
	declare @t_trans_inMB as table (
	CompanyCode		varchar(50),
	BranchCode		varchar(50),
	CompanyCodeFrom	varchar(50),
	BranchCodeFrom	varchar(50),
	BranchCodeTo	varchar(50),
	DocInfo			varchar(50),
	Amount			decimal
)

insert into @t_trans_inMB
	select a.CompanyCode
		, a.BranchCode
		, b.CompanyCodeFrom
		, b.BranchCodeFrom
		, b.BranchCodeTo
		, a.SalesModelCode 
		, isnull(a.CogsUnit, 0) + isnull(a.COGSKaroseri, 0) + isnull(a.COGSOthers, 0)
	from omTrInventTransferInDetailMultiBranch a
	left join omTrInventTransferInMultiBranch b on 1 = 1
	   and b.CompanyCode	= a.CompanyCode
	   and b.BranchCode		= a.BranchCode
	   and b.TransferInNo	= a.TransferInNo
	where 1 = 1 
	   and a.CompanyCode	= @CompanyCode
	   and a.BranchCode		= @BranchCode
	   and a.TransferInNo	= @DocNo

	insert into @t_journal
	select '01', 'INVENTORY'
		 , isnull(b.InventoryAccNo,'')
		 , isnull(c.Description,'')
		 , a.Amount
		 , 0
	  from @t_trans_inMB a
		left join omMstModelAccount b on a.CompanyCode=b.CompanyCode and a.BranchCodeTo=b.BranchCode
			and a.DocInfo=b.SalesModelCode
		left join gnMstAccount c on b.CompanyCode=c.CompanyCode and b.BranchCode=c.BranchCode
			and b.InventoryAccNo= c.AccountNo
			
	insert into @t_journal
	select '02', 'PSEMENTARA'
		 , isnull(b.InterCompanyAccNoTo,'')
		 , isnull(c.Description,'')
		 , 0
		 , a.Amount
	from @t_trans_inMB a
	left join omMstCompanyAccount b on b.CompanyCode = a.CompanyCode
		and b.CompanyCodeTo = a.CompanyCodeFrom
	left join gnMstAccount c on b.CompanyCode=c.CompanyCode and a.BranchCode=c.BranchCode
		and b.InterCompanyAccNoTo = c.AccountNo

end
--#endregion

--#region TypeJournal = 'KAROSERI'
if @TypeJournal = 'KAROSERI'
begin
	declare @t_karoseri as table (
		SeqCode     varchar(50),
		TypeTrans   varchar(50),
		AccountNo   varchar(50),
		AmountDb    decimal,
		AmountCr    decimal
	)
	
	insert into @t_karoseri
	select '01', 'INVENTORY'
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCodeNew
			), '')
		 , sum(isnull(c.COGSKaroseri, 0) + (isnull(c.COGsUnit, 0) + isnull(c.COGsOthers, 0)))
		 , 0
	  from OmTrPurchaseKaroseriTerima a, OmTrPurchaseKaroseriTerimaDetail b, OmMstVehicle c
	 where 1 = 1
	   and c.CompanyCode = b.CompanyCode 
	   and c.ChassisCode = b.ChassisCode
	   and c.ChassisNo = b.ChassisNo 
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode = a.BranchCode
	   and b.KaroseriTerimaNo = a.KaroseriTerimaNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeNew
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '02', 'PPN'
		 , isnull((
			select cls.TaxInAccNo
			  from gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and cls.CompanyCode   = sup.CompanyCode
			   and cls.BranchCode    = sup.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = a.CompanyCode
			   and sup.BranchCode    = a.BranchCode
			   and sup.SupplierCode  = a.SupplierCode
			   and sup.ProfitCenterCode = '100'
			), '')
		 , sum(isnull(a.Quantity, 0) * isnull(a.PPn, 0))
		 , 0
	  from OmTrPurchaseKaroseriTerima a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeNew, a.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '03', 'INVENTORY'
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCodeOld
			), '')
		 , 0
		 , sum((isnull (c.COGsUnit, 0) + isnull (c.COGsOthers, 0 )))
	  from OmTrPurchaseKaroseriTerima a, OmTrPurchaseKaroseriTerimaDetail b, OmMstVehicle c
	 where 1 = 1
	   and c.CompanyCode = b.CompanyCode 
	   and c.ChassisCode = b.ChassisCode
	   and c.ChassisNo = b.ChassisNo 
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode = a.BranchCode
	   and b.KaroseriTerimaNo = a.KaroseriTerimaNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SalesModelCodeOld
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_karoseri
	select '04', 'AP'
		 , isnull((
			select cls.PayableAccNo
			  from gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and cls.CompanyCode   = sup.CompanyCode
			   and cls.BranchCode    = sup.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = a.CompanyCode
			   and sup.BranchCode    = a.BranchCode
			   and sup.SupplierCode  = a.SupplierCode
			   and sup.ProfitCenterCode = '100'
			), '')
		 , 0
		 , sum(isnull(a.Quantity, 0) * isnull(a.Total, 0))
	  from OmTrPurchaseKaroseriTerima a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.KaroseriTerimaNo = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.KaroseriTerimaNo, a.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.Total, 0) - isnull(a.PPn, 0))) > 0

	insert into @t_journal
	select a.SeqCode, a.TypeTrans, a.AccountNo
		 , b.Description AccountDesc, a.AmountDb, a.AmountCr    
	  from @t_karoseri a, gnMstAccount b
	 where b.CompanyCode = @CompanyCode
	   and b.BranchCode = @BranchCode 
	   and b.AccountNo = a.AccountNo
end
--#endregion

--#region TRANS TYPE PURCHASE
IF @TypeJournal = 'PURCHASE'
	BEGIN	
	Select * into #t1 from
	(
		select distinct a.CompanyCode
				, a.BranchCode
				, a.HPPNo
				, a.BPUNo
				, a.SalesModelCode
				, a.SalesModelYear
				, a.OthersCode
				, isnull(b.OthersNonInventoryAccNo,'') AccountNo
				, SUM(a.OthersDPP) DPP
				, SUM(a.OthersPPN) PPN
		from omTrPurchaseHPPDetailModelOthers a
		left join omMstOthersNonInventory b on a.CompanyCode = b.CompanyCode
			and a.BranchCode = b.BranchCode
			--and a.OthersCode = b.OthersNonInventory
		where a.CompanyCode = @CompanyCode
			and a.BranchCode = @BrancHCode
			and a.HPPNo = @DocNo
			and isnull(b.OthersNonInventoryAccNo,'') <> ''
		group by a.CompanyCode, a.BranchCode, a.HPPNo, a.BPUNo, a.SalesModelCode, a.SalesModelYear, a.OthersCode,b.OthersNonInventoryAccNo		
	)#t1


	select * into #Inventory from(
	select 'INVENTORY' CodeTrans
		 , @DocNo DocNo
		 , a.SalesModelCode DocInfo
		 , isnull((
			select acc.InventoryAccNo
			  from omMstModelAccount acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.SalesModelCode = a.SalesModelCode
			), '') AccountNo
		 , isnull(a.Quantity, 0) Quantity
		 , isnull(a.AfterDiscDPP, 0) AfterDiscDPP	 
		 , case when (select COUNT(*) from #t1 where HPPNo = a.HppNo and BPUNo = a.BPUNo and SalesModelCode = a.SalesModelCode and SalesModelYear = SalesModelYear) > 0 
			   then isnull((select distinct (b.DPP)
					from #t1 b
					where b.CompanyCode = a.CompanyCode
						and b.BranchCode = a.BranchCode
						and b.HPPNo = a.HPPNo
						and b.SalesModelCode = a.SalesModelCode
						and b.SalesModelYear = a.SalesModelYear
						and b.OthersCode not in (select distinct OthersNonInventory 
								from omMstOthersNonInventory))
				, 0) else a.OthersDPP end OthersDPP
		 , isnull(a.AfterDiscPPnBM, 0) AfterDiscPPnBM
		 , 0 AmountCr
	  from omTrPurchaseHPPDetailModel a
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	)#Inventory

	insert into @t_journal
	select	1
			, a.CodeTrans
			, a.AccountNo
			, '' AccountDesc
			, sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) as DPP
			, 0
	  from #Inventory a
	 group by a.CodeTrans, a.DocNo, a.DocInfo, a.AccountNo
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0

	select * into #OthersInv from(
	select 'OTHERS' CodeTrans 		
		 , isnull((
			select acc.OthersNonInventoryAccNo
			  from omMstOthersNonInventory acc
			 where 1 = 1
			   and acc.CompanyCode    = a.CompanyCode
			   and acc.BranchCode     = a.BranchCode
			   and acc.OthersNonInventory = b.OthersCode
			), '') AccountNo
		 , '' AccountDesc
		 , sum(isnull(a.Quantity, 0) * isnull(b.DPP, 0)) as DPP
		 , 0 AmountCr
	  from omTrPurchaseHPPDetailModel a, #t1 b
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	   and a.SalesModelCode = b.SalesModelCode
	   and a.SalesModelYear = b.SalesModelYear
	   and a.BPUNo = b.BPUNo
	   and b.OthersCode in (select distinct OthersNonInventory 
									from omMstOthersNonInventory) 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, a.SalesModelCode,a.SalesModelYear,b.OthersCode,b.AccountNo
	having sum(isnull(a.Quantity, 0) * isnull(b.DPP, 0)) > 0
	)#OthersInv
	
	insert into @t_journal
	select 2, CodeTrans			
			, AccountNo
			, '' AccountDesc
			, SUM(DPP)
			, AmountCr
	  from #OthersInv a
	 group by a.CodeTrans, a.AccountNo,a.AmountCr
	having sum(DPP) > 0

	insert into @t_journal
	select 3, 'PPN'
		 , isnull((
			select cls.TaxInAccNo
			  from omTrPurchaseHPP pur, gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and sup.CompanyCode   = pur.CompanyCode
			   and sup.BranchCode    = pur.BranchCode
			   and sup.SupplierCode  = pur.SupplierCode
			   and sup.ProfitCenterCode = '100'
			   and cls.CompanyCode   = pur.CompanyCode
			   and cls.BranchCode    = pur.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = @CompanyCode
			   and sup.BranchCode    = @BranchCode
			   and pur.HPPNo         = @DocNo
			), '')
		 , '' AccountDesc
		 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0))) as PPN
		 , 0
	  from omTrPurchaseHPPDetailModel a, omTrPurchaseHPP b
	 where 1 = 1
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode  = a.BranchCode
	   and b.HPPNo       = a.HPPNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, b.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0

	insert into @t_journal
	select 4, 'AP'
		 , isnull((
			select cls.PayableAccNo
			  from omTrPurchaseHPP pur, gnMstSupplierProfitCenter sup, gnMstSupplierClass cls
			 where 1 = 1
			   and sup.CompanyCode   = pur.CompanyCode
			   and sup.BranchCode    = pur.BranchCode
			   and sup.SupplierCode  = pur.SupplierCode
			   and sup.ProfitCenterCode = '100'
			   and cls.CompanyCode   = pur.CompanyCode
			   and cls.BranchCode    = pur.BranchCode
			   and cls.SupplierClass = sup.SupplierClass
			   and sup.CompanyCode   = @CompanyCode
			   and sup.BranchCode    = @BranchCode
			   and pur.HPPNo         = @DocNo
			), '')
		 , '' AccountDesc
		 , 0
		 , sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0)))
		 + sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscPPn, 0) + isnull(a.OthersPPn, 0))) as TotalTransAmt
	  from omTrPurchaseHPPDetailModel a, omTrPurchaseHPP b
	 where 1 = 1
	   and b.CompanyCode = a.CompanyCode 
	   and b.BranchCode  = a.BranchCode
	   and b.HPPNo       = a.HPPNo
	   and a.CompanyCode = @CompanyCode 
	   and a.BranchCode  = @BranchCode
	   and a.HPPNo       = @DocNo 
	 group by a.CompanyCode, a.BranchCode, a.HPPNo, b.SupplierCode
	having sum(isnull(a.Quantity, 0) * (isnull(a.AfterDiscDPP, 0) + isnull(a.OthersDPP, 0) + isnull(a.AfterDiscPPnBM, 0))) > 0	

	drop table #t1
	drop table #Inventory
	drop table #OthersInv
		
	END
--#endregion

--#region TypeJournal = 'INVOICE'
IF @TypeJournal = 'INVOICE'
BEGIN
	insert into @t_journal
		select 1, 'AR'
			 , isnull((
				select cls.ReceivableAccNo
				  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
				 where 1 = 1
				   and cus.CompanyCode   = ivu.CompanyCode
				   and cus.BranchCode    = ivu.BranchCode
				   and cus.CustomerCode  = ivu.CustomerCode
				   and cus.ProfitCenterCode = '100'
				   and cls.CompanyCode   = ivu.CompanyCode
				   and cls.BranchCode    = ivu.BranchCode
				   and cls.CustomerClass = cus.CustomerClass
				   and cus.CompanyCode   = @CompanyCode
				   and cus.BranchCode    = @BranchCode
				   and ivu.InvoiceNo     = @DocNo
				), '') AccounNo
			 , '' AccountDesc
			 , isnull((
				select sum(isnull(Quantity, 0) * (AfterDiscDPP + AfterDiscPPn + AfterDiscPPnBm))
				  from omTrSalesInvoiceModel
				 where 1 = 1
				   and CompanyCode = @CompanyCode 
				   and BranchCode  = @BranchCode
				   and InvoiceNo   = @DocNo
				), 0)
			 + isnull((
				select sum(mdl.Quantity * (oth.AfterDiscDPP + oth.AfterDiscPPn))
				  from omTrSalesInvoiceOthers oth left join omTrSalesInvoiceModel mdl
					on oth.BranchCode = mdl.BranchCode
					and oth.InvoiceNo = mdl.InvoiceNo
					and oth.BPKNo = mdl.BPKNo
					and oth.SalesModelCode = mdl.SalesModelCode
				 where 1 = 1
				   and oth.CompanyCode = @CompanyCode 
				   and oth.BranchCode  = @BranchCode
				   and oth.InvoiceNo   = @DocNo
				), 0)
			 + isnull((
				select sum(DPP + PPN)
				  from omTrSalesInvoiceAccs
				 where 1 = 1
				   and CompanyCode = @CompanyCode 
				   and BranchCode  = @BranchCode
				   and InvoiceNo   = @DocNo
				), 0)
			 + (select isnull(sum(isnull(Quantity,0)*isnull(Total,0)),0) from omTrSalesInvoiceAccsSeq where CompanyCode=@CompanyCode
				   and BranchCode=@BranchCode and InvoiceNo=@DocNo) 
			 , 0

insert into @t_journal
select 2, 'DISCOUNT UNIT'
	 , isnull((
		select acc.DiscountAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) as Discount
	 , 0
  from omTrSalesInvoiceModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) > 0

insert into @t_journal
select 3, 'DISCOUNT AKSESORIS'
	 , isnull((
		select acc.DiscountAccNoAks
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull(a.DiscExcludePPn, 0)) as Discount
	 , 0
  from omTrSalesInvoiceOthers a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull(a.DiscExcludePPn, 0)) > 0

insert into @t_journal
select distinct 4, 'DISCOUNT SPAREPART['+a.TypeOfGoods+']'
	, (select top 1 DiscAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, (select sum(isnull(Quantity,0)*isnull(DiscExcludePPn,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
		and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountDb
	, 0 AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
where a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

insert into @t_journal
select 5, 'SALES UNIT'
	 , isnull((
		select acc.SalesAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull(a.Quantity, 0) * isnull (a.AfterDiscDPP, 0))
	 + sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) 
  from omTrSalesInvoiceModel a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having (sum(isnull(a.Quantity, 0) * isnull (a.AfterDiscDPP, 0)) +
	    sum(isnull(a.Quantity, 0) * isnull (a.DiscExcludePPn, 0))) > 0

insert into @t_journal
select 6, 'SALES AKSESORIS'
	 , isnull((
		select acc.SalesAccNoAks
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull(b.Quantity, 0) * isnull (a.AfterDiscDPP, 0))
	 + sum(isnull(b.Quantity, 0) * isnull (a.DiscExcludePPn, 0)) 
  from omTrSalesInvoiceOthers a, omTrSalesInvoiceModel b
 where 1 = 1
   and b.BranchCode = a.BranchCode 
   and b.InvoiceNo = a.InvoiceNo 
   and b.BPKNo = a.BPKNo 
   and b.SalesModelCode = a.SalesModelCode 
   and b.SalesModelYear = a.SalesModelYear 
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having (sum(isnull(b.Quantity, 0) * isnull (a.AfterDiscDPP, 0)) +
	    sum(isnull(b.Quantity, 0) * isnull (a.DiscExcludePPn, 0))) > 0

insert into @t_journal
select distinct 7, 'SALES SPAREPART ['+a.typeOfGoods+']'
	, (select top 1 SalesAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, 0 AmountDb
	, (select sum(isnull(Quantity,0) * isnull(RetailPrice,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
		and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.TypeOfGoods

insert into @t_journal
select 8, 'PPN'
	 , isnull((
		select cls.TaxOutAccNo
		  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
		 where 1 = 1
		   and cus.CompanyCode   = ivu.CompanyCode
		   and cus.BranchCode    = ivu.BranchCode
		   and cus.CustomerCode  = ivu.CustomerCode
		   and cus.ProfitCenterCode = '100'
		   and cls.CompanyCode   = ivu.CompanyCode
		   and cls.BranchCode    = ivu.BranchCode
		   and cls.CustomerClass = cus.CustomerClass
		   and cus.CompanyCode   = @CompanyCode
		   and cus.BranchCode    = @BranchCode
		   and ivu.InvoiceNo     = @DocNo
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , isnull((
		select sum(Quantity * AfterDiscPPn)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(mdl.Quantity * oth.AfterDiscPPn)
		  from omTrSalesInvoiceOthers oth left join omTrSalesInvoiceModel mdl
			on oth.BranchCode = mdl.BranchCode
			and oth.InvoiceNo = mdl.InvoiceNo
			and oth.BPKNo = mdl.BPKNo
			and oth.SalesModelCode = mdl.SalesModelCode
		 where 1 = 1
		   and oth.CompanyCode = @CompanyCode 
		   and oth.BranchCode  = @BranchCode
		   and oth.InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(PPN)
		  from omTrSalesInvoiceAccs
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + (select isnull(sum(isnull(Quantity,0)*isnull(PPN,0)),0) from omTrSalesInvoiceAccsSeq where companyCode = @CompanyCode 
		   and BranchCode=@BranchCode and InvoiceNo=@DocNo)
where (isnull((
		select sum(Quantity * AfterDiscPPn)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(AfterDiscPPn)
		  from omTrSalesInvoiceOthers
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
	 + isnull((
		select sum(PPN)
		  from omTrSalesInvoiceAccs
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)) 
	 +(select isnull(sum(isnull(quantity,0)*isnull(PPN,0)),0) from omTrSalesInvoiceAccsSeq where companyCode = @CompanyCode 
		   and BranchCode=@BranchCode and InvoiceNo=@DocNo) > 0

insert into @t_journal
select 9, 'PPN BM'
	 , isnull((
		select cls.LuxuryTaxAccNo
		  from omTrSalesInvoice ivu, GnMstCustomerProfitCenter cus, GnMstCustomerClass cls
		 where 1 = 1
		   and cus.CompanyCode   = ivu.CompanyCode
		   and cus.BranchCode    = ivu.BranchCode
		   and cus.CustomerCode  = ivu.CustomerCode
		   and cus.ProfitCenterCode = '100'
		   and cls.CompanyCode   = ivu.CompanyCode
		   and cls.BranchCode    = ivu.BranchCode
		   and cls.CustomerClass = cus.CustomerClass
		   and cus.CompanyCode   = @CompanyCode
		   and cus.BranchCode    = @BranchCode
		   and ivu.InvoiceNo     = @DocNo
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , isnull((
		select sum(Quantity * AfterDiscPPnBm)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0)
where isnull((
		select sum(Quantity * AfterDiscPPnBm)
		  from omTrSalesInvoiceModel
		 where 1 = 1
		   and CompanyCode = @CompanyCode 
		   and BranchCode  = @BranchCode
		   and InvoiceNo   = @DocNo
		), 0) > 0

insert into @t_journal
select 10, 'HPP Unit'
	 , isnull((
		select acc.COGSAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , sum(isnull (a.COGS, 0)) as COGS
	 , 0
  from OmTrSalesInvoiceVin a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull (a.COGS, 0)) > 0

insert into @t_journal
select 11, 'INVENTORY UNIT'
	 , isnull((
		select acc.InventoryAccNo
		  from omMstModelAccount acc
		 where 1 = 1
		   and acc.CompanyCode    = a.CompanyCode
		   and acc.BranchCode     = a.BranchCode
		   and acc.SalesModelCode = a.SalesModelCode
		), '') AccountNo
	 , '' AccountDesc
	 , 0
	 , sum(isnull (a.COGS, 0)) as COGS
  from OmTrSalesInvoiceVin a
 where 1 = 1
   and a.CompanyCode = @CompanyCode 
   and a.BranchCode  = @BranchCode
   and a.InvoiceNo   = @DocNo 
 group by a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear
having sum(isnull (a.COGS, 0)) > 0

insert into @t_journal
select distinct 12, 'COGS SPAREPART ['+a.TypeOfGoods+']'
	, (select top 1 COGSAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, (select sum(isnull(Quantity,0)*isnull(COGS,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode 
			and invoiceno=a.invoiceno and typeofgoods=a.typeofgoods group by typeofgoods) AmountDb
	, 0 AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
where a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

insert into @t_journal
select distinct 13, 'INVENTORY AKSESORIES ['+a.TypeOfGoods+']'
	, (select top 1 InventoryAccNo from spMstAccount where companycode=a.companycode and branchcode=a.branchcode and typeofgoods=a.typeofgoods) AccountNo
	, '' AccountDesc
	, 0 AmountDb
	, (select sum(isnull(Quantity,0)*isnull(COGS,0)) from omtrsalesinvoiceaccsseq where companycode=a.companycode and branchcode=a.branchcode and invoiceno=a.invoiceno
		and typeofgoods=a.typeofgoods group by typeofgoods) AmountCr
from omTrSalesInvoiceAccsSeq a 
inner join omTrSalesInvoice b on b.CompanyCode=a.CompanyCode
	and b.BranchCode=a.BranchCode
	and b.InvoiceNo=a.InvoiceNo
WHERE a.companyCode=@CompanyCode 
	and a.BranchCode=@BranchCode 
	and a.InvoiceNo=@DocNo

END
--#endregion

select sum(a.AmountDb) as AmountDb, sum(a.AmountCr) as AmountCr
  from @t_journal a
GO
create procedure [dbo].[uspfn_UpdateEmployeeVehicle]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..HrEmployeeVehicle a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeVehicle (
		   CompanyCode
		 , EmployeeID
		 , VehSeq
		 , Type
		 , Brand
		 , Model
		 , PoliceRegNo
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
	     , a.VehSeq
	     , a.Type
	     , a.Brand
	     , a.Model
	     , a.PoliceRegNo
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
CREATE procedure [dbo].[sp_spMstSalesTargetview] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT  CompanyCode,BranchCode,  [Year]  , 
                               [Month]  , QtyTarget, AmountTarget, TotalJaringan 
                                FROM spMstSalesTarget
WHERE  CompanyCode=@CompanyCode and  BranchCode=@BranchCode
GO
-- =============================================
-- Author:		<yo>
-- Create date: <30 Oct 2013>
-- Last Update date: <01 Apr 2014> 
-- Description:	<Inquiry ITS Productivity>
-- =============================================

CREATE PROCEDURE [dbo].[usprpt_InquiryITSProd]
  @StartDate			DATETIME,
  @EndDate				DATETIME,
  @Area					varchar(100),
  @DealerCode			varchar(100),
  @OutletCode			varchar(100),
  @BranchHead			varchar(100),
  @SalesHead			varchar(100),
  @SalesCoordinator		varchar(100),
  @Salesman				varchar(100),
  @TypeReport			varchar(1),
  @ProductivityBy		varchar(1)
AS
BEGIN

--usprpt_InquiryITSProd '01-Nov-2013','30-Nov-2013','JAWA BARAT','6058401','605840100','','','','','1','1'
--usprpt_InquiryITSProd '01-Oct-2014','09-Oct-2014','CABANG','6006400001','','','','','','0','0'
--declare @StartDate	DATETIME
--declare @EndDate	DATETIME
--declare @Area		varchar(100)
--declare @DealerCode	varchar(100)
--declare @OutletCode	varchar(100)
--declare @BranchHead	varchar(100)
--declare @SalesHead	varchar(100)
--declare @SalesCoordinator varchar(100)
--declare @Salesman	varchar(100)
--declare @TypeReport	varchar(1)
--declare @ProductivityBy varchar(1)

--set @StartDate = '01-Mar-2014'
--set @EndDate	= '19-Mar-2014'
--set @Area = 'CABANG'
--set @DealerCode = '6006406'
--set @OutletCode = '6006404'
--set @BranchHead = ''
--set @SalesHead  = ''
--set @SalesCoordinator = ''
--set @Salesman = ''
--set @TypeReport = '1' -- 0 : SUMMARY, 1 : SALDO
--set @ProductivityBy = '0'	-- 0 : SALESMAN, 1 : VEHICLE TYPE, 2 : SOURCE DATA			

DECLARE @National AS VARCHAR(1)
SET @National = (SELECT ParaValue FROM SuzukiR4..GnMstLookUpDtl WHERE CodeID = 'QSLS' AND LookUpValue = 'NATIONAL')					

--#region PRODUCTIVITY BY SALESMAN (0)	
IF @ProductivityBy = '0'
BEGIN	
--#region SELECT SALESMAN 	
		
	IF @National = '1' 
	BEGIN
	SELECT * INTO #tSPK1 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(Wiraniaga, '[BLANK]') Wiraniaga, 
			COUNT(Hist.LastProgress) SPK, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator
			FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
			LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
				HstITS.CompanyCode = Hist.CompanyCode AND
				HstITS.BranchCode = Hist.BranchCode AND
				HstITS.InquiryNumber = Hist.InquiryNumber 
			 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
				AND Hist.LastProgress = 'SPK' 
				AND HstITS.LastProgress = 'SPK' -- penambahan 1 April 2014
				AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
				 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
				and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress<>'P'
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP','SPK')
															 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
															 and HstITS.LastProgress not in ('DO','DELIVERY','LOST')	
			 AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)																 
			 GROUP BY  Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tSPK1

	SELECT * INTO #tSPK2 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(Wiraniaga, '[BLANK]') Wiraniaga, 
			COUNT(Hist.LastProgress) SPK, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator
			FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
			LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
				HstITS.CompanyCode = Hist.CompanyCode AND
				HstITS.BranchCode = Hist.BranchCode AND
				HstITS.InquiryNumber = Hist.InquiryNumber 
			 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
				AND Hist.LastProgress = 'SPK'
				AND HstITS.LastProgress = 'SPK' -- penambahan 1 April 2014
				AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)								
				 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
				 and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress<>'P'
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP','SPK')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)))
			  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112))
			   and HstITS.LastProgress not in ('DO','DELIVERY','LOST')	 
			 GROUP BY  Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tSPK2
			 
	SELECT * INTO #tDO FROM (
		SELECT Hist.CompanyCode, Hist.BranchCode, Wiraniaga, COUNT(Hist.LastProgress) DO, SalesCoordinator
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				INNER JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'DO'
					AND HstITS.LastProgress = 'DO' -- penambahan 1 April 2014
					AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 					
				GROUP BY Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tDO
		
	SELECT * INTO #tDELIVERY FROM (
			SELECT Hist.CompanyCode, Hist.BranchCode, Wiraniaga, COUNT(Hist.LastProgress) DELIVERY, SalesCoordinator
					FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
					INNER JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
						HstITS.CompanyCode = Hist.CompanyCode AND
						HstITS.BranchCode = Hist.BranchCode AND
						HstITS.InquiryNumber = Hist.InquiryNumber 
					 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
						AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
						AND Hist.LastProgress = 'DELIVERY'
						AND HstITS.LastProgress = 'DELIVERY' -- penambahan 1 April 2014
						AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
					GROUP BY Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tDELIVERY

	SELECT * INTO #tHP1 FROM (
			SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(Wiraniaga, '[BLANK]') Wiraniaga, 
			COUNT(Hist.LastProgress) HP, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator
			FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
			LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
				HstITS.CompanyCode = Hist.CompanyCode AND
				HstITS.BranchCode = Hist.BranchCode AND
				HstITS.InquiryNumber = Hist.InquiryNumber 
			 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
				AND Hist.LastProgress = 'HP'
				AND HstITS.LastProgress = 'HP' -- penambahan 1 April 2014
				AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
				 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
				and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress<>'P'
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP','SPK')
															 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
															  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')	
			 AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)	
			 GROUP BY  Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tHP		

	SELECT * INTO #tHP2 FROM (
					SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(Wiraniaga, '[BLANK]') Wiraniaga, 
			COUNT(Hist.LastProgress) HP, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator
			FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
			LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
				HstITS.CompanyCode = Hist.CompanyCode AND
				HstITS.BranchCode = Hist.BranchCode AND
				HstITS.InquiryNumber = Hist.InquiryNumber 
			 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
				AND Hist.LastProgress = 'HP'
				AND HstITS.LastProgress = 'HP' -- penambahan 1 April 2014
				AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
				 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
				and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress<>'P'
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP','SPK')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)))
				AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112))				
				and HstITS.LastProgress not in ('DO','DELIVERY','LOST')											 	 
			 GROUP BY  Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tHP2
		
	SELECT * INTO #tP1 FROM (
			SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(Wiraniaga, '[BLANK]') Wiraniaga, 
			COUNT(Hist.LastProgress) P, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator
			FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
			LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
				HstITS.CompanyCode = Hist.CompanyCode AND
				HstITS.BranchCode = Hist.BranchCode AND
				HstITS.InquiryNumber = Hist.InquiryNumber 
			 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
				AND Hist.LastProgress = 'P'
				AND HstITS.LastProgress = 'P' -- penambahan 1 April 2014
				AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
				 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
				and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress<>'P'
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP','SPK')
															 and convert(varchar,h.UpdateDate,112)<@StartDate))))
															 and HstITS.LastProgress not in ('DO','DELIVERY','LOST')		
															  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)	 
			 GROUP BY  Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tP	
	
	SELECT * INTO #tP2 FROM (
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(Wiraniaga, '[BLANK]') Wiraniaga, 
			COUNT(Hist.LastProgress) P, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator
			FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
			LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
				HstITS.CompanyCode = Hist.CompanyCode AND
				HstITS.BranchCode = Hist.BranchCode AND
				HstITS.InquiryNumber = Hist.InquiryNumber 
			 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
				AND Hist.LastProgress = 'P'
				AND HstITS.LastProgress = 'P' -- penambahan 1 April 2014
				AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
				 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
				and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress<>'P'
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)
				 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
														   where h.CompanyCode=Hist.CompanyCode
															 and h.BranchCode=Hist.BranchCode
															 and h.InquiryNumber=Hist.InquiryNumber
															 and h.LastProgress not in ('P','HP','SPK')
															 and convert(varchar,h.UpdateDate,112)<@StartDate)))	 
				AND CONVERT(VARCHAR, HstITS.LastUpdateDate, 112) <= CONVERT(VARCHAR, @EndDate, 112))		
				 and HstITS.LastProgress not in ('DO','DELIVERY','LOST')															 
			 GROUP BY  Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tP2

	SELECT * INTO #tLOST FROM (
			SELECT Hist.CompanyCode, Hist.BranchCode, Wiraniaga, COUNT(Hist.LastProgress) LOST, SalesCoordinator  
					FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
					INNER JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
						HstITS.CompanyCode = Hist.CompanyCode AND
						HstITS.BranchCode = Hist.BranchCode AND
						HstITS.InquiryNumber = Hist.InquiryNumber 
					 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
						AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
						AND Hist.LastProgress = 'LOST'
						AND HstITS.LastProgress = 'LOST' -- penambahan 1 April 2014
						AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
					GROUP BY Hist.CompanyCode, Hist.BranchCode, Wiraniaga, SalesCoordinator) #tLOST		
	
	SELECT * INTO #tNEW FROM (
		SELECT CompanyCode, BranchCode, Wiraniaga, COUNT(LastProgress) NEW, SalesCoordinator
		FROM SuzukiR4..pmHstITS WITH (NOLOCK, NOWAIT)
		WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode
			AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode	 
			AND CONVERT(VARCHAR, InquiryDate, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)
		GROUP BY  CompanyCode, BranchCode, Wiraniaga, SalesCoordinator) #tNEW	
	
	SELECT * INTO #tSalesmanNational1 FROM(
		SELECT DISTINCT a.CompanyCode, a.BranchCode
		,ISNULL(case when HstITS.WiraNiaga = '' then 'SC-'+HstITS.SalesCoordinator else HstITS.Wiraniaga end, '') EmployeeID
		,'10' PositionID, ISNULL(HstITS.SalesCoordinator,'') SpvEmployeeID, ISNULL(HstITS.SalesHead, '') SalesHead, ISNULL(HstITS.BranchHead, '') BranchHead
		,ISNULL(NEW.NEW, 0) NEW		
		--, 0 NEW
		,ISNULL(CASE WHEN @TypeReport = '0' THEN P1.P ELSE P2.P END, (CASE WHEN HstITS.WiraNiaga IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SUM(P) FROM #tP1 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'), 0) ELSE ISNULL((SELECT SUM(P) FROM #tP2 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'), 0) END) END)) P		 
		,ISNULL(CASE WHEN @TypeReport = '0' THEN HP1.HP ELSE HP2.HP END, (CASE WHEN HstITS.WiraNiaga IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SUM(HP) FROM #tHP1 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) ELSE ISNULL((SELECT SUM(HP) FROM #tHP2 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) END) END)) HP		
		,ISNULL(CASE WHEN @TypeReport = '0' THEN SPK1.SPK ELSE SPK2.SPK END, (CASE WHEN HstITS.WiraNiaga IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SUM(SPK) FROM #tSPK1 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) ELSE ISNULL((SELECT SUM(SPK) FROM #tSPK2 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) END) END)) SPK

		,(ISNULL(CASE WHEN @TypeReport = '0' THEN P1.P ELSE P2.P END, (CASE WHEN HstITS.WiraNiaga IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SUM(P) FROM #tP1 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'), 0) ELSE ISNULL((SELECT SUM(P) FROM #tP2 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'), 0) END) END))
			+ISNULL(CASE WHEN @TypeReport = '0' THEN HP1.HP ELSE HP2.HP END, (CASE WHEN HstITS.WiraNiaga IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SUM(HP) FROM #tHP1 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) ELSE ISNULL((SELECT SUM(HP) FROM #tHP2 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) END) END))
			+ISNULL(CASE WHEN @TypeReport = '0' THEN SPK1.SPK ELSE SPK2.SPK END, (CASE WHEN HstITS.WiraNiaga IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SUM(SPK) FROM #tSPK1 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) ELSE ISNULL((SELECT SUM(SPK) FROM #tSPK2 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND Wiraniaga = '[BLANK]'),0) END) END))) SumOuts

		,ISNULL(DO.DO, 0) DO, ISNULL(DELIVERY.DELIVERY, 0) DELIVERY, ISNULL(LOST.LOST, 0) LOST			
		FROM SuzukiR4..pmStatusHistory a WITH (NOLOCK, NOWAIT)
		LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON HstITS.CompanyCode = a.CompanyCode AND HstITS.BranchCode = a.BranchCode AND HstITS.InquiryNumber = a.InquiryNumber 
		LEFT JOIN SuzukiR4..gnMstDealerMapping b WITH (NOLOCK, NOWAIT) on a.CompanyCode = b.DealerCode	
		LEFT JOIN #tNEW NEW WITH (NOLOCK, NOWAIT) ON NEW.CompanyCode = a.CompanyCode AND NEW.BranchCode = a.BranchCode AND NEW.Wiraniaga = HstITS.Wiraniaga AND NEW.SalesCoordinator = HstITS.SalesCoordinator	
		LEFT JOIN #tP1 P1 WITH (NOLOCK, NOWAIT) ON P1.CompanyCode = a.CompanyCode AND P1.BranchCode = a.BranchCode AND P1.Wiraniaga = HstITS.Wiraniaga AND P1.SalesCoordinator = HstITS.SalesCoordinator	
		LEFT JOIN #tP2 P2 WITH (NOLOCK, NOWAIT)	ON P2.CompanyCode = a.CompanyCode AND P2.BranchCode = a.BranchCode AND P2.Wiraniaga = HstITS.Wiraniaga AND P2.SalesCoordinator = HstITS.SalesCoordinator				
		LEFT JOIN #tHP1 HP1 WITH (NOLOCK, NOWAIT) ON HP1.CompanyCode = a.CompanyCode AND HP1.BranchCode = a.BranchCode AND HP1.Wiraniaga = HstITS.Wiraniaga AND HP1.SalesCoordinator = HstITS.SalesCoordinator 			
		LEFT JOIN #tHP2 HP2 WITH (NOLOCK, NOWAIT) ON HP2.CompanyCode = a.CompanyCode AND HP2.BranchCode = a.BranchCode AND HP2.Wiraniaga = HstITS.Wiraniaga	AND HP2.SalesCoordinator = HstITS.SalesCoordinator 			
		LEFT JOIN #tSPK1 SPK1 WITH (NOLOCK, NOWAIT) ON SPK1.CompanyCode = a.CompanyCode AND SPK1.BranchCode = a.BranchCode AND SPK1.Wiraniaga = HstITS.Wiraniaga AND SPK1.SalesCoordinator = HstITS.SalesCoordinator 
		LEFT JOIN #tSPK2 SPK2 WITH (NOLOCK, NOWAIT) ON SPK2.CompanyCode = a.CompanyCode AND SPK2.BranchCode = a.BranchCode AND SPK2.Wiraniaga = HstITS.Wiraniaga AND SPK2.SalesCoordinator = HstITS.SalesCoordinator 	
		LEFT JOIN #tDO DO WITH (NOLOCK, NOWAIT) ON DO.CompanyCode = a.CompanyCode AND DO.BranchCode = a.BranchCode AND DO.Wiraniaga = HstITS.Wiraniaga AND DO.SalesCoordinator = HstITS.SalesCoordinator 	
		LEFT JOIN #tDELIVERY DELIVERY WITH (NOLOCK, NOWAIT) ON DELIVERY.CompanyCode = a.CompanyCode AND DELIVERY.BranchCode = a.BranchCode AND DELIVERY.Wiraniaga = HstITS.Wiraniaga AND DELIVERY.SalesCoordinator = HstITS.SalesCoordinator 			
		LEFT JOIN #tLOST LOST WITH (NOLOCK, NOWAIT) ON LOST.CompanyCode = a.CompanyCode AND LOST.BranchCode = a.BranchCode AND LOST.Wiraniaga = HstITS.Wiraniaga AND LOST.SalesCoordinator = HstITS.SalesCoordinator						   					   		   			   		
		WHERE (CASE WHEN @Area = '' THEN '' ELSE b.Area END) = @Area				
			  AND (CASE WHEN @DealerCode = '' THEN '' ELSE a.CompanyCode END) = @DealerCode
			  AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode	 
	) #tSalesmanNational1
	
	SELECT * INTO #tSalesmanNational FROM(
		select NEW.CompanyCode, NEW.BranchCode, NEW.Wiraniaga EmployeeID, ISNULL(a.PositionID, '10') PositionID, NEW.SalesCoordinator SpvEmployeeID, isnull(a.SalesHead, '') SalesHead
		, isnull(a.BranchHead, '') BranchHead, ISNULL(NEW.NEW, 0) NEW, isnull(a.P, 0) P, isnull(a.HP, 0) HP, isnull(a.SPK, 0) SPK
		, ISNULL(a.SumOuts, 0) SumOuts, ISNULL(a.do, 0) DO, ISNULL(a.delivery, '') delivery, ISNULL(a.lost, 0) lost
		from #tNEW NEW
		left join #tSalesmanNational1 a WITH (NOLOCK, NOWAIT) ON NEW.CompanyCode = a.CompanyCode AND NEW.BranchCode = a.BranchCode AND NEW.Wiraniaga = a.EmployeeID AND NEW.SalesCoordinator = a.SpvEmployeeID
		where a.EmployeeID is null
		union
		select distinct CompanyCode, BranchCode, EmployeeID, PositionID, SpvEmployeeID,  
			(Select top 1 SalesHead from #tSalesmanNational1 a where a.CompanyCode = #tSalesmanNational1.CompanyCode and a.BranchCode = #tSalesmanNational1.BranchCode and a.EmployeeID = #tSalesmanNational1.EmployeeID) SalesHead, 
			BranchHead, NEW, P, HP, SPK,SumOuts, DO, Delivery, LOST
			from #tSalesmanNational1
			where BranchHead != ''
	) #tSalesmanNational	
	--select * from #tSalesmanNational
		
	END	 	
	ELSE
	BEGIN
	SELECT * INTO #tSalesman FROM(
	SELECT a.CompanyCode, a.BranchCode, a.EmployeeID, a.PositionID, 
	(SELECT Distinct(EmployeeID) FROM SuzukiR4..PmMstTeamMembers 
	WHERE CompanyCode = a.CompanyCode AND 
		BranchCode = a.BranchCode AND 
		TeamID IN (SELECT Distinct(TeamID) FROM SuzukiR4..PmMstTeamMembers 
					WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode	 
					AND EmployeeID = a.EmployeeID AND IsSupervisor = 0)
		AND IsSupervisor = 1) SpvEmployeeID,
	(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
	WHERE CompanyCode = a.CompanyCode AND
		BranchCode = a.BranchCode AND
		EmployeeID = a.EmployeeID AND
		CONVERT(VARCHAR, InquiryDate, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) NEW,
		
	CASE WHEN @TypeReport = '0' THEN
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID AND
			LastProgress = 'P' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) 
	ELSE
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID AND
			LastProgress = 'P' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) END P, 
			
	CASE WHEN @TypeReport = '0' THEN			
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID and
			LastProgress = 'HP' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112))
	ELSE
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID and
			LastProgress = 'HP' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) END HP, 
			
	(CASE WHEN @TypeReport = '0' THEN
		(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
			INNER JOIN SuzukiR4..pmKdp KDP ON 
			KDP.CompanyCode = Hist.CompanyCode AND
			KDP.BranchCode = Hist.BranchCode AND
			KDP.InquiryNumber = Hist.InquiryNumber 
		 WHERE Hist.CompanyCode = a.CompanyCode AND
			Hist.BranchCode = a.BranchCode AND
			KDP.EmployeeID = a.EmployeeID AND
			CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
			Hist.LastProgress = 'SPK')
		ELSE
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
			WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID and
			LastProgress = 'SPK' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) 
			END) SPK,
			
	(CASE WHEN @TypeReport = '0' THEN			  
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID AND
			LastProgress = 'P' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) +
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID and
			LastProgress = 'HP' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) +		  
		(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
			INNER JOIN SuzukiR4..pmKdp KDP ON 
			KDP.CompanyCode = Hist.CompanyCode AND
			KDP.BranchCode = Hist.BranchCode AND
			KDP.InquiryNumber = Hist.InquiryNumber 
		 WHERE Hist.CompanyCode = a.CompanyCode AND
			Hist.BranchCode = a.BranchCode AND
			KDP.EmployeeID = a.EmployeeID AND
			CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
			Hist.LastProgress = 'SPK')
	ELSE
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID AND
			LastProgress = 'P' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) +
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID AND
			LastProgress = 'HP' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) +				
		(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
		WHERE CompanyCode = a.CompanyCode AND
			BranchCode = a.BranchCode AND
			EmployeeID = a.EmployeeID and
			LastProgress = 'SPK' AND 
			CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) 
	 END) SumOuts
	 
	, (SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
		INNER JOIN SuzukiR4..pmKdp KDP ON 
		KDP.CompanyCode = Hist.CompanyCode AND
		KDP.BranchCode = Hist.BranchCode AND
		KDP.InquiryNumber = Hist.InquiryNumber 
	 WHERE Hist.CompanyCode = a.CompanyCode AND
		Hist.BranchCode = a.BranchCode AND
		KDP.EmployeeID = a.EmployeeID AND
		CONVERT(VARCHAR, Hist.UpdateDate, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
		Hist.LastProgress = 'DO') DO
	, (SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
		INNER JOIN SuzukiR4..pmKdp KDP ON 
		KDP.CompanyCode = Hist.CompanyCode AND
		KDP.BranchCode = Hist.BranchCode AND
		KDP.InquiryNumber = Hist.InquiryNumber 
	 WHERE Hist.CompanyCode = a.CompanyCode AND
		Hist.BranchCode = a.BranchCode AND
		KDP.EmployeeID = a.EmployeeID AND
		CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
		Hist.LastProgress = 'DELIVERY') DELIVERY
	, (SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
		INNER JOIN SuzukiR4..pmKdp KDP ON 
		KDP.CompanyCode = Hist.CompanyCode AND
		KDP.BranchCode = Hist.BranchCode AND
		KDP.InquiryNumber = Hist.InquiryNumber 
	 WHERE Hist.CompanyCode = a.CompanyCode AND
		Hist.BranchCode = a.BranchCode AND
		KDP.EmployeeID = a.EmployeeID AND
		CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
		Hist.LastProgress = 'LOST') LOST
FROM SuzukiR4..PmPosition a
LEFT JOIN SuzukiR4..gnMstDealerMapping b on a.CompanyCode = b.DealerCode	
WHERE (b.Area like Case when @Area <> ''
			then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
					then 'JABODETABEK'
					else @Area end
			else '' end
	   or b.Area like Case when @Area <> '' 
					then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
							then 'CABANG'
							else @Area end
					else '' end) 						
	  AND (CASE WHEN @DealerCode = '' THEN '' ELSE b.DealerCode END) = @DealerCode
	  AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode	 
	  AND a.PositionID = 10 		
      ) #tSalesman
END  
--#endregion

--#region  SELECT COORD 
IF @National = '1'
BEGIN
	SELECT * INTO #tSalesCoNational  FROM(	 
	SELECT DISTINCT
		a.CompanyCode,
		a.BranchCode,
		a.SpvEmployeeID EmployeeID,
		'20' PositionID,
		SalesHead ShEmployeeID,
		BranchHead BMEmployeeID,
		ISNULL(SUM(a.NEW),0) NEW,
		ISNULL(SUM(a.P),0) P,
		ISNULL(SUM(a.HP),0) HP,
		ISNULL(SUM(a.SPK),0) SPK,
		ISNULL(SUM(a.SumOuts),0) SumOuts,
		ISNULL(SUM(a.DO),0) DO,
		ISNULL(SUM(a.DELIVERY),0) DELIVERY,
		ISNULL(SUM(a.LOST),0) LOST
	FROM #tSalesmanNational  a
	--WHERE a.SpvEmployeeID <> ''
	GROUP BY a.CompanyCode,
		a.BranchCode,
		a.SpvEmployeeID,
		a.SalesHead,
		a.BranchHead
	) #tSalesCoNational 		
END
ELSE
BEGIN
	SELECT * INTO #tSalesCo FROM(	 
	SELECT
		a.CompanyCode,
		a.BranchCode,
		a.SpvEmployeeID EmployeeID,
		'20' PositionID,
		(SELECT Distinct(EmployeeID) FROM SuzukiR4..PmMstTeamMembers 
		WHERE CompanyCode = a.CompanyCode AND 
			BranchCode = a.BranchCode AND 
			TeamID IN (SELECT Distinct(TeamID) FROM SuzukiR4..PmMstTeamMembers 
						WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode
						AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode	 
						AND EmployeeID = a.SpvEmployeeID AND IsSupervisor = 0)
			AND IsSupervisor = 1) ShEmployeeID,
		ISNULL(SUM(a.NEW),0) NEW,
		ISNULL(SUM(a.P),0) P,
		ISNULL(SUM(a.HP),0) HP,
		ISNULL(SUM(a.SPK),0) SPK,
		ISNULL(SUM(a.SumOuts),0) SumOuts,
		ISNULL(SUM(a.DO),0) DO,
		ISNULL(SUM(a.DELIVERY),0) DELIVERY,
		ISNULL(SUM(a.LOST),0) LOST
	FROM #tSalesman a
	GROUP BY a.CompanyCode,
		a.BranchCode,
		a.SpvEmployeeID
	) #tSalesCo
END	
--#endregion

--#region  SELECT SALES HEAD 	 
IF @National = '1'
BEGIN
	SELECT * INTO #tSalesHeadNational FROM(			
	SELECT DISTINCT
		a.CompanyCode,
		a.BranchCode,
		a.ShEmployeeID EmployeeID,
		'30' PositionID,
		a.BMEmployeeID,
		ISNULL(SUM(a.NEW),0) NEW,
		ISNULL(SUM(a.P),0) P,
		ISNULL(SUM(a.HP),0) HP,
		ISNULL(SUM(a.SPK),0) SPK,
		ISNULL(SUM(a.SumOuts),0) SumOuts,
		ISNULL(SUM(a.DO),0) DO,
		ISNULL(SUM(a.DELIVERY),0) DELIVERY,
		ISNULL(SUM(a.LOST),0) LOST
	FROM #tSalesCoNational a
	--WHERE a.ShEmployeeID <> ''
	GROUP BY a.CompanyCode,
		a.BranchCode,
		a.ShEmployeeID,
		a.BMEmployeeID
	) #tSalesHeadNational
END
ELSE
BEGIN
	SELECT * INTO #tSalesHead FROM(			
	SELECT
		a.CompanyCode,
		a.BranchCode,
		a.ShEmployeeID EmployeeID,
		'30' PositionID,
		(SELECT Distinct(EmployeeID) FROM SuzukiR4..PmMstTeamMembers 
		WHERE CompanyCode = a.CompanyCode AND 
			BranchCode = a.BranchCode AND 
			TeamID IN (SELECT Distinct(TeamID) FROM SuzukiR4..PmMstTeamMembers 
						WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode
						AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode	 
						AND EmployeeID = a.ShEmployeeID AND IsSupervisor = 0)
			AND IsSupervisor = 1) BMEmployeeID,
		ISNULL(SUM(a.NEW),0) NEW,
		ISNULL(SUM(a.P),0) P,
		ISNULL(SUM(a.HP),0) HP,
		ISNULL(SUM(a.SPK),0) SPK,
		ISNULL(SUM(a.SumOuts),0) SumOuts,
		ISNULL(SUM(a.DO),0) DO,
		ISNULL(SUM(a.DELIVERY),0) DELIVERY,
		ISNULL(SUM(a.LOST),0) LOST
	FROM #tSalesCo a
	GROUP BY a.CompanyCode,
		a.BranchCode,
		a.ShEmployeeID
	) #tSalesHead
END
--#endregion

--#region  SELECT BRANCH MANAGER 	 
IF @National = '1'
BEGIN
	SELECT * INTO #tSalesBMNational FROM(			
	SELECT DISTINCT
		a.CompanyCode,
		a.BranchCode,
		a.BMEmployeeID EmployeeID,
		'40' PositionID,
		'' SpvEmployeeID,
		ISNULL(SUM(a.NEW),0) NEW,
		ISNULL(SUM(a.P),0) P,
		ISNULL(SUM(a.HP),0) HP,
		ISNULL(SUM(a.SPK),0) SPK,
		ISNULL(SUM(a.SumOuts),0) SumOuts,
		ISNULL(SUM(a.DO),0) DO,
		ISNULL(SUM(a.DELIVERY),0) DELIVERY,
		ISNULL(SUM(a.LOST),0) LOST
		FROM #tSalesHeadNational a
		--WHERE a.BMEmployeeID <> ''
	GROUP BY a.CompanyCode,
		a.BranchCode,
		a.BMEmployeeID
	) #tSalesBMNational			
END
ELSE
BEGIN
	SELECT * INTO #tSalesBM FROM(			
	SELECT
		a.CompanyCode,
		a.BranchCode,
		a.BMEmployeeID EmployeeID,
		'40' PositionID,
		'' SpvEmployeeID,
		ISNULL(SUM(a.NEW),0) NEW,
		ISNULL(SUM(a.P),0) P,
		ISNULL(SUM(a.HP),0) HP,
		ISNULL(SUM(a.SPK),0) SPK,
		ISNULL(SUM(a.SumOuts),0) SumOuts,
		ISNULL(SUM(a.DO),0) DO,
		ISNULL(SUM(a.DELIVERY),0) DELIVERY,
		ISNULL(SUM(a.LOST),0) LOST
		FROM #tSalesHead a
	GROUP BY a.CompanyCode,
		a.BranchCode,
		a.BMEmployeeID
	) #tSalesBM	
END	
--#endregion

--#region  SELECT UNION ALL
IF @National = '1'
BEGIN
	SELECT * INTO #tUnionNational FROM(
	SELECT DISTINCT CompanyCode, BranchCode, EmployeeID, PositionID, NEW, P, HP, SPK, SumOuts, DO, DELIVERY, LOST FROM #tSalesBMNational
	WHERE EmployeeID != NULL UNION
	SELECT DISTINCT CompanyCode, BranchCode, EmployeeID, PositionID, NEW, P, HP, SPK, SumOuts, DO, DELIVERY, LOST FROM #tSalesHeadNational 
	WHERE (CASE WHEN @SalesHead  = '' THEN '' ELSE EmployeeID END) = @SalesHead UNION
	SELECT DISTINCT CompanyCode, BranchCode, EmployeeID, PositionID, NEW, P, HP, SPK, SumOuts, DO, DELIVERY, LOST FROM #tSalesCoNational 
	WHERE (CASE WHEN @SalesCoordinator  = '' THEN '' ELSE EmployeeID END) = @SalesCoordinator
		AND (CASE WHEN @SalesHead  = '' THEN '' ELSE ShEmployeeID END) = @SalesHead
	UNION
	SELECT DISTINCT CompanyCode, BranchCode, EmployeeID, PositionID, NEW, P, HP, SPK, SumOuts, DO, DELIVERY, LOST FROM #tSalesmanNational
	WHERE (CASE WHEN @SalesHead  = '' THEN '' ELSE SalesHead END) = @SalesHead
		AND (CASE WHEN @SalesCoordinator  = '' THEN '' ELSE SpvEmployeeID END) = @SalesCoordinator
		AND (CASE WHEN @Salesman  = '' THEN '' ELSE EmployeeID END) = @Salesman
	) #tUnionNational
	ORDER BY PositionID DESC		
END
ELSE
BEGIN	
	SELECT * INTO #tUnion FROM(
	SELECT * FROM #tSalesBM UNION
	SELECT * FROM #tSalesHead 
	WHERE (CASE WHEN @SalesHead  = '' THEN '' ELSE EmployeeID END) = @SalesHead UNION
	SELECT * FROM #tSalesCo 
	WHERE (CASE WHEN @SalesCoordinator  = '' THEN '' ELSE EmployeeID END) = @SalesCoordinator
	UNION
	SELECT * FROM #tSalesman
	WHERE (CASE WHEN @SalesCoordinator  = '' THEN '' ELSE SpvEmployeeID END) = @SalesCoordinator
		AND (CASE WHEN @Salesman  = '' THEN '' ELSE EmployeeID END) = @Salesman
	) #tUnion
	ORDER BY PositionID DESC
END
--#endregion

--#region SELECT ALL
IF @National = '1'
	BEGIN		
		SELECT CASE WHEN @TypeReport = '0' THEN 'Summary' ELSE 'Saldo' END TypeReport,
			CASE @ProductivityBy 
				WHEN '0' THEN 'Salesman'
				WHEN '1' THEN 'Vehicle Type'
				WHEN '2' THEN 'Source Data'
			END ProductivityBy,
			CONVERT(VARCHAR, @EndDate, 105) PerDate, 
			CASE WHEN @Area = '' THEN 'ALL' ELSE @Area END Area,
			CONVERT(VARCHAR, @StartDate, 105) + ' s/d ' + CONVERT(VARCHAR, @EndDate, 105) PeriodeDO,
			CASE WHEN @SalesHead = '' THEN 'ALL' ELSE @SalesHead END SalesHead,
			CASE WHEN @SalesCoordinator = '' THEN 'ALL' ELSE @SalesCoordinator END SalesCoordinator,
			CASE WHEN @Salesman = '' THEN 'ALL' ELSE @Salesman END Salesman,			
			(SELECT LookupValueName FROM SuzukiR4..GnMstLookUpDtl WHERE CodeID = 'PGRD' AND LookUpValue = a.PositionID) Position,
			CASE WHEN @DealerCode = '' THEN 'ALL' ELSE (SELECT DealerName FROM SuzukiR4..gnMstDealerMapping WHERE DealerCode = @DealerCode and Area = @Area ) END Dealer,
			CASE WHEN @OutletCode = '' THEN 'ALL' ELSE (SELECT OutletName FROM SuzukiR4..gnMstDealerOutletMapping WHERE CompanyCode = @DealerCode AND OutletCode = @OutletCode) END Outlet,
			a.EmployeeID, a.EmployeeID EmployeeName,		
			ISNULL(SUM(a.P), 0) NEW,
			ISNULL(SUM(a.P), 0) P,
			ISNULL(SUM(a.HP), 0) HP,
			ISNULL(SUM(a.SPK), 0) SPK,
			ISNULL(SUM(a.SumOuts), 0) SumOuts,
			ISNULL(SUM(a.DO), 0) DO,
			ISNULL(SUM(a.DELIVERY), 0) DELIVERY,
			ISNULL(SUM(a.LOST), 0) LOST	
			
			--ISNULL(CASE CAST(a.NEW AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.NEW AS VARCHAR) END, '-') NEW,
			--ISNULL(CASE CAST(a.P AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.P AS VARCHAR) END, '-') P,
			--ISNULL(CASE CAST(a.HP AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.HP AS VARCHAR) END, '-') HP,
			--ISNULL(CASE CAST(a.SPK AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.SPK AS VARCHAR) END, '-') SPK,
			--ISNULL(CASE CAST(a.SumOuts AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.SumOuts AS VARCHAR) END, '-') SumOuts,
			--ISNULL(CASE CAST(a.DO AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.DO AS VARCHAR) END, '-') DO,
			--ISNULL(CASE CAST(a.DELIVERY AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.DELIVERY AS VARCHAR) END, '-') DELIVERY,
			--ISNULL(CASE CAST(a.LOST AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(a.LOST AS VARCHAR) END, '-') LOST	
		FROM #tUnionNational a
		LEFT JOIN SuzukiR4..gnMstDealerMapping c on a.CompanyCode = c.DealerCode	
		WHERE 
		 (CASE WHEN @DealerCode = '' THEN '' ELSE c.DealerCode END) = @DealerCode
		  AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode	 
		  AND a.PositionID <> 60 
		  AND a.EmployeeID != 'NULL' 
		GROUP BY a.CompanyCode, a.BranchCode, a.PositionID, a.EmployeeID
		ORDER BY  a.CompanyCode, a.BranchCode, a.PositionID DESC
		
		DROP TABLE #tSalesmanNational, #tSalesCoNational, #tSalesHeadNational, #tSalesBMNational, #tUnionNational, #tSPK1, #tSPK2, #tDO, #tDELIVERY, #tLOST, #tHP1, #tHP2, #tP1, #tNEW, #tP2, #tSalesmanNational1
	END
	ELSE 
	BEGIN
		SELECT CASE WHEN @TypeReport = '0' THEN 'Summary' ELSE 'Saldo' END TypeReport,
			CASE @ProductivityBy 
				WHEN '0' THEN 'Salesman'
				WHEN '1' THEN 'Vehicle Type'
				WHEN '2' THEN 'Source Data'
			END ProductivityBy,
			CONVERT(VARCHAR, @EndDate, 105) PerDate,  CASE WHEN @Area = '' THEN 'ALL' ELSE @Area END Area, CONVERT(VARCHAR, @StartDate, 105) + ' s/d ' + CONVERT(VARCHAR, @EndDate, 105) PeriodeDO,
			CASE WHEN @SalesHead = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND EmployeeID = @SalesHead) END SalesHead,
			CASE WHEN @SalesCoordinator = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND EmployeeID = @SalesCoordinator) END SalesCoordinator,
			CASE WHEN @Salesman = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND EmployeeID = @Salesman) END Salesman,
			(SELECT LookupValueName FROM SuzukiR4..GnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'PGRD' AND LookUpValue = a.PositionID) Position,
			CASE WHEN @DealerCode = '' THEN 'ALL' ELSE (SELECT DealerName FROM SuzukiR4..gnMstDealerMapping WHERE DealerCode = @DealerCode) END Dealer,
			CASE WHEN @OutletCode = '' THEN 'ALL' ELSE (SELECT BranchName FROM SuzukiR4..gnMstOrganizationDtl WHERE CompanyCode = @DealerCode AND BranchCode = @OutletCode) END Outlet,
			b.EmployeeID,
			(SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND EmployeeID = a.EmployeeID) EmployeeName,			
			ISNULL(SUM(a.P), 0) NEW,
			ISNULL(SUM(a.P), 0) P,
			ISNULL(SUM(a.HP), 0) HP,
			ISNULL(SUM(a.SPK), 0) SPK,
			ISNULL(SUM(a.SumOuts), 0) SumOuts,
			ISNULL(SUM(a.DO), 0) DO,
			ISNULL(SUM(a.DELIVERY), 0) DELIVERY,
			ISNULL(SUM(a.LOST), 0) LOST	
			
			--ISNULL(CASE CAST(b.NEW AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.NEW AS VARCHAR) END, '-') NEW,
			--ISNULL(CASE CAST(b.P AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.P AS VARCHAR) END, '-') P,
			--ISNULL(CASE CAST(b.HP AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.HP AS VARCHAR) END, '-') HP,
			--ISNULL(CASE CAST(b.SPK AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.SPK AS VARCHAR) END, '-') SPK,
			--ISNULL(CASE CAST(b.SumOuts AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.SumOuts AS VARCHAR) END, '-') SumOuts,
			--ISNULL(CASE CAST(b.DO AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.DO AS VARCHAR) END, '-') DO,
			--ISNULL(CASE CAST(b.DELIVERY AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.DELIVERY AS VARCHAR) END, '-') DELIVERY,
			--ISNULL(CASE CAST(b.LOST AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.LOST AS VARCHAR) END, '-') LOST	
		FROM SuzukiR4..PmPosition a
		INNER JOIN #tUnion b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.EmployeeID = b.EmployeeID AND a.PositionID = b.PositionID
		LEFT JOIN SuzukiR4..gnMstDealerMapping c on a.CompanyCode = c.DealerCode	
		WHERE 
		 (CASE WHEN @DealerCode = '' THEN '' ELSE c.DealerCode END) = @DealerCode
		  AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode	 
		  AND a.PositionID <> 60  
		  AND b.SpvEmployeeID IS NOT NULL
		GROUP BY a.CompanyCode, a.BranchCode, a.PositionID, a.EmployeeID
		ORDER BY a.BranchCode, a.PositionID DESC
		DROP TABLE #tSalesman, #tSalesCo, #tSalesHead, #tSalesBM, #tUnion	
	END	
--#endregion

END
--#endregion

--#region PRODUCTIVITY BY VEHICLE TYPE (1)
ELSE IF @ProductivityBy	= '1'
BEGIN				
	IF @National = '1'
	BEGIN					
	select * into #tNEW2 from(
	SELECT CompanyCode, BranchCode, TipeKendaraan, Variant, COUNT(LastProgress) NEW
		FROM SuzukiR4..pmHstITS WITH (NOLOCK, NOWAIT)
		WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode
			AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode	 
			AND CONVERT(VARCHAR, InquiryDate, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)
		GROUP BY CompanyCode, BranchCode, TipeKendaraan, Variant) #tNEW2									
					
	SELECT * INTO #tP21 FROM (
		SELECT Hist.CompanyCode, Hist.BranchCode,  ISNULL(TipeKendaraan, '[BLANK]') TipeKendaraan, ISNULL(Variant, '[BLANK]') Variant,
		COUNT(Hist.LastProgress) P
		FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
		LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
		HstITS.CompanyCode = Hist.CompanyCode AND
		HstITS.BranchCode = Hist.BranchCode AND
		HstITS.InquiryNumber = Hist.InquiryNumber 
		WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
		AND Hist.LastProgress = 'P'
		AND HstITS.LastProgress = 'P' -- penambahan 1 April 2014
		AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
		 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
		and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress<>'P'
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP')
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP','SPK')
													 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
													  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')		
													  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)	
		GROUP BY  Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tP21	

	SELECT * INTO #tP22 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode,  ISNULL(TipeKendaraan, '[BLANK]') TipeKendaraan, ISNULL(Variant, '[BLANK]') Variant,
		COUNT(Hist.LastProgress) P
		FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
		LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
		HstITS.CompanyCode = Hist.CompanyCode AND
		HstITS.BranchCode = Hist.BranchCode AND
		HstITS.InquiryNumber = Hist.InquiryNumber 
		WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
		AND Hist.LastProgress = 'P'
		AND HstITS.LastProgress = 'P' -- penambahan 1 April 2014
		AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
		 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
		and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress<>'P'
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP')
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP','SPK')
													 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
		AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)
		 and HstITS.LastProgress not in ('DO','DELIVERY','LOST')												
		GROUP BY  Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tP22

	SELECT * INTO #tHP21 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(TipeKendaraan, '[BLANK]') TipeKendaraan, ISNULL(Variant, '[BLANK]') Variant,
				COUNT(Hist.LastProgress) HP
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'HP'
					AND HstITS.LastProgress = 'HP' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))	
																  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')		 
																  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)	
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tHP21


	SELECT * INTO #tHP22 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(TipeKendaraan, '[BLANK]') TipeKendaraan, ISNULL(Variant, '[BLANK]') Variant,
				COUNT(Hist.LastProgress) HP
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'HP'
					AND HstITS.LastProgress = 'HP' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
				 AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)			
				  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')														 
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tHP22

	SELECT * INTO #tSPK21 FROM(
	SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(TipeKendaraan, '[BLANK]') TipeKendaraan, ISNULL(Variant, '[BLANK]') Variant,
				COUNT(Hist.LastProgress) SPK
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'SPK'
					AND HstITS.LastProgress = 'SPK' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))
																  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')	 
																  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)		 
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tSPK21

	SELECT * INTO #tSPK22 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(TipeKendaraan, '[BLANK]') TipeKendaraan, ISNULL(Variant, '[BLANK]') Variant,
				COUNT(Hist.LastProgress) SPK
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'SPK'
					AND HstITS.LastProgress = 'SPK' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
					AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)			 
					 and HstITS.LastProgress not in ('DO','DELIVERY','LOST')	 
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tSPK22

	SELECT * INTO #tDO2 FROM(
	SELECT Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant, COUNT(Hist.LastProgress) DO
	FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
	INNER JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
		HstITS.CompanyCode = Hist.CompanyCode AND
		HstITS.BranchCode = Hist.BranchCode AND
		HstITS.InquiryNumber = Hist.InquiryNumber 
	 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
		AND Hist.LastProgress = 'DO'
		AND HstITS.LastProgress = 'DO' -- penambahan 1 April 2014
		AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
	GROUP BY Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tDO2
		
	SELECT * INTO #tDELIVERY2 FROM(
	SELECT Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant, COUNT(Hist.LastProgress) DELIVERY
	FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
	INNER JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
		HstITS.CompanyCode = Hist.CompanyCode AND
		HstITS.BranchCode = Hist.BranchCode AND
		HstITS.InquiryNumber = Hist.InquiryNumber 
	 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
		AND Hist.LastProgress = 'DELIVERY'
		AND HstITS.LastProgress = 'DELIVERY' -- penambahan 1 April 2014
		AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
	GROUP BY Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tDELIVERY2
		
	SELECT * INTO #tLOST2 FROM(
	SELECT Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant, COUNT(Hist.LastProgress) LOST  
	FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
	INNER JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
		HstITS.CompanyCode = Hist.CompanyCode AND
		HstITS.BranchCode = Hist.BranchCode AND
		HstITS.InquiryNumber = Hist.InquiryNumber 
	 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
		AND Hist.LastProgress = 'LOST'
		AND HstITS.LastProgress = 'LOST' -- penambahan 1 April 2014
		AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
	GROUP BY Hist.CompanyCode, Hist.BranchCode, TipeKendaraan, Variant) #tLOST2

	SELECT * INTO #Temp2 FROM(
	SELECT DISTINCT ISNULL(HstITS.TipeKendaraan, '') TipeKendaraan,
			ISNULL(HstITS.Variant,'') TypeCode,
			ISNULL(NEW.NEW, 0) NEW,		
			ISNULL(CASE WHEN @TypeReport = '0' THEN P1.P ELSE P2.P END, (CASE WHEN HstITS.TipeKendaraan IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT P FROM #tP21 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'), 0) ELSE ISNULL((SELECT P FROM #tP22 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'), 0) END) END)) P,		 
			ISNULL(CASE WHEN @TypeReport = '0' THEN HP1.HP ELSE HP2.HP END, (CASE WHEN HstITS.TipeKendaraan IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT HP FROM #tHP21 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0) ELSE ISNULL((SELECT HP FROM #tHP22 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0)  END) END)) HP,		
			ISNULL(CASE WHEN @TypeReport = '0' THEN SPK1.SPK ELSE SPK2.SPK END, (CASE WHEN HstITS.TipeKendaraan IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SPK FROM #tSPK21 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0) ELSE ISNULL((SELECT SPK FROM #tSPK22 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0) END) END)) SPK,

			(ISNULL(CASE WHEN @TypeReport = '0' THEN P1.P ELSE P2.P END, (CASE WHEN HstITS.TipeKendaraan IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT P FROM #tP21 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'), 0) ELSE ISNULL((SELECT P FROM #tP22 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'), 0) END) END))
				+ISNULL(CASE WHEN @TypeReport = '0' THEN HP1.HP ELSE HP2.HP END, (CASE WHEN HstITS.TipeKendaraan IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT HP FROM #tHP21 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0) ELSE ISNULL((SELECT HP FROM #tHP22 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0) END) END))
				+ISNULL(CASE WHEN @TypeReport = '0' THEN SPK1.SPK ELSE SPK2.SPK END, (CASE WHEN HstITS.TipeKendaraan IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SPK FROM #tSPK21 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0) ELSE ISNULL((SELECT SPK FROM #tSPK22 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND TipeKendaraan = '[BLANK]'),0) END) END))) SumOuts,

			ISNULL(DO.DO, 0) DO, ISNULL(DELIVERY.DELIVERY, 0) DELIVERY, ISNULL(LOST.LOST, 0) LOST			
		FROM SuzukiR4..pmStatusHistory a WITH (NOLOCK, NOWAIT)
		LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON HstITS.CompanyCode = a.CompanyCode AND HstITS.BranchCode = a.BranchCode AND HstITS.InquiryNumber = a.InquiryNumber 
		LEFT JOIN SuzukiR4..gnMstDealerMapping b WITH (NOLOCK, NOWAIT) on a.CompanyCode = b.DealerCode	
		LEFT JOIN #tNEW2 NEW WITH (NOLOCK, NOWAIT) ON NEW.CompanyCode = a.CompanyCode AND NEW.BranchCode = a.BranchCode AND NEW.TipeKendaraan = HstITS.TipeKendaraan AND NEW.Variant = HstITS.Variant
		LEFT JOIN #tP21 P1 WITH (NOLOCK, NOWAIT) ON P1.CompanyCode = a.CompanyCode AND P1.BranchCode = a.BranchCode AND P1.TipeKendaraan = HstITS.TipeKendaraan AND P1.Variant = HstITS.Variant	
		LEFT JOIN #tP22 P2 WITH (NOLOCK, NOWAIT) ON P2.CompanyCode = a.CompanyCode AND P2.BranchCode = a.BranchCode AND P2.TipeKendaraan = HstITS.TipeKendaraan AND P2.Variant = HstITS.Variant				
		LEFT JOIN #tHP21 HP1 WITH (NOLOCK, NOWAIT) ON HP1.CompanyCode = a.CompanyCode AND HP1.BranchCode = a.BranchCode AND HP1.TipeKendaraan = HstITS.TipeKendaraan AND HP1.Variant = HstITS.Variant 			
		LEFT JOIN #tHP22 HP2 WITH (NOLOCK, NOWAIT) ON HP2.CompanyCode = a.CompanyCode AND HP2.BranchCode = a.BranchCode AND HP2.TipeKendaraan = HstITS.TipeKendaraan	AND HP2.Variant = HstITS.Variant 			
		LEFT JOIN #tSPK21 SPK1 WITH (NOLOCK, NOWAIT) ON SPK1.CompanyCode = a.CompanyCode AND SPK1.BranchCode = a.BranchCode AND SPK1.TipeKendaraan = HstITS.TipeKendaraan AND SPK1.Variant = HstITS.Variant 
		LEFT JOIN #tSPK22 SPK2 WITH (NOLOCK, NOWAIT) ON SPK2.CompanyCode = a.CompanyCode AND SPK2.BranchCode = a.BranchCode AND SPK2.TipeKendaraan = HstITS.TipeKendaraan AND SPK2.Variant = HstITS.Variant 	
		LEFT JOIN #tDO2 DO WITH (NOLOCK, NOWAIT) ON DO.CompanyCode = a.CompanyCode AND DO.BranchCode = a.BranchCode AND DO.TipeKendaraan = HstITS.TipeKendaraan AND DO.Variant = HstITS.Variant	 
		LEFT JOIN #tDELIVERY2 DELIVERY WITH (NOLOCK, NOWAIT) ON DELIVERY.CompanyCode = a.CompanyCode AND DELIVERY.BranchCode = a.BranchCode AND DELIVERY.TipeKendaraan = HstITS.TipeKendaraan AND DELIVERY.Variant = HstITS.Variant		
		LEFT JOIN #tLOST2 LOST WITH (NOLOCK, NOWAIT) ON LOST.CompanyCode = a.CompanyCode AND LOST.BranchCode = a.BranchCode AND LOST.TipeKendaraan = HstITS.TipeKendaraan AND LOST.Variant = HstITS.Variant						   					   		   			   		
		WHERE (CASE WHEN @Area = '' THEN '' ELSE b.Area END) = @Area
		AND (CASE WHEN @DealerCode = '' THEN '' ELSE a.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode) #Temp2	

	SELECT 
	CASE WHEN @TypeReport = '0' THEN 'Summary' ELSE 'Saldo' END TypeReport,
		CASE @ProductivityBy 
			WHEN '0' THEN 'Salesman'
			WHEN '1' THEN 'Vehicle Type'
			WHEN '2' THEN 'Source Data'
		END ProductivityBy,
		CONVERT(VARCHAR, @EndDate, 105) PerDate, CASE WHEN @Area = '' THEN 'ALL' ELSE @Area END Area, CONVERT(VARCHAR, @StartDate, 105) + ' s/d ' + CONVERT(VARCHAR, @EndDate, 105) PeriodeDO,
		CASE WHEN @SalesHead = '' THEN 'ALL' ELSE @SalesHead END SalesHead,
		CASE WHEN @SalesCoordinator = '' THEN 'ALL' ELSE @SalesCoordinator END SalesCoordinator,
		CASE WHEN @Salesman = '' THEN 'ALL' ELSE @Salesman END Salesman,
		CASE WHEN @DealerCode = '' THEN 'ALL' ELSE (SELECT DealerName FROM SuzukiR4..gnMstDealerMapping WHERE DealerCode = @DealerCode and Area = @Area) END Dealer,
		CASE WHEN @OutletCode = '' THEN 'ALL' ELSE (SELECT OutletName FROM SuzukiR4..gnMstDealerOutletMapping WHERE DealerCode = @DealerCode AND OutletCode = @OutletCode) END Outlet,
		b.TipeKendaraan,
		ISNULL(SUM(b.P), 0) NEW,
		ISNULL(SUM(b.P), 0) P,
		ISNULL(SUM(b.HP), 0) HP,
		ISNULL(SUM(b.SPK), 0) SPK,
		ISNULL(SUM(b.SumOuts), 0) SumOuts,
		ISNULL(SUM(b.DO), 0) DO,
		ISNULL(SUM(b.DELIVERY), 0) DELIVERY,
		ISNULL(SUM(b.LOST), 0) LOST	
			
	--CASE CAST(ISNULL(b.NEW, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.NEW AS VARCHAR) END NEW,
	--CASE CAST(ISNULL(b.P, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.P AS VARCHAR) END P,
	--CASE CAST(ISNULL(b.HP, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.HP AS VARCHAR) END HP,
	--CASE CAST(ISNULL(b.SPK, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.SPK AS VARCHAR) END SPK,
	--CASE CAST(ISNULL(b.SumOuts, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.SumOuts AS VARCHAR) END SumOuts,
	--CASE CAST(ISNULL(b.DO, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.DO AS VARCHAR) END DO,
	--CASE CAST(ISNULL(b.DELIVERY, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.DELIVERY AS VARCHAR) END DELIVERY,
	--CASE CAST(ISNULL(b.LOST, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.LOST AS VARCHAR) END LOST
	FROM #Temp2 b 	
	GROUP BY b.TipeKendaraan
	
	DROP TABLE #tNEW2, #tP21, #tP22, #tHP21, #tHP22, #tSPK21, #tSPK22, #tDO2, #tDELIVERY2, #tLOST2, #Temp2	
	END					
	ELSE
	BEGIN
		SELECT DISTINCT
	CASE WHEN @TypeReport = '0' THEN 'Summary' ELSE 'Saldo' END TypeReport,
		CASE @ProductivityBy 
			WHEN '0' THEN 'Salesman'
			WHEN '1' THEN 'Vehicle Type'
			WHEN '2' THEN 'Source Data'
		END ProductivityBy,
		CONVERT(VARCHAR, @EndDate, 105) PerDate, @Area Area, CONVERT(VARCHAR, @StartDate, 105) + ' s/d ' + CONVERT(VARCHAR, @EndDate, 105) PeriodeDO,
		CASE WHEN @SalesHead = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = @OutletCode AND EmployeeID = @SalesHead) END SalesHead,
		CASE WHEN @SalesCoordinator = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = @OutletCode AND EmployeeID = @SalesCoordinator) END SalesCoordinator,
		CASE WHEN @Salesman = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = @OutletCode AND EmployeeID = @Salesman) END Salesman,
		CASE WHEN @DealerCode = '' THEN 'ALL' ELSE (SELECT DealerName FROM SuzukiR4..gnMstDealerMapping WHERE DealerCode = @DealerCode and Area = @Area) END Dealer,
		CASE WHEN @OutletCode = '' THEN 'ALL' ELSE (SELECT BranchName FROM SuzukiR4..gnMstOrganizationDtl WHERE CompanyCode = @DealerCode AND BranchCode = @OutletCode) END Outlet,
	(a.GroupCode + ' ' + a.TypeCode) TipeKendaraan,
	ISNULL(b.P, 0) NEW,
	ISNULL(b.P, 0) P,
	ISNULL(b.HP, 0) HP,
	ISNULL(b.SPK, 0) SPK,
	ISNULL(b.SumOuts, 0) SumOuts,
	ISNULL(b.DO, 0) DO,
	ISNULL(b.DELIVERY, 0) DELIVERY,
	ISNULL(b.LOST, 0) LOST	
			
	--CASE CAST(ISNULL(b.NEW, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.NEW AS VARCHAR) END NEW,
	--CASE CAST(ISNULL(b.P, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.P AS VARCHAR) END P,
	--CASE CAST(ISNULL(b.HP, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.HP AS VARCHAR) END HP,
	--CASE CAST(ISNULL(b.SPK, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.SPK AS VARCHAR) END SPK,
	--CASE CAST(ISNULL(b.SumOuts, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.SumOuts AS VARCHAR) END SumOuts,
	--CASE CAST(ISNULL(b.DO, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.DO AS VARCHAR) END DO,
	--CASE CAST(ISNULL(b.DELIVERY, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.DELIVERY AS VARCHAR) END DELIVERY,
	--CASE CAST(ISNULL(b.LOST, 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(b.LOST AS VARCHAR) END LOST
	FROM SuzukiR4..pmGroupTypeSeq a
	LEFT JOIN 
	(
	SELECT a.TipeKendaraan, 
		   a.Variant TypeCode,
		   (SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
			WHERE CompanyCode = a.CompanyCode
				AND BranchCode = a.BranchCode
				AND TipeKendaraan = a.TipeKendaraan 
				AND Variant = a.Variant 
				AND CONVERT(VARCHAR, InquiryDate, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) NEW,
			(CASE WHEN @TypeReport = '0' THEN
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'P'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) 
			ELSE		
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode	
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'P'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) END) P,	
									
			(CASE WHEN @TypeReport = '0' THEN			
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE  CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode		
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'HP'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112))
			ELSE	
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'HP'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) END) HP,
					
			(CASE WHEN @TypeReport = '0' THEN
				(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
					INNER JOIN SuzukiR4..pmKdp KDP ON 
					KDP.CompanyCode = Hist.CompanyCode AND
					KDP.BranchCode = Hist.BranchCode AND
					KDP.InquiryNumber = Hist.InquiryNumber 
				 WHERE  Hist.CompanyCode = a.CompanyCode
					AND Hist.BranchCode = a.BranchCode
					AND KDP.TipeKendaraan = a.TipeKendaraan  
					AND KDP.Variant = a.Variant 				
					AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
					AND Hist.LastProgress = 'SPK')
			ELSE
			(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 	
					AND LastProgress = 'SPK'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) 
				END) SPK,
			
			(CASE WHEN @TypeReport = '0' THEN	
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'P'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) +
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE  CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode		
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'HP'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) +
				(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
					INNER JOIN SuzukiR4..pmKdp KDP ON 
					KDP.CompanyCode = Hist.CompanyCode AND
					KDP.BranchCode = Hist.BranchCode AND
					KDP.InquiryNumber = Hist.InquiryNumber 
				 WHERE Hist.CompanyCode = @DealerCode AND
					Hist.BranchCode = @OutletCode AND
					KDP.TipeKendaraan = a.TipeKendaraan AND 
					KDP.Variant = a.Variant AND				
					CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
					Hist.LastProgress = 'SPK')
			ELSE
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode				
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'P'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) +
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode			
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 
					AND LastProgress = 'HP'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) + 			
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
					WHERE CompanyCode = a.CompanyCode
					AND BranchCode = a.BranchCode	
					AND TipeKendaraan = a.TipeKendaraan  
					AND Variant = a.Variant 	
					AND LastProgress = 'SPK'  
					AND CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) 
					END) SumOuts,
					
			(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
			INNER JOIN SuzukiR4..pmKdp KDP ON 
				KDP.CompanyCode = Hist.CompanyCode AND
				KDP.BranchCode = Hist.BranchCode AND
				KDP.InquiryNumber = Hist.InquiryNumber 
			 WHERE Hist.CompanyCode = a.CompanyCode AND
				Hist.BranchCode = a.BranchCode AND
				KDP.TipeKendaraan = a.TipeKendaraan AND 
				KDP.Variant = a.Variant AND			
				CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
				Hist.LastProgress = 'DO') DO,
			(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
				INNER JOIN SuzukiR4..pmKdp KDP ON 
				KDP.CompanyCode = Hist.CompanyCode AND
				KDP.BranchCode = Hist.BranchCode AND
				KDP.InquiryNumber = Hist.InquiryNumber 
			 WHERE Hist.CompanyCode = a.CompanyCode AND
				Hist.BranchCode = a.BranchCode AND
				KDP.TipeKendaraan = a.TipeKendaraan AND 
				KDP.Variant = a.Variant AND		
				CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
				Hist.LastProgress = 'DELIVERY') DELIVERY,
			(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
				INNER JOIN SuzukiR4..pmKdp KDP ON 
				KDP.CompanyCode = Hist.CompanyCode AND
				KDP.BranchCode = Hist.BranchCode AND
				KDP.InquiryNumber = Hist.InquiryNumber 
			 WHERE Hist.CompanyCode = a.CompanyCode AND
				Hist.BranchCode = a.BranchCode AND
				KDP.TipeKendaraan = a.TipeKendaraan AND 
				KDP.Variant = a.Variant AND		
				CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
				Hist.LastProgress = 'LOST') LOST
	FROM SuzukiR4..pmKdp a
	WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE a.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode
	GROUP BY a.CompanyCode, a.BranchCode, a.TipeKendaraan, a.Variant
	) b ON a.GroupCode = b.TipeKendaraan AND a.TypeCode = b.TypeCode
	WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE a.CompanyCode END) = @DealerCode
	END	
END	
--#endregion

--#region PRODUCTIVITY BY SOURCE DATA (2)	
ELSE IF @ProductivityBy = '2'
BEGIN
	SELECT * INTO #employee_src FROM (
		SELECT CompanyCode, LookUpValue
		FROM SuzukiR4..GnMstLookUpDtl 
		WHERE CodeID = 'PSRC'
	) #employee_src	
				
	IF @National = '1' 
	BEGIN	
		SELECT * INTO #employee_src_2_n FROM
		(
			SELECT DISTINCT Saleshead
			FROM SuzukiR4..pmHstITS a
			LEFT JOIN SuzukiR4..gnMstDealerMapping b on a.CompanyCode = b.DealerCode	
			WHERE (CASE WHEN @Area = '' THEN '' ELSE b.Area END) = @Area				
				  AND (CASE WHEN @DealerCode = '' THEN '' ELSE b.DealerCode END) = @DealerCode
				  AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode	
		) #employee_src_2_n
		
SELECT * INTO #employee_src_3_n FROM
		(
			SELECT DISTINCT SalesCoordinator
				FROM SuzukiR4..pmHstITS a
				LEFT JOIN SuzukiR4..gnMstDealerMapping b on a.CompanyCode = b.DealerCode	
				WHERE (CASE WHEN @Area = '' THEN '' ELSE b.Area END) = @Area				
					  AND (CASE WHEN @DealerCode = '' THEN '' ELSE b.DealerCode END) = @DealerCode
					  AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode	
					  AND SalesHead in (SELECT SalesHead FROM #employee_src_2_n)
		)#employee_src_3_n

SELECT * INTO #tNEW3 FROM (
	SELECT CompanyCode, BranchCode, PerolehanData, SalesCoordinator, COUNT(LastProgress) NEW
	FROM SuzukiR4..pmHstITS WITH (NOLOCK, NOWAIT)
	WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode	 
		AND CONVERT(VARCHAR, InquiryDate, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)
	GROUP BY CompanyCode, BranchCode, PerolehanData, SalesCoordinator
) #tNEW3							  		

SELECT * INTO #tP31 FROM (
		SELECT Hist.CompanyCode, Hist.BranchCode,  ISNULL(PerolehanData, '[BLANK]') PerolehanData, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator,
		COUNT(Hist.LastProgress) P
		FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
		LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
		HstITS.CompanyCode = Hist.CompanyCode AND
		HstITS.BranchCode = Hist.BranchCode AND
		HstITS.InquiryNumber = Hist.InquiryNumber 
		WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
		AND Hist.LastProgress = 'P'
		AND HstITS.LastProgress = 'P' -- penambahan 1 April 2014
		AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
		 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
		and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress<>'P'
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP')
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP','SPK')
													 and convert(varchar,h.UpdateDate,112)<@StartDate))))	
													  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')		
													  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)	 
		GROUP BY  Hist.CompanyCode, Hist.BranchCode, PerolehanData, SalesCoordinator) #tP31	

SELECT * INTO #tP32 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode,  ISNULL(PerolehanData, '[BLANK]') PerolehanData, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator,
		COUNT(Hist.LastProgress) P
		FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
		LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
		HstITS.CompanyCode = Hist.CompanyCode AND
		HstITS.BranchCode = Hist.BranchCode AND
		HstITS.InquiryNumber = Hist.InquiryNumber 
		WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
		AND Hist.LastProgress = 'P'
		AND HstITS.LastProgress = 'P' -- penambahan 1 April 2014
		AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
		 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
		and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress<>'P'
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP')
													 and convert(varchar,h.UpdateDate,112)<@StartDate)
		 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
												   where h.CompanyCode=Hist.CompanyCode
													 and h.BranchCode=Hist.BranchCode
													 and h.InquiryNumber=Hist.InquiryNumber
													 and h.LastProgress not in ('P','HP','SPK')
													 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
		AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)				
		 and HstITS.LastProgress not in ('DO','DELIVERY','LOST')								
		GROUP BY  Hist.CompanyCode, Hist.BranchCode, PerolehanData, SalesCoordinator) #tP32

SELECT * INTO #tHP31 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(PerolehanData, '[BLANK]') PerolehanData, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator,
				COUNT(Hist.LastProgress) HP
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'HP'
					AND HstITS.LastProgress = 'HP' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
																  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')		
																  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)	
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, PerolehanData, SalesCoordinator) #tHP31

SELECT * INTO #tHP32 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(PerolehanData, '[BLANK]') PerolehanData, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator,
				COUNT(Hist.LastProgress) HP
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'HP'
					AND HstITS.LastProgress = 'HP' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
				 AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)					
				  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')												 
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, PerolehanData, SalesCoordinator) #tHP32				 				 

	SELECT * INTO #tSPK31 FROM(
	SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(PerolehanData, '[BLANK]') PerolehanData, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator,
				COUNT(Hist.LastProgress) SPK
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'SPK'
					AND HstITS.LastProgress = 'SPK' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
																  and HstITS.LastProgress not in ('DO','DELIVERY','LOST')
																  AND CONVERT(VARCHAR, HstITS.LastUpdateStatus , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)		 
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, PerolehanData, SalesCoordinator) #tSPK31				 


	SELECT * INTO #tSPK32 FROM(
		SELECT Hist.CompanyCode, Hist.BranchCode, ISNULL(PerolehanData, '[BLANK]') PerolehanData, ISNULL(SalesCoordinator, '[BLANK]') SalesCoordinator,
				COUNT(Hist.LastProgress) SPK
				FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
				LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON 
					HstITS.CompanyCode = Hist.CompanyCode AND
					HstITS.BranchCode = Hist.BranchCode AND
					HstITS.InquiryNumber = Hist.InquiryNumber 
				 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
					AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	
					AND Hist.LastProgress = 'SPK'
					AND HstITS.LastProgress = 'SPK' -- penambahan 1 April 2014
					AND (CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)				
					 or (convert(varchar,Hist.UpdateDate,112) < @StartDate 
					and (Hist.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress<>'P'
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or  Hist.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP')
																 and convert(varchar,h.UpdateDate,112)<@StartDate)
					 or Hist.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
															   where h.CompanyCode=Hist.CompanyCode
																 and h.BranchCode=Hist.BranchCode
																 and h.InquiryNumber=Hist.InquiryNumber
																 and h.LastProgress not in ('P','HP','SPK')
																 and convert(varchar,h.UpdateDate,112)<@StartDate))))	 
					AND CONVERT(VARCHAR, HstITS.LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)			 
					 and HstITS.LastProgress not in ('DO','DELIVERY','LOST')	 
				 GROUP BY  Hist.CompanyCode, Hist.BranchCode, PerolehanData, SalesCoordinator) #tSPK32
				 

SELECT * INTO #tDO3 FROM(
SELECT Hist.CompanyCode, Hist.BranchCode, hstITS.PerolehanData, hstITS.SalesCoordinator, COUNT(Hist.LastProgress) DO
FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
INNER JOIN SuzukiR4..pmHstITS hstITS WITH (NOLOCK, NOWAIT) ON 
	hstITS.CompanyCode = Hist.CompanyCode AND
	hstITS.BranchCode = Hist.BranchCode AND
	hstITS.InquiryNumber = Hist.InquiryNumber 
 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	 	
		AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
		AND Hist.LastProgress = 'DO'
		AND HstITS.LastProgress = 'DO' -- penambahan 1 April 2014
	GROUP BY Hist.CompanyCode, Hist.BranchCode, hstITS.PerolehanData, hstITS.SalesCoordinator) #tDO3

SELECT * INTO #tDELIVERY3 FROM(
SELECT Hist.CompanyCode, Hist.BranchCode, hstITS.PerolehanData, hstITS.SalesCoordinator, COUNT(Hist.LastProgress) DELIVERY
FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
INNER JOIN SuzukiR4..pmHstITS hstITS WITH (NOLOCK, NOWAIT) ON 
	hstITS.CompanyCode = Hist.CompanyCode AND
	hstITS.BranchCode = Hist.BranchCode AND
	hstITS.InquiryNumber = Hist.InquiryNumber 
 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	 	
		AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
		AND Hist.LastProgress = 'DELIVERY'
		AND HstITS.LastProgress = 'DELIVERY' -- penambahan 1 April 2014
	GROUP BY Hist.CompanyCode, Hist.BranchCode, hstITS.PerolehanData, hstITS.SalesCoordinator) #tDELIVERY3

SELECT * INTO #tLOST3 FROM(
SELECT Hist.CompanyCode, Hist.BranchCode, hstITS.PerolehanData, hstITS.SalesCoordinator, COUNT(Hist.LastProgress) LOST
FROM SuzukiR4..pmStatusHistory Hist WITH (NOLOCK, NOWAIT)
INNER JOIN SuzukiR4..pmHstITS hstITS WITH (NOLOCK, NOWAIT) ON 
	hstITS.CompanyCode = Hist.CompanyCode AND
	hstITS.BranchCode = Hist.BranchCode AND
	hstITS.InquiryNumber = Hist.InquiryNumber 
 WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE Hist.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE Hist.BranchCode END) = @OutletCode	 	
		AND CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) 
		AND Hist.LastProgress = 'LOST'
		AND HstITS.LastProgress = 'LOST' -- penambahan 1 April 2014
	GROUP BY Hist.CompanyCode, Hist.BranchCode, hstITS.PerolehanData, hstITS.SalesCoordinator) #tLOST3

SELECT * INTO #Temp3 FROM
(
SELECT DISTINCT HstITS.SalesCoordinator, ISNULL(HstITS.PerolehanData, '') PerolehanData,			
			ISNULL(NEW.NEW, 0) NEW,		
						
			ISNULL(CASE WHEN @TypeReport = '0' THEN P1.P ELSE P2.P END, (CASE WHEN HstITS.PerolehanData IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT P FROM #tP31 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'), 0) ELSE ISNULL((SELECT P FROM #tP32 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'), 0) END) END)) P,		 
			ISNULL(CASE WHEN @TypeReport = '0' THEN HP1.HP ELSE HP2.HP END, (CASE WHEN HstITS.PerolehanData IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT HP FROM #tHP31 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0) ELSE ISNULL((SELECT HP FROM #tHP32 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0)  END) END)) HP,		
			ISNULL(CASE WHEN @TypeReport = '0' THEN SPK1.SPK ELSE SPK2.SPK END, (CASE WHEN HstITS.PerolehanData IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SPK FROM #tSPK31 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0) ELSE ISNULL((SELECT SPK FROM #tSPK32 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0) END) END)) SPK,

			(ISNULL(CASE WHEN @TypeReport = '0' THEN P1.P ELSE P2.P END, (CASE WHEN HstITS.PerolehanData IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT P FROM #tP31 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'), 0) ELSE ISNULL((SELECT P FROM #tP32 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'), 0) END) END))
				+ISNULL(CASE WHEN @TypeReport = '0' THEN HP1.HP ELSE HP2.HP END, (CASE WHEN HstITS.PerolehanData IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT HP FROM #tHP31 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0) ELSE ISNULL((SELECT HP FROM #tHP32 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0) END) END))
				+ISNULL(CASE WHEN @TypeReport = '0' THEN SPK1.SPK ELSE SPK2.SPK END, (CASE WHEN HstITS.PerolehanData IS NOT NULL THEN 0 ELSE (CASE WHEN @TypeReport = '0' THEN ISNULL((SELECT SPK FROM #tSPK31 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0) ELSE ISNULL((SELECT SPK FROM #tSPK32 WITH(NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PerolehanData = '[BLANK]'),0) END) END))) SumOuts,

			ISNULL(DO.DO, 0) DO, ISNULL(DELIVERY.DELIVERY, 0) DELIVERY, ISNULL(LOST.LOST, 0) LOST			
		FROM SuzukiR4..pmStatusHistory a WITH (NOLOCK, NOWAIT)
		LEFT JOIN SuzukiR4..pmHstITS HstITS WITH (NOLOCK, NOWAIT) ON HstITS.CompanyCode = a.CompanyCode AND HstITS.BranchCode = a.BranchCode AND HstITS.InquiryNumber = a.InquiryNumber 
		LEFT JOIN SuzukiR4..gnMstDealerMapping b WITH (NOLOCK, NOWAIT) on a.CompanyCode = b.DealerCode	
		LEFT JOIN #tNEW3 NEW WITH (NOLOCK, NOWAIT) ON NEW.CompanyCode = a.CompanyCode AND NEW.BranchCode = a.BranchCode AND NEW.PerolehanData = HstITS.PerolehanData AND NEW.SalesCoordinator = HstITS.SalesCoordinator
		LEFT JOIN #tP31 P1 WITH (NOLOCK, NOWAIT) ON P1.CompanyCode = a.CompanyCode AND P1.BranchCode = a.BranchCode AND P1.PerolehanData = HstITS.PerolehanData AND P1.SalesCoordinator = HstITS.SalesCoordinator	
		LEFT JOIN #tP32 P2 WITH (NOLOCK, NOWAIT) ON P2.CompanyCode = a.CompanyCode AND P2.BranchCode = a.BranchCode AND P2.PerolehanData = HstITS.PerolehanData AND P2.SalesCoordinator = HstITS.SalesCoordinator				
		LEFT JOIN #tHP31 HP1 WITH (NOLOCK, NOWAIT) ON HP1.CompanyCode = a.CompanyCode AND HP1.BranchCode = a.BranchCode AND HP1.PerolehanData = HstITS.PerolehanData AND HP1.SalesCoordinator = HstITS.SalesCoordinator 			
		LEFT JOIN #tHP32 HP2 WITH (NOLOCK, NOWAIT) ON HP2.CompanyCode = a.CompanyCode AND HP2.BranchCode = a.BranchCode AND HP2.PerolehanData = HstITS.PerolehanData	AND HP2.SalesCoordinator = HstITS.SalesCoordinator 			
		LEFT JOIN #tSPK31 SPK1 WITH (NOLOCK, NOWAIT) ON SPK1.CompanyCode = a.CompanyCode AND SPK1.BranchCode = a.BranchCode AND SPK1.PerolehanData = HstITS.PerolehanData AND SPK1.SalesCoordinator = HstITS.SalesCoordinator 
		LEFT JOIN #tSPK32 SPK2 WITH (NOLOCK, NOWAIT) ON SPK2.CompanyCode = a.CompanyCode AND SPK2.BranchCode = a.BranchCode AND SPK2.PerolehanData = HstITS.PerolehanData AND SPK2.SalesCoordinator = HstITS.SalesCoordinator 	
		LEFT JOIN #tDO3 DO WITH (NOLOCK, NOWAIT) ON DO.CompanyCode = a.CompanyCode AND DO.BranchCode = a.BranchCode AND DO.PerolehanData = HstITS.PerolehanData AND DO.SalesCoordinator = HstITS.SalesCoordinator	 
		LEFT JOIN #tDELIVERY3 DELIVERY WITH (NOLOCK, NOWAIT) ON DELIVERY.CompanyCode = a.CompanyCode AND DELIVERY.BranchCode = a.BranchCode AND DELIVERY.PerolehanData = HstITS.PerolehanData AND DELIVERY.SalesCoordinator = HstITS.SalesCoordinator		
		LEFT JOIN #tLOST3 LOST WITH (NOLOCK, NOWAIT) ON LOST.CompanyCode = a.CompanyCode AND LOST.BranchCode = a.BranchCode AND LOST.PerolehanData = HstITS.PerolehanData AND LOST.SalesCoordinator = HstITS.SalesCoordinator						   					   		   			   		
		WHERE (CASE WHEN @Area = '' THEN '' ELSE b.Area END) = @Area
		AND (CASE WHEN @DealerCode = '' THEN '' ELSE a.CompanyCode END) = @DealerCode
		AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode) #Temp3						
								
SELECT 
		CASE WHEN @TypeReport = '0' THEN 'Summary' ELSE 'Saldo' END TypeReport,
		CASE @ProductivityBy 
			WHEN '0' THEN 'Salesman'
			WHEN '1' THEN 'Vehicle Type'
			WHEN '2' THEN 'Source Data'
		END ProductivityBy,
		CONVERT(VARCHAR, @EndDate, 105) PerDate, CASE WHEN @Area = '' THEN 'ALL' ELSE @Area END Area, 
		CONVERT(VARCHAR, @StartDate, 105) + ' s/d ' + CONVERT(VARCHAR, @EndDate, 105) PeriodeDO,
		CASE WHEN @SalesHead = '' THEN 'ALL' ELSE @SalesHead END SalesHead,
		CASE WHEN @SalesCoordinator = '' THEN 'ALL' ELSE @SalesCoordinator END SalesCoordinator,
		CASE WHEN @Salesman = '' THEN 'ALL' ELSE @Salesman END Salesman,
		CASE WHEN @DealerCode = '' THEN 'ALL' ELSE (SELECT DealerName FROM SuzukiR4..gnMstDealerMapping WHERE DealerCode = @DealerCode and Area = @Area) END Dealer,
		CASE WHEN @OutletCode = '' THEN 'ALL' ELSE (SELECT OutletName FROM SuzukiR4..gnMstDealerOutletMapping WHERE DealerCode = @DealerCode AND OutletCode = @OutletCode) END Outlet,
		PerolehanData Source,
		
		ISNULL(SUM(P), 0) NEW,
		ISNULL(SUM(P), 0) P,
		ISNULL(SUM(HP), 0) HP,
		ISNULL(SUM(SPK), 0) SPK,
		ISNULL(SUM(SumOuts), 0)  SumOuts,
		ISNULL(SUM(DO), 0) DO,
		ISNULL(SUM(DELIVERY), 0) DELIVERY,
		ISNULL(SUM(LOST), 0) LOST
		
		--CASE CAST(ISNULL(SUM(NEW), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(NEW) AS VARCHAR) END NEW,
		--CASE CAST(ISNULL(SUM(P), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(P) AS VARCHAR) END P,
		--CASE CAST(ISNULL(SUM(HP), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(HP) AS VARCHAR) END HP,
		--CASE CAST(ISNULL(SUM(SPK), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(SPK) AS VARCHAR) END SPK,
		--CASE CAST(ISNULL(SUM(SumOuts), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(SumOuts) AS VARCHAR) END SumOuts,
		--CASE CAST(ISNULL(SUM(DO), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(DO) AS VARCHAR) END DO,
		--CASE CAST(ISNULL(SUM(DELIVERY), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(DELIVERY) AS VARCHAR) END DELIVERY,
		--CASE CAST(ISNULL(SUM(LOST), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(LOST) AS VARCHAR) END LOST
	FROM #Temp3 a
	GROUP BY PerolehanData
						  		
	DROP TABLE #employee_src_2_n, #employee_src_3_n, #employee_src, #tNEW3, #tP31, #tP32, #tHP31, #tHP32, #tSPK31, #tSPK32, #tDO3, #tDELIVERY3, #tLOST3, #Temp3
	END
	ELSE
	BEGIN
		SELECT * INTO #employee_src_2 FROM
		(
			SELECT EmployeeID FROM SuzukiR4..PmMstTeamMembers WHERE 
				(CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode 
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode
				AND TeamID IN (SELECT TeamID FROM SuzukiR4..PmMstTeamMembers WHERE 
								(CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode 
								AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode
								AND EmployeeID = @BranchHead) 
				AND EmployeeID <> @BranchHead		
		) #employee_src_2
		
		SELECT * INTO #employee_src_3 FROM
		(
			SELECT EmployeeID FROM SuzukiR4..PmMstTeamMembers WHERE 
				(CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode 
				AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode
				AND TeamID IN (SELECT TeamID FROM SuzukiR4..PmMstTeamMembers WHERE 
								(CASE WHEN @DealerCode = '' THEN '' ELSE CompanyCode END) = @DealerCode 
								AND (CASE WHEN @OutletCode = '' THEN '' ELSE BranchCode END) = @OutletCode
								AND EmployeeID IN (SELECT EmployeeID FROM #employee_src_2) 
								AND IsSupervisor = 1) 
				AND EmployeeID NOT IN (SELECT EmployeeID FROM #employee_src_2)
		 )#employee_src_3
			
			SELECT 
		CASE WHEN @TypeReport = '0' THEN 'Summary' ELSE 'Saldo' END TypeReport,
		CASE @ProductivityBy 
			WHEN '0' THEN 'Salesman'
			WHEN '1' THEN 'Vehicle Type'
			WHEN '2' THEN 'Source Data'
		END ProductivityBy,
		CONVERT(VARCHAR, @EndDate, 105) PerDate, @Area Area, CONVERT(VARCHAR, @StartDate, 105) + ' s/d ' + CONVERT(VARCHAR, @EndDate, 105) PeriodeDO,
		CASE WHEN @SalesHead = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = @OutletCode AND EmployeeID = @SalesHead) END SalesHead,
		CASE WHEN @SalesCoordinator = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = @OutletCode AND EmployeeID = @SalesCoordinator) END SalesCoordinator,
		CASE WHEN @Salesman = '' THEN 'ALL' ELSE (SELECT EmployeeName FROM SuzukiR4..GnMstEmployee WHERE CompanyCode = a.CompanyCode AND BranchCode = @OutletCode AND EmployeeID = @Salesman) END Salesman,
		CASE WHEN @DealerCode = '' THEN 'ALL' ELSE (SELECT DealerName FROM SuzukiR4..gnMstDealerMapping WHERE DealerCode = @DealerCode) END Dealer,
		CASE WHEN @OutletCode = '' THEN 'ALL' ELSE (SELECT BranchName FROM SuzukiR4..gnMstOrganizationDtl WHERE CompanyCode = @DealerCode AND BranchCode = @OutletCode) END Outlet,
		a.LookupValue Source,
		CASE CAST(ISNULL(SUM(P), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(P) AS VARCHAR) END NEW,
		CASE CAST(ISNULL(SUM(P), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(P) AS VARCHAR) END P,
		CASE CAST(ISNULL(SUM(HP), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(HP) AS VARCHAR) END HP,
		CASE CAST(ISNULL(SUM(SPK), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(SPK) AS VARCHAR) END SPK,
		CASE CAST(ISNULL(SUM(SumOuts), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(SumOuts) AS VARCHAR) END SumOuts,
		CASE CAST(ISNULL(SUM(DO), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(DO) AS VARCHAR) END DO,
		CASE CAST(ISNULL(SUM(DELIVERY), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(DELIVERY) AS VARCHAR) END DELIVERY,
		CASE CAST(ISNULL(SUM(LOST), 0) AS VARCHAR) WHEN '0' THEN '-' ELSE CAST(SUM(LOST) AS VARCHAR) END LOST
	FROM #employee_src a
	LEFT JOIN 
	(
		SELECT 
			a.CompanyCode,
			a.BranchCode,
			a.PerolehanData,

			(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
			WHERE CompanyCode = @DealerCode AND
				BranchCode = @OutletCode AND 
				PerolehanData = a.PerolehanData AND 
				SpvEmployeeID = a.SpvEmployeeID AND
				CONVERT(VARCHAR, InquiryDate, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) NEW,

			(CASE WHEN @TypeReport = '0' THEN	
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'P' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112))
			ELSE													
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'P' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) END) P,
				
			(CASE WHEN @TypeReport = '0' THEN	
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'HP' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112))
			ELSE
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'HP' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) END) HP,
			
			(CASE WHEN @TypeReport = '0' THEN			
				(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
					INNER JOIN SuzukiR4..pmKdp KDP ON 
					KDP.CompanyCode = Hist.CompanyCode AND
					KDP.BranchCode = Hist.BranchCode AND
					KDP.InquiryNumber = Hist.InquiryNumber 
				 WHERE Hist.CompanyCode = @DealerCode AND
					Hist.BranchCode = @OutletCode AND 
					KDP.PerolehanData = a.PerolehanData AND 
					KDP.SpvEmployeeID = a.SpvEmployeeID AND		
					CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
					Hist.LastProgress = 'SPK')
			ELSE
			(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
				BranchCode = @OutletCode AND 
				PerolehanData = a.PerolehanData AND 
				SpvEmployeeID = a.SpvEmployeeID AND		
				LastProgress = 'SPK' AND 
				CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) 
				END) SPK,
				
			(CASE WHEN @TypeReport = '0' THEN	
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'P' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) +
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'HP' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112)) +
				(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
					INNER JOIN SuzukiR4..pmKdp KDP ON 
					KDP.CompanyCode = Hist.CompanyCode AND
					KDP.BranchCode = Hist.BranchCode AND
					KDP.InquiryNumber = Hist.InquiryNumber 
				 WHERE Hist.CompanyCode = @DealerCode AND
					Hist.BranchCode = @OutletCode AND 
					KDP.PerolehanData = a.PerolehanData AND 
					KDP.SpvEmployeeID = a.SpvEmployeeID AND		
					CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
					Hist.LastProgress = 'SPK')					
			ELSE													
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'P' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) + 
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
				WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND
					LastProgress = 'HP' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) +				
				(SELECT COUNT(LastProgress) FROM SuzukiR4..pmKdp 
					WHERE CompanyCode = @DealerCode AND
					BranchCode = @OutletCode AND 
					PerolehanData = a.PerolehanData AND 
					SpvEmployeeID = a.SpvEmployeeID AND		
					LastProgress = 'SPK' AND 
					CONVERT(VARCHAR, LastUpdateStatus, 112) <= CONVERT(VARCHAR, @EndDate, 112)) END) SumOuts,
				
			(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
			INNER JOIN SuzukiR4..pmKdp KDP ON 
				KDP.CompanyCode = Hist.CompanyCode AND
				KDP.BranchCode = Hist.BranchCode AND
				KDP.InquiryNumber = Hist.InquiryNumber 
			 WHERE Hist.CompanyCode = @DealerCode AND
				Hist.BranchCode = @OutletCode AND 
				KDP.PerolehanData = a.PerolehanData AND 
				KDP.SpvEmployeeID = a.SpvEmployeeID AND				
				CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
				Hist.LastProgress = 'DO') DO,
				
			(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
				INNER JOIN SuzukiR4..pmKdp KDP ON 
				KDP.CompanyCode = Hist.CompanyCode AND
				KDP.BranchCode = Hist.BranchCode AND
				KDP.InquiryNumber = Hist.InquiryNumber 
			 WHERE Hist.CompanyCode = @DealerCode AND
				Hist.BranchCode = @OutletCode AND 
				KDP.PerolehanData = a.PerolehanData AND 
				KDP.SpvEmployeeID = a.SpvEmployeeID AND			
				CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
				Hist.LastProgress = 'DELIVERY') DELIVERY,
				
			(SELECT COUNT(Hist.LastProgress) FROM SuzukiR4..pmStatusHistory Hist
				INNER JOIN SuzukiR4..pmKdp KDP ON 
				KDP.CompanyCode = Hist.CompanyCode AND
				KDP.BranchCode = Hist.BranchCode AND
				KDP.InquiryNumber = Hist.InquiryNumber 
			 WHERE Hist.CompanyCode = @DealerCode AND
				Hist.BranchCode = @OutletCode AND 
				KDP.PerolehanData = a.PerolehanData AND 
				KDP.SpvEmployeeID = a.SpvEmployeeID AND			
				CONVERT(VARCHAR, Hist.UpdateDate , 112) BETWEEN CONVERT(VARCHAR, @StartDate, 112) AND CONVERT(VARCHAR, @EndDate, 112) AND
				Hist.LastProgress = 'LOST') LOST					
		FROM SuzukiR4..pmKdp a
		WHERE (CASE WHEN @DealerCode = '' THEN '' ELSE a.CompanyCode END) = @DealerCode
			AND (CASE WHEN @OutletCode = '' THEN '' ELSE a.BranchCode END) = @OutletCode
			AND a.SpvEmployeeID IN (SELECT EmployeeID FROM #employee_src_3)
		GROUP BY a.PerolehanData, a.CompanyCode,
			a.BranchCode, a.SpvEmployeeID
	) b ON a.CompanyCode = b.CompanyCode AND a.LookupValue = b.PerolehanData
	GROUP BY a.CompanyCode, a.LookupValue

	DROP TABLE #employee_src, #employee_src_2, #employee_src_3
	END		
END					 	 	     
--#endregion

END
GO
create procedure [dbo].[uspfn_CekDOBasedSONo]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SONumber varchar(50)
as

begin
	  SELECT count(DONo) as Jumlah
	    FROM OmTrSalesDO
	   WHERE CompanyCode = @CompanyCode
         AND BranchCode  = @BranchCode
         AND SONo        = @SONumber 
         AND Status NOT IN (3, 4);
end
GO
create procedure [dbo].[uspfn_UpdateTotalUnit]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)	
as

begin
	declare @sum decimal
	set @sum = (select isnull(sum(quantity),0) from omtrsalessomodelcolour 
				where companycode=@CompanyCode and branchcode=@BranchCode and sono=@SONumber)

	if (@sum=0)
	begin
		delete omtrsalessoaccsseq where companycode=@CompanyCode and branchcode=@BranchCode and sono=@SONumber 
	end
	else
	begin
		update omtrsalessoaccsseq 
		   set demandqty=qty*@sum
		 where companycode=@CompanyCode and branchcode=@BranchCode and sono=@SONumber and partseq=1 
	end
end
GO
CREATE procedure [dbo].[uspfn_LookupCustomerview] (  @CompanyCode varchar(10), @BranchCode varchar(10) )
 as
SELECT distinct a.CustomerCode, a.CustomerName
     , isnull(a.Address1,'') + ' ' + isnull(a.Address2,'') + ' ' + isnull(a.Address3,'') +' ' + isnull(a.Address4,'') as Address
	 , '' LookupValue, '' as ProfitCenter
  FROM gnMstCustomer a with(nolock, nowait)
 left JOIN gnMstCustomerProfitCenter b with(nolock, nowait)
	ON b.CompanyCode = a.CompanyCode
   AND b.CustomerCode = a.CustomerCode
   AND b.BranchCode = @BranchCode
   AND b.isBlackList = 0
 left JOIN gnMstLookUpDtl c
	ON c.CompanyCode = a.CompanyCode
   AND c.CodeID = 'PFCN'
   AND c.LookupValue = b.ProfitCenterCode
 WHERE 1 = 1
   AND a.CompanyCode = @CompanyCode
GO
create procedure [dbo].[uspfn_UpdateEmployeeShift]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeShift a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeShift (
		   CompanyCode
		 , EmployeeID
		 , AttdDate
		 , ShiftCode
		 , ClockInTime
		 , ClockOutTime
		 , OnDutyTime
		 , OffDutyTime
		 , OnRestTime
		 , OffRestTime
		 , CalcOvertime
		 , ApprOvertime
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
	     , a.AttdDate
	     , a.ShiftCode
	     , a.ClockInTime
	     , a.ClockOutTime
	     , a.OnDutyTime
	     , a.OffDutyTime
	     , a.OnRestTime
	     , a.OffRestTime
	     , a.CalcOvertime
	     , a.ApprOvertime
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
CREATE procedure [dbo].[usprpt_PmRpInqFollowUpWeb] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@PeriodBegin		DATETIME,
	@PeriodEnd			DATETIME,
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@Salesman			VARCHAR(15)
)
AS 
BEGIN
SET NOCOUNT ON;
----

IF(@SalesHead ='' AND @Salesman ='')
BEGIN
	SELECT * INTO #empl1 FROM (
		--SH =ALL AND S=ALL
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.TeamLeader IN (SELECT b.EmployeeID FROM HrEmployee b WHERE b.TeamLeader IN
		(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader=@BranchManager))
	)#empl1

	SELECT * INTO #t1 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl1 g)
			--AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			--AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
			--AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t1

	DROP TABLE #empl1
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t1 ORDER BY InquiryNumber
	DROP TABLE #t1

END
ELSE IF(@Salesman = '')
BEGIN
	SELECT * INTO #empl2 FROM (
		--S=ALL
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.TeamLeader IN (SELECT b.EmployeeID FROM HrEmployee b WHERE b.TeamLeader=@SalesHead)
	)#empl2

	SELECT * INTO #t2 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl2 g)
			--AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			--AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
			--AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t2

	DROP TABLE #empl2
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t2 ORDER BY InquiryNumber
	DROP TABLE #t2
END
ELSE
BEGIN
	SELECT * INTO #empl3 FROM (
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.EmployeeID=@Salesman
	)#empl3

	SELECT * INTO #t3 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl3 g)
			--AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			--AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
			--AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t3

	DROP TABLE #empl3
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t3 ORDER BY InquiryNumber
	DROP TABLE #t3
END
----
END
GO
-- =============================================
-- Author:		David Leonardo
-- Create date: 6 November 2014
-- Description:	Select Lampiran for Print
-- =============================================
create PROCEDURE [dbo].[uspfn_spLampiranForPrint]
	-- Add the parameters for the stored procedure here
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@JobOrderNo varchar(50)
AS
BEGIN
	SELECT a.LmpNo,a.PickingSlipNo, a.TypeOfGoods, a.TransType,
                SubString(a.TransType,1,1) SalesType,
                (SELECT TOP 1 DocNo FROM SpTrnSPickingDtl 
                    WHERE CompanyCode = a.CompanyCode 
                    AND BranchCode = a.BranchCode 
                    AND PickingSlipNo = a.PickingSlipNo) DocNo 
               FROM spTrnSLmpHdr a WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND 
                    a.PickingSlipNo IN (@JobOrderNo)
END
GO
create procedure [dbo].[uspfn_UpdateDepartmentTraining]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrDepartmentTraining a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrDepartmentTraining (
		   CompanyCode
		 , Department
		 , Position
		 , Grade
		 , TrainingCode
		 , IsRequired
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.Department
	     , a.Position
	     , a.Grade
	     , a.TrainingCode
	     , a.IsRequired
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[sp_spMstOrderParamView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as   
		    SELECT a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
 

            WHERE a.CompanyCode=@CompanyCode
            AND a.BranchCode=@BranchCode
GO
CREATE procedure [dbo].[uspfn_GetCustomerByProfitCenterCodeId]  
@CompanyCode varchar(15),  
@BranchCode varchar(15),  
@ProfitCenterCode varchar(15)  
as  
SELECT a.CustomerCode, a.CustomerName  
     , a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 +' ' + a.Address4 as Address, 
     a.Address1, a.Address2, a.Address3, a.Address4  
  , c.LookupValue, c.LookUpValueName as ProfitCenter  
     , b.Salesman  
  FROM gnMstCustomer a with(nolock, nowait)  
 INNER JOIN gnMstCustomerProfitCenter b with(nolock, nowait)  
 ON b.CompanyCode = a.CompanyCode  
   AND b.CustomerCode = a.CustomerCode  
 INNER JOIN gnMstLookUpDtl c  
 ON c.CompanyCode = a.CompanyCode  
   AND c.CodeID = 'PFCN'  
   AND c.LookupValue = b.ProfitCenterCode  
 WHERE 1 = 1  
   AND a.CompanyCode = @CompanyCode  
   AND b.BranchCode = @BranchCode 
   AND b.ProfitCenterCode = @ProfitCenterCode  
   AND b.isBlackList = 0  
   AND c.LookupValue= b.ProfitCenterCode   
 AND a.Status = 1 order by a.CustomerCode
GO
create procedure [dbo].[sp_spMstOrderParamLookup] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@SupplierCode varchar(20))
 as   
		    SELECT distinct a.SupplierCode,b.SupplierName,
                        a.MovingCode,
						c.MovingCodeName,
                   a.LeadTime, 
                   a.OrderCycle, 
                  a.SafetyStock,
				    a.CompanyCode,
					a.BranchCode
            FROM spMstOrderParam a
			inner join gnMstSupplier b on  b.CompanyCode=a.CompanyCode AND
                      b.SupplierCode=a.SupplierCode
					  inner join SpMstMovingCode c on                      
					   c.CompanyCode=a.CompanyCode AND
                      c.MovingCode=a.MovingCode
 

            WHERE a.CompanyCode=@CompanyCode
            AND a.BranchCode=@BranchCode and a.SupplierCode=@SupplierCode
GO
CREATE procedure [dbo].[sp_spMstMovingCodeView]  (@CompanyCode varchar(15))
 as
SELECT MovingCode, MovingCodeName,
Formula = Cast(Param1 as varchar(10)) + Sign1 + Variable + Sign2 + Cast(Param2 as varchar(10)),
Param1, Sign1, Variable, Param2, Sign2,CompanyCode
FROM spMstMovingCode
where CompanyCode=@CompanyCode
GO
CREATE procedure [dbo].[uspfn_SelectLeasing]
	@CompanyCode varchar(17),
	@BranchCode varchar(17),
	@UserID varchar(17)
as

begin
	declare @ProfitCenterCode varchar(10);
	set @ProfitCenterCode = (select top 1 ProfitCenter from sysUserProfitCenter where UserId=@UserID);

	SELECT a.CustomerCode as LeasingCode
	     , a.CustomerName as LeasingName
      FROM gnMstCustomer a 
	 INNER JOIN gnMstCustomerProfitCenter b
        ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
     WHERE a.CompanyCode = @CompanyCode 
       AND b.BranchCode = @BranchCode
       AND b.ProfitCenterCode = @ProfitCenterCode
       AND a.CategoryCode = 32;
end
GO
create procedure [dbo].[uspfn_TransferEmployeeFromSimDmsToSFM]
	@CompanyCode varchar(12),
	@EmployeeID varchar(25),
	@UserID varchar(50)
as
begin
	begin try
		drop table #t1;
		drop table #t2;
	end try
	begin catch
	end catch;
	
	select *
	  into #t1
	  from gnMstEmployee a
	 where a.CompanyCode = @CompanyCode
	   and a.EmployeeID = @EmployeeID;


	select * 
	  into #t2
	  from HrEmployeeMutation a
	 where a.CompanyCode = @CompanyCode
	   and a.EmployeeID = @EmployeeID
	   and ( a.IsDeleted = 0 or a.IsDeleted is null )

	if ( select count(*) from #t1 ) > 0
	begin
		select 'Maaf, data karyawan tidak dapat dipindahkan ke SDMS, karena sudah ada data karyawan dengan NIK.';
	end
	else
	begin
		insert into gnMstEmployee ( CompanyCode
								  , BranchCode
								  , EmployeeID
								  , EmployeeName
								  , Address1
								  , Address2
								  , Address3
								  , Address4
								  , PhoneNo
								  , HpNo
								  , FaxNo
								  , ZipNo
								  , JoinDate
								  , ResignDate
								  , GenderCode
								  , BirthPlace
								  , BirthDate
								  , MaritalStatusCode
								  , ReligionCode
								  , BloodCode
								  , IdentityNo
								  , Height
								  , Weight
								  , UniformSize
								  , ShoesSize
								  , FormalEducation
								  , PersonnelStatus
								  , CreatedBy
								  , CreatedDate
								  , LastupdateBy
								  , LastupdateDate
								  , TitleCode
								  )
			select a.CompanyCode
			     , BranchCode = ''
			     , a.EmployeeID
				 , a.EmployeeName
				 , a.Address1
				 , a.Address2
				 , a.Address3
				 , a.Address4
				 , a.Telephone1
				 , a.Handphone1
				 , a.FaxNo
				 , a.ZipCode
				 , a.JoinDate
				 , a.ResignDate
				 , a.Gender
				 , a.BirthPlace
				 , a.BirthDate
				 , a.MaritalStatus
				 , a.Religion
				 , a.BloodCode
				 , a.IdentityNo
				 , a.Height
				 , a.Weight
				 , a.UniformSize
				 , a.ShoesSize
				 , a.FormalEducation
				 , a.PersonnelStatus
				 , @UserID
				 , getdate()
				 , @UserID
				 , getdate()
				 , ''
			  from HrEmployee a
			 where a.CompanyCode = @CompanyCode
			   and a.EmployeeID = @EmployeeID;

		select 'Data karyawan berhasil ditransfer ke SDMS.';
	end

	
end
GO
CREATE procedure [dbo].[uspfn_syscreatepermission] 
@roleid varchar(50)
AS
BEGIN
	insert into SysRoleMenuAccess(roleid,menuid)
	select  @roleid,menuid from VW_TREEMENUS a
	WHERE NOT EXISTS 
    (SELECT 0
     FROM SysRoleMenuAccess WITH (UPDLOCK, HOLDLOCK)
     WHERE RoleId=@roleid and MenuId=a.MenuId) 
END
GO
CREATE procedure [dbo].[uspfn_spInquiry_ListADO]
	@ParentCode		varchar(100),
	@Detail			int 
AS
Begin

	if (@Detail = 1)
	begin
		select distinct convert(varchar,a.GroupNo) [value], a.Area [text]
		from gnMstDealerMapping a
		where a.isActive = 1
		order by [value] asc
	end
	else if(@Detail = 2)
	begin
		
		declare @JBDTB INT
		SET @JBDTB = 0

		if @ParentCode <> ''
		begin
			if (@ParentCode='JABODETABEK' or @ParentCode = 'CABANG')
				SET @JBDTB = 1
		end 
		ELSE
			SET @ParentCode = '%%'

		IF @JBDTB = 1
		BEGIN
			select distinct a.DealerCode [value], a.DealerName [text], convert(varchar,a.GroupNo) [parent]
			from gnMstDealerMapping a
			where a.Area IN ('JABODETABEK', 'CABANG') and a.isActive = 1
			order by a.DealerCode
		END
		ELSE
			select distinct a.DealerCode [value], a.DealerName [text], convert(varchar,a.GroupNo) [parent]
			from gnMstDealerMapping a
			where (a.Area like @ParentCode) and a.isActive = 1
			order by a.DealerCode
	end
	else if(@Detail = 3)
	begin

		select distinct  b.OutletCode [value], b.OutletName [text],a.DealerCode [parent]
		from gnMstDealerMapping a
		left join gnMstDealerOutletMapping b on a.DealerCode = b.DealerCode
		where (a.DealerCode like case when @ParentCode <> '' then @ParentCode else '%%' end) and a.isActive = 1
		order by b.OutletName
	end
end
GO
-- =============================================
-- Author:		David Leonardo
-- Create date: 23 October 2014
-- Description:	Log Header
-- Sementara ini baru dipakai di Pembelian - Entry Order
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spLogHeader]
	(
	@DataID varchar(20),
	@CustomerCode varchar(20),
	@ProductType varchar(20),
	@Status varchar(10),
	@CreatedDate datetime,
	@Header varchar(max)
	)
AS
BEGIN
declare 	
@ID numeric(18,0), 
@Range numeric(18,0)

	 select @ID = (select isnull(max(id), 0) from gnDcsUploadFile), @Range = 9000000000
	 if (@ID < @range)
	 set @ID = @Range + 1
     else
	 set @ID = @ID + 1

     insert into gnDcsUploadFile
           ( ID, DataID, CustomerCode, ProductType, Status, CreatedDate, Header)
     values(@ID,@DataID,@CustomerCode,@ProductType,@Status,@CreatedDate,@Header)
END
GO
CREATE PROCEDURE [dbo].[uspfn_GetLookupLMP] @CompanyCode varchar(15), @BranchCode varchar(15), @SalesType varchar(15), @CodeID varchar(6),  
@TypeOfGoods varchar(15), @ProductType varchar(15)  
as  
SELECT * FROM   
(  
SELECT  
 PickingSlipNo, PickingSlipDate,  
 BPSFNo, BPSFDate,  
 (  
   SELECT TOP 1 PRODUCTTYPE FROM spTrnSBPSFDtl  
  WHERE spTrnSBPSFHdr.CompanyCode = spTrnSBPSFDtl.CompanyCode  
  AND spTrnSBPSFHdr.BranchCode = spTrnSBPSFDtl.BranchCode  
  AND spTrnSBPSFHdr.BPSFNo = spTrnSBPSFDtl.BPSFNo  
 ) AS ProductType,
 spTrnSBPSFHdr.CustomerCode,
 spTrnSBPSFHdr.CustomerCodeShip,
 spTrnSBPSFHdr.CustomerCodeBill as CustomerCodeTagih,
 b.CustomerName,
 b.Address1,
 b.Address2,
 b.Address3,
 b.Address4,
 b.CustomerName CustomerNameTagih,
 b.Address1 Address1Tagih,
 b.Address2 Address2Tagih,
 b.Address3 Address3Tagih,
 b.Address4 Address4Tagih,
 c.LookUpValueName TransType  
FROM spTrnSBPSFHdr  
left join gnMstCustomer b
ON spTrnSBPSFHdr.CompanyCode = b.CompanyCode
AND spTrnSBPSFHdr.CustomerCode = b.CustomerCode 
left join gnMstLookupDtl c on
spTrnSBPSFHdr.CompanyCode = c.CompanyCode
and spTrnSBPSFHdr.TransType= c.LookupValue 
AND c.CodeID = @CodeID
WHERE spTrnSBPSFHdr.CompanyCode = @CompanyCode  
AND spTrnSBPSFHdr.BranchCode    = @BranchCode  
AND spTrnSBPSFHdr.SalesType     = @SalesType  
AND spTrnSBPSFHdr.TypeOfGoods   = @TypeOfGoods  
AND (spTrnSBPSFHdr.Status = '1' OR spTrnSBPSFHdr.Status = '0')  
AND (spTrnSBPSFHdr.PickingSlipNo NOT IN (SELECT PickingSlipNo FROM spTrnSLmpHdr where CompanyCode = @CompanyCode AND BranchCode = @BranchCode))  
) A  
WHERE A.ProductType = @ProductType  
ORDER BY A.PickingSlipNo DESC
GO
create procedure [dbo].[uspfn_UpdateEducation]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeEducation a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeEducation (
		   CompanyCode
		 , EmployeeID
		 , EduSeq
		 , College
		 , Education
		 , YearBegin
		 , YearFinish
		 , CreatedBy
		 , CreatedDate
		 , UpdateBy
		 , UpdateDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
	     , a.EduSeq
	     , a.College
	     , a.Education
	     , a.YearBegin
	     , a.YearFinish
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdateBy
	     , a.UpdateDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[sp_spMstSalesCampaignView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
spMstSalesCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstSalesCampaign.DiscPct, 
spMstSalesCampaign.BegDate,
spMstSalesCampaign.EndDate,
spMstSalesCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstSalesCampaign.CompanyCode,
  spMstSalesCampaign.BranchCode
  FROM spMstSalesCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstSalesCampaign.PartNo AND spMstItemInfo.CompanyCode = spMstSalesCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstItemInfo.SupplierCode AND gnMstSupplier.CompanyCode = spMstItemInfo.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstSalesCampaign.CompanyCode AND spMstItems.BranchCode=spMstSalesCampaign.BranchCode 
        AND spMstItems.PartNo=spMstSalesCampaign.PartNo
 
where  spMstSalesCampaign.CompanyCode=@CompanyCode and spMstSalesCampaign.BranchCode=@BranchCode
GO
CREATE procedure [dbo].[uspfn_GenerateSSPickingslipNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@TransType		VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@DocDate		DATETIME
AS
BEGIN

--declare	@CompanyCode	VARCHAR(MAX)
--declare	@BranchCode		VARCHAR(MAX)
--declare	@JobOrderNo		VARCHAR(MAX)
--declare	@ProductType	VARCHAR(MAX)
--declare	@CustomerCode	VARCHAR(MAX)
--declare	@TransType		VARCHAR(MAX)
--declare	@UserID			VARCHAR(MAX)
--declare	@DocDate		DATETIME

--set	@CompanyCode	= '6156401000'
--set	@BranchCode		= '6156401001'
--set	@JobOrderNo		= 'SPK/15/001833'
--set	@ProductType	= '4W'
--set	@CustomerCode	= '000003'
--set	@TransType		= '20'
--set	@UserID			= 'TRAININGZZZ'
--set	@DocDate		= '3/12/2015 9:47:01 AM'


--exec uspfn_GenerateSSPickingslipNew '6006400001','6006400101','SPK/14/101589','4W','2105885','20','ga','3/2/2015 4:03:01 PM'
--================================================================================================================================
-- TABLE MASTER
--================================================================================================================================
-- Temporary for Item --
------------------------
SELECT * INTO #Item FROM (
SELECT a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.RetailPrice
	, a.PartNo
	, a.Billtype
	, SUM(ISNULL(a.DemandQty, 0) - (ISNULL(a.SupplyQty, 0))) QtyOrder
FROM svTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN svTrnService b ON b.CompanyCode = a.CompanyCode
	AND b.BranchCode = a.BranchCode
	AND b.ProductType = a.ProductType
	AND b.ServiceNo = a.ServiceNo
	AND b.JobOrderNo = @JobOrderNo
WHERE a.CompanyCode = @CompanyCode 
	AND a.BranchCode = @BranchCode 
	AND a.ProductType = @ProductType 
GROUP BY a.CompanyCode, a.BranchCode, a.ProductType
	, a.ServiceNo, a.PartNo, a.RetailPrice, a.BillType ) #Item 

DECLARE @CompanyMD AS VARCHAR(15)
DECLARE @BranchMD AS VARCHAR(15)
DECLARE @WarehouseMD AS VARCHAR(15)

SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

SELECT * INTO #SrvOrder FROM (
SELECT DISTINCT(a.CompanyCode) 
    , a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
    , (SELECT Paravalue FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 'GTGO' AND LookUpValue = a.TypeOfGoods) TipePart
    , (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) PartName
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
	, SUM(a.QtyOrder) QtyOrder
    , 0 QtySupply
    , 0 QtyBO
    , (SUM(a.QtyOrder) * a.RetailPrice) * ((100 - a.PartDiscPct)/100) NetSalesAmt
    , a.PartDiscPct DiscPct
FROM
(
	SELECT
		DISTINCT(a.CompanyCode) 
		, a.BranchCode
		, a.ProductType
		, a.ServiceNo
		, a.PartNo
		, a.RetailPrice
		, c.CostPrice
		, a.TypeOfGoods
		, a.BillType
		, ISNULL(Item.QtyOrder,0) AS QtyOrder
		, a.DiscPct PartDiscPct 
	FROM
		svTrnSrvItem a WITH (NOLOCK, NOWAIT)
		LEFT JOIN svTrnService b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode	
			AND a.ProductType = b.ProductType
			AND a.ServiceNo = b.ServiceNo
		LEFT JOIN #Item Item ON Item.CompanyCode = a.CompanyCode 
			AND Item.BranchCode = a.BranchCode 
			AND Item.ProductType = a.ProductType 
			AND Item.ServiceNo = a.ServiceNo 
			AND Item.PartNo = a.PartNo 
			AND Item.RetailPrice = a.RetailPrice 
			AND Item.BillType = a.Billtype
		LEFT JOIN SpMstItemPrice c WITH (NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode 
			AND a.BranchCode = c.BranchCode 
			AND a.PartNo = c.PartNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.ProductType = @ProductType
		AND Item.QtyOrder > 0
		AND JobOrderNo = @JobOrderNo
) a
GROUP BY
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.RetailPrice
	, a.CostPrice
    , a.TypeOfGoods
    , a.BillType
    , a.PartDiscPct 
) #SrvOrder

select * from #srvorder

--================================================================================================================================
-- INSERT TABLE SpTrnSORDHdr AND SpTrnSORDDtl
--================================================================================================================================
DECLARE @MaxDocNo			INT
DECLARE	@MaxPickingList		INT
DECLARE @TempDocNo			VARCHAR(MAX)
DECLARE @TempPickingList	VARCHAR(MAX)
DECLARE @TypeOfGoods		VARCHAR(MAX)
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

--===============================================================================================================================
-- LOOPING BASED ON THE TYPE OF GOODS
-- ==============================================================================================================================
DECLARE db_cursor CURSOR FOR
SELECT DISTINCT TypeOfGoods FROM #SrvOrder
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND ProductType = @ProductType 

OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @TypeOfGoods

WHILE @@FETCH_STATUS = 0
BEGIN

--===============================================================================================================================
-- INSERT HEADER
-- ==============================================================================================================================
SET @MaxDocNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'SSS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempDocNo = ISNULL((SELECT 'SSS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxDocNo, 1), 6)),'SSS/YY/XXXXXX')

INSERT INTO SpTrnSORDHdr
([CompanyCode]
           ,[BranchCode]
           ,[DocNo]
           ,[DocDate]
           ,[UsageDocNo]
           ,[UsageDocDate]
           ,[CustomerCode]
           ,[CustomerCodeBill]
           ,[CustomerCodeShip]
           ,[isBO]
           ,[isSubstitution]
           ,[isIncludePPN]
           ,[TransType]
           ,[SalesType]
           ,[IsPORDD]
           ,[OrderNo]
           ,[OrderDate]
           ,[TOPCode]
           ,[TOPDays]
           ,[PaymentCode]
           ,[PaymentRefNo]
           ,[TotSalesQty]
           ,[TotSalesAmt]
           ,[TotDiscAmt]
           ,[TotDPPAmt]
           ,[TotPPNAmt]
           ,[TotFinalSalesAmt]
           ,[isPKP]
           ,[ExPickingSlipNo]
           ,[ExPickingSlipDate]
           ,[Status]
           ,[PrintSeq]
           ,[TypeOfGoods]
           ,[isDropsign]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastUpdateBy]
           ,[LastUpdateDate]
           ,[isLocked]
           ,[LockingBy]
           ,[LockingDate])

SELECT 
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, @TempDocNo DocNo 
	, @DocDate DocDate
	, @JobOrderNo UsageDocNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) UsageDocDate
	, (SELECT CustomerCode FROM SvTrnService WHERE 1 = 1AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCode
	, (SELECT CustomerCodeBill FROM SvTrnService WHERE 1 = 1 AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeBill
	, (SELECT CustomerCode FROM SvTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode 
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo) CustomerCodeShip
	, CONVERT(BIT, 0) isBO
	, CONVERT(BIT, 0) isSubstitution
	, CONVERT(BIT, 1) isIncludePPN
	, @TransType TransType
	, '2' SalesType
	, CONVERT(BIT, 0) isPORDD
	, @JobOrderNo OrderNo
	, @DocDate OrderDate
	, ISNULL((SELECT TOPCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') TOPCode
	, ISNULL((SELECT ParaValue FROM GnMstLookUpDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND CodeID = 'TOPC' AND 
		LookupValue IN 
		(SELECT TOPCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)
	  ),0) TOPDays
	, ISNULL((SELECT PaymentCode FROM GnMstCustomerProfitCenter WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode),'W') PaymentCode
	, '' PaymentReffNo
	, 0 TotSalesQty
	, 0 TotSalesAmt
	, 0 TotDiscAmt
	, 0 TotDPPAmt
	, 0 TotPPNAmt
	, 0 TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, NULL ExPickingSlipNo
	, NULL ExPickingSlipDate
	, '4' Status
	, 0 PrintSeq
	, @TypeOfGoods TypeOfGoods
	, NULL IsDropSign
	, @UserID CreatedBY
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate


UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'SSS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT DETAIL
-- ==============================================================================================================================
DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

declare @TempAvailStock as table
(
	PartNo varchar(50),
	AvailStock decimal
)

DECLARE @Query AS VARCHAR(MAX)
--SET @Query = 
--'SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
--FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
--WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+''

--INSERT INTO #TempAvailStock

SET @Query = 
'SElect * into #TempAvailStock from (SELECT PartNo, (Onhand - AllocationSP - AllocationSL - AllocationSR - ReservedSP - ReservedSL - ReservedSR) AvailStock
FROM ' + @DbMD + '..SpMstItemLoc WITH (NOLOCK, NOWAIT) 
WHERE CompanyCode = '+''''+@CompanyMD+''''+' AND BranchCode ='+''''+@BranchMD +''''+' AND WarehouseCode = '+''''+@WarehouseMD+''''+')#TempAvailStock

INSERT INTO SpTrnSORDDtl 
(
	[CompanyCode] ,
	[BranchCode] ,
	[DocNo] ,
	[PartNo] ,
	[WarehouseCode] ,
	[PartNoOriginal] ,
	[ReferenceNo] ,
	[ReferenceDate] ,
	[LocationCode] ,
	[QtyOrder] ,
	[QtySupply] ,
	[QtyBO] ,
	[QtyBOSupply] ,
	[QtyBOCancel] ,
	[QtyBill] ,
	[RetailPriceInclTax] ,
	[RetailPrice] ,
	[CostPrice] ,
	[DiscPct] ,
	[SalesAmt] ,
	[DiscAmt] ,
	[NetSalesAmt] ,
	[PPNAmt] ,
	[TotSalesAmt] ,
	[MovingCode] ,
	[ABCClass] ,
	[ProductType] ,
	[PartCategory] ,
	[Status] ,
	[CreatedBy] ,
	[CreatedDate] ,
	[LastUpdateBy] ,
	[LastUpdateDate] ,
	[StockAllocatedBy] ,
	[StockAllocatedDate] ,
	[FirstDemandQty] )
SELECT
	''' + @CompanyCode +''' CompanyCode
	, ''' + @BranchCode +''' BranchCode
	, ''' + @TempDocNo +''' DocNo 
	, a.PartNo
	, ''00'' WarehouseCode
	, a.PartNo PartNoOriginal
	, ''' + @JobOrderNo +''' ReferenceNo
	, (SELECT JobOrderDate FROM SvTrnService WHERE 1 =1 AND CompanyCode = ''' + @CompanyCode +''' AND BranchCode = ''' + @BranchCode +'''
		AND ProductType = ''' + @ProductType +''' AND JobOrderNo = ''' + @JobOrderNo +''' ) ReferenceDate
	, (SELECT distinct LocationCode FROM ' + @DbMD +'..SpMstItemLoc WHERE CompanyCode = ''' + @CompanyMD +''' AND BranchCode = ''' + @BranchMD +''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo ) LocationCode
	, a.QtyOrder
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBO
	, 0 QtyBOSupply
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN 0 
		ELSE a.QtyOrder - ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtyBOCancel
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice * 10 /100) RetailPriceIncltax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder * a.RetailPrice
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice
		END AS SalesAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice) * a.DiscPct/100)
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) * a.DiscPct/100)
		END AS DiscAmt
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS NetSalesAmt
	, 0 PPNAmt
	,  CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN floor((a.QtyOrder * a.RetailPrice)- ((a.QtyOrder * a.RetailPrice) * a.DiscPct/100))
		ELSE floor((ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice) - 
			(ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) * a.RetailPrice * a.DiscPct/100))
		END AS TotSalesAmt
	, (SELECT distinct MovingCode FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +''' ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +'''  AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''2'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
	, a.QtyOrder FirstDemandQty
FROM #SrvOrder a
WHERE a.TypeOfGoods = '+@TypeOfGoods +'


select top 10 * from spTrnSORDDtl order by createddate desc
--===============================================================================================================================
-- INSERT SO SUPPLY
-- ==============================================================================================================================

SELECT * INTO #TempSOSupply FROM (
SELECT
	'''+ @CompanyCode +''' CompanyCode
	, '''+ @BranchCode +''' BranchCode
	, '''+ @TempDocNo +''' DocNo 
	, 0 SupSeq
	, a.PartNo 
	, a.PartNo PartNoOriginal
	, '''' PickingSlipNo	
	, '''+ @JobOrderNo +''' ReferenceNo
	, '''+ CONVERT(varchar, @DefaultDate )+''' ReferenceDate
	, ''00'' WarehouseCode
	, (SELECT distinct LocationCode FROM '+ @DbMD+'..SpMstItemLoc WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD+''' AND WarehouseCode = ''00''
		AND PartNo = a.PartNo) LocationCode
	, CASE WHEN 
		ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0) >= a.QtyOrder 
		THEN a.QtyOrder 
		ELSE ISNULL((SELECT distinct AvailStock FROM #TempAvailStock WHERE PartNo = a.PartNo),0)
		END AS QtySupply
	, 0 QtyPicked
	, 0 QtyBill
	, a.RetailPrice + FLOOR(a.RetailPrice *10 /100) RetailPriceIncltax
	, a.RetailPrice
	, b.CostPrice
	, a.DiscPct
	, (SELECT distinct MovingCode FROM '+ @DbMD+'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		MovingCode
	, (SELECT distinct ABCClass FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		ABCClass
	, '''+ @ProductType +'''ProductType
	, (SELECT distinct PartCategory FROM '+ @DbMD +'..SpMstItems WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyMD +''' AND BranchCode = '''+ @BranchMD +''' AND PartNo = a.PartNo) 
		PartCategory
	, ''1'' Status
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, '''+ @UserID +''' StockAllocatedBy
	, '''+ Convert(varchar,GetDate()) +''' StockAllocatedDate
FROM #SrvOrder a
inner join '+ @DbMD +'..spMstItemPrice b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.PartNo = b.PartNo
WHERE a.TypeOfGoods = '+ @TypeOfGoods +'
)#TempSOSupply

INSERT INTO SpTrnSOSupply SELECT 
	CompanyCode,BranchCode,DocNo,SupSeq,PartNo,PartNoOriginal
	, ROW_NUMBER() OVER(ORDER BY PartNo) PTSeq,PickingSlipNo
	, ReferenceNo,ReferenceDate,WarehouseCode,LocationCode
	, QtySupply,QtyPicked,QtyBill,RetailPriceIncltax,RetailPrice,CostPrice
	, DiscPct,MovingCode,ABCClass,ProductType,PartCategory,Status
	, CreatedBy,CreatedDate,LastUpdateBy,LastUpdateDate
FROM #TempSOSupply WHERE QtySupply > 0

--===============================================================================================================================
-- UPDATE STATUS DETAIL BASED ON SUPPLY
--===============================================================================================================================

UPDATE SpTrnSORDDtl
SET Status = 4
FROM SpTrnSORDDtl a, #TempSOSupply b
WHERE 1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
	
--===============================================================================================================================
-- UPDATE HISTORY DEMAND ITEM AND CUSTOMER
--===============================================================================================================================

UPDATE SpHstDemandItem 
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +'''
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandItem a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+ @TempDocNo +'''

UPDATE SpHstDemandCust
SET DemandFreq = DemandFreq + 1
	, DemandQty = DemandQty + b.QtyOrder
	, LastUpdateBy = '''+ @UserID +''' 
	, LastUpdateDate = '''+ Convert(varchar,GetDate()) +''' 
FROM SpHstDemandCust a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = '''+ Convert(varchar,Year(GetDate())) +'''
	AND a.Month  = '''+ Convert(varchar,Month(GetDate())) +'''
	AND a.PartNo = b.PartNo
	AND a.CustomerCode = '''+ @CustomerCode +'''
	AND b.DocNo = '''+ @TempDocNo +'''

INSERT INTO SpHstDemandItem
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +''' Year
	, '''+ Convert(varchar,Month(GetDate())) +''' Month
	, PartNo
	, 1 DemandFreq
	, QtyOrder DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' AND a.BranchCode = '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
 AND NOT EXISTS
( SELECT 1 FROM SpHstDemandItem WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +''' 
	AND PartNo = a.PartNo
)

INSERT INTO SpHstDemandCust
SELECT 
	CompanyCode
	, BranchCode
	, '''+ Convert(varchar,Year(GetDate())) +'''  Year
	, '''+ Convert(varchar,Month(GetDate())) +'''  Month
	, '''+ @CustomerCode +''' CustomerCode
	, PartNo
	, 1 DemandFreq
	, (SELECT QtyOrder FROM SpTrnSORDDTl WITH (NOLOCK, NOWAIT) 
		WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
		AND DocNo = a.DocNo AND PartNo = a.PartNo) DemandQty
	, 0 SalesFreq
	, 0 SalesQty
	, MovingCode
	, ProductType
	, PartCategory
	, ABCClass
	, '''+ @UserID +''' LastUpdateBy
	, '''+ CONVERT(varchar, GetDate()) +''' LastUpdateDate
FROM SpTrnSordDtl a WITH (NOLOCK, NOWAIT)
WHERE a.CompanyCode= '''+ @CompanyCode +''' and a.BranchCode= '''+ @BranchCode +''' AND a.DocNo = '''+ @TempDocNo +''' -- add CompanyCode and BranchCode 13 Des 2010
AND NOT EXISTS
( SELECT PartNo FROM SpHstDemandCust WITH (NOLOCK, NOWAIT) WHERE 
	1 = 1 
	AND CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode
	AND Month = '''+ Convert(varchar,Month(GetDate())) +''' 
	AND Year = '''+ Convert(varchar,Year(GetDate())) +'''  
	AND PartNo = a.PartNo
)

--===============================================================================================================================
-- UPDATE LAST DEMAND DATE MASTER
--===============================================================================================================================

UPDATE '+@DbMD+'..SpMstItems 
SET LastDemandDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, SpTrnSordDtl b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo
	AND b.DocNo = '''+@TempDocNo+'''

--===============================================================================================================================
-- UPDATE STOCK AND MOVEMENT
--===============================================================================================================================

UPDATE '+@DbMD+'..spMstItems
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItems a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD+'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.PartNo = b.PartNo

UPDATE '+@DbMD+'..spMstItemloc
SET AllocationSR = AllocationSR + b.QtySupply
	, LastUpdateBy = '''+@UserID+'''
	, LastUpdateDate = '''+Convert(varchar,GetDate())+'''
FROM '+@DbMD+'..SpMstItemLoc a, #TempSOSupply b
WHERE 
	1 = 1
	AND a.CompanyCode = '''+@CompanyMD +'''
	AND a.BranchCode = '''+@BranchMD+'''
	AND a.WarehouseCode = '''+@WarehouseMD+'''
	AND a.PartNo = b.PartNo

INSERT INTO SpTrnIMovement
SELECT
	'''+@CompanyCode +''' CompanyCode
	, '''+@BranchCode +''' BranchCode
	, a.DocNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = '''+ @CompanyCode +'''
		AND BranchCode = '''+ @BranchCode +''' AND DocNo = a.DocNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),'''+convert(varchar,getdate())+''') CreatedDate 
	, ''00'' WarehouseCode
	, (SELECT LocationCode FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT) WHERE CompanyCode =  '''+@CompanyCode +'''
		AND BranchCode = '''+@BranchCode +''' AND DocNo = '''+@TempDocNo +''' AND PartNo = a.PartNo)
	  LocationCode
	, a.PartNo
	, ''OUT'' SignCode
	, ''SA-NPJUAL'' SubSignCode
	, a.QtySupply
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, '''+@UserID +''' CreatedBy
FROM #TempSOSupply a

--===============================================================================================================================
-- UPDATE SUPPLY SLIP TO SPK
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = '''+@CompanyCode +''' AND BranchCode = '''+@BranchCode+'''
		AND ProductType = '''+@ProductType +''' AND JobOrderNo = '''+@JobOrderNo+''')

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = '''+@CompanyCode+'''
	AND a.BranchCode = '''+@BranchCode+'''
	AND a.ProductType = '''+@ProductType+'''
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+@ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND (a.SupplySlipNo = '''' OR a.SupplySlipNo IS NULL)
) #TempServiceItem 

SELECT * INTO #TempServiceItemIns FROM( 
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtySupply
	, b.DocNo
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN #TempSOSupply b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo
WHERE
	1 = 1 
	AND a.CompanyCode = '''+ @CompanyCode +''' 
	AND a.BranchCode = '''+ @BranchCode +''' 
	AND a.ProductType = '''+ @ProductType +'''  
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = '''+ @ProductType +''' AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo) 
	AND (a.SupplySlipNo != '''' OR a.SupplySlipNo IS NOT NULL)
) #TempServiceItemIns


UPDATE svTrnSrvItem
SET SupplySlipNo = b.DocNo
	, SupplySlipDate = ISNULL((SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
							AND DocNo = b.DocNo),'''+Convert(varchar,@DefaultDate)+''')
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	
--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED SUPPLY SLIP
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, 0 SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, '''+ @UserID +''' CreatedBy
	, '''+ Convert(varchar,GetDate()) +''' CreatedDate
	, '''+ @UserID +''' LastUpdateBy
	, '''+ Convert(varchar,GetDate()) +''' LastUpdateDate
	, a.DiscPct
FROM #TempServiceItemIns a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = '''+ @CompanyCode +'''
	AND a.BranchCode = '''+ @BranchCode +'''
	AND a.ProductType = '''+ @ProductType+'''


--===============================================================================================================================
DROP TABLE #TempServiceItem 
DROP TABLE #TempServiceItemIns
DROP TABLE #TempSOSupply'

EXEC(@query)

select convert(xml,@query)

--===============================================================================================================================
-- INSERT PICKING HEADER AND DETAIL
--===============================================================================================================================

SET @MaxPickingList = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'PLS' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempPickingList = ISNULL((SELECT 'PLS/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxPickingList, 1), 6)),'PLS/YY/XXXXXX')

INSERT INTO SpTrnSPickingHdr 
SELECT 
	CompanyCode
	, BranchCode
	, @TempPickingList PickingSlipNo
	, GetDate() PickingSlipDate
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, '' PickedBy
	, CONVERT(BIT, 0) isBORelease
	, isSubstitution
	, isIncludePPN
	, TransType
	, SalesType
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '' Remark
	, '0' Status
	, '0' PrintSeq
	, TypeOfGoods
	, CreatedBy
	, CreatedDate
	, LastUpdateBy
	, LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = (SELECT distinct DocNo FROM spTrnSORDDtl WHERE CompanyCode = @CompanyCode AND Branchcode = @BranchCode 
					AND DocNo = @TempDocNo AND QtySupply > 0)		

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'PLS'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

-- ==============================================================================================================================
-- UPDATE SALES ORDER HEADER 
-- ==============================================================================================================================
UPDATE SpTrnSORDHdr
	SET ExPickingSlipNo = @TempPickingList,
		ExPickingSlipDate = ISNULL((SELECT PickingSlipDate FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode
				AND BranchCode = @BranchCode AND PickingSlipNo = @TempPickingList),'')
	
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo

UPDATE SpTrnSOSupply
	SET PickingSlipNo = @TempPickingList
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
-- ==============================================================================================================================
-- INSERT PICKING DETAIL
-- ==============================================================================================================================

INSERT INTO SpTrnSPickingDtl
SELECT 
	a.CompanyCode
	, a.BranchCode
	, @TempPickingList PickingSlipNo
	, '00' WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, b.DocDate 
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtySupply QtyOrder
	, a.QtySupply
	, a.QtySupply QtyPicked 
	, 0 QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, a.CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, a.TotSalesAmt
	, a.MovingCode
	, a.ABCClass
	, a.ProductType
	, a.PartCategory
	, '' ExPickingSlipNo
	, @DefaultDate ExPickingSlipDate
	, CONVERT(BIT, 0) isClosed
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSORDDtl a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSORDHdr b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.DocNo = @TempDocNo
	AND a.QtySupply > 0


--================================================================================================================================
-- UPDATE AMOUNT HEADER
--================================================================================================================================
SELECT * INTO #TempHeader FROM (
SELECT 
	header.CompanyCode
	, header.BranchCode
	, header.DocNo
	, header.TotSalesQty
	, header.TotSalesAmt
	, header.TotDiscAmt
	, header.TotDPPAmt
	, floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100)) 
		TotPPNAmt
	, header.TotDPPAmt + floor(header.TotDPPAmt * (ISNULL((SELECT TaxPct FROM GnMstTax WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND TaxCode IN (SELECT TaxCode FROM GnMstCustomerProfitCenter WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
			AND ProfitCenterCode = '300' AND CustomerCode = @CustomerCode)),0)/100))
		TotFinalSalesAmt
FROM (
SELECT 
	CompanyCode
	, BranchCode
	, DocNo
	, SUM(QtyOrder) TotSalesQty
	, SUM(SalesAmt) TotSalesAmt
	, SUM(DiscAmt) TotDiscAmt
	, SUM(NetSalesAmt) TotDPPAmt
FROM SpTrnSORDDtl WITH (NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND DocNo = @TempDocNo
GROUP BY CompanyCode
	, BranchCode
	, DocNo
) header ) #TempHeader

UPDATE SpTrnSORDHdr
SET 
	TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotFinalSalesAmt
FROM SpTrnSORDHdr a, #TempHeader b
WHERE 
	1 = 1
	AND a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo

DROP TABLE #TempHeader

FETCH NEXT FROM db_cursor INTO @TypeOfGoods
END
CLOSE db_cursor
DEALLOCATE db_cursor 

--===============================================================================================================================
-- Update Transdate
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- INSERT SVSDMOVEMENT
--===============================================================================================================================

declare @md bit
set @md = (select case WHEN EXISTS(select * from gnMstCompanyMapping where CompanyCode = @CompanyCode and BranchCode = @BranchCode and CompanyMD = @CompanyCode and BranchMD = @BranchCode) then cast(1 as bit) ELSE cast(0 as bit) END)


if(@md = 0)
begin

 declare @QueryTemp as varchar(max)  
 declare @PurchaseDisc as decimal  

  set @PurchaseDisc = (select isnull(DiscPct, 0) from gnMstSupplierProfitCenter   
       where CompanyCode = @CompanyCode   
       and BranchCode = @BranchCode  
       and SupplierCode = @BranchMD 
       and ProfitCenterCode = '300')  
         
  if (@PurchaseDisc = 0) raiserror ('Purchase Discount belum di-setting untuk Part tersebut!',16,1);            

set @Query ='insert into '+ @DbMD +'..svSDMovement
select a.CompanyCode, a.BranchCode, a.DocNo, a.CreatedDate, a.PartNo
, Seq = convert(integer, ROW_NUMBER() OVER (PARTITION BY a.ReferenceNo ORDER BY a.DocNo)) ,
a.WarehouseCode, a.QtyOrder, a.QtySupply, a.DiscPct,  (md.RetailPrice / 1.1 * ((100 - '+convert(varchar,isnull(@PurchaseDisc,0))+') / 100)) , a.RetailPrice, b.TypeOfGoods
, '''+ @CompanyMD +''','''+ @BranchMD +''','''+ @WarehouseMD +''', md.RetailPriceInclTax, md.RetailPrice, md.CostPrice
,''x'','''+ @producttype +''',''300'',''0'',''0'','''+ convert(varchar,GETDATE()) +''','''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
,'''+ @UserID +''','''+ convert(varchar,GETDATE()) +'''
from spTrnSORDDtl a 
join spTrnSORDHdr b on a.CompanyCode = b.CompanyCode
and a.BranchCode = b.BranchCode 
and a.DocNo = b.DocNo
join '+ @DbMD +'..spmstitemprice md
on md.CompanyCode = '''+ @CompanyMD +'''
and md.branchcode = '''+ @BranchMD +'''
and md.PartNo = a.PartNo
where a.ReferenceNo = '''+ @JobOrderNo +''''

exec (@Query)
--print (@QUERY)

end

--===============================================================================================================================
-- DROP TABLE SECTION 
--===============================================================================================================================
DROP TABLE #SrvOrder
DROP TABLE #Item

--rollback tran
END
GO
create procedure [dbo].[uspfn_spPPOSDtl4Table] @CompanyCode varchar(15), @BranchCode varchar(15), @POSNo varchar(25)
as
SELECT 
    row_number () OVER (ORDER BY a.CreatedDate desc) AS NoUrut,
    a.PartNo,
    a.OrderQty, 
    a.DiscPct, 
    a.PurchasePrice, 
    (SELECT PartName FROM spMstItemInfo WHERE PartNo = a.PartNo AND CompanyCode = a.CompanyCode) PartName,
    a.CostPrice, a.ABCClass, a.MovingCode, a.TotalAmount
	,case 
		when isnull(b.LockingBy,'')='' then a.CompanyCode
		else b.LockingBy
	end ShipTo
    , (select TOP 1 isnull(ParaValue, '') from gnMstLookUpDtl where companyCode = @CompanyCode and CodeId = 'PORDS') ParaValue
    ,case 
        when isnull(b.LockingBy,'')='' then a.BranchCode
        else b.LockingBy
	end Dealer
    , a.Note
FROM spTrnPPOSDtl a
	left join gnMstCoProfileSpare b on a.CompanyCode=b.CompanyCode and a.BranchCode=b.BranchCode
WHERE a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.POSNo = @POSNo
GO
create procedure [dbo].[uspfn_CRUD3DaysCallResource]
	@CompanyCode varchar(13),
	@CustomerCode varchar(13),
	@Chassis varchar(50)
as
begin
	delete CsLkuTDayCallView
	 where CompanyCode = @CompanyCode
       and CustomerCode = @CustomerCode
       and Chassis = @Chassis

	if object_id('.#1') is not null
		drop table #1;

	with x as (
			select * 
			  from CsLkuTDayCallViewSource a
			 where a.CompanyCode = @CompanyCode
			   and a.CustomerCode = @CustomerCode
			   and a.Chassis = @Chassis
		)
	select * into #1
	  from x;

	insert into CsLkuTDayCallView
	select * from #1;
end
GO
create procedure [dbo].[uspfn_UpdateAdditionalJob]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeAdditionalJob a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeAdditionalJob (
		   CompanyCode
		 , EmployeeID
		 , SeqNo
		 , Department
		 , Position
		 , Grade
		 , AssignDate
		 , ExpiredDate
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.EmployeeID
	     , a.SeqNo
	     , a.Department
	     , a.Position
	     , a.Grade
	     , a.AssignDate
	     , a.ExpiredDate
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_CRUDBPKPReminderResource]
	@CompanyCode varchar(13),
	@CustomerCode varchar(13),
	@Chassis varchar(50)
as
begin
	delete CsLkuBpkbView
	 where CompanyCode = @CompanyCode
       and CustomerCode = @CustomerCode
       and Chassis = @Chassis

	if object_id('.#1') is not null
		drop table #1;

	with x as (
			select * 
			  from CsLkuBpkbViewSource a
			 where a.CompanyCode = @CompanyCode
			   and a.CustomerCode = @CustomerCode
			   and a.Chassis = @Chassis
		)
	select * into #1
	  from x;

	insert into CsLkuBpkbView
	select * from #1;
end
GO
CREATE procedure [dbo].[uspfn_GetLmpDoc] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(5), @TransType varchar(5), @CodeID varchar(6),@BeginDate datetime, @EndDate datetime  
as  
--declare @CompanyCode varchar(15)  
--declare @BranchCode varchar(15)  
--declare @TypeOfGoods varchar(15)  
--declare @TransType varchar(5)  
--declare @BeginDate Datetime  
--declare @EndDate datetime  
--set @CompanyCode = '6006406'  
--set @BranchCode = '6006401'  
--set @TypeOfGoods = '0'  
--set @TransType = '1%'  
--set @BeginDate = '2014/03/01'  
--set @EndDate = '2014/05/30'  
SELECT  
  
 spTrnSLmpHdr.CompanyCode,  
 spTrnSLmpHdr.BranchCode,  
 spTrnSLmpHdr.LmpNo  
,spTrnSLmpHdr.LmpDate  
,spTrnSLmpHdr.BPSFNo  
,spTrnSLmpHdr.BPSFDate  
,spTrnSLmpHdr.PickingSlipNo  
,spTrnSLmpHdr.PickingSlipDate  
,spTrnSLmpHdr.TypeOfGoods  
,spTrnSLmpHdr.CustomerCodeShip  
,spTrnSLmpHdr.CustomerCode  
,spTrnSLmpHdr.CustomerCodeBill  
,spTrnSLmpHdr.TotSalesQty  
,spTrnSLmpHdr.TotSalesAmt  
,spTrnSLmpHdr.TotDiscAmt  
,spTrnSLmpHdr.TotDPPAmt  
,spTrnSLmpHdr.TotPPNAmt  
,spTrnSLmpHdr.CreatedBy  
,spTrnSLmpHdr.CreatedDate  
,spTrnSLmpHdr.LastUpdateBy  
,spTrnSLmpHdr.LastUpdateDate  
,spTrnSLmpHdr.LastUpdateBy  
,spTrnSLmpHdr.LastUpdateDate  
,spTrnSLmpHdr.isPKP  
,spTrnSLmpHdr.isLocked  
,spTrnSLmpHdr.LockingBy  
,spTrnSLmpHdr.LockingDate,  
 spTrnSLmpHdr.CustomerCode,  
 spTrnSLmpHdr.CustomerCodeShip,
 spTrnSLmpHdr.CustomerCodeBill as CustomerCodeTagih,
 b.CustomerName,  
 b.Address1,  
 b.Address2,  
 b.Address3,  
 b.Address4,  
 b.CustomerName CustomerNameTagih,  
 b.Address1 Address1Tagih,  
 b.Address2 Address2Tagih,  
 b.Address3 Address3Tagih,  
 b.Address4 Address4Tagih,  
 c.LookUpValueName TransType    
  
FROM spTrnSLmpHdr  
left join gnMstCustomer b  
ON spTrnSLmpHdr.CompanyCode = b.CompanyCode  
AND spTrnSLmpHdr.CustomerCode = b.CustomerCode   
left join gnMstLookupDtl c on  
spTrnSLmpHdr.CompanyCode = c.CompanyCode  
and spTrnSLmpHdr.TransType= c.LookupValue   
AND c.CodeID = @CodeID  
WHERE spTrnSLmpHdr.CompanyCode=@CompanyCode  
  AND spTrnSLmpHdr.BranchCode=@BranchCode  
  AND spTrnSLmpHdr.TypeOfGoods = @TypeOfGoods   
  AND Convert(Varchar, spTrnSLmpHdr.LmpDate, 111) between @BeginDate and @EndDate  
  AND TransType LIKE @TransType  
ORDER BY spTrnSLmpHdr.LmpNo DESC
GO
-- =============================================
-- Author:		David Leonardo
-- Create date: 6 November 2014
-- Description:	Select Supply Slip for Print
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_spPickingSlipForPrint]
	-- Add the parameters for the stored procedure here
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@ProductType varchar(5),
	@JobOrderNo varchar(50)
AS
BEGIN
	SELECT * INTO #t1 FROM (
                SELECT
                    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
                    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
                    d.PickedBy
                FROM
                    svTrnService a
                LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
	                AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
                LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
	                AND c.DocNo = b.SupplySlipNo
                LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
	                AND d.PickingSlipNo = c.ExPickingSlipNo
                LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
	                AND e.PickingSlipNo = d.PickingSlipNo
                LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
                    AND f.LookUpValue = c.TransType
                LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
                    AND g.PickingSlipNo = d.PickingSlipNo
                WHERE 
                    a.CompanyCode     = @CompanyCode
                    AND a.BranchCode  = @BranchCode
                    AND a.ProductType = @ProductType
                    AND a.jobOrderNo  = @JobOrderNo
                    AND b.SupplySlipNo <> ''
                    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode =  @CompanyCode AND BranchCode = @BranchCode
		                   AND ProductType = '4W' AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
                    AND d.Status < 2
            )#t1
            
            select a.PickingSlipNo, a.TypeOfGoods, a.TransType, a.SalesType,
            (SELECT TOP 1 DocNo FROM SpTrnSPickingDtl 
                WHERE CompanyCode = a.CompanyCode 
                    AND BranchCode = a.BranchCode 
                    AND PickingSlipNo = a.PickingSlipNo) DocNo 
            from spTrnSpickingHdr a
            where  CompanyCode =  @CompanyCode
				AND BranchCode = @BranchCode
				AND a.pickingSlipNo IN 
                (SELECT DISTINCT PickingSlipNo FROM #t1)
				AND Salestype = 2
            DROP TABLE #t1
END
GO
create procedure [dbo].[sp_spMstPurchCampaignView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
spMstPurchCampaign.PartNo, 
spMstItemInfo.PartName, 
spMstPurchCampaign.DiscPct, 
spMstPurchCampaign.BegDate,
spMstPurchCampaign.EndDate,
spMstPurchCampaign.SupplierCode, 
gnMstSupplier.SupplierName,
 spMstPurchCampaign.CompanyCode,
  spMstPurchCampaign.BranchCode
  FROM spMstPurchCampaign
  LEFT JOIN spMstItemInfo ON spMstItemInfo.PartNo = spMstPurchCampaign.PartNo AND	
        spMstItemInfo.CompanyCode = spMstPurchCampaign.CompanyCode
  LEFT JOIN gnMstSupplier ON gnMstSupplier.SupplierCode = spMstPurchCampaign.SupplierCode AND
        gnMstSupplier.CompanyCode = spMstPurchCampaign.CompanyCode
  INNER JOIN spMstItems ON spMstItems.CompanyCode=spMstPurchCampaign.CompanyCode AND 
	      spMstItems.BranchCode=spMstPurchCampaign.BranchCode AND 
				spMstItems.PartNo=spMstPurchCampaign.PartNo
where  spMstPurchCampaign.CompanyCode=@CompanyCode and spMstPurchCampaign.BranchCode=@BranchCode
GO
CREATE procedure [dbo].[uspfn_SpTrnIAdjust] (  @CompanyCode varchar(10) ,@BranchCode varchar(10), @TypeOfGoods varchar(15))
as
SELECT c.AdjustmentNo, c.AdjustmentDate, c.ReferenceNo, 
c.ReferenceDate, c.TypeOfGoods
FROM SpTrnIAdjustHdr c with(nolock,nowait)
WHERE c.CompanyCode = @CompanyCode
AND c.BranchCode = @BranchCode
AND c.TypeOfGoods = @TypeOfGoods
AND c.Status in ('0','1')
ORDER BY c.AdjustmentNo DESC
GO
CREATE procedure [dbo].[uspfn_spGetSpTrnSLmpDtl]  
@CompanyCode varchar(15), @BranchCode varchar(15), @LMPNo varchar(15)  
as  
select PartNo, PartNoOriginal, DocNo, DocDate, ReferenceNo, QtyBill from spTrnSLmpDtl  
where CompanyCode = @CompanyCode and BranchCode = @BranchCode  
AND LmpNo = @LMPNo
GO
create procedure [dbo].[uspfn_ReloadSTNKExtResource]
as

begin
	declare @ParamDate datetime;
	declare @RecordCount int;
	
	set @ParamDate = convert(varchar(4), datepart(year, getdate()) )+ '-01-01';

	if object_id('CsLkuStnkExtView') is not null
	begin
		select 'CsLkuStnkExtView is exist';

		delete CsLkuStnkExtView 
		 where BpkbDate >= @ParamDate

		set @RecordCount = ( select count(CompanyCode) from CsLkuStnkExtView );

		if @RecordCount = 0
		begin
			select 'Record is null -> regenerating';

			drop table CsLkuStnkExtView;
			
			with x as (
				select * from CsLkuStnkExtViewSource
			)
			select *
			  into CsLkuStnkExtView
			  from x
		end

		insert into CsLkuStnkExtView
		select *
		  from CsLkuStnkExtViewSource
		 where BpkbDate >= @ParamDate
	end
	else
	begin
		select 'CsLkuStnkExtView is not exists';

		with x as (
			select * from CsLkuStnkExtViewSource
		)
		select *
		  into CsLkuStnkExtView
		  from x
	end

end;



--delete CsLkuStnkExtView
GO
CREATE procedure [dbo].[EmployeeTraining] @CompanyCode varchar(50), @BranchCode varchar(50), @EmployeeID varchar(50)
as
select a.CompanyCode, BranchCode, EmployeeID, IsSuzukiTraining, TrainingCode, CONVERT(VARCHAR(50),BeginTrainingDate,106) BeginTrainingDate, CONVERT(VARCHAR(50), EndTrainingDate,106) EndTrainingDate, IsActive, a.CreatedBy, a.CreatedDate, a.LastupdateBy, a.LastupdateDate,
	case when a.IsSuzukiTraining= 1 then c.LookUpValueName else b.LookUpValueName end Notes
	from gnMstEmployeeTraining a
	left join gnMstLookUpDtl b
		on a.CompanyCode = b.CompanyCode and b.CodeID = 'IEDU' and a.TrainingCode=b.LookUpValue 
	left join gnMstLookUpDtl c
		on a.CompanyCode = c.CompanyCode and c.CodeID = 'SZKT' and a.TrainingCode=c.LookUpValue 
	where a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode and a.EmployeeID=@EmployeeID
GO
CREATE procedure [dbo].[sp_MstPriceListJualBrowse] @CompanyCode varchar(10) , @BranchCode varchar(100)
 as

SELECT a.CompanyCode, a.BranchCode, a.GroupPriceCode, b.RefferenceDesc1 as GroupPriceName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelYear
		, a.TotalMinStaff, a.DPP, a.PPn, a.PPnBM, a.Total, a.Remark, cast(a.Status AS bit) as Status, a.TaxCode, a.TaxPct
FROM omMstPricelistSell a
LEFT JOIN OmMstRefference b
	ON a.GroupPriceCode = b.RefferenceCode AND b.RefferenceType='GRPR'
LEFT JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
WHERE a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode
GO
create procedure [dbo].[BrowseParameter] 
as
declare @tblParam as table  (
	DBName varchar(50),
	Extensions varchar(50),
	Prefix varchar(50),
	FolderPath varchar(500),
	DCSURL varchar(500),
	TAXURL varchar(500)
)

insert @tblParam (DBName, Extensions, Prefix, FolderPath, DCSURL, TAXURL   )
select (select ParamValue from sysParameter where ParamId='BACKUP_DBNAME'),
(select ParamValue from sysParameter where ParamId='BACKUP_FILEEXT'),
(select ParamValue from sysParameter where ParamId='BACKUP_FILENAME'),
(select ParamValue from sysParameter where ParamId='BACKUP_FOLDERPATH'),
(select ParamValue from sysParameter where ParamId='DCS_URL'),
(select ParamValue from sysParameter where ParamId='TAX_URL')

select  * from @tblParam
GO
CREATE PROCEDURE [dbo].[uspfn_spMasterPartView]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@PartNo varchar(50)
AS
if @PartNo=''
SELECT 
	ItemInfo.PartNo,
	Items.ABCClass,
	ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,
	Items.OnOrder,
	Items.ReservedSP,
	Items.ReservedSR,
	Items.ReservedSL,
	Items.MovingCode,
	ItemInfo.SupplierCode,
	ItemInfo.PartName,
	ItemPrice.RetailPrice,
	ItemPrice.RetailPriceInclTax,
	ItemPrice.PurchasePrice
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode
                        AND Items.PartNo = ItemLoc.PartNo
WHERE Items.Status > 0
  AND ItemLoc.WarehouseCode = '00'
  	and Items.CompanyCode = @CompanyCode
	  AND Items.BranchCode  = @BranchCode  
	  
else
SELECT 
	ItemInfo.PartNo,
	Items.ABCClass,
	ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,
	Items.OnOrder,
	Items.ReservedSP,
	Items.ReservedSR,
	Items.ReservedSL,
	Items.MovingCode,
	ItemInfo.SupplierCode,
	ItemInfo.PartName,
	ItemPrice.RetailPrice,
	ItemPrice.RetailPriceInclTax,
	ItemPrice.PurchasePrice
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
FROM SpMstItems Items
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode
                        AND Items.PartNo = ItemLoc.PartNo
WHERE Items.Status > 0
  AND ItemLoc.WarehouseCode = '00'
  	and Items.CompanyCode = @CompanyCode
	  AND Items.BranchCode  = @BranchCode   
	  and ItemInfo.PartNo=@PartNo
GO
CREATE procedure [dbo].[uspfn_RptCancelInvoiceTest]   
@CompanyCode varchar(25),   
@BranchCode varchar(25),   
@PeriodStart datetime,   
@PeriodEnd DateTime  
as  
SELECT a.BranchCode, a.JobOrderNo, isNull(b.InvoiceNo,'-') as InvoiceNo, 
isnull(convert(varchar(25),b.InvoiceDate,13),'-') as InvoiceDate,
isnull(left(convert(varchar,convert(MONEY,b.TotalSrvAmt),1), len(convert(varchar,convert(MONEY,b.TotalSrvAmt),1)) - 3),'-') as TotalInvoice, 
isnull(d.FullName,'-') as UpdatedBy,
a.InvoiceNo as InvoiceCancel, isnull(convert(varchar(25),a.InvoiceDate,113),'-') as InvoiceDateCancel,
left(convert(varchar,convert(MONEY,a.TotalSrvAmt),1), len(convert(varchar,convert(MONEY,a.TotalSrvAmt),1)) - 3) as TotalInvoiceCancel,c.FullName as UpdatedByCancel
FROM svTrnInvoiceLog a
left JOIN svTrnInvoice b ON a.CompanyCode = b.CompanyCode
AND a.BranchCode = b.BranchCode AND substring(a.InvoiceNo,0,4) = substring(b.InvoiceNo,0,4) and a.JobOrderNo = b.JobOrderNo 
left JOIN sysUser c 
ON c.UserId = substring(a.CreatedBy,0,CHARINDEX ('^', a.CreatedBy, 1))
left join Sysuser d
on d.UserID = b.CreatedBy
where  a.CompanyCode = @CompanyCode
and a.BranchCode = @BranchCode
and a.InvoiceDate between @PeriodStart AND @PeriodEnd
GO
--  --SELECT * FROM gnMstCustDealer  
CREATE procedure [dbo].[uspfn_CustDataWithTrans]  
--uspfn_custdatawithtrans '02-01-2013', 100  
@lastupdatedate datetime,  
@segment int  
as  
--select dateadd(mm,-1,getdate())
-- declare @LastUpdateDate datetime  
-- set @LastUpdateDate = dateadd(mm,-1,getdate())
declare @SelectCode varchar(2)  
DECLARE @IsDataExist bit  
DECLARE @LastUpdateBy varchar(8)  
SET @LastUpdateBy ='AUTOUPDT'  
set @SelectCode = 'B'
declare @DateData datetime  
  
IF(Year(@LastUpdateDate) >= Year(getdate()) and Month(@LastUpdateDate) >= month(getdate()))  
 begin  
  set @LastUpdateDate = getdate()  
 end
 set @DateData = dateadd(mm,1,(select convert(datetime,dateadd(mm,datediff(mm,0,@LastUpdateDate),0))))
-- SELECT @LastUpdateDate
-- select @DateData
  
-- Query all customer have transaction  
   select * into #t1 from  
        ( select 'UNIT' Kode, a.BranchCode, count(distinct a.CustomerCode) Total from omTrSalesInvoice a  
           where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
           AND a.InvoiceDate < @DateData 
           group by a.BranchCode ) #t1  
  
   select * into #t2 from  
        ( select 'SERVICE' Kode, a.BranchCode, count(distinct a.CustomerCode) Total from svTrnInvoice a  
           where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
           AND a.InvoiceDate < @DateData 
           group by a.BranchCode ) #t2  
  
   select * into #t3 from  
        ( select 'SPAREPART' Kode, a.BranchCode, count(distinct a.CustomerCode) Total from spTrnSInvoiceHdr a  
           where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
           AND a.InvoiceDate < @DateData 
           group by a.BranchCode ) #t3  
  
   select * into #t4 from  
       (( select 'UNIT&SERVICE' Kode, a.BranchCode, a.CustomerCode from omTrSalesInvoice a  
        where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
        AND a.InvoiceDate < @DateData 
     union   
     ( select 'UNIT&SERVICE' Kode, a.BranchCode, a.CustomerCode from svTrnInvoice a  
     where exists (select 1 from gnMstCustomer where CompanyCode=a.CompanyCode and CustomerCode=a.CustomerCode)  
     AND a.InvoiceDate < @DateData 
       )))#t4  
  
   select * into #t5 from  
        ( select Kode, BranchCode, count(distinct CustomerCode) Total from #t4  
           group by Kode, BranchCode) #t5  
   
 SELECT * INTO #t6 FROM(  
    select h.CompanyCode, d.BranchCode,  
     isnull(#t5.Total,0) 'TotalUnitService', isnull(#t1.Total,0) 'TotalUnit',   
     isnull(#t2.Total,0) 'TotalService', isnull(#t3.Total,0) 'TotalSparePart'  
   from gnmstOrganizationHdr h  
     inner join gnMstOrganizationDtl d on h.CompanyCode=d.CompanyCode  
      left join #t1 on #t1.BranchCode=d.BranchCode  
      left join #t2 on #t2.BranchCode=d.BranchCode  
      left join #t3 on #t3.BranchCode=d.BranchCode  
      left join #t5 on #t5.BranchCode=d.BranchCode)#t6  
  
  
 DECLARE   @tmpBranchCode      varchar(15)   
 DECLARE   c          CURSOR  
 FOR       SELECT     BranchCode   
     FROM       #t6  
 OPEN      c  
 FETCH     NEXT FROM c   
 INTO      @tmpBranchCode  
 WHILE     @@FETCH_STATUS = 0  
 BEGIN  
    --print @CustDataTrans  
    select @IsDataExist = (select count(*) from gnMstCustDealer where Year = Year(@LastUpdateDate) and Month = Month(@LastUpdateDate) and SelectCode = @SelectCode and BranchCode = @tmpBranchCode)  
    IF @IsDataExist = 0  
    begin   
    insert INTO gnMstCustDealer (CompanyCode, BranchCode, SelectCode, Year, Month, NoOfUnitService, NoOfUnit, NoOfService, NoOfSparePart, LastUpdateBy, LastUpdateDate)  
    SELECT a.CompanyCode CompanyCode,   
      @tmpBranchCode BranchCode,  
      @SelectCode SelectCode,  
      year(@LastUpdateDate) Year,  
      Month(@LastUpdateDate) Month,  
      a.TotalUnitService NoOfUnitService,  
      a.TotalUnit NoOfUnit,  
      a.TotalService NoOfService,  
      a.TotalSparePart NoOfSparePart,  
      @LastUpdateBy LastUpdateBy,  
      @LastUpdateDate LastUpdateDate  
    from #t6 a  
    where a.BranchCode = @tmpBranchCode   
    end  
    else  
    begin  
    Update gnMstCustDealer  
    set gnMstCustDealer.NoOfService = b.TotalService  
    , gnMstCustDealer.NoOfUnit = b.TotalUnit  
    , gnMstCustDealer.NoOfSparePart =  b.TotalSparePart  
    , gnMstCustDealer.NoOfUnitService = b.TotalUnitService  
    , gnMstCustDealer.LastUpdateBy = @LastUpdateBy  
    , gnMstCustDealer.LastUpdateDate = @LastUpdateDate  
    from #t6 b  
    join gnMstCustDealer on b.CompanyCode = gnMstCustDealer.CompanyCode  
    and b.BranchCode = gnMstCustDealer.BranchCode  
    and gnMstCustDealer.SelectCode = @SelectCode  
    and gnMstCustDealer.Year =  Year(@LastUpdateDate)  
    and gnMstCustDealer.Month = Month(@LastUpdateDate)  
    where  gnMstCustDealer.BranchCode = @tmpBranchCode and gnMstCustDealer.SelectCode = @SelectCode  
    and gnMstCustDealer.Year =  Year(@LastUpdateDate) and gnMstCustDealer.Month = Month(@LastUpdateDate)  
    end  
    FETCH NEXT from c INTO @tmpBranchCode  
 END  
 CLOSE      c  
 DEALLOCATE c  
   
drop table #t1, #t2, #t3, #t4, #t5, #t6  
SELECT CompanyCode, BranchCode, SelectCode, Year, Month, NoOfUnitService, NoOfUnit, NoOfService, NoOfSparePart,  
  LastUpdateBy, LastUpdateDate from gnMstCustDealer  
where SelectCode = @SelectCode and Year = Year(@LastUpdateDate) and Month = Month(@LastUpdateDate)
GO
CREATE procedure [dbo].[uspfn_RptCancelInvoice] 
@CompanyCode varchar(25), 
@BranchCode varchar(25), 
@PeriodStart datetime, 
@PeriodEnd DateTime
as
SELECT b.BranchCode, b.JobOrderNo, isNull(b.InvoiceNo,'-') as InvoiceNo, b.InvoiceDate as InvoiceDate,convert(varchar,convert(MONEY,b.TotalSrvAmt),1) as TotalInvoice, isnull(d.FullName,'-') as UpdatedBy,
a.InvoiceNo as InvoiceCancel, a.InvoiceDate as InvoiceDateCancel, convert(varchar,convert(MONEY,a.TotalSrvAmt),1) as TotalInvoiceCancel,c.FullName as UpdatedByCancel
FROM svTrnInvoiceLog a
left JOIN svTrnInvoice b ON a.CompanyCode = b.CompanyCode
AND a.BranchCode = b.BranchCode AND substring(a.InvoiceNo,0,4) = substring(b.InvoiceNo,0,4) and a.JobOrderNo = b.JobOrderNo 
JOIN sysUser c 
ON c.UserId = substring(a.CreatedBy,0,CHARINDEX ('^', a.CreatedBy, 1))
join Sysuser d
on d.UserID = b.CreatedBy
where  a.CompanyCode = @CompanyCode
and a.BranchCode = @BranchCode
and a.InvoiceDate between @PeriodStart AND @PeriodEnd
and b.InvoiceNo is null

select co.CompanyName as BranchName, co.Address1, co.Address2, co.Address3, co.Address4 , Convert(varchar(15),@PeriodStart,106) +' s/d '+Convert(varchar(15),@PeriodEnd,106) as PeriodStartEnd from gnMstCoProfile co
where co.CompanyCode = @CompanyCode
and co.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[sp_MstPriceListBeliBrowse] @CompanyCode varchar(10) , @BranchCode varchar(100)
 as

SELECT a.CompanyCode, a.BranchCode, a.SupplierCode, b.SupplierName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelYear
		,a.PPnBMPaid, a.DPP, a.PPn, a.PPnBM, a.Total, a.Remark, cast(a.Status AS bit) as Status
FROM omMstPricelistBuy a
LEFT JOIN gnMstSupplier b
	ON a.SupplierCode = b.SupplierCode
LEFT JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
WHERE a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[uspfn_CalculateAttendanceUploadProcess]
as
begin
	declare @percentage decimal(5, 2);
	declare @processed decimal(5, 0);
	declare @total decimal(5, 0);

	set @processed = isnull(( select top 1 a.AttendanceFlatFileExtractionProcessed from SimDmsIterator a ), 0.00);
	set @total = ( select top 1 a.AttendanceFlatFileExtractionTotal from SimDmsIterator a );

	set @percentage = @processed * 100 / @total;

	select @percentage as Processed;
end
GO
CREATE procedure [dbo].[uspfn_gnGetLeader]
	@CompanyCode varchar(20),
	@OrgCode varchar(20),
	@PosCode varchar(20)
as

declare @PosCodeLeader varchar(20)
	
select top 1 @OrgCode = a.DeptCode, @PosCodeLeader = PosCode
  from gnMstPosition a
 where 1 = 1
   and CompanyCode = @CompanyCode
   and DeptCode = @OrgCode
   and exists (
	select * from gnMstPosition
	 where CompanyCode = a.CompanyCode
	   and DeptCode = a.DeptCode
	   and PosCode = @PosCode
	   and PosLevel < a.PosLevel
	)
 order by PosLevel asc

select a.EmployeeID, b.EmployeeName, a.OrgCode, a.PosCode
  from gnMstEmployeeData a
 inner join gnMstEmployee b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.EmployeeID = a.EmployeeID
 where a.CompanyCode = @CompanyCode
   and a.OrgCode = @OrgCode
   and 
   (
	a.PosCode = @PosCodeLeader
	or 
	a.AdditionalJob1 = @PosCodeLeader
	or
	a.AdditionalJob2 = @PosCodeLeader
   )
GO
CREATE procedure [dbo].[uspfn_SvTrnServiceSelectPesananPekerjaanLuar]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15),
	@ShowAll bit
AS
-- EXEC uspfn_SvTrnServiceSelectPesananPekerjaanLuar '6156401000', '6156401001', '4W', '0'

declare @Query varchar(max)
declare @Condition varchar(4000);

set @Condition = '';
if(@ShowAll = 0) begin
	set @Condition = ' AND svTrnService.ServiceStatus IN (0,1,2,3,4) 
		AND srvTask.PONo = '''' AND srvTask.ServiceNo IS NOT NULL AND srvTask.IsSubCon = 1 ';
end 

set @Query = '
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + '' '' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + '' '' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + '' - '' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + '' - '' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus=''4'' then
            case when ''' + @ProductType + '''=''4W'' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '''' + custBill.Address2 + '''' + custBill.Address3 + '''' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = ''SERVSTAS''
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = ''' + @CompanyCode + '''
    AND svTrnService.BranchCode = ''' + @BranchCode + '''
 AND svTrnService.ServiceType = ''2''' + @Condition+ ' ORDER BY svTrnService.JobOrderNo DESC';

EXEC (@Query)
GO
CREATE Procedure [dbo].[Uspfn_spSOAccsUpdateSSReturnNo] @CompanyCode varchar(15), @BranchCode varchar(15),  
@ProductType varchar(2), @ReturnNo varchar(25), @PartNo varchar(25), @IsSaveProcess bit, @LastUpdateBy varchar(25)  
as  
SELECT  
 a.CompanyCode  
 , a.BranchCode  
 , d.SONo  
 , a.PartNo  
 , a.ReturnNo SSReturnNo  
 , b.ReturnDate SSReturnDate  
INTO  
 #SOAccs  
FROM  
 spTrnSRturSSDtl a WITH(NOLOCK, NOWAIT)  
 LEFT JOIN spTrnSRturSSHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode  
  AND a.BranchCode = b.BranchCode  
  AND a.ReturnNo = b.ReturnNo  
 LEFT JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode  
  AND a.BranchCode = c.BranchCode  
  AND a.DocNo = c.DocNo  
 LEFT JOIN omTrSalesSO d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode  
  AND a.BranchCode = d.BranchCode  
  AND c.UsageDocNo = d.SONo  
 INNER JOIN omTrSalesSOAccsSeq e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode  
  AND a.BranchCode = e.BranchCode  
  AND a.PartNo = e.PartNo  
  AND d.SONo = e.SONo  
        AND e.PartSeq=1  
WHERE  
 a.CompanyCode = @CompanyCode  
 AND a.BranchCode = @BranchCode  
 AND a.ReturnNo = @ReturnNo  
 AND a.PartNo = @PartNo  
  
UPDATE  
 omTrSalesSOAccsSeq  
SET  
 SSReturnNo = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnNo ELSE '' END  
 , SSReturnDate = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnDate ELSE '1900-01-01 00:00:00.000' END  
 , LastUpdateBy = @LastUpdateBy  
 , LastUpdateDate = GETDATE()  
FROM  
 omTrSalesSOAccsSeq a, #SOAccs b  
WHERE  
 a.CompanyCode = b.CompanyCode  
 AND a.BranchCode = b.BranchCode  
 AND a.SONo = b.SONo  
 AND a.PartNo = b.PartNo  
    AND a.PartSeq=1  
  
DROP TABLE #SOAccs
GO
create procedure [dbo].[uspfn_AbInqAttendance]
	@CompanyCode varchar(12),
	@EmployeeID varchar(25),
	@EmployeeName varchar(100),
	@DateFrom datetime,
	@DateTo datetime
as

begin
	if dbo.uspfn_IsNullOrEmpty(@EmployeeID) = 1 
	begin
		set @EmployeeID = '';
	end

	if dbo.uspfn_IsNullOrEmpty(@EmployeeName) = 1 
	begin
		set @EmployeeName = '';
	end

	select a.EmployeeID
	     , b.EmployeeName
		 , d.OrgName as Department
		 , c.PosName as Position
		 , isnull(e.LookUpValueName, '-') as Grade
		 , AttendanceDate = convert(datetime, (
				SUBSTRING(a.AttdDate, 0, 5) +
				'-' +
				SUBSTRING(a.AttdDate, 5, 2) +
				'-' +
				SUBSTRING(a.AttdDate, 7, 2) 
		   ))
	     --, a.AttdDate
	     , a.OnDutyTime
		 , a.OffDutyTime
	     , a.ClockInTime
		 , a.ClockOutTime
		 , IsAbsence = (
				case 
					when a.ClockInTime is null and a.ClockOutTime is null then 'Yes'
					when a.ClockInTime is not null then 'No'
					when a.ClockInTime is null then 'Yes'
				end
		   )
		 , LateTime = (
				case
					when a.ClockInTime > a.OnDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.OnDutyTime), convert(char(5), a.ClockInTime)))
					else '-'
				end
		   )
		 , ReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.ClockOutTime), convert(char(5), a.OffDutyTime)))
					else '-'
				end
		   )
		 , Overtime = (
				case
					when a.ClockOutTime > a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.OffDutyTime), convert(char(5), a.ClockOutTime)))
					else '-'
				end
		   )
		 , WorkingTime = dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(convert(char(5), a.ClockInTime), convert(char(5), a.ClockOutTime)))
         , Notes = ''
	  from HrEmployeeShift a
	 inner join HrEmployee b
	    on a.CompanyCode=b.CompanyCode
	   and a.EmployeeID=b.EmployeeID
	 inner join gnMstPosition c
	    on c.CompanyCode=a.CompanyCode
	   and c.DeptCode=b.Department
	   and c.PosCode=b.Position
	 inner join gnMstOrgGroup d
	    on d.CompanyCode=a.CompanyCode
	   and d.OrgCode=b.Department
	  left join gnMstLookUpDtl e
	    on e.CompanyCode=a.CompanyCode
	   and e.CodeID='ITSG'
	   and e.LookUpValue=b.Grade
 	 where a.CompanyCode=@CompanyCode 
       and a.AttdDate>=(
				convert(varchar(4), datepart(year, @DateFrom)) +
				right((replicate('0', 1) + convert(varchar(2), datepart(month, @DateFrom))), 2) +
				right((replicate('0', 1) + convert(varchar(2), datepart(day, @DateFrom))), 2)
	       )
	   and a.AttdDate<=(
				convert(varchar(4), datepart(year, @DateTo)) +
				right((replicate('0', 1) + convert(varchar(2), datepart(month, @DateTo))), 2) +
				right((replicate('0', 1) + convert(varchar(2), datepart(day, @DateTo))), 2)
	       )
	   and a.EmployeeID like '%' + @EmployeeID + '%'
	   and a.EmployeeID in (
			select x.EmployeeID
			  from HrEmployee x
			 where x.EmployeeName like '%' + @EmployeeName + '%'
			   and x.EmployeeID like '%' + @EmployeeID + '%'
	   ) 
		
	 order by a.AttdDate asc
end
GO
CREATE procedure [dbo].[sp_omMstModelColour] @CompanyCode varchar(10) , @SalesModelCode varchar(100)
 as

SELECT a.CompanyCode, a.SalesModelCode, b.SalesModelDesc, ColourCode, RefferenceDesc1, a.Remark, cast(a.Status AS bit) as [Status]
FROM omMstModelColourView a
INNER JOIN omMstModel b
	ON a.SalesModelCode = b.SalesModelCode
where a.CompanyCode=@CompanyCode and a.SalesModelCode=@SalesModelCode
GO
CREATE procedure [dbo].[spMstModelColour] (@CompanyCode varchar(10) , @SalesModelCode varchar(10))
 as
SELECT CompanyCode, SalesModelCode, ColourCode, RefferenceDesc1, Remark
FROM omMstModelColourView
where CompanyCode=@CompanyCode and SalesModelCode=@SalesModelCode
GO
CREATE procedure [dbo].[uspfn_spGetSpTrnSFPJDtl] @CompanyCode varchar(15), @BranchCode varchar(15),@FPJNo varchar(15)    
as    
select a.PartNo, a.DocNo, a.QtyBill, a.SalesAmt, a.DiscPct, a.WarehouseCode, b.PartName, a.PartNoOriginal, a.DocNo from  spTrnSFPJDtl a    
left JOIN SpMstItemInfo b    
ON a.CompanyCode = b.CompanyCode and a.PartNo = b.PartNo    
where a.CompanyCode = @CompanyCode    
and a.BranchCode = @BranchCode    
and a.FPJNo = @FPJNo
GO
create procedure [dbo].[uspfn_CustSuzukiDetail]  
@CompanyCode varchar(15),  
@BranchCode varchar(15),  
@CustType varchar(15),  
@TransDateStart datetime,  
@TransDateEnd datetime  
as  
--declare @BranchCode varchar(15)  
--set @BranchCode = '%'  
--declare @CustomerCode varchar(15)  
--set @CustomerCode = '%'  
--declare @TransDateStart datetime  
--set @TransDateStart = '2013-03-25'  
--declare @TransDateEnd datetime  
--set @TransDateEnd = '2013-03-26'
IF @CustType != 'D'  
begin    
select DISTINCT c.CompanyName, b.BranchName, a.CustomerCode, a.CustomerName, a.CustomerGovName,(case a.CustomerStatus WHEN 'A' THEN 'UNIT&SERVICE' WHEN 'B' THEN  'UNIT ONLY' WHEN 'C' THEN 'SERVICE ONLY' WHEN 'D' THEN  'NEITHER UNIT&SERVICE' end)CustomerStatus, a.Address, a.ProvinceName,  
 a.CityName, a.ZipNo, a.KelurahanDesa, a.KecamatanDistrik, a.KotaKabupaten, a.IbuKota, a.PhoneNo, a.HpNo,  
 a.FaxNo, a.OfficePhoneNo, a.Email, a.BirthDate, (case a.IsPkp WHEN 1 THEN 'Ya' WHEN 0 THEN 'Tidak' END)IsPkp, a.NPWPNo, a.NPWPDate, a.SKPNo, a.SKPDate, a.CustomerType,  
 (case a.Gender WHEN 'M' THEN 'Pria' else 'Wanita' END) Gendre, a.KTP from gnMstCustDealerDtl a  
 join gnMstOrganizationDtl b ON a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode  
 join gnMstOrganizationHdr c ON a.CompanyCode = c.CompanyCode  
 where a.BranchCode like @BranchCode  
 and a.TransType like @CustType  
 and a.LastTransactionDate >= @TransDateStart and a.LastTransactionDate <= @TransDateEnd  
 order BY a.CustomerCode  
 end
 else
 begin
	select DISTINCT c.CompanyName, b.BranchName, a.CustomerCode, a.CustomerName, a.CustomerGovName,(case a.CustomerStatus WHEN 'A' THEN 'UNIT&SERVICE' WHEN 'B' THEN  'UNIT ONLY' WHEN 'C' THEN 'SERVICE ONLY' WHEN 'D' THEN  'NEITHER UNIT&SERVICE' end)CustomerStatus, a.Address, a.ProvinceName,  
 a.CityName, a.ZipNo, a.KelurahanDesa, a.KecamatanDistrik, a.KotaKabupaten, a.IbuKota, a.PhoneNo, a.HpNo,  
 a.FaxNo, a.OfficePhoneNo, a.Email, a.BirthDate, (case a.IsPkp WHEN 1 THEN 'Ya' WHEN 0 THEN 'Tidak' END)IsPkp, a.NPWPNo, a.NPWPDate, a.SKPNo, a.SKPDate, a.CustomerType,  
 (case a.Gender WHEN 'M' THEN 'Pria' else 'Wanita' END) Gendre, a.KTP from gnMstCustDealerDtl a  
 join gnMstOrganizationDtl b ON a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode  
 join gnMstOrganizationHdr c ON a.CompanyCode = c.CompanyCode  
 where a.BranchCode like @BranchCode  
  and a.CustomerStatus like @CustType  
 and a.LastTransactionDate >= @TransDateStart and a.LastTransactionDate <= @TransDateEnd  
 order BY a.CustomerCode  
 end
  
select h.CompanyName Company, case when @BranchCode = '%' then 'ALL'  else d.BranchName end Branch,  
 CONVERT(CHAR(12), @TransDateStart , 106) PeriodeStart , CONVERT(CHAR(12), @TransDateEnd, 106) PeriodeEnd,  
 'Customer Suzuki Detail with last transaction' InquiryType,  
 CASE WHEN @CustType = '%' THEN 'ALL'   
 when @CustType = 'A' then 'Buy Unit & Service'   
 when @CustType = 'C' then 'Buy Unit Only'  
 when @CustType = 'D' then 'Service Only'  
 when @CustType = 'E' then 'Not Buy Unit & Service' end StatusInq  
from gnMstOrganizationDtl d  
join gnMstOrganizationHdr h ON d.CompanyCode = h.CompanyCode  
where d.BranchCode like @BranchCode
GO
create procedure [dbo].[uspfn_CRUDSTNKExtResource]
	@CompanyCode varchar(13),
	@CustomerCode varchar(13),
	@Chassis varchar(50)
as
begin

	delete from CsLkuStnkExtView
	 where CompanyCode = @CompanyCode
       and CustomerCode = @CustomerCode
       and Chassis = @Chassis

	if object_id('.#1') is not null
		drop table #1;

	with x as (
			select * 
			  from CsLkuStnkExtViewSource a
			 where a.CompanyCode = @CompanyCode
			   and a.CustomerCode = @CustomerCode
			   and a.Chassis = @Chassis
		)
	select * into #1
	  from x;

	insert into CsLkuStnkExtView
	select * from #1;
end
GO
create procedure [dbo].[uspfn_ReportCancelInvoice] 
@CompanyCode varchar(25), 
@BranchCode varchar(25), 
@PeriodStart datetime, 
@PeriodEnd DateTime
as
SELECT b.BranchCode, b.JobOrderNo, b.InvoiceNo as InvoiceNo, b.InvoiceDate as InvoiceDate,convert(varchar,convert(MONEY,b.TotalSrvAmt),1) as TotalInvoice, d.FullName as UpdatedBy,
a.InvoiceNo as InvoiceCancel, a.InvoiceDate as InvoiceDateCancel, convert(varchar,convert(MONEY,a.TotalSrvAmt),1) as TotalInvoiceCancel,c.FullName as UpdatedByCancel
FROM svTrnInvoiceLog a
left JOIN svTrnInvoice b ON a.CompanyCode = b.CompanyCode
AND a.BranchCode = b.BranchCode AND substring(a.InvoiceNo,0,4) = substring(b.InvoiceNo,0,4) and a.JobOrderNo = b.JobOrderNo 
JOIN sysUser c 
ON c.UserId = substring(a.CreatedBy,0,CHARINDEX ('^', a.CreatedBy, 1))
join Sysuser d
on d.UserID = b.CreatedBy
where  b.JobOrderNo IS NOT NULL
and a.CompanyCode = @CompanyCode
and a.BranchCode = @BranchCode
and a.InvoiceDate between @PeriodStart AND @PeriodEnd

select co.CompanyName, co.Address1, co.Address2, co.Address3, co.Address4 , Convert(varchar(15),@PeriodStart,106) +' s/d '+Convert(varchar(15),@PeriodEnd,106) as PeriodStartEnd from gnMstCoProfile co
where co.CompanyCode = @CompanyCode
and co.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[sp_MstPriceListJualView] @CompanyCode varchar(10) , @BranchCode varchar(100)
													, @GroupPriceCode varchar(10),@SalesModelCode varchar(100), @SalesModelYear varchar(10)
 as

SELECT a.CompanyCode, a.BranchCode, a.GroupPriceCode, b.RefferenceDesc1 as GroupPriceName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelYear
		, a.*
FROM omMstPricelistSell a
LEFT JOIN OmMstRefference b
	ON a.GroupPriceCode = b.RefferenceCode AND b.RefferenceType='GRPR'
LEFT JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
WHERE a.CompanyCode = @CompanyCode and a.BranchCode = @BranchCode
		and a.GroupPriceCode = @GroupPriceCode and a.SalesModelCode = @SalesModelCode and a.SalesModelYear = @SalesModelYear
GO
CREATE procedure [dbo].[sp_KaroseriBrowse]  @CompanyCode varchar(10), @BranchCode varchar(10)
 as

select a.CompanyCode, a.BranchCode, a.SupplierCode, b.SupplierName, a.SalesModelCode, c.SalesModelDesc, a.SalesModelCodeNew, d.SalesModelDesc as SalesModelDescNew
		,a.DPPMaterial, a.DPPFee, a.DPPOthers, a.PPn, a.Total, a.Remark, cast(a.Status AS bit) as Status
from omMstKaroseri a
INNER JOIN gnMstSupplier b
	ON a.SupplierCode = b.SupplierCode
INNER JOIN omMstModel c
	ON a.SalesModelCode = c.SalesModelCode
INNER JOIN omMstModel d
	ON a.SalesModelCodeNew = d.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
GO
create procedure [dbo].[uspfn_spUpdateOrderParams]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@SupplierCode varchar(15),
@MovingCode varchar(15),
@LeadTime DECIMAL,
@OrderCycle DECIMAL,
@SafetyStock DECIMAL,
@UserId varchar(32)
AS
UPDATE spMstItems
SET LeadTime = @LeadTime,
    OrderCycle = @OrderCycle,
    SafetyStock = @SafetyStock,
    SafetyStockQty = @SafetyStock * a.DemandAverage,
    OrderPointQty = (a.DemandAverage * (@LeadTime +  @OrderCycle)) + 
                     (a.DemandAverage *  @SafetyStock),
    LastUpdateBy = @UserId,
    LastUpdateDate = getdate()
FROM spMstItems a INNER JOIN spMstItemInfo b 
ON a.CompanyCode=b.CompanyCode
AND a.PartNo=b.PartNo
WHERE a.CompanyCode=@CompanyCode
    AND a.BranchCode=@BranchCode
    AND b.SupplierCode=@SupplierCode
    AND a.MovingCode=@MovingCode
GO
create procedure [dbo].[uspfn_ChangeEmployeeID]
	@CompanyCode varchar(17),
	@UserID varchar(25),
	@CurrentEmployeeID varchar(25),
	@NewEmployeeID varchar(25)
as
begin
	if @CurrentEmployeeID=@NewEmployeeID
		select convert(bit, 0) as status, 'Current EmployeeID and New EmployeeID must be different.' as message;
	else 
	begin
		begin try
			begin transaction
			
			declare @NumberOfRecord tinyint;
			set @NumberOfRecord  = ( select count(EmployeeID) from HrEmployee where CompanyCode=@CompanyCode and EmployeeID=@NewEmployeeID );

			if @NumberOfRecord > 0
			begin
				select convert(bit, 0) as status, 'There is already Employee that has same ID with your new EmployeeID.' as message;
			end
			else
			begin
				update HrEmployee 
				   set PersonnelStatus='2'
				 where CompanyCode=@CompanyCode
				   and EmployeeID=@CurrentEmployeeID;

				insert into HrEmployee (CompanyCode, EmployeeID, EmployeeName, Email, FaxNo, Handphone1, Handphone2, Handphone3, Handphone4, Telephone1, Telephone2, OfficeLocation, IsLinkedUser, RelatedUser, JoinDate, Department, Position, Grade, Rank, Gender, TeamLeader, PersonnelStatus, ResignDate, ResignDescription, IdentityNo, NPWPNo, NPWPDate, BirthDate, BirthPlace, Address1, Address2, Address3, Address4, Province, District, SubDistrict, Village, ZipCode, DrivingLicense1, DrivingLicense2, MaritalStatus, MaritalStatusCode, Height, Weight, UniformSize, UniformSizeAlt, ShoesSize, FormalEducation, BloodCode, OtherInformation, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate, Religion, SelfPhoto, IdentityCardPhoto, IsDeleted)
				select a.CompanyCode
					 , @NewEmployeeID  
					 , a.EmployeeName
					 , a.Email
					 , a.FaxNo
					 , a.Handphone1
					 , a.Handphone2
					 , a.Handphone3
					 , a.Handphone4
					 , a.Telephone1
					 , a.Telephone2
					 , a.OfficeLocation
					 , a.IsLinkedUser
					 , a.RelatedUser
					 , a.JoinDate
					 , a.Department
					 , a.Position
					 , a.Grade
					 , a.Rank
					 , a.Gender
					 , a.TeamLeader
					 , '1' as PersonnelStatus
					 , a.ResignDate
					 , a.ResignDescription
					 , a.IdentityNo
					 , a.NPWPNo
					 , a.NPWPDate
					 , a.BirthDate
					 , a.BirthPlace
					 , a.Address1
					 , a.Address2
					 , a.Address3
					 , a.Address4
					 , a.Province
					 , a.District
					 , a.SubDistrict
					 , a.Village
					 , a.ZipCode
					 , a.DrivingLicense1
					 , a.DrivingLicense2
					 , a.MaritalStatus
					 , a.MaritalStatusCode
					 , a.Height
					 , a.Weight
					 , a.UniformSize
					 , a.UniformSizeAlt
					 , a.ShoesSize
					 , a.FormalEducation
					 , a.BloodCode
					 , a.OtherInformation
					 , @UserID
					 , getdate()
					 , @UserID
					 , getdate()
					 , a.Religion
					 , a.SelfPhoto
					 , a.IdentityCardPhoto
					 , a.IsDeleted
				  from HrEmployee a
				 where a.CompanyCode=@CompanyCode
				   and a.EmployeeID=@CurrentEmployeeID;

				insert into HrEmployeeIDChangedHistory (CompanyCode, OldEmployeeID, NewEmployeeID, CreatedBy, CreatedDate)
				select @CompanyCode
				     , @CurrentEmployeeID
					 , @NewEmployeeID
					 , @UserID
					 , getdate()				

				select convert(bit, 1) as status, 'EmployeeID has been updated.' as message;
			end
			commit transaction
		end try
		begin catch
			rollback transaction
			select convert(bit, 0) as status,  'Sorry, we cannot process your request. Please, try again later!' as message;
		end catch
	end
end
GO
create procedure [dbo].[uspfn_OmTrSalesDODetailSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , BranchCode
     , DONo
     , DOSeq
     , SalesModelCode
     , SalesModelYear
     , ChassisCode
     , ChassisNo
     , EngineCode
     , EngineNo
     , ColourCode
     , Remark
     , StatusBPK
     , CreatedBy
     , CreatedDate
     , LastUpdateBy
     , LastUpdateDate
  from omTrSalesDODetail
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_OmTrSalesDODetailSend @LastUpdateDate='2013-01-01', @Segment=1
GO
CREATE PROCEDURE [dbo].[uspfn_spGetSO4PLBackOrderWindow] @CompanyCode nvarchar(15),
@BranchCode nvarchar(15),@CustomerCode nvarchar(15),
@SalesType nvarchar(2),@TransType nvarchar(3),
@TypeOfGoods nvarchar(2),@ProductType nvarchar(2)
as
SELECT DISTINCT
    spTrnSORDHdr.DocNo,
    DocDate, 
    PaymentName = 
    (SELECT LookupValueName FROM gnMstLookupDtl WHERE LookupValue = PaymentCode AND CodeID = 'PYBY' AND
        CompanyCode = @CompanyCode),
    OrderNo, 
    OrderDate, 
    Convert(bit, 0) chkSelect 
FROM spTrnSORDHdr
INNER JOIN spTrnSORDDtl ON spTrnSORDDtl.DocNo = spTrnSORDHdr.DocNo AND
    spTrnSORDDtl.CompanyCode = spTrnSORDHdr.CompanyCode AND
    spTrnSORDDtl.BranchCode = spTrnSORDHdr.BranchCode
WHERE 
    (spTrnSORDDtl.QtyBO - spTrnSORDDtl.QtyBOSupply - spTrnSORDDtl.QtyBOCancel > 0)
    AND spTrnSORDHdr.CompanyCode = @CompanyCode
    AND spTrnSORDHdr.BranchCode = @BranchCode 
    AND spTrnSORDHdr.CustomerCode = @CustomerCode
    AND spTrnSORDHdr.SalesType = @SalesType
    AND spTrnSORDHdr.TransType = @TransType
    AND spTrnSORDHdr.TypeOfGoods = @TypeOfGoods
    AND spTrnSORDDtl.ProductType = @ProductType
    AND spTrnSORDHdr.DocNo not in 
        (SELECT spTrnSOSupply.DocNo from spTrnSOSupply 
            WHERE 
        spTrnSOSupply.CompanyCode = spTrnSORDHdr.CompanyCode
        AND spTrnSOSupply.BranchCode = spTrnSORDHdr.BranchCode
        AND spTrnSOSupply.DocNo = spTrnSORDHdr.DocNo
        AND spTrnSOSupply.Status = 0)
GO
CREATE Procedure [dbo].[uspfn_spGetSPKNoService] @CompanyCode varchar(15), @BranchCode varchar(15), @LmpNo varchar(20)  
as  
SELECT c.*,   
d.CustomerCode, d.CustomerName, d.CustomerGovName, d.Address1, d.Address2, d.Address3, d.Address4,  
d.CityCode ,e.LookUpValueName as City, d.HpNo, d.FaxNo, c.VIN, c.EngineNo, x.LmpNo, x.DocDate as LmpDate  FROM   
(  
 SELECT TOP 1 a.*   
 FROM SpTrnSLmpDtl a   
 WHERE a.companyCode =   @CompanyCode  
   AND a.branchCode    = @BranchCode  
   AND a.lmpno         = @LmpNo   
) x   
INNER JOIN spTrnSOrdHdr b ON b.CompanyCode = x.CompanyCode   
  AND b.BranchCode = x.BranchCode   
  AND b.DocNo = x.DocNo   
INNER JOIN svTrnService c ON c.CompanyCode = b.CompanyCode  
  AND c.BranchCode = b.BranchCode  
  AND c.JobOrderNo = b.UsageDocNo  
INNER JOIN GnMstCustomer d on c.CompanyCode = d.CompanyCode  
  AND c.CustomerCode = d.CustomerCode  
Inner JOIN GnMstLookupDtl e on e.CompanyCode = d.CompanyCode  
and e.CodeID = 'City'  
and e.LookupValue = d.CityCode  
WHERE x.CompanyCode = @CompanyCode   
  AND x.BranchCode  = @BranchCode   
  AND x.Lmpno       = @LmpNo
GO
create procedure [dbo].[uspfn_OmTrSalesInvoiceSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , BranchCode
     , InvoiceNo
     , InvoiceDate
     , SONo
     , CustomerCode
     , BillTo
     , FakturPajakNo
     , FakturPajakDate
     , DueDate
     , isStandard
     , Remark
     , Status
     , CreatedBy
     , CreatedDate
     , LastUpdateBy
     , LastUpdateDate
     , isLocked
     , LockingBy
     , LockingDate
  from omTrSalesInvoice
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_OmTrSalesInvoiceSend @LastUpdateDate='2013-01-01', @Segment=1
GO
create Procedure [dbo].[uspfn_spGetSelectCostPrice] @CompanyCode varchar(15), @BranchCode varchar(15), @PartNo varchar(25),   
@TypeOfGoods varchar(3), @ProductType varchar(3)  
as  
SELECT A.CompanyCode, A.BranchCode, A.PartNo,  
       C.SupplierCode, A.OnHand, B.CostPrice  
  FROM spMstItems A  
       INNER JOIN spMstItemPrice B   
            ON (A.CompanyCode = B.CompanyCode) AND (A.BranchCode = B.BranchCode) AND (A.PartNo = B.PartNo)  
        INNER JOIN spMstItemInfo C  
            ON C.CompanyCode = A.CompanyCode AND C.PartNo = A.PartNo  
WHERE A.CompanyCode = @CompanyCode  
AND A.BranchCode = @BranchCode  
AND A.TypeOfGoods = @TypeOfGoods  
AND A.ProductType = @ProductType  
AND A.PartNo = @PartNo  
 ORDER BY  
   A.CompanyCode ASC,  
   A.BranchCode ASC,  
   A.PartNo ASC
GO
CREATE procedure [dbo].[sp_IsValidSTAnalyze] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@STHdrNo varchar(20))


as

SELECT * INTO #a2 FROM(
SELECT
	a.PartNo, a.STNo, a.SEqNo,  CASE WHEN b.Partno is null THEN 'LOKASI UTAMA BELUM DIENTRY' ELSE '' END Status
FROM SpTrnStockTakingDtl a
LEFT JOIN 
(
	SELECT
		x.CompanyCode,
		x.BranchCode,
		x.StHdrNo,
		x.PartNo
	FROM SpTrnStockTakingDtl x
	WHERE x.CompanyCode = @CompanyCode
		AND x.BranchCode = @BranchCode
		AND x.StHdrNo = @StHdrNo
		AND x.IsMainLocation = 1

) b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.StHdrNo = b.StHdrNo AND a.PartNo = b.PartNo
WHERE a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.StHdrNo = @StHdrNo
GROUP BY a.PartNo, b.PartNo, a.STNo, a.SeqNo
) #a2

SELECT * FROM #a2 WHERE Status <> ''
UNION
SELECT
	a.PartNo, a.STNo, a.SEqNo,'BELUM TERDAFTAR PADA LIST TAG/FORM' Status
FROM SpTrnStockTakingTemp a
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND PartNo NOT IN (
SELECT 
DISTINCT(a.PartNo)
FROM SpTrnStockTakingDtl a
WHERE CompanyCode = @CompanyCode
	  AND BranchCode = @BranchCode
	  AND StHdrNo = @StHdrNo)
	AND PartNo <> ''
GROUP BY a.PartNo, a.STNo, a.SeqNo
UNION
SELECT
	a.PartNo, a.STNo, a.SEqNo, 'BLANK TAG/FORM BELUM TERPAKAI/DIBATALKAN' Status
FROM SpTrnStockTakingTemp a
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND STNo NOT IN (
SELECT 
DISTINCT(a.StNo)
FROM SpTrnStockTakingDtl a
WHERE CompanyCode = @CompanyCode
	  AND BranchCode = @BranchCode
	  AND StHdrNo = @StHdrNo)
	AND PartNo = '' AND a.Status IN ('0','1')
GROUP BY a.PartNo, a.STNo, a.SeqNo
UNION
SELECT PartNo, STNo, SeqNo, 'LOKASI UTAMA DI-ENTRY LEBIH DARI BATAS' Status
FROM SpTrnStocktakingDtl
WHERE CompanyCode = @CompanyCode 
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND PartNo IN (
SELECT
	PartNo
FROM spTrnStockTakingDtl
WHERE CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND StHdrNo = @StHdrNo
	AND IsMainLocation = 1
Group By PartNo
HAVING
	Count(PartNo) > 1)
DROP TABLE #a2
GO
CREATE procedure [dbo].[uspfn_SvInsertDefaultTaskMovement]
--declare 
@CompanyCode as varchar(15),
@BranchCode as varchar(15),
@ProductType as varchar(15),
@ServiceNo as int,
@UserID as varchar(100)
as

--set @CompanyCode = '6006400001'
--set	@BranchCode = '6006400101'
--set	@ProductType = '4W'
--set	@ServiceNo = 1
--set	@UserID = 'yo'

declare @Sql as varchar(max)

set @Sql = 
'insert into '+dbo.GetDbMD(@CompanyCode,@BranchCode)+'..svSDMovement
select a.CompanyCode, a.BranchCode, b.JobOrderNo, b.JobOrderDate, a.PartNo, a.PartSeq, dbo.GetWarehouseMD(a.CompanyCode,a.BranchCode) WarehouseCode, 
a.DemandQty, a.DemandQty, a.DiscPct, a.CostPrice, a.RetailPrice, a.TypeOfGoods, dbo.GetCompanyMD(a.CompanyCode,a.BranchCode) CompanyMD, 
dbo.GetBranchMD(a.CompanyCode,a.BranchCode) BranchMD, dbo.GetWarehouseMD(a.CompanyCode,a.BranchCode) WarehouseMD, c.RetailPriceInclTax, c.RetailPrice,
c.CostPrice, ''x'', '''+@ProductType+''', ''300'', ''0'', ''0'', ''1900/01/01'', '''+@UserID+''', GETDATE(), '''+@UserID+''', GETDATE()  
from 
svTrnSrvItem a 
inner join SvTrnService b on a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.ServiceNo = b.ServiceNo
left join '+dbo.GetDbMD(@CompanyCode,@BranchCode)+'..spMstItemPrice c ON c.CompanyCode = dbo.GetCompanyMD(a.CompanyCode,a.BranchCode) and c.BranchCode = dbo.GetBranchMD(a.CompanyCode,a.BranchCode)
and c.PartNo = a.PartNo
where a.CompanyCode = '''+@CompanyCode+''' and a.BranchCode = '''+@BranchCode+''' and a.ServiceNo = ' + convert(varchar,@ServiceNo,1)
print(@Sql)
exec(@Sql)
GO
----SP to get CUSTDATA      
CREATE PROCEDURE [dbo].[uspfn_CsCustomerData]            
@LastUpdateDate datetime,            
@segment int            
as            
          
--declare @LastUpdateDate datetime            
--set @LastUpdateDate = dateadd(mm,-2,getdate())           
declare @SelectCode varchar(2)           
set @SelectCode = 'A'             
DECLARE @IsDataExist bit            
DECLARE @LastUpdateBy varchar(8)            
SET @LastUpdateBy ='AUTOUPDT'   
declare @DateData datetime           
            
IF(Year(@LastUpdateDate) >= Year(getdate()) and Month(@LastUpdateDate) >= month(getdate()))  
 begin  
  set @LastUpdateDate = getdate()  
 end
 set @DateData = dateadd(mm,1,(select convert(datetime,dateadd(mm,datediff(mm,0,@LastUpdateDate),0))))
-- SELECT @LastUpdateDate as LastUpdateDate
-- select @DateData as  DateData          
        
-- Query all customer with/without transaction            
select * into #t0 from            
        (select distinct c.CustomerCode, p.ProfitCenterCode from gnMstCustomer c, gnMstCustomerProfitCenter p             
           where c.CompanyCode=p.CompanyCode and c.CustomerCode=p.CustomerCode and c.Status=1             
            AND c.CreatedDate < @DateData ) #t0            
select * into #t1 from            
 (select CompanyCode, CompanyName,             
        ( select count(*) from #t0 where ProfitCenterCode='100' ) "TOTALUNIT",            
        ( select count(*) from #t0 where ProfitCenterCode='200' ) "TOTALSERVICE",            
        ( select count(*) from #t0 where ProfitCenterCode='300' ) "TOTALSPAREPART",            
    'All Customer with/without transaction' Notes            
     from gnMstOrganizationHdr)#t1               
--drop table #t0          
--drop table #t1          
select @IsDataExist = (select count(*) from gnMstCustDealer where Year = Year(@LastUpdateDate) and Month = Month(@LastUpdateDate) and SelectCode = @SelectCode)            
  print @IsDataExist          
IF @IsDataExist = 0            
begin            
 --insert new data to gnMstCustDealer             
 insert INTO gnMstCustDealer (CompanyCode, BranchCode, SelectCode, Year, Month, NoOfUnitService, NoOfUnit, NoOfService, NoOfSparePart, LastUpdateBy, LastUpdateDate)            
 SELECT a.CompanyCode,             
   '' BranchCode,            
   @SelectCode,            
   Year(@LastUpdateDate) Year,            
   Month(@LastUpdateDate) Month,            
   0 NoOfUnitService,            
   a.TotalUnit NoOfUnit,            
   a.TotalService NoOfService,            
   a.TotalSparePart NoOfSparePart,            
   @LastUpdateBy LastUpdateBy,            
   @LastUpdateDate LastUpdateDate            
 from #t1 a            
end            
else             
begin            
 Update gnMstCustDealer            
 set gnMstCustDealer.NoOfService = b.TotalService            
 , gnMstCustDealer.NoOfUnit = b.TotalUnit            
 , gnMstCustDealer.NoOfSparePart =  b.TotalSparePart            
 , gnMstCustDealer.LastUpdateBy = @LastUpdateBy            
 , gnMstCustDealer.LastUpdateDate = @LastUpdateDate            
 from #t1 b            
 where gnMstCustDealer.CompanyCode = b.CompanyCode            
 and gnMstCustDealer.SelectCode = @SelectCode            
 and gnMstCustDealer.Year = year(@LastUpdateDate)             
 AND gnMstCustDealer.Month = month(@LastUpdateDate)            
          
          
end            
            
DROP TABLE #t0, #t1            
            
SELECT CompanyCode, BranchCode, SelectCode, Year, Month, NoOfUnitService, NoOfUnit, NoOfService, NoOfSparePart,            
  LastUpdateBy, LastUpdateDate from gnMstCustDealer            
where SelectCode = @SelectCode and Year = Year(@LastUpdateDate) and Month = Month(@LastUpdateDate)
GO
CREATE procedure [dbo].[sp_MaintainAvgCostItem] (  

@CompanyCode varchar(10),
@BranchCode varchar(10),
@ProductType varchar(10),
@PartNo varchar (20),
@Option varchar (2)
)


as

IF @Option = 'A'
BEGIN

SELECT TOP 1500
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = @CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,ItemInfo.SupplierCode
,Supplier.SupplierName
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = @CompanyCode) AS TypeOfGoods
,ISNULL(ItemLoc.WarehouseCode,0) WarehouseCode
,ISNULL(ItemLoc.LocationCode,0) LocationCode
,(ISNULL(ItemLoc.OnHand,0) - (ISNULL(ItemLoc.AllocationSP,0) + ISNULL(ItemLoc.AllocationSR,0) + ISNULL(ItemLoc.AllocationSL,0) + ISNULL(ItemLoc.ReservedSP,0) + ISNULL(ItemLoc.ReservedSR,0) + ISNULL(ItemLoc.ReservedSL,0))) AS QtyAvail
,ISNULL(ItemPrice.RetailPrice,0) RetailPrice
,ISNULL(ItemPrice.RetailPriceInclTax,0) RetailPriceInclTax
FROM SpMstItems Items
LEFT JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN SpMstItemLoc ItemLoc ON Items.CompanyCode  = ItemLoc.CompanyCode
	AND Items.BranchCode = ItemLoc.BranchCode	
	AND Items.PartNo = ItemLoc.PartNo
LEFT JOIN SpMstItemPrice ItemPrice ON Items.CompanyCode  = ItemPrice.CompanyCode
	AND Items.BranchCode = ItemPrice.BranchCode	
	AND Items.PartNo = ItemPrice.PartNo		 
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode
WHERE Items.CompanyCode = @CompanyCode
  AND Items.BranchCode  = @BranchCode    
  AND Items.ProductType = @ProductType
  AND ItemLoc.WarehouseCode = '00'
END
ELSE
BEGIN

SELECT TOP 1500
 Items.PartNo
,Items.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
   WHERE CodeID = 'PRCT' AND 
         LookUpValue = Items.PartCategory AND 
         CompanyCode = @CompanyCode) AS CategoryName
,Items.PartCategory
,ItemInfo.PartName
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,CASE Items.Status WHEN 1 THEN 'Aktif' ELSE 'Tidak' END AS IsActive
,ItemInfo.OrderUnit
,Items.Onhand
,ItemInfo.SupplierCode
,Supplier.SupplierName
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = @CompanyCode) AS TypeOfGoods
,ItemLoc.WarehouseCode
,ItemLoc.LocationCode
,(ItemLoc.OnHand - (ItemLoc.AllocationSP + ItemLoc.AllocationSR + ItemLoc.AllocationSL + ItemLoc.ReservedSP + ItemLoc.ReservedSR + ItemLoc.ReservedSL)) AS QtyAvail
,ItemPrice.RetailPrice
,ItemPrice.CostPrice
,ItemPrice.RetailPriceInclTax
FROM SpMstItems Items with (nolock, nowait)
LEFT JOIN SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
                         AND Items.PartNo = ItemInfo.PartNo
LEFT JOIN SpMstItemLoc ItemLoc ON Items.CompanyCode  = ItemLoc.CompanyCode
	AND Items.BranchCode = ItemLoc.BranchCode	
	AND Items.PartNo = ItemLoc.PartNo
LEFT JOIN SpMstItemPrice ItemPrice ON Items.CompanyCode  = ItemPrice.CompanyCode
	AND Items.BranchCode = ItemPrice.BranchCode	
	AND Items.PartNo = ItemPrice.PartNo		 
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
                         AND Supplier.SupplierCode = ItemInfo.SupplierCode
WHERE Items.CompanyCode = @CompanyCode
  AND Items.BranchCode  = @BranchCode    
  AND Items.ProductType = @ProductType
  AND Items.PartNo      = @PartNo
  AND ItemLoc.WarehouseCode = '00'
  END
GO
CREATE procedure [dbo].[sp_ModelAccountLookup]  @CompanyCode varchar(10), @BranchCode varchar(10), @SalesModelCode varchar(100)
 as

 SELECT a.CompanyCode, a.BranchCode, a.SalesModelCode, z.SalesModelDesc
		, SalesAccNo, DiscountAccNo, ReturnAccNo, COGsAccNo,HReturnAccNo
		, b.Description as SalesAccDesc, c.Description as DiscountAccDesc, d.Description as ReturnAccDesc, e.Description as COGsAccDesc, f.Description as HReturnAccDesc
		, SalesAccNoAks, ReturnAccNoAks, DiscountAccNoAks
		, g.Description as SalesAccDescAks, h.Description as ReturnAccDescAks, i.Description as DiscountAccDescAks
		, ShipAccNo, DepositAccNo, OthersAccNo, BBNAccNo, KIRAccNo
		,j.Description as ShipAccDesc, k.Description as DepositAccDesc, l.Description as OthersAccDesc, m.Description as BBNAccDesc, n.Description as KIRAccDesc
		, PReturnAccNo, InTransitTransferStockAccNo
		, o.Description as PReturnAccDesc, p.Description as IntransitAccDesc
		, a.Remark, IsActive, a.InventoryAccNo, q.Description as InventoryAccDesc
-- select *
FROM omMstModelAccount a
LEFT JOIN GnMstAccount b
	ON a.SalesAccNo = b.AccountNo
LEFT JOIN GnMstAccount c
	ON a.DiscountAccNo = c.AccountNo
LEFT JOIN GnMstAccount d
	ON a.ReturnAccNo = d.AccountNo
LEFT JOIN GnMstAccount e
	ON a.COGsAccNo = e.AccountNo
LEFT JOIN GnMstAccount f
	ON a.HReturnAccNo = f.AccountNo
LEFT JOIN GnMstAccount g
	ON a.SalesAccNoAks = g.AccountNo
LEFT JOIN GnMstAccount h
	ON a.ReturnAccNoAks = h.AccountNo
LEFT JOIN GnMstAccount i
	ON a.DiscountAccNoAks = i.AccountNo
LEFT JOIN GnMstAccount j
	ON a.ShipAccNo = j.AccountNo
LEFT JOIN GnMstAccount k
	ON a.DepositAccNo = k.AccountNo
LEFT JOIN GnMstAccount l
	ON a.OthersAccNo = l.AccountNo
LEFT JOIN GnMstAccount m
	ON a.BBNAccNo = m.AccountNo
LEFT JOIN GnMstAccount n
	ON a.KIRAccNo = n.AccountNo
LEFT JOIN GnMstAccount o
	ON a.PReturnAccNo = o.AccountNo AND o.BranchCode = @BranchCode
LEFT JOIN GnMstAccount p
	ON a.InTransitTransferStockAccNo = p.AccountNo AND p.BranchCode = @BranchCode
LEFT JOIN GnMstAccount q
	ON a.InventoryAccNo = q.AccountNo
INNER JOIN omMstModel z
	ON a.SalesModelCode = z.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode and a.SalesModelCode = @SalesModelCode
GO
CREATE procedure [dbo].[uspfn_SvGetMonitoringDtl2]    
  @CompanyCode varchar(20),    
  @BranchCode varchar(20),    
  @JobOrderDate datetime,    
  @ShowOutSpk bit = 0,    
  @ShowPB bit = 1,    
  @ShowOther bit = 1,    
  @ShowBodyRepair bit = 0,    
  @ShowPDI bit = 0,    
  @ShowFsc bit = 1,    
  @ShowClaim bit = 0,    
  @Skip int = 3  
      
as    
    
;with x as (    
select row_number() over(order by JobOrderNo) AS SeqNo    
     , a.BranchCode    
     , a.CustomerCode, g.CustomerName    
     , right(a.JobOrderNo, 6) JobOrderNo, a.JobOrderDate    
     , substring(a.JobOrderNo, 5, len(a.JobOrderNo)) JobOrderNoCust    
     , a.PoliceRegNo    
     , c.Description VehType    
     , a.JobType    
     , case convert(varchar,a.EstimateFinishDate,112) when '19000101' then null else     
  left(convert(varchar, a.EstimateFinishDate, 3), 5) + ' - ' +    
  left(convert(varchar, a.EstimateFinishDate, 8), 5)    
   end EstimateFinishDate    
     , d.EmployeeName Foreman    
     , a.ServiceStatus    
     , b.Description ServiceStatusDesc    
  from svTrnService a with(nolock, nowait)    
  left join svMstRefferenceService b on b.CompanyCode = a.CompanyCode     
   and b.RefferenceCode = a.ServiceStatus and b.ProductType = a.ProductType    
   and b.RefferenceType = 'SERVSTAS'     
  left join svMstRefferenceService c on c.CompanyCode = a.CompanyCode     
   and c.RefferenceCode = a.BasicModel and c.ProductType = a.ProductType    
   and c.RefferenceType = 'BASMODEL'     
  left join GnMstEmployee d on a.CompanyCode = d.CompanyCode     
   and d.BranchCode = a.BranchCode and d.EmployeeID = a.ForemanID     
  left join GnMstEmployee e on a.CompanyCode = e.CompanyCode    
   and e.BranchCode = a.BranchCode and e.EmployeeID  = a.MechanicID     
  left join svMstJob f on f.CompanyCode = a.CompanyCode    
   and f.ProductType = a.ProductType    
   and f.BasicModel = a.BasicModel    
   and f.JobType = a.JobType    
  left join GnMstCustomer g on g.CompanyCode = a.CompanyCode     
   and g.CustomerCode = a.CustomerCode    
 where 1 = 1    
   and a.CompanyCode = @CompanyCode    
   and a.BranchCode = @BranchCode    
   and convert(varchar, a.JobOrderDate, 112) = (case @ShowOutSpk when 0 then convert(varchar, @JobOrderDate, 112) else convert(varchar, a.JobOrderDate, 112) end)    
   and rtrim(a.JobOrderNo) != ''    
   and a.EstimateFinishDate is not null    
   and a.JobOrderDate is not null    
   --and convert(varchar, a.EstimateFinishDate, 112) >= convert(varchar, a.JobOrderDate, 112)    
   and a.ServiceStatus in ('0','1','2','3','4','5')    
   and ((f.GroupjobType = (case @ShowPB when 1 then 'RTN' else 'XXXXX' end)) or     
        (f.GroupjobType = (case @ShowPDI when 1 then 'FSC' else 'XXXXX' end) and PdiFscSeq = 0) or    
        (f.GroupjobType = (case @ShowFsc when 1 then 'FSC' else 'XXXXX' end) and PdiFscSeq > 0) or     
        (f.GroupjobType = (case @ShowClaim when 1 then 'CLM' else 'XXXXX' end)) or    
        (f.GroupjobType = (case @ShowBodyRepair when 1 then 'BDR' else 'XXXXX' end)) or    
        (f.GroupjobType = (case @ShowOther when 1 then 'OTH' else 'XXXXX' end)))    
)    
select * from x where SeqNo >= @Skip     
-- union all    
--select * from x where SeqNo < @Skip
GO
create procedure [dbo].[uspfn_abInqAttendanceResumeDetails]
	@CompanyCode nvarchar(25),
	@Department nvarchar(17),
	@Position nvarchar(17),
	@Grade nvarchar(17),
	@DateFrom datetime,
	@DateTo datetime,
	@ShiftCode nvarchar(17),
	@EmployeeID varchar(25),
	@EmployeeName varchar(200),
	@State char(1)
as
begin
	  create table #Attendance (
		CompanyCode varchar(17),
		EmployeeID varchar(25),
		EmployeeName varchar(150),
		Department varchar(100),
		Position varchar(55),
		Grade varchar(25),
		DepartmentName varchar(55),
		PositionName varchar(200),
		GradeName varchar(25),
		AttendanceDate char(8),
		ShiftCode varchar(7),
		ShiftName varchar(25),
		IsAbsence varchar(5),
		ClockInTime char(5),
		ClockOutTime char(5),
		OnDutyTime char(5),
		OffDutyTime char(5),
		CalcOvertime int,
		Overtime char(5),
		CalcLateTime int,
		LateTime char(5),
		CalcReturnBeforeTheTime int, 
		ReturnBeforeTheTime char(5)
	  );
	  
	  create table #ResumeAttendance (
		CompanyCode varchar(17),
		EmployeeID varchar(25),
		EmployeeName varchar(150),
		Department varchar(100),
		Position varchar(55),
		Grade varchar(25),
		DepartmentName varchar(55),
		PositionName varchar(200),
		GradeName varchar(25),
		AttendanceDate char(8),
		ShiftCode varchar(7),
		ShiftName varchar(25),
		IsAbsence varchar(5),
		ClockInTime char(5),
		ClockOutTime char(5),
		OnDutyTime char(5),
		OffDutyTime char(5),
		CalcOvertime int,
		Overtime char(5),
		CalcLateTime int,
		LateTime char(5),
		CalcReturnBeforeTheTime int, 
		ReturnBeforeTheTime char(5)
	  );

	  delete #Attendance

	  insert into #Attendance
	  select  a.CompanyCode
			, a.EmployeeID
			, b.EmployeeName
			, b.Department
			, b.Position
			, b.Grade
			, DepartmentName = c.OrgName
			, PositionName = d.PosName
			, GradeName = e.LookUpValueName
			, a.AttdDate 
			, a.ShiftCode
			, f.ShiftName
			, IsAbsence = (
				case
					when a.ClockInTime is null or a.ClockInTime = '' then 'Yes'
					else 'No'
				end
			  )
			, a.ClockInTime
			, a.ClockOutTime
			, a.OnDutyTime
			, a.OffDutyTime
			, isnull(a.CalcOvertime, 0)
			, Overtime = (
				case
					when a.ClockOutTime > a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.OffDutyTime, 108), 5), left(convert(varchar, a.ClockOutTime, 108), 5)))
					else '-'
				end
		      )
			, CalcLateTime = (
				case 
					when a.ClockInTime > a.OnDutyTime then datediff(minute, a.OnDutyTime, a.ClockInTime)
					else 0
				end
			  )
			, LateTime = (
				case
					when a.ClockInTime > a.OnDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.OnDutyTime, 108), 5), left(convert(varchar, a.ClockInTime, 108), 5)))
					else '-'
				end
		      )
			, CalcReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_CalculateMinute(left(convert(varchar, a.ClockOutTime, 108), 5), left(convert(varchar, a.OffDutyTime, 108), 5))
					else '-'
				end
		      )
			, ReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.ClockOutTime, 108), 5), left(convert(varchar, a.OffDutyTime, 108), 5)))
					else '-'
				end
		      )
		from HrEmployeeShift a
		left join HrEmployee b
		  on a.CompanyCode=b.CompanyCode
		 and a.EmployeeID=b.EmployeeID
		left join gnMstOrgGroup c
		  on c.CompanyCode=a.CompanyCode
		 and c.OrgCode=b.Department
		left join gnMstPosition d
		  on d.CompanyCode=c.CompanyCode
		 and d.DeptCode=b.Department
		 and d.PosCode=b.Position
		left join gnMstLookUpDtl e
		  on e.CompanyCode=a.CompanyCode
		 and e.CodeID='ITSG'
		 and e.LookUpValue=b.Grade
		left join HrShift f
		  on f.CompanyCode=a.CompanyCode
		 and f.ShiftCode=a.ShiftCode
	   where a.CompanyCode=@CompanyCode 
		 and a.AttdDate>=replace(convert(varchar, @DateFrom, 111), '/', '')
		 and a.AttdDate<=replace(convert(varchar, @DateTo, 111), '/', '')
		 and a.ClockInTime is not null

		declare @Query nvarchar(1000);
		declare @ParameterDeclaration nvarchar(1000);
		set @Query='insert into #ResumeAttendance select * from #Attendance a where 1=1 ';
		set @ParameterDeclaration='';
			
		if ltrim(rtrim(@Department)) != '' or @Department is null
		begin
			set @Query = @Query + ' and a.Department=@p0';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p0 nvarchar(17),' 
		end
		else
		begin 
			set @Department='%';
			set @Query = @Query + ' and a.Department like @p0';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p0 nvarchar(17),' 
		end

		if ltrim(rtrim(@Position)) != ''
		begin
			set @Query = @Query + ' and a.Position=@p1';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p1 nvarchar(17),' 
		end
		else
		begin
			set @Position='%';
			set @Query = @Query + ' and a.Position like @p1';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p1 nvarchar(17),' 
		end

		if ltrim(rtrim(@Grade)) != ''
		begin
			set @Query = @Query + ' and a.Grade=@p2';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p2 nvarchar(17),' 
		end
		else
		begin
			set @Grade = '%'
			set @Query = @Query + ' and a.Grade like @p2';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p2 nvarchar(17),' 
		end

		if ltrim(rtrim(@ShiftCode)) != ''
		begin
			set @Query = @Query + ' and a.ShiftCode=@p3';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p3 nvarchar(17),' 
		end
		else
		begin
			set @ShiftCode='%'
			set @Query = @Query + ' and a.ShiftCode like @p3';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p3 nvarchar(17),' 
		end
		
		if ltrim(rtrim(@EmployeeID)) != ''
		begin
			set @Query = @Query + ' and a.EmployeeID=@p4';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p4 nvarchar(25),' 
		end
		else
		begin
			set @EmployeeID='%'
			set @Query = @Query + ' and a.EmployeeID like @p4';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p4 nvarchar(25),' 
		end
		
		if ltrim(rtrim(@EmployeeName)) != ''
		begin
			set @EmployeeName='%' + @EmployeeName + '%'
			set @Query = @Query + ' and a.EmployeeName like @p5';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p5 nvarchar(200),' 
		end
		else
		begin
			set @EmployeeName='%'
			set @Query = @Query + ' and a.EmployeeName like @p5';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p5 nvarchar(200),' 
		end

		set @ParameterDeclaration = substring(@ParameterDeclaration, 0, len(@ParameterDeclaration));
		exec sp_executesql @statement=@Query
		                 , @parameters=@ParameterDeclaration
						 , @p0=@Department
						 , @p1=@Position
						 , @p2=@Grade
						 , @p3=@ShiftCode
						 , @p4=@EmployeeID
						 , @p5=@EmployeeName
		
		declare @EmployeeOnTime int;
		declare @EmployeeLate int;
		declare @EmployeeReturnBeforeTheTime int;
		declare @EmployeeOvertime int;
		
		set @EmployeeOnTime = (select COUNT(EmployeeID) from #ResumeAttendance where ClockInTime <= OnDutyTime);
		set @EmployeeLate = (select COUNT(EmployeeID) from #ResumeAttendance where ClockInTime > OnDutyTime);
		set @EmployeeReturnBeforeTheTime = (select COUNT(EmployeeID) from #ResumeAttendance where ClockOutTime < OffDutyTime);
		set @EmployeeOvertime = (select COUNT(EmployeeID) from #ResumeAttendance where ClockOutTime > OffDutyTime);
		
		if @State='1'
		begin
			select * from #ResumeAttendance where ClockInTime <= OnDutyTime
		end
		
		if @State='2'
		begin
			select * from #ResumeAttendance where ClockInTime > OnDutyTime
		end
		
		if @State='3'
		begin
			select * from #ResumeAttendance where ClockOutTime < OffDutyTime
		end
		
		if @State='4'
		begin
			select * from #ResumeAttendance where ClockOutTime > OffDutyTime
		end
		
		drop table #ResumeAttendance
		drop table #Attendance
end
GO
CREATE procedure [dbo].[sp_MstOthersInventoryBrowse] @CompanyCode varchar(10), @BranchCode varchar(10)
as

SELECT a.OthersNonInventory, a.OthersNonInventoryDesc, a.OthersNonInventoryAccNo, b.Description, a.Remark, a.IsActive
FROM omMstOthersNonInventory a
INNER JOIN GnMstAccount b
ON a.OthersNonInventoryAccNo=b.AccountNo
WHERE a.CompanyCode=@CompanyCode AND a.BranchCode=@BranchCode
GO
create procedure [dbo].[uspfn_CsCustomerDataInq]    
@SelectCode varchar(2),    
@Month int,    
@YearTo int,  
@YearFrom int,    
@BranchCode varchar(15)    
as    
    
--declare @SelectCode varchar(2)              
--set @SelectCode = 'b'              
--declare @Month int              
--set @Month = 3              
--declare @YearTo int              
--set @YearTo = 2014              
--declare @YearFrom int              
--set @YearFrom =  2014             
--declare @BranchCode varchar(15)              
--set @BranchCode = '%'              
--DECLARE @CompanyCode varchar(15)          
--SET @CompanyCode = '%'          
    
IF @SelectCode = 'A'    
begin    
 IF @YearTo = 0  
 begin  
 select a.CompanyCode, a.CompanyName,    
   (SELECT ISNULL(b.NoOfUnitService,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    and b.Month = @Month    
    AND b.SelectCode = @SelectCode    
    and b.CompanyCode = a.CompanyCode)NoOfUnitService    
    , (SELECT ISNULL(b.NoOfUnit,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    AND b.Month = @Month    
    AND b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode) NoOfUnit    
    , (SELECT ISNULL(b.NoOfService,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    AND b.Month = @Month    
    AND b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode ) NoOfService    
    , (SELECT ISNULL(b.NoOfSparePart,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    AND b.Month = @Month    
    AND b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode ) NoOfSparePart from gnMstOrganizationHdr a    
 end  
 else  
 begin  
  select a.CompanyCode, a.CompanyName,    
   (SELECT ISNULL(b.NoOfUnitService,0) from gnMstCustDealer b    
    where b.SelectCode = @SelectCode    
    and b.CompanyCode = a.CompanyCode  
    and b.Year = @YearFrom    
    AND b.Month = @Month  )NoOfUnitService    
    , (SELECT ISNULL(b.NoOfUnit,0) from gnMstCustDealer b    
    where b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode  
    and b.Year = @YearFrom    
    AND b.Month = @Month  ) NoOfUnit    
    , (SELECT ISNULL(b.NoOfService,0) from gnMstCustDealer b    
    where b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode   
    AND b.Year = @YearFrom    
    AND b.Month = @Month  ) NoOfService    
    , (SELECT ISNULL(b.NoOfSparePart,0) from gnMstCustDealer b    
    where b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode   
    and b.Year = @YearFrom    
    AND b.Month = @Month  ) NoOfSparePart from gnMstOrganizationHdr a    
 end     
end    
else    
begin    
 IF @YearTo = 0   
 begin   
  select b.CompanyCode, b.CompanyName, a.BranchCode, a.BranchName,     
   (SELECT ISNULL(b.NoOfUnitService,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    and b.Month = @Month    
    AND b.SelectCode = @SelectCode    
    and b.CompanyCode = a.CompanyCode    
    AND b.BranchCode = a.BranchCode)NoOfUnitService    
    , (SELECT ISNULL(b.NoOfUnit,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    AND b.Month = @Month    
    AND b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode    
    AND b.BranchCode = a.BranchCode ) NoOfUnit    
    , (SELECT ISNULL(b.NoOfService,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    AND b.Month = @Month    
    AND b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode    
    AND b.BranchCode = a.BranchCode ) NoOfService    
    , (SELECT ISNULL(b.NoOfSparePart,0) from gnMstCustDealer b    
    where b.Year = @YearFrom    
    AND b.Month = @Month    
    AND b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode    
    AND b.BranchCode = a.BranchCode ) NoOfSparePart from gnMstOrganizationDtl a    
    join gnMstOrganizationHdr b    
    ON a.CompanyCode = b.CompanyCode    
    where a.BranchCode like @BranchCode    
   end  
   else  
   begin  
  select b.CompanyCode, b.CompanyName, a.BranchCode, a.BranchName,     
   (SELECT ISNULL(b.NoOfUnitService,0) from gnMstCustDealer b    
    where  b.SelectCode = @SelectCode    
    and b.CompanyCode = a.CompanyCode    
    AND b.BranchCode = a.BranchCode           
    and  b.Year = @YearFrom    
    AND b.Month = @Month )NoOfUnitService    
    , (SELECT ISNULL(b.NoOfUnit,0) from gnMstCustDealer b    
    where b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode    
    AND b.BranchCode = a.BranchCode           
    and  b.Year = @YearFrom    
    AND b.Month = @Month ) NoOfUnit    
    , (SELECT ISNULL(b.NoOfService,0) from gnMstCustDealer b    
    where b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode    
    AND b.BranchCode = a.BranchCode            
    and  b.Year = @YearFrom    
    AND b.Month = @Month ) NoOfService    
    , (SELECT ISNULL(b.NoOfSparePart,0) from gnMstCustDealer b    
    where b.CompanyCode = a.CompanyCode    
    AND b.SelectCode = @SelectCode    
    AND b.BranchCode = a.BranchCode            
    and b.Year = @YearFrom    
    AND b.Month = @Month ) NoOfSparePart from gnMstOrganizationDtl a    
    join gnMstOrganizationHdr b    
    ON a.CompanyCode = b.CompanyCode    
    where a.BranchCode like @BranchCode   
   end   
end    
    
select h.CompanyName Company, case when @BranchCode = '%' then 'ALL'  else d.BranchName end Branch,    
 cast(@Month AS VARCHAR(2))+'/'+ cast(@YearFrom as Varchar(4))PeriodeStart,    
 CASE WHEN @SelectCode = 'A' THEN 'Customer Data' WHEN @SelectCode = 'B' THEN 'Customer Data with transaction' WHEN @SelectCode = 'C' THEN 'Customer Suzuki' END InquiryType    
from gnMstOrganizationDtl d    
join gnMstOrganizationHdr h ON d.CompanyCode = h.CompanyCode    
where d.BranchCode like @BranchCode
GO
--SELECT * FROM gnMstCustDealerDtl  
--select * FROM gnMstCustDealer  
--sp_helptext uspfn_CsCustSzkLastTrans   
create procedure [dbo].[uspfn_CsCustSzkLastTrans]  
--uspfn_CsCustSzkLastTrans '6006406','%','1900-04-11 15:55:09.073','2014-04-16 16:47:00.473'  
@CompanyCode varchar(15),  
@BranchCode varchar(15),  
@DateFrom datetime,  
@DateTo datetime  
as  
  
--declare @BranchCode varchar(15)  
--set @BranchCode = '%'  
--declare @DateFrom datetime  
--set @DateFrom = '01-01-2000'  
--declare @DateTo datetime  
--set @DateTo = '12-12-2013'  
  
select a.BranchCode, a.BranchName, c.CompanyName,   
  (SELECT count(*) from(select DISTINCT CustomerCode, CustomerStatus  from gnMstCustDealerDtl us where us.CompanyCode = a.CompanyCode              
  and us.BranchCode = a.BranchCode              
  and us.TransType = 'UNITSERVICE'              
  and us.LastTransactionDate >= @DateFrom              
  and us.LastTransactionDate <= @DateTo )a) NoOfUnitService,  
  (SELECT count(*) from(SELECT DISTINCT CustomerCode, CustomerStatus    from gnMstCustDealerDtl us where us.CompanyCode = a.CompanyCode              
  and us.BranchCode = a.BranchCode              
  and us.TransType = 'UNIT'              
  and us.LastTransactionDate >= @DateFrom              
  and us.LastTransactionDate <= @DateTo)b) NoOfUnit,   
 (SELECT count(*) from(SELECT DISTINCT CustomerCode, CustomerStatus  from gnMstCustDealerDtl us where us.CompanyCode = a.CompanyCode              
  and us.BranchCode = a.BranchCode              
  and us.TransType = 'SERVICE'              
  and us.LastTransactionDate >= @DateFrom              
  and us.LastTransactionDate <= @DateTo)c) NoOfService       
from gnMstOrganizationDtl a  
left JOIN gnMstCustDealerDtl  b  
on a.CompanyCode = b.CompanyCode  
and a.BranchCode = b.BranchCode  
join gnMstOrganizationHdr c  
on c.CompanyCode = a.CompanyCode  
where a.BranchCode like @BranchCode  
group BY a.BranchCode,b.CompanyCode, a.CompanyCode, a.BranchName, c.CompanyName  
  
  
select h.CompanyName Company, case when @BranchCode = '%' then 'ALL'  else d.BranchName end Branch,  
 CONVERT(CHAR(12), @DateFrom , 106) PeriodeStart , CONVERT(CHAR(12), @DateTo, 106) PeriodeEnd,  
 'Customer Data' InquiryType  
from gnMstOrganizationDtl d  
join gnMstOrganizationHdr h ON d.CompanyCode = h.CompanyCode  
where d.BranchCode like @BranchCode
GO
-- uspfn_SvGetClaim '6006406','6006406','4W','CLA/11/000002'
CREATE procedure [dbo].[uspfn_SpWrongPart]
--declare 
	 @CompanyCode  varchar(20),
	 @ProductType  varchar(20)
--
as

SELECT TOP 1500 * FROM (
SELECT DISTINCT ItemInfo.PartNo as PartNoWrong
,ItemInfo.PartName
,ItemInfo.CompanyCode
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,ItemInfo.ProductType
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'PRCT' AND 
        LookUpValue = ItemInfo.PartCategory AND 
        CompanyCode = @CompanyCode) AS CategoryName
,ItemInfo.PartCategory
,ItemInfo.OrderUnit
,ItemInfo.SupplierCode
,Supplier.SupplierName
,(SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'TPGO' AND 
        LookUpValue = Items.TypeOfGoods AND 
        CompanyCode = @CompanyCode) AS TypeOfGoods
, (SELECT LookupValueName 
    FROM gnMstLookupDtl 
  WHERE CodeID = 'STPR' AND 
        LookUpValue = Items.Status AND 
        CompanyCode = @CompanyCode) AS Status
FROM SpMstItemInfo ItemInfo
LEFT JOIN SpMstItems Items    ON ItemInfo.CompanyCode = Items.CompanyCode AND ItemInfo.PartNo = Items.PartNo
LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode = ItemInfo.CompanyCode AND Supplier.SupplierCode = ItemInfo.SupplierCode
WHERE ItemInfo.CompanyCode = @CompanyCode AND ItemInfo.ProductType = @ProductType) ItemInfo WHERE ItemInfo.CompanyCode = @CompanyCode
GO
CREATE PROCEDURE [dbo].[uspfn_SpMstItemLocView]
@CompanyCode varchar(15),
@BranchCode varchar(15) ,
@TypeOfGoods varchar(15) ,
@ProductType varchar(15) 
 
AS
SELECT 
	 ItemLoc.PartNo
	,ItemInfo.PartName
	,ItemInfo.SupplierCode
	,ItemLoc.WarehouseCode
	,(select LookUpValueName from gnMstLookUpDtl where CompanyCode=ItemLoc.CompanyCode and ItemLoc.WarehouseCode =LookUpValue and CODEID='WRCD') [WarehouseName]
	,ItemLoc.LocationCode
	,Items.PartCategory
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
	,ItemLoc.LocationSub1
	,ItemLoc.LocationSub2
	,ItemLoc.LocationSub3
	,ItemLoc.LocationSub4
	,ItemLoc.LocationSub5
	,ItemLoc.LocationSub6
FROM spMstItemLoc ItemLoc
INNER JOIN spMstItems Items 
    ON ItemLoc.CompanyCode=Items.CompanyCode
    AND ItemLoc.BranchCode=Items.BranchCode
    AND ItemLoc.PartNo=Items.PartNo
INNER JOIN spMstItemInfo ItemInfo 
    ON ItemLoc.CompanyCode=ItemInfo.CompanyCode
    AND ItemLoc.PartNo=ItemInfo.PartNo
WHERE
	ItemLoc.WarehouseCode NOT LIKE 'X%'
	and Items.CompanyCode = @companycode
	and Items.BranchCode = @branchcode
	AND Items.TypeOfGoods=@TypeOfGoods
    AND Items.ProductType=@ProductType
GO
create procedure [dbo].[uspfn_CsSTNKEstension] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , Chassis
     , IsStnkExtend
     , StnkExpiredDate
     , ReqKtp
     , ReqStnk
     , ReqBpkb
     , ReqSuratKuasa
     , Comment
     , Additional
     , Status
     , FinishDate
     , CreatedBy
     , CreatedDate
     , LastUpdatedBy
     , LastUpdatedDate
     , Tenor
     , LeasingCode
     , CustomerCategory
  from CsStnkExt
 where LastUpdatedDate is not null
   and LastUpdatedDate > @LastUpdateDate
 order by LastUpdatedDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_CsSTNKEstension @LastUpdateDate='2013-01-01', @Segment=1
GO
create procedure [dbo].[uspfn_abInqAttendanceResume]
	@CompanyCode nvarchar(25),
	@Department nvarchar(17),
	@Position nvarchar(17),
	@Grade nvarchar(17),
	@DateFrom datetime,
	@DateTo datetime,
	@ShiftCode nvarchar(17),
	@EmployeeID varchar(25),
	@EmployeeName varchar(200)
as
begin
	  create table #Attendance (
		CompanyCode varchar(17),
		EmployeeID varchar(25),
		EmployeeName varchar(150),
		Department varchar(100),
		Position varchar(55),
		Grade varchar(25),
		DepartmentName varchar(55),
		PositionName varchar(200),
		GradeName varchar(25),
		AttendanceDate char(8),
		ShiftCode varchar(7),
		ShiftName varchar(25),
		IsAbsence varchar(5),
		ClockInTime char(5),
		ClockOutTime char(5),
		OnDutyTime char(5),
		OffDutyTime char(5),
		CalcOvertime int,
		Overtime char(5),
		CalcLateTime int,
		LateTime char(5),
		CalcReturnBeforeTheTime int, 
		ReturnBeforeTheTime char(5)
	  );
	  
	  create table #ResumeAttendance (
		CompanyCode varchar(17),
		EmployeeID varchar(25),
		EmployeeName varchar(150),
		Department varchar(100),
		Position varchar(55),
		Grade varchar(25),
		DepartmentName varchar(55),
		PositionName varchar(200),
		GradeName varchar(25),
		AttendanceDate char(8),
		ShiftCode varchar(7),
		ShiftName varchar(25),
		IsAbsence varchar(5),
		ClockInTime char(5),
		ClockOutTime char(5),
		OnDutyTime char(5),
		OffDutyTime char(5),
		CalcOvertime int,
		Overtime char(5),
		CalcLateTime int,
		LateTime char(5),
		CalcReturnBeforeTheTime int, 
		ReturnBeforeTheTime char(5)
	  );

	  delete #Attendance

	  insert into #Attendance
	  select  a.CompanyCode
			, a.EmployeeID
			, b.EmployeeName
			, b.Department
			, b.Position
			, b.Grade
			, DepartmentName = c.OrgName
			, PositionName = d.PosName
			, GradeName = e.LookUpValueName
			, a.AttdDate 
			, a.ShiftCode
			, f.ShiftName
			, IsAbsence = (
				case
					when a.ClockInTime is null or a.ClockInTime = '' then 'Yes'
					else 'No'
				end
			  )
			, a.ClockInTime
			, a.ClockOutTime
			, a.OnDutyTime
			, a.OffDutyTime
			, isnull(a.CalcOvertime, 0)
			, Overtime = (
				case
					when a.ClockOutTime > a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.OffDutyTime, 108), 5), left(convert(varchar, a.ClockOutTime, 108), 5)))
					else '-'
				end
		      )
			, CalcLateTime = (
				case 
					when a.ClockInTime > a.OnDutyTime then datediff(minute, a.OnDutyTime, a.ClockInTime)
					else 0
				end
			  )
			, LateTime = (
				case
					when a.ClockInTime > a.OnDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.OnDutyTime, 108), 5), left(convert(varchar, a.ClockInTime, 108), 5)))
					else '-'
				end
		      )
			, CalcReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_CalculateMinute(left(convert(varchar, a.ClockOutTime, 108), 5), left(convert(varchar, a.OffDutyTime, 108), 5))
					else '-'
				end
		      )
			, ReturnBeforeTheTime = (
				case
					when a.ClockOutTime < a.OffDutyTime then dbo.uspfn_MinuteToTime(dbo.uspfn_CalculateMinute(left(convert(varchar, a.ClockOutTime, 108), 5), left(convert(varchar, a.OffDutyTime, 108), 5)))
					else '-'
				end
		      )
		from HrEmployeeShift a
		left join HrEmployee b
		  on a.CompanyCode=b.CompanyCode
		 and a.EmployeeID=b.EmployeeID
		left join gnMstOrgGroup c
		  on c.CompanyCode=a.CompanyCode
		 and c.OrgCode=b.Department
		left join gnMstPosition d
		  on d.CompanyCode=c.CompanyCode
		 and d.DeptCode=b.Department
		 and d.PosCode=b.Position
		left join gnMstLookUpDtl e
		  on e.CompanyCode=a.CompanyCode
		 and e.CodeID='ITSG'
		 and e.LookUpValue=b.Grade
		left join HrShift f
		  on f.CompanyCode=a.CompanyCode
		 and f.ShiftCode=a.ShiftCode
	   where a.CompanyCode=@CompanyCode 
		 and a.AttdDate>=replace(convert(varchar, @DateFrom, 111), '/', '')
		 and a.AttdDate<=replace(convert(varchar, @DateTo, 111), '/', '')
		 and a.ClockInTime is not null

		declare @Query nvarchar(1000);
		declare @ParameterDeclaration nvarchar(1000);
		set @Query='insert into #ResumeAttendance select * from #Attendance a where 1=1 ';
		set @ParameterDeclaration='';
			
		if ltrim(rtrim(@Department)) != '' or @Department is null
		begin
			set @Query = @Query + ' and a.Department=@p0';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p0 nvarchar(17),' 
		end
		else
		begin 
			set @Department='%';
			set @Query = @Query + ' and a.Department like @p0';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p0 nvarchar(17),' 
		end

		if ltrim(rtrim(@Position)) != ''
		begin
			set @Query = @Query + ' and a.Position=@p1';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p1 nvarchar(17),' 
		end
		else
		begin
			set @Position='%';
			set @Query = @Query + ' and a.Position like @p1';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p1 nvarchar(17),' 
		end

		if ltrim(rtrim(@Grade)) != ''
		begin
			set @Query = @Query + ' and a.Grade=@p2';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p2 nvarchar(17),' 
		end
		else
		begin
			set @Grade = '%'
			set @Query = @Query + ' and a.Grade like @p2';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p2 nvarchar(17),' 
		end

		if ltrim(rtrim(@ShiftCode)) != ''
		begin
			set @Query = @Query + ' and a.ShiftCode=@p3';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p3 nvarchar(17),' 
		end
		else
		begin
			set @ShiftCode='%'
			set @Query = @Query + ' and a.ShiftCode like @p3';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p3 nvarchar(17),' 
		end
		
		if ltrim(rtrim(@EmployeeID)) != ''
		begin
			set @Query = @Query + ' and a.EmployeeID=@p4';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p4 nvarchar(25),' 
		end
		else
		begin
			set @EmployeeID='%'
			set @Query = @Query + ' and a.EmployeeID like @p4';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p4 nvarchar(25),' 
		end
		
		if ltrim(rtrim(@EmployeeName)) != ''
		begin
			set @EmployeeName='%' + @EmployeeName + '%'
			set @Query = @Query + ' and a.EmployeeName like @p5';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p5 nvarchar(200),' 
		end
		else
		begin
			set @EmployeeName='%'
			set @Query = @Query + ' and a.EmployeeName like @p5';
			set @ParameterDeclaration = @ParameterDeclaration + N' @p5 nvarchar(200),' 
		end

		set @ParameterDeclaration = substring(@ParameterDeclaration, 0, len(@ParameterDeclaration));
		exec sp_executesql @statement=@Query
		                 , @parameters=@ParameterDeclaration
						 , @p0=@Department
						 , @p1=@Position
						 , @p2=@Grade
						 , @p3=@ShiftCode
						 , @p4=@EmployeeID
						 , @p5=@EmployeeName
		
		declare @EmployeeOnTime int;
		declare @EmployeeLate int;
		declare @EmployeeReturnBeforeTheTime int;
		declare @EmployeeOvertime int;
		
		set @EmployeeOnTime = (select COUNT(EmployeeID) from #ResumeAttendance where ClockInTime <= OnDutyTime);
		set @EmployeeLate = (select COUNT(EmployeeID) from #ResumeAttendance where ClockInTime > OnDutyTime);
		set @EmployeeReturnBeforeTheTime = (select COUNT(EmployeeID) from #ResumeAttendance where ClockOutTime < OffDutyTime);
		set @EmployeeOvertime = (select COUNT(EmployeeID) from #ResumeAttendance where ClockOutTime > OffDutyTime);
		
		select @EmployeeOnTime as OnTime
		     , @EmployeeLate as Late
		     , @EmployeeReturnBeforeTheTime as ReturnBeforeTheTime
		     , @EmployeeOvertime as Overtime
		
		drop table #ResumeAttendance
		drop table #Attendance
end
GO
CREATE procedure [dbo].[sp_ModelAccountBrowse]  @CompanyCode varchar(10), @BranchCode varchar(10)
 as

 SELECT a.CompanyCode, a.BranchCode, a.SalesModelCode, z.SalesModelDesc
		, SalesAccNo, DiscountAccNo, ReturnAccNo, COGsAccNo,HReturnAccNo
		, b.Description as SalesAccDesc, c.Description as DiscountAccDesc, d.Description as ReturnAccDesc, e.Description as COGsAccDesc, f.Description as HReturnAccDesc
		, SalesAccNoAks, ReturnAccNoAks, DiscountAccNoAks
		, g.Description as SalesAccDescAks, h.Description as ReturnAccDescAks, i.Description as DiscountAccDescAks
		, ShipAccNo, DepositAccNo, OthersAccNo, BBNAccNo, KIRAccNo
		,j.Description as ShipAccDesc, k.Description as DepositAccDesc, l.Description as OthersAccDesc, m.Description as BBNAccDesc, n.Description as KIRAccDesc
		, PReturnAccNo, InTransitTransferStockAccNo
		, o.Description as PReturnAccDesc, p.Description as IntransitAccDesc
		, a.Remark, IsActive, a.InventoryAccNo, q.Description as InventoryAccDesc
-- select *
FROM omMstModelAccount a
LEFT JOIN GnMstAccount b
	ON a.SalesAccNo = b.AccountNo
LEFT JOIN GnMstAccount c
	ON a.DiscountAccNo = c.AccountNo
LEFT JOIN GnMstAccount d
	ON a.ReturnAccNo = d.AccountNo
LEFT JOIN GnMstAccount e
	ON a.COGsAccNo = e.AccountNo
LEFT JOIN GnMstAccount f
	ON a.HReturnAccNo = f.AccountNo
LEFT JOIN GnMstAccount g
	ON a.SalesAccNoAks = g.AccountNo
LEFT JOIN GnMstAccount h
	ON a.ReturnAccNoAks = h.AccountNo
LEFT JOIN GnMstAccount i
	ON a.DiscountAccNoAks = i.AccountNo
LEFT JOIN GnMstAccount j
	ON a.ShipAccNo = j.AccountNo
LEFT JOIN GnMstAccount k
	ON a.DepositAccNo = k.AccountNo
LEFT JOIN GnMstAccount l
	ON a.OthersAccNo = l.AccountNo
LEFT JOIN GnMstAccount m
	ON a.BBNAccNo = m.AccountNo
LEFT JOIN GnMstAccount n
	ON a.KIRAccNo = n.AccountNo
LEFT JOIN GnMstAccount o
	ON a.PReturnAccNo = o.AccountNo AND o.BranchCode = @BranchCode
LEFT JOIN GnMstAccount p
	ON a.InTransitTransferStockAccNo = p.AccountNo AND p.BranchCode = @BranchCode
LEFT JOIN GnMstAccount q
	ON a.InventoryAccNo = q.AccountNo
INNER JOIN omMstModel z
	ON a.SalesModelCode = z.SalesModelCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[usprpt_HrMstShift]
	@CompanyCode varchar(50)

as

select CompanyCode, ShiftCode, ShiftName
     , OnDutyTime, OffDutyTime
     , OnRestTime, OffRestTime
     , WorkingHour, IsActive
  from HrShift
 where CompanyCode = @CompanyCode
GO
create procedure [dbo].[sp_spCategoryCodeview] ( @CompanyCode varchar(10))

		 as
		 
		    select 
                a.LookupValue 'CategoryCode', a.LookupValueName 'CategoryName', a.CompanyCode
            from 
                gnMstLookupdtl a
				            where 
                          
                a.CodeID='CSCT'  and a.CompanyCode=@CompanyCode
GO
CREATE PROCEDURE [dbo].[uspfn_GetSPKForUnApprovalPdiFsc]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@IsPdi bit
AS
BEGIN
	--declare @CompanyCode as varchar(15)
	--declare @BranchCode as varchar(15)
	--declare @ProductType as varchar(15)
	--declare @IsPDI as bit

	--set @CompanyCode = '6058401'
	--set @BranchCode = '605840103'
	--set @ProductType = '4W'
	--set @IsPDI = 0
	
	select convert(bit, 0) IsSelected, row_number() over(order by a.ServiceNo asc) as No,a.BranchCode, a.ServiceNo, a.JobOrderNo, a.JobOrderDate
	, a.ServiceBookNo, a.ChassisNo, a.BasicModel, a.JobType, (isnull(srv.ValItem, 0) + isnull(task.valTask,0)) TotalApprove
	from SvTrnService a
	left join (select CompanyCode, BranchCode, ServiceNo, sum((OperationHour * OperationCost)) valTask
		from svTrnSrvTask
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) task on task.CompanyCode = a.CompanyCode
											and task.BranchCode = a.BranchCode
											and task.ServiceNo = a.ServiceNo
	left join (select CompanyCode, BranchCode, ServiceNo, sum(((SupplyQty - ReturnQty) * RetailPrice)) valItem 
		from svTrnSrvItem 
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) srv on srv.CompanyCode = a.CompanyCode
											and srv.BranchCode = a.BranchCode
											and srv.ServiceNo = a.ServiceNo
	where a.CompanyCode = @CompanyCode
	and a.BranchCode = @BranchCode
	and a.ProductType = @ProductType
	and a.ServiceStatus = '5 '
	and a.IsLocked = 1
	and a.JobType like (case when @IsPDI = 1 then 'PDI%' else 'FS%' end )
END
GO
CREATE procedure [dbo].[uspfn_AbAssignEmplShift]  
 @CompanyCode varchar(20),  
 @BranchCode varchar(20),  
 @Department varchar(20),  
 @Position varchar(20),   
 @DateFrom datetime,  
 @DateTo datetime,  
 @Shift varchar(50),  
 @TargetShift varchar(10),  
 @UserID varchar(20)  
as  
  
;with x as (  
select a.CompanyCode, a.AttdDate, b.Department, b.Position, a.EmployeeID, a.ShiftCode  
     , a.OnDutyTime, a.OffDutyTime, a.OnRestTime, a.OffRestTime  
     , a.UpdatedBy, a.UpdatedDate  
     , c.ShiftCode as ShiftCodeTarget  
     , c.OnDutyTime as OnDutyTimeTarget  
     , c.OffDutyTime as OffDutyTimeTarget  
     , c.OnRestTime as OnRestTimeTarget  
     , c.OffRestTime as OffRestTimeTarget  
  from HrEmployeeShift a  
  left join HrEmployee b  
    on b.CompanyCode = a.CompanyCode  
   and b.EmployeeID = a.EmployeeID  
  left join HrShift c  
    on 1=1
   and c.CompanyCode = a.CompanyCode  
   and c.ShiftCode = @TargetShift   
 where 1 = 1  
   and a.CompanyCode = @CompanyCode  
   and b.Department = @Department  
   and b.Position = (case @Position when '' then b.Position else @Position end)  
   and a.AttdDate between convert(varchar, @DateFrom, 112) and convert(varchar, @DateTo, 112)  
   and a.ShiftCode = (  
		 case   
		  when @Shift = '' then a.ShiftCode  
		  when @Shift = '-' then ''  
		  else @Shift  
		 end  
   )  
)  

--select * from x
update x set ShiftCode = @TargetShift  
           , OnDutyTime = OnDutyTimeTarget  
           , OffDutyTime = OffDutyTimeTarget  
           , OnRestTime = OnRestTimeTarget  
           , OffRestTime = OffRestTimeTarget  
           , UpdatedBy = @UserID  
           , UpdatedDate = getdate()
GO
CREATE procedure [dbo].[sp_spgnMstAccountView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10), @Search varchar(50) = '')
 as
 IF @Search <> ''
	SELECT   AccountNo, [Description], CompanyCode,  BranchCode  FROM gnMstAccount 
	where CompanyCode=@CompanyCode and BranchCode=@BranchCode
	and (AccountNo like '%' + @Search + '%' or [Description] like '%' + @Search + '%')

 ELSE
	SELECT   AccountNo, [Description], CompanyCode,  BranchCode  FROM gnMstAccount 
	where CompanyCode=@CompanyCode and BranchCode=@BranchCode
GO
CREATE PROCEDURE [dbo].[uspfn_SelectEmployeeOrganizationTree]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@EmployeeID varchar(15)

AS BEGIN
SELECT * INTO #test1 FROM(
SELECT a.BranchCode, a.EmployeeID, b.EmployeeName, b.Position
,(rtrim(a.EmployeeID) + ' - ' + rtrim(b.EmployeeName)) Employee, b.TeamLeader
FROM hrEmployeeMutation a
JOIN (
	SELECT c.EmployeeId, c.EmployeeName, c.Position, ISNULL(c.TeamLeader, '') AS TeamLeader, MAX(d.MutationDate) AS MutationDate
	FROM hrEmployee c
	JOIN hrEmployeeMutation d
	ON c.EmployeeId = d.EmployeeId
	WHERE c.Department = 'SALES' 
	GROUP BY c.EmployeeId, c.EmployeeName, c.Position, c.TeamLeader
) b
ON a.EmployeeId = b.EmployeeId AND a.MutationDate = b.MutationDate
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
)#test1

;WITH N(lvl, BranchCode, value, text, Position, Employee, TeamLeader)
AS
(
	SELECT 
		0 AS lvl,
		a.BranchCode, a.EmployeeID, a.EmployeeName, a.Position, a.Employee, a.TeamLeader
	FROM #test1 a
	WHERE a.EmployeeID = @EmployeeID
	UNION ALL
	SELECT 
		N.lvl + 1 AS lvl,
		b.BranchCode, b.EmployeeID, b.EmployeeName, b.Position, b.Employee, b.TeamLeader
	FROM #test1 b JOIN N ON N.value = b.TeamLeader
)
SELECT * FROM N 
WHERE lvl > 0
ORDER BY lvl DESC

DROP TABLE #test1
END
GO
CREATE PROCEDURE [dbo].[sp_Select4LookupCustomer2] (@CompanyCode varchar(10) , @BranchCode varchar(10),
	@ProfitCenterCode varchar(10), @TOPC varchar(10))
AS
	SELECT a.CustomerCode
		, a.CustomerName
		, a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 as Address
		, ISNULL(c.LookUpValueName,'') AS TopCode
		, b.TopCode as TOPCD
		, b.GroupPriceCode
		, d.RefferenceDesc1 as GroupPriceDesc
		, b.SalesCode
	FROM gnMstCustomer a
	LEFT JOIN gnMstCustomerProfitCenter b ON b.CompanyCode = a.CompanyCode 
		AND b.CustomerCode = a.CustomerCode
	LEFT JOIN gnMstLookUpDtl c ON c.CompanyCode=a.CompanyCode
		AND c.LookUpValue = b.TOPCode    
		AND c.CodeID = @TOPC
	LEFT JOIN omMstRefference d ON a.CompanyCode = d.CompanyCode 
		AND d.RefferenceType = 'GRPR' 
		AND d.RefferenceCode = b.GroupPriceCode
	WHERE a.CompanyCode = @CompanyCode
		AND b.BranchCode = @BranchCode
		AND b.ProfitCenterCode = @ProfitCenterCode
		AND a.Status = '1'
		AND b.SalesType = '1'
		AND b.isBlackList = 0
	ORDER BY CustomerCode;
GO
create procedure [dbo].[uspfn_GetMaxQtyReturSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15), @PartNo varchar(25),
@PartNoOriginal varchar(25), @DocNo varchar(20), @LmpNo varchar(25), @ReturnNo varchar(25)
as
            SELECT 
            ISNULL((SELECT QtyBill FROM spTrnSLmpDtl WHERE LmpNo = @LmpNo AND 
                PartNo = @PartNo AND 
                PartNoOriginal = @PartNoOriginal AND				
                CompanyCode = @CompanyCode AND
                BranchCode = @BranchCode
             ) -
            ISNULL(SUM (QtyReturn),0), 0) AS MaxQtyRetur FROM spTrnSRturSSdtl
            LEFT JOIN spTrnSRturSSHdr ON spTrnSRturSSHdr.ReturnNo = spTrnSRturSSdtl.ReturnNo AND
                spTrnSRturSSHdr.CompanyCode = spTrnSRturSSdtl.CompanyCode AND
                spTrnSRturSSHdr.BranchCode = spTrnSRturSSdtl.BranchCode
            WHERE spTrnSRturSSdtl.CompanyCode = @CompanyCode
                AND spTrnSRturSSdtl.BranchCode = @BranchCode
                --AND spTrnSRturSSHdr.DocNo = @DocNo
                AND spTrnSRturSSdtl.PartNo = @PartNo
                AND spTrnSRturSSdtl.PartNoOriginal = @PartNoOriginal
				AND spTrnSRturSSDtl.DocNo = @DocNo
                AND spTrnSRturSSHdr.Status NOT IN ('3')
                AND spTrnSRturSSHdr.ReturnNo <> @ReturnNo
GO
create procedure [dbo].[uspfn_CsCustLeasingList](
	@CompanyCode varchar(17)
)
as
select 
	text = a.CustomerName,
	value = a.CustomerCode
from 
	gnMstCustomer a
where
	a.CompanyCode=@CompanyCode
	and
	a.CategoryCode='32'
GO
CREATE PROCEDURE [dbo].[uspfn_GetSPKForApprovalPdiFsc]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@ProductType varchar(15),
	@IsPdi bit
AS
BEGIN
--	declare @CompanyCode as varchar(15)
--	declare @BranchCode as varchar(15)
--	declare @ProductType as varchar(15)
--	declare @IsPDI as bit
--
--	set @CompanyCode = '6014401'
--	set @BranchCode = '601440100'
--	set @ProductType = '4W'
--	set @IsPDI = 0
	
	select convert(bit, 0) IsSelected, row_number() over(order by a.ServiceNo asc) as No,a.BranchCode, a.ServiceNo, a.JobOrderNo, a.JobOrderDate
	, a.ServiceBookNo, a.ChassisNo, a.BasicModel, a.JobType, (isnull(srv.ValItem, 0) + isnull(task.valTask,0)) TotalApprove
	from SvTrnService a
	left join (select CompanyCode, BranchCode, ServiceNo, sum((OperationHour * OperationCost)) valTask
		from svTrnSrvTask
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) task on task.CompanyCode = a.CompanyCode
											and task.BranchCode = a.BranchCode
											and task.ServiceNo = a.ServiceNo
	left join (select CompanyCode, BranchCode, ServiceNo, sum(((SupplyQty - ReturnQty) * RetailPrice)) valItem 
		from svTrnSrvItem 
		where BillType = 'F'
		group by CompanyCode, BranchCode, ServiceNo) srv on srv.CompanyCode = a.CompanyCode
											and srv.BranchCode = a.BranchCode
											and srv.ServiceNo = a.ServiceNo
	where a.CompanyCode = @CompanyCode
	and a.BranchCode = @BranchCode
	and a.ProductType = @ProductType
	and a.ServiceStatus = '5 '
	and a.IsLocked = 0
	and a.JobType like (case when @IsPDI = 1 then 'PDI%' else 'FS%' end )
	
END
GO
CREATE proc [dbo].[uspfn_AbUpdAssignEmplShift]
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@ShiftEdit varchar(50),
	@AttdDateEdit datetime,
	@EmployeeIDEdit varchar(10),
	@UserID varchar(20)
as
if @ShiftEdit = '-'
begin
	update HrEmployeeShift
	   set ShiftCode = ''
		 , UpdatedBy = @UserID
		 , UpdatedDate = getdate()
	 where CompanyCode = @CompanyCode
	   and EmployeeID = @EmployeeIDEdit
	   and AttdDate = @AttdDateEdit
end
else
begin
;with x as (
	select a.CompanyCode, a.AttdDate, b.Department, b.Position, a.EmployeeID, a.ShiftCode
		 , a.OnDutyTime, a.OffDutyTime, a.OnRestTime, a.OffRestTime
		 , a.UpdatedBy, a.UpdatedDate
		 , c.ShiftCode as ShiftCodeTarget
		 , c.OnDutyTime as OnDutyTimeTarget
		 , c.OffDutyTime as OffDutyTimeTarget
		 , c.OnRestTime as OnRestTimeTarget
		 , c.OffRestTime as OffRestTimeTarget
	  from HrEmployeeShift a
	  left join HrEmployee b
		on b.CompanyCode = a.CompanyCode
	   and b.EmployeeID = a.EmployeeID
	  left join HrShift c
		on c.CompanyCode = a.CompanyCode
	   and c.ShiftCode = @ShiftEdit 
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and b.EmployeeID = @EmployeeIDEdit
	   and a.AttdDate = @AttdDateEdit
	)
	update x set ShiftCode = ShiftCodeTarget
			   , UpdatedBy = @UserID
			   , UpdatedDate = getdate()
end
GO
CREATE procedure [dbo].[uspfn_gnBrowseSupplier] @CompanyCode varchar(15)    
as    
SELECT    
 DISTINCT(a.SupplierCode)    
 , a.SupplierName    
FROM gnMstSupplier a WITH(NOLOCK, NOWAIT)    
LEFT JOIN gnMstSupplierProfitCenter b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode     
    AND a.SupplierCode = b.SupplierCode AND b.IsBlackList = 0  
--LEFT JOIN  gnMstLookUpDtl c ON c.CompanyCode = a.CompanyCode and c.LookUpValue = a.ProvinceCode  
--and c.CodeID = 'PROV'  
--left JOIN gnMstLookUpDtl d ON d.CompanyCode = a.CompanyCode and d.LookUpValue = a.AreaCode  
--and d.CodeID = 'AREA'  
--left JOIN gnMstLookUpDtl e ON e.CompanyCode = a.CompanyCode and e.LookUpValue = a.CityCode  
--and e.CodeID = 'CITY'  
WHERE a.CompanyCode = @CompanyCode AND a.Status = 1
GO
create procedure [dbo].[uspfn_SyncCsLkuBirthdayView]
as
begin
	set nocount on  

	if exists (select * from sys.tables where name = 'CsLkuBirthdayView') 
		drop table CsLkuBirthdayView  

	select * into CsLkuBirthdayView from (select * from CsLkuBirthdayViewSource)x 
 
	select 'Finish Job'  
end
GO
CREATE Procedure [dbo].[uspfn_GetSPKNoService] @CompanyCode varchar(15), @BranchCode varchar(15), @LmpNo varchar(20)
as
SELECT c.*, 
d.CustomerCode, d.CustomerName, d.CustomerGovName, d.Address1, d.Address2, d.Address3, d.Address4,
d.CityCode ,e.LookUpValueName as City, d.HpNo, d.FaxNo, c.VIN, c.EngineNo, x.LmpNo, x.DocDate as LmpDate  FROM 
(
	SELECT TOP 1 a.* 
	FROM SpTrnSLmpDtl a 
	WHERE a.companyCode =   @CompanyCode
	  AND a.branchCode    = @BranchCode
	  AND a.lmpno         = @LmpNo 
) x 
INNER JOIN spTrnSOrdHdr b ON b.CompanyCode = x.CompanyCode 
  AND b.BranchCode = x.BranchCode 
  AND b.DocNo = x.DocNo 
INNER JOIN svTrnService c ON c.CompanyCode = b.CompanyCode
  AND c.BranchCode = b.BranchCode
  AND c.JobOrderNo = b.UsageDocNo
INNER JOIN GnMstCustomer d on c.CompanyCode = d.CompanyCode
  AND c.CustomerCode = d.CustomerCode
Inner JOIN GnMstLookupDtl e on e.CompanyCode = d.CompanyCode
and e.CodeID = 'City'
and e.LookupValue = d.CityCode
WHERE x.CompanyCode = @CompanyCode 
  AND x.BranchCode  = @BranchCode 
  AND x.Lmpno       = @LmpNo
GO
create procedure [dbo].[sp_SpMasteritemStockAlokasiView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT  
 
 distinct
--StockAlokasi
d.PartNo
,d.WarehouseCode
,a.LookUpValueName as 'WarehouseName'
,d.LocationCode
,d.OnHand
,d.AllocationSP
,d.AllocationSR
,d.AllocationSL

,d.CompanyCode 
,d.BranchCode 
FROM  spMstItemLoc d 
inner join  gnMstLookUpDtl a on (d.WarehouseCode=a.ParaValue)

WHERE a.CodeID='WRCD' 
 
and a.CompanyCode=@CompanyCode and d.BranchCode=@BranchCode
GO
CREATE procedure [dbo].[uspfn_GetSpTrnSLmpDtl]
@CompanyCode varchar(15), @BranchCode varchar(15), @LMPNo varchar(15)
as
select PartNo, PartNoOriginal, DocNo, DocDate, ReferenceNo, QtyBill from spTrnSLmpDtl
where CompanyCode = @CompanyCode and BranchCode = @BranchCode
AND LmpNo = @LMPNo
GO
CREATE procedure [dbo].[uspfn_PostingReturnService]    
 @CompanyCode VARCHAR(MAX),    
 @BranchCode  VARCHAR(MAX),    
 @ProductType VARCHAR(MAX),    
 @InvoiceNo  VARCHAR(MAX),    
 @UserID   VARCHAR(MAX)    
AS    
BEGIN    
    
DECLARE @ReturnNo VARCHAR(MAX)    
DECLARE currReturn CURSOR FOR    
SELECT ReturnNo FROM spTrnSRturSrvHdr    
WHERE CompanyCode = @CompanyCode    
 AND BranchCode = @BranchCode    
 AND InvoiceNo = @InvoiceNo    
    
OPEN currReturn    
FETCH NEXT FROM currReturn INTO @ReturnNo    
WHILE @@FETCH_STATUS = 0    
 BEGIN    
 --==========================================================================================================    
 -- AVERAGE COST PRICE (UPDATE MASTER ITEM PRICE AND HISTORY)    
 --==========================================================================================================    
 SELECT * INTO #TempAvgPrice FROM (     
 SELECT    
  a.CompanyCode    
  , a.BranchCode    
  , a.PartNo    
  , ROUND((((b.OnHand * c.CostPrice) + ((a.QtyReturn * a.CostPrice) * (1-(a.DiscPct/100))))     
   / (a.QtyReturn + b.OnHand)),2,2  )AvgCost     
  , c.CostPrice    
 FROM SpTrnSRturSrvDtl a    
  LEFT JOIN SpMstItems b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo    
  LEFT JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo ) #TempAvgPrice    
    
 INSERT INTO [spHstItemPrice]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[PartNo]    
           ,[UpdateDate]    
           ,[RetailPrice]    
           ,[RetailPriceInclTax]    
           ,[PurchasePrice]    
           ,[CostPrice]    
           ,[Discount]    
           ,[OldRetailPrice]    
           ,[OldPurchasePrice]    
           ,[OldCostPirce]    
           ,[OldDiscount]    
           ,[LastPurchaseUpdate]    
           ,[LastRetailPriceUpdate]    
           ,[CreatedBy]    
           ,[CreatedDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT a.CompanyCode    
  , a.BranchCode    
  , a.PartNo    
  , DATEADD(ss,row_number() over (order by a.PartNo ASC), GetDate()) UpdateDate    
  , a.RetailPrice     
  , a.RetailPriceInclTax    
  , a.PurchasePrice    
  , b.AvgCost CostPrice    
  , ISNULL((    
   SELECT TOP 1 Discount     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ),0) Discount    
  , a.RetailPrice OldRetailPrice    
  , a.PurchasePrice OldPurchasePrice    
  , a.CostPrice OldCostPrice    
  , ISNULL((    
   SELECT TOP 1 Discount     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ),0) Discount    
  , ISNULL((    
   SELECT TOP 1 LastPurchaseUpdate     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ), NULL)LastPurchaseUpdate    
  , ISNULL((    
   SELECT TOP 1 LastRetailPriceUpdate     
   FROM SpHstItemPrice     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode    
    AND PartNo = a.PartNo    
   ORDER BY UpdateDate DESC    
   ), NULL) LastRetailPriceUpdate     
  , @UserID CreatedBy    
  , GetDate() CreatedDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM spMstItemPrice a    
  INNER JOIN #TempAvgPrice b ON a.CompanyCode = b.CompanyCode     
   AND a.BranchCode = b.BranchCode     
   AND a.PartNo = b.PartNo    
     
 UPDATE SpMstItemPrice    
 SET CostPrice = b.AvgCost    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 FROM SpMstItemPrice a, #TempAvgPrice b    
 WHERE a.CompanyCode = b.CompanyCode    
  AND a.BranchCode = b.BranchCode    
  AND a.PartNo = b.PartNo    
 DROP TABLE #TempAvgPrice    
    
 --==========================================================================================================    
 -- UPDATE STOCK AND MOVEMENT    
 --==========================================================================================================    
 UPDATE SpMstItems    
 SET Onhand = Onhand + b.QtyReturn    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 FROM SpMstItems a, SpTrnSRturSrvDtl b    
 WHERE a.CompanyCode = b.CompanyCode    
  AND a.BranchCode = b.BranchCode    
  AND a.PartNo = b.PartNo    
  AND b.CompanyCode = @CompanyCode    
  AND b.BranchCode = @BranchCode    
  AND b.ReturnNo = @ReturnNo     
     
    
 UPDATE SpMstItemLoc    
 SET Onhand = Onhand + b.QtyReturn    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 FROM SpMstItemLoc a, SpTrnSRturSrvDtl b    
 WHERE a.CompanyCode = b.CompanyCode    
  AND a.BranchCode = b.BranchCode    
  AND a.PartNo = b.PartNo    
  AND a.WarehouseCode = '00'    
  AND b.CompanyCode = @CompanyCode    
  AND b.BranchCode = @BranchCode    
  AND b.ReturnNo = @ReturnNo     
    
 INSERT INTO [spTrnIMovement]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[DocDate]    
           ,[CreatedDate]    
           ,[WarehouseCode]    
           ,[LocationCode]    
           ,[PartNo]    
           ,[SignCode]    
           ,[SubSignCode]    
           ,[Qty]    
           ,[Price]    
           ,[CostPrice]    
           ,[ABCClass]    
           ,[MovingCode]    
           ,[ProductType]    
           ,[PartCategory]    
           ,[CreatedBy])    
 SELECT a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , (    
   SELECT ReturnDate     
   FROM SpTrnSRturSrvHdr     
   WHERE CompanyCode = a.CompanyCode     
    AND BranchCode = a.BranchCode     
    AND ReturnNo = a.ReturnNo    
    ) DocDate    
  , DATEADD(ss,row_number() over (order by a.PartNo ASC), GetDate()) CreatedDate    
  , '00' WarehouseCode    
  , (    
   SELECT LocationCode    
   FROM SpMstItemLoc     
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND WarehouseCode = '00'    
    AND PartNo = a.PartNo    
    ) LocationCode    
  , a.PartNo    
  , 'IN' SignCode    
  , 'RSRV' SubSignCode    
  , a.QtyReturn Qty    
  , a.RetailPrice Price    
  , a.CostPrice     
  , a.ABCClass    
  , a.MovingCode    
  , @ProductType ProductType    
  , a.PartCategory    
  , @UserID CreatedBy    
 FROM SpTrnSRturSrvDtl a     
 WHERE CompanyCode = @CompanyCode    
  AND BranchCode = @BranchCode    
  AND ReturnNo = @ReturnNo     
     
 --==========================================================================================================    
 -- INSERT GLINTERFACE (JOURNAL) AND ARINTERFACE    
 --==========================================================================================================    
 INSERT INTO [arInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[NettAmt]    
           ,[ReceiveAmt]    
           ,[CustomerCode]    
           ,[TOPCode]    
           ,[TypeTrans]    
           ,[BlockAmt]    
           ,[DebetAmt]    
           ,[CreditAmt]    
           ,[SalesCode]    
           ,[AccountNo]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate])     
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , a.ReturnDate DocDate    
  , '300' ProfitCenterCode     
  , a.TotCostAmt NettAmt    
  , 0 ReceiveAmt    
  , a.CustomerCode    
  , (    
   SELECT TOPCode     
   FROM GnMstCustomerProfitCenter    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND CustomerCode = a.CustomerCode    
    AND ProfitCenterCode = '200'    
   ) TOPCode    
  , 'SRETURN' TypeTrans    
  , 0 BlockAmt    
  , 0 DebetAmt    
  , 0 CreditAmt    
  , (    
   SELECT SalesCode     
   FROM GnMstCustomerProfitCenter    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND CustomerCode = a.CustomerCode    
    AND ProfitCenterCode = '200'    
   ) SalesCode    
  , ISNULL((    
   SELECT b.ReceivableAccNo     
   FROM GnMstCustomerClass b    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    --AND TypeOfGoods = a.TypeOfGoods    
    AND ProfitCenterCode = '200'    
    AND CustomerCode = a.CustomerCode    
    AND CustomerClass = ISNULL((SELECT CustomerClass    
           FROM gnMstCustomerProfitCenter    
           WHERE CompanyCode = a.CompanyCode    
            AND BranchCode = a.BranchCode    
            AND CustomerCode = a.CustomerCode    
            AND ProfitCenterCode = '200'),'')    
    ),'') AccountNo    
  , '0' StatusFlag    
  , @UserId CreatedBy    
  , GetDate() CreatedDate    
 FROM SpTrnSRturSrvHdr a    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
    
 -- CHECK FOR THE AMOUNT IF EXIST     
 -- ================================    
 DECLARE @counterGL INT    
 DECLARE @TypeReturn VARCHAR(100)    
    
 SET @counterGL = 1    
 SET @TypeReturn = CASE WHEN ISNULL((select ParaValue from gnMstLookupDtl     
        where codeid = 'gtgo'    
         and lookupvalue = isnull((    
          select typeofgoods     
          from sptrnsrtursrvdtl     
          where CompanyCode = @CompanyCode    
           AND BranchCode = @BranchCode    
           AND ReturnNo = @ReturnNo),''))    
       ,'') <> 'SPAREPART' THEN 'MATERIAL' ELSE 'SPAREPART' END    
    
     
 -- INSERT GLINTERFACE NO.1 (RETURN)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotReturAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.ReturnAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , a.TotReturAmt AmountDB    
  , 0 AmountCR    
  , 'RETURN' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END     
    
 -- INSERT GLINTERFACE NO.2 (TAX OUT)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotPPNAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 IF(ISNULL((    
   SELECT a.TaxOutAccNo    
   FROM GnMstCustomerClass a    
   WHERE CompanyCode = @CompanyCode    
    AND BranchCode = @BranchCode    
    AND TypeOfGoods = isnull((    
          select typeofgoods     
  from sptrnsrtursrvhdr     
          where CompanyCode = @CompanyCode    
           AND BranchCode = @BranchCode    
           AND ReturnNo = @ReturnNo),'')    
    AND ProfitCenterCode = '200'    
    AND CustomerClass = ISNULL((SELECT CustomerClass    
           FROM gnMstCustomerProfitCenter    
           WHERE CompanyCode = @CompanyCode    
            AND BranchCode = @BranchCode    
            AND CustomerCode = isnull((    
                 select CustomerCode    
                 from sptrnsrtursrvhdr     
                 where CompanyCode = @CompanyCode    
                  AND BranchCode = @BranchCode    
                  AND ReturnNo = @ReturnNo),'')    
            AND ProfitCenterCode = '200'),'')),'') = '')    
 BEGIN    
  DECLARE @errmsg VARCHAR(MAX)    
  SET @errmsg = char(13) + 'Error Message: Customer ini belum mempuyai customer class, Harap periksa kembali setting-an customer class untuk customer ini !'    
  RAISERROR (@errmsg,16,1);    
 END    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , ISNULL((    
   SELECT b.TaxOutAccNo    
   FROM GnMstCustomerClass b    
   WHERE CompanyCode = a.CompanyCode    
    AND BranchCode = a.BranchCode    
    AND TypeOfGoods = c.TypeOfGoods    
    AND ProfitCenterCode = '200'    
    AND CustomerCode = a.CustomerCode    
    AND CustomerClass = ISNULL((SELECT CustomerClass    
           FROM gnMstCustomerProfitCenter    
           WHERE CompanyCode = a.CompanyCode    
            AND BranchCode = a.BranchCode    
            AND CustomerCode = a.CustomerCode    
            AND ProfitCenterCode = '200'),'')),'')    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , a.TotPPNAmt AmountDB    
  , 0 AmountCR    
  , 'TAX OUT' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
    
 SET @counterGL = @counterGL + 1    
 END    
 -- INSERT GLINTERFACE NO.3 (HRETURN)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotFinalReturAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
         ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.ReturnPybAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , 0 AmountDB    
  , a.TotFinalReturAmt AmountCR    
  , 'HRETURN' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
    
 SET @counterGL = @counterGL + 1    
 END    
     
 -- INSERT GLINTERFACE NO.4 (DISC1)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotDiscAmt     
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.DiscAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , 0 AmountDB    
  , a.TotDiscAmt AmountCR    
  , 'DISC1' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
 LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END    
    
 -- INSERT GLINTERFACE NO.5 (INVENTORY)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotCostAmt      
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.InventoryAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , a.TotCostAmt AmountDB    
  , 0 AmountCR    
  , 'INVENTORY' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END    
    
 -- INSERT GLINTERFACE NO.6 (COGS)    
 -- ================================    
 IF(ISNULL((    
  SELECT TotCostAmt      
  FROM SpTrnSRturSrvHdr     
  WHERE CompanyCode = @CompanyCode     
   AND BranchCode = @BranchCode     
   AND ReturnNo = @ReturnNo),0)    
   > 0)    
 BEGIN    
 INSERT INTO [dbo].[glInterface]    
           ([CompanyCode]    
           ,[BranchCode]    
           ,[DocNo]    
           ,[SeqNo]    
           ,[DocDate]    
           ,[ProfitCenterCode]    
           ,[AccDate]    
           ,[AccountNo]    
           ,[JournalCode]    
           ,[TypeJournal]    
           ,[ApplyTo]    
           ,[AmountDb]    
           ,[AmountCr]    
           ,[TypeTrans]    
           ,[BatchNo]    
           ,[BatchDate]    
           ,[StatusFlag]    
           ,[CreateBy]    
           ,[CreateDate]    
           ,[LastUpdateBy]    
           ,[LastUpdateDate])    
 SELECT     
  a.CompanyCode    
  , a.BranchCode    
  , a.ReturnNo DocNo    
  , @counterGL SeqNo    
  , a.ReturnDate DocDate    
  , '200' ProfitCenterCode    
  , GetDate() AccDate    
  , b.COGSAccNo AccountNo    
  , 'SPAREPART' JournalCode    
  , 'RETURN' TypeJournal    
  , a.InvoiceNo ApplyTo    
  , 0 AmountDB    
  , a.TotCostAmt AmountCR    
  , 'COGS' + ' ' + @TypeReturn + + '(' + c.TypeOfGoods + ')' TypeTrans    
  , '' BatchNo    
  , '1900-01-01 00:00:00.000' BatchDate    
  , '0' StatusFlag    
  , @UserID CreateBy    
  , GetDate() CreateDate    
  , @UserID LastUpdateBy    
  , GetDate() LastUpdateDate    
 FROM SpTrnSRturSrvHdr a    
 LEFT JOIN SpTrnSRturSrvdtl c ON a.CompanyCode = C.CompanyCode AND a.BranchCode = C.BranchCode AND a.ReturnNo = c.ReturnNo  
 LEFT JOIN SpMstAccount b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND c.TypeOfGoods = b.TypeOfGoods    
 WHERE a.CompanyCode = @CompanyCode    
  AND a.BranchCode = @BranchCode    
  AND a.ReturnNo = @ReturnNo    
     
 SET @counterGL = @counterGL + 1    
 END    
     
 --==========================================================================================================    
 -- UPDATE STATUS HEADER    
 --==========================================================================================================    
 UPDATE spTrnSRturSrvHdr    
 SET Status = '2'    
  , LastUpdateBy = @UserID    
  , LastUpdateDate = GetDate()    
 WHERE CompanyCode = @CompanyCode    
  AND BranchCode = @BranchCode    
  AND ReturnNo = @ReturnNo    
 FETCH NEXT FROM currReturn INTO @ReturnNo    
 END    
CLOSE currReturn    
DEALLOCATE currReturn    
    
END
GO
CREATE procedure [dbo].[usprpt_PmRpInqFollowUpDtlNew] 
	-- Add the parameters for the stored procedure here
(
	@CompanyCode	VARCHAR(15),
	@BranchCode		VARCHAR(15),
	@DateAwal		VARCHAR(10),
	@DateAkhir		VARCHAR(10),
	@Outlet			VARCHAR(max),
	@EMP			VARCHAR(max),
	@Param			VARCHAR(1),
	@Head			VARCHAR(max)
)
AS
BEGIN
	SELECT * INTO #t1 FROM (
		SELECT
				f.OutletName
				,a.InquiryNumber
				,a.NamaProspek Pelanggan
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE a.InquiryDate END InquiryDate
				,a.TipeKendaraan
				,a.Variant
				,a.Transmisi
				,isnull(b.RefferenceDesc1,'') Warna
				,a.PerolehanData
				,isnull(c.EmployeeName,'') Employee
				,d.EmployeeName TeamLeader
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE e.NextFollowUpDate END NextFollowUpDate
				,a.LastProgress
				,a.AlamatProspek
				,a.TelpRumah
				,a.NamaPerusahaan
				,a.AlamatPerusahaan
				,a.Handphone
				,a.LastUpdateStatus
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE a.SPKDate END SPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE DAY(a.SPKDate) END DaySPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE MONTH(a.SPKDate) END MonthSPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE YEAR(a.SPKDate) END YearSPKDate
				,CASE(a.LostCaseDate) WHEN '19000101' THEN NULL ELSE a.LostCaseDate END LostCaseDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE DAY(a.InquiryDate) END DayInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE MONTH(a.InquiryDate) END MonthInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE YEAR(a.InquiryDate) END YearInquiryDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE DAY(e.NextFollowUpDate) END DayNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE MONTH(e.NextFollowUpDate) END MonthNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE YEAR(e.NextFollowUpDate) END YearNextFollowUpDate
				,a.QuantityInquiry
				,isnull(r.LookUpValueName, '') LostCaseCategory
				,a.LostCaseVoiceOfCustomer
				,(select LookUpValueName from gnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMOP' and LookUpValue = a.TestDrive) TestDrive
				, isnull(n.LookUpValueName,'') CaraBayar
				, isnull(o.LookUpValueName,'') Leasing
				, isnull(p.LookUpValueName,'') DownPayment
				, isnull(q.LookUpValueName,'') Tenor
				, a.MerkLain
				, a.SpvEmployeeId
			FROM
				PmKDP a
			INNER JOIN OmMstRefference b ON b.CompanyCode = a.CompanyCode 
				AND b.RefferenceType='COLO' 
				AND b.RefferenceCode=a.ColourCode
			INNER JOIN HrEmployee c ON c.CompanyCode = a.CompanyCode 
				AND c.EmployeeID = a.EmployeeID
			INNER JOIN HrEmployee d ON d.CompanyCode = a.CompanyCode 
				AND c.TeamLeader = d.EmployeeID
			INNER JOIN PmActivities e ON e.CompanyCode = a.CompanyCode 
				AND e.BranchCode = a.BranchCode 
				AND e.InquiryNumber=a.InquiryNumber
				AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
				AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
			INNER JOIN PmBranchOutlets f ON f.CompanyCode = a.CompanyCode 
				AND f.BranchCode = a.BranchCode 
				AND f.OutletID = a.OutletID
			LEFT JOIN GnMstLookUpDtl n on n.CompanyCode=a.CompanyCode
				AND n.CodeId='PMBY'
				AND n.LookUpValue = a.CaraPembayaran
			LEFT JOIN GnMstLookUpDtl o on o.CompanyCode=a.CompanyCode
				AND o.CodeId='LSNG'
				AND o.LookUpValue = a.Leasing
			LEFT JOIN GnMstLookUpDtl p on p.CompanyCode=a.CompanyCode
				AND p.CodeId='DWPM'
				AND p.LookUpValue = a.DownPayment
			LEFT JOIN GnMstLookUpDtl q on q.CompanyCode=a.CompanyCode
				AND q.CodeId='TENOR'
				AND q.LookUpValue = a.Tenor
			LEFT JOIN GnMstLookUpDtl r on r.CompanyCode=a.CompanyCode
				AND r.CodeId='PLCC'
				AND r.LookUpValue = a.LostCaseCategory			
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND CONVERT(VARCHAR, e.NextFollowUpDate, 112) BETWEEN @DateAwal AND @DateAkhir
			AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
			AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
	) #t1

	IF (@Param <> '0')
	BEGIN
		DELETE #t1
		INSERT INTO #t1
			SELECT
				f.OutletName
				,a.InquiryNumber
				,a.NamaProspek Pelanggan
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE a.InquiryDate END InquiryDate
				,a.TipeKendaraan
				,a.Variant
				,a.Transmisi
				,isnull(b.RefferenceDesc1,'') Warna
				,a.PerolehanData
				,isnull(c.EmployeeName,'') Employee
				,d.EmployeeName TeamLeader
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE e.NextFollowUpDate END NextFollowUpDate
				,a.LastProgress
				,a.AlamatProspek
				,a.TelpRumah
				,a.NamaPerusahaan
				,a.AlamatPerusahaan
				,a.Handphone
				,a.LastUpdateStatus
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE a.SPKDate END SPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE DAY(a.SPKDate) END DaySPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE MONTH(a.SPKDate) END MonthSPKDate
				,CASE(a.SPKDate) WHEN '19000101' THEN NULL ELSE YEAR(a.SPKDate) END YearSPKDate
				,CASE(a.LostCaseDate) WHEN '19000101' THEN NULL ELSE a.LostCaseDate END LostCaseDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE DAY(a.InquiryDate) END DayInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE MONTH(a.InquiryDate) END MonthInquiryDate
				,CASE(a.InquiryDate) WHEN '19000101' THEN NULL ELSE YEAR(a.InquiryDate) END YearInquiryDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE DAY(e.NextFollowUpDate) END DayNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE MONTH(e.NextFollowUpDate) END MonthNextFollowUpDate
				,CASE(e.NextFollowUpDate) WHEN '19000101' THEN NULL ELSE YEAR(e.NextFollowUpDate) END YearNextFollowUpDate
				,a.QuantityInquiry
				,isnull(r.LookUpValueName, '') LostCaseCategory
				,a.LostCaseVoiceOfCustomer
				,(select LookUpValueName from gnMstLookUpDtl where CompanyCode = a.CompanyCode and CodeID = 'PMOP' and LookUpValue = a.TestDrive) TestDrive
				, isnull(n.LookUpValueName,'') CaraBayar
				, isnull(o.LookUpValueName,'') Leasing
				, isnull(p.LookUpValueName,'') DownPayment
				, isnull(q.LookUpValueName,'') Tenor
				, a.MerkLain
				, a.SpvEmployeeId
			FROM
				PmKDP a
			LEFT JOIN OmMstRefference b ON b.CompanyCode = a.CompanyCode 
				AND b.RefferenceType='COLO' 
				AND b.RefferenceCode=a.ColourCode
			LEFT JOIN HrEmployee c ON c.CompanyCode = a.CompanyCode 
				AND c.EmployeeID = a.EmployeeID
			LEFT JOIN HrEmployee d ON d.CompanyCode = a.CompanyCode 
				AND c.TeamLeader = d.EmployeeID
			LEFT JOIN PmActivities e ON e.CompanyCode = a.CompanyCode 
				AND e.BranchCode = a.BranchCode 
				AND e.InquiryNumber=a.InquiryNumber
				AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
				AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
			LEFT JOIN PmBranchOutlets f ON f.CompanyCode = a.CompanyCode 
				AND f.BranchCode = a.BranchCode 
				AND f.OutletID = a.OutletID
			LEFT JOIN GnMstLookUpDtl n on n.CompanyCode=a.CompanyCode
				AND n.CodeId='PMBY'
				AND n.LookUpValue = a.CaraPembayaran
			LEFT JOIN GnMstLookUpDtl o on o.CompanyCode=a.CompanyCode
				AND o.CodeId='LSNG'
				AND o.LookUpValue = a.Leasing
			LEFT JOIN GnMstLookUpDtl p on p.CompanyCode=a.CompanyCode
				AND p.CodeId='DWPM'
				AND p.LookUpValue = a.DownPayment
			LEFT JOIN GnMstLookUpDtl q on q.CompanyCode=a.CompanyCode
				AND q.CodeId='TENOR'
				AND q.LookUpValue = a.Tenor
			LEFT JOIN GnMstLookUpDtl r on r.CompanyCode=a.CompanyCode
				AND r.CodeId='PLCC'
				AND r.LookUpValue = a.LostCaseCategory		
			WHERE
				a.CompanyCode = @CompanyCode 
				AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
				AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
				AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
				AND a.LastProgress in ('P','HP','SPK') 
				--AND not exists (select 1 from #t1 where a.InquiryNumber = #t1.InquiryNumber)
	END
	
	IF (@Head='')
	BEGIN
		SELECT * FROM #t1
		ORDER BY InquiryNumber
	END
	ELSE
	BEGIN
		SELECT * FROM #t1 
		WHERE Employee IN ( SELECT EmployeeName FROM HrEmployee where TeamLeader IN (SELECT EmployeeID FROM HrEmployee WHERE TeamLeader = @Head))
		ORDER BY InquiryNumber 
	END
	DROP TABLE #t1
END
GO
CREATE procedure [dbo].[uspfn_GetReturnSSDtl] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(20)  
  as  
  select a.CompanyCode, a.BranchCode,a.ReturnNo,a.WarehouseCode , a.PartNo, a.PartNoOriginal, a.DocNo, c.QtyBill as QtyLmp, a.QtyReturn as QtyBill   from spTrnSRturSSDtl a  
  join spTrnSRturSSHdr b   
  ON a.CompanyCode = b.CompanyCode  
  and a.BranchCode = b.BranchCode  
  and a.ReturnNo = b.ReturnNo  
  join spTrnSLmpDtl c  
  on c.CompanyCode = b.CompanyCode  
  and c.BranchCode = b.BranchCode  
  and c.LmpNo = b.DocNo  
  and c.WarehouseCode = a.WarehouseCode
  and c.PartNo = a.PartNo
  and c.PartNoOriginal = a.PartNoOriginal
  where a.CompanyCode = @CompanyCode  
  and a.BranchCode = @BranchCode  
  and a.ReturnNo = @ReturnNo
GO
CREATE procedure [dbo].[sp_InquirDetailDataKendaraan] 
(
 @CompanyCode varchar(15),
 @BranchCode varchar(15),
 @ChassisCode varchar(100),
 @ChassisNo varchar(100)
)
AS

DECLARE
	@QRYTmp		AS varchar(max),
	@DBMD		AS varchar(25),
	@CompanyMD  AS varchar(25)


BEGIN

set @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 
set @DBMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode=@CompanyCode AND BranchCode=@BranchCode) 

set @QRYTmp = 
'select 
	(select b.refferenceDesc1 from ' + @DBMD + '.dbo.ommstrefference b where b.companyCode = ''' + @CompanyMD + '''
	and b.refferencetype = ''WARE'' and b.refferenceCode = a.warehouseCode) as warehouseName
	,''('' + a.ColourCode+ '') '' +(select c.refferenceDesc1 from ommstrefference c where c.companyCode = ''' + @CompanyCode + '''
	and c.refferencetype = ''COLO'' and c.refferenceCode = a.ColourCode) as ColourName
	, a.servicebookno
	, a.keyno
	, a.cogsunit
	, a.cogsOthers
	, a.cogsKaroseri
    , o.afterdiscdpp dpp
    , o.afterdiscppn ppn
    , p.bbn
	, j.pono
    , convert(varchar, j.podate, 106) podate
	, h.bpuno+'' (''+h.RefferenceDONo+'')'' bpuno
    , convert(varchar, h.bpudate, 106) bpudate
	, d.sono
    , convert(varchar, d.sodate, 106) sodate
	, k.dono
    , convert(varchar, k.dodate, 106) dodate
    , case d.SKPKNo when '''' then d.RefferenceNo else d.SKPKNo end as SKPKNo
    , convert(varchar, d.sodate, 106)  SKPKDate
    , l.bpkno
    , convert(varchar, l.bpkdate, 106) bpkdate
	, m.invoiceNo
    , convert(varchar, m.invoicedate, 106) invoicedate
    , q.RefferenceSJNo
	, convert(varchar, q.RefferenceSJDate, 106) RefferenceSJDate
    , i.hppno
    , convert(varchar, i.hppdate, 106) hppdate
	, n.reqNo reqOutNo
    , convert(varchar, n.reqDate, 106) reqdate
    , i.RefferenceInvoiceNo reffinv
    , convert(varchar, i.RefferenceInvoiceDate, 106) reffinvdate
    , i.RefferenceFakturPajakNo refffp
    , convert(varchar, i.RefferenceFakturPajakDate , 106) refffpdate
	, s.PoliceRegistrationNo policeregno
    , convert(varchar, s.PoliceRegistrationDate, 106) policeregdate
	, isnull(b.CustomerCode + '' - '' + c.CustomerName, 
		k.CustomerCode + '' - '' + (select CustomerName from gnMstCustomer where CompanyCode = ''' + @CompanyCode + ''' and CustomerCode = k.CustomerCode)
		) as Customer
	, isnull(c.Address1 + '' '' + c.Address2 + '' '' + c.Address3 + '' '' + c.Address4,
		(select Address1 + '' '' + Address2 + '' '' + Address3 + '' '' + Address4 from gnMstCustomer where CompanyCode = ''' + @CompanyCode + ''' and CustomerCode = k.CustomerCode)
		) as Address
	, d.Salesman + '' - '' + f.EmployeeName as Salesman
	, d.LeasingCo + '' - '' + g.CustomerName as Leasing
	, d.SalesCode + '' - '' + e.LookUpValueName as KelAR
    , s.BPKBNo
	, s.SPKNo
	, a.ChassisCode
	, a.SalesModelCode
	, a.ChassisNo
	, a.EngineNo
from 
	' + @DBMD + '.dbo.ommstvehicle a
left join omTrSalesInvoice b on b.CompanyCode = ''' + @CompanyCode + ''' and b.BranchCode like ''' + @BranchCode + ''' 
    and a.InvoiceNo = b.InvoiceNo
left join gnMstCustomer c on c.CompanyCode = ''' + @CompanyCode + ''' and b.Customercode = c.CustomerCode
left join omTrSalesSO d on d.CompanyCode = ''' + @CompanyCode + ''' and d.BranchCode like ''' + @BranchCode + ''' and a.SONo = d.SONo
left join GnMstLookUpDtl e on e.CompanyCode = ''' + @CompanyCode + ''' and CodeID = ''GPAR'' and e.LookUpValue = d.SalesCode
left join gnMstEmployee f on f.Companycode = ''' + @CompanyCode + ''' and f.BranchCode like ''' + @BranchCode + ''' 
    and f.EmployeeID = d.Salesman
left join gnMstCustomer g on g.CompanyCode = ''' + @CompanyCode + ''' and g.CustomerCode = d.LeasingCo
left join omTrPurchaseBPU h on h.CompanyCode = ''' + @CompanyCode + ''' and h.BranchCode like ''' + @BranchCode + ''' 
    and a.PONo = h.PONo and a.BPUNo=h.BPUNo
left join omTrPurchaseHPP i on i.CompanyCode = ''' + @CompanyCode + ''' and i.BranchCode like ''' + @BranchCode + ''' and a.HPPNo= i.HPPNo
left join omTrPurchasePO j on j.CompanyCode = ''' + @CompanyCode + ''' and j.BranchCode like ''' + @BranchCode + ''' and a.PONo = j.PONo
left join omTrSalesDO k on k.CompanyCode = ''' + @CompanyCode + ''' and k.BranchCode like ''' + @BranchCode + ''' and a.DONo = k.DONo and a.SONo= k.SONo
left join omTrSalesBPK l on l.CompanyCode = ''' + @CompanyCode + ''' and l.BranchCode like ''' + @BranchCode + ''' and a.BPKNo = l.BPKNo
left join omTrSalesInvoice m on m.CompanyCode = ''' + @CompanyCode + ''' and m.BranchCode like ''' + @BranchCode + ''' 
    and a.InvoiceNo = m.InvoiceNo
left join omTrSalesReq n on n.CompanyCode = ''' + @CompanyCode + ''' and n.BranchCode like ''' + @BranchCode + ''' and a.ReqOutNo = n.ReqNo
left join omTrSalesSOModel o on o.CompanyCode = ''' + @CompanyCode + ''' and o.BranchCode like ''' + @BranchCode + ''' and a.SONo = o.SONo 
    and a.SalesModelCode = o.SalesModelCode and a.SalesModelYear = o.SalesModelYear and a.ChassisCode = o.ChassisCode
left join omTrSalesSOVin p on p.CompanyCode = ''' + @CompanyCode + ''' and p.BranchCode like ''' + @BranchCode + ''' and a.SONo = p.SONo
    and a.SalesModelCode = p.SalesModelCode and a.SalesModelYear = p.SalesModelYear and a.ColourCode = p.ColourCode
    and a.ChassisNo = p.ChassisNo and a.ChassisCode = p.ChassisCode
left join omTrPurchaseBPU q on q.CompanyCode = ''' + @CompanyCode + ''' and q.BranchCode like ''' + @BranchCode + ''' and q.PONo = j.PONO 
	and q.BPUNo = a.BPUNo
left join omTrSalesSPKDetail s on s.CompanyCode = ''' + @CompanyCode + ''' and s.BranchCode like ''' + @BranchCode + '''
	and s.ChassisCode = a.ChassisCode and s.ChassisNo = a.ChassisNo
where 
	a.companyCode = ''' + @CompanyMD + ''' and a.chassisCode = ''' + @ChassisCode + ''' and a.chassisNo = ''' + @ChassisNo + ''''

	Exec (@QRYTmp);

END
GO
CREATE procedure [dbo].[sp_SpItemPriceView] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))
 as
SELECT 
 Items.CompanyCode 
 ,Items.BranchCode
 ,ItemInfo.PartNo
,ItemInfo.PartName
,ItemPrice.PurchasePrice
,ItemInfo.SupplierCode
,ItemPrice.RetailPriceInclTax
,CASE ItemInfo.IsGenuinePart WHEN 1 THEN 'Ya' ELSE 'Tidak' END AS IsGenuinePart
,Items.ProductType
,Items.PartCategory
,u.LookupValueName 
 as CategoryName
 ,ItemPrice.CostPrice
 ,ItemPrice.RetailPrice
 ,ItemPrice.LastPurchaseUpdate
 ,ItemPrice.LastRetailPriceUpdate
,ItemPrice.OldCostPrice
,ItemPrice.OldPurchasePrice
,ItemPrice.OldRetailPrice

FROM spMstItemPrice ItemPrice 
INNER JOIN spMstItems Items 
    ON ItemPrice.CompanyCode=Items.CompanyCode 
    AND ItemPrice.BranchCode=Items.BranchCode
    AND ItemPrice.PartNo=Items.PartNo
right JOIN spMstItemInfo ItemInfo 
    ON ItemPrice.CompanyCode = ItemInfo.CompanyCode 
    AND ItemPrice.PartNo = ItemInfo.PartNo
	inner join  gnMstLookUpDtl u on (Items.PartCategory =u.ParaValue)
WHERE  u.CodeID='PRCT' 
and Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode
GO
create procedure [dbo].[uspfn_gnGetSegmentAcc] @CompanyCode varchar(15), @BranchCode varchar(15), 
@TipeSegAcc varchar(3)
as
SELECT TipeSegAcc, SegAccNo, Parent, Description  FROM gnMstSegmentAcc 
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND 
TipeSegAcc = @TipeSegAcc ORDER BY TipeSegAcc ASC, SegAccNo ASC
GO
CREATE procedure [dbo].[uspfn_CustSOPickList] @CompanyCode varchar(15),@BranchCode varchar(15),@ProfitCenterCode varchar(15),@TypeOfGoods varchar(15)
as
SELECT x.CustomerCode,
(
    SELECT c.CustomerName 
    FROM gnMstCustomer c with(nolock, nowait)
    where  c.CompanyCode=x.CompanyCode
    AND c.CustomerCode= x.CustomerCode 
    AND c.CustomerCode=x.CustomerCode
) AS CustomerName,
(
    SELECT c.Address1+' '+c.Address2+' '+c.Address3+' '+c.Address4 
    FROM gnMstCustomer c with(nolock, nowait)
    where  c.CompanyCode=x.CompanyCode
    AND c.CustomerCode= x.CustomerCode 
    AND c.CustomerCode=x.CustomerCode

) as Address
, z.LookUpValueName as ProfitCenter
FROM 
(
    SELECT DISTINCT a.CompanyCode, a.BranchCode,
    b.CustomerCode 
    FROM spTrnSOSupply a WITH(nolock, nowait) INNER JOIN 
    spTrnSOrdHdr b ON a.CompanyCode=b.CompanyCode
    and a.BranchCode=b.BranchCode
    and a.DocNo=b.DocNo
    and b.TypeOfGoods=@TypeOfGoods
    WHERE pickingslipno = ''
) x 
INNER JOIN gnMstCustomerProfitCenter y WITH(nolock, nowait)
ON y.CompanyCode = x.CompanyCode 
   AND y.BranchCode = x.BranchCode
   AND y.CustomerCode = x.CustomerCode
INNER JOIN gnMstLookUpDtl z WITH(nolock, nowait)
ON z.CompanyCode= x.CompanyCode
   AND z.CodeID='PFCN'
   AND z.LookupValue=y.ProfitCenterCode
WHERE x.CompanyCode=@CompanyCode
    AND x.BranchCode=@BranchCode
    AND y.ProfitCenterCode=@ProfitCenterCode
GO
create procedure [dbo].[uspfn_getCustSPTrans] --'PLS/13/016078','1000557'
@PickingSlipNo varchar(25),
@CustomerCode varchar(25)
as
SELECT a.CustomerCode, a.PickingSlipNo, b.CustomerCode, b.CustomerName, b.Address1, b.Address2, b.Address3 FROM spTrnSInvoiceHdr a
               inner join gnMstCustomer b on a.CompanyCode = b.CompanyCode
               AND a.CustomerCode = a.CustomerCode
               where a.pickingSlipNo = @PickingSlipNo --'PLS/13/016078'
               AND b.CustomerCode = @CustomerCode --'1000557'
GO
CREATE procedure [dbo].[sp_pkeys]
(
    @table_name      sysname,
    @table_owner     sysname = null,
    @table_qualifier sysname = null
)
as
    declare @table_id           int
    -- quotename() returns up to 258 chars
    declare @full_table_name    nvarchar(517) -- 258 + 1 + 258

    if @table_qualifier is not null
    begin
        if db_name() <> @table_qualifier
        begin   -- If qualifier doesn't match current database
            raiserror (15250, -1,-1)
            return
        end
    end

    if @table_owner is null
    begin   -- If unqualified table name
        select @full_table_name = quotename(@table_name)
    end
    else
    begin   -- Qualified table name
        if @table_owner = ''
        begin   -- If empty owner name
            select @full_table_name = quotename(@table_owner)
        end
        else
        begin
            select @full_table_name = quotename(@table_owner) + '.' + quotename(@table_name)
        end
    end

    select @table_id = object_id(@full_table_name)

    select
        TABLE_QUALIFIER = convert(sysname,db_name()),
        TABLE_OWNER = convert(sysname,schema_name(o.schema_id)),
        TABLE_NAME = convert(sysname,o.name),
        COLUMN_NAME = convert(sysname,c.name),
        KEY_SEQ = convert (smallint,
            case
                when c.name = index_col(@full_table_name, i.index_id,  1) then 1
                when c.name = index_col(@full_table_name, i.index_id,  2) then 2
                when c.name = index_col(@full_table_name, i.index_id,  3) then 3
                when c.name = index_col(@full_table_name, i.index_id,  4) then 4
                when c.name = index_col(@full_table_name, i.index_id,  5) then 5
                when c.name = index_col(@full_table_name, i.index_id,  6) then 6
                when c.name = index_col(@full_table_name, i.index_id,  7) then 7
                when c.name = index_col(@full_table_name, i.index_id,  8) then 8
                when c.name = index_col(@full_table_name, i.index_id,  9) then 9
                when c.name = index_col(@full_table_name, i.index_id, 10) then 10
                when c.name = index_col(@full_table_name, i.index_id, 11) then 11
                when c.name = index_col(@full_table_name, i.index_id, 12) then 12
                when c.name = index_col(@full_table_name, i.index_id, 13) then 13
                when c.name = index_col(@full_table_name, i.index_id, 14) then 14
                when c.name = index_col(@full_table_name, i.index_id, 15) then 15
                when c.name = index_col(@full_table_name, i.index_id, 16) then 16
            end),
        PK_NAME = convert(sysname,i.name)
    from
        sys.indexes i,
        sys.all_columns c,
        sys.all_objects o
    where
        o.object_id = @table_id and
        o.object_id = c.object_id and
        o.object_id = i.object_id and
        i.is_primary_key = 1 and
        (c.name = index_col (@full_table_name, i.index_id,  1) or
         c.name = index_col (@full_table_name, i.index_id,  2) or
         c.name = index_col (@full_table_name, i.index_id,  3) or
         c.name = index_col (@full_table_name, i.index_id,  4) or
         c.name = index_col (@full_table_name, i.index_id,  5) or
         c.name = index_col (@full_table_name, i.index_id,  6) or
         c.name = index_col (@full_table_name, i.index_id,  7) or
         c.name = index_col (@full_table_name, i.index_id,  8) or
         c.name = index_col (@full_table_name, i.index_id,  9) or
         c.name = index_col (@full_table_name, i.index_id, 10) or
         c.name = index_col (@full_table_name, i.index_id, 11) or
         c.name = index_col (@full_table_name, i.index_id, 12) or
         c.name = index_col (@full_table_name, i.index_id, 13) or
         c.name = index_col (@full_table_name, i.index_id, 14) or
         c.name = index_col (@full_table_name, i.index_id, 15) or
         c.name = index_col (@full_table_name, i.index_id, 16))
    order by 1, 2, 3, 5
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[uspfn_CustomerUtilityView]  @flag int
AS

if @flag =1 SELECT * , case when Isautogenerate=1 then 'Automatis' else 'Manual' end GenarateNo from GnMstCustomerUtility
if @flag =2 SELECT * , case when Isautogenerate=1 then 'Automatis' else 'Manual' end GenarateNo from gnMstSupplierUtility
GO
-- POSTING TRANSACTION MULTI COMPANY - SALES
-- -----------------------------------------
-- Created  by : HTO, 2014
-- Revision by : HTO, January 2015
-- -----------------------------------------
-- This procedure used for 
--		4-Wheeler : BIT-SBT, SBSM-SSBT, BAT-SAT, SIT-SST, UIB-SIT
--		2-Wheeler : IJMG,SVMG,ISG,ISMG-SMG
-- -----------------------------------------------------------------------
-- execute [usprpt_PostingMultiCompanySales] '6006400001','2014/11/08','0'
-- -----------------------------------------------------------------------

CREATE procedure [dbo].[usprpt_PostingMultiCompanySales]
	@CompanyCode	varchar(15),
	@PostingDate	datetime,
	@Status			varchar(1)	output
AS	

BEGIN

	  --declare @CompanyCode				varchar(15) = '6006400001'
	  --declare @PostingDate				datetime	= '2015/03/08'
	  --declare @Status						varchar(1)

  -- Check Tax/Seri Pajak online
		declare @TaxCompany				varchar(15)
		declare @TaxBranch				varchar(15)
		declare @TaxDB					varchar(50)
		declare @TaxTransCode			varchar(3)
		declare @swTaxBranch			varchar(15) = ''
		declare @swTaxDoc				varchar(15) = ''
		declare @TaxSeq					bigint
		declare @TaxSeqNo				int
		declare @SeriPajakNo			varchar(50) = ''
		declare @sqlString				nvarchar(max)

		set @TaxCompany=isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='COMPANYCODE'),'')
		set @TaxBranch =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='BRANCHCODE'),'')
		set @TaxDB     =isnull((select ParaValue from gnMstLookupDtl where CodeID='TXOL' and LookupValue='FROM_DB'),'')
		--select @TaxCompany, @TaxBranch, @TaxDB
		if @TaxCompany='' or @TaxBranch='' or @TaxDB=''
			begin
				set @Status = '1'
				return
			end
		
		set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo, @TaxSeqNo=SeqNo from ' 
									   +@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' 
									   +@TaxCompany+ ''' and BranchCode=''' 
									   +@TaxBranch+ ''' and Year=''' 
									   +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
									   +convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
			execute sp_executesql @sqlString, 
								N'@TaxSeq 		bigint  	output,
								  @TaxSeqNo 	int 		output', 
								  @TaxSeq 		output,
								  @TaxSeqNo 	output
		if isnull(@TaxSeq,0)=0 and isnull(@TaxSeqNo,0)=0
			begin
				set @Status = '1'
				return
			end
		set @TaxSeq   = isnull(@TaxSeq,0)
		set @TaxSeqNo = isnull(@TaxSeqNo,0)

 -- Posting process : insert data to MD & SD table
		declare @curCompanyCode			varchar(15) --= '6006400001'
		declare @curBranchCode			varchar(15) --= '6006400131'
		declare @curDocNo				varchar(15)	--= 'IU131/14/100010'
		declare @curDocDate				datetime    --= '2015/03/08'
		declare @curSeq					int			
		declare @curSalesModelCode		varchar(20)	
		declare @curSalesModelYear		numeric(4,0)	
		declare @curChassisCode			varchar(15)	
		declare @curChassisNo			numeric(10,0) 
		declare @curEngineCode			varchar(15)	
		declare @curEngineNo			numeric(10,0) 
		declare @curColourCode			varchar(15)	
		declare @curWarehouseCode		varchar(15)	
		declare @curCustomerCode		varchar(15)	
		declare @curQtyFlag				char(1)		
		declare @curCompanyMD			varchar(15)
		declare @curBranchMD			varchar(15)	
		declare @curWarehouseMD			varchar(15)	
		declare @curStatus				char(1)		
		declare @curProcessStatus		char(1)		
		declare @curProcessDate			datetime		
		declare @curCreatedBy			varchar(15)	
		declare @curCreatedDate			datetime		
		declare @curLastUpdateBy		varchar(15)	
		declare @curLastUpdateDate		datetime

		declare @DBName					varchar(50)
		declare @DBNameMD				varchar(50)
		declare @CentralBranch			varchar(15)
		declare @PONo					varchar(15)
		declare @SONo					varchar(15)
		declare @DONo					varchar(15)
		declare @BPKNo					varchar(15)
		declare @INVNo					varchar(15)
		declare @BPUNo					varchar(15)
		declare @HPPNo					varchar(15)
		declare @RTPNo					varchar(15)
		declare @RTNNo					varchar(15) = ''
		declare @VTONo					varchar(15) = ''
		declare @VTINo					varchar(15) = ''
		declare @DueDate				datetime
		declare @SeqNo					integer

		declare @VehServiceBookNo		varchar(15)
		declare @VehKeyNo				varchar(15)
		declare @VehWH					varchar(15) = 'HLD'
		declare @VehCOGS				numeric(18,0)
		declare @VehCOGSOthers			numeric(18,0)
		declare @VehCOGSKaroseri		numeric(18,0)
		declare @VehPpnBmBuyPaid		numeric(18,0)
		declare @VehPpnBmBuy			numeric(18,0)
		declare @VehSalesNetAmt			numeric(18,0)
		declare @VehPpnBmSellPaid		numeric(18,0)
		declare @VehPpnBmSell			numeric(18,0)
		declare @VehWHMD				varchar(15)
		declare @VehFakturPolisiNo		varchar(15)
		declare @VehFakturPolisiDate	datetime
		declare @VehSONo				varchar(15)
		declare @VehDONo				varchar(15)
		declare @VehBPKNo				varchar(15)
		declare @VehINVNo				varchar(15)
		declare @VehREQNo				varchar(15)
		declare @VehRTNNo				varchar(15)
		declare @VehVTONo				varchar(15)
		declare @VehVTINo				varchar(15)
		declare @VehBPKDate				datetime
		declare @VehSuzukiDONo			varchar(15)
		declare @VehSuzukiDODate		datetime
		declare @VehSuzukiSJNo			varchar(15)
		declare @VehSuzukiSJDate		datetime

		declare @swCompanyCode			varchar(15)  = ' '
		declare @swBranchCode			varchar(15)  = ' '
		declare @swDocNo 				varchar(15)  = ' '
		declare @CurrentDate			varchar(100) = convert(varchar,getdate(),121)

		declare @RetailPriceIncludePPN	numeric(18,0) = 0
		declare @DiscPriceIncludePPN	numeric(18,0) = 0
		declare @NetSalesIncludePPN		numeric(18,0) = 0
		declare @RetailPriceExcludePPN	numeric(18,0) = 0
		declare @DiscPriceExcludePPN	numeric(18,0) = 0
		declare @NetSalesExcludePPN		numeric(18,0) = 0
		declare @PPNBeforeDisc			numeric(18,0) = 0
		declare @PPNAfterDisc			numeric(18,0) = 0
		declare @PPnBMPaid				numeric(18,0) = 0
		declare @EndUserName			varchar(100)
		declare @EndUserAddress1		varchar(100)
		declare @EndUserAddress2		varchar(100)
		declare @EndUserAddress3		varchar(100)
		declare @CityCode				varchar(15)
		declare @CustomerClass			varchar(15)
		declare @TopCode				varchar(15) 
		declare @GroupPriceCode			varchar(15)
		declare @SalesCode				varchar(15) 
		declare @SalesType				char(1)	
		declare @TopDays				integer
		declare @WHSD					varchar(15)

        declare curomSDMovement cursor for
			select sd.* 
			  from omSDMovement sd, gnMstDocument doc
             where sd.CompanyMD        =doc.CompanyCode
			   and sd.BranchMD         =doc.BranchCode
			   and doc.DocumentType    ='IVU' 
			   and doc.ProfitCenterCode='100'
			   and left(sd.DocNo,len(doc.DocumentPrefix))=doc.DocumentPrefix
			   and convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)
			   and ProcessStatus=0
             order by sd.CompanyCode, sd.BranchCode, sd.DocNo, 
					  sd.SalesModelCode, sd.SalesModelYear, sd.ColourCode
		open curomSDMovement

		fetch next from curomSDMovement
			  into @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
				   @curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
				   @curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
				   @curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
				   @curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate

		while (@@FETCH_STATUS =0)
			begin

			 -- MD: Collect vehicle information from omMstVehicle (Main Dealer)
				set @sqlString = N'select @VehServiceBookNo=ServiceBookNo, @VehKeyNo=KeyNo, @VehCOGS=COGSUnit, 
								 @VehCOGSOthers=COGSOthers, @VehCOGSKaroseri=COGSKaroseri, @VehPpnBmBuyPaid=PpnBmBuyPaid, 
								 @VehPpnBmBuy=PpnBmBuy, @VehSalesNetAmt=SalesNetAmt, @VehPpnBmSellPaid=PpnBmSellPaid, 
								 @VehPpnBmSell=PpnBmSell, @VehWHMD=WarehouseCode, @VehFakturPolisiNo=FakturPolisiNo, 
								 @VehFakturPolisiDate=FakturPolisiDate, @VehSONo=SONo, @VehDONo=DONo, @VehBPKNo=BPKNo, 
								 @VehINVNo=InvoiceNo, @VehREQNo=ReqOutNo, @VehRTNNo=SOReturnNo, @VehVTONo=TransferOutNo, 
								 @VehVTINo=TransferInNo, @VehBPKDate=BPKDate, @VehSuzukiDONo=SuzukiDONo, 
								 @VehSuzukiDODate=SuzukiDODate, @VehSuzukiSJNo=SuzukiSJNo, 
								 @VehSuzukiSJDate=SuzukiSJDate from ' +@DBNameMD+ '..omMstVehicle where CompanyCode=''' 
								 +@curCompanyMD+ ''' and ChassisCode=''' +@curChassisCode+ 
								 ''' and ChassisNo=''' +convert(varchar,@curChassisNo)+ ''''
					execute sp_executesql @sqlString, 
							N'@VehServiceBookNo		varchar(15)		output,
							  @VehKeyNo				varchar(15)		output,
							  @VehCOGS				numeric(18,0)	output,
							  @VehCOGSOthers		numeric(18,0)	output,
							  @VehCOGSKaroseri		numeric(18,0)	output,
							  @VehPpnBmBuyPaid		numeric(18,0)	output,
							  @VehPpnBmBuy			numeric(18,0)	output,
							  @VehSalesNetAmt		numeric(18,0)	output,
							  @VehPpnBmSellPaid		numeric(18,0)	output, 
							  @VehPpnBmSell			numeric(18,0)	output,
							  @VehWHMD				varchar(15)		output,
							  @VehFakturPolisiNo	varchar(15)		output,
							  @VehFakturPolisiDate	datetime		output,
							  @VehSONo				varchar(15)		output,
							  @VehDONo				varchar(15)		output,
							  @VehBPKNo				varchar(15)		output,
							  @VehINVNo				varchar(15)		output,
							  @VehREQNo				varchar(15)		output,
							  @VehRTNNo				varchar(15)		output,
							  @VehVTONo				varchar(15)		output,
							  @VehVTINo				varchar(15)		output,
							  @VehBPKDate			datetime		output,
							  @VehSuzukiDONo		varchar(15)		output,
							  @VehSuzukiDODate		datetime		output,
							  @VehSuzukiSJNo		varchar(15)		output,
							  @VehSuzukiSJDate		datetime		output',
							  @VehServiceBookNo		output,  @VehKeyNo			output,
							  @VehCOGS				output,	 @VehCOGSOthers		output,
							  @VehCOGSKaroseri		output,	 @VehPpnBmBuyPaid	output,
							  @VehPpnBmBuy			output,  @VehSalesNetAmt	output,
							  @VehPpnBmSellPaid		output,  @VehPpnBmSell		output,
							  @VehWHMD				output,  @VehFakturPolisiNo	output,  
							  @VehFakturPolisiDate	output,  @VehSONo			output,  
							  @VehDONo				output,  @VehBPKNo			output,  
							  @VehINVNo				output,  @VehREQNo			output,
							  @VehRTNNo				output,  @VehVTONo			output,  
							  @VehVTINo				output,  @VehBPKDate		output,  
							  @VehSuzukiDONo		output,  @VehSuzukiDODate	output,  
							  @VehSuzukiSJNo		output,  @VehSuzukiSJDate	output

				set @VehServiceBookNo	 = isnull(@VehServiceBookNo,'')
				set @VehKeyNo			 = isnull(@VehKeyNo,'')
				set @VehCOGS			 = isnull(@VehCOGS,0)
				set @VehCOGSOthers		 = isnull(@VehCOGSOthers,0) 
				set @VehCOGSKaroseri	 = isnull(@VehCOGSKaroseri,0)
				set @VehPpnBmBuyPaid	 = isnull(@VehPpnBmBuyPaid,0)
				set @VehPpnBmBuy		 = isnull(@VehPpnBmBuy,0) 
				set @VehSalesNetAmt		 = isnull(@VehSalesNetAmt,0) 
				set @VehPpnBmSellPaid    = isnull(@VehPpnBmSellPaid,0)
				set @VehPpnBmSell		 = isnull(@VehPpnBmSell,0)
				set @VehWHMD			 = isnull(@VehWHMD,'')
				set @VehFakturPolisiNo	 = isnull(@VehFakturPolisiNo,'')
				set @VehFakturPolisiDate = isnull(@VehFakturPolisiDate,'1900/01/01')
				set @VehSONo			 = isnull(@VehSONo,'')
				set @VehDONo			 = isnull(@VehDONo,'') 
				set @VehBPKNo			 = isnull(@VehBPKNo,'')
				set @VehINVNo			 = isnull(@VehINVNo,'') 
				set @VehREQNo			 = isnull(@VehREQNo,'') 
				set @VehRTNNo			 = isnull(@VehRTNNo,'')
				set @VehVTONo			 = isnull(@VehVTONo,'') 
				set @VehVTINo			 = isnull(@VehVTINo,'') 
				set @VehBPKDate			 = isnull(@VehBPKDate,'1900/01/01')
				set @VehSuzukiDONo		 = isnull(@VehSuzukiDONo,'') 
				set @VehSuzukiDODate	 = isnull(@VehSuzukiDODate,'1900/01/01')
				set @VehSuzukiSJNo		 = isnull(@VehSuzukiSJNo,'')
				set @VehSuzukiSJDate	 = isnull(@VehSuzukiSJDate,'1900/01/01')

				if @swCompanyCode <> @curCompanyCode or
				   @swBranchCode  <> @curBranchCode  or
				   @swDocNo		  <> @curDocNo
					begin
						set @swCompanyCode = @curCompanyCode
						set @swBranchCode  = @curBranchCode
						set @swDocNo	   = @curDocNo
						set @SeqNo		   = 0
		
					 -- MD Database & SD Database from gnMstCompanyMapping
						select @DBNameMD=DBMD, @DBName=DBName from gnMstCompanyMapping where CompanyCode=@CurCompanyCode and BranchCode =@curBranchCode

					 -- Centralize unit purchasing for SBT, SMG, SIT, SST dealer
						set @sqlString = N'select @CentralBranch=BranchCode from ' +@DBName+ '..gnMstOrganizationDtl ' +  
											'where CompanyCode=''' +@curCompanyCode+ ''' and isBranch=''0'''
							execute sp_executesql @sqlString, 
									N'@CentralBranch varchar(15) output', @CentralBranch output

					 -- MD: Customer information in gnMstCustomer & gnMstCustomerProfitCenter
						set @sqlString = N'select @EndUserName=CustomerName, @EndUserAddress1=Address1, @EndUserAddress2=Address2, 
										 @EndUserAddress3=Address3, @CityCode=CityCode from ' 
										 +@DBNameMD+ '..gnMstCustomer where CompanyCode='''
										 +@curCompanyMD+ ''' and CustomerCode=''' +@CentralBranch+ ''''
							execute sp_executesql @sqlString, 
									N'@EndUserName		varchar(100) output,  @EndUserAddress1	varchar(100) output,
									  @EndUserAddress2	varchar(100) output,  @EndUserAddress3	varchar(100) output,
									  @CityCode			varchar(10)  output', 
									  @EndUserName		output, @EndUserAddress1	output, @EndUserAddress2 output, 
									  @EndUserAddress3	output, @CityCode           output

						set @sqlString = N'select @CustomerClass=CustomerClass, @TaxTransCode=TaxTransCode, @TopCode=TopCode, 
										 @GroupPriceCode=GroupPriceCode, @SalesCode=SalesCode, @SalesType=SalesType from ' 
										 +@DBNameMD+ '..gnMstCustomerProfitCenter where CompanyCode='''
										 +@curCompanyMD+ ''' and BranchCode=''' +@curBranchMD+ ''' and CustomerCode='''
										 +@CentralBranch+ ''' and ProfitCenterCode=''100'''
							execute sp_executesql @sqlString, 
									N'@CustomerClass	varchar(15) output,  @TaxTransCode		varchar(3)  output,
									  @TopCode			varchar(15) output,  @GroupPriceCode	varchar(15) output,
									  @SalesCode		varchar(15) output,  @SalesType		char(1)		output', 
									  @CustomerClass  output, @TaxTransCode output, @TopCode   output, 
									  @GroupPriceCode output, @SalesCode    output, @SalesType output

					 -- MD: Calculate Top of Days 
						set @sqlString = N'select @TopDays=ParaValue from ' +@DBNameMD+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyMD+ ''' and CodeID=''TOPC'' and LookUpValue=''' +@TopCode+ ''''
							execute sp_executesql @sqlString, N'@TopDays integer output', @TopDays output

						set @EndUserName     = isnull(@EndUserName,'')
						set @EndUserAddress1 = isnull(@EndUserAddress1,'')
						set @EndUserAddress2 = isnull(@EndUserAddress2,'')
						set @EndUserAddress3 = isnull(@EndUserAddress3,'')
						set @CityCode        = isnull(@CityCode,'')
						set @CustomerClass   = isnull(@CustomerClass,'')
						set @TaxTransCode    = isnull(@TaxTransCode,'')
						set @TopCode         = isnull(@TopCode,'')
						set @GroupPriceCode  = isnull(@GroupPriceCode,'')
						set @SalesCode       = isnull(@SalesCode,'')
						set @SalesType	  	 = isnull(@SalesType,'')
						set @SalesType		 = isnull(@TopDays,0)
						set @DueDate		 = dateadd(day,isnull(@TopDays,0),@curDocDate)

					 -- MD: Generate Sales Order No for MD
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'SOR', @SONo output

					 -- SD: Insert data to table omTrPurchasePO
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'PUR', @PONo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchasePO 
												(CompanyCode, BranchCode, PONo, PODate, RefferenceNo, RefferenceDate, SupplierCode, 
												 BillTo, ShipTo, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
										           +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@curBranchMD+ ''',''' 
												   +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@curDocNo+ 
												   ''',''2'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesSO
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesSO 
												(CompanyCode, BranchCode, SONo, SODate, SalesType, RefferenceNo, RefferenceDate, CustomerCode, 
												 TOPCode, TOPDays, BillTo, ShipTo, ProspectNo, SKPKNo, Salesman, WareHouseCode, isLeasing, 
												 LeasingCo, GroupPriceCode, Insurance, PaymentType, PrePaymentAmt, PrePaymentDate, 
												 CommissionBy, CommissionAmt, PONo, ContractNo, RequestDate, Remark, Status, ApproveBy,
												 ApproveDate, RejectBy, RejectDate, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate, SalesCode, Installment, FinalPaymentDate, SalesCoordinator,
												 SalesHead, BranchManager)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''' +@SalesType+ ''',''' +@PONo+ ''',''' +convert(varchar,@curDocDate,121)+ ''','''
												   +@CentralBranch+ ''',''' +@TopCode+ ''',''' +convert(varchar,@TopDays)+ ''',''' +@CentralBranch+ ''',''' 
												   +@curBranchCode+ ''',NULL,NULL,''POSTING'',''' +@VehWHMD+ ''',0,NULL,''' +@GroupPriceCode+
												   ''',NULL,NULL,0,NULL,NULL,0,''' +@PONo+ 
												   ''',NULL,NULL,NULL,2,''POSTING'',''' +convert(varchar,@curDocDate,121)+ ''',NULL,NULL,''POSTING'','''
												   +convert(varchar,@curDocDate,121)+ ''',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',0,NULL,NULL,''' +@SalesCode+ ''',0,NULL,''POSTING'',''POSTING'',''POSTING'')'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesDO
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'DOS', @DONo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesDO 
												(CompanyCode, BranchCode, DONo, DODate, SONo, CustomerCode, ShipTo,
												 WareHouseCode, Expedition, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@DONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ ''',''' 
												   +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@VehWHMD+ ''',NULL,'''
												   +@curDocNo+ ''',''2'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesBPK
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'BPK', @BPKNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesBPK 
												(CompanyCode, BranchCode, BPKNo, BPKDate, DONo, SONo, CustomerCode, 
												 ShipTo, WareHouseCode, Expedition, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@DONo+ ''',''' +@SONo+ 
												   ''',''' +@CentralBranch+ ''',''' +@CentralBranch+ ''',''' +@VehWHMD+ ''',NULL,'''
												   +@curDocNo+ ''',''2'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesInvoice

						--Tax / Seri Pajak Numbering
						if @curBranchCode<>@swTaxBranch or left(@curDocNo,3)<>left(@swTaxDoc,3)
							begin
								set @swTaxBranch = @curBranchCode
								set @swTaxDoc	 = @curDocNo

								set @sqlString = N'select top 1 @TaxSeq=FPJSeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ ''' and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlString, @params= N'@TaxSeq bigint output', @TaxSeq = @TaxSeq output

								set @sqlString = N'select top 1 @TaxSeqNo=SeqNo from ' 
												+@TaxDb+ '..gnMstFPJSeqNo where CompanyCode=''' +@TaxCompany+ ''' and BranchCode=''' 
												+@TaxBranch+ ''' and Year=''' +convert(varchar,year(@PostingDate))+ '''and convert(varchar,EffectiveDate,111)<=''' 
												+convert(varchar,@PostingDate,111)+ ''' order by CompanyCode, BranchCode, Year, SeqNo'
									execute sp_executesql @query=@sqlString, @params= N'@TaxSeqNo int output', @TaxSeqNo = @TaxSeqNo output

								set @sqlString = N'select top 1 @TaxTransCode=TaxTransCode from ' 
												+@TaxDb+ '..gnMstCoProfile where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch+ ''''
									execute sp_executesql @query=@sqlString, @params= N'@TaxTransCode varchar(3) output', @TaxTransCode = @TaxTransCode output

								set @TaxSeq = @TaxSeq + 1

								set @sqlString = 'update ' +@TaxDb+ '..gnMstFPJSeqNo
										  			 set FPJSeqNo = ' +convert(varchar,@TaxSeq)+ 
												 ' where CompanyCode=''' +@TaxCompany + ''' and BranchCode=''' +@TaxBranch + ''' and Year= ''' 
														+convert(varchar,year(@PostingDate))+ ''' and SeqNo= ''' 
														+convert(varchar,@TaxSeqNo)+ ''''
									execute sp_executesql @sqlString 

								--set @SeriPajakNo = @TaxTransCode + '0.' +isnull(replicate('0',11-len(convert(varchar,@TaxSeq))),'') + 
								--					+left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) + '-' +
								--					+right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								if len(convert(varchar,@TaxSeq))>8
									set @SeriPajakNo =  @TaxTransCode + '0.' + replicate('0', 3-(len(convert(varchar,@TaxSeq))-8)) +
														left(convert(varchar,@TaxSeq),len(convert(varchar,@TaxSeq))-8) +
														'-' +right(convert(varchar,year(@PostingDate)),2)+ '.' +right(convert(varchar,@TaxSeq),8)
								else
									set @SeriPajakNo =  @TaxTransCode + '0.000-'+right(convert(varchar,year(@PostingDate)),2)+ '.'
														+replicate('0',8-len(convert(varchar,@TaxSeq)))+convert(varchar,@TaxSeq)
							end

						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'IVU', @INVNo output
						set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesInvoice 
												(CompanyCode, BranchCode, InvoiceNo, InvoiceDate, SONo, CustomerCode, 
												 BillTo, FakturPajakNo, FakturPajakDate, DueDate, isStandard, Remark, 
												 Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ 
												   ''',''' +convert(varchar,@curDocDate,121)+ ''',''' +@SONo+ 
												   ''',''' +@CentralBranch+ ''','''  +@CentralBranch+ ''',''' 
												   +@SeriPajakNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +convert(varchar,@DueDate)+ ''',1,''' +@curDocNo+ 
												   ''',''5'',''POSTING'',''' +convert(varchar,@curDocDate,121)+ 
												   ''',''POSTING'',''' +@CurrentDate+ ''',0,NULL,NULL)'
							execute sp_executesql @sqlString

					 -- MD: Insert data to table omTrSalesReturn, Transfer In, Transfer Out
					    --@RTNNo, @VTINo, @VTONo
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @RTNNo output
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @VTINo output
						--execute [usprpt_PostingMultiCompany4DocNo] @curCompanyMD, @curBranchMD, @DBNameMD, 'RTS', @VTONo output

				     -- SD: Collect Warehouse Information from gnMstLookupDtl
						set @sqlString = N'select @WHSD=LookUpValue from ' +@DBName+ '..gnMstLookUpDtl 
											where CompanyCode=''' +@curCompanyCode+ ''' and CodeID=''MPWH'' and ParaValue=''' +@CentralBranch+ ''''
							execute sp_executesql @sqlString, N'@WHSD varchar(15) output', @WHSD output


					 -- SD: Insert data to table omTrPurchaseBPU  
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'BPU', @BPUNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseBPU
												(CompanyCode, BranchCode, PONo, BPUNo, BPUDate, SupplierCode, ShipTo, RefferenceDONo,
												 RefferenceDODate, RefferenceSJNo, RefferenceSJDate, WarehouseCode, Expedition, 
												 BPUType, Remark, Status, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, 
												 isLocked, LockingBy, LockingDate, BPUSJDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ 
												   ''',''' +@BPUNo+ ''',''' +convert(varchar,@curDocDate,121)+ ''',''' 
												   +@curBranchMD+ ''',''' +@CentralBranch+ ''',''' +@DONo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@BPKNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +@WHSD+ ''','''
												   +@curBranchMD+ ''',''2'',''' +@curDocNo+ ''',''2'',''POSTING'',''' 
												   +convert(varchar,@PostingDate,111)+ ''',''POSTING'',''' 
												   +@currentDate+ ''',0,NULL,NULL,''' +convert(varchar,@curDocDate,121)+ ''')' 
							execute sp_executesql @sqlString

					 -- SD: Insert data to table omTrPurchaseHPP
						execute [usprpt_PostingMultiCompany4DocNo] @curCompanyCode, @CentralBranch, @DBName, 'HPU', @HPPNo output
						set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseHPP
												(CompanyCode, BranchCode, HPPNo, HPPDate, PONo, SupplierCode, BillTo, 
												 RefferenceInvoiceNo, RefferenceInvoiceDate, RefferenceFakturPajakNo,
												 RefferenceFakturPajakDate, DueDate, Remark, Status, CreatedBy, CreatedDate, 
												 LastUpdateBy, LastUpdateDate, isLocked, LockingBy, LockingDate)
											values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@PONo+ ''',''' +@curBranchMD+ 
												   ''',''' +@CentralBranch+ ''',''' +@INVNo+ ''',''' 
												   +convert(varchar,@curDocDate,121)+ ''',''' +@SeriPajakNo+ ''','''
												   +convert(varchar,@curDocDate,121)+ ''',''' +convert(varchar,@DueDate)+ 
												   ''',NULL,''5'',''POSTING'',''' +convert(varchar,@PostingDate,111)+ 
												   ''',''POSTING'',''' +@currentDate+ ''',0,NULL,NULL)' 
							execute sp_executesql @sqlString
					end

				set @SeqNo = @SeqNo + 1
			 -- Collect Vehicle Price from omPriceListBranches
			    set @sqlString = N'select top 1 
										@RetailPriceIncludePPN = RetailPriceIncludePPN, 
										@DiscPriceIncludePPN   = DiscPriceIncludePPN,
										@NetSalesIncludePPN    = NetSalesIncludePPN, 
										@RetailPriceExcludePPN = RetailPriceExcludePPN,
										@DiscPriceExcludePPN   = DiscPriceExcludePPN, 
										@NetSalesExcludePPN    = NetSalesExcludePPN,
										@PPNBeforeDisc         = PPNBeforeDisc, 
										@PPNAfterDisc          = PPNAfterDisc, 
										@PPnBMPaid             = PPnBMPaid from '
										+@DBName+ '..omPriceListBranches where CompanyCode=''' +@curCompanyCode+ 
										''' and BranchCode=''' +@CentralBranch+ ''' and SupplierCode=''' +@curBranchMD+ 
										''' and GroupPrice=''D'' and SalesModelCode=''' +@curSalesModelCode+
										''' and SalesModelYear=''' +convert(varchar,@curSalesModelYear)+ 
										''' and EffectiveDate<='''+convert(varchar,@curDocDate,111)+ 
										''' and isStatus=1 order by EffectiveDate desc'
						execute sp_executesql @sqlString, 
								N'@RetailPriceIncludePPN numeric(18,0)	output, 
								  @DiscPriceIncludePPN numeric(18,0)	output,
								  @NetSalesIncludePPN numeric(18,0)		output, 
								  @RetailPriceExcludePPN numeric(18,0)	output, 
								  @DiscPriceExcludePPN numeric(18,0)	output, 
								  @NetSalesExcludePPN numeric(18,0)		output, 
								  @PPNBeforeDisc numeric(18,0)			output, 
								  @PPNAfterDisc numeric(18,0)			output,
								  @PPnBMPaid numeric(18,0)				output', 
								  @RetailPriceIncludePPN				output, 
								  @DiscPriceIncludePPN					output,
								  @NetSalesIncludePPN 					output, 
								  @RetailPriceExcludePPN				output, 
								  @DiscPriceExcludePPN					output, 
								  @NetSalesExcludePPN					output, 
								  @PPNBeforeDisc						output, 
								  @PPNAfterDisc							output,
								  @PPnBMPaid							output

				set @RetailPriceIncludePPN = isnull(@RetailPriceIncludePPN,0)
				set @DiscPriceIncludePPN   = isnull(@DiscPriceIncludePPN,0)
				set @NetSalesIncludePPN    = isnull(@NetSalesIncludePPN,0)
				set @RetailPriceExcludePPN = isnull(@RetailPriceExcludePPN,0)
				set @DiscPriceExcludePPN   = isnull(@DiscPriceExcludePPN,0)
				set @NetSalesExcludePPN	   = isnull(@NetSalesExcludePPN,0)
				set @PPNBeforeDisc		   = isnull(@PPNBeforeDisc,0)
				set @PPNAfterDisc		   = isnull(@PPNAfterDisc,0)
				set @PPnBMPaid			   = isnull(@PPnBMPaid,0)

			 -- SD: Insert data to table omTrPurchasePOModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchasePOModel as POM using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
									+convert(varchar,@RetailPriceExcludePPN)+ ''',''' +convert(varchar,@PPNBeforeDisc)+ 
									''',''0'',''' +convert(varchar,@RetailPriceIncludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' +convert(varchar,@DiscPriceIncludePPN)+
									''',''' +convert(varchar,@NetSalesExcludePPN)+ ''',''' +convert(varchar,@PPNAfterDisc)+
									''',''0'',''' +convert(varchar,@NetSalesIncludePPN)+ ''',''' +convert(varchar,@PPNBMPaid)+
									''',''0'',''0'',1,1,''' +@SONo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
								NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, NewBeforeDiscTotal, 
								NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, 
								NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, 
								NewOthersPPn, NewQuantityPO, NewQuantityBPU, NewRemark, NewCreatedBy, 
								NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on POM.CompanyCode    = SRC.NewCompany
					   and POM.BranchCode     = SRC.NewBranch
					   and POM.PONo           = SRC.NewPONo
					   and POM.SalesModelCode = SRC.NewSalesModelCode
					   and POM.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityPO     = QuantityPO  + SRC.NewQuantityPO
						                 , QuantityBPU    = QuantityBPU + SRC.NewQuantityBPU
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, SalesModelCode, SalesModelYear, 
										BeforeDiscDPP, BeforeDiscPPn, BeforeDiscPPnBM, BeforeDiscTotal, 
										DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, AfterDiscPPn, 
										AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, 
										OthersPPn, QuantityPO, QuantityBPU, Remark, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
										NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, NewBeforeDiscTotal, 
										NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, 
										NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, 
										NewOthersPPn, NewQuantityPO, NewQuantityBPU, NewRemark, NewCreatedBy, 
										NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchasePOModelColour
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchasePOModelColour as POC using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''' +@curColourCode+ ''',1,''' +@curDocNo+ ''','''+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
									''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, NewColourCode, 
								NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on POC.CompanyCode    = SRC.NewCompany
					   and POC.BranchCode     = SRC.NewBranch
					   and POC.PONo           = SRC.NewPONo
					   and POC.SalesModelCode = SRC.NewSalesModelCode
					   and POC.SalesModelYear = SRC.NewSalesModelYear
					   and POC.ColourCode     = SRC.NewColourCode
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, SalesModelCode, SalesModelYear, ColourCode, 
										Quantity, Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewSalesModelCode, NewSalesModelYear, 
										NewColourCode, NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModel as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''
									+@curChassisCode+ ''','''+convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@PPNBeforeDisc)+ ''',''0'',''' 
									+convert(varchar,@RetailPriceIncludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceIncludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',''0'',''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''',''0'',''0'',1,1,''' 
									+@curDocNo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ ''',0,0,0))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
								NewChassisCode, NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, 
								NewBeforeDiscTotal, NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, 
								NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, NewOthersDPP, 
								NewOthersPPn, NewQuantitySO, NewQuantityDO, NewRemark, NewCreatedBy, 
								NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
								NewDepositAmt, NewOthersAmt)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantitySO     = QuantitySO + SRC.NewQuantitySO
						                 , QuantityDO     = QuantityDO + SRC.NewQuantityDO
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, 
										ChassisCode, BeforeDiscDPP, BeforeDiscPPn, BeforeDiscPPnBM, 
										BeforeDiscTotal, DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, 
										AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, OthersDPP, 
										OthersPPn, QuantitySO, QuantityDO, Remark, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate, ShipAmt, 
										DepositAmt, OthersAmt)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
										NewChassisCode, NewBeforeDiscDPP, NewBeforeDiscPPn, NewBeforeDiscPPnBM, 
										NewBeforeDiscTotal, NewDiscExcludePPn, NewDiscIncludePPn, NewAfterDiscDPP, 
										NewAfterDiscPPn, NewAfterDiscPPnBM, NewAfterDiscTotal, NewOthersDPP, 
										NewOthersPPn, NewQuantitySO, NewQuantityDO, NewRemark, NewCreatedBy, 
										NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
										NewDepositAmt, NewOthersAmt);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModelColour
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModelColour as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''' +@curColourCode+ ''',1,''' +@curDocNo+ ''','''+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
									''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, NewColourCode, 
								NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					   and SO.ColourCode     = SRC.NewColourCode
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, ColourCode, 
										Quantity, Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, NewSalesModelYear, 
										NewColourCode, NewQuantity, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOVin
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesSOVin
										(CompanyCode, BranchCode, SONo, SalesModelCode, SalesModelYear, 
									     ColourCode, SOSeq, ChassisCode, ChassisNo, EngineCode, EngineNo, 
										 ServiceBookNo, KeyNo, EndUserName, EndUserAddress1, EndUserAddress2, 
										 EndUserAddress3, SupplierBBN, CityCode, BBN, KIR, Remark, StatusReq, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
								         +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
										 ''',''' +@curColourCode+ ''',''' +Convert(varchar,@SeqNo)+ ''','''
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''',''' 
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' +@EndUserName+ ''',''' 
										 +@EndUserAddress1+ ''',''' +@EndUserAddress2+ ''','''
										 +@EndUserAddress3+ ''',NULL,''' +@CityCode+ ''',0,0,NULL,0,''' 
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''','''
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesSOModelAdditional
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesSOModelAdditional as SO using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@SONo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',''A'',NULL,NULL,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewSONo, NewSalesModelCode, 
								NewSalesModelYear, NewStatusVehicle, NewOthersBrand, NewOthersType, 
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on SO.CompanyCode    = SRC.NewCompany
					   and SO.BranchCode     = SRC.NewBranch
					   and SO.SONo           = SRC.NewSONo
					   and SO.SalesModelCode = SRC.NewSalesModelCode
					   and SO.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, SONo, SalesModelCode, 
										SalesModelYear, StatusVehicle, OthersBrand, OthersType, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewSONo, NewSalesModelCode, 
										NewSalesModelYear, NewStatusVehicle, NewOthersBrand, NewOthersType, 
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesDODetail
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesDODetail
										(CompanyCode, BranchCode, DONo, DOSeq, SalesModelCode, SalesModelYear, 
									     ChassisCode, ChassisNo, EngineCode, EngineNo, ColourCode, Remark, 
										 StatusBPK, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@DONo+ ''',''' 
								         +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curChassisCode+ 
										 ''',''' +convert(varchar,@curChassisNo)+ ''',''' +@curEngineCode+ 
										 ''',''' +convert(varchar,@curEngineNo)+ ''',''' +@curColourCode+ 
										 ''',NULL,''1'',''' +@curCreatedBy+ ''',''' 
										 +convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ 
										 ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesBPKModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesBPKModel as BPK using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,1,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewBPKNo, NewSalesModelCode, 
								NewSalesModelYear, NewQuantityBPK, NewQuantityInvoice,
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on BPK.CompanyCode    = SRC.NewCompany
					   and BPK.BranchCode     = SRC.NewBranch
					   and BPK.BPKNo           = SRC.NewBPKNo
					   and BPK.SalesModelCode = SRC.NewSalesModelCode
					   and BPK.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityBPK     = QuantityBPK     + SRC.NewQuantityBPK
						                 , QuantityInvoice = QuantityInvoice + SRC.NewQuantityInvoice
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, BPKNo, SalesModelCode, 
										SalesModelYear, QuantityBPK, QuantityInvoice, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewBPKNo, NewSalesModelCode, 
										NewSalesModelYear, NewQuantityBPK, NewQuantityInvoice,
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesBPKDetail
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesBPKDetail
										(CompanyCode, BranchCode, BPKNo, BPKSeq, SalesModelCode, SalesModelYear, 
									     ChassisCode, ChassisNo, EngineCode, EngineNo, ColourCode, ServiceBookNo,
										 KeyNo, ReqOutNo, Remark, StatusPDI, StatusInvoice, 
										 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@BPKNo+ ''',''' 
								         +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curChassisCode+ 
										 ''',''' +convert(varchar,@curChassisNo)+ ''',''' +@curEngineCode+ 
										 ''',''' +convert(varchar,@curEngineNo)+ ''',''' +@curColourCode+ 
										 ''',''' +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',NULL,NULL,''0'',''1'','''
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
										 +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceBPK
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesInvoiceBPK as INV using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' 
									+@INVNo+ ''',''' +@BPKNo+ ''',NULL,''' 
									+@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' 
									+@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewRemark,
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on INV.CompanyCode    = SRC.NewCompany
					   and INV.BranchCode     = SRC.NewBranch
					   and INV.InvoiceNo      = SRC.NewInvoiceNo
					   and INV.BPKNo		  = SRC.NewBPKNo
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, InvoiceNo, BPKNo, Remark, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewRemark,
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceModel
				set @sqlString = 'merge into ' +@DBNameMD+ '..omTrSalesInvoiceModel as INV using (values(''' 
									+@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ ''',''' 
									+@BPKNo+ ''',''' +@curSalesModelCode+ ''',''' 
									+convert(varchar,@curSalesModelYear)+ ''',1,'''
									+convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceIncludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',''0'',''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''','''
									+convert(varchar,@PPNBMPaid) + ''',0,0,0,'''
									+@curDocNo+ ''',''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ ''',0,0,0))
					    as SRC (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewSalesModelCode, 
								NewSalesModelYear, NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, 
								NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, NewAfterDiscPPnBM, 
								NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn, 
								NewQuantityReturn, NewRemark, NewCreatedBy, NewCreatedDate, 
								NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
								NewDepositAmt, NewOthersAmt)
						on INV.CompanyCode    = SRC.NewCompany
					   and INV.BranchCode     = SRC.NewBranch
					   and INV.InvoiceNo      = SRC.NewInvoiceNo
					   and INV.BPKNo		  = SRC.NewBPKNo
					   and INV.SalesModelCode = SRC.NewSalesModelCode
					   and INV.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set Quantity       = Quantity + SRC.NewQuantity
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, SalesModelYear, 
										Quantity, BeforeDiscDPP,  DiscExcludePPn, DiscIncludePPn, AfterDiscDPP, 
										AfterDiscPPn, AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, 
										OthersPPn, QuantityReturn, Remark, CreatedBy, CreatedDate, 
										LastUpdateBy, LastUpdateDate, ShipAmt, DepositAmt, OthersAmt)
								values (NewCompany, NewBranch, NewInvoiceNo, NewBPKNo, NewSalesModelCode, 
										NewSalesModelYear, NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, 
										NewDiscIncludePPn, NewAfterDiscDPP, NewAfterDiscPPn, NewAfterDiscPPnBM, 
										NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn, 
										NewQuantityReturn, NewRemark, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate, NewShipAmt, 
										NewDepositAmt, NewOthersAmt);'
					execute sp_executesql @sqlString

			 -- MD: Insert data to table omTrSalesInvoiceVIN
				set @sqlString = 'insert into ' +@DBNameMD+ '..omTrSalesInvoiceVIN
										(CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, 
										 SalesModelYear, InvoiceSeq, ColourCode, ChassisCode, ChassisNo,
										 EngineCode, EngineNo, COGS, IsReturn, CreatedBy, CreatedDate, 
										 LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyMD+ ''',''' +@curBranchMD+ ''',''' +@INVNo+ ''',''' +@BPKNo+ ''',''' 
										 +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''','''  
										 +convert(varchar,@SeqNo)+ ''',''' +convert(varchar,@curColourCode)+ ''',''' 
										 +convert(varchar,@curChassisCode)+ ''',''' +convert(varchar,@curChassisNo)+ 
										 ''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
										 +convert(varchar,@VehCOGS)+ ''',0,''' +@curCreatedBy+ ''',''' 
										 +convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
										 +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString


			 -- SD: Insert data to table omTrPurchaseBPUDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseBPUDetailModel as BPU using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' 
									+@BPUNo+ ''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,1,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewPONo, NewBPUNo, NewSalesModelCode, NewSalesModelYear, NewQuantityBPU, 
								NewQuantityHPP, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on BPU.CompanyCode    = SRC.NewCompany
					   and BPU.BranchCode     = SRC.NewBranch
					   and BPU.PONo           = SRC.NewPONo
					   and BPU.BPUNo		  = SRC.NewBPUNo
					   and BPU.SalesModelCode = SRC.NewSalesModelCode
					   and BPU.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set QuantityBPU    = QuantityBPU + SRC.NewQuantityBPU
										 , QuantityHPP    = QuantityHPP + SRC.NewQuantityHPP
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, PONo, BPUNo, SalesModelCode, SalesModelYear, QuantityBPU, 
										QuantityHPP, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewPONo, NewBPUNo, NewSalesModelCode, NewSalesModelYear, NewQuantityBPU, 
										NewQuantityHPP, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
							
			 -- SD: Insert data to table omTrPurchaseBPUDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseBPUDetail 
										(CompanyCode, BranchCode, PONo, BPUNo, BPUSeq, SalesModelCode, SalesModelYear, ColourCode,
										 ChassisCode, ChassisNo, EngineCode, EngineNo, ServiceBookNo, KeyNo, Remark, StatusSJRel,
										 SJRelNo, SJRelDate, SJRelReff, SJRelReffDate, StatusDORel, DORelNo, DORelDate, StatusHPP,
										 isReturn, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@PONo+ ''',''' +@BPUNo+ ''','''
										 +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +@curColourCode+ ''','''
										 +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ ''','''
										 +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''','''
										 +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' +@curDocNo+ 
										 ''',0,NULL,NULL,NULL,NULL,0,NULL,NULL,1,0,'''
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+''')'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseHPPDetail
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseHPPDetail as HPP using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' 
									+@BPUNo+ ''',NULL,''' +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewRemark, 
								NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on HPP.CompanyCode = SRC.NewCompany
					   and HPP.BranchCode  = SRC.NewBranch
					   and HPP.HPPNo       = SRC.NewHPPNo
					   and HPP.BPUNo	   = SRC.NewBPUNo
					  when matched 
						   then update set LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, HPPNo, BPUNo, Remark,
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewRemark, 
										NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString
							
			 -- SD: Insert data to table omTrPurchaseHPPDetailModel
				set @sqlString = 'merge into ' +@DBName+ '..omTrPurchaseHPPDetailModel as HPP using (values(''' 
									+@curCompanyCode+ ''',''' +@CentralBranch+ ''',''' +@HPPNo+ ''',''' +@BPUNo+ 
									''',''' +@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ 
									''',1,''' +convert(varchar,@RetailPriceExcludePPN)+ ''',''' 
									+convert(varchar,@DiscPriceExcludePPN)+ ''',''' 
									+convert(varchar,@NetSalesExcludePPN)+ ''',''' 
									+convert(varchar,@PPNAfterDisc)+ ''',0,''' 
									+convert(varchar,@NetSalesIncludePPN)+ ''',''' 
									+convert(varchar,@PPnBMPaid)+ ''',0,0,NULL,''' +@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' +@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ '''))
					    as SRC (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewSalesModelCode, NewSalesModelYear,
								NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, NewAfterDiscPPn,
								NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn,
								NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate)
						on HPP.CompanyCode    = SRC.NewCompany
					   and HPP.BranchCode     = SRC.NewBranch
					   and HPP.HPPNo          = SRC.NewHPPNo
					   and HPP.BPUNo	      = SRC.NewBPUNo
					   and HPP.SalesModelCode = SRC.NewSalesModelCode
					   and HPP.SalesModelYear = SRC.NewSalesModelYear
					  when matched 
						   then update set Quantity       = Quantity + 1
										 , LastUpdateBy   = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, HPPNo, BPUNo, SalesModelCode, SalesModelYear,
										Quantity, BeforeDiscDPP, DiscExcludePPn, AfterDiscDPP, AfterDiscPPn,
										AfterDiscPPnBM, AfterDiscTotal, PPnBMPaid, OthersDPP, OthersPPn,
										Remark, CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								values (NewCompany, NewBranch, NewHPPNo, NewBPUNo, NewSalesModelCode, NewSalesModelYear,
										NewQuantity, NewBeforeDiscDPP, NewDiscExcludePPn, NewAfterDiscDPP, NewAfterDiscPPn,
										NewAfterDiscPPnBM, NewAfterDiscTotal, NewPPnBMPaid, NewOthersDPP, NewOthersPPn,
										NewRemark, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate);'
					execute sp_executesql @sqlString

			 -- SD: Insert data to table omTrPurchaseHPPSubDetail
				set @sqlString = 'insert into ' +@DBName+ '..omTrPurchaseHPPSubDetail
										(CompanyCode, BranchCode, HPPNo, BPUNo, HPPSeq, SalesModelCode, SalesModelYear,
										ColourCode, ChassisCode, ChassisNo, EngineCode, EngineNo, Remark, isReturn, 
										CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
								  values(''' +@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' +@HPPNo+ ''',''' 
										 +@BPUNo+ ''',''' +convert(varchar,@SeqNo)+ ''',''' +@curSalesModelCode+ ''',''' 
										 +convert(varchar,@curSalesModelYear)+ ''',''' +convert(varchar,@curColourCode)+ 
										 ''',''' +convert(varchar,@curChassisCode)+ ''',''' +convert(varchar,@curChassisNo)+ 
										 ''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',NULL,0,''' 
										 +@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ ''',''' +
										 @curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+ ''')'
					execute sp_executesql @sqlString

/*				
			 -- SD: Insert data to table omTrPurchaseReturn
			 -- SD: Insert data to table omTrPurchaseReturnDetail
			 -- SD: Insert data to table omTrPurchaseReturnDetailModel
			 -- SD: Insert data to table omTrPurchaseReturnSubDetail

			 -- MD: Insert data to table omTrSalesReturn
			 -- MD: Insert data to table omTrSalesReturnBPK
			 -- MD: Insert data to table omTrSalesReturnDetailModel
			 -- MD: Insert data to table omTrSalesReturnVIN

			USE POSTING JOURNAL IN UTILITY SALES MODULE 
			FOR UPDATE DATA TO TABLE ARINTERFACE & GLINTERFACE
			 -- MD: Update data to table arInterface
			 -- MD: Update data to table glInterface
			 -- SD: Update data to table apInterface
			 -- SD: Update data to table glInterface
*/

			 -- MD: Update data to table omMstVehicle
				set @sqlString = 'update ' +@DBNameMD+ '..omMstVehicle
										set SONo='''+@SONo+ ''', SOReturnNo='''+@RTNNo+ ''', DONo='''+@DONo+ ''', BPKNo='''
											+@BPKNo+ ''', InvoiceNo='''+@INVNo+ ''', TransferOutNo='''+@VTONo+ 
											''', TransferInNo='''+@VTINo+ ''', BPKDate='''+convert(varchar,@curDocDate,121)+
									''' where CompanyCode='''+@curCompanyMD+''' and ChassisCode='''
											+@curChassisCode+ ''' and ChassisNo='+convert(varchar,@curChassisNo)
					execute sp_executesql @sqlString

			 -- SD: Insert / Update data to table omMstVehicle
				set @sqlString = 'merge into ' +@DBName+ '..omMstVehicle as VEH using (values(''' 
									+@curCompanyCode+ ''',''' +@curChassisCode+ ''',''' +convert(varchar,@curChassisNo)+ 
									''',''' +@curEngineCode+ ''',''' +convert(varchar,@curEngineNo)+ ''',''' 
									+@curSalesModelCode+ ''',''' +convert(varchar,@curSalesModelYear)+ ''',''' 
									+@curColourCode+ ''',''' +@VehServiceBookNo+ ''',''' +@VehKeyNo+ ''',''' 
									+convert(varchar,@VehCOGS)+ ''',''' +convert(varchar,@VehCOGSOthers)+ ''',''' 
									+convert(varchar,@VehCOGSKaroseri)+ ''',''' +convert(varchar,@VehPpnBMBuyPaid)+ 
									''',''' +convert(varchar,@VehPpnBmBuy)+ ''',''' +convert(varchar,@VehSalesNetAmt)+ 
									''',''' +convert(varchar,@VehPpnBmSellPaid)+ ''',''' +convert(varchar,@VehPpnBmSell)+ 
									''',''' +@PONo+ ''',''' +@RTPNo+ ''',''' +@BPUNo+ ''',''' +@HPPNo+ ''',NULL,NULL,'''
									+@VehSONo+ ''',''' +@VehRTNNo+ ''',''' +@VehDONo+ ''',''' +@VehBPKNo+ ''','''
									+@VehINVNo+ ''',''' +@VehREQNo+ ''',''' +@VehVTONo+ 
									''',''' +@VehVTINo+ ''',''' +@WHSD+ ''',''' +@VehINVNo+ ''',''6'',0,''' 
									+convert(varchar,@curDocDate,121)+ ''',''' +@vEHFakturPolisiNo+ ''','''
									+convert(varchar,@VehFakturPolisiDate,121)+ ''',NULL,NULL,1,0,1,'''
									+@curCreatedBy+ ''',''' +convert(varchar,@curCreatedDate,121)+ 
									''',''' +@curLastUpdateBy+ ''',''' +convert(varchar,@curLastUpdateDate,121)+
									''',0,NULL,NULL,0,''' +convert(varchar,@curDocDate,121)+ ''','''
									+@VehSuzukiDONo+ ''',''' +convert(varchar,@VehSuzukiDODate,121)+ ''','''
									+@VehSuzukiSJNo+ ''',''' +convert(varchar,@VehSuzukiSJDate,121)+ ''',NULL,NULL))
					    as SRC (NewCompany, NewChassisCode, NewChassisNo, NewEngineCode, NewEngineNo, 
								NewSalesModelCode, NewSalesModelYear, NewColourCode, NewServiceBookNo, 
								NewKeyNo, NewCOGSUnit, NewCOGSOthers, NewCOGSKaroseri, NewPpnBMBuyPaid, 
								NewPpnBmBuy, NewSalesNetAmt, NewPpnBmSellPaid, NewPpnBmSell, NewPONo, 
								NewPOReturnNo, NewBPUNo, NewHPPNo, NewKaroseriSPKNo, NewKaroseriTerimaNo, 
								NewSONo, NewSOReturnNo, NewDONo, NewBPKNo, NewInvoiceNo, NewReqOutNo, 
								NewTransferOutNo, NewTransferInNo, NewWarehouseCode, NewRemark, NewStatus, 
								NewIsAlreadyPDI, NewBPKDate, NewFakturPolisiNo, NewFakturPolisiDate, 
								NewPoliceRegistrationNo, NewPoliceRegistrationDate, NewIsProfitCenterSales, 
								NewIsProfitCenterService, NewIsActive, NewCreatedBy, NewCreatedDate, 
								NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate, 
								NewIsNonRegister, NewBPUDate, NewSuzukiDONo, NewSuzukiDODate, NewSuzukiSJNo, 
								NewSuzukiSJDate, NewTransferOutMultiBranchNo, NewTransferInMultiBranchNo)
						on VEH.CompanyCode = SRC.NewCompany
					   and VEH.ChassisCode = SRC.NewChassisCode
					   and VEH.ChassisNo   = SRC.NewChassisNo
					  when matched
						   then update set PONO				= isnull(@PONo,'')
										 , POReturnNo		= isnull(@RTPNo,'')
										 , BPUNo			= isnull(@BPUNo,'')
										 , HPPNo			= isnull(@HPPNo,'')
										 , SONo             = isnull(@VehSONo,'')
										 , SOReturnNo       = isnull(@VehRTNNo,'')
										 , DONo		        = isnull(@VehDONo,'')
										 , BPKNo            = isnull(@VehBPKNo,'')
										 , InvoiceNo        = isnull(@VehINVNo,'')
										 , TransferOutNo    = isnull(@VehVTONo,'')
										 , TransferInNo     = isnull(@VehVTINo,'')
										 , BPKDate		    = isnull(@VehBPKDate,'')
										 , BPUDate			= isnull(@VehBPUDate,'')
										 , SuzukiDONo       = isnull(@VehSuzukiDONo,'')
										 , SuzukiDODate     = isnull(@VehSuzukiDODate,'')
										 , SuzukiSJNo       = isnull(@VehSuzukiSJNo,'')
										 , SuzukiSJDate     = isnull(@VehSuzukiSJDate,'')
										 , FakturPolisiNo   = isnull(FakturPolisiNo,@VehFakturPolisiNo)
										 , FakturPolisiDate = isnull(FakturPolisiDate,@VehFakturPolisiDate)
						                 , QuantityInvoice = QuantityInvoice + isnull(SRC.NewQuantityInvoice,0)
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, ChassisCode, ChassisNo, EngineCode, EngineNo, SalesModelCode, 
										SalesModelYear, ColourCode, ServiceBookNo, KeyNo, COGSUnit, COGSOthers, 
										COGSKaroseri, PpnBMBuyPaid, PpnBmBuy, SalesNetAmt, PpnBmSellPaid, PpnBmSell,
										PONo, POReturnNo, BPUNo, HPPNo, KaroseriSPKNo, KaroseriTerimaNo, SONo, 
										SOReturnNo, DONo, BPKNo, InvoiceNo, ReqOutNo, TransferOutNo, TransferInNo,
										WarehouseCode, Remark, Status, IsAlreadyPDI, BPKDate, FakturPolisiNo, 
										FakturPolisiDate, PoliceRegistrationNo, PoliceRegistrationDate, 
										IsProfitCenterSales, IsProfitCenterService, IsActive, CreatedBy, CreatedDate, 
										LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate, IsNonRegister,
										BPUDate, SuzukiDONo, SuzukiDODate, SuzukiSJNo, SuzukiSJDate, 
										TransferOutMultiBranchNo, TransferInMultiBranchNo)
								values (NewCompany, NewChassisCode, NewChassisNo, NewEngineCode, NewEngineNo, 
										NewSalesModelCode, NewSalesModelYear, NewColourCode, NewServiceBookNo, 
										NewKeyNo, NewCOGSUnit, NewCOGSOthers, NewCOGSKaroseri, NewPpnBMBuyPaid, 
										NewPpnBmBuy, NewSalesNetAmt, NewPpnBmSellPaid, NewPpnBmSell, NewPONo, 
										NewPOReturnNo, NewBPUNo, NewHPPNo, NewKaroseriSPKNo, NewKaroseriTerimaNo, 
										NewSONo, NewSOReturnNo, NewDONo, NewBPKNo, NewInvoiceNo, NewReqOutNo, 
										NewTransferOutNo, NewTransferInNo, NewWarehouseCode, NewRemark, NewStatus, 
										NewIsAlreadyPDI, NewBPKDate, NewFakturPolisiNo, NewFakturPolisiDate, 
										NewPoliceRegistrationNo, NewPoliceRegistrationDate, NewIsProfitCenterSales, 
										NewIsProfitCenterService, NewIsActive, NewCreatedBy, NewCreatedDate, 
										NewLastUpdateBy, NewLastUpdateDate, NewIsLocked, NewLockedBy, NewLockedDate, 
										NewIsNonRegister, NewBPUDate, NewSuzukiDONo, NewSuzukiDODate, NewSuzukiSJNo, 
										NewSuzukiSJDate, NewTransferOutMultiBranchNo, NewTransferInMultiBranchNo);'
					execute sp_executesql @sqlString

			 -- SD: Insert / Update data to table omTrInventQtyVehicle
				set @sqlString = 'merge into ' +@DBName+ '..omTrInventQtyVehicle as VEH using (values(''' 
									+@curCompanyCode+ ''',''' +@curBranchCode+ ''',''' 
									+convert(varchar,year(@curDocDate))+ ''',''' 
									+convert(varchar,month(@curDocDate))+  ''',''' 
									+@curSalesModelCode+ ''',''' 
									+convert(varchar,@curSalesModelYear)+ ''',''' 
									+@curColourCode+ ''',''' +@WHSD+ 
									''',1,0,1,0,0,0,0,NULL,1,''' 
									+@curCreatedBy+ ''',''' 
									+convert(varchar,@curCreatedDate,121)+ ''',''' 
									+@curLastUpdateBy+ ''',''' 
									+convert(varchar,@curLastUpdateDate,121)+ 
									''',0,NULL,NULL))
					    as SRC (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
								NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
								NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
								NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
								NewIsLocked, NewLockedBy, NewLockedDate)
						on VEH.CompanyCode    = SRC.NewCompany
					   and VEH.BranchCode	  = SRC.NewBranch
					   and VEH.Year			  = SRC.NewYear
					   and VEH.Month		  = SRC.NewMonth
					   and VEH.SalesModelCode = SRC.NewSalesModelCode
					   and VEH.SalesModelYear = SRC.NewSalesModelYear 
					   and VEH.ColourCode	  = SRC.NewColourCode
					   and VEH.WarehouseCode  = SRC.NewWarehouseCode
					  when matched
						   then update set QtyIn  = QtyIn  + SRC.NewQtyIn
										 , QtyOut = QtyOut + SRC.NewQtyOut
										 , LastUpdateBy    = ''' +@curLastUpdateBy+ '''
										 , LastUpdateDate  = ''' +convert(varchar,@curLastUpdateDate,121)+ '''
					  when not matched by target 
						   then insert (CompanyCode, BranchCode, Year, Month, SalesModelCode, SalesModelYear, 
										ColourCode, WarehouseCode, QtyIn, Alocation, QtyOut, BeginningOH, 
										EndingOH, BeginningAV, EndingAV, Remark, Status, CreatedBy, 
										CreatedDate, LastUpdateBy, LastUpdateDate, IsLocked, LockedBy, LockedDate)
								values (NewCompany, NewBranch, NewYear, NewMonth, NewSalesModelCode, 
										NewSalesModelYear, NewColourCode, NewWarehouseCode, NewQtyIn, NewAlocation, 
										NewQtyOut, NewBeginningOH, NewEndingOH, NewBeginningAV, NewEndingAV, NewRemark, 
										NewStatus, NewCreatedBy, NewCreatedDate, NewLastUpdateBy, NewLastUpdateDate, 
										NewIsLocked, NewLockedBy, NewLockedDate);'
					execute sp_executesql @sqlString

			 -- SD: insert omMstVehicleTemp

   			 -- Update Daily Posting Process Status
				update omSDMovement
				   set ProcessStatus=1
				     , ProcessDate  =@CurrentDate
					where CompanyCode=@curCompanyCode
					  and BranchCode =@curBranchCode
					  and DocNo      =@curDocNo
					  and DocDate    =@curDocDate
					  and Seq        =@curSeq

			 -- Read next record
				fetch next from curomSDMovement
					  into  @curCompanyCode, @curBranchCode, @curDocNo, @curDocDate, @curSeq, @curSalesModelCode,
							@curSalesModelYear, @curChassisCode, @curChassisNo, @curEngineCode, @curEngineNo, 
							@curColourCode, @curWarehouseCode, @curCustomerCode, @curQtyFlag, @curCompanyMD, 
							@curBranchMD, @curWarehouseMD, @curStatus, @curProcessStatus, @curProcessDate, 
							@curCreatedBy, @curCreatedDate, @curLastUpdateBy, @curLastUpdateDate
			end 

	 -- Move data which already processed from table omSDMovement to table omHstSDMovement
	    if not exists (select * from sys.objects where object_id = object_id(N'[dbo].[omHstSDMovement]') and type in (N'U'))
			CREATE TABLE [dbo].[omHstSDMovement](
				[CompanyCode] [varchar](15) NOT NULL,
				[BranchCode] [varchar](15) NOT NULL,
				[DocNo] [varchar](15) NOT NULL,
				[DocDate] [datetime] NOT NULL,
				[Seq] [int] NOT NULL,
				[SalesModelCode] [varchar](20) NOT NULL,
				[SalesModelYear] [numeric](4, 0) NOT NULL,
				[ChassisCode] [varchar](15) NOT NULL,
				[ChassisNo] [numeric](10, 0) NOT NULL,
				[EngineCode] [varchar](15) NOT NULL,
				[EngineNo] [numeric](10, 0) NOT NULL,
				[ColourCode] [varchar](15) NOT NULL,
				[WarehouseCode] [varchar](15) NOT NULL,
				[CustomerCode] [varchar](15) NOT NULL,
				[QtyFlag] [char](1) NOT NULL,
				[CompanyMD] [varchar](15) NOT NULL,
				[BranchMD] [varchar](15) NOT NULL,
				[WarehouseMD] [varchar](15) NOT NULL,
				[Status] [char](1) NOT NULL,
				[ProcessStatus] [char](1) NOT NULL,
				[ProcessDate] [datetime] NOT NULL,
				[CreatedBy] [varchar](15) NOT NULL,
				[CreatedDate] [datetime] NOT NULL,
				[LastUpdateBy] [varchar](15) NOT NULL,
				[LastUpdateDate] [datetime] NOT NULL)
			
		insert into omHstSDMovement (CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate)
							 select  CompanyCode, BranchCode, DocNo, DocDate, Seq, SalesModelCode,
								     SalesModelYear, ChassisCode, ChassisNo, EngineCode, EngineNo,
									 ColourCode, WarehouseCode, CustomerCode, QtyFlag, CompanyMD, 
									 BranchMD, WarehouseMD, Status, ProcessStatus, ProcessDate,
									 CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate
							   from  omSDMovement
							  where	 ProcessStatus = 1
                              -- or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		delete omSDMovement   where	 ProcessStatus = 1
                              -- or  convert(varchar,DocDate,111)<=convert(varchar,@PostingDate,111)

		close curomSDMovement
		deallocate curomSDMovement

END
GO
create procedure [dbo].[uspfn_AbExtractData]
	@FileID varchar(100),
	@FileContent varchar(max),
	@UserId varchar(25)
as
begin


	begin try
		declare c cursor for 
			select * from uspfn_AbSplitString(@FileContent, char(10))
		declare @Record varchar(100);
		declare @EmployeeID varchar(17);
		declare @AttendanceTime varchar(20);
		declare @MachineCode varchar(2);
		declare @IdentityCode varchar(1);
		declare @CurrentDate datetime;
		declare @CompanyCode varchar(17);
		declare @TrailingZeroIndex tinyint;
		set @CompanyCode = (
			select top 1
			       CompanyCode
			  from gnMstOrganizationHdr 
		);

		
		select * into #a 
	     from uspfn_AbSplitString(@FileContent, char(10)+char(13))

		declare @NumberOfIteratorRecords int;
		declare @NumberOfRecord int;
		set @NumberOfIteratorRecords = ( select count(*) from SimDmsIterator );
		set @NumberOfRecord = (select count(*) from #a);

		if @NumberOfIteratorRecords = 0
		begin
			insert into SimDmsIterator (AttendanceFlatFileExtractionProcessed, AttendanceFlatFileExtractionTotal)
			values (0, 100)
		end

		update SimDmsIterator
		   set AttendanceFlatFileExtractionProcessed = 0
		     , AttendanceFlatFileExtractionTotal = @NumberOfRecord
			 

		open c
			fetch next from c into @Record

			declare @iterator int;
			set @iterator=1;
			while @@FETCH_STATUS=0
			begin
				set @EmployeeID = substring(@Record, 0, 7);
				set @TrailingZeroIndex = ( select patindex('%[^0]%', @EmployeeID) );
				set @EmployeeID = substring(@EmployeeID, @TrailingZeroIndex, 8-@TrailingZeroIndex);
				set @AttendanceTime = substring(@Record, 8, 19);
				set @MachineCode = substring(@Record, 28, 1);
				set @IdentityCode = substring(@Record, 30, 1);
				
				--select @AttendanceTime as AttendanceTime;
				exec uspfn_AbInsertAttendanceData 
				     @CompanyCode = @CompanyCode
				   , @FileID = @FileID
				   , @Iterator = @Iterator
				   , @EmployeeID = @EmployeeID
				   , @AttendanceTime = @AttendanceTime
				   , @MachineCode = @MachineCode
				   , @IdentityCode = @IdentityCode
				   , @UserId = @UserID

				update SimDmsIterator 
				   set AttendanceFlatFileExtractionProcessed = @iterator	

				set @iterator = @iterator + 1;
				fetch next from c into @Record
			end
		close c
		deallocate c

		select Convert(bit, 1);
	end try
	begin catch
		select Convert(bit, 0);
	end catch
end
GO
CREATE procedure [dbo].[uspfn_CreditLimitView] @CompanyCode varchar(50), @BranchCode varchar(50), @ProfitCenterCode varchar(50), @customerCode varchar(50)
as
SELECT 
convert(varchar(50),(row_number() over(order by b.CustomerCode))) AS  Nomor,
d.LookUpValueName AS ProfitCenterCode,
b.CustomerCode, e.CustomerName,
convert(varchar(50),ISNULL(b.CreditLimit,0)) AS CreditLimit,
convert(varchar(50),ISNULL(c.SalesAmt, 0)) AS SalesAmt,
convert(varchar(50),ISNULL(c.ReceivedAmt,0)) AS ReceivedAmt,
convert(varchar(50),ISNULL(b.CreditLimit,0)-(ISNULL(c.SalesAmt, 0) - ISNULL(c.ReceivedAmt,0))) AS BalanceAmt,
convert(varchar(50),(ISNULL(c.SalesAmt, 0) - ISNULL(c.ReceivedAmt,0))) AS Credit,
ISNULL((Select LookUpValueName From GnMstlookUpDtl x where x.CompanyCode = b.CompanyCode AND x.LookUpValue = b.PaymentCode AND CodeID ='PYBY'),'-') AS PaymentBy
FROM gnMstCustomerProfitCenter b
LEFT JOIN GnTrnBankBook c  ON  c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode AND b.CustomerCode = c.CustomerCode AND c.ProfitCenterCode = b.ProfitCenterCode
LEFT JOIN GnMstlookUpDtl d ON  d.CompanyCode = b.CompanyCode AND d.CodeId = 'PFCN' AND b.ProfitCenterCode = d.LookUpValue
LEFT JOIN GnMstCustomer e  ON  e.CompanyCode = b.CompanyCode AND e.CustomerCode = b.CustomerCode 
WHERE 
b.CompanyCode = @CompanyCode AND b.BranchCode = @BranchCode AND b.ProfitCenterCode = @ProfitCenterCode 
and b.CustomerCode = case when isnull(@customerCode,'')='' then b.CustomerCode else @customerCode end
GO
CREATE procedure [dbo].[uspfn_omSlsInvLkpSO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS  
BEGIN  
-- exec uspfn_omSlsInvLkpSO 6006410,600641001
    SELECT tableA.SONo,tableA.QtyBPK,tableA.QtyInvoice, tableB.CustomerCode, tableB.CustomerName, tableB.BillTo, tableB.BillName,
				tableB.Address,tableB.SalesType,tableB.SalesTypeDsc,tableB.TOPDays, tableB.SKPKNo, tableB.RefferenceNo				
      FROM (SELECT a.SONo, sum (b.QuantityBPK)  AS QtyBPK, sum (b.QuantityInvoice)  AS QtyInvoice                   
              FROM omTrSalesBPK a, omTrSalesBPKModel b
             WHERE a.CompanyCode = b.CompanyCode
                   AND a.BranchCode = b.BranchCode
                   AND a.BPKNo = b.BPKNo
                   AND a.CompanyCode = @CompanyCode
                   AND a.BranchCode = @BranchCode
                   AND a.Status = '2'
             GROUP BY a.SONo) tableA,
           (SELECT a.SONo, a.CustomerCode, b.CustomerName, a.BillTo, b.CustomerName as BillName,
			b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address,a.SalesType
            , (CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'WholeSales' ELSE 'Direct' END) AS SalesTypeDsc
            , ISNULL(a.TOPDays, 0) AS TOPDays, a.SKPKNo, a.RefferenceNo
              FROM omTrSalesSO a
			  LEFT JOIN gnMstCustomer b ON a.CompanyCode = b.CompanyCode AND a.CustomerCode = b.CustomerCode
             WHERE a.CompanyCode = @CompanyCode
                   AND a.BranchCode = @BranchCode
                   AND a.Status = '2') tableB
    WHERE tableA.QtyBPK > tableA.QtyInvoice AND tableA.SONo = tableB.SONo AND tableA.SONo NOT IN (SELECT z.SONo FROM omTrSalesInvoice z)
    
	ORDER BY tableA.SONo
END
GO
create procedure [dbo].[uspfn_AbInsertAttendanceData]
	@CompanyCode varchar(25),
	@FileID varchar(80),
	@Iterator int,
	@EmployeeID varchar(17),
	@AttendanceTime varchar(19),
	@MachineCode varchar(2),
	@IdentityCode varchar(1),
	@UserID varchar(17)
as
begin
	declare @RowCount int;
	set @RowCount = (
		select COUNT(a.FileID)
		  from HrTrnAttendanceFileDtl a
		 where a.CompanyCode=@CompanyCode
		   and a.EmployeeID=@EmployeeID
		   and a.FileID=@FileID
		   and a.AttendanceTime=@AttendanceTime
	)

	if @RowCount = 0
	if not exists (
		select a.FileID
		  from HrTrnAttendanceFileDtl a
		 where a.CompanyCode=@CompanyCode
		   and a.EmployeeID=@EmployeeID
		   and a.FileID=@FileID
		   and a.AttendanceTime=@AttendanceTime
	)
	begin
		insert into HrTrnAttendanceFileDtl (
			  CompanyCode
			 , FileID
			 , GenerateId
			 , SequenceNo
			 , EmployeeID
			 , EmployeeName
			 , AttendanceTime
			 , MachineCode
			 , IdentityCode
			 , IsTransfered
			 , CreatedBy
			 , CreatedDate
			 , UpdatedBy
			 , UpdatedDate
			 , IsDeleted 
	    )
		select @CompanyCode
			 , @FileID
			 , NEWID()
			 , @Iterator
			 , @EmployeeID
			 , EmployeeName = (
					select top 1
						   EmployeeName
					  from HrEmployee x
					 where x.CompanyCode = @CompanyCode
					   and x.EmployeeID=@EmployeeID
			   )
			 , @AttendanceTime
			 , @MachineCode
			 , @IdentityCode
			 , 0
			 , @UserID
			 , getdate()
			 , @UserID
			 , getdate()		 
			 , 0
	end
end
GO
CREATE procedure [dbo].[sp_omMstModelPerlengkapan] @CompanyCode varchar(10), @BranchCode varchar(10), @SalesModelCode varchar(100)
 as

SELECT a.CompanyCode
		, a.BranchCode
		, a.SalesModelCode
		, a.PerlengkapanCode
		, b.PerlengkapanName
		, a.Quantity
		, a.Remark
		, CAST(a.Status AS bit) as [Status]

FROM omMstModelPerlengkapan a
LEFT JOIN omMstPerlengkapan b
	ON a.PerlengkapanCode = b.PerlengkapanCode
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
where a.CompanyCode=@CompanyCode and a.BranchCode = @BranchCode and SalesModelCode=@SalesModelCode
GO
CREATE procedure [dbo].[sp_omMstModelYear] @CompanyCode varchar(10) , @SalesModelCode varchar(100)
 as

SELECT CompanyCode, SalesModelCode, SalesModelYear, SalesModelDesc, ChassisCode, Remark, cast(Status AS bit) as [Status]
FROM omMstModelYear
where CompanyCode=@CompanyCode and SalesModelCode=@SalesModelCode
GO
CREATE procedure [dbo].[uspfn_BrowseParameter] @companycode varchar(50)
as
declare @BACKUP_DBNAME varchar(50),
@BACKUP_FILEEXT varchar(50),
@BACKUP_FILENAME varchar(50),
@BACKUP_FOLDERPATH varchar(50),
@DCS_URL varchar(50),
@TAX_URL varchar(50)
--declare @tblParam as table  (
--	DBName varchar(50),
--	Extensions varchar(50),
--	Prefix varchar(50),
--	FolderPath varchar(500),
--	DCSURL varchar(500),
--	TAXURL varchar(500)
--)

--insert @tblParam (DBName, Extensions, Prefix, FolderPath, DCSURL, TAXURL   )
set @BACKUP_DBNAME= (select ParamValue from sysParameter where ParamId='BACKUP_DBNAME')
set @BACKUP_FILEEXT= (select ParamValue from sysParameter where ParamId='BACKUP_FILEEXT')
set @BACKUP_FILENAME= (select ParamValue from sysParameter where ParamId='BACKUP_FILENAME')
set @BACKUP_FOLDERPATH= (select ParamValue from sysParameter where ParamId='BACKUP_FOLDERPATH')
set @DCS_URL= (select ParamValue from sysParameter where ParamId='DCS_URL')
set @TAX_URL= (select ParamValue from sysParameter where ParamId='TAX_URL')

if exists(Select companycode from sysParam ) begin
	update sysParam
	set dbname = @BACKUP_DBNAME, Extensions=@BACKUP_FILEEXT, Prefix=@BACKUP_FILENAME, FolderPath=@BACKUP_FOLDERPATH, DCSURL=@DCS_URL, TAXURL=@TAX_URL
	where companycode=@companycode
end else begin
	insert sysParam (CompanyCode, DBName, Extensions, Prefix, FolderPath, DCSURL, TAXURL)
	select  @companycode, @BACKUP_DBNAME, @BACKUP_FILEEXT, @BACKUP_FILENAME, @BACKUP_FOLDERPATH, @DCS_URL, @TAX_URL
end
select * from sysParam
GO
CREATE procedure [dbo].[sp_updateOmTrInventQtyVehicleSO]
	@companyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear varchar(25),
	@ColourCode varchar(25),
	@WarehouseCode varchar(25),
	@Quantity varchar,
	@UserId varchar(25)
as

begin
	declare @CountSOVin int;
	declare @CountSOModel int;
	--declare @Month int;
	--declare @Alocation int, @EndingOH int, @EndingAV int
	declare @dbMD varchar(25), @sqlStr varchar(max), @companyMD varchar(25),@branchMD varchar(25);
	
	set @dbMD =(select dbMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @companyMD = (select companyMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	set @branchMD = (select unitBranchMD from gnMstCompanyMapping where CompanyCode= @companyCode and BranchCode=@BranchCode)
	
	--set @Month = (select FiscalPeriod from BAT_UAT.dbo.gnMstCoProfileSales where companycode=@companyCode and BranchCode=@BranchCode)
	
	set @sqlStr = '
		declare @Month int, @Year int;
		declare @Alocation int, @EndingOH int, @EndingAV int;
		
		set @Month = (select Month(PeriodeBeg) from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')
		set @Year = (select Year(PeriodeBeg) from '+@dbMD+'.dbo.gnMstCoProfileSales where companycode= '''+@companyMD+''' and BranchCode='''+@branchMD+''')

		if exists (select * from '+@dbMD+'.dbo.OmTrInventQtyVehicle 
		where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' )
	begin
		set @Alocation = (select Alocation + '+@Quantity+' from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year )
        set @EndingOH = (select BeginningOH + QtyIn - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year)
        set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from '+@dbMD+'.dbo.OmTrInventQtyVehicle
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month =@Month and Year = @Year)
		
		if (@EndingAV < 0) select 1 as Status
		else begin
			update '+@dbMD+'.dbo.OmTrInventQtyVehicle
			set LastUpdateBy = '''+@userId+''', LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			where companycode='''+@companyMD+''' and BranchCode='''+@branchMD+''' and SalesModelCode = '''+@SalesModelCode+''' and SalesModelYear='+@SalesModelYear+' and ColourCode = '''+@ColourCode+''' and WarehouseCode = '''+@WarehouseCode+''' and Month = @Month and Year = @Year

			select 2 as Status
		end
	end
	else select 0 as Status
	'
	--if exists (select * from BAT_UAT.dbo.OmTrInventQtyVehicle 
		--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode )
	--begin
		--set @Alocation = (select Alocation + @Quantity from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingOH = (select BeginningOH + QtyIn - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
        --set @EndingAV = (select BeginningAV + QtyIn - Alocation - QtyOut from BAT_UAT.dbo.OmTrInventQtyVehicle
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month )
		
		--if (@EndingAV < 0) select 1 as Status
		--else begin
			--update BAT_UAT.dbo.OmTrInventQtyVehicle
			--set LastUpdateBy = @userId, LastUpdateDate =getdate(), Alocation = @Alocation, EndingAV =@EndingAV, EndingOH = @EndingOH
			--where companycode=@companyCode and BranchCode=@BranchCode and SalesModelCode = @SalesModelCode 
			--and SalesModelYear=@SalesModelYear and ColourCode =@ColourCode and WarehouseCode =@WarehouseCode and Month =@Month

			--select 2 as Status
		--end
	--end
	--else select 0 as Status
--select @sqlStr
exec(@sqlStr)
end
GO
CREATE procedure [dbo].[uspfn_GetNoLampiran] @CompanyCode varchar(15), @BranchCode varchar(15), 
@TypeOfGoods varchar(1), @ProductType varchar(2)
as
SELECT * FROM 
(
	-- SalesType = 2 (Service / SSS)
	SELECT
		a.LmpNo
		, a.LmpDate
		, c.DocNo
		, c.UsageDocNo
	FROM
		spTrnSLmpHdr a WITH(NOLOCK, NOWAIT)
		LEFT JOIN spTrnSLmpDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.LmpNo = b.LmpNo
		INNER JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
			AND a.BranchCode = c.BranchCode
			AND b.DocNo = c.DocNo
		INNER JOIN svTrnService d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
			AND a.BranchCode = d.BranchCode
			AND b.ProductType = d.ProductType 
			AND c.UsageDocNo = d.JobOrderNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.TypeOfGoods = @TypeOfGoods
		AND b.ProductType = @ProductType
		AND c.SalesType = '2'
		AND d.ServiceStatus < 5
		AND b.QtyBill - 
		ISNULL((
			SELECT SUM(ISNULL(QtyReturn, 0))
			FROM spTrnSRturSSDtl dtl WITH(NOLOCK, NOWAIT)
				LEFT JOIN spTrnSRturSSHdr hdr WITH(NOLOCK, NOWAIT) ON dtl.CompanyCode = hdr.CompanyCode
					AND dtl.BranchCode = hdr.BranchCode
					AND dtl.ReturnNo = hdr.ReturnNo 
			WHERE dtl.CompanyCode = a.CompanyCode
				AND dtl.BranchCode = a.BranchCode
				AND TypeOfGoods = a.TypeOfGoods
				AND ProductType = b.ProductType
				AND PartNo = b.PartNo
				AND PartNoOriginal = b.PartNoOriginal
				AND dtl.DocNo = b.DocNo
		), 0) > 0

	UNION

	-- SalesType = 3 (Unit / SSU)
	SELECT
		a.LmpNo
		, a.LmpDate
		, c.DocNo
		, c.UsageDocNo
	FROM
		spTrnSLmpHdr a WITH(NOLOCK, NOWAIT)
		LEFT JOIN spTrnSLmpDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.LmpNo = b.LmpNo
		INNER JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
			AND a.BranchCode = c.BranchCode
			AND b.DocNo = c.DocNo
		INNER JOIN omTrSalesSO d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
			AND a.BranchCode = d.BranchCode
			AND c.UsageDocNo = d.SONo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.TypeOfGoods = @TypeOfGoods
		AND b.ProductType = @ProductType
		AND c.SalesType = '3'
		AND d.Status IN ('2', '4')
		AND b.QtyBill - 
		ISNULL((
			SELECT SUM(ISNULL(QtyReturn, 0))
			FROM spTrnSRturSSDtl dtl WITH(NOLOCK, NOWAIT)
				LEFT JOIN spTrnSRturSSHdr hdr WITH(NOLOCK, NOWAIT) ON dtl.CompanyCode = hdr.CompanyCode
					AND dtl.BranchCode = hdr.BranchCode
					AND dtl.ReturnNo = hdr.ReturnNo 
			WHERE dtl.CompanyCode = a.CompanyCode
				AND dtl.BranchCode = a.BranchCode
				AND TypeOfGoods = a.TypeOfGoods
				AND ProductType = b.ProductType
				AND PartNo = b.PartNo
				AND PartNoOriginal = b.PartNoOriginal
				AND dtl.DocNo = b.DocNo
		), 0) > 0
) Lampiran
ORDER BY
	Lampiran.LmpNo DESC
GO
CREATE procedure [dbo].[uspfn_getBrowseEntryRtrPenjualan] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(5)
as
select	 a.CompanyCode, a.BranchCode,   a.ReturnNo, a.ReturnDate, a.FPJNo, b.FPJDate, a.ReferenceNo, a.ReferenceDate, a.CustomerCode
                from	    spTrnSRturHdr a
                left join  spTrnSFPJHdr b on
	                a.CompanyCode = b.CompanyCode
	                and a.BranchCode = b.BranchCode
	                and a.FPJNo = b.FPJNo
                where	    a.CompanyCode = @CompanyCode
                            and a.BranchCode = @BranchCode	
                            and a.FPJNo = b.FPJNo
                            and a.TypeOfGoods = @TypeOfGoods
                            and a.Status in ('0', '1')
                order by    a.ReturnNo desc
GO
CREATE PROCEDURE [dbo].[sp_Select4LookupCustomer] (@CompanyCode varchar(10) , @BranchCode varchar(10),
	@ProfitCenterCode varchar(10), @TOPC varchar(10))
AS
 SELECT TableA.CustomerCode, TableA.CustomerName, TableA.TopCode, TableA.TOPCD, TableA.GroupPriceCode, TableA.RefferenceDesc1 as GroupPriceDesc
  FROM    (SELECT a.CustomerCode, a.CustomerName, 
                  a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 as Address,
                  b.TOPCode + '||'
                  + (SELECT c.LookUpValueName
                  FROM gnMstLookUpDtl c
                  WHERE c.CodeID = @TOPC
                  AND c.LookUpValue = b.TOPCode)  AS TopCode, b.TOPCode  AS
                  TOPCD, b.CreditLimit, a.CompanyCode, b.BranchCode, b.
                  ProfitCenterCode, b.GroupPriceCode, c.RefferenceDesc1
             FROM gnMstCustomer a
            LEFT JOIN gnMstCustomerProfitCenter b ON b.CompanyCode = a.CompanyCode AND b.CustomerCode = a.CustomerCode
            LEFT JOIN omMstRefference c ON a.CompanyCode = c.CompanyCode AND c.RefferenceType = 'GRPR' AND c.RefferenceCode = b.GroupPriceCode
            WHERE a.CompanyCode = b.CompanyCode
                  AND a.CompanyCode = b.CompanyCode
                  AND b.CompanyCode = @CompanyCode
                  AND b.BranchCode = @BranchCode
                  AND b.ProfitCenterCode = @ProfitCenterCode
                  AND a.Status = '1'
                  AND b.SalesType = '0'
                  AND b.isBlackList = 0
                  AND b.CreditLimit > 0) TableA
       LEFT JOIN
          gnTrnBankBook c
       ON TableA.CompanyCode = c.CompanyCode
          AND TableA.BranchCode = c.BranchCode
          AND TableA.ProfitCenterCode = c.ProfitCenterCode
          AND TableA.CustomerCode = c.CustomerCode
 WHERE TableA.CreditLimit >
          (ISNULL (c.SalesAmt, 0) - ISNULL (c.ReceivedAmt, 0))
ORDER BY TableA.CustomerCode ASC
GO
CREATE procedure [dbo].[usprpt_PmRpInqFollowUpWeb2] 
(
	@CompanyCode		VARCHAR(15),
	@BranchCode			VARCHAR(15),
	@PeriodBegin		DATETIME,
	@PeriodEnd			DATETIME,
	@BranchManager		VARCHAR(15),
	@SalesHead			VARCHAR(15),
	@Salesman			VARCHAR(15)
)
AS 
BEGIN
SET NOCOUNT ON;
----

IF(@SalesHead ='' AND @Salesman ='')
BEGIN
	SELECT * INTO #empl1 FROM (
		--SH =ALL AND S=ALL
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.TeamLeader IN (SELECT b.EmployeeID FROM HrEmployee b WHERE b.TeamLeader IN
		(SELECT c.EmployeeID FROM HrEmployee c WHERE c.TeamLeader=@BranchManager))
	)#empl1

	SELECT * INTO #t1 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl1 g)

		UNION
	
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
		FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
			WHERE
				a.CompanyCode = @CompanyCode 
				AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>''OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
				AND a.LastProgress in ('P','HP','SPK')
	) #t1

	DROP TABLE #empl1
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t1 ORDER BY InquiryNumber
	DROP TABLE #t1

END
ELSE IF(@Salesman = '')
BEGIN
	SELECT * INTO #empl2 FROM (
		--S=ALL
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.TeamLeader IN (SELECT b.EmployeeID FROM HrEmployee b WHERE b.TeamLeader=@SalesHead)
	)#empl2

	SELECT * INTO #t2 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl2 g)
	) #t2

	DROP TABLE #empl2
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t2 ORDER BY InquiryNumber
	DROP TABLE #t2
END
ELSE
BEGIN
	SELECT * INTO #empl3 FROM (
		SELECT a.EmployeeID, a.Position, a.TeamLeader FROM HrEmployee a WHERE a.Department ='SALES'
		AND a.CompanyCode = @CompanyCode AND  
		a.EmployeeID=@Salesman
	)#empl3

	SELECT * INTO #t3 FROM (
		SELECT
			f.BranchName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
			a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
			c.EmployeeName Employee, d.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail
			FROM PmKDP a
		LEFT JOIN OmMstRefference b
			ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
		LEFT JOIN HrEmployee c
			ON c.CompanyCode = a.CompanyCode AND c.EmployeeID = a.EmployeeID
		LEFT JOIN HrEmployee d
			ON d.CompanyCode = a.CompanyCode AND d.EmployeeID = a.SpvEmployeeID
		LEFT JOIN PmActivities e
			ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
			AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
			AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
		LEFT JOIN gnMstOrganizationDtl f
			ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode
		WHERE
			a.CompanyCode = @CompanyCode 
			AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>'' OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
			AND e.NextFollowUpDate BETWEEN @PeriodBegin AND @PeriodEnd AND a.EmployeeID IN (SELECT g.EmployeeID FROM #empl3 g)
	) #t3

	DROP TABLE #empl3
	SELECT InquiryNumber, Pelanggan, InquiryDate, TipeKendaraan, Variant, Transmisi, Warna, PerolehanData,
	Employee, Supervisor, NextFollowUpDate, LastProgress, ActivityDetail FROM #t3 ORDER BY InquiryNumber
	DROP TABLE #t3
END
----
END
GO
CREATE procedure [dbo].[uspfn_GetSODetails] @CompanyCode varchar(15), @BranchCode varchar(15), @POSNo varchar(20)  
as   
SELECT   
    A.CompanyCode,  
    A.BranchCode,  
    A.POSNo,   
    A.SupplierCode,   
    B.PartNo,   
    B.OrderQty,   
    B.PurchasePrice,  
    B.CostPrice,   
    B.ABCClass,   
    B.MovingCode,   
    B.ProductType,  
    B.PartCategory,   
    A.TypeOfGoods,  
    B.DiscPct,  
    B.Note,  
    C.PartName,
    B.TotalAmount  
FROM spTrnPPOSHdr A   
INNER JOIN spTrnPPOSDtl B ON (A.CompanyCode = B.CompanyCode)  
    AND (A.BranchCode = B.BranchCode)  
    AND (A.POSNo = B.POSNo)  
left JOIN spMstItemInfo C  
on C.CompanyCode = B.CompanyCode  
and C.PartNo = B.PartNo  
WHERE A.CompanyCode = @CompanyCode  
    AND A.BranchCode = @BranchCode  
    AND A.POSNo = @POSNo
GO
CREATE procedure [dbo].[sp_RefferenceTypeLookup]  @CompanyCode varchar(10)
 as
SELECT DISTINCT  * 
FROM (
	SELECT distinct(a.RefferenceType)  AS RefferenceType
	FROM dbo.omMstRefference a
	WHERE a.CompanyCode = '6006410'
	UNION
	SELECT distinct(b.RefferenceCode)  AS RefferenceType
	FROM dbo.omMstRefference b
	WHERE b.CompanyCode = '6006410' AND b.RefferenceType = 'REFF'
	) tab
ORDER BY RefferenceType ASC
GO
CREATE procedure [dbo].[sp_PurchaseReturnBPULookup] @CompanyCode varchar(10) , @BranchCode varchar(100), @ReturnNo nvarchar(100), @HPPNo nvarchar(100)
 as

select a.BPUNo,a.BPUDate,a.SupplierCode + ' - ' + b.SupplierName AS SupplierCode
from omTrPurchaseBPU a
	left join gnMstSupplier b
		on a.CompanyCode = b.CompanyCode
		and a.SupplierCode = b.SupplierCode
	inner join omTrPurchaseHPPDetail c on a.CompanyCode=c.CompanyCode
		and a.BranchCode=c.BranchCode and c.HPPNo=@HPPNo and a.BPUNo=c.BPUNo
		where not exists (
		select 1 from omTrPurchaseReturnDetail
		where CompanyCode= a.CompanyCode
			and BranchCode= a.BranchCode
			and ReturnNo= @ReturnNo
			and BPUNo= a.BPUNo
	)
order by  BPUNo asc
GO
CREATE procedure [dbo].[uspfn_GetNoPartsReturnSS] @CompanyCode varchar(15), @BranchCode varchar(15),       
@ProductType varchar(5), @TypeOfGoods varchar(2), @DocNo varchar(25)      
as      
select distinct a.CompanyCode, a.BranchCode, a.DocNo, a.WarehouseCode, a.PartNo, a.PartNoOriginal, a.QtyBill as QtyLmp, a.DocNo,  
    c.LmpNo, c.LmpDate      
                from spTrnSLmpDtl a, spTrnSORDHdr b, spTrnSLmpHdr c with(nolock, nowait)      
                where a.CompanyCode = @CompanyCode      
                        and a.BranchCode = @BranchCode      
                        and b.CompanyCode = @CompanyCode      
                  and b.BranchCode = @BranchCode      
      and a.DocNo = b.DocNo       
      and b.Salestype IN ('2', '3')      
                  and c.CompanyCode = @CompanyCode      
                  and c.BranchCode = @BranchCode      
                        and a.LmpNo = c.LmpNo      
                        and a.LmpNo = @DocNo      
      and ProductType = @ProductType      
      and c.TypeOfGoods = @TypeOfGoods      
                        and (a.QtyBill -       
(select ISNULL(SUM (QtyReturn),0) AS MaxQtyRetur FROM spTrnSRturSSdtl      
            LEFT JOIN spTrnSRturSSHdr ON spTrnSRturSSHdr.ReturnNo = spTrnSRturSSdtl.ReturnNo AND      
                spTrnSRturSSHdr.CompanyCode = spTrnSRturSSdtl.CompanyCode AND      
                spTrnSRturSSHdr.BranchCode = spTrnSRturSSdtl.BranchCode      
            WHERE spTrnSRturSSdtl.CompanyCode = @CompanyCode      
                AND spTrnSRturSSdtl.BranchCode = @BranchCode      
                AND spTrnSRturSSHdr.DocNo = a.DocNo      
                AND spTrnSRturSSdtl.PartNo = a.PartNo       
                AND spTrnSRturSSdtl.PartNoOriginal = a.PartNoOriginal       
    AND spTrnSRturSSDtl.DocNo = a.DocNo       
                AND spTrnSRturSSHdr.Status = 2      
    AND ProductType = @ProductType      
    AND TypeOfGoods = @TypeOfGoods)) > 0
GO
Create procedure [dbo].[uspfn_GetAreaDealerOutlet] @companyCode varchar(50), @BranchCode varchar(50)
as
--declare @companyCode varchar(50)='', @BranchCode varchar(50)=''
select top 1 --case when @GroupNo='' then 'All' else AreaDealer end Area , 
		case when @companyCode='' then 'All' else b.CompanyName end Dealer, 
		case when @BranchCode='' then 'All' else a.BranchName end Showroom
from gnMstOrganizationDtl a
inner join gnMstOrganizationHdr b
	on a.CompanyCode=b.CompanyCode
where 1=1 --a.GroupNo= case when isnull(@GroupNo,'')<>'' then @GroupNo else a.GroupNo end --@GroupNo 
and a.companyCode=case when isnull(@companyCode,'')<>'' then @companyCode else a.companyCode end --@dealercode 
and a.BranchCode= case when isnull(@BranchCode,'')<>'' then @BranchCode else a.BranchCode end --@BranchCode
GO
CREATE procedure [dbo].[uspfn_GetNoLampiranReturSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15), 
@TypeOfGoods varchar(1), @ProductType varchar(2)
as
SELECT * FROM 
(
	-- SalesType = 2 (Service / SSS)
	SELECT
		a.LmpNo
		, a.LmpDate
		, c.DocNo
		, c.UsageDocNo
	FROM
		spTrnSLmpHdr a WITH(NOLOCK, NOWAIT)
		LEFT JOIN spTrnSLmpDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.LmpNo = b.LmpNo
		INNER JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
			AND a.BranchCode = c.BranchCode
			AND b.DocNo = c.DocNo
		INNER JOIN svTrnService d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
			AND a.BranchCode = d.BranchCode
			AND b.ProductType = d.ProductType 
			AND c.UsageDocNo = d.JobOrderNo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.TypeOfGoods = @TypeOfGoods
		AND b.ProductType = @ProductType
		AND c.SalesType = '2'
		AND d.ServiceStatus < 5
		AND b.QtyBill - 
		ISNULL((
			SELECT SUM(ISNULL(QtyReturn, 0))
			FROM spTrnSRturSSDtl dtl WITH(NOLOCK, NOWAIT)
				LEFT JOIN spTrnSRturSSHdr hdr WITH(NOLOCK, NOWAIT) ON dtl.CompanyCode = hdr.CompanyCode
					AND dtl.BranchCode = hdr.BranchCode
					AND dtl.ReturnNo = hdr.ReturnNo 
			WHERE dtl.CompanyCode = a.CompanyCode
				AND dtl.BranchCode = a.BranchCode
				AND TypeOfGoods = a.TypeOfGoods
				AND ProductType = b.ProductType
				AND PartNo = b.PartNo
				AND PartNoOriginal = b.PartNoOriginal
				AND dtl.DocNo = b.DocNo
		), 0) > 0

	UNION

	-- SalesType = 3 (Unit / SSU)
	SELECT
		a.LmpNo
		, a.LmpDate
		, c.DocNo
		, c.UsageDocNo
	FROM
		spTrnSLmpHdr a WITH(NOLOCK, NOWAIT)
		LEFT JOIN spTrnSLmpDtl b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
			AND a.BranchCode = b.BranchCode
			AND a.LmpNo = b.LmpNo
		INNER JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
			AND a.BranchCode = c.BranchCode
			AND b.DocNo = c.DocNo
		INNER JOIN omTrSalesSO d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
			AND a.BranchCode = d.BranchCode
			AND c.UsageDocNo = d.SONo
	WHERE
		a.CompanyCode = @CompanyCode
		AND a.BranchCode = @BranchCode
		AND a.TypeOfGoods = @TypeOfGoods
		AND b.ProductType = @ProductType
		AND c.SalesType = '3'
		AND d.Status IN ('2', '4')
		AND b.QtyBill - 
		ISNULL((
			SELECT SUM(ISNULL(QtyReturn, 0))
			FROM spTrnSRturSSDtl dtl WITH(NOLOCK, NOWAIT)
				LEFT JOIN spTrnSRturSSHdr hdr WITH(NOLOCK, NOWAIT) ON dtl.CompanyCode = hdr.CompanyCode
					AND dtl.BranchCode = hdr.BranchCode
					AND dtl.ReturnNo = hdr.ReturnNo 
			WHERE dtl.CompanyCode = a.CompanyCode
				AND dtl.BranchCode = a.BranchCode
				AND TypeOfGoods = a.TypeOfGoods
				AND ProductType = b.ProductType
				AND PartNo = b.PartNo
				AND PartNoOriginal = b.PartNoOriginal
				AND dtl.DocNo = b.DocNo
		), 0) > 0
) Lampiran
ORDER BY
	Lampiran.LmpNo DESC
GO
CREATE procedure [dbo].[uspfn_omSlsBPKLkpChassisNo]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @DONo varchar(15),
 @BPKNo varchar(15),
 @ChassisCode   varchar(15) 
)  
AS  
begin
select a.ChassisNo, a.EngineCode, a.EngineNo, 
a.ColourCode, b.RefferenceDesc1 from 
omTrSalesDODetail a
left join omMstRefference b on 
b.CompanyCode = a.CompanyCode and
b.RefferenceCode = a.ColourCode and
b.RefferenceType = 'COLO'
where
a.CompanyCode = @CompanyCode
AND a.BranchCode = @BranchCode
AND a.ChassisCode = @ChassisCode
AND a.DONo = @DONo
AND a.ChassisNo not in (select isnull(ChassisNo,0) from omTrSalesBPKDetail z
where z.CompanyCode = a.CompanyCode
and z.BranchCode = a.BranchCode
--and z.BPKNo = @BPKNo
and z.ChassisCode = a.ChassisCode
AND not exists (select 1 from omTrSalesReturnVIN where CompanyCode=a.CompanyCode and BranchCode=a.BranchCode
		and ChassisCode=a.ChassisCode and ChassisNo=a.ChassisNo))
END
GO
CREATE procedure [dbo].[uspfn_SaveEmployeeMutation]
	@CompanyCode varchar(20),
	@EmployeeID varchar(20),
	@MutationDate datetime,
	@IsJoinDate bit,
	@BranchCode varchar(20),
	@UserID varchar(64)
as

begin
	-- Declaring variables that hold current execution time
	declare @CurrentTime datetime;
	declare @JoinDate datetime;
	declare @ResignDate datetime;
	declare @Status bit;

	declare @Message varchar(150);
	declare @PrevMutation varchar(17);
	declare @NextMutation varchar(17);
	declare @NumberOfExistingRecord int;
	declare @NextMutationDate datetime;
	declare @PrevMutationDate datetime;

	set @NextMutation = null;
	set @PrevMutationDate = null;
	set @NumberOfExistingRecord = 0;
	set @Status=0;
	set @Message='';
	set @PrevMutation = '';
	set @NextMutation = ''
	set @CurrentTime = getDate();
	set @JoinDate = ( select top 1 a.JoinDate from HrEmployee a where a.CompanyCode=@CompanyCode and a.EmployeeID=@EmployeeID);
	set @ResignDate = ( select top 1 a.ResignDate from HrEmployee a where a.CompanyCode=@CompanyCode and a.EmployeeID=@EmployeeID);

	if @MutationDate < @JoinDate
	begin
		set @Message = 'Mutation datetime cannot less than join datetime.';
	end
	else if @MutationDate > @ResignDate and @ResignDate is not null
	begin
		set @Message = 'Mutation datetime cannot more than resign datetime.';
	end
	else 
	begin
		set @NumberOfExistingRecord = ( select count(*) from HrEmployeeMutation where CompanyCode=@CompanyCode and EmployeeID=@EmployeeID and convert(datetime, MutationDate)=@MutationDate );

		if @NumberOfExistingRecord > 0
		begin
			set @PrevMutation = (
				select top 1
				       a.BranchCode
				  from HrEmployeeMutation a
				 where a.CompanyCode=@CompanyCode
				   and a.EmployeeID=@EmployeeID
				   and convert(datetime, a.MutationDate) < @MutationDate
				 order by a.MutationDate desc
			);		
			
			set @NextMutation = (
				select top 1
					   a.BranchCode
				  from HrEmployeeMutation a
				 where a.CompanyCode=@CompanyCode
				   and a.EmployeeID=@EmployeeID
				   and convert(datetime, a.MutationDate) > @MutationDate
				 order by a.MutationDate desc
			);

			if @BranchCode = @PrevMutation
			begin			
				set @Message='There is mutation in the selected Branch before this mutation datetime.';
			end
			else if @BranchCode = @NextMutation
			begin
				set @Message='There is mutation in the selected Branch after this mutation datetime.';
			end
			else
			begin
				update HrEmployeeMutation
				   set IsDeleted=0
				     , BranchCode=@BranchCode
				 where CompanyCode=@CompanyCode
				   and EmployeeID=@EmployeeID
				   and convert(datetime, MutationDate)=@MutationDate

				if @IsJoinDate=1 
				begin
					update HrEmployeeMutation
					   set IsDeleted=1
					 where MutationDate < @MutationDate
				end

				set @Message = 'Data has been saved into database.';
				set @Status = convert(bit, 1);
			end
		end
		else
		begin
			insert into 
				   HrEmployeeMutation ( CompanyCode, EmployeeID, MutationDate, BranchCode, IsJoinDate, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate, IsDeleted )
			values
				   (@CompanyCode, @EmployeeID, @MutationDate, @BranchCode, @IsJoinDate, @UserID, @CurrentTime, @UserID, @CurrentTime, 0)

			if @IsJoinDate=1
			begin
				update HrEmployeeMutation
				   set IsDeleted=1
				 where MutationDate < @MutationDate
			end

			set @Status = convert(bit, 1);
			set @Message = 'Data has been saved.';
		end
	end

	select convert(bit, @Status) as Status, @Message as Message;
end
GO
create procedure [dbo].[uspfn_IsDOExists]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SONumber varchar(50)
as

begin
	  SELECT count(*) as Jumlah
        FROM omTrSalesDO 
       WHERE CompanyCode = @CompanyCode
         AND BranchCode = @BranchCode
         AND SONo = @SONumber 
         AND Status NOT IN (3, 4);
end
GO
CREATE PROCEDURE [dbo].[uspfn_GetTrnPickingHdr] @CompanyCode varchar(15),
@BranchCode varchar(15), 
@TypeOfGoods varchar(2),
@isBORelease bit
as
SELECT 
	DISTINCT(a.PickingSlipNo)
    , a.PickingSlipDate
    , ISNULL(b.CustomerCode,  c.BranchCodeTo) CustomerCode  
    , ISNULL(b.CustomerName,  c.BranchCodeToDesc) CustomerName
    --, spTrnSPickingDtl.ExPickingSlipNo
FROM 
	spTrnSPickingHdr a
LEFT JOIN gnMstCustomer b ON b.CompanyCode = a.CompanyCode
    AND b.CustomerCode = a.CustomerCode 		
LEFT JOIN spMstCompanyAccount c ON c.CompanyCode = a.CompanyCode
    AND c.BranchCodeTo = a.CustomerCode
LEFT JOIN gnMstCustomerProfitCenter d ON d.CompanyCode = a.CompanyCode 
	AND d.BranchCode = a.BranchCode
    AND d.CustomerCode = b.CustomerCode 
LEFT JOIN gnMstCustomerClass e ON e.CompanyCode = a.CompanyCode 
    AND e.BranchCode = a.BranchCode
    AND e.ProfitCenterCode = d.ProfitCenterCode 
	AND e.CustomerClass = d.CustomerClass 
LEFT JOIN spTrnSPickingDtl f ON f.CompanyCode = a.CompanyCode 
    AND f.BranchCode = a.BranchCode 
    AND f.PickingSlipNo = a.PickingSlipNo 
WHERE 
    a.CompanyCode= @CompanyCode
    AND a.BranchCode= @BranchCode
    AND (a.Status = 0 OR a.Status = 1) 
    AND a.TypeOfGoods = @TypeOfGoods AND a.isBORelease = @isBORelease  ORDER BY a.PickingSlipNo DESC
GO
create procedure [dbo].[uspfn_CsLkuCustBday]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@OutStanding char(1), 
	@CustomerCode varchar(13),
	@CustomerName varchar(50)
as

begin
	declare @BottomLimit int;
	declare @UpperLimit int;
	declare @CurrentMonth int;
	declare @Setting int;

	set @Setting = (select top 1 SettingParam1 from CsSettings where SettingCode='REMBDAY');
	set @CurrentMonth = datepart(month, getdate());

	set @BottomLimit = @CurrentMonth - @Setting;
	set @UpperLimit = @CurrentMonth;

	if(@BottomLimit <= 0) 
		set @BottomLimit = 12 + @BottomLimit;

	if @UpperLimit >= 12 
		set @UpperLimit = @UpperLimit - 12;


	if(@BottomLimit <= 0) 
		set @BottomLimit = 12 + @BottomLimit;

	if @UpperLimit >= 12 
		set @UpperLimit = @UpperLimit - 12;

	if @CustomerName is null or @CustomerName = ''
		set @CustomerName = '%';
	else
		set @CustomerName = '%' + @CustomerName + '%';

	if @CustomerCode is null or @CustomerCode = ''
		set @CustomerCode = '%';
	else
		set @CustomerCode = '%' + @CustomerCode + '%';

	select distinct a.*
	  from CsLkuBirthdayView a
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and a.CustomerCode like @CustomerCode
	   and a.CustomerName like @CustomerName
	   and a.Outstanding = @OutStanding
	    and (
				DATEPART(month, a.CustomerBirthDate) >= @BottomLimit
				or
				DATEPART(month, a.CustomerBirthDate) <= @UpperLimit
			)

	 --order by datepart(month, a.CustomerBirthDate) asc
end
GO
CREATE procedure [dbo].[uspfn_omGetPriceList]
	@CompanyCode varchar(20)='',
	@BranchCode varchar(20)='',
	@salesmodelcode varchar(32)='',
	@salesmodelyear int=0,
	@Status int=2
AS
SELECT 
       a.[SalesModelCode]
      ,a.[SalesModelYear]
      ,b.[SalesModelDesc]
      ,a.[GroupPrice]
      ,a.[RetailPriceIncludePPN]
      ,a.[DiscPriceIncludePPN]
      ,a.[NetSalesIncludePPN]
      ,a.[RetailPriceExcludePPN]
      ,a.[DiscPriceExcludePPN]
      ,a.[NetSalesExcludePPN]
      ,a.[PPNBeforeDisc]
      ,a.[PPNAfterDisc]
      ,a.[PPNBMPaid]
      ,a.[EffectiveDate]
      ,a.[isStatus]
  FROM [dbo].[omPriceListBranches] a inner join omMstModel b 
  on (a.CompanyCode=b.CompanyCode and a.SalesModelCode=b.SalesModelCode)
where a.companycode=@CompanyCode and a.BranchCode=@BranchCode
and a.SalesModelCode like case when @salesmodelcode='' then '%%' else @salesmodelcode end
and a.SalesModelYear = case when @salesmodelyear=0 then a.SalesModelYear else @salesmodelyear end
and a.isStatus = case when @Status=2 then a.isstatus else @Status end
GO
CREATE PROCEDURE [dbo].[uspfn_GetSpTrnSBPSFDtl] 
@CompanyCode varchar(15), @BranchCode varchar(15), @BPSFNo varchar(15)
as
select PartNo, PartNoOriginal, DocNo, DocDate, ReferenceNo, QtyBill from spTrnSBPSFDtl
where CompanyCode = @CompanyCode and BranchCode = @BranchCode and BPSFNo = @BPSFNo
GO
CREATE procedure [dbo].[uspfn_sp_inquiry_supply_slip_sum]
	@companycode varchar(15), 
	@branchcode varchar(15), 
	@CustomParameter varchar(400),
	@RangeDate varchar(400) 
 AS
	SET NOCOUNT ON;

	DECLARE @SQLQuery NVARCHAR(MAX)
	
	SET @SQLQuery = '
SELECT 
	ISNULL(SUM(GrossAmt),0) PartsGrossAmt, 
	ISNULL(SUM(DPPAmt),0) PartsDPPAmt,
	ISNULL(SUM(DiscAmt),0) PartsDiscAmt 
FROM (
SELECT SSNo, PartNo, ISNULL(SalesAmt,0) GrossAmt, ISNULL(NetSalesAmt,0) DPPAmt, ISNULL(DiscAmt,0) DiscAmt
FROM (
SELECT 
DISTINCT(a.docNo) SSNo,
x.PartNo,
c.JobOrderNo SPKno,
a.DocDate SSDate,
b.PickingSlipDate PickingDate,ISNULL(b.SP, ''-'') SP,
y.SalesAmt,
y.DiscAmt,
y.NetSalesAmt,
(SELECT CustomerName FROM gnMstCustomer WHERE CustomerCode = a.CustomerCodeBill) + ''('' + a.CustomerCodeBill  + '')'' AS CustomerName
FROM spTrnSORDHdr a
LEFT JOIN  spTrnSORDDtl x ON a.CompanyCode = x.CompanyCode AND a.BranchCode = x.BranchCode AND a.DocNo = x.DocNo
LEFT JOIN  spTrnSLmpDtl y ON a.CompanyCode = y.CompanyCode AND a.BranchCode = y.BranchCOde AND x.DocNo = y.DocNo AND x.PartNo = y.PartNo 
LEFT JOIN
	(SELECT a.CompanyCode, a.BranchCode, a.PickingSlipNo, b.PickingSlipDate,a.DocNo, b.Status SP, 
		c.BPSFNo,c.BPSFDate, d.LmpNo, d.LmpDate,c.Status SI,ISNULL(d.Status ,''X'') SL FROM spTrnSPickingDtl a 
		INNER JOIN spTrnSPickingHDr b	ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
		LEFT  JOIN spTrnSBPSFHdr c		ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PickingSlipNo = c.PickingSlipNo
		LEFT  JOIN spTrnSlmpHdr  d		ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND c.BPSFNo = d.BPSFNo
			WHERE a.PickingSlipNo IN
				(SELECT DISTINCT(PickingSlipNo) FROM spTrnSPickingDtl WHERE DocNo IN 
					(SELECT DocNo FROM SpTrnSORDHdr WHERE SalesType = 2))
	) b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
LEFT JOIN svTrnService c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.UsageDocNo = c.JobOrderNo
WHERE 
a.CompanyCode = ''' + @companycode  + ''' AND a.BranchCode = ''' + @branchcode  + ''' AND a.SalesType = 2 
    ' + @CustomParameter + ' 
    ' + @RangeDate + ' ) p'
print @SQLQuery
EXECUTE sp_executesql @SQLQuery
GO
create procedure [dbo].[uspfn_CsLkuStnkExt]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@OutStanding bit
as

declare @IsHolding bit
set @IsHolding = isnull((select top 1 1 from gnMstOrganizationDtl where CompanyCode = @CompanyCode and BranchCode = @BranchCode and IsBranch = 0), 0)

if @OutStanding = 1 
begin
	select top 5000 a.CompanyCode     
		 , a.BranchCode
		 , b.CustomerCode
		 , c.CustomerName
		 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
		 , a.EngineCode + convert(varchar, a.EngineNo) Engine
		 , a.SalesModelCode
		 , a.SalesModelYear
		 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
		 , isnull(e.StnkDate, g.BPKDate) StnkDate
		 , g.BPKDate
		 , isnull(h.isLeasing, 0) as IsLeasing
		 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
		 , h.LeasingCo
		 , i.CustomerName as LeasingName
		 , h.Installment
		 , PoliceRegNo = isnull(k.PoliceRegistrationNo, j.PoliceRegNo)
	  from omTrSalesInvoiceVin a    
	  left join omTrSalesInvoice b    
		on b.CompanyCode = a.CompanyCode    
	   and b.BranchCode = a.BranchCode    
	   and b.InvoiceNo = a.InvoiceNo    
	  left join gnMstCustomer c
		on c.CompanyCode = a.CompanyCode    
	   and c.CustomerCode = b.CustomerCode
	  left join omTrSalesDODetail d
		on d.CompanyCode = a.CompanyCode    
	   and d.BranchCode = a.BranchCode
	   and d.ChassisCode = a.ChassisCode
	   and d.ChassisNo = a.ChassisNo
	  left join CsCustomerVehicle e
		on e.CompanyCode = a.CompanyCode    
	   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
	  left join omTrSalesDO f
		on f.CompanyCode = d.CompanyCode    
	   and f.BranchCode = d.BranchCode
	   and f.DONo = d.DONo
	  left join omTrSalesBPK g
		on g.CompanyCode = f.CompanyCode    
	   and g.BranchCode = f.BranchCode
	   and g.DONo = f.DONo
	  left join omTrSalesSO h
		on h.CompanyCode = g.CompanyCode    
	   and h.BranchCode = g.BranchCode
	   and h.SONo = g.SONo
	  left join gnMstCustomer i
		on i.CompanyCode = h.CompanyCode
	   and i.CustomerCode = h.LeasingCo
	  left join svMstCustomerVehicle j
		on j.CompanyCode = a.CompanyCode
	   and j.ChassisCode = a.ChassisCode
	   and j.ChassisNo = a.ChassisNo
	  left join omTrSalesBPKBDetail k
	    on k.CompanyCode = a.CompanyCode
	   and k.ChassisCode = a.ChassisCode
	   and k.ChassisNo = a.ChassisNo 
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
	   and isnull(a.IsReturn, 0) = 0
	   and not exists (
			select 1 from CsStnkExt 
			 where CompanyCode = a.CompanyCode
			   and CustomerCode = b.CustomerCode
			   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
			   and year(CreatedDate) = year(getdate()))
end   
else
begin
	select top 5000 a.CompanyCode     
		 , a.BranchCode
		 , b.CustomerCode
		 , c.CustomerName
		 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
		 , a.EngineCode + convert(varchar, a.EngineNo) Engine
		 , a.SalesModelCode
		 , a.SalesModelYear
		 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
		 , isnull(e.StnkDate, g.BPKDate) StnkDate
		 , g.BPKDate
		 , isnull(h.isLeasing, 0) as IsLeasing
		 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
		 , h.LeasingCo
		 , i.CustomerName as LeasingName
		 , h.Installment
		 , PoliceRegNo = isnull(k.PoliceRegistrationNo, j.PoliceRegNo)
	  from omTrSalesInvoiceVin a    
	  left join omTrSalesInvoice b    
		on b.CompanyCode = a.CompanyCode    
	   and b.BranchCode = a.BranchCode    
	   and b.InvoiceNo = a.InvoiceNo    
	  left join gnMstCustomer c
		on c.CompanyCode = a.CompanyCode    
	   and c.CustomerCode = b.CustomerCode
	  left join omTrSalesDODetail d
		on d.CompanyCode = a.CompanyCode    
	   and d.BranchCode = a.BranchCode
	   and d.ChassisCode = a.ChassisCode
	   and d.ChassisNo = a.ChassisNo
	  left join CsCustomerVehicle e
		on e.CompanyCode = a.CompanyCode    
	   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
	  left join omTrSalesDO f
		on f.CompanyCode = d.CompanyCode    
	   and f.BranchCode = d.BranchCode
	   and f.DONo = d.DONo
	  left join omTrSalesBPK g
		on g.CompanyCode = f.CompanyCode    
	   and g.BranchCode = f.BranchCode
	   and g.DONo = f.DONo
	  left join omTrSalesSO h
		on h.CompanyCode = g.CompanyCode    
	   and h.BranchCode = g.BranchCode
	   and h.SONo = g.SONo
	  left join gnMstCustomer i
		on i.CompanyCode = h.CompanyCode
	   and i.CustomerCode = h.LeasingCo
	  left join svMstCustomerVehicle j
		on j.CompanyCode = a.CompanyCode
	   and j.ChassisCode = a.ChassisCode
	   and j.ChassisNo = a.ChassisNo
	  left join omTrSalesBPKBDetail k
	    on k.CompanyCode = a.CompanyCode
	   and k.ChassisCode = a.ChassisCode
	   and k.ChassisNo = a.ChassisNo 
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
	   and isnull(a.IsReturn, 0) = 0
	   and exists (
			select 1 from CsStnkExt 
			 where CompanyCode = a.CompanyCode
			   and CustomerCode = b.CustomerCode
			   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
			   and year(CreatedDate) = year(getdate()))
end
GO
CREATE procedure [dbo].[uspfn_omSlsBPKBrwDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @RefType varchar(15),
 @BPKNo varchar(15)
)  
AS  
BEGIN  
--exec uspfn_omSlsBPKBrwDtl 6006410,600641001,'CLCD','BSJ/14/000001'
SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
	           a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
	           a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
	           a.ColourCode, case when c.RefferenceDesc1 is null then '' else c.RefferenceDesc1 end RefferenceDesc1, 
	           a.Remark, a.StatusPDI,
               a.BPKSeq
        FROM   omTrSalesBPKDetail a	   
	           LEFT JOIN
	           omMstModelYear b
	           ON a.CompanyCode = b.CompanyCode
	           AND a.SalesModelCode = b.SalesModelCode      
	           AND a.ChassisCode = b.ChassisCode
               AND a.SalesModelYear = b.SalesModelYear	   
	           LEFT JOIN
	           omMstRefference c
	           ON a.CompanyCode = c.CompanyCode
	           AND a.ColourCode = c.RefferenceCode
	           AND c.RefferenceType = @RefType
       WHERE a.CompanyCode= @CompanyCode 
               AND a.BranchCode= @BranchCode 
               AND a.BPKNo= @BPKNo
       ORDER BY a.ChassisNo ASC
            
end
GO
CREATE procedure [dbo].[uspfn_sp_inquiry_supply_slip]
	@companycode varchar(15), 
	@branchcode varchar(15), 
	@OrderBy varchar(50),
	@CustomParameter varchar(400),
	@RangeDate varchar(400) 
 AS
	SET NOCOUNT ON;

	DECLARE @SQLQuery NVARCHAR(MAX)
	
	SET @SQLQuery = '
SELECT row_number() over(order by ' + @OrderBy + ') Nomor, CONVERT(BIT, v.finish) FinishCon, * FROM (
SELECT DISTINCT (a.DocNo) SSNo,
(SELECT LookUpValueName FROM GnMstLookUpDtl where CompanyCode = a.CompanyCode AND CodeID = ''TTSR'' AND lookUpValue = a.TransType) Type,
a.DocDate SSDate,
a.UsageDocNo SPKNo,
a.UsageDocDate SPKDate,
ISNULL(b.PickingSlipNo, ''-'') PickingNo,
b.PickingSlipDate PickingDate,
ISNULL(b.LmpNo, ''-'') LmpNo,
LmpDate,
ISNULL(b.SP, ''-'') SP,
CASE ISNULL((SELECT TOP 1 SupplySlipNo FROM SvTrnInvItemDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND SupplySlipNo = a.DocNo),'''') WHEN '''' THEN 0 ELSE 1 END AS finish,
ISNULL(c.PoliceRegNo,''-'') PoliceNo,
(SELECT x.CustomerName FROM gnMstCustomer x WHERE x.CompanyCode = a.CompanyCode AND x.CustomerCode = a.CustomerCodeBill) + ''('' + a.CustomerCodeBill  + '')'' AS CustomerName,
ISNULL(e.PartsGrossAmtTot,0) PartsGrossAmtTot, 
ISNULL(e.PartsDiscAmtTot,0) PartsDiscAmtTot, 
ISNULL(e.PartsDPPAmtTot,0) PartsDPPAmtTot
FROM spTrnSORDHdr a 
LEFT JOIN
(
	SELECT a.CompanyCode, a.BranchCode, a.PickingSlipNo, b.PickingSlipDate,a.DocNo, b.Status SP, 
	c.BPSFNo,c.BPSFDate,d.LmpNo, d.LmpDate,c.Status SI,ISNULL(d.Status ,''X'') SL FROM spTrnSPickingDtl a 
	INNER JOIN spTrnSPickingHDr b	ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
	LEFT  JOIN spTrnSBPSFHdr c		ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PickingSlipNo = c.PickingSlipNo
	LEFT  JOIN spTrnSlmpHdr  d		ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode AND c.BPSFNo = d.BPSFNo
	WHERE a.PickingSlipNo IN
	(SELECT DISTINCT(PickingSlipNo) FROM spTrnSPickingDtl WHERE DocNo IN 
	(SELECT DocNo FROM SpTrnSORDHdr WHERE SalesType = 2))
) b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.DocNo = b.DocNo
LEFT JOIN svTrnService c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.UsageDocNo = c.JobOrderNo
LEFT JOIN svTrnInvoice d ON d.CompanyCode = c.CompanyCode AND d.BranchCode = c.BranchCode AND d.JobOrderNo = c.JobOrderNo
LEFT JOIN 
(
	SELECT * FROM 
	(
		SELECT DISTINCT(a.SupplySlipNo), 
			a.CompanyCode,
			a.BranchCode,
			a.InvoiceNo,
			b.PartsGrossAmtTot,
			b.PartsDiscAmtTot,
			b.PartsDPPAmtTot
		FROM SvTrnInvItemDtl a
		LEFT JOIN
		(
			SELECT CompanyCode, BranchCode, InvoiceNo,
			ISNULL(SUM(PartsGrossAmt),0) PartsGrossAmtTot,
			ISNULL(SUM(PartsDiscAmt),0) PartsDiscAmtTot,
			ISNULL(SUM(PartsDPPAmt),0) PartsDPPAmtTot
			FROM svTrnInvoice WHERE CompanyCode = ''' + @CompanyCode + ''' AND BranchCode = ''' + @BranchCode + '''
			GROUP BY InvoiceNo, CompanyCode, BranchCode
		) b ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.InvoiceNo = b.InvoiceNo 
		WHERE a.CompanyCode = ''' + @CompanyCode + ''' AND a.BranchCode = ''' + @BranchCode + '''
	) x
) e ON a.CompanyCode = e.CompanyCode AND a.BranchCode = e.BranchCode AND a.DocNo = e.SupplySlipNo
WHERE 
a.CompanyCode = ''' + @CompanyCode + ''' AND a.BranchCode = ''' + @BranchCode + ''' AND a.SalesType = 2 
    ' + @CustomParameter + ' 
    ' + @RangeDate 

print @SQLQuery
EXECUTE sp_executesql @SQLQuery
GO
create procedure [dbo].[uspfn_CsLkuFeedback]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@OutStanding bit
as

declare @IsHolding bit
set @IsHolding = isnull((select top 1 1 from gnMstOrganizationDtl where CompanyCode = @CompanyCode and BranchCode = @BranchCode and IsBranch = 0), 0)

if @OutStanding = 1 
begin
	select top 5000 a.CompanyCode     
		 , a.BranchCode
		 , b.CustomerCode
		 , c.CustomerName
		 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
		 , a.EngineCode + convert(varchar, a.EngineNo) Engine
		 , a.SalesModelCode
		 , a.SalesModelYear
		 , PoliceRegNo = isnull(k.PoliceRegistrationNo, j.PoliceRegNo)
		 , f.DODate
		 , '' IsManual
		 , '-' Feedback
	  from omTrSalesInvoiceVin a    
	  left join omTrSalesInvoice b    
		on b.CompanyCode = a.CompanyCode    
	   and b.BranchCode = a.BranchCode    
	   and b.InvoiceNo = a.InvoiceNo    
	  left join gnMstCustomer c
		on c.CompanyCode = a.CompanyCode    
	   and c.CustomerCode = b.CustomerCode
	  left join omTrSalesDODetail d
		on d.CompanyCode = a.CompanyCode    
	   and d.BranchCode = a.BranchCode
	   and d.ChassisCode = a.ChassisCode
	   and d.ChassisNo = a.ChassisNo
	  left join CsCustomerVehicle e
		on e.CompanyCode = a.CompanyCode    
	   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
	  left join omTrSalesDO f
		on f.CompanyCode = d.CompanyCode    
	   and f.BranchCode = d.BranchCode
	   and f.DONo = d.DONo
	  left join omTrSalesBPK g
		on g.CompanyCode = f.CompanyCode    
	   and g.BranchCode = f.BranchCode
	   and g.DONo = f.DONo
	  left join omTrSalesSO h
		on h.CompanyCode = g.CompanyCode    
	   and h.BranchCode = g.BranchCode
	   and h.SONo = g.SONo
	  left join gnMstCustomer i
		on i.CompanyCode = h.CompanyCode
	   and i.CustomerCode = h.LeasingCo
	  left join svMstCustomerVehicle j
		on j.CompanyCode = a.CompanyCode
	   and j.ChassisCode = a.ChassisCode
	   and j.ChassisNo = a.ChassisNo
	  left join omTrSalesBPKBDetail k
	    on k.CompanyCode = a.CompanyCode
	   and k.ChassisCode = a.ChassisCode
	   and k.ChassisNo = a.ChassisNo 
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
	   and isnull(a.IsReturn, 0) = 0
	   and f.DODate is not null
	   and not exists (
			select 1 from CsCustFeedback 
			 where CompanyCode = a.CompanyCode
			   and CustomerCode = b.CustomerCode
			   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo))
end   
else
begin
	select top 5000 a.CompanyCode     
		 , a.BranchCode
		 , b.CustomerCode
		 , c.CustomerName
		 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
		 , a.EngineCode + convert(varchar, a.EngineNo) Engine
		 , a.SalesModelCode
		 , a.SalesModelYear
		 , PoliceRegNo = isnull(l.PoliceRegistrationNo, j.PoliceRegNo)
		 , f.DODate
		 , k.IsManual
		 , case k.IsManual when 1 then 'Manual' else 'System' end Feedback
	  from omTrSalesInvoiceVin a    
	  left join omTrSalesInvoice b    
		on b.CompanyCode = a.CompanyCode    
	   and b.BranchCode = a.BranchCode    
	   and b.InvoiceNo = a.InvoiceNo    
	  left join gnMstCustomer c
		on c.CompanyCode = a.CompanyCode    
	   and c.CustomerCode = b.CustomerCode
	  left join omTrSalesDODetail d
		on d.CompanyCode = a.CompanyCode    
	   and d.BranchCode = a.BranchCode
	   and d.ChassisCode = a.ChassisCode
	   and d.ChassisNo = a.ChassisNo
	  left join CsCustomerVehicle e
		on e.CompanyCode = a.CompanyCode    
	   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
	  left join omTrSalesDO f
		on f.CompanyCode = d.CompanyCode    
	   and f.BranchCode = d.BranchCode
	   and f.DONo = d.DONo
	  left join omTrSalesBPK g
		on g.CompanyCode = f.CompanyCode    
	   and g.BranchCode = f.BranchCode
	   and g.DONo = f.DONo
	  left join omTrSalesSO h
		on h.CompanyCode = g.CompanyCode    
	   and h.BranchCode = g.BranchCode
	   and h.SONo = g.SONo
	  left join gnMstCustomer i
		on i.CompanyCode = h.CompanyCode
	   and i.CustomerCode = h.LeasingCo
	  left join svMstCustomerVehicle j
		on j.CompanyCode = a.CompanyCode
	   and j.ChassisCode = a.ChassisCode
	   and j.ChassisNo = a.ChassisNo
	  left join CsCustFeedback k
		on k.CompanyCode = a.CompanyCode
	   and k.CustomerCode = b.CustomerCode
	   and k.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
	  left join omTrSalesBPKBDetail l
	    on l.CompanyCode = a.CompanyCode
	   and l.ChassisCode = a.ChassisCode
	   and l.ChassisNo = a.ChassisNo 
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
	   and isnull(a.IsReturn, 0) = 0
	   and f.DODate is not null
	   and exists (
			select 1 from CsCustFeedback 
			 where CompanyCode = a.CompanyCode
			   and CustomerCode = b.CustomerCode
			   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo))
end
GO
create procedure [dbo].[uspfn_ItsLkuSOList]
	@CompanyCode varchar(13),
	@BranchCode varchar(13)
as

begin
	select a.CompanyCode as CompanyCode
	     , a.BranchCode as BranchCode
		 , a.SONo as SONumber
		 , a.SODate as SODate
		 , a.SalesType as SalesType
		 , a.RefferenceNo as ReffNumber
		 , a.RefferenceDate as ReffDate
		 , a.CustomerCode  as CustomerCode
		 , b.CustomerName
		 , Customer = b.CustomerCode + ' || ' + b.CustomerName
		 , CustomerAddress = b.Address1 + ' ' + ltrim(b.Address2) + ' ' + ltrim(b.Address3) + ' ' + ltrim(b.Address4)
		 , a.TOPCode as TOPCode
		 , a.TOPDays as TOPDays
		 , a.TOPDays as TOPName
		 , a.BillTo as ChargedToCode
		 , b.CustomerName as ChargedToName
		 , a.ShipTo as ShipToCode
		 , g.CustomerName as ShipToName
		 , a.ProspectNo as ITSNumber
		 , a.SKPKNo as SKPKNumber
		 , a.SalesCode as SalesmanCode
		 , isnull(c.EmployeeName, '-') as SalesmanName
		 , Salesman = isnull((c.EmployeeID + ' || ' + c.EmployeeName), '-')
		 , a.WareHouseCode as WarehouseCode
		 , f.LookUpValueName as WarehouseName
		 , a.isLeasing as IsLeasing
		 , a.LeasingCo as LeasingCode
		 , a.GroupPriceCode as GroupPriceCode
		 , e.RefferenceDesc1 as GroupPriceName
		 , a.Insurance as Insurance
		 , a.PaymentType as TOPPaidWith
		 , a.PrePaymentAmt as Advance 
		 , a.PrePaymentDate as ReceivingDate
		 , a.PrePaymentBy as PayeeCode
		 , PayeeName = (
				select top 1
				       x.EmployeeName
				  from HrEmployee x
				 where x.CompanyCode = a.CompanyCode
				   and x.EmployeeID = a.PrePaymentBy
		   )
		 , a.CommissionBy as MediatorName
		 , a.CommissionAmt as MediatorComission
		 , a.PONo as PONumber
		 , a.ContractNo as ContractNumber
		 , a.RequestDate as ContractDate
		 , a.Remark as ContractNote
		 , a.Status 
		 , a.ApproveBy
		 , a.ApproveDate 
		 , a.RejectBy 
		 , a.RejectDate 
		 , a.CreatedBy 
		 , a.CreatedDate 
		 , a.LastUpdateBy 
		 , a.LastUpdateDate 
		 , a.isLocked 
		 , a.LockingBy 
		 , a.LockingDate 
		 , a.Installment as Tenor
		 , a.FinalPaymentDate as PaidPaymentDate
		 , a.FinalPaymentDate
		 , a.SalesCoordinator 
		 , a.SalesHead 
		 , a.BranchManager 
		 , VehicleType = (select top 1 x.TipeKendaraan from pmKDP x where x.InquiryNumber = a.ProspectNo)
		 , IsDirectSales = (
				case
					when a.ProspectNo is null or rtrim(ltrim(a.ProspectNo)) = '' then convert(bit, 0)
					else convert(bit, 1)
				end
		   )
		 , SOStatus = (
				case 
					when a.Status = '0' then 'OPEN'
					when a.Status = '1' then 'PRINTED'
					when a.Status = '2' then 'APRROVED'
					when a.Status = '3' then 'UNAPRROVED'
					when a.Status = '4' then 'REJECTED'
				end
		   )
		 , SaleType = (
				case 
					when a.SalesType = '1' then 'Direct'
					else 'Whole'
				end
		   )
		 , LeasingName = (
				select top 1
				       x.CustomerName
				  from gnMstCustomer x
				  where x.CompanyCode = a.CompanyCode
				    and x.CustomerCode = a.LeasingCo
		   )
	  from omTrSalesSO a
	  left join gnMstCustomer b
	    on b.CompanyCode = a.CompanyCode
	   and b.CustomerCode = a.CustomerCode
	  left join HrEmployee c
	    on c.CompanyCode = a.CompanyCode
	   and c.EmployeeID = a.SalesCode
	  left join gnMstLookupDtl d
	    on d.CodeID = 'TOPC'
	   and d.LookUpValue = a.TOPCode
	  left join omMstRefference e
	    on e.CompanyCode = a.CompanyCode
	   and e.RefferenceType = 'GRPR'
	   and e.RefferenceCode = a.GroupPriceCode
	  left join gnMstLookUpDtl f
	    on f.CompanyCode = a.CompanyCode
	   and f.CodeID = 'MPWH'
	   and f.ParaValue = @BranchCode
	  left join gnMstCustomer g
	    on g.CompanyCode = a.CompanyCode
	   and g.CustomerCode = a.ShipTo
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	 order by a.SODate desc
end
GO
create procedure [dbo].[uspfn_GetTotalUnit]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)	
as

begin
	select isnull(sum(quantity), 0) as TotalUnit
	  from omtrsalessomodelcolour 
	 where companycode=@CompanyCode and branchcode=@BranchCode and sono=@SONumber;
end
GO
create procedure [dbo].[uspfn_OmTrSalesDOSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , BranchCode
     , DONo
     , DODate
     , SONo
     , CustomerCode
     , ShipTo
     , WareHouseCode
     , Expedition
     , Remark
     , Status
     , CreatedBy
     , CreatedDate
     , LastUpdateBy
     , LastUpdateDate
     , isLocked
     , LockingBy
     , LockingDate
  from omTrSalesDO
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_OmTrSalesDOSend @LastUpdateDate='2013-01-01', @Segment=1
GO
create procedure [dbo].[uspfn_UpdateDataDeaeler]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;

	with x as (
		select *
		  from SDMS..HrEmployeeAdditionalBranch a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrEmployeeAdditionalBranch 
	select *
	  from #temp1 a;

	update SBTDB..HrEmployeeAdditionalBranch
	   set CompanyCode = @CompanyCode_B

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_omSlsDoDtl]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @DONo varchar(15)
)  
AS  
BEGIN  
-- exec uspfn_omSlsDoDtl 6006410,600641001,'DOS/14/000001'
 SELECT a.SalesModelCode, a.SalesModelYear, b.SalesModelDesc, 
	           a.ChassisCode, Convert(varchar,a.ChassisNo) as ChassisNo, 
	           a.EngineCode, Convert(varchar,a.EngineNo) as EngineNo, 
	           a.ColourCode, c.RefferenceDesc1, a.Remark, a.DOSeq
        FROM   omTrSalesDODetail a	   
	           LEFT JOIN
	           omMstModelYear b
	           ON a.CompanyCode = b.CompanyCode
	           AND a.SalesModelCode = b.SalesModelCode
               AND a.SalesModelYear = b.SalesModelYear      
	           AND a.ChassisCode = b.ChassisCode	   
	           LEFT JOIN
	           omMstRefference c
	           ON a.CompanyCode = c.CompanyCode
	           AND a.ColourCode = c.RefferenceCode
	           AND c.RefferenceType = 'COLO'
       WHERE a.CompanyCode= @CompanyCode 
               AND a.BranchCode= @BranchCode 
               AND a.DONo= @DONo
       ORDER BY a.ChassisNo ASC;
END
GO
CREATE procedure [dbo].[uspfn_SvTrnInputInfoSpk]
	 @CompanyCode   varchar(20),
	 @BranchCode    varchar(20),
	 @IsSpare		bit,
	 @UserID varchar(15)
	 /*@CheckDate     bit,
	 @JobOrderDate1 datetime,
	 @JobOrderDate2 datetime,
	 @IsSprClaim    bit = 0*/
as

SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + ' ' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + ' ' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + ' - ' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus='4' then
            case when svTrnService.ProductType='4W' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    , svTrnService.PoliceRegNo
    , svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    , svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    , ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3 + '' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = 'SERVSTAS'
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = @CompanyCode 
    AND svTrnService.BranchCode = @BranchCode
    and SvTrnService.ServiceStatus = 5
	and svTrnService.JobType = 'CLAIM'
	and isnull(svTrnService.IsSparepartClaim, 0) = @IsSpare
	and not exists (
    select * from svTrnClaimApplication
     where CompanyCode = SvTrnService.CompanyCode
       and BranchCode = SvTrnService.BranchCode
       and InvoiceNo = SvTrnService.JobOrderNo
    )
    ORDER BY svTrnService.JobOrderNo ASC
GO
create procedure [dbo].[uspfn_getDODetSeqbySO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as
begin
	select a.DONo
	     , b.DOSeq
      from omTrSalesDO a
     inner join omTrSalesDODetail b
        on a.CompanyCode = b.CompanyCode
       and a.BranchCode = b.BranchCode
       and a.DONo = b.DONo
     where a.CompanyCode = @CompanyCode
       and a.BranchCode  = @BranchCode
       and a.SONo = @SONumber
end
GO
create procedure [dbo].[uspfn_CsLkuCustBdayCount]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@OutStanding char(1),
	@TotalRec int OUTPUT
as

begin
	declare @BottomLimit int;
	declare @UpperLimit int;
	declare @CurrentMonth int;
	declare @Setting int;

	set @Setting = (select top 1 SettingParam1 from CsSettings where SettingCode='REMBDAY');
	set @CurrentMonth = datepart(month, getdate());

	set @BottomLimit = @CurrentMonth - @Setting;
	set @UpperLimit = @CurrentMonth;

	if(@BottomLimit <= 0) 
		set @BottomLimit = 12 + @BottomLimit;

	if @UpperLimit >= 12 
		set @UpperLimit = @UpperLimit - 12;

	

	set @TotalRec = (
			select count(a.CustomerCode)
			  from CsLkuBirthdayView a
			 where a.CompanyCode = @CompanyCode
			   and a.BranchCode = @BranchCode
			   --and a.Outstanding = @OutStanding
			   and (case	 
							when (  select top 1

										   x.CustomerCode
									  from CsCustBirthDay x
									 where x.CompanyCode=a.CompanyCode
									   and x.CustomerCode=a.CustomerCode
							) is null then 'Y'
							--when @UpperLimit > @BottomLimit and ( datepart(month, a.CustomerBirthDate) < @BottomLimit or datepart(month, a.CustomerBirthDate) > @UpperLimit) then 'Y'
							else 'N'
					 end	 
				   ) = @OutStanding
			   and (
						DATEPART(month, a.CustomerBirthDate) >= @BottomLimit
						or
						DATEPART(month, a.CustomerBirthDate) <= @UpperLimit
				   )
		)

	return @TotalRec;
end
GO
create procedure [dbo].[uspfn_GetInvoiceNobySO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as
begin
	select *
      from omTrSalesInvoice a
     where a.CompanyCode = @CompanyCode
       and a.BranchCode  = @BranchCode
       and a.SONo = @SONumber
end
GO
CREATE Procedure [dbo].[uspfn_omUpdatePriceList]
	@CompanyCode varchar(15)='' ,
	@BranchCode varchar(15)='' ,
	@SupplierCode varchar(15)='' ,
	@GroupPrice varchar(15)='' ,
	@SalesModelCode varchar(20) ='',
	@SalesModelYear numeric(4, 0)=2015 ,
	@EffectiveDate datetime=null ,
	@RetailPriceIncludePPN numeric(18, 0)=0 ,
	@DiscPriceIncludePPN numeric(18, 0) =0,
	@NetSalesIncludePPN numeric(18, 0)=0 ,
	@RetailPriceExcludePPN numeric(18, 0)=0 ,
	@DiscPriceExcludePPN numeric(18, 0) =0,
	@NetSalesExcludePPN numeric(18, 0) =0,
	@PPNBeforeDisc numeric(18, 0) =0,
	@PPNAfterDisc numeric(18, 0) =0,
	@PPNBMPaid numeric(18, 0)=0 ,
	@isStatus bit = 1,
	@UserId varchar(20)=''
AS
BEGIN
	
	IF @BranchCode=''
	BEGIN
		declare @loopbranch varchar(20)
		declare crBranch  cursor local for
		select branchcode from gnMstCoProfile
		where companycode=@companycode

		open crBranch
		fetch next from crBranch into @loopbranch

		while @@FETCH_STATUS=0
		begin
			exec uspfn_omUpdatePriceList @companycode,@loopbranch,@SupplierCode,@GroupPrice,@SalesModelCode,@SalesModelYear,@EffectiveDate,@RetailPriceIncludePPN,@DiscPriceIncludePPN,@NetSalesIncludePPN,@RetailPriceExcludePPN,@DiscPriceExcludePPN,@NetSalesExcludePPN,@PPNBeforeDisc,@PPNAfterDisc,@PPNBMPaid,@isStatus,@UserId
			fetch next from crBranch into @loopbranch
		end

		close crbranch
		deallocate crbranch
	END
	ELSE
	BEGIN

		INSERT INTO [dbo].[omPriceListBranchesLog]
				([CompanyCode],[BranchCode],[SupplierCode],[GroupPrice],[SalesModelCode],[SalesModelYear]
				,[EffectiveDate],[RetailPriceIncludePPN],[DiscPriceIncludePPN],[NetSalesIncludePPN]
				,[RetailPriceExcludePPN],[DiscPriceExcludePPN],[NetSalesExcludePPN],[PPNBeforeDisc],[PPNAfterDisc]
				,[PPNBMPaid],[isStatus],[LastUpdateBy],[LastUpdateDate])
			VALUES
				(@companycode,@BranchCode,@SupplierCode,@GroupPrice
				,@SalesModelCode,@SalesModelYear,@EffectiveDate,@RetailPriceIncludePPN,@DiscPriceIncludePPN,@NetSalesIncludePPN,@RetailPriceExcludePPN
				,@DiscPriceExcludePPN,@NetSalesExcludePPN,@PPNBeforeDisc,@PPNAfterDisc,@PPNBMPaid,@isStatus,@UserId,getdate()) 

		IF  EXISTS(select * from omPriceListBranches	
		where companycode=@companycode and branchcode=@branchcode
		and suppliercode=@suppliercode and groupprice=@groupprice
		and SalesModelCode=@SalesModelCode and SalesModelYear=@SalesModelYear
		and EffectiveDate = @EffectiveDate)
		BEGIN
			UPDATE [omPriceListBranches] 
			SET 
				RetailPriceIncludePPN=@RetailPriceIncludePPN,
				DiscPriceIncludePPN=@DiscPriceIncludePPN,NetSalesIncludePPN=@NetSalesIncludePPN,
				RetailPriceExcludePPN=@RetailPriceExcludePPN,DiscPriceExcludePPN=@DiscPriceExcludePPN,
				NetSalesExcludePPN=@NetSalesExcludePPN,PPNBeforeDisc=@PPNBeforeDisc,
				PPNAfterDisc=@PPNAfterDisc,PPNBMPaid=@PPNBMPaid,isStatus=@isStatus,
				[LastUpdateBy]=@userid,LastUpdateDate=getdate()
			where companycode=@companycode and branchcode=@branchcode
			and suppliercode=@suppliercode and groupprice=@groupprice
			and SalesModelCode=@SalesModelCode and SalesModelYear=@SalesModelYear
			and EffectiveDate = @EffectiveDate
		END
		ELSE
		BEGIN
			INSERT INTO [dbo].[omPriceListBranches]
				   ([CompanyCode],[BranchCode],[SupplierCode],[GroupPrice],[SalesModelCode],[SalesModelYear]
				   ,[EffectiveDate],[RetailPriceIncludePPN],[DiscPriceIncludePPN],[NetSalesIncludePPN]
				   ,[RetailPriceExcludePPN],[DiscPriceExcludePPN],[NetSalesExcludePPN],[PPNBeforeDisc],[PPNAfterDisc]
				   ,[PPNBMPaid],[isStatus],CreatedBy,[CreatedDate])
			 VALUES
				   (@companycode,@BranchCode,@SupplierCode,@GroupPrice
				   ,@SalesModelCode,@SalesModelYear,@EffectiveDate,@RetailPriceIncludePPN,@DiscPriceIncludePPN,@NetSalesIncludePPN,@RetailPriceExcludePPN
				   ,@DiscPriceExcludePPN,@NetSalesExcludePPN,@PPNBeforeDisc,@PPNAfterDisc,@PPNBMPaid,@isStatus,@UserId,getdate()) 

		END


	END

END
GO
create procedure [dbo].[uspfn_CsLkuBpkb]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@OutStanding bit
as

declare @IsHolding bit
set @IsHolding = isnull((select top 1 1 from gnMstOrganizationDtl where CompanyCode = @CompanyCode and BranchCode = @BranchCode and IsBranch = 0), 0)

if @OutStanding = 1 
begin
	select top 5000 a.CompanyCode     
		 , a.BranchCode
		 , b.CustomerCode
		 , c.CustomerName
		 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
		 , a.EngineCode + convert(varchar, a.EngineNo) Engine
		 , a.SalesModelCode
		 , a.SalesModelYear
		 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
		 , isnull(e.StnkDate, g.BPKDate) StnkDate
		 , g.BPKDate
		 , isnull(h.isLeasing, 0) as IsLeasing
		 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
		 , h.LeasingCo
		 , i.CustomerName as LeasingName
		 , h.Installment
		 , PoliceRegNo = isnull(k.PoliceRegistrationNo, j.PoliceRegNo)
	  from omTrSalesInvoiceVin a    
	  left join omTrSalesInvoice b    
		on b.CompanyCode = a.CompanyCode    
	   and b.BranchCode = a.BranchCode    
	   and b.InvoiceNo = a.InvoiceNo    
	  left join gnMstCustomer c
		on c.CompanyCode = a.CompanyCode    
	   and c.CustomerCode = b.CustomerCode
	  left join omTrSalesDODetail d
		on d.CompanyCode = a.CompanyCode    
	   and d.BranchCode = a.BranchCode
	   and d.ChassisCode = a.ChassisCode
	   and d.ChassisNo = a.ChassisNo
	  left join CsCustomerVehicle e
		on e.CompanyCode = a.CompanyCode    
	   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
	  left join omTrSalesDO f
		on f.CompanyCode = d.CompanyCode    
	   and f.BranchCode = d.BranchCode
	   and f.DONo = d.DONo
	  left join omTrSalesBPK g
		on g.CompanyCode = f.CompanyCode    
	   and g.BranchCode = f.BranchCode
	   and g.DONo = f.DONo
	  left join omTrSalesSO h
		on h.CompanyCode = g.CompanyCode    
	   and h.BranchCode = g.BranchCode
	   and h.SONo = g.SONo
	  left join gnMstCustomer i
		on i.CompanyCode = h.CompanyCode
	   and i.CustomerCode = h.LeasingCo
	  left join svMstCustomerVehicle j
		on j.CompanyCode = a.CompanyCode
	   and j.ChassisCode = a.ChassisCode
	   and j.ChassisNo = a.ChassisNo
	  left join omTrSalesBPKBDetail k
		on k.CompanyCode = a.CompanyCode
	   and k.ChassisCode = a.ChassisCode
	   and k.ChassisNo = a.ChassisNo
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
	   and isnull(a.IsReturn, 0) = 0
	   and not exists (
			select 1 from CsCustBpkb 
			 where CompanyCode = a.CompanyCode
			   and CustomerCode = b.CustomerCode
			   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo))
end   
else
begin
	select top 5000 a.CompanyCode     
		 , a.BranchCode
		 , b.CustomerCode
		 , c.CustomerName
		 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
		 , a.EngineCode + convert(varchar, a.EngineNo) Engine
		 , a.SalesModelCode
		 , a.SalesModelYear
		 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
		 , isnull(e.StnkDate, g.BPKDate) StnkDate
		 , g.BPKDate
		 , isnull(h.isLeasing, 0) as IsLeasing
		 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
		 , h.LeasingCo
		 , i.CustomerName as LeasingName
		 , h.Installment
		 , PoliceRegNo = isnull(k.PoliceRegistrationNo, j.PoliceRegNo)
	  from omTrSalesInvoiceVin a    
	  left join omTrSalesInvoice b    
		on b.CompanyCode = a.CompanyCode    
	   and b.BranchCode = a.BranchCode    
	   and b.InvoiceNo = a.InvoiceNo    
	  left join gnMstCustomer c
		on c.CompanyCode = a.CompanyCode    
	   and c.CustomerCode = b.CustomerCode
	  left join omTrSalesDODetail d
		on d.CompanyCode = a.CompanyCode    
	   and d.BranchCode = a.BranchCode
	   and d.ChassisCode = a.ChassisCode
	   and d.ChassisNo = a.ChassisNo
	  left join CsCustomerVehicle e
		on e.CompanyCode = a.CompanyCode    
	   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
	  left join omTrSalesDO f
		on f.CompanyCode = d.CompanyCode    
	   and f.BranchCode = d.BranchCode
	   and f.DONo = d.DONo
	  left join omTrSalesBPK g
		on g.CompanyCode = f.CompanyCode    
	   and g.BranchCode = f.BranchCode
	   and g.DONo = f.DONo
	  left join omTrSalesSO h
		on h.CompanyCode = g.CompanyCode    
	   and h.BranchCode = g.BranchCode
	   and h.SONo = g.SONo
	  left join gnMstCustomer i
		on i.CompanyCode = h.CompanyCode
	   and i.CustomerCode = h.LeasingCo
	  left join svMstCustomerVehicle j
		on j.CompanyCode = a.CompanyCode
	   and j.ChassisCode = a.ChassisCode
	   and j.ChassisNo = a.ChassisNo
	  left join omTrSalesBPKBDetail k
		on k.CompanyCode = a.CompanyCode
	   and k.ChassisCode = a.ChassisCode
	   and k.ChassisNo = a.ChassisNo
	 where 1 = 1
	   and a.CompanyCode = @CompanyCode
	   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
	   and isnull(a.IsReturn, 0) = 0
	   and exists (
			select 1 from CsCustBpkb 
			 where CompanyCode = a.CompanyCode
			   and CustomerCode = b.CustomerCode
			   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo))
end
GO
create procedure [dbo].[uspfn_GetDONobySO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as

begin
	 select a.DoNo
       from omTrSalesDO a
      where a.CompanyCode = @CompanyCode
        and a.BranchCode  = @BranchCode
        and a.SONo = @SONumber
end
GO
CREATE procedure [dbo].[uspfn_GetPickingList]      
@CompanyCode varchar(15),        
@BranchCode varchar(15),        
@TypeOfGoods varchar(10),        
@ProductType varchar(4), 
@ProfitCenterCode varchar(5)        
as        
SELECT * FROM        
(        
    SELECT         
    a.PickingSlipNo,         
    a.PickingSlipDate,         
    a.InvoiceNo,         
    a.InvoiceDate,        
    (        
        SELECT TOP 1 PRODUCTTYPE FROM spTrnSInvoiceDtl        
        WHERE a.CompanyCode = spTrnSInvoiceDtl.CompanyCode        
        AND a.BranchCode = spTrnSInvoiceDtl.BranchCode        
        AND a.InvoiceNo = spTrnSInvoiceDtl.InvoiceNo        
    ) AS ProductType,    
    a.TotDPPAmt,    
    a.TotPPNAmt,    
    a.TotFinalSalesAmt,    
    b.CustomerCode,    
    b.CustomerName,    
    b.Address1,    
    b.Address2,    
    b.Address3,    
    b.Address4,  
    a.TransType,  
    a.CustomerCodeShip,  
    a.CustomerCodeBill,  
    a.TotSalesAmt,  
    a.TotSalesQty,
    c.TOPCode,
    d.ParaValue as TOPDays    
FROM         
    spTrnSInvoiceHdr a       
left JOIN gnMstCustomer b    
on a.CompanyCode = b.CompanyCode    
AND a.CustomerCode = b.CustomerCode   
LEFT join gnMstCustomerDealerProfitCenter c
ON c.CompanyCode = b.CompanyCode
and c.BranchCode = a.BranchCode
AND c.CustomerCode = b.CustomerCode
and c.ProfitCenterCode = @ProfitCenterCode
LEFT JOIN gnMstLookUpDtl d
on d.CompanyCode = a.CompanyCode
AND d.CodeID = 'TOPC'
and d.LookUpValue  = c.TOPCode
WHERE a.CompanyCode = @CompanyCode        
  AND a.BranchCode  = @BranchCode        
    AND a.TypeOfGoods       = @TypeOfGoods        
    AND a.Status        = 0         
) A        
WHERE A.ProductType = @ProductType        
ORDER BY A.PickingSlipNo DESC
GO
create procedure [dbo].[uspfn_TransferEmployeeToSimDMS]   
 @CompanyCode varchar(17),  
 @EmployeeID varchar(25),  
 @UserID varchar(25)  
as  
  
begin  
 declare @TransactionName varchar(25);  
 set @TransactionName='TransferEmployee';  
  
 begin transaction  
  
 begin try  
  declare @NumberOfRecord bit;  
  set @NumberOfRecord = (select count(EmployeeID) from HrEmployee where EmployeeID=@EmployeeID);  
  --select @CompanyCode, @EmployeeID, @NumberOfRecord as NumberOfRecord;  
  
  if(@NumberOfRecord < 1)   
  begin  
   insert into HrEmployee ( CompanyCode  
           , EmployeeID  
           , EmployeeName  
           , Email  
           , FaxNo  
           , Handphone1  
           , Handphone2  
           , Handphone3  
           , Handphone4  
           , Telephone1  
           , Telephone2   
           , OfficeLocation  
           , IsLinkedUser  
           , RelatedUser  
           , JoinDate  
           , Department  
           , Position  
           , Grade  
           , Rank  
           , Gender  
           , TeamLeader  
           , PersonnelStatus  
           , ResignDate  
           , ResignDescription  
           , IdentityNo  
           , NPWPNo  
           , NPWPDate  
           , BirthDate  
           , BirthPlace  
           , Address1  
           , Address2  
           , Address3  
           , Address4  
           , Province  
           , District  
           , SubDistrict  
           , Village  
           , ZipCode  
           , DrivingLicense1  
           , DrivingLicense2  
           , MaritalStatus  
           , MaritalStatusCode  
           , Height  
           , Weight  
           , UniformSize  
           , UniformSizeAlt  
           , ShoesSize  
           , FormalEducation  
           , BloodCode  
           , OtherInformation  
           , CreatedBy  
           , CreatedDate  
           , UpdatedBy  
           , UpdatedDate  
           , Religion  
           , SelfPhoto  
           , IdentityCardPhoto  
           , IsDeleted   
           )  
    select @CompanyCode              
         , a.EmployeeID  
      , a.EmployeeName  
      , Email = (  
       select top 1  
           x.Email  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )  
      , a.FaxNo  
      , Handphone1 = (  
       select top 1  
           x.Phone2  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Handphone2 = (  
       select top 1  
           x.Phone2  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Handphone3 = (  
       select top 1  
           x.Phone3  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Handphone4 = (  
       select top 1  
           x.Phone4  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        )   
      , Telephone1 = a.HpNo  
      , Telephone2 = a.PhoneNo  
      , OfficeLocation = ''  
      , IsLinkedUser = 0  
      , RelatedUser = ''  
      , Convert(datetime, a.JoinDate)  
      , Department = isnull( (  
       select top 1  
              x.HistoryDeptCode  
         from SfEmployeeTitleHistory x  
        where x.CompanyCode=a.CompanyCode  
          and a.EmployeeID=@EmployeeID  
        order by x.AssignedDate desc  
        ), (  
       select top 1  
           x.OrgCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) )  
      , Position = isnull( (  
       select top 1  
              x.HistoryPosCode  
         from SfEmployeeTitleHistory x  
        where x.CompanyCode=a.CompanyCode  
          and a.EmployeeID=@EmployeeID  
        order by x.AssignedDate desc  
        ), (  
       select top 1  
           x.PosCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) )  
      , Grade = isnull( (  
       select top 1  
              x.HistoryGrade  
         from SfEmployeeGradeHistory x  
        where x.CompanyCode=a.CompanyCode  
          and a.EmployeeID=@EmployeeID  
        order by x.AssignedDate desc  
        ), (  
       select top 1  
           x.GradeCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) )  
      , (  
       select top 1  
           x.RankCode  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        ) as RankCode  
      , a.GenderCode              
      , TeamLeader = (  
          select top 1  
           x.TeamLeaderID  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , PersonnelStatus = a.PersonnelStatus  
      , Convert(datetime, a.ResignDate)  
      , ResignDescription = (  
          select top 1  
           x.ResignReason  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.IdentityNo  
      , NPWPNo = (  
       select top 1  
           x.NPWPNo  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , NPWPDate = (  
       select top 1  
           x.NpwpDate  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.BirthDate  
      , a.BirthPlace  
      , a.Address1  
      , a.Address2  
      , a.Address3  
      , a.Address4  
      , a.ProvinceCode  
      , a.CityCode as District  
      , a.AreaCode as SubDistrict   
      , '' as Village  
      , a.ZipNo as ZipCode  
      , DrivingLicense1 = (  
       select top 1  
           x.DrivingLicense1  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , DrivingLicense1 = (  
       select top 1  
           x.DrivingLicense2  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.MaritalStatusCode as MaritalStatus  
      , '' as MaritalStatusCode  
      , a.Height  
      , a.Weight  
      , a.UniformSize  
      , UniformSizeAlt = (  
       select top 1  
           x.SizeAlt  
         from gnMstEmployeeData x  
        where x.CompanyCode=a.CompanyCode  
          and x.EmployeeID=a.EmployeeID  
        order by x.UpdatedDate desc  
        )  
      , a.ShoesSize  
      , a.FormalEducation  
      , a.BloodCode  
      , '' as OtherInformation  
      , @UserID as CreatedBy  
      , getdate()  
      , @UserID as UpdatedBy  
      , getdate()  
      , a.ReligionCode  
      , a.EmpImageID  
      , a.EmpIdentityCardImageID  
      , convert(bit, 0) as IsDeleted  
      from gnMstEmployee a  
     where 1=1  
       --and a.CompanyCode=@CompanyCode  
       and a.EmployeeID=@EmployeeID  
  
     
   insert into HrEmployeeAchievement  
   select   
       a.CompanyCode  
     , a.EmployeeID  
     , a.AssignedDate  
     , a.HistoryDeptCode  
     , a.HistoryPosCode  
     , ''  
     , 0  
     , @UserID  
     , getdate()  
     , @UserID  
     , getdate()  
     , 0  
     from SfEmployeeTitleHistory a  
    where a.CompanyCode=@CompanyCode  
      and a.EmployeeID=@EmployeeID  
  
  
  
   insert into HrEmployeeTraining  
   select   
     a.CompanyCode  
     , a.EmployeeID  
     , a.TrnCode  
     , a.TrnDate  
     , a.TrnSeq  
     , 0  
     , a.PreTest  
     , ''  
     , a.PostTest  
     , ''  
     , 'system'  
     , getdate()  
     , 'system'  
     , getdate()  
     , 0  
     from SfEmployeeTraining a  
    where a.CompanyCode=@CompanyCode  
      and a.EmployeeID=@EmployeeID  
  
  
   insert into HrEmployeeMutation  
   select a.CompanyCode  
     , a.EmployeeID  
     , a.MutationDate  
     , a.MutationTo  
     , 0  
     , 'system'  
     , getdate()  
     , 'system'  
     , getdate()  
     , 0  
     from gnMstEmployeeMutation a  
    where a.CompanyCode=@CompanyCode  
      and a.EmployeeID=@EmployeeID  
  
   insert into HrEmployeeSales  
   select @CompanyCode  
        , @EmployeeID  
     , SalesID=(  
      select top 1  
             x.SalesID  
        from gnMstEmployeeData x  
       where x.CompanyCode=@CompanyCode  
         and x.EmployeeID=@EmployeeID  
         and x.SalesID is not null  
       )  
     , @UserID  
     , getdate()  
     , convert(bit, 0)  
     , convert(bit, 0)  
     , null  
     , null  
     , convert(bit, 0)  
	 , @UserID  
     , getdate() 
   select convert(bit, 1) as Result;  
  end  
  else  
  begin  
   select convert(bit, 0) as Result;  
  end  
  
  commit transaction;  
 end try  
 begin catch  
  rollback transaction;  
  select convert(bit, 0) as Result;  
 end catch  
end  
  
--select * from HrEmployeeSAles
GO
create procedure [dbo].[uspfn_OmTrSalesSoVinList]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(35),
	@SalesModelCode varchar(35),
	@SalesModelYear decimal,
	@ColourCode varchar(35)
as

begin
	select a.*
	  from OmTrSalesSoVin a
end
GO
Create procedure [dbo].[uspfn_OmFakturPajakDtlSaveDetail]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlSaveDetail 6006410,600641001,''
INSERT INTO OmFakturPajakDetail(CompanyCode, BranchCode, InvoiceNo, BPKNo, SalesModelCode, SalesModelYear, ChassisCode
, ChassisNo, EngineNo, BeforeDiscDPP, DiscExcludePPn, AfterDiscPPn, AfterDiscPPnBM, PPnBMPaid, OthersDPP, OthersPPN)
SELECT a.CompanyCode, a.BranchCode, a.InvoiceNo, a.BPKNo, a.SalesModelCode, a.SalesModelYear, a.ChassisCode, a.ChassisNo
, a.EngineNo, b.BeforeDiscDPP, b.DiscExcludePPn, b.AfterDiscPPn, b.AfterDiscPPnBM, b.PPnBMPaid, b.OthersDPP, b.OthersPPN
FROM omTrSalesInvoiceVin a
LEFT JOIN omTrSalesInvoiceModel b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.InvoiceNo = a.InvoiceNo
AND b.BPKNo = a.BPKNo AND b.SalesModelCode = a.SalesModelCode AND b.SalesModelYear = a.SalesModelYear
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
AND a.ChassisNo NOT IN(SELECT ChassisNo FROM omFakturPajakDetail WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
AND InvoiceNo = a.InvoiceNo AND SalesModelCode = a.SalesModelCode AND ChassisCode = a.ChassisCode)
            
end
GO
CREATE procedure [dbo].[uspfn_omSlsDoLkpShipto]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @ProfitCenterCode varchar(3)
) 
as begin
--exec uspfn_omSlsDoLkpShipto 6006410,600641001,300
SELECT a.CompanyCode
	,a.CustomerCode
	,a.StandardCode
	,a.CustomerName
	,a.CustomerAbbrName
	,a.CustomerGovName
	,a.CustomerType
	,a.CategoryCode
	,a.Address1
	,a.Address2
	,a.Address3
	,a.Address4
	,a.PhoneNo
	,a.HPNo
	,a.FaxNo
	,a.isPKP
	,a.NPWPNo
	,a.NPWPDate
	,a.SKPNo
	,a.SKPDate
	,a.ProvinceCode
	,a.AreaCode
	,a.CityCode
	,a.ZipNo
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.isLocked
	,a.LockingBy
	,a.LockingDate
	,a.Email
	,a.BirthDate
	,a.Spare01
	,a.Spare02
	,a.Spare03
	,a.Spare04
	,a.Spare05
	,a.Gender
	,a.OfficePhoneNo
	,a.KelurahanDesa
	,a.KecamatanDistrik
	,a.KotaKabupaten
	,a.IbuKota
	,a.CustomerStatus
	  FROM gnMstCustomer a 
	INNER JOIN gnMstCustomerProfitCenter b
	  ON a.CompanyCode = b.CompanyCode AND 
		 a.CustomerCode = b.CustomerCode AND
		 b.BranchCode = @BranchCode
	WHERE a.CompanyCode = @CompanyCode AND 
		  b.ProfitCenterCode = @ProfitCenterCode                      
end
GO
create procedure [dbo].[uspfn_OmTrSalesSOModelOthersList]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear decimal
as
begin
	SELECT a.OtherCode
		 , (
				SELECT b.RefferenceDesc1
				  FROM omMstRefference b
			     WHERE a.CompanyCode = b.CompanyCode
				   and a.OtherCode = b.RefferenceCode 
	               and b.RefferenceType='OTHS')  AS AccsName
         , a.DPP
		 , a.PPn
		 , a.Remark
         , a.BeforeDiscTotal
		 , a.AfterDiscTotal
		 , a.AfterDiscDPP
		 , a.AfterDiscPPn
		 , a.CompanyCode
		 , a.BranchCode
		 , a.SONo
		 , a.SalesModelCode
		 , a.SalesModelYear
      FROM omTrSalesSOModelOthers a
     WHERE a.CompanyCode = @CompanyCode
       AND a.BranchCode = @BranchCode
       AND a.SONo = @SONumber
       AND a.SalesModelCode = @SalesModelCode
       AND a.SalesModelYear = @SalesModelYear
end
GO
Create procedure [dbo].[uspfn_OmFakturPajakDtlOthersSaveDetail]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30),
 @ReffType varchar(15)
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlAccsSeqSaveDetail 6006410,600641001,''
INSERT INTO OmFakturPajakDetailOthers(CompanyCode, BranchCode, InvoiceNo, SalesModelCode, SalesModelYear, OtherCode, OtherName, Quantity, DPP, PPn, Total)
SELECT a.CompanyCode, a.BranchCode, a.InvoiceNo, a.SalesModelCode, a.SalesModelYear, a.OtherCode, b.RefferenceDesc1 AS OtherName, c.Quantity, a.AfterDiscDPP, a.AfterDiscPPn, a.AfterDiscTotal
FROM omTrSalesInvoiceOthers a
LEFT JOIN omMstRefference b ON b.CompanyCode = a.CompanyCode AND b.RefferenceCode = a.OtherCode AND b.RefferenceType = @ReffType
LEFT JOIN omTrSalesInvoiceModel c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.InvoiceNo = a.InvoiceNo AND c.BPKNo = a.BPKNo
AND c.SalesModelCode = a.SalesModelCode AND c.SalesModelYear = a.SalesModelYear
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
AND a.OtherCode NOT IN(SELECT OtherCode FROM OmFakturPajakDetailOthers WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
AND InvoiceNo = a.InvoiceNo AND SalesModelCode = a.SalesModelCode AND SalesModelYear = a.SalesModelYear AND OtherCode = a.OtherCode)
           
end
GO
create procedure [dbo].[uspfn_RptSO_A01_Dtl]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(35)
as
begin
	select b.SalesModelCode
	     , b.SalesModelYear
		 , c.ColourCode
		 , e.RefferenceDesc1 as ColourName
		 , b.ChassisCode
		 , d.ChassisNo
		 , QuantitySO = (select sum(x.QuantitySO) from omTrSalesSoModel x where x.CompanyCode = a.CompanyCode and x.SONo = a.SONo)
	  from omTrSalesSo a
	 inner join omTrSalesSoModel b
	    on b.CompanyCode = a.CompanyCode
	   and b.BranchCode = a.BranchCode
	   and b.SONo = a.SONo
	 inner join OmTrSalesSOModelColour c
	    on c.CompanyCode = b.CompanyCode
	   and c.BranchCode = b.BranchCode
	   and c.SONo = b.SONo
	   and c.SalesModelCode = b.SalesModelCode
	   and c.SalesModelYear = b.SalesModelYear
	 inner join omTrSalesSOVin d
	    on d.CompanyCode = b.CompanyCode
	   and d.BranchCode = b.BranchCode
	   and d.SONo = b.SONo
	   and d.SalesModelCode = b.SalesModelCode
	   and d.SalesModelYear = b.SalesModelYear
	   and d.ChassisCode = b.ChassisCode
	   and d.ColourCode = c.ColourCode
	  left join omMstRefference e
	    on e.CompanyCode = d.CompanyCode
	   and e.RefferenceType = 'COLO'
	   and e.RefferenceCode = c.ColourCode
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and a.SONo = @SONumber
end
GO
create procedure [dbo].[uspfn_OmTrSalesSOSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , BranchCode
     , SONo
     , SODate
     , SalesType
     , RefferenceNo
     , RefferenceDate
     , CustomerCode
     , TOPCode
     , TOPDays
     , BillTo
     , ShipTo
     , ProspectNo
     , SKPKNo
     , Salesman
     , WareHouseCode
     , isLeasing
     , LeasingCo
     , GroupPriceCode
     , Insurance
     , PaymentType
     , PrePaymentAmt
     , PrePaymentDate
     , PrePaymentBy
     , CommissionBy
     , CommissionAmt
     , PONo
     , ContractNo
     , RequestDate
     , Remark
     , Status
     , ApproveBy
     , ApproveDate
     , RejectBy
     , RejectDate
     , CreatedBy
     , CreatedDate
     , LastUpdateBy
     , LastUpdateDate
     , isLocked
     , LockingBy
     , LockingDate
     , SalesCode 
     , Installment
     , FinalPaymentDate
     , SalesCoordinator
     , SalesHead
     , BranchManager
  from omTrSalesSO
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_OmTrSalesSOSend @LastUpdateDate='2013-01-01', @Segment=1
GO
create procedure [dbo].[uspfn_checkdailyaccess]
@userid varchar(32)
as
if exists (select top 1 1 from sysRoleMenu
where RoleId = (select roleid from sysroleUser where userid=@userid)
and menuid = 'gnpostdaily')
	select 1 [result]
else
	select 0 [result]
GO
create procedure [dbo].[uspfn_SyncCsCustomerVehicleViewInitialize]
as
begin
	;with x as (
	select a.CompanyCode
		 , b.BranchCode
		 , a.CustomerCode
		 , (d.ChassisCode + convert(varchar, d.ChassisNo)) as Chassis
		 , (d.EngineCode + convert(varchar, d.EngineNo)) as Engine
		 , b.SONo
		 , c.DONo
		 , c.DODate
		 , g.BpkNo
		 , d.SalesModelCode as CarType
		 , d.ColourCode as Color
		 , b.Salesman as SalesmanCode
		 , f.EmployeeName as SalesmanName
		 , e.PoliceRegNo
		 , c.DODate as DeliveryDate
		 , d.SalesModelCode
		 , d.SalesModelYear
		 , d.ColourCode
		 , g.BPKDate
		 , b.IsLeasing
		 , b.LeasingCo
		 , h.CustomerName as LeasingName
		 , b.Installment
	  from GnMstCustomer a
	 inner join omTrSalesSO b
		on b.CompanyCode = a.CompanyCode
	   and b.CustomerCode = a.CustomerCode
	  left join omTrSalesDO c
		on c.CompanyCode = b.CompanyCode
	   and c.CustomerCode = b.CustomerCode
	   and c.SONo = b.SONo
	  left join omTrSalesDODetail d
		on d.CompanyCode = c.CompanyCode
	   and d.BranchCode = c.BranchCode
	   and d.DONo = c.DONo
	  left join svMstCustomerVehicle e
		on e.CompanyCode = d.CompanyCode
	   and e.ChassisCode = d.ChassisCode
	   and e.ChassisNo = d.ChassisNo
	  left join HrEmployee f
		on f.CompanyCode = b.CompanyCode
	   and f.EmployeeID = b.Salesman
	  left join OmTrSalesBpk g
		on g.CompanyCode = c.CompanyCode
	   and g.BranchCode = c.BranchCode
	   and g.DONo = c.DONo
	   and g.SONo = c.SONo
	  left join gnMstCustomer h
		on h.CompanyCode = b.CompanyCode
	   and h.CustomerCode = b.LeasingCo
	 where 1 = 1
	   and d.ChassisCode is not null
	   and d.EngineCode is not null
	   and b.SODate is not null
	   and c.DODate is not null
	   and g.BpkNo is not null
	   and isnull(d.StatusBPK, 3) != '3'
	   and isnull(g.Status, 3) != '3'
	   and year(c.DODate) = year(getdate())
	)

	--select * from x
	select * into #t1 from (select * from x)#

--	delete CsCustomerVehicleView
--	 where exists (
--		select top 1 1 from #t1
--		 where #t1.CompanyCode = CsCustomerVehicleView.CompanyCode
--		   and #t1.BranchCode = CsCustomerVehicleView.BranchCode
--		   and #t1.Chassis = CsCustomerVehicleView.Chassis
--	 )
--
--	insert into CsCustomerVehicleView (CompanyCode, BranchCode, CustomerCode, Chassis, Engine, SONo, DONo, DoDate, BpkNo, CarType, Color, SalesmanCode, SalesmanName, PoliceRegNo, DeliveryDate, SalesModelCode, SalesModelYear, ColourCode, BpkDate, IsLeasing, LeasingCo,
--	 LeasingName, Installment)
--	select * from #t1

--	drop table CsCustomerVehicleView
	select * into CsCustomerVehicleView from #t1

	drop table #t1
end
GO
create procedure [dbo].[uspfn_PmActivities] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode, BranchCode, InquiryNumber, ActivityID, ActivityDate, ActivityType, ActivityDetail, NextFollowUpDate, CreationDate, CreatedBy, LastUpdateBy, LastUpdateDate
  from pmActivities
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1
 
declare @LastUpdateQry datetime
    set @LastUpdateQry = (select top 1 LastUpdateDate from #t1 order by LastUpdateDate desc)

select * from #t1
 union
select CompanyCode, BranchCode, InquiryNumber, ActivityID, ActivityDate, ActivityType, ActivityDetail, NextFollowUpDate, CreationDate, CreatedBy, LastUpdateBy, LastUpdateDate
  from pmActivities
 where LastUpdateDate = @LastUpdateQry
 
  drop table #t1

--go

--uspfn_PmActivities @LastUpdateDate='2013-10-10 00:00:00',@Segment=500
GO
create procedure [dbo].[uspfn_OmTrSalesBPKSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , BranchCode
     , BPKNo
     , BPKDate
     , DONo
     , SONo
     , CustomerCode
     , ShipTo
     , WareHouseCode
     , Expedition
     , Remark
     , Status
     , CreatedBy
     , CreatedDate
     , LastUpdateBy
     , LastUpdateDate
     , isLocked
     , LockingBy
     , LockingDate
  from omTrSalesBPK
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_OmTrSalesBPKSend @LastUpdateDate='2013-01-01', @Segment=1
GO
create procedure [dbo].[uspfn_CsRemovePendingBpkbRetrieval]
	@CompanyCode varchar(13),
	@CustomerCode varchar(13)
as
	
begin
	update CsBpkbRetrievalInformation
	   set IsDeleted=1
	 where CompanyCode=@CompanyCode
	   and CustomerCode=@CustomerCode
end
GO
create procedure [dbo].[uspfn_OmTrSalesModelList]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SoNumber varchar(35)
as

begin
	select a.* 
	     , b.SalesModelDesc
	  from omTrSalesSOModel a
	 inner join omMstModelYear b
	    on a.CompanyCode = b.CompanyCode
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	   and b.Status in ('1', '2')
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and a.SONo = @SoNumber
end
GO
create procedure [dbo].[uspfn_CsHolidaySend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , PeriodYear
     , GiftSeq
     , ReligionCode
     , HolidayCode
     , IsGiftCard
     , IsGiftLetter
     , IsGiftSms
     , IsGiftSouvenir
     , SouvenirSent
     , SouvenirReceived
     , Comment
     , Additional
     , Status
     , CreatedBy
     , CreatedDate
     , UpdatedBy
     , UpdatedDate
  from CsCustHoliday
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1
GO
CREATE procedure [dbo].[uspfn_sp_inquiry_sales_order]
	@companycode varchar(15), 
	@branchcode varchar(15), 
	@OrderBy varchar(50),
	@CustomParameter varchar(100),
	@RangeDate varchar(100) 
 AS
	SET NOCOUNT ON;

	DECLARE @SQLQuery NVARCHAR(MAX)
	
	SET @SQLQuery = '
	SELECT
    ROW_NUMBER() OVER(ORDER BY ' + @OrderBy + ' ) RowNumber
    , (SELECT LookUpValueName FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = ''PYBY'' AND 
        LookUpValue = SOHdr.PaymentCode) PaymentBy
	, a.PickingSlipNo
	, a.PickingSlipDate
    , ISNULL(UPPER((SELECT LookUpValueName FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 
        ''STAT'' AND LookUpValue = a.Status)), ''-'') StatusPickingSlip
	, ISNULL(b.InvoiceNo, ''-'') InvoiceNo
	, b.InvoiceDate
    , ISNULL(UPPER((SELECT LookUpValueName FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 
        ''STAT'' AND LookUpValue = b.Status)), ''-'') StatusInvoice
	, ISNULL(c.FPJNo, ''-'') FPJNo
    , c.FPJDate
    , ISNULL(UPPER((SELECT LookUpValueName FROM gnMstLookUpDtl WHERE CompanyCode = a.CompanyCode AND CodeID = 
        ''STAT'' AND LookUpValue = c.Status)), ''-'') StatusFPJ
	, Cust.CustomerName
	, c.DueDate
	, c.FPJGovNo
	, c.FPJSignature
	, ISNULL(c.TOPDays, 0) TOPDays
	, ISNULL(c.TotSalesAmt, 0) TotSalesAmt
	, ISNULL(c.TotDiscAmt, 0) TotDiscAmt
	, ISNULL(c.TotDPPAmt, 0) TotDPPAmt
	, ISNULL(c.TotPPNAmt, 0) TotPPNAmt
	, ISNULL(c.TotFinalSalesAmt, 0) TotFinalSalesAmt
    , CONVERT(BIT, CASE WHEN LEN(ISNULL(c.FPJNo, '''')) = 0 THEN 0 ELSE 1 END) IsTransferGL
FROM
	spTrnSPickingHdr a WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnSInvoiceHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.PickingSlipNo = b.PickingSlipNo
	LEFT JOIN spTrnSFPJHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.FPJNo = c.FPJNo	    
	LEFT JOIN (
		SELECT	
			DISTINCT(x.CompanyCode), x.BranchCode, PickingSlipNo, PaymentCode
		FROM
			spTrnSORDHdr x WITH(NOLOCK, NOWAIT)
			LEFT JOIN spTrnSPickingDtl y WITH(NOLOCK, NOWAIT) ON x.CompanyCode = y.CompanyCode
				AND x.BranchCode = y.BranchCode
				AND x.DocNo = y.DocNo
	) SOHdr ON a.CompanyCode = SOHdr.CompanyCode
		AND a.BranchCode = SOHdr.BranchCode
		AND a.PickingSlipNo = SOHdr.PickingSlipNo
    LEFT JOIN (
        SELECT 
            CompanyCode, CustomerCode, CustomerName + '' ('' + CustomerCode + '')'' CustomerName
        FROM 
            gnMstCustomer WITH(NOLOCK, NOWAIT)
    ) Cust ON a.CompanyCode = Cust.CompanyCode
	    AND a.CustomerCode = Cust.CustomerCode
WHERE
	a.CompanyCode ='''+ @CompanyCode + '''
	AND a.BranchCode =''' + @BranchCode + '''
    AND a.SalesType = ''0''
	--AND a.TypeOfGoods = @TypeOfGoods
    ' + @CustomParameter + ' 
    ' + @RangeDate + '
ORDER BY
	RowNumber
SELECT
	SUM(ISNULL(c.TotSalesAmt, 0)) TotSalesAmt
	, SUM(ISNULL(c.TotDiscAmt, 0)) TotDiscAmt
	, SUM(ISNULL(c.TotDPPAmt, 0)) TotDPPAmt
	, SUM(ISNULL(c.TotPPNAmt, 0)) TotPPNAmt
	, SUM(ISNULL(c.TotFinalSalesAmt, 0)) TotFinalSalesAmt
FROM
	spTrnSPickingHdr a WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnSInvoiceHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.PickingSlipNo = b.PickingSlipNo
	LEFT JOIN spTrnSFPJHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND b.FPJNo = c.FPJNo	    
	LEFT JOIN (
		SELECT	
			DISTINCT(x.CompanyCode), x.BranchCode, PickingSlipNo, PaymentCode
		FROM
			spTrnSORDHdr x WITH(NOLOCK, NOWAIT)
			LEFT JOIN spTrnSPickingDtl y WITH(NOLOCK, NOWAIT) ON x.CompanyCode = y.CompanyCode
				AND x.BranchCode = y.BranchCode
				AND x.DocNo = y.DocNo
	) SOHdr ON a.CompanyCode = SOHdr.CompanyCode
		AND a.BranchCode = SOHdr.BranchCode
		AND a.PickingSlipNo = SOHdr.PickingSlipNo
    LEFT JOIN (
        SELECT 
            CompanyCode, CustomerCode, CustomerName + '' ('' + CustomerCode + '')'' CustomerName
        FROM 
            gnMstCustomer WITH(NOLOCK, NOWAIT)
    ) Cust ON a.CompanyCode = Cust.CompanyCode
	    AND a.CustomerCode = Cust.CustomerCode
WHERE
	a.CompanyCode = ''' + @CompanyCode + '''
	AND a.BranchCode = ''' + @BranchCode + '''
    AND a.SalesType = ''0''
	--AND a.TypeOfGoods = @TypeOfGoods
    ' + @CustomParameter + ' 
    ' + @RangeDate 

	EXECUTE sp_executesql @SQLQuery
GO
create procedure [dbo].[uspfn_CsLkuTDayCall]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@OutStanding bit
as
begin
	declare @IsHolding bit
	set @IsHolding = isnull((select top 1 1 from gnMstOrganizationDtl where CompanyCode = @CompanyCode and BranchCode = @BranchCode and IsBranch = 0), 0)

	if @OutStanding = 1 
	begin
		select top 5000 a.CompanyCode     
			 , a.BranchCode
			 , b.CustomerCode
			 , c.CustomerName
			 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
			 , a.EngineCode + convert(varchar, a.EngineNo) Engine
			 , a.SalesModelCode
			 , a.SalesModelYear
			 , e.DODate
			 , PoliceRegNo = f.PoliceRegistrationNo
		  from omTrSalesInvoiceVin a    
		  left join omTrSalesInvoice b    
			on b.CompanyCode = a.CompanyCode    
		   and b.BranchCode = a.BranchCode    
		   and b.InvoiceNo = a.InvoiceNo    
		  left join gnMstCustomer c
			on c.CompanyCode = a.CompanyCode    
		   and c.CustomerCode = b.CustomerCode
		  left join omTrSalesDODetail d
			on d.CompanyCode = a.CompanyCode    
		   and d.BranchCode = a.BranchCode
		   and d.ChassisCode = a.ChassisCode
		   and d.ChassisNo = a.ChassisNo
		  left join omTrSalesDO e
			on e.CompanyCode = d.CompanyCode    
		   and e.BranchCode = d.BranchCode
		   and e.DONo = d.DONo
		  left join omTrSalesBPKBDetail f
			on f.CompanyCode = a.CompanyCode    
		   and f.ChassisCode = a.ChassisCode
		   and f.ChassisNo = a.ChassisNo
		 where 1 = 1
		   and a.CompanyCode = @CompanyCode
		   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
		   and isnull(a.IsReturn, 0) = 0
		   and e.DODate is not null
		   and year(e.DODate) = year(getdate())
		   and not exists (
				select 1 from CsTDayCall 
				 where CompanyCode = a.CompanyCode
				   and CustomerCode = b.CustomerCode
				   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo))
	end   
	else
	begin
		select a.CompanyCode     
			 , a.BranchCode
			 , b.CustomerCode
			 , c.CustomerName
			 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
			 , a.EngineCode + convert(varchar, a.EngineNo) Engine
			 , a.SalesModelCode
			 , a.SalesModelYear
			 , e.DODate
			 , PoliceRegNo = f.PoliceRegistrationNo
		  from omTrSalesInvoiceVin a    
		  left join omTrSalesInvoice b    
			on b.CompanyCode = a.CompanyCode    
		   and b.BranchCode = a.BranchCode    
		   and b.InvoiceNo = a.InvoiceNo    
		  left join gnMstCustomer c
			on c.CompanyCode = a.CompanyCode    
		   and c.CustomerCode = b.CustomerCode
		  left join omTrSalesDODetail d
			on d.CompanyCode = a.CompanyCode    
		   and d.BranchCode = a.BranchCode
		   and d.ChassisCode = a.ChassisCode
		   and d.ChassisNo = a.ChassisNo
		  left join omTrSalesDO e
			on e.CompanyCode = d.CompanyCode    
		   and e.BranchCode = d.BranchCode
		   and e.DONo = d.DONo
		  left join omTrSalesBPKBDetail f
			on f.CompanyCode = a.CompanyCode    
		   and f.ChassisCode = a.ChassisCode
		   and f.ChassisNo = a.ChassisNo
		 where 1 = 1
		   and a.CompanyCode = @CompanyCode
		   and a.BranchCode = (case @IsHolding when 1 then a.BranchCode else @BranchCode end)
		   and isnull(a.IsReturn, 0) = 0
		   and year(e.DODate) = year(getdate())
		   and exists (
				select 1 from CsTDayCall 
				 where CompanyCode = a.CompanyCode
				   and CustomerCode = b.CustomerCode
				   and Chassis = a.ChassisCode + convert(varchar, a.ChassisNo))
	end   
end
GO
CREATE procedure [dbo].[uspfn_OmRpSalesTrn001B] 

(
	@CompanyCode VARCHAR(15),
	@BranchCode	VARCHAR(15),
	@SONoFrom VARCHAR(15),
	@SONoEnd VARCHAR(15),
	@param bit
)

AS

BEGIN
--	declare	@CompanyCode varchar(15)
--	declare @BranchCode varchar(15)
--	declare @SONoFrom varchar(15)
--	declare @SONoEnd varchar(15)
--	declare @param bit
--
--	set @CompanyCode ='6114201'
--	set @BranchCode ='611420100'
--	set @SONoFrom ='SOA/12/000537'
--	set @SONoEnd ='SOA/12/000537'
--	set @param ='1'
--	
	declare @tabData as table 
	(
		CompanyCode		varchar(max),
		BranchCode		varchar(max),
		SoNo			varchar(max),
		Prefix			char(1),
		Model			varchar(max),
		Remark			varchar(max),
		Satuan			decimal(18,0),		
		Qty				decimal(6,0),
		Total			decimal(18,0),		
		BBN				decimal(18,0),		
		Accs			decimal(18,0),		
		Diskon			decimal(18,0),		
		Lain			decimal(18,0),		
		Jumlah			decimal(18,0),
		ChassisNo		int,
		EngineNo		int
	)

	-- INITIAL TABLE FOR UNIT --
	----------------------------
	SELECT * INTO #tUnit FROM (
		SELECT  
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, b.SalesModelCode Model
			, b.SalesModelYear ModelYear
			, c.ColourCode
			, b.BeforeDiscTotal Satuan
			, case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end Qty
			, SUM(ISNULL(d.bbn, 0))+ SUM(ISNULL(d.kir, 0))as BBN
			, (b.OthersDPP+b.OthersPPn) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end) as Accesories
			, b.DiscIncludePPN * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end) as Potongan
			, (b.ShipAmt+b.DepositAmt+b.OthersAmt) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end) as Lainlain 
			, isnull(d.ChassisNo,0) ChassisNo
			, isnull(d.EngineNo,0) EngineNo
		FROM OmTrSalesSO a
		INNER JOIN OmTrSalesSOModel b on a.companyCode = b.companyCode 
			AND a.branchCode = b.branchCode 
			AND a.SONo = b.SONo
		INNER JOIN OmTrSalesSOModelColour c on c.companyCode = b.companyCode 
			AND c.branchCode = b.branchCode 
			AND c.SONo = b.SONo
			AND c.salesModelCode = b.salesModelCode 
			AND c.salesModelYear = b.salesModelYear
		LEFT JOIN OmTrSalesSOVin d on d.companyCode = c.companyCode 
			AND d.branchCode = c.branchCode
			AND d.SONo = c.SONo 
			AND d.salesModelCode = c.salesModelCode 
			AND d.salesModelYear = c.salesModelYear 
			AND c.colourCode = d.colourCode
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
		GROUP BY a.CompanyCode
			, a.BranchCode
			, a.SONo
			, b.SalesModelCode
			, b.SalesModelYear
			, c.ColourCode
			, b.BeforeDiscTotal
			, case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end
			, b.BeforeDiscTotal * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)
			, (b.OthersDPP+b.OthersPPn) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)
			, b.DiscIncludePPN * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)
			, (b.ShipAmt+b.DepositAmt+b.OthersAmt) * (case when isnull(d.ChassisNo,0) = 0 then c.Quantity else 1 end)	
			, d.ChassisNo
			, d.EngineNo

		-- SISA UNIT YANG BELUM ADA VIN

		UNION 

		SELECT 
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, b.SalesModelCode Model
			, b.SalesModelYear ModelYear
			, c.ColourCode
			, b.BeforeDiscTotal Satuan
			, c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode and branchcode=a.branchcode and sono=a.sono 
				and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear and colourcode=c.colourcode)as Qty
			, 0 BBN
			, (b.OthersDPP+b.OthersPPn) * (c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode 
				and branchcode=a.branchcode and sono=a.sono and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear 
				and colourcode=c.colourcode)) as Accessories
			, b.DiscIncludePPN * (c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode and branchcode=a.branchcode 
				and sono=a.sono and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear and colourcode=c.colourcode)) as Potongan
			, (b.ShipAmt+b.DepositAmt+b.OthersAmt) * (c.quantity - (select count(*) from OmTrSalesSOVin where companycode=a.companycode 
				and branchcode=a.branchcode and sono=a.sono and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear 
				and colourcode=c.colourcode)) as Lainlain
			, 0 ChassisNo
			, 0 EngineNo
		FROM OmTrSalesSO a
		INNER JOIN OmTrSalesSOModel b on a.companyCode = b.companyCode 
			AND a.branchCode = b.branchCode 
			AND a.SONo = b.SONo
		INNER JOIN OmTrSalesSOModelColour c on a.companyCode = c.companyCode 
			AND a.branchCode = c.branchCode 
			AND a.SONo = c.SONo
			AND c.SalesModelCode=b.SalesModelCode
			AND c.SalesModelYear=b.SalesModelYear
		WHERE a.CompanyCode=@COmpanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
			AND c.quantity-(select count(*) from OmTrSalesSOVin where companycode=a.companycode and branchcode=a.branchcode and sono=a.sono 
					and salesmodelcode=b.salesmodelcode and salesmodelyear=b.salesmodelyear and colourcode=c.colourcode)>0
	) #tUnit


	set @param = 1;


	IF (@param=1)
	BEGIN
		-- DETAIL PART DISEMBUNYIKAN --
		-------------------------------

		SELECT * INTO #t1 FROM (
		SELECT 
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, sum((floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100)) * isnull(a.qty,0)) Total
			, sum((floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100) - isnull(a.Afterdisctotal,0)) * isnull(a.qty,0)) Potongan
			, sum((floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100) - 
				(floor((isnull(a.retailprice,0) * (100+isnull(d.TaxPct,0)))/100) - isnull(a.Afterdisctotal,0))) * isnull(a.qty,0)) Jumlah
		FROM omTrSalesSOAccsSeq a
		INNER JOIN omTrSalesSO b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
		LEFT JOIN gnMstCustomerProfitCenter c ON c.CompanyCode=a.CompanyCode
			AND c.BranchCode=a.BranchCode
			AND c.CustomerCode=b.CustomerCode
			AND c.ProfitCenterCode='100'
		LEFT JOIN gnMstTax d ON d.CompanyCode=a.CompanyCode
			AND d.TaxCode=c.TaxCode
		WHERE a.CompanyCode=@CompanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd 
			AND a.partSeq=1
		GROUP BY a.CompanyCode, a.BranchCode, a.SONo
		) #t1

		INSERT INTO @tabData
		SELECT  
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'A'
			, b.Model
			, b.ColourCode+' - '+isnull(e.RefferenceDesc1,'') Remark
			, b.Satuan+isnull(f.Total,0) AS Satuan
			, b.Qty
			, (b.Satuan+isnull(f.Total,0)) * b.Qty AS Total
			, b.BBN
			, b.Accesories
			, b.Potongan+(isnull(f.Potongan,0)*b.Qty)
			, b.Lainlain 
			, (b.Satuan*b.Qty) + b.BBN + b.Accesories - b.Potongan + b.LainLain + (isnull(f.Jumlah,0)*b.Qty) AS Jumlah
			, b.ChassisNo
			, b.EngineNo
		FROM OmTrSalesSO a
		INNER JOIN #tUnit b on b.companyCode = a.companyCode 
			AND b.branchCode = a.branchCode 
			AND b.SONo = a.SONo
		LEFT JOIN omMstRefference e ON e.CompanyCode = b.CompanyCode
			AND e.RefferenceType = 'COLO'
			AND e.RefferenceCode = b.ColourCode
		LEFT JOIN #t1 f ON f.CompanyCode=a.CompanyCode
			AND f.BranchCode=a.BranchCode
			AND f.SONo=a.SONo
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd	
		UNION ALL

		SELECT DISTINCT
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'B'
			, 'SPAREPART/ACCS :'
			, ''
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
		FROM OmTrSalesSO a
		INNER JOIN omTrSalesSOAccsSeq b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
			AND b.PartSeq=1
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd

		UNION ALL

		SELECT 
			  a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'C'
			, a.PartNo Model
			, isnull(c.PartName,'') Remark
			, 0 Satuan
			, a.demandqty Qty
			, 0 Total
			, 0 BBN
			, 0 Accesories
			, 0 Potongan
			, 0 LainLain
			, 0 Jumlah
			, 0 Rangka
			, 0 Mesin
		FROM omTrSalesSOAccsSeq a
		INNER JOIN omTrSalesSO b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
		LEFT JOIN SpMStItemInfo c ON c.CompanyCode=a.CompanyCode
			AND c.PartNo=a.PartNo
		LEFT JOIN gnMstCustomerProfitCenter d ON d.CompanyCode=a.CompanyCode
			AND d.BranchCode=a.BranchCode
			AND d.CustomerCode=b.CustomerCode
			AND ProfitCenterCode='100'
		LEFT JOIN gnMstTax e ON e.CompanyCode=a.CompanyCode
			AND e.TaxCode=d.TaxCode
		WHERE a.CompanyCode=@CompanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd 
			AND a.partSeq=1	

		DROP TABLE #t1

	END

	ELSE

	BEGIN
		-- TAMPILKAN PART DETAIL --
		---------------------------		

		SELECT * INTO #tPart FROM (
		SELECT 
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, a.PartNo Model
			, isnull(c.PartName,'') Remark
			, floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100) Satuan
			, a.demandqty Qty
			, (floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100))*a.demandqty Total
			, 0 BBN
			, 0 Accesories
			, (floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100)-a.Afterdisctotal)*a.demandqty Potongan
			, 0 LainLain
			, (floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100)-(floor((a.retailprice*(100+isnull(e.TaxPct,0)))/100)-a.Afterdisctotal))*a.demandqty Jumlah
		FROM omTrSalesSOAccsSeq a
		INNER JOIN omTrSalesSO b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
		LEFT JOIN SpMStItemInfo c ON c.CompanyCode=a.CompanyCode
			AND c.PartNo=a.PartNo
		LEFT JOIN gnMstCustomerProfitCenter d ON d.CompanyCode=a.CompanyCode
			AND d.BranchCode=a.BranchCode
			AND d.CustomerCode=b.CustomerCode
			AND ProfitCenterCode='100'
		LEFT JOIN gnMstTax e ON e.CompanyCode=a.CompanyCode
			AND e.TaxCode=d.TaxCode
		WHERE a.CompanyCode=@CompanyCode
			AND a.BranchCode=@BranchCode
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd 
			AND a.partSeq=1
		) #tPart

		

		INSERT INTO @tabData
		SELECT  
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'A'
			, b.Model
			, b.ColourCode+' - '+isnull(e.RefferenceDesc1,'') Remark
			, b.Satuan
			, b.Qty
			, b.Satuan*b.Qty AS Total
			, b.BBN
			, b.Accesories
			, b.Potongan
			, b.Lainlain 
			, (b.Satuan*b.Qty) + b.BBN + b.Accesories - b.Potongan + b.LainLain Jumlah
			, b.ChassisNo
			, b.EngineNo
		FROM OmTrSalesSO a
		INNER JOIN #tUnit b on b.companyCode = a.companyCode 
			AND b.branchCode = a.branchCode 
			AND b.SONo = a.SONo
		LEFT JOIN omMstRefference e ON e.CompanyCode = b.CompanyCode
			AND e.RefferenceType = 'COLO'
			AND e.RefferenceCode = b.ColourCode
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd

		UNION ALL

		SELECT DISTINCT
			a.CompanyCode
			, a.BranchCode
			, a.SONo
			, 'B'
			, 'SPAREPART/ACCS :'
			, ''
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
			, 0
		FROM OmTrSalesSO a
		INNER JOIN omTrSalesSOAccsSeq b ON b.CompanyCode=a.CompanyCode
			AND b.BranchCode=a.BranchCode
			AND b.SONo=a.SONo
			AND b.PartSeq=1
		WHERE a.companyCode = @CompanyCode 
			AND a.branchCode = @BranchCode 
			AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
		UNION ALL
		SELECT
			CompanyCode
			, BranchCode
			, SONo
			, 'C'
			, Model
			, Remark
			, Satuan
			, Qty
			, Total
			, BBN
			, Accesories
			, Potongan
			, LainLain
			, Jumlah
			, 0
			, 0
		FROM #tPart
		DROP TABLE #tPart
	END



--select * from @tabData
	-- DATA RESULT --
	-----------------
   SELECT  
		  a.SONo + case a.SalesType when '0' then '-W' when '1' then '-D' end  AS SONo
		, a.SKPKNo
		, a.RefferenceNo
		, a.SODate
		, b.Model
		, b.Model SalesModelCode
		, b.Remark
		, b.Remark ColourCode
		, b.Satuan 
		, b.Satuan BeforeDiscTotal
		, b.Qty
		, b.Qty Quantity
		, b.Total
		, b.BBN
		, b.Accs
		, b.Accs Accesories
		, b.Diskon Diskon
		, b.Diskon Potongan
		, b.Lain
		, b.Lain LainLain
		, b.Jumlah
		, b.Jumlah SubTotal
		, d.EmployeeName +' ['+a.Salesman+']' as Sales
		, CASE a.SalesType WHEN '0' THEN 'WHOLESALE' WHEN '1' THEN 'DIRECT' END AS TipeSales
		, a.RefferenceNo
		, c.CustomerName +' ['+a.CustomerCode+']' as Pelanggan
		, a.RequestDate
		, dateadd(day, convert(int, e.ParaValue), a.SODate) as JatuhTempo
		, e.LookUpValueName as TOPCode
		, a.shipto
		, g.CustomerName as ShipName
		, a.PrePaymentAmt
		, f.CustomerName as Leasing
		, a.Remark as Ket
		, a.SKPKNo
		, upper(sign1.SignName) AS SignName
		, upper(sign1.TitleSign) AS TitleSign
		, b.ChassisNo
		, b.EngineNo
		, b.Prefix
		, @param HidePart
	FROM OmTrSalesSO a
	INNER JOIN @tabData b on b.companyCode = a.companyCode 
		AND b.branchCode = a.branchCode 
		AND b.SONo = a.SONo
	LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode
		AND c.CustomerCode = a.CustomerCode
	LEFT JOIN HrEmployee d ON d.companyCode = a.companyCode
		--AND d.branchCode = a.branchCode
		AND d.EmployeeID= a.salesman
	LEFT JOIN gnMstLookUpDtl e ON e.CompanyCode = a.CompanyCode
		AND e.CodeID = 'TOPC'
		AND e.LookUpValue = a.TOPCode
	LEFT JOIN gnMstCustomer f ON f.CompanyCode = a.CompanyCode
		AND f.CustomerCode = a.LeasingCo
	LEFT JOIN gnMstCustomer g ON g.CompanyCode = a.CompanyCode
		AND g.CustomerCode = a.shipTo
	LEFT JOIN gnMstSignature AS sign1 ON sign1.CompanyCode = a.CompanyCode
		AND sign1.BranchCode = a.BranchCode
		AND sign1.ProfitCenterCode = '100'
		AND sign1.DocumentType = 'SON'
		AND sign1.SeqNo = '1'
	WHERE a.companyCode = @CompanyCode 
		AND a.branchCode = @BranchCode 
		AND a.SONo BETWEEN @SONoFrom AND @SONoEnd
	ORDER BY a.SONo, b.Prefix, b.Model

	

	DROP TABLE #tUnit
END
GO
CREATE procedure [dbo].[uspfn_getsplist]
as
declare ms_crs_syscom  CURSOR LOCAL FOR  
select ROUTINE_NAME from information_schema.ROUTINES
where ROUTINE_TYPE='procedure' 
and ROUTINE_NAME not in (Select * from a_sp_list_on_dealer) 
order by ROUTINE_NAME

declare @SyscomText varchar(255), @id bigint, @textsql varchar(MAX), @tmpsql varchar(MAX)

OPEN ms_crs_syscom

FETCH NEXT from ms_crs_syscom into @SyscomText

WHILE @@fetch_status >= 0
begin
	
	select @id=id from sys.sysobjects where name=@SyscomText and xtype not in ('S','U')
	

	declare ms_sql_script  CURSOR LOCAL FOR  
	select text from sys.syscomments where id=@id order by colid

	set @textsql='
if object_id('''+ @SyscomText +''') is not null
	drop procedure ' + @SyscomText + '
GO
'

print @textsql

	open ms_sql_script
	FETCH NEXT from ms_sql_script into @tmpsql
	WHILE @@fetch_status >= 0
	begin
		
		print @tmpsql

		FETCH NEXT from ms_sql_script into @tmpsql

		if  @@fetch_status >= 0
			print '<<GAP>>'
	end
	CLOSE  ms_sql_script
	DEALLOCATE 	ms_sql_script
	
	print '
GO
'

	FETCH NEXT from ms_crs_syscom into @SyscomText
end


CLOSE  ms_crs_syscom
DEALLOCATE 	ms_crs_syscom
GO
create procedure [dbo].[uspfn_OmTrSalesSOModelList]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(50)
	--@GroupPriceCode varchar(25)
as

begin
	select a.*
	  from omTrSalesSOModel a
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and a.SONo = @SONumber
end
GO
CREATE procedure [dbo].[uspfn_OmGetStockDataTable]
	@CompanyCode varchar(20),
	@DateBegin datetime,
	@DateEnd datetime
AS
--exec uspfn_OmGetStockDataTable '6006406','20120101','20121230'
BEGIN
	SELECT '1'  AS RecordID, b.BPUDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
		   THEN
				 'B1'
			  ELSE
				 'B2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, b.RefferenceDONo AS DONo,

		   (CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
			THEN '' ELSE b.SupplierCode END)  AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE b.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a
		LEFT JOIN omTrPurchaseBPUDetail c on a.CompanyCode = c.CompanyCode and a.ChassisCode = c.ChassisCode and a.ChassisNo = c.ChassisNo
		LEFT JOIN omTrPurchaseBPU b on b.CompanyCode = c.CompanyCode and b.BranchCode = c.BranchCode and b.BPUNo = c.BPUNo
	 WHERE a.CompanyCode = b.CompanyCode
		   AND a.BPUNo = b.BPUNo
		   AND CONVERT(VARCHAR, b.BPUDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND b.CompanyCode = @CompanyCode 

	UNION
	SELECT '1'  AS RecordID, b.BPUDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
		   THEN
				 'B1'
			  ELSE
				 'B2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, b.RefferenceDONo AS DONo,
			(CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = b.SupplierCode)  = '2000000'
			THEN '' ELSE b.SupplierCode END) AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE b.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicleTemp a, omTrPurchaseBPU b
	 WHERE a.CompanyCode = b.CompanyCode
		   AND a.BPUNo = b.BPUNo AND a.IsActive = 1
		   AND CONVERT(VARCHAR, b.BPUDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND b.CompanyCode = @CompanyCode 


	UNION
	SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = x.CompanyCode AND SupplierCode = x.SupplierCode) = '2000000'
		   THEN
				 'R1'
			  ELSE
				 'R2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
			(CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = x.SupplierCode)  = '2000000'
			THEN '' ELSE x.SupplierCode END) AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE x.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	 FROM omMstVehicle a
	 INNER JOIN omTrPurchaseReturn b ON b.CompanyCode = a.CompanyCode AND b.ReturnNo = a.POReturnNo AND b.HPPNo = a.HPPNo
	 LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = a.CompanyCode AND x.BranchCode = b.BranchCode AND x.BPUNo = a.BPUNo
	 WHERE CONVERT(VARCHAR, b.ReturnDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND a.CompanyCode = @CompanyCode 
	UNION
	SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, CASE
			  WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = x.CompanyCode AND SupplierCode = x.SupplierCode) = '2000000'
		   THEN
				 'R1'
			  ELSE
				 'R2'
		   END  AS transactionType, '' AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, 
		   (CASE WHEN charindex('-', a.RefDoNo) = 0 THEN a.RefDONo ELSE  SUBSTRING(a.RefDoNo, 0, charindex('-', a.RefDoNo) ) END) AS DONo,
			(CASE WHEN (SELECT StandardCode FROM GnMstSupplier WHERE CompanyCode = b.CompanyCode AND SupplierCode = x.SupplierCode)  = '2000000'
			THEN '' ELSE x.SupplierCode END) AS 'Supplier_CustomerCode', (
		   SELECT c.SupplierName
		   FROM gnMstSupplier c
		   WHERE x.SupplierCode = c.SupplierCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicleTemp a
	 INNER JOIN omTrPurchaseReturn b ON b.CompanyCode = a.CompanyCode AND b.ReturnNo = a.POReturnNo AND b.HPPNo = a.HPPNo
	 LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = a.CompanyCode AND x.BranchCode = b.BranchCode AND x.BPUNo = a.BPUNo
	 WHERE CONVERT(VARCHAR, b.ReturnDate, 112) BETWEEN @DateBegin AND @DateEnd
		   AND a.CompanyCode = @CompanyCode 

	UNION
	SELECT '1'  AS RecordID, b.SODate  AS transactionDate, 
		   CASE WHEN b.SalesType = '1' THEN 'S1' ELSE 'S2' END AS transactionType, ''  AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
		   ''  AS 'Supplier_CustomerCode', (
		   SELECT c.CustomerName
		   FROM gnMstCustomer c
		   WHERE b.CustomerCode = c.CustomerCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a 
	  INNER JOIN omTrSalesSO b
	  ON a.CompanyCode = b.CompanyCode
	  AND a.SONo = b.SONo
	  LEFT JOIN omTrPurchaseBPUDetail y ON a.CompanyCode = y.CompanyCode and a.ChassisCOde = y.ChassisCode AND a.ChassisNo = y.ChassisNo
	  LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
	  WHERE CONVERT(VARCHAR, b.SODate, 112) BETWEEN @DateBegin AND @DateEnd  
	  AND b.CompanyCode = @CompanyCode 
	UNION
	SELECT '1'  AS RecordID, b.ReqDate  AS transactionDate, 
	CASE WHEN b.StatusFaktur = '1' AND b.SubDealerCode = b.CompanyCode THEN 'F1' ELSE 
	(CASE WHEN b.StatusFaktur = '1' AND b.SubDealerCode <> b.CompanyCode THEN 'F2' ELSE 
	(CASE WHEN b.StatusFaktur <> '1' AND b.SubDealerCode = b.CompanyCode THEN 'F3' ELSE 'F4' END) END) END
	AS transactionType, (SELECT TOP 1 z.ReasonCode
		   FROM omTrSalesReqDetail z
		   WHERE z.ChassisNo = a.ChassisNo
		   AND z.ChassisCode = a.ChassisCode)  AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
			(CASE WHEN b.SubDealerCode  = a.CompanyCode THEN '' ELSE b.SubDealerCode END) AS 'Supplier_CustomerCode'
		   , (
		   SELECT c.CustomerName
		   FROM gnMstCustomer c
		   WHERE b.SubDealerCode = c.CustomerCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a
	  INNER JOIN omTrSalesReqDetail z ON a.CompanyCode = z.CompanyCode AND a.ChassisCode = z.ChassisCode AND a.ChassisNo = z.ChassisNo
	  INNER JOIN omTrSalesReq b	ON b.CompanyCode = z.CompanyCode AND b.BranchCode = z.BranchCode AND b.ReqNo = z.ReqNo
	  LEFT JOIN omTrPurchaseBPUDetail y
		ON y.CompanyCode = a.CompanyCode AND y.ChassisCode = a.ChassisCode AND y.ChassisNo = a.ChassisNo
	  LEFT JOIN omTrPurchaseBPU x 
		ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
	  WHERE CONVERT(VARCHAR, b.ReqDate, 112) BETWEEN @DateBegin AND @DateEnd
	  AND b.CompanyCode = @CompanyCode 
	UNION
	SELECT '1'  AS RecordID, b.ReturnDate  AS transactionDate, 'U1'  AS
		   transactionType, ''  AS ReasonCode, a.ChassisCode  AS
		   ChassisCode, a.ChassisNo  AS ChassisNo, a.EngineCode  AS EngineCode, a.EngineNo  AS EngineNo, x.RefferenceDoNo AS DONo,
		   ''  AS 'Supplier_CustomerCode', (
		   SELECT c.CustomerName
		   FROM gnMstCustomer c
		   WHERE b.CustomerCode = c.CustomerCode)  AS 'Supplier_CustomerName'
	  FROM omMstVehicle a
	  INNER JOIN omTrSalesReturn b
	  ON a.CompanyCode = b.CompanyCode
	  AND a.SOReturnNo = b.ReturnNo
	LEFT JOIN omTrPurchaseBPUDetail y ON y.CompanyCode = a.CompanyCode AND y.ChassisCode = a.ChassisCode AND y.ChassisNo = a.ChassisNo
	LEFT JOIN omTrPurchaseBPU x ON x.CompanyCode = y.CompanyCode AND x.BranchCode = y.BranchCode AND x.BPUNo = y.BPUNo
	  WHERE CONVERT(VARCHAR, b.ReturnDate, 112) BETWEEN @DateBegin AND @DateEnd
	  AND b.CompanyCode = @CompanyCode;
END
GO
create procedure [dbo].[uspfn_omTrSalesSOAccSeqList]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as
begin
	declare @CodeID varchar(25);
	set @CodeID = 'TPGO';

	SELECT a.PartNo
         , (
				SELECT b.PartName 
				  FROM spMstItemInfo b 
				 WHERE b.CompanyCode = a.CompanyCode 
				   AND b.PartNo = a.PartNo 
		   )  AS PartName
         , a.DemandQty
         , a.RetailPrice
         , a.DemandQty * a.RetailPrice as Total
         , dtl.LookUpValueName as JenisPart
         , a.Qty
		 , a.AfterDiscDPP
		 , a.AfterDiscPPn
		 , a.AfterDiscTotal
		 , a.RetailPrice
		 , a.DemandQty
		 , QtyUnit = a.DemandQty / a.Qty
		 , a.PartSeq
		 , a.SONo as SONumber
      FROM omTrSalesSOAccsSeq a 
      LEFT JOIN GnMstLookUpDtl dtl 
	    ON dtl.companyCode = a.companyCode 
       AND dtl.LookUpValue = a.TypeOfGoods 
       AND dtl.CodeId = @CodeId
     WHERE a.CompanyCode = @CompanyCode
       AND a.BranchCode = @BranchCode
       AND a.SONo = @SONumber;

end
GO
create procedure [dbo].[uspfn_CsCustomerVehicleSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , Chassis
     , StnkDate
     , BpkbDate
     , CreatedBy
     , CreatedDate
     , UpdatedBy
     , UpdatedDate
  from CsCustomerVehicle
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_CsCustomerVehicleSend @LastUpdateDate='2013-01-01', @Segment=1
GO
CREATE procedure [dbo].[uspfn_omSlsInvLkpBPK]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @SONo varchar(15),
 @INVDate datetime
)  
AS  
BEGIN  
-- exec [uspfn_omSlsInvLkpBPK] 6006410,600641001,'','2012-01-01'
SELECT distinct a.BPKNo,a.BPKDate,a.DONo,a.SONo
                  FROM omTrSalesBPK a inner join omTrSalesBPKDetail b
	                on a.companyCode = b.companyCode and a.branchCode = b.branchCode and a.BPKNo = b.BPKNo
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.BranchCode = @BranchCode
                       --AND MONTH(a.BPKDate) = @INVDate
                        AND a.BPKDate <= @INVDate
                        AND b.StatusInvoice = '0'
                        AND a.Status = '2'
                        AND SONO = @SONo
                ORDER BY a.BPKNo
END
GO
create procedure [dbo].[uspfn_spGetTotSalesQty] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25)
as
SELECT SUM(QtyBill)
FROM spTrnSPickingDtl WITH (nolock, nowait)
WHERE CompanyCode = @CompanyCode
  AND BranchCode = @BranchCode
  AND PickingSlipNo = @PickingSlipNo
GO
create procedure [dbo].[uspfn_CsGetFeedback]
	@CompanyCode  varchar(20),
	@CustomerCode varchar(20),
	@Chassis      varchar(50)
as

--select @CompanyCode = '6006406', @CustomerCode = '1000581', @Chassis = 'MHYGDN42VBJ352996'
select a.CompanyCode     
	 , a.BranchCode
	 , b.CustomerCode
	 , c.CustomerName
	 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
	 , a.EngineCode + convert(varchar, a.EngineNo) Engine
	 , a.SalesModelCode
	 , a.SalesModelYear
	 , a.ColourCode
	 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
	 , isnull(e.StnkDate, g.BPKDate) StnkDate
	 , g.BPKDate
	 , h.isLeasing as IsLeasing
	 , h.LeasingCo
	 , isnull(h.isLeasing, 0) as IsLeasing
	 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
	 , i.CustomerName as LeasingName
	 , h.Installment
	 , convert(varchar, isnull(h.Installment, 0)) + ' Month' as Tenor
     , left(c.Address1, 40) as Address
     , c.PhoneNo
     , h.Salesman
     , j.EmployeeName as SalesmanName
     , k.IsManual
     , k.FeedbackA
     , k.FeedbackB
     , k.FeedbackC
     , k.FeedbackD
     , case (isnull(k.Chassis, '')) when '' then 1 else 0 end as IsNew
     , l.PoliceRegNo
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
	on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c
	on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode
  left join omTrSalesDODetail d
	on d.CompanyCode = a.CompanyCode    
   and d.BranchCode = a.BranchCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
  left join CsCustomerVehicle e
	on e.CompanyCode = a.CompanyCode    
   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join omTrSalesDO f
	on f.CompanyCode = d.CompanyCode    
   and f.BranchCode = d.BranchCode
   and f.DONo = d.DONo
  left join omTrSalesBPK g
	on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode
   and g.DONo = f.DONo
  left join omTrSalesSO h
	on h.CompanyCode = g.CompanyCode    
   and h.BranchCode = g.BranchCode
   and h.SONo = g.SONo
  left join gnMstCustomer i
	on i.CompanyCode = h.CompanyCode
   and i.CustomerCode = h.LeasingCo
  left join HrEmployee j
	on j.CompanyCode = h.CompanyCode
   and j.EmployeeID = h.Salesman
  left join CsCustFeedback k
	on k.CompanyCode = a.CompanyCode
   and k.CustomerCode = b.CustomerCode
   and k.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join svMstCustomerVehicle l
	on l.CompanyCode = a.CompanyCode
   and l.ChassisCode = a.ChassisCode
   and l.ChassisNo = a.ChassisNo
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and b.CustomerCode = @CustomerCode
   and a.ChassisCode + convert(varchar, a.ChassisNo) = @Chassis
GO
CREATE procedure [dbo].[uspfn_GnGetDataWSMRH]
as

declare @CompanyCode  varchar(20)
declare @BranchCode   varchar(20)
declare @DealerCode   varchar(10)
declare @ProductType  varchar(10)
declare @TotalItem    int
declare @LastDate     datetime

declare @T_WSMRH     table (Line varchar(max), SeqNo int)
declare @T_WSMRH_DTL table 
(
    PoliceRegNo varchar(50),
    VinNo       varchar(50),
    ServiceType char(1),
    Initial     char(1), 
    ServiceDate datetime,
    Odometer    numeric(10,0),
    Working     varchar(max),
    CustStatify char(1),
    ReasStatify char(1),
    RemaStatify char(3),
    ReasonDesc  varchar(max),
    Solution    varchar(max),
    ContactCust char(1),
    ReasContact char(2),
    IsBooking   char(1),
    BookingType char(1),
    BookingDate datetime,
    CustComing  char(1),
    CreatedDate datetime,
    BranchCode  varchar(10),
    SrvStatus   varchar(10),
    SaName      char(50)
)

set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr);
set @BranchCode  = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0);
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode);
set @ProductType = (select top 1 ProductType from gnMstCoProfile where CompanyCode = @CompanyCode and BranchCode = @BranchCode);

set nocount on


--select * from 

insert into @T_WSMRH_DTL
select top 2500 a.PoliceRegNo
	 , replace(ChassisCode, '	','') + convert(varchar, ChassisNo) VinNo  
     , ServiceType = isnull((
		case @ProductType 
			when '4W' then (case when (a.JobType like 'PB%' or a.JobType like 'FSC%') then 'R' else 'N' end)
			when '2W' then (case when (a.JobType like 'FSC%') then 'K' when (a.JobType = 'CLAIM') then 'C' else 'N' end)
			else ''
		end), '')
     , Initials = isnull((
		case @ProductType 
			when '4W' then ' '
			when '2W' then (case when (a.JobType like 'FSC%') then substring(a.JobType, 5, 1) else 'N' end)
			else ''
		end), '')
     , a.JobOrderDate as ServiceDate
     , a.Odometer
     , a.JobType Working
     , '' CustomerSatisfy
     , '' ReasonNotSatisfy
     , '' RemarksNotSatisfy
	 , '' ReasonDesc
	 , '' Solution
	 , '' ContactCustomer
	 , '' ReasonNotContactCustomer
	 , case rtrim(isnull(a.BookingNo, '')) when '' then 'N' else 'Y' end as IsCustomerBooking
	 , case rtrim(isnull(a.BookingNo, '')) when '' then ' ' else 'D' end as BookingType
	 , convert(varchar, a.BookingDate, 112) 
	 , 'Y' as CustomerComing
	 , a.JobOrderDate CreatedDate
	 , b.DealerCodeWSMR as BranchCode
	 , a.ServiceStatus
	 , isnull(c.EmployeeName, '') as SaName
  from svTrnService a
  left join gnMstCoProfileService b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
  left join gnMstEmployee c
    on c.CompanyCode = a.CompanyCode
   and c.BranchCode = a.BranchCode
   and c.EmployeeID = a.ForemanID
 where 1 = 1
   and isnull(a.ChassisCode, '') <> ''
   and isnull(a.JobOrderDate, convert(datetime, '19000101'))
	> isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'WSMRH'
     order by LastSendDate desc
    ), convert(datetime, '18990101'))   
   and a.ServiceStatus != '6'
 order by a.CreatedDate
 
set @TotalItem = (select count(*) from @T_WSMRH_DTL) 
set @LastDate  = (select top 1 CreatedDate from @T_WSMRH_DTL order by CreatedDate desc)
                   
insert into @T_WSMRH 
select 'HWSMRH' 
+ left(@DealerCode + replicate(' ', 10), 10)
+ left('1000000' + replicate(' ', 10), 10)
+ left((select top 1 isnull(CompanyName, '')
          from gnMstOrganizationHdr
         where CompanyCode = @CompanyCode)
	   + replicate(' ', 50)
	   , 50)
+ right(replicate('0', 6) + convert(varchar, @TotalItem), 6)
+ (select replace(convert(varchar, @LastDate,111),'/',''))
+ (select top 1 case ProductType
		when '2W' then 'A' 
		when '4W' then 'B' 
		else 'C'  
		end 
	  from gnMstCoProfile
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode)
+ replicate(' ', 387)
, 0	   

insert into @T_WSMRH 
select '1'
     + left(PoliceRegNo + replicate(' ', 10), 10)
     + left(VinNo + replicate(' ', 20), 20)
     + ServiceType + Initial
     + replace((select replace(convert(varchar, ServiceDate,111),'/','')), '19000101', '        ')
     + right(replicate('0', 7) + convert(varchar, Odometer), 7)
     + left(Working + replicate(' ', 100), 100)
     + CustStatify + ReasStatify + RemaStatify
     + left(ReasonDesc + replicate(' ', 100), 100)
     + left(replace(Solution, '
', ', ') + replicate(' ', 150), 150)
     + ContactCust + ReasContact + IsBooking + BookingType
     + replace((select replace(convert(varchar, BookingDate,111),'/','')), '19000101', '        ')
     + CustComing
     + left(BranchCode + replicate(' ', 10), 10)
     + case when (SrvStatus in ('7','8','9','A','B')) then '1' else '0' end
     + left(SaName + replicate(' ', 50), 50)
     , 1
  from @T_WSMRH_DTL

select @LastDate as LastDate 
select Line from @T_WSMRH order by SeqNo
GO
CREATE PROCEDURe [dbo].[uspfn_spGetTotSalesAmt] @CompanyCode varchar(15), @BranchCode varchar(15),
@PickingSlipNo varchar(25)
as
SELECT SUM(SalesAmt)
FROM spTrnSPickingDtl WITH (nolock, nowait)
WHERE CompanyCode = @CompanyCode
  AND BranchCode = @BranchCode
  AND PickingSlipNo = @PickingSlipNo
GO
create procedure [dbo].[uspfn_CsRelationSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , RelationType
     , FullName
     , PhoneNo
     , RelationInfo
     , BirthDate
     , TypeOfGift
     , SentGiftDate
     , ReceivedGiftDate
     , Comment
     , CreatedBy
     , CreatedDate
     , UpdatedBy
     , UpdatedDate
  from CsCustRelation
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_CsRelationSend @LastUpdateDate='2013-01-01', @Segment=1
GO
CREATE PROCEDURe [dbo].[uspfn_spGetTotSupplyQty] @CompanyCode varchar(15), @BranchCode varchar(15),
@PickingSlipNo varchar(25)
as
SELECT SUM(QtySupply)
FROM spTrnSPickingDtl WITH (nolock, nowait)
WHERE CompanyCode = @CompanyCode
  AND BranchCode = @BranchCode
  AND PickingSlipNo = @PickingSlipNo
GO
create procedure [dbo].[uspfn_CsInqBpkbReminder]
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@DateFrom datetime,
	@DateTo datetime
as

select a.CompanyCode
     , b.BranchCode
     , a.CustomerCode
	 , c.CustomerName
	 , b.Chassis
	 , b.Engine
	 , b.SalesModelCode
	 , b.SalesModelYear
	 , b.ColourCode
	 , a.BpkbReadyDate
	 , a.BpkbPickUp
	 , b.BPKDate
	 , b.IsLeasing
	 , b.LeasingCo
	 , b.Installment
	 , case isnull(b.isLeasing, 0) when 0 then 'Cash' else 'Leasing' end as LeasingDesc
	 , case isnull(b.isLeasing, 0) when 0 then '-' else b.LeasingName end as LeasingName
	 , case isnull(b.isLeasing, 0) when 0 then '-' else (convert(varchar, isnull(b.Installment, 0)) + ' Month') end as Tenor
	 , c.Address
	 , c.PhoneNo
	 , c.HpNo
	 , c.AddPhone1
	 , c.AddPhone2
	 , b.SalesmanCode 
	 , b.SalesmanName
	 , a.ReqKtp
     , a.ReqStnk
     , a.ReqSuratKuasa
     , a.Chassis
     , a.Comment
     , a.Additional
     , a.Status
	 , (case a.Status when 1 then 'Finish' else 'In Progress' end) as StatusInfo
	 , b.PoliceRegNo
	 , a.CreatedDate
  from CsCustBpkb a
  join CsCustomerVehicleView b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.Chassis = a.Chassis
  join CsCustomerView c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
 where a.CompanyCode = @CompanyCode
   and b.BranchCode = (case when (isnull(@BranchCode, '') = '') then b.BranchCode else @BranchCode end)
   and convert(varchar, a.CreatedDate, 112) between @DateFrom and @DateTo
 order by a.CreatedDate
GO
CREATE procedure [dbo].[uspfn_SvInqGetDtlUnitInfo]
	 @CompanyCode	varchar(20),
	 @BranchCode	varchar(20),
	 @ProductType	varchar(20),
	 @month			int,
	 @year			int,
     @JobType		varchar(20)

  --   declare @CompanyCode	varchar(20) set @CompanyCode = '6006406'	
	 --declare @BranchCode	varchar(20) set @BranchCode	 = '6006401'
	 --declare @ProductType	varchar(20) set @ProductType = '4W'	
	 --declare @month			int 	    set @month		 = '1'	
	 --declare @year			int 	    set @year		 = '2013'
  --   declare @JobType		varchar(20) set @JobType	 = 'FSC02-1'
as

begin
-- UNIT

select * into #t1 from(select distinct
    reff.Description
	, inv.JobOrderDate
	, inv.ChassisCode
	, inv.ChassisNo
from svTrnInvoice inv
left join svMstRefferenceService reff on
	reff.CompanyCode = inv.CompanyCode 
	and reff.ProductType = inv.ProductType
	and reff.RefferenceCode = inv.JobType
	and reff.RefferenceType = 'JOBSTYPE'
where month(inv.InvoiceDate) = @Month
		and year(inv.InvoiceDate) = @Year
	    and inv.CompanyCode = @CompanyCode
	    and inv.BranchCode = @BranchCode
	    and inv.ProductType = @ProductType
	    and (case when @JobType = 'ALL JOB' then 'ALL JOB' else inv.JobType end) = @JobType)#t1

select row_number() over (order by #t1.JobOrderDate) No,* from #t1

-- INVOICE
	select distinct
    row_number() over (order by inv.JobType) No
	, inv.JobType
	, reff.Description
	, inv.InvoiceNo
	, inv.JobOrderNo
	, inv.JobOrderDate
	, inv.ChassisCode
	, inv.ChassisNo
from svTrnInvoice inv
left join svMstRefferenceService reff on
	reff.CompanyCode = inv.CompanyCode 
	and reff.ProductType = inv.ProductType
	and reff.RefferenceCode = inv.JobType
	and reff.RefferenceType = 'JOBSTYPE'
where month(inv.InvoiceDate) = @Month
		and year(inv.InvoiceDate) = @Year
	    and inv.CompanyCode = @CompanyCode
	    and inv.BranchCode = @BranchCode
	    and inv.ProductType = @ProductType
	    and (case when @JobType = 'ALL JOB' then 'ALL JOB' else inv.JobType end) = @JobType
order by inv.JobType

-- TASK

select distinct
    row_number() over (order by inv.JobType) No
	, inv.JobType
	, reff.Description
	, inv.InvoiceNo
	, inv.JobOrderNo
	, inv.JobOrderDate
	, task.OperationNo
from svTrnInvoice inv
left join svMstRefferenceService reff on
	reff.CompanyCode = inv.CompanyCode 
	and reff.ProductType = inv.ProductType
	and reff.RefferenceCode = inv.JobType
	and reff.RefferenceType = 'JOBSTYPE'
inner join svTrnInvTask task on
	task.CompanyCode = inv.CompanyCode
	and task.BranchCode = inv.BranchCode
	and task.ProductType = inv.ProductType
	and task.InvoiceNo = inv.InvoiceNo
where month(inv.InvoiceDate) = @Month
		and year(inv.InvoiceDate) = @Year
	    and inv.CompanyCode = @CompanyCode
	    and inv.BranchCode = @BranchCode
	    and inv.ProductType = @ProductType
	    and (case when @JobType = 'ALL JOB' then 'ALL JOB' else inv.JobType end) = @JobType
order by inv.JobType

drop table #t1
end
GO
create procedure [dbo].[uspfn_SyncCsCustomerView]
as

;with x as (
select a.CompanyCode
     , BranchCode = isnull((
		select top 1 BranchCode from OmTrSalesSo
		 where CompanyCode = a.CompanyCode
		  and CustomerCode = a.CustomerCode
		order by SODate desc), '')
     , a.CustomerCode
	 , a.CustomerName
	 , a.CustomerType
	 , rtrim(a.Address1) + ' ' + rtrim(a.Address2) + rtrim(a.Address3) as Address
	 , a.PhoneNo
	 , a.HPNo
	 , b.AddPhone1
	 , b.AddPhone2
	 , a.BirthDate
	 , b.ReligionCode
	 , a.CreatedDate
	 , a.LastUpdateDate
  from GnMstCustomer a
  left join CsCustData b
	on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
 where 1 = 1
   and a.CustomerType = 'I'
   and a.BirthDate is not null
   and a.BirthDate > '1900-01-01'
   and (year(getdate() - year(a.BirthDate))) > 5
   and year(a.LastUpdateDate) = year(getdate())
)
select * into #t1 from (select * from x where BranchCode != '')#

--delete CsCustomerView
-- where exists (
--	select top 1 1 from #t1
--	 where #t1.CompanyCode = CsCustomerView.CompanyCode
--	   and #t1.BranchCode = CsCustomerView.BranchCode
--	   and #t1.CustomerCode = CsCustomerView.CustomerCode
-- )
--insert into CsCustomerView (CompanyCode, BranchCode, CustomerCode, CustomerName, CustomerType, Address, PhoneNo, HPNo, AddPhone1, AddPhone2, BirthDate, ReligionCode, CreatedDate, LastUpdateDate)
--select * from #t1

drop table CsCustomerView
select * into CsCustomerView from #t1


drop table #t1
GO
CREATE procedure [dbo].[uspfn_omSlsInvLkpBillTo]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @ProfitCenterCode varchar(3)
)  
AS  
BEGIN  
-- exec [uspfn_omSlsInvLkpBillTo] 6006410,600641001,100
 SELECT a.CustomerCode, a.CustomerName
                  FROM gnMstCustomer a 
                INNER JOIN gnMstCustomerProfitCenter b
                  ON a.CompanyCode = b.CompanyCode AND 
                     a.CustomerCode = b.CustomerCode AND
                     b.BranchCode = @BranchCode
                WHERE a.CompanyCode = @CompanyCode AND 
                      b.ProfitCenterCode = @ProfitCenterCode

end
GO
Create procedure [dbo].[uspfn_omSlsInvLkpSlsMdlCd]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15)
)  
AS  
BEGIN  

SELECT a.*
FROM omMstModel a
WHERE EXISTS
      (SELECT 1
         FROM omTrSalesBPKModel b
        WHERE (b.QuantityBPK - b.QuantityInvoice) > 0
              AND a.SalesModelCode = b.SalesModelCode
              AND a.CompanyCode = b.CompanyCode
              AND b.BranchCode = @BranchCode
              AND b.BPKNo = @BPKNo)
   AND a.CompanyCode = @CompanyCode
ORDER BY a.SalesModelCode
                
END
GO
CREATE procedure [dbo].[uspfn_GnGetDataWSMRA]
as

declare @CompanyCode  varchar(20)
declare @BranchCode   varchar(20)
declare @DealerCode   varchar(10)
declare @ProductType  varchar(10)
declare @TotalItem    int
declare @LastDate     datetime

declare @T_WSMRA     table (Line varchar(max), SeqNo int)
declare @T_WSMRA_DTL table 
(
    PoliceRegNo varchar(50),
    VinNo       varchar(50),
    ServiceType char(1),
    Initial     char(1), 
    ServiceDate datetime,
    Odometer    numeric(10,0),
    Working     varchar(max),
    CustStatify char(1),
    ReasStatify char(1),
    RemaStatify char(3),
    ReasonDesc  varchar(max),
    Solution    varchar(max),
    ContactCust char(1),
    ReasContact char(2),
    IsBooking   char(1),
    BookingType char(1),
    BookingDate datetime,
    CustComing  char(1),
    CreatedDate datetime,
    BranchCode  varchar(10),
    SrvStatus   varchar(10),
    SaName      char(50)
)

set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr);
set @BranchCode  = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0);
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode);
set @ProductType = (select top 1 ProductType from gnMstCoProfile where CompanyCode = @CompanyCode and BranchCode = @BranchCode);

set nocount on


--select * from 

insert into @T_WSMRA_DTL
select top 2500 a.PoliceRegNo
	 , replace(ChassisCode, '	','') + convert(varchar, ChassisNo) VinNo  
     , ServiceType = isnull((
		case @ProductType 
			when '4W' then (case when (a.JobType like 'PB%' or a.JobType like 'FSC%') then 'R' else 'N' end)
			when '2W' then (case when (a.JobType like 'FSC%') then 'K' when (a.JobType = 'CLAIM') then 'C' else 'N' end)
			else ''
		end), '')
     , Initials = isnull((
		case @ProductType 
			when '4W' then ' '
			when '2W' then (case when (a.JobType like 'FSC%') then substring(a.JobType, 5, 1) else 'N' end)
			else ''
		end), '')
     , a.JobOrderDate as ServiceDate
     , a.Odometer
     , a.JobType Working
     , '' CustomerSatisfy
     , '' ReasonNotSatisfy
     , '' RemarksNotSatisfy
	 , '' ReasonDesc
	 , '' Solution
	 , '' ContactCustomer
	 , '' ReasonNotContactCustomer
	 , case rtrim(isnull(a.BookingNo, '')) when '' then 'N' else 'Y' end as IsCustomerBooking
	 , case rtrim(isnull(a.BookingNo, '')) when '' then ' ' else 'D' end as BookingType
	 , convert(varchar, a.BookingDate, 112) 
	 , 'Y' as CustomerComing
	 , a.JobOrderDate CreatedDate
	 , b.DealerCodeWSMR as BranchCode
	 , a.ServiceStatus
	 , isnull(c.EmployeeName, '') as SaName
  from svTrnService a
  left join gnMstCoProfileService b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
  left join gnMstEmployee c
    on c.CompanyCode = a.CompanyCode
   and c.BranchCode = a.BranchCode
   and c.EmployeeID = a.ForemanID
 where 1 = 1
   and isnull(a.ChassisCode, '') <> ''
   and isnull(a.JobOrderDate, convert(datetime, '19000101'))
	> isnull((
    select top 1 LastSendDate
      from gnMstSendSchedule
     where DataType = 'WSMRA'
     order by LastSendDate desc
    ), convert(datetime, '18990101'))   
 --and a.ServiceStatus != '6'           --sesuai WR 24-Feb-14 dari Dept.Service, 
                                        --Unit intake yg dikirim berstatus tutup SPK
   and a.ServiceStatus in ('5','7','9') --tutup SPK, Invoice, FPJ
 order by a.CreatedDate
 
set @TotalItem = (select count(*) from @T_WSMRA_DTL) 
set @LastDate  = (select top 1 CreatedDate from @T_WSMRA_DTL order by CreatedDate desc)
                   
insert into @T_WSMRA 
select 'HWSMRA' 
+ left(@DealerCode + replicate(' ', 10), 10)
+ left('1000000' + replicate(' ', 10), 10)
+ left((select top 1 isnull(CompanyName, '')
          from gnMstOrganizationHdr
         where CompanyCode = @CompanyCode)
	   + replicate(' ', 50)
	   , 50)
+ right(replicate('0', 6) + convert(varchar, @TotalItem), 6)
+ (select replace(convert(varchar, @LastDate,111),'/',''))
+ (select top 1 case ProductType
		when '2W' then 'A' 
		when '4W' then 'B' 
		else 'C'  
		end 
	  from gnMstCoProfile
	 where CompanyCode = @CompanyCode
	   and BranchCode = @BranchCode)
+ replicate(' ', 387)
, 0	   

insert into @T_WSMRA 
select '1'
     + left(PoliceRegNo + replicate(' ', 10), 10)
     + left(VinNo + replicate(' ', 20), 20)
     + ServiceType + Initial
     + replace((select replace(convert(varchar, ServiceDate,111),'/','')), '19000101', '        ')
     + right(replicate('0', 7) + convert(varchar, Odometer), 7)
     + left(Working + replicate(' ', 100), 100)
     + CustStatify + ReasStatify + RemaStatify
     + left(ReasonDesc + replicate(' ', 100), 100)
     + left(replace(Solution, '
', ', ') + replicate(' ', 150), 150)
     + ContactCust + ReasContact + IsBooking + BookingType
     + replace((select replace(convert(varchar, BookingDate,111),'/','')), '19000101', '        ')
     + CustComing
     + left(BranchCode + replicate(' ', 10), 10)
     + case when (SrvStatus in ('7','8','9','A','B')) then '1' else '0' end
     + left(SaName + replicate(' ', 50), 50)
     , 1
  from @T_WSMRA_DTL

select @LastDate as LastDate 
select Line from @T_WSMRA order by SeqNo
GO
CREATE PROCEDURe [dbo].[uspfn_spGetTotDPPAmt] @CompanyCode varchar(15), @BranchCode varchar(15),
@PickingSlipNo varchar(25)
as
SELECT SUM(NetSalesAmt)
FROM spTrnSPickingDtl WITH (nolock, nowait)
WHERE CompanyCode = @CompanyCode
  AND BranchCode = @BranchCode
  AND PickingSlipNo = @PickingSlipNo
GO
create procedure [dbo].[uspfn_PmKdpSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) InquiryNumber, BranchCode, CompanyCode, EmployeeID, SpvEmployeeID, InquiryDate, OutletID, StatusProspek, PerolehanData, NamaProspek, AlamatProspek, TelpRumah, CityID, NamaPerusahaan, AlamatPerusahaan, Jabatan, Handphone, Faximile, Email, TipeKendaraan, Variant, Transmisi, ColourCode, CaraPembayaran, TestDrive, QuantityInquiry, LastProgress, LastUpdateStatus, SPKDate, LostCaseDate, LostCaseCategory, LostCaseReasonID, LostCaseOtherReason, LostCaseVoiceOfCustomer, CreationDate, CreatedBy, LastUpdateBy, LastUpdateDate, Leasing, DownPayment, Tenor, MerkLain
  from pmKDP
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1
 
declare @LastUpdateQry datetime
    set @LastUpdateQry = (select top 1 LastUpdateDate from #t1 order by LastUpdateDate desc)

select * from #t1
 union
select top 1000 InquiryNumber, BranchCode, CompanyCode, EmployeeID, SpvEmployeeID, InquiryDate, OutletID, StatusProspek, PerolehanData, NamaProspek, AlamatProspek, TelpRumah, CityID, NamaPerusahaan, AlamatPerusahaan, Jabatan, Handphone, Faximile, Email, TipeKendaraan, Variant, Transmisi, ColourCode, CaraPembayaran, TestDrive, QuantityInquiry, LastProgress, LastUpdateStatus, SPKDate, LostCaseDate, LostCaseCategory, LostCaseReasonID, LostCaseOtherReason, LostCaseVoiceOfCustomer, CreationDate, CreatedBy, LastUpdateBy, LastUpdateDate, Leasing, DownPayment, Tenor, MerkLain
  from pmKDP
 where LastUpdateDate = @LastUpdateQry
 
  drop table #t1

--go

--uspfn_PmKdpSend @LastUpdateDate='2013-10-10 00:00:00',@Segment=500
GO
CREATE procedure [dbo].[GetFPJLookUp]
@CompanyCode varchar(15),
@BranchCode	varchar(15),
@TypeOfGoods varchar(10),
@ProductType varchar(4)
as
SELECT * FROM
(
    SELECT 
    PickingSlipNo, 
    PickingSlipDate, 
    spTrnSInvoiceHdr.InvoiceNo, 
    InvoiceDate,
    (
        SELECT TOP 1 PRODUCTTYPE FROM spTrnSInvoiceDtl
        WHERE spTrnSInvoiceHdr.CompanyCode = spTrnSInvoiceDtl.CompanyCode
        AND spTrnSInvoiceHdr.BranchCode = spTrnSInvoiceDtl.BranchCode
        AND spTrnSInvoiceHdr.InvoiceNo = spTrnSInvoiceDtl.InvoiceNo
    ) AS ProductType
FROM 
    spTrnSInvoiceHdr
WHERE spTrnSInvoiceHdr.CompanyCode = @CompanyCode
  AND spTrnSInvoiceHdr.BranchCode  = @BranchCode
    AND TypeOfGoods 			   = @TypeOfGoods
    AND Status					   = 0 
) A
WHERE A.ProductType = @ProductType
ORDER BY A.PickingSlipNo DESC
GO
create procedure [dbo].[uspfn_CsMstHolidaySend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , HolidayYear
	 , HolidayCode
	 , HolidayDesc
	 , DateFrom
	 , DateTo
	 , CreatedBy
	 , CreatedDate
	 , UpdatedBy
	 , UpdatedDate
  from CsMstHoliday
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_CsMstHolidaySend @LastUpdateDate='2013-01-01', @Segment=1
GO
Create procedure [dbo].[uspfn_omSlsInvLkpSlsMdlYear]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),
 @BPKNo varchar(15),
 @SalesModelCode varchar(30)
)  
AS  
BEGIN  
SELECT * 
                  FROM omMstModelYear a
                 WHERE a.CompanyCode = @CompanyCode
                       AND a.Status = '1'
                       AND a.SalesModelCode = @SalesModelCode
                       AND a.SalesModelYear IN 
                             (SELECT b.SalesModelYear
                                FROM omTrSalesBPKModel b
                               WHERE b.CompanyCode = a.CompanyCode
                                     AND b.BranchCode = @BranchCode
                                     AND b.BPKNo = @BPKNo
                                     AND b.SalesModelCode = a.SalesModelCode
                                     AND (b.QuantityBPK - b.QuantityInvoice) > 0)                        
End
GO
create procedure [dbo].[uspfn_CsGetBpkb]
	@CompanyCode  varchar(20),
	@CustomerCode varchar(20),
	@Chassis      varchar(50)
as

--select @CompanyCode = '6006406', @CustomerCode = '1000581', @Chassis = 'MHYGDN42VBJ352996'
select a.CompanyCode     
	 , a.BranchCode
	 , b.CustomerCode
	 , c.CustomerName
	 , a.ChassisCode + convert(varchar, a.ChassisNo) Chassis
	 , a.EngineCode + convert(varchar, a.EngineNo) Engine
	 , a.SalesModelCode
	 , a.SalesModelYear
	 , a.ColourCode
	 , isnull(e.BpkbDate, g.BPKDate) BpkbDate
	 , isnull(e.StnkDate, g.BPKDate) StnkDate
	 , g.BPKDate
	 , h.isLeasing as IsLeasing
	 , h.LeasingCo
	 , isnull(h.isLeasing, 0) as IsLeasing
	 , case isnull(h.isLeasing, 0) when 0 then 'Tunai' else 'Leasing' end as Category
	 , i.CustomerName as LeasingName
	 , h.Installment
	 , convert(varchar, isnull(h.Installment, 0)) + ' Month' as Tenor
     , left(c.Address1, 40) as Address
     , c.PhoneNo
     , h.Salesman
     , j.EmployeeName as SalesmanName
     , k.BpkbReadyDate
     , k.BpkbPickUp
     , k.ReqInfoLeasing
     , k.ReqInfoCust
     , k.ReqKtp
     , k.ReqStnk
     , k.ReqSuratKuasa
     , k.Comment, k.Additional, k.Status
     , (case k.Status when 1 then 'Finish' else 'In Progress' end) as StatusInfo
     , case (isnull(k.Chassis, '')) when '' then 1 else 0 end as IsNew
     , l.PoliceRegNo
	 , DelayedRetrievalDate = (
			select top 1
			       x.RetrievalEstimationDate
			  from CsBpkbRetrievalInformation x
			 where x.CompanyCode = b.CompanyCode
			   and x.CustomerCode = b.CustomerCode
			 order by x.RetrievalEstimationDate desc
	   )
	 , DelayedRetrievalNote = (
			select top 1
			       x.Notes
			  from CsBpkbRetrievalInformation x
			 where x.CompanyCode = b.CompanyCode
			   and x.CustomerCode = b.CustomerCode
			 order by x.RetrievalEstimationDate desc
	   )
  from omTrSalesInvoiceVin a    
  left join omTrSalesInvoice b    
	on b.CompanyCode = a.CompanyCode    
   and b.BranchCode = a.BranchCode    
   and b.InvoiceNo = a.InvoiceNo    
  left join gnMstCustomer c
	on c.CompanyCode = a.CompanyCode    
   and c.CustomerCode = b.CustomerCode
  left join omTrSalesDODetail d
	on d.CompanyCode = a.CompanyCode    
   and d.BranchCode = a.BranchCode
   and d.ChassisCode = a.ChassisCode
   and d.ChassisNo = a.ChassisNo
  left join CsCustomerVehicle e
	on e.CompanyCode = a.CompanyCode    
   and e.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join omTrSalesDO f
	on f.CompanyCode = d.CompanyCode    
   and f.BranchCode = d.BranchCode
   and f.DONo = d.DONo
  left join omTrSalesBPK g
	on g.CompanyCode = f.CompanyCode    
   and g.BranchCode = f.BranchCode
   and g.DONo = f.DONo
  left join omTrSalesSO h
	on h.CompanyCode = g.CompanyCode    
   and h.BranchCode = g.BranchCode
   and h.SONo = g.SONo
  left join gnMstCustomer i
	on i.CompanyCode = h.CompanyCode
   and i.CustomerCode = h.LeasingCo
  left join HrEmployee j
	on j.CompanyCode = h.CompanyCode
   and j.EmployeeID = h.Salesman
  left join CsCustBpkb k
	on k.CompanyCode = a.CompanyCode
   and k.CustomerCode = b.CustomerCode
   and k.Chassis = a.ChassisCode + convert(varchar, a.ChassisNo)
  left join svMstCustomerVehicle l
	on l.CompanyCode = a.CompanyCode
   and l.ChassisCode = a.ChassisCode
   and l.ChassisNo = a.ChassisNo
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and b.CustomerCode = @CustomerCode
   and a.ChassisCode + convert(varchar, a.ChassisNo) = @Chassis
GO
CREATE procedure [dbo].[uspfn_CsDashSummary]
	@CompanyCode nvarchar(20),
	@BranchCode varchar(20)
as

--set @CompanyCode = '6006406'

declare @CurrDate datetime, @Param1 as varchar(20)
declare @t_rem as table
(
	RemCode varchar(20),
	RemDate datetime,
	RemValue int
)

set @CurrDate = getdate()

-- REM3DAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REM3DAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REM3DAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBDAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBDAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBDAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMHOLIDAYS
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMHOLIDAYS'), '0')
insert into @t_rem (RemCode, RemDate) values('REMHOLIDAYS', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMSTNKEXT
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMSTNKEXT'), '0')
insert into @t_rem (RemCode, RemDate) values('REMSTNKEXT', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBPKB
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBPKB'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBPKB', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')
   
declare @CurrentMonth tinyint;
declare @PreviousMonth tinyint;
declare @NextMonth tinyint;
declare @CurrentDay tinyint;
declare @DateComparison datetime;


set @CurrentDay = datepart(day, getdate());
set @CurrentMonth = DATEPART(month, getdate());
if @CurrentMonth = 1 
	set @PreviousMonth=12
else
	set @PreviousMonth=@CurrentMonth-1;
if @CurrentMonth = 12 
	set @NextMonth=1
else
	set @NextMonth=@CurrentMonth+1;

--update @t_rem set RemValue = (select count(CustomerCode) from CsLkuTDayCallView where CompanyCode = @CompanyCode and BranchCode like @BranchCode and OutStanding = 'Y' and DODate >= (select RemDate from @t_rem where RemCode = 'REM3DAYSCALL')) where RemCode = 'REM3DAYSCALL'
--update @t_rem set RemValue = (select count(CustomerCode) from CsLkuStnkExtView where CompanyCode = @CompanyCode and BranchCode like @BranchCode and OutStanding = 'Y' and StnkExpiredDate >= (select RemDate from @t_rem where RemCode = 'REMSTNKEXT')) where RemCode = 'REMSTNKEXT'
--update @t_rem set RemValue = (select count(CustomerCode) from CsLkuBpkbView where CompanyCode = @CompanyCode and BranchCode like @BranchCode and OutStanding = 'Y' and BpkbDate >= (select RemDate from @t_rem where RemCode = 'REMBPKB')) where RemCode = 'REMBPKB'
--update @t_rem set RemValue = (select count(CustomerCode) from CsLkuBirthdayView where CompanyCode = @CompanyCode and BranchCode like @BranchCode and OutStanding = 'Y' ) where RemCode = 'REMBDAYSCALL'

update @t_rem set RemValue = (
						select count(a.CustomerCode)
						  from CsCustomerVehicleView a
						 inner join CsCustomerView b 
						    on b.CompanyCode = a.CompanyCode
						   and b.CustomerCode = a.CustomerCode
						  left join CsStnkExt c
						    on c.CompanyCode = a.CompanyCode
						   and c.CustomerCode = a.CustomerCode
						   and c.Chassis = a.Chassis
						 where a.CompanyCode like @CompanyCode
						   and a.BranchCode like @BranchCode
						   and isnull(c.Chassis, '') = ''
						   and isnull(c.StnkExpiredDate, isnull(c.StnkDate, a.BpkDate)) >= (select RemDate from @t_rem where RemCode = 'REMSTNKEXT')
				)
 where RemCode = 'REMSTNKEXT';

 update @t_rem set RemValue = (
						select count(a.CustomerCode)
						  from CsCustomerVehicleView a
						 inner join CsCustomerView b 
						    on b.CompanyCode = a.CompanyCode
						   and b.CustomerCode = a.CustomerCode
						  left join CsTdayCall c
						    on c.CompanyCode = a.CompanyCode
						   and c.CustomerCode = a.CustomerCode
						   and c.Chassis = a.Chassis
						 where a.CompanyCode like @CompanyCode
						   and a.BranchCode like @BranchCode
						   and isnull(c.Chassis, '') = ''
						   and a.DoDate >=  (select RemDate from @t_rem where RemCode = 'REM3DAYSCALL')
				)
 where RemCode = 'REM3DAYSCALL';

  update @t_rem set RemValue = (
						select count(a.CustomerCode)
						  from CsCustomerVehicleView a
						 inner join CsCustomerView b 
						    on b.CompanyCode = a.CompanyCode
						   and b.CustomerCode = a.CustomerCode
						  left join CsCustBpkb c
						    on c.CompanyCode = a.CompanyCode
						   and c.CustomerCode = a.CustomerCode
						   and c.Chassis = a.Chassis
						 where a.CompanyCode like @CompanyCode
						   and a.BranchCode like @BranchCode
						   and ( 
									isnull(c.Chassis, '') = ''
									or 
									isnull(c.BpkbReadyDate, '') = ''
									or
									isnull(isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)), '') = ''
									or
									isnull(isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode order by x.RetrievalEstimationDate desc)), '') != '' and isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)) < getdate() 
									or
									isnull(c.BpkbReadyDate, '') != '' and isnull(isnull(c.BpkbPickUp, (select top 1 x.RetrievalEstimationDate from CsBpkbRetrievalInformation x where x.CompanyCode=a.CompanyCode and x.CustomerCode=c.CustomerCode and (x.IsDeleted = 0 or x.IsDeleted is null) order by x.RetrievalEstimationDate desc)), '') = ''
							   )
						   and a.DoDate >=  (select RemDate from @t_rem where RemCode = 'REMBPKB')
				)
  where RemCode = 'REMBPKB';
  
  set @DateComparison = (select RemDate from @t_rem where RemCode = 'REMBDAYSCALL');
  set @CurrentMonth = datepart(month, @DateComparison);
  set @NextMonth = @CurrentMonth + 1;
  set @PreviousMonth = @CurrentMonth - 1;

 update @t_rem set RemValue = (
						select count(a.CustomerCode)
						  from CsCustomerVehicleView a
						 inner join CsCustomerView b 
						    on b.CompanyCode = a.CompanyCode
						   and b.CustomerCode = a.CustomerCode
						  left join CsCustBirthday c
						    on c.CompanyCode = a.CompanyCode
						   and c.CustomerCode = a.CustomerCode
						 where a.CompanyCode like @CompanyCode
						   and a.BranchCode like @BranchCode
						   and isnull(c.CustomerCode, '') = ''
						   and datepart(month, b.BirthDate) >= @PreviousMonth
						   and datepart(month, b.BirthDate) <= @CurrentMonth
				)
 where RemCode = 'REMBDAYSCALL';

select a.RemCode, a.RemDate, a.RemValue, b.SettingLink1 as ControlLink
  from @t_rem a
  join CsSettings b
    on b.CompanyCode = @CompanyCode
   and b.SettingCode = a.RemCode
 


--select * from CsSettings

--go
exec uspfn_CsDashSummary @CompanyCode='6006406', @BranchCode='6006406'

--exec sp_executesql N'exec uspfn_CsDashSummary @CompanyCode=@p0, @BranchCode=p1',N'@p0 nvarchar(7),@p1 nvarchar(7)',@p0=N'6006406',@p1=N'6006406'
GO
create procedure [dbo].[uspfn_spGetTotPickedQty] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25)
as
SELECT SUM(QtyPicked)
FROM spTrnSPickingDtl WITH (nolock, nowait)
WHERE CompanyCode = @CompanyCode
  AND BranchCode = @BranchCode
  AND PickingSlipNo = @PickingSlipNo
GO
create procedure [dbo].[uspfn_SelectAccOthers]
	@CompanyCode varchar(25),
	@Reff varchar(25)
as
begin
	SELECT a.RefferenceCode
	     , a.RefferenceDesc1 as RefferenceDesc
      FROM dbo.omMstRefference a
     WHERE a.CompanyCode = @CompanyCode
       AND a.RefferenceType = @Reff
       AND a.Status != '0'
end
GO
CREATE procedure [dbo].[uspfn_AbAssignAttendance]
	@CompanyCode varchar(20),
	@FileID varchar(84)
as
begin
	declare @TransactioName varchar(25);
	set @TransactioName = 'SetEmployeeAttendance';

	create table #TableAttendance(
		CompanyCode varchar(10),
		EmployeeID varchar(20),
		IdentityCode varchar(5),
		IsTransfered bit,
		AttendanceTime datetime,
		AttendanceDate varchar(10),
		AttdDate varchar(10),
		ShifCode varchar(10),
	);

	;with x as (
		select distinct
		     a.CompanyCode
		   , a.EmployeeID
		   , a.IdentityCode
		   , a.IsTransfered
		   , a.AttendanceTime
		   , ( 	
		    	cast(datepart(year, a.AttendanceTime) as varchar(4)) + 
		    	right('0' + cast(datepart(month, a.AttendanceTime) as varchar(2)), 2) + 
		    	right('0' + cast(datepart(day, a.AttendanceTime) as varchar(2)), 2) 
		     ) as AttendanceDate
		   , b.AttdDate
		   , b.ShiftCode
		from HrTrnAttendanceFileDtl a
		left join HrEmployeeShift b
		  on b.EmployeeID=a.EmployeeID
		 and b.AttdDate = (
				cast(datepart(year, a.AttendanceTime) as varchar(4)) + 
		    	right('0' + cast(datepart(month, a.AttendanceTime) as varchar(2)), 2) + 
		    	right('0' + cast(datepart(day, a.AttendanceTime) as varchar(2)), 2) 
		      )
	   where a.FileID = @FileID
		 and b.ShiftCode is not null
	)
	
	insert into #TableAttendance
	select * from x



	declare @MinDate varchar(25);
	declare @MaxDate varchar(25);

	set @MinDate = (
		select top 1
			(
				cast(datepart(year, Min(a.AttendanceTime)) as varchar(4)) + 
				right('0' + cast(datepart(month, Min(a.AttendanceTime)) as varchar(2)), 2) + 
				right('0' + cast(datepart(day, Min(a.AttendanceTime)) as varchar(2)), 2) 
			)
		from
			#TableAttendance a
	);
	set @MaxDate= (
		select top 1
			(
				cast(datepart(year, Max(a.AttendanceTime)) as varchar(4)) + 
				right('0' + cast(datepart(month, Max(a.AttendanceTime)) as varchar(2)), 2) + 
				right('0' + cast(datepart(day, Max(a.AttendanceTime)) as varchar(2)), 2) 
			)
		from
			#TableAttendance a
	);

	--select EmployeeID
	--     , AttdDate
	--	 , ClockInTime = (
	--			select top 1
	--				   Convert(varchar(5), Convert(time, x.AttendanceTime))
	--			  from #TableAttendance x
	--			 where x.CompanyCode = HrEmployeeShift.CompanyCode
	--			   and x.EmployeeID = HrEmployeeShift.EmployeeID
	--			   and x.AttendanceDate = HrEmployeeShift.AttdDate
	--			   and ltrim(rtrim(replace(x.IdentityCode, char(13), ''))) = 'I'
	--	   )
	--	 , ClockOutTime = (
	--			select top 1
	--				   Convert(varchar(5), Convert(time, x.AttendanceTime))
	--			  from #TableAttendance x
	--			 where x.CompanyCode = HrEmployeeShift.CompanyCode
	--			   and x.EmployeeID = HrEmployeeShift.EmployeeID
	--			   and x.AttendanceDate = HrEmployeeShift.AttdDate
	--			   and ltrim(rtrim(replace(x.IdentityCode, char(13), ''))) = 'O'
	--	   )
	--	 --, OffDutyTime
	--	 , CalcOvertime = dbo.uspfn_CalculateMinute(
	--							HrEmployeeShift.OffDutyTime,
	--							(
	--								select top 1
	--									   Convert(varchar(5), Convert(time, x.AttendanceTime))
	--								  from #TableAttendance x
	--								 where x.CompanyCode = HrEmployeeShift.CompanyCode
	--								   and x.EmployeeID = HrEmployeeShift.EmployeeID
	--								   and x.AttendanceDate = HrEmployeeShift.AttdDate
	--								   and ltrim(rtrim(replace(x.IdentityCode, char(13), ''))) = 'O'
	--							)
	--					  )
 --        , ApprOvertime = 0
	--  from HrEmployeeShift 
	-- where HrEmployeeShift.CompanyCode = @CompanyCode
	--   and HrEmployeeShift.EmployeeID in ( select x.EmployeeID from #TableAttendance x )
	--   and HrEmployeeShift.AttdDate >= @MinDate
	--   and HrEmployeeShift.AttdDate <= @MaxDate
 --      and ISNULL(HrEmployeeShift.ShiftCode, '') != ''
 
	update HrEmployeeShift
	   set ClockInTime = (
				select top 1
					   Convert(varchar(5), Convert(time, x.AttendanceTime))
				  from #TableAttendance x
				 where x.CompanyCode = HrEmployeeShift.CompanyCode
				   and x.EmployeeID = HrEmployeeShift.EmployeeID
				   and x.AttendanceDate = HrEmployeeShift.AttdDate
				   and ltrim(rtrim(replace(x.IdentityCode, char(13), ''))) = 'I'
		   )
		 , ClockOutTime = (
				select top 1
					   Convert(varchar(5), Convert(time, x.AttendanceTime))
				  from #TableAttendance x
				 where x.CompanyCode = HrEmployeeShift.CompanyCode
				   and x.EmployeeID = HrEmployeeShift.EmployeeID
				   and x.AttendanceDate = HrEmployeeShift.AttdDate
				   and ltrim(rtrim(replace(x.IdentityCode, char(13), ''))) = 'O'
		   )
		 , CalcOvertime = dbo.uspfn_CalculateMinute(
								HrEmployeeShift.OffDutyTime,
								(
									select top 1
										   Convert(varchar(5), Convert(time, x.AttendanceTime))
									  from #TableAttendance x
									 where x.CompanyCode = HrEmployeeShift.CompanyCode
									   and x.EmployeeID = HrEmployeeShift.EmployeeID
									   and x.AttendanceDate = HrEmployeeShift.AttdDate
									   and ltrim(rtrim(replace(x.IdentityCode, char(13), ''))) = 'O'
								)
						  )
         , ApprOvertime = 0
	 where HrEmployeeShift.CompanyCode = @CompanyCode
	   and HrEmployeeShift.EmployeeID in ( select x.EmployeeID from #TableAttendance x )
	   and HrEmployeeShift.AttdDate >= @MinDate
	   and HrEmployeeShift.AttdDate <= @MaxDate
       and HrEmployeeShift.ShiftCode is not null





	update
		HrTrnAttendanceFileDtl
	set
		IsTransfered = 1
	where
		FileID = @FileID
		and
		HrTrnAttendanceFileDtl.EmployeeID in ( select x.EmployeeID from #TableAttendance x )
		and
		(
			cast(datepart(year, HrTrnAttendanceFileDtl.AttendanceTime) as varchar(4)) + 
		    right('0' + cast(datepart(month, HrTrnAttendanceFileDtl.AttendanceTime) as varchar(2)), 2) + 
		    right('0' + cast(datepart(day, HrTrnAttendanceFileDtl.AttendanceTime) as varchar(2)), 2) 
		) in (
			select x.AttendanceDate
			  from #TableAttendance x
			 where x.CompanyCode = HrTrnAttendanceFileDtl.CompanyCode
			   and x.EmployeeID = HrTrnAttendanceFileDtl.EmployeeID
		);


	declare @totalRecord int;
	declare @processedRecord int;
	declare @unprocessedRecord int;
	declare @fileStatus int;
	declare @Temp table (
		CompanyCode varchar(17),
		EmployeeID varchar(25),
		AttendanceTime datetime,
		IsTransfered bit
	);

	delete @Temp;

	insert into @Temp
	select distinct
		   a.CompanyCode
		 , a.EmployeeID
		 , a.AttendanceTime
		 , a.IsTransfered
	  from HrTrnAttendanceFileDtl a
	 where a.FileID = @FileID

	set @totalRecord = (select count(CompanyCode) from @Temp);

	set @processedRecord = (select count(CompanyCode) from @Temp where IsTransfered = 1);

	set @unprocessedRecord = (select count(CompanyCode) from @Temp where IsTransfered = 0 or IsTransfered is null);

	if @unprocessedRecord = @totalRecord
	begin
		set @fileStatus = 0;	
	end

	if @unprocessedRecord > 0 and @unprocessedRecord < @totalRecord
	begin
		set @fileStatus = 1;	
	end

	if @processedRecord = @totalRecord
	begin
		set @fileStatus = 1;	
	end

	update
			HrTrnAttendanceFileHdr
		set
			IsTransfered = @fileStatus
		where
			FileID = @FileID;
end
GO
create procedure [dbo].[sfm_GetTeamLeaderList_Temp] (
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@DeptCode varchar(15),
	@PosCode varchar(15)
)
as
begin
	declare @TeamLeaderList table (
		CompanyCode varchar(17),
		BranchCode varchar(17),
		EmployeeID varchar(17),
		EmployeeName varchar(100),
		PosCode varchar(17)
	);
	declare @PositionList table (
		PosCode varchar(16)
	);
	declare @showAllTopLeader bit;
	declare @showLeaderFromAllBranch bit;

	delete from @TeamLeaderList;
	delete from @PositionList;
	set @showAllTopLeader = isnull((
		select top 1
			Value
		from 
			SfmSetting
		where	
			Name = 'showAllTopLeader'
	), 0);
	set @showLeaderFromAllBranch = isnull((
		select top 1
			Value
		from 
			SfmSetting
		where	
			Name = 'showLeaderFromAllBranch'
	), 0);

	if @showAllTopLeader = 0 
	begin
		--select 'Show direct leader';
		insert into @PositionList
		select top 1
			a.PosHeader
		from
			gnMstPosition a
		where
			a.CompanyCode = @CompanyCode
			and
			a.DeptCode = @DeptCode
			and
			a.PosCode = @PosCode
	end
	else
	begin
		--select 'Show all top leader';
		insert into @PositionList
		select 
			a.PosCode
		from
			gnMstPosition a
		where
			a.CompanyCode = @CompanyCode
			and
			a.DeptCode = @DeptCode
			and
			a.PosLevel > (
				select top 1
					x.PosLevel
				from 
					gnMstPosition x
				where
					x.CompanyCode = a.CompanyCode
					and
					x.DeptCode = a.DeptCode
					and
					x.PosCode = @PosCode
			)
	end

	insert into @TeamLeaderList
	select 
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.EmployeeName,
		b.PosCode
	from	
		gnMstEmployee a
	left outer join
		gnMstEmployeeData b
	on
		a.CompanyCode = b.CompanyCode
		and
		a.BranchCode = b.BranchCode
		and
		a.EmployeeID = b.EmployeeID
	where
		a.CompanyCode = @CompanyCode
		and
		b.OrgCode = @DeptCode
		and
		b.PosCode != @PosCode

	if @showLeaderFromAllBranch = 0
	begin
		--select 'Show leader from current branch';
		select 
			a.BranchCode,
			a.EmployeeID,
			a.EmployeeName,
			a.PosCode
		from
			@TeamLeaderList a
		where
			a.CompanyCode = @CompanyCode
			and
			a.BranchCode = @BranchCode
			and
			a.PosCode in (
				select 
					x.PosCode		
				from
					@PositionList x
			)
	end
	else
	begin
		--select 'Show leader from all branch';
		select 
			a.BranchCode,
			a.EmployeeID,
			a.EmployeeName,
			a.PosCode
		from
			@TeamLeaderList a
		where
			a.CompanyCode = @CompanyCode
			and
			a.PosCode in (
				select 
					x.PosCode		
				from
					@PositionList x
			)
	end

	--select * from @PositionList
end

--go
--exec dbo.sfm_GetTeamLeaderList_Temp 
--@CompanyCode = '6006406',
--@BranchCode = '6006401',
--@DeptCode = 'SALES',
--@PosCode = 'S'
GO
create procedure [dbo].[uspfn_omSlsDoLkpMdlYear]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @SONo varchar(15),
 @SalesModelCode varchar(20)
)  
AS  

begin
--exec uspfn_omSlsDoLkpMdlYear 6006410,600641001,'',''
SELECT * FROM omMstModelYear a 
			 WHERE a.CompanyCode = @CompanyCode  
			 AND a.SalesModelCode =@SalesModelCode
			 AND a.Status = '1' 
			 AND a.SalesModelYear IN (SELECT b.SalesModelYear FROM omTrSalesSOModel b 
									  WHERE b.CompanyCode = a.CompanyCode 
									  AND b.SalesModelCode = a.SalesModelCode
									 AND b.SONo = @SONo	
								 AND b.BranchCode = @BranchCode)							 
end
GO
create procedure [dbo].[uspfn_GetBPKDetSeqbySO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(125)
as
begin
	select a.BPKNo
	     , b.BPKSeq
      from omTrSalesBPK a
     inner join omTrSalesBPKDetail b
        on a.CompanyCode = b.CompanyCode
       and a.BranchCode = b.BranchCode
       and a.BPKNo = b.BPKNo
     where a.CompanyCode = @CompanyCode
       and a.BranchCode  = @BranchCode
       and a.SONo = @SONumber
end
GO
create procedure [dbo].[uspfn_GetBPKModelbySO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as
begin
	select a.BPKNo
	     , b.SalesModelCode
		 , b.SalesModelYear
      from omTrSalesBPK a
     inner join omTrSalesBPKDetail b
        on a.CompanyCode = b.CompanyCode
       and a.BranchCode = b.BranchCode
       and a.BPKNo = b.BPKNo
     where a.CompanyCode = @CompanyCode
       and a.BranchCode  = @BranchCode
       and a.SONo = @SONumber
end
GO
create procedure [dbo].[sfm_GetTeamLeaderList] (
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@DeptCode varchar(15),
	@PosCode varchar(15)
)
as
begin
	declare @TeamLeaderList table (
		CompanyCode varchar(17),
		BranchCode varchar(17),
		EmployeeID varchar(17),
		EmployeeName varchar(100),
		PosCode varchar(17)
	);
	declare @PositionList table (
		PosCode varchar(16)
	);
	declare @showAllTopLeader bit;
	declare @showLeaderFromAllBranch bit;

	delete from @TeamLeaderList;
	delete from @PositionList;
	set @showAllTopLeader = isnull((
		select top 1
			Value
		from 
			SfmSetting
		where	
			Name = 'showAllTopLeader'
	), 0);
	set @showLeaderFromAllBranch = isnull((
		select top 1
			Value
		from 
			SfmSetting
		where	
			Name = 'showLeaderFromAllBranch'
	), 0);

	if @showAllTopLeader = 0 
	begin
		--select 'Show direct leader';
		insert into @PositionList
		select top 1
			a.PosHeader
		from
			gnMstPosition a
		where
			a.CompanyCode = @CompanyCode
			and
			a.DeptCode = @DeptCode
			and
			a.PosCode = @PosCode
	end
	else
	begin
		--select 'Show all top leader';
		insert into @PositionList
		select 
			a.PosCode
		from
			gnMstPosition a
		where
			a.CompanyCode = @CompanyCode
			and
			a.DeptCode = @DeptCode
			and
			a.PosLevel > (
				select top 1
					x.PosLevel
				from 
					gnMstPosition x
				where
					x.CompanyCode = a.CompanyCode
					and
					x.DeptCode = a.DeptCode
					and
					x.PosCode = @PosCode
			)
	end

	insert into @TeamLeaderList
	select 
		a.CompanyCode,
		a.BranchCode,
		a.EmployeeID,
		a.EmployeeName,
		b.PosCode
	from	
		gnMstEmployee a
	left outer join
		gnMstEmployeeData b
	on
		a.CompanyCode = b.CompanyCode
		and
		a.BranchCode = b.BranchCode
		and
		a.EmployeeID = b.EmployeeID
	where
		a.CompanyCode = @CompanyCode
		and
		b.OrgCode = @DeptCode
		and
		b.PosCode != @PosCode

	if @showLeaderFromAllBranch = 0
	begin
		--select 'Show leader from current branch';
		select 
			a.BranchCode,
			a.EmployeeID,
			a.EmployeeName,
			a.PosCode
		from
			@TeamLeaderList a
		where
			a.CompanyCode = @CompanyCode
			and
			a.BranchCode = @BranchCode
			and
			a.PosCode in (
				select 
					x.PosCode		
				from
					@PositionList x
			)
	end
	else
	begin
		--select 'Show leader from all branch';
		select 
			a.BranchCode,
			a.EmployeeID,
			a.EmployeeName,
			a.PosCode
		from
			@TeamLeaderList a
		where
			a.CompanyCode = @CompanyCode
			and
			a.PosCode in (
				select 
					x.PosCode		
				from
					@PositionList x
			)
	end

	--select * from @PositionList
end
GO
create procedure [dbo].[uspfn_GetBPKNobySO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as
begin
	select a.BPKNo
     from omTrSalesBPK a
    where a.CompanyCode = @CompanyCode
      and a.BranchCode  = @BranchCode
      and a.SONo = @SONumber
end
GO
create procedure [dbo].[uspfn_GetChassisBySO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as
begin
	select b.ChassisCode
	     , b.ChassisNo
      from omTrSalesBPK a
     inner join omTrSalesBPKDetail b
        on a.CompanyCode = b.CompanyCode
       and a.BranchCode = b.BranchCode
       and a.BPKNo = b.BPKNo
     where a.CompanyCode = @CompanyCode
       and a.BranchCode  = @BranchCode
       and a.SONo = @SONumber
      
	  UNION 
            
     select b.ChassisCode
	      , b.ChassisNo
       from omTrSalesDO a
      inner join omTrSalesDODetail b
         on a.CompanyCode = b.CompanyCode
        and a.BranchCode = b.BranchCode
        and a.DONo = b.DONo
      where a.CompanyCode = @CompanyCode
        and a.BranchCode  = @BranchCode
        and a.SONo = @SONumber;
end
GO
CREATE procedure [dbo].[uspfn_omSlsDoLkpExpdtn]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @Status varchar(1),
 @ProfitCenterCode varchar(3) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpExpdtn 6006410,600641001,1,100
SELECT 
                    a.SupplierCode, a.Suppliername, (a.address1+' '+a.address2+' '+a.address3+' '+a.address4) as Alamat,
                    b.DiscPct as Diskon, (Case a.Status when 0 then 'Tidak Aktif' else 'Aktif' end) as [Status],
                    (SELECT Lookupvaluename FROM gnmstlookupdtl WHERE codeid='PFCN' 
                     AND lookupvalue = b.ProfitCentercode) as Profit
                FROM 
                    gnMstSupplier a
                LEFT JOIN gnmstSupplierProfitCenter b ON a.CompanyCode= b.CompanyCode
	                AND a.SupplierCode = b.SupplierCode
                LEFT JOIN gnMstCustomer c ON a.SupplierCode = c.customercode
                WHERE 
                    a.CompanyCode           = @CompanyCode
                    and b.BranchCode        = @BranchCode
                    AND a.Status            = @Status
                    AND b.ProfitCenterCode  = @ProfitCenterCode                
                ORDER BY 
                    a.SupplierCode 
end
GO
create procedure [dbo].[uspfn_CsInqTDayCall]
    @CompanyCode varchar(20),
    @BranchCode varchar(20) = '',
    @DateFrom varchar(10),
    @DateTo varchar(10)
as

--declare
--    @CompanyCode varchar(20),
--    @BranchCode varchar(20),
--    @DateFrom varchar(10),
--    @DateTo varchar(10)

--select @CompanyCode=N'6006406',@BranchCode='',@DateFrom=N'20140311',@DateTo=N'20140311'

select b.CompanyCode
     , b.BranchCode  
     , b.CustomerCode
     , b.CustomerName
     , b.Address
     , b.PhoneNo
     , b.HPNo
     , b.AddPhone1
     , b.AddPhone2
     , b.BirthDate
     , c.CarType
     , c.Color
     , c.PoliceRegNo
     , a.Chassis
     , c.Engine 
     , c.SONo
     , c.SalesmanCode
     , c.SalesmanName
     , c.SalesmanName as Salesman
     , b.BirthDate
     , b.ReligionCode
     , case a.IsDeliveredA when 1 then 'Ya' else 'Tidak' end IsDeliveredA
     , case a.IsDeliveredB when 1 then 'Ya' else 'Tidak' end IsDeliveredB
     , case a.IsDeliveredC when 1 then 'Ya' else 'Tidak' end IsDeliveredC
     , case a.IsDeliveredD when 1 then 'Ya' else 'Tidak' end IsDeliveredD
     , case a.IsDeliveredE when 1 then 'Ya' else 'Tidak' end IsDeliveredE
     , case a.IsDeliveredF when 1 then 'Ya' else 'Tidak' end IsDeliveredF
     , case a.IsDeliveredG when 1 then 'Ya' else 'Tidak' end IsDeliveredG
     , a.Comment, a.Additional, a.Status
	 , c.DeliveryDate
     , a.CreatedDate
 from CsTDayCall a
 left join CsCustomerView b
   on b.CompanyCode = a.CompanyCode
  and b.CustomerCode = a.CustomerCode
 left join CsCustomerVehicleView c
   on c.CompanyCode = a.CompanyCode
  and c.Chassis = a.Chassis
where b.CompanyCode = @CompanyCode
  and b.BranchCode = (case isnull(@BranchCode, '') when '' then b.BranchCode else @BranchCode end)
  and convert(varchar, a.CreatedDate, 112) between @DateFrom and @DateTo
order by a.CreatedDate
GO
CREATE procedure [dbo].[uspfn_omSlsDoLkpMdlCode]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @SONo varchar(15) 
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpMdlCode 6006410,600641001,''
SELECT  
	a.CompanyCode
	,a.SalesModelCode
	,a.SalesModelDesc
	,a.FakturPolisiDesc
	,a.EngineCode
	,a.PpnBmCodeBuy
	,a.PpnBmPctBuy
	,a.PpnBmCodeSell
	,a.PpnBmPctSell
	,a.PpnBmCodePrincipal
	,a.PpnBmPctPrincipal
	,a.Remark
	,a.BasicModel
	,a.TechnicalModelCode
	,a.ProductType
	,a.TransmissionType
	,a.IsChassis
	,a.IsCbu
	,a.SMCModelCode
	,a.GroupCode
	,a.TypeCode
	,a.CylinderCapacity
	,a.fuel
	,a.ModelPrincipal
	,a.Specification
	,a.ModelLine
	,a.Status
	,a.CreatedBy
	,a.CreatedDate
	,a.LastUpdateBy
	,a.LastUpdateDate
	,a.IsLocked
	,a.LockedBy
	,a.LockedDate
	,a.MarketModelCode
	,a.GroupMarketModel
	,a.ColumnMarketModel
FROM omMstModel a
INNER JOIN omTrSalesSOModel b
ON b.CompanyCode = a.CompanyCode
AND b.SalesModelCode = a.SalesModelCode	
WHERE a.CompanyCode = @CompanyCode
AND b.BranchCode = @BranchCode
AND b.SONo = @SONo
AND b.QuantityDO < b.QuantitySO
ORDER BY a.SalesModelCode ASC
end
GO
-- ==============================================================================
-- Description	: Inquiry ITS with Status
-- Query		: uspfn_InquiryITSWithStatus '6006406', '6006401', '20131001','20131031','20130901','20130930','CABANG','','','',0
-- ==============================================================================

CREATE PROCEDURE [dbo].[uspfn_InquiryITSWithStatus]
	@CompanyCode		varchar(15),
	@BranchCode			varchar(15),
	@StartDate			varchar(20),
	@EndDate			varchar(20),
	@LastStartDate		varchar(20),
	@LastEndDate		varchar(20),
	@Area				varchar(100),
	@GroupModel			varchar(100),
	@TipeKendaraan		varchar(100),
	@Variant			varchar(100),
	@Summary			bit
AS
--Declare @CompanyCode	varchar(15)
--declare @BranchCOde		varchar(15)
--Declare @StartDate		varchar(20)
--Declare @EndDate		varchar(20)
--Declare @LastStartDate	varchar(20)
--Declare @LastEndDate	varchar(20)
--Declare @Area			varchar(100)
--declare @GroupModel		varchar(100)
--declare @TipeKendaraan	varchar(100)
--declare @Variant		varchar(100)
--declare @Summary		bit

--set @CompanyCode = '6006406'
--set @BranchCode = '6006401'
--set @StartDate = '20130901'
--set @EndDate = '20130930'
--set @LastStartDate = '20130801'
--set @LastEndDate = '20130831'
--set @Area = 'CABANG'
--set @GroupModel = ''
--set @TipeKendaraan = ''
--set @Variant = ''
--set @Summary = 0

declare @National varchar(10)
set @National = (select top 1 ISNULL(ParaValue,0) from gnMstLookUpDtl
                  where CodeID='QSLS' and LookUpValue='NATIONAL')

declare @Week int
set @Week = (DATEDIFF(week,DATEADD(MONTH,DATEDIFF(MONTH,0,convert(datetime,@EndDate)),0),convert(datetime,@EndDate))+1)

if(@National = 1)
--#region IF NATIONAL
begin
	select * into #StatusWoArea from(
		Select c.GroupNo, c.Area, b.CompanyCode, c.DealerAbbreviation, b.BranchCode
		     , b.InquiryNumber, b.SequenceNo, b.LastProgress, b.UpdateDate
		     , (DATEDIFF(week,DATEADD(MONTH,DATEDIFF(MONTH,0, b.UpdateDate),0),b.UpdateDate)+1) WeekInt
		  from pmStatusHistory b with (nolock, nowait)
		       left join gnMstDealerMapping c with (nolock, nowait) 
		              on b.CompanyCode = c.DealerCode
		 where (c.Area like 
		               Case when @Area <> '' 
						    then case when (@Area='JABODETABEK' or @Area='CABANG')
									  then 'JABODETABEK'
									  else @Area 
								 end
						    else '%%' 
					   end
			or  c.Area like 
			           Case when @Area <> '' 
						    then case when (@Area='JABODETABEK' or @Area='CABANG')
									  then 'CABANG'
								      else @Area 
								 end
						    else '%%' 
					   end)
		   --and b.CompanyCode like 
		   --                  case when @CompanyCode='' 
		   --                       then '%%' 
		   --                       else @CompanyCode 
		   --                  end
		   and (case when b.CompanyCode='6015402' then '6015401' 
		             when b.CompanyCode='6051402' then '6051401'
		             else b.CompanyCode end)
		        like 
		        case when @CompanyCode = ''       then '%%' 
		             when @CompanyCode ='6015402' then '6015401'
		             when @CompanyCode ='6051402' then '6051401'
		             else @CompanyCode end		   
		   and b.BranchCode  like 
		                     case when @BranchCode='' 
		                          then '%%' 
		                          else @BranchCode 
		                     end
		   and b.LastProgress in (select LookUpValue from gnMstLookUpDtl where CodeID = 'PSTS')
		   and (convert(varchar,b.UpdateDate,112) between @StartDate and @EndDate
            or (convert(varchar,b.UpdateDate,112) < @StartDate 
           and (b.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress<>'P'
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP','SPK')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate))))
	)#StatusWoArea

	select * into #VehicleTemplateWoArea from(
		select distinct a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , isnull((select TOP 1 GroupModel 
						 from msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan, d.SeqNo
			 , d.LookUpValue LastProgress
			 , 0 [1]
			 , 0 [2]
			 , 0 [3]
			 , 0 [4]
			 , 0 [5]
			 , 0 [6]
		  from gnMstLookUpDtl d with (nolock, nowait)
		  LEFT JOIN (select distinct GroupNo
						  , Area
						  , CompanyCode
						  , DealerAbbreviation
						  , BranchCode
						  , InquiryNumber
					   from #StatusWoArea) a on 1 = 1
		  INNER JOIN pmHstITS b with (nolock, nowait) 
		          on a.CompanyCode = b.CompanyCode
			     and a.BranchCode = b.BranchCode
		         and a.InquiryNumber = b.InquiryNumber 
		  where d.CodeID = 'PSTS'
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant       like case when @Variant       = '' then '%%' else @Variant       end
	)#VehicleTemplateWoArea

	select * into #VehicleWoArea from(
		select a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.InquiryNumber
			 , b.InquiryDate
			 , isnull((select TOP 1 GroupModel 
						 from msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan
			 , a.SequenceNo
			 , a.LastProgress
			 , a.UpdateDate
			 , a.WeekInt
		  from #StatusWoArea a
		  INNER join pmHstITS b with (nolock, nowait)
		          on a.CompanyCode = b.CompanyCode
			     and a.BranchCode = b.BranchCode
		         and a.InquiryNumber = b.InquiryNumber 		  
		  where 1 = 1 
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant       like case when @Variant       = '' then '%%' else @Variant       end
	)#VehicleWoArea

	select * into #TestSummaryFirst from(
		select distinct '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , (select SeqNo from GnMstLookUpDtl where CodeID = 'PSTS' and LookUpValue = a.LastProgress) seqNo
			 , a.LastProgress
			 , a.WeekInt
			 ,(select COUNT(*) 
				 from #VehicleWoArea 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and convert(varchar, UpdateDate, 112) < @StartDate 
				  and convert(varchar, InquiryDate, 112) < @StartDate) SaldoAwal
			 ,(select COUNT(*)
				 from #VehicleWoArea 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar, UpdateDate, 112) between @StartDate and @EndDate
				  and convert(varchar, InquiryDate, 112) < @StartDate) TotalOuts
			 ,(select COUNT(*) 
				 from #VehicleWoArea 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar, UpdateDate, 112) between @StartDate and @EndDate
				  and convert(varchar, InquiryDate, 112) between @StartDate and @EndDate) Total
		from #VehicleWoArea a
		where a.TipeKendaraan like case when @GroupModel = '' then '%%' else @GroupModel end
	)#TestSummaryFirst
	
	select * into #TestPivotFirst from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , isnull([1],0) Week1, isnull([2],0) Week2, isnull([3],0) Week3,isnull([4],0) Week4, isnull([5],0) Week5, isnull([6],0) Week6
			 , 0 WeekOuts1, 0 WeekOuts2, 0 WeekOuts3, 0 WeekOuts4, 0 WeekOuts5, 0 WeekOuts6
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , Total
			 from #TestSummaryFirst
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(Total)
			for WeekInt in ([1],[2],[3],[4],[5],[6])
		  )pvt
	  UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 ,(select COUNT(*) 
			 from #VehicleWoArea 
			where CompanyCode = a.CompanyCode 
			  and BranchCode = a.BranchCode 
			  and TipeKendaraan = a.TipeKendaraan
			  and SeqNo = a.SeqNo
			  and LastProgress = a.LastProgress 
			  and convert(varchar,UpdateDate,112) < @StartDate 
			  and convert(varchar,InquiryDate,112) < @StartDate) SaldoAwal
			 , [1], [2], [3], [4], [5], [6]
			 , 0, 0, 0, 0, 0, 0
		  from #VehicleTemplateWoArea a
		  where not exists (select 1 
							  from #TestSummaryFirst
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)

	)#TestPivotFirst

	select * into #TestPivotOutsFirst from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , 0 Week1, 0 Week2, 0 Week3, 0 Week4, 0 Week5, 0 Week6
			 , isnull([1],0) WeekOuts1 , isnull([2],0) WeekOuts2 , isnull([3],0) WeekOuts3 ,isnull([4],0) WeekOuts4 , isnull([5],0) WeekOuts5 , isnull([6],0) WeekOuts6 
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , TotalOuts
			 from #TestSummaryFirst
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(TotalOuts)
			for WeekInt in ([1],[2],[3],[4],[5],[6])
		  )pvt
	  UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , 0
			 , 0, 0, 0, 0, 0, 0
			 , 0, 0, 0, 0, 0, 0
		  from #VehicleTemplateWoArea a
		  where not exists (select 1 
							  from #TestSummaryFirst
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)

	)#TestPivotOutsFirst

	select * into #TestFinalSummaryFirst from(
		select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , a.SaldoAwal
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts1 end WeekOuts1
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts2 end WeekOuts2
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts3 end WeekOuts3
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts4 end WeekOuts4
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts5 end WeekOuts5
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts6 end WeekOuts6
			 , a.Week1
			 , a.Week2
			 , a.Week3
			 , a.Week4
			 , a.Week5
			 , a.Week6
		  from #TestPivotFirst a
		  left join #TestPivotOutsFirst b on a.GroupNo = b.GroupNo
				and a.OrderNo3 = b.OrderNo3
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
				and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.BranchCOde = b.BranchCode
				and a.DealerAbbreviation = b.DealerAbbreviation
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	)#TestFinalSummaryFirst
	
	select * into #TestFinalSummaryFirstBranch from(
		select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '2' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(b.WeekOuts1) WeekOuts1
			 , SUM(b.WeekOuts2) WeekOuts2
			 , SUM(b.WeekOuts3) WeekOuts3
			 , SUM(b.WeekOuts4) WeekOuts4
			 , SUM(b.WeekOuts5) WeekOuts5
			 , SUM(b.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestPivotFirst a
		  left join #TestPivotOutsFirst b on a.GroupNo = b.GroupNo
				and a.OrderNo3 = b.OrderNo3
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
				and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.DealerAbbreviation = b.DealerAbbreviation
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	  group by a.GroupNo,a.Area,a.CompanyCode,a.DealerAbbreviation, a.BranchCode,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummaryFirstBranch
	
	select * into #TestFinalSummarySecond from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryFirst a
	  group by a.GroupNo,a.Area,a.CompanyCode,a.DealerAbbreviation,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummarySecond
	
	select * into #TestFinalSummaryThird from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , '' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummarySecond a
	  group by a.GroupNo,a.Area,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummaryThird
		
	select * into #TestFinalSummaryFourth from(
		select '2' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '2' OrderNo2
			 , '' GroupNo
			 , 'TOTAL' Area
			 , '' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , 'TOTAL' TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryThird a
	  group by a.SeqNo,a.LastProgress
	)#TestFinalSummaryFourth
	
	select * into #TestFinalSummaryFifth from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '1' OrderNo2
			 , '999' GroupNo
			 , 'TOTAL' Area
			 , 'TOTAL' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
		  from #TestFinalSummaryThird a
	  group by a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummaryFifth
	
	select * into #SummaryWBranch from(
	select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.Dealerabbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(a.WeekOuts6) WeekOuts6
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week6) Week6
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryFirstBranch a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
	select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.Dealerabbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(a.WeekOuts6) WeekOuts6
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week6) Week6
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummarySecond a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
		select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(a.WeekOuts6) WeekOuts6
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week6) Week6
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			  from #TestFinalSummaryThird a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
		select a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
			 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
		  from  #TestFinalSummaryFifth a
		   group by a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
	UNION
		select a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.WeekOuts6) WeekOuts6
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week6) Week6
			 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
		  from  #TestFinalSummaryFourth a
		   group by a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
	)#SummaryWBranch
	
	select * into #SummaryDetail from(
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end) TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , (a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) TotalWeek
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 + a.WeekOuts6 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5 + a.Week6) Total
			 from #TestFinalSummaryFirst a
		UNION
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.WeekOuts6
				 , a.TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.Week6
				 , a.TotalWeek
				 , a.Total
			 from #SummaryWBranch a
	)#SummaryDetail

if(@Summary = 0)
begin
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.SeqNo
		 , a.LastProgress
		 , SUM(a.SaldoAwal) SaldoAwal
		 , SUM(a.WeekOuts1) WeekOuts1
		 , SUM(a.WeekOuts2) WeekOuts2
		 , SUM(a.WeekOuts3) WeekOuts3
		 , SUM(a.WeekOuts4) WeekOuts4
		 , SUM(a.WeekOuts5) WeekOuts5
		 , SUM(a.WeekOuts6) WeekOuts6
		 , SUM(a.TotalWeekOuts) TotalWeekOuts
		 , SUM(a.Week1) Week1
		 , SUM(a.Week2) Week2
		 , SUM(a.Week3) Week3
		 , SUM(a.Week4) Week4
		 , SUM(a.Week5) Week5
		 , SUM(a.Week6) Week6
		 , SUM(a.TotalWeek) TotalWeek
		 , SUM(a.Total) Total
	  from #SummaryWBranch a
	  left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode
	 where a.OrderNo2 <> 1
	 group by a.OrderNo3, a.OrderNo,a.OrderNo1, a.OrderNo2, a.GroupNo,a.Area,a.CompanyCode,a.DealerAbbreviation, a.BranchCode,c.OutletAbbreviation, a.SeqNo, a.LastProgress
	 order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,Area asc,OrderNo1 asc,a.OrderNo asc,a.BranchCode asc,a.OrderNo2 Asc,a.SeqNo Asc

	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.SeqNo
		 , a.LastProgress
		 , a.SaldoAwal
		 , a.WeekOuts1
		 , a.WeekOuts2
		 , a.WeekOuts3
		 , a.WeekOuts4
		 , a.WeekOuts5
		 , a.WeekOuts6
		 , a.TotalWeekOuts
		 , a.Week1
		 , a.Week2
		 , a.Week3
		 , a.Week4
		 , a.Week5
		 , a.Week6
		 , a.TotalWeek
		 , a.Total
	  from #SummaryDetail a
	  left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode
	where a.GroupNo <> 2 and a.OrderNo2 <> 2
	 --order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,Area asc,OrderNo1 asc,a.OrderNo asc,a.BranchCode asc,a.SeqNo Asc
	 order by a.OrderNo3 Asc, a.TipeKendaraan Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.OrderNo asc,a.OrderNo1 asc,a.BranchCode asc,a.OrderNo2 Asc,a.Area asc,a.SeqNo Asc
end
else if(@Summary = 1)
begin
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.SeqNo
		 , a.LastProgress
		 , SaldoAwal
		 , a.WeekOuts1 + a.Week1 Week1
		 , a.WeekOuts2 + a.Week2 Week2
		 , a.WeekOuts3 + a.Week3 Week3
		 , a.WeekOuts4 + a.Week4 Week4
		 , a.WeekOuts5 + a.Week5 Week5
		 , a.WeekOuts6 + a.Week6 Week6
		 , a.Total TotalWeek
	  from #SummaryDetail a
	  left join GnMstDealerMapping b on a.CompanyCode = b.DealerCode
	  left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode
	 order by a.OrderNo3 Asc, a.TipeKendaraan Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.OrderNo asc,a.OrderNo1 asc,a.BranchCode asc,a.OrderNo2 Asc,a.Area asc,a.SeqNo Asc
	 --order by OrderNo3 Asc,TipeKendaraan Asc,Area asc, DealerAbbreviation asc,OrderNo asc,OrderNo2 Asc,BranchCode asc,a.SeqNo Asc
end
-- Query : uspfn_InquiryITSStatusByType_Tuning '20100701','20100716','','','','','','',1

	--drop table #Base
	drop table #SummaryWBranch
	drop table #SummaryDetail
	drop table #TestFinalSummaryFirst
	drop table #TestFinalSummaryFirstBranch
	drop table #TestFinalSummarySecond
	drop table #TestFinalSummaryThird
	drop table #TestFinalSummaryFourth
	drop table #TestFinalSummaryFifth
	drop table #TestPivotOutsFirst
	drop table #TestPivotFirst
	drop table #TestSummaryFirst
	drop table #VehicleWoArea
	drop table #VehicleTemplateWoArea
	drop table #StatusWoArea
end
--#endregion

--#region IF DEALER
else
begin
	select * into #StatusWoAreaDlr from(
		Select c.GroupNo, c.Area, b.CompanyCode, c.DealerAbbreviation, b.BranchCode
		     , b.InquiryNumber, b.SequenceNo, b.LastProgress, b.UpdateDate
		     , CASE 
				 WHEN day(b.UpdateDate) >= 1 and day(b.UpdateDate) <= 7  THEN 1
				 WHEN day(b.UpdateDate) >= 8 and day(b.UpdateDate) <= 14  THEN 2
				 WHEN day(b.UpdateDate) >= 15 and day(b.UpdateDate) <= 21  THEN 3
				 WHEN day(b.UpdateDate) >= 22 and day(b.UpdateDate) <= 28  THEN 4
				 WHEN day(b.UpdateDate) >= 29 and day(b.UpdateDate) <= 31  THEN 5
			   END WeekInt		     		  
	 	  from pmStatusHistory b with (nolock, nowait)
		       left join gnMstDealerMapping c with (nolock, nowait) 
		              on b.CompanyCode = c.DealerCode
		 where (c.Area like 
		               Case when @Area <> '' 
						    then case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
									  then 'JABODETABEK'
							          else @Area 
							     end
						    else '%%' 
					   end
			or  c.Area like 
			           Case when @Area <> '' 
							then case when (@Area='JABODETABEK' or @Area='CABANG')
									  then 'CABANG'
								      else @Area 
								 end
						    else '%%' 
					   end)
		   --and b.CompanyCode like 
		   --                  case when @CompanyCode='' 
		   --                       then '%%' 
		   --                       else @CompanyCode 
		   --                  end
		   and (case when b.CompanyCode='6015402' then '6015401' 
		             when b.CompanyCode='6051402' then '6051401'
		             else b.CompanyCode end)
		        like 
		        case when @CompanyCode = ''       then '%%' 
		             when @CompanyCode ='6015402' then '6015401'
		             when @CompanyCode ='6051402' then '6051401'
		             else @CompanyCode end		   
		   and b.BranchCode  like 
		                     case when @BranchCode='' 
		                          then '%%' 
		                          else @BranchCode 
		                     end
		   and b.LastProgress in (select LookUpValue from gnMstLookUpDtl where CodeID = 'PSTS')
		   and (convert(varchar,b.UpdateDate,112) between @StartDate and @EndDate
            or (convert(varchar,b.UpdateDate,112) < @StartDate 
           and (b.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress<>'P'
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate)
            or  b.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP','SPK')
		                                                and convert(varchar,h.UpdateDate,112)<@StartDate))))
		   )#StatusWoAreaDlr
						
	select * into #StatusWoAreaDlrLast from(
		Select c.GroupNo, c.Area, b.CompanyCode, c.DealerAbbreviation, b.BranchCode
		     , b.InquiryNumber, b.SequenceNo, b.LastProgress, b.UpdateDate
		     , CASE 
				 WHEN day(b.UpdateDate) >= 1 and day(b.UpdateDate) <= 7  THEN 1
				 WHEN day(b.UpdateDate) >= 8 and day(b.UpdateDate) <= 14  THEN 2
				 WHEN day(b.UpdateDate) >= 15 and day(b.UpdateDate) <= 21  THEN 3
				 WHEN day(b.UpdateDate) >= 22 and day(b.UpdateDate) <= 28  THEN 4
				 WHEN day(b.UpdateDate) >= 29 and day(b.UpdateDate) <= 31  THEN 5
			   END WeekInt		   
	 	  from pmStatusHistory b with (nolock, nowait)
		       left join gnMstDealerMapping c with (nolock, nowait) 
		              on b.CompanyCode = c.DealerCode
		 where (c.Area like 
		               Case when @Area <> '' 
						    then case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
									  then 'JABODETABEK'
							          else @Area 
							     end
						    else '%%' 
					   end
			or  c.Area like 
			           Case when @Area <> '' 
							then case when (@Area='JABODETABEK' or @Area='CABANG')
									  then 'CABANG'
								      else @Area 
								 end
						    else '%%' 
					   end)
		   --and b.CompanyCode like 
		   --                  case when @CompanyCode='' 
		   --                       then '%%' 
		   --                       else @CompanyCode 
		   --                  end
		   and (case when b.CompanyCode='6015402' then '6015401' 
		             when b.CompanyCode='6051402' then '6051401'
		             else b.CompanyCode end)
		        like 
		        case when @CompanyCode = ''       then '%%' 
		             when @CompanyCode ='6015402' then '6015401'
		             when @CompanyCode ='6051402' then '6051401'
		             else @CompanyCode end		   
		   and b.BranchCode  like 
		                     case when @BranchCode='' 
		                          then '%%' 
		                          else @BranchCode 
		                     end
		   and b.LastProgress in (select LookUpValue from gnMstLookUpDtl where CodeID = 'PSTS')
		   and (convert(varchar,b.UpdateDate,112) between @LastStartDate and @LastEndDate
           or (convert(varchar,b.UpdateDate,112) < @LastStartDate 
           and (b.LastProgress='P'   and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress<>'P'
		                                                and convert(varchar,h.UpdateDate,112)<@LastStartDate)
            or  b.LastProgress='HP'  and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP')
		                                                and convert(varchar,h.UpdateDate,112)<@LastStartDate)
            or  b.LastProgress='SPK' and not exists (select top 1 1 from pmStatusHistory h
		                                              where h.CompanyCode=b.CompanyCode
		                                                and h.BranchCode=b.BranchCode
		                                                and h.InquiryNumber=b.InquiryNumber
		                                                and h.LastProgress not in ('P','HP','SPK')
		                                                and convert(varchar,h.UpdateDate,112)<@LastStartDate))))
			)#StatusWoAreaDlrLast

	select * into #VehicleTemplateWoAreaDlr from(
		select distinct a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , isnull((select TOP 1 GroupModel 
						 from msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan
			 , d.SeqNo
			 , d.LookUpValue LastProgress
			 , 0 [1]
			 , 0 [2]
			 , 0 [3]
			 , 0 [4]
			 , 0 [5]
			 , 0 [6]
		  from gnMstLookUpDtl d with (nolock, nowait)
		  LEFT JOIN (select distinct GroupNo
						  , Area
						  , CompanyCode
						  , DealerAbbreviation
						  , BranchCode
						  , InquiryNumber
					   from #StatusWoAreaDlr) a on 1 = 1
		  INNER JOIN pmKDP b with (nolock, nowait) 
		          on a.InquiryNumber = b.InquiryNumber 
			     and a.BranchCode = b.BranchCode
			     and a.CompanyCode = b.CompanyCode
		  where d.CodeID = 'PSTS'
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleTemplateWoAreaDlr
	
	select * into #VehicleTemplateWoAreaDlrLast from(
		select distinct a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , isnull((select TOP 1 GroupModel 
						 from msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan
			 , d.SeqNo
			 , d.LookUpValue LastProgress
			 , 0 [1]
			 , 0 [2]
			 , 0 [3]
			 , 0 [4]
			 , 0 [5]
		  from gnMstLookUpDtl d with (nolock, nowait)
		  LEFT JOIN (select distinct GroupNo
						  , Area
						  , CompanyCode
						  , DealerAbbreviation
						  , BranchCode
						  , InquiryNumber
					   from #StatusWoAreaDlrLast) a on 1 = 1
		  INNER JOIN pmKDP b with (nolock, nowait) 
		          on a.InquiryNumber = b.InquiryNumber 
			     and a.BranchCode = b.BranchCode
			     and a.CompanyCode = b.CompanyCode
		  where d.CodeID = 'PSTS'
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleTemplateWoAreaDlrLast
	
	select * into #VehicleWoAreaDlr from(
		select a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.InquiryNumber
			 , b.InquiryDate
			 --, isnull(c.GroupModel,'OTHERS') TipeKendaraan
			 , isnull((select TOP 1 GroupModel 
						 from msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan
			 , a.SequenceNo
			 , a.LastProgress
			 , a.UpdateDate
			 , a.WeekInt
		  from #StatusWoAreaDlr a
		  INNER join pmKDP b with (nolock, nowait)
		          on a.InquiryNumber = b.InquiryNumber 
			     and a.BranchCode = b.BranchCode
			     and a.CompanyCode = b.CompanyCode
		  --left join msMstGroupModel c with (nolock,nowait) on b.TipeKendaraan = c.ModelType
		  where 1 = 1
		    --and c.GroupModel like case when @GroupModel = '' then '%%' else @GroupModel end
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleWoAreaDlr	
		
	select * into #VehicleWoAreaDlrLast from(
		select a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.InquiryNumber
			 , b.InquiryDate
			 --, isnull(c.GroupModel,'OTHERS') TipeKendaraan
			 , isnull((select TOP 1 GroupModel 
						 from msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan
			 , a.SequenceNo
			 , a.LastProgress
			 , a.UpdateDate
			 , a.WeekInt
		  from #StatusWoAreaDlrLast a
		  INNER join pmKDP b with (nolock, nowait)
		          on a.InquiryNumber = b.InquiryNumber 
			     and a.BranchCode = b.BranchCode
			     and a.CompanyCode = b.CompanyCode
		  --left join msMstGroupModel c with (nolock,nowait) on b.TipeKendaraan = c.ModelType
		  where 1 = 1
		    --and c.GroupModel like case when @GroupModel = '' then '%%' else @GroupModel end
			and TipeKendaraan like case when @TipeKendaraan = '' then '%%' else @TipeKendaraan end
			and Variant like case when @Variant = '' then '%%' else @Variant end
	)#VehicleWoAreaDlrLast
	
	select * into #TestSummaryFirstDlr from(
		select distinct '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , (select SeqNo from GnMstLookUpDtl where CodeID = 'PSTS' and LookUpValue = a.LastProgress) seqNo
			 , a.LastProgress
			 , a.WeekInt
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlr 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and convert(varchar, UpdateDate, 112) < @StartDate 
				  and convert(varchar, InquiryDate, 112) < @StartDate) SaldoAwal
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlr 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar, UpdateDate, 112) between @StartDate and @EndDate
				  and convert(varchar, InquiryDate, 112) < @StartDate) TotalOuts
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlr 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar, UpdateDate, 112) between @StartDate and @EndDate
				  and convert(varchar, InquiryDate, 112) between @StartDate and @EndDate) Total
		from #VehicleWoAreaDlr a
		where a.TipeKendaraan like case when @GroupModel  = '' then '%%' else @GroupModel end
	)#TestSummaryFirstDlr

	select * into #TestSummaryFirstDlrLast from(
		select distinct '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , (select SeqNo from GnMstLookUpDtl where CodeID = 'PSTS' and LookUpValue = a.LastProgress) seqNo
			 , a.LastProgress
			 , a.WeekInt
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlrLast 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and convert(varchar, UpdateDate, 112) < @LastStartDate
				  and convert(varchar, InquiryDate, 112) < @LastStartDate) SaldoAwal
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlrLast 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar, UpdateDate, 112) between @LastStartDate and @LastEndDate
				  and convert(varchar, InquiryDate, 112) < @LastStartDate) TotalOuts
			 ,(select COUNT(*) 
				 from #VehicleWoAreaDlrLast 
				where CompanyCode = a.CompanyCode 
				  and BranchCode = a.BranchCode 
				  and TipeKendaraan = a.TipeKendaraan 
				  and LastProgress = a.LastProgress 
				  and WeekInt = a.WeekInt
				  and convert(Varchar, UpdateDate, 112) between @LastStartDate and @LastEndDate
				  and convert(varchar, InquiryDate, 112) between @LastStartDate and @LastEndDate) Total
		from #VehicleWoAreaDlrLast a
		where a.TipeKendaraan like case when @GroupModel  = '' then '%%' else @GroupModel end
	)#TestSummaryFirstDlrLast


	select * into #TestPivotFirstDlr from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , isnull([1],0) Week1, isnull([2],0) Week2, isnull([3],0) Week3,isnull([4],0) Week4, isnull([5],0) Week5
			 , 0 WeekOuts1, 0 WeekOuts2, 0 WeekOuts3, 0 WeekOuts4, 0 WeekOuts5
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , Total
			 from #TestSummaryFirstDlr
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(Total)
			for WeekInt in ([1],[2],[3],[4],[5])
		  )pvt
	  UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 ,(select COUNT(*) 
			 from #VehicleWoAreaDlr
			where CompanyCode = a.CompanyCode 
			  and BranchCode = a.BranchCode 
			  and TipeKendaraan = a.TipeKendaraan
			  and SeqNo = a.SeqNo
			  and LastProgress = a.LastProgress 
			  and convert(varchar,UpdateDate,112) < @StartDate 
			  and convert(varchar,InquiryDate,112) < @StartDate) SaldoAwal
			 , [1], [2], [3], [4], [5]
			 , 0, 0, 0, 0, 0
		  from #VehicleTemplateWoAreaDlr a
		  where not exists (select 1 
							  from #TestSummaryFirstDlr
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotFirstDlr
	
	select * into #TestPivotFirstDlrLast from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , isnull([1],0) Week1, isnull([2],0) Week2, isnull([3],0) Week3,isnull([4],0) Week4, isnull([5],0) Week5
			 , 0 WeekOuts1, 0 WeekOuts2, 0 WeekOuts3, 0 WeekOuts4, 0 WeekOuts5
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , Total
			 from #TestSummaryFirstDlrLast
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(Total)
			for WeekInt in ([1],[2],[3],[4],[5])
		  )pvt
	  UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 ,(select COUNT(*) 
			 from #VehicleWoAreaDlrLast
			where CompanyCode = a.CompanyCode 
			  and BranchCode = a.BranchCode 
			  and TipeKendaraan = a.TipeKendaraan
			  and SeqNo = a.SeqNo
			  and LastProgress = a.LastProgress 
			  and convert(varchar,UpdateDate,112) < @LastStartDate 
			  and convert(varchar,InquiryDate,112) < @LastStartDate) SaldoAwal
			 , [1], [2], [3], [4], [5]
			 , 0, 0, 0, 0, 0
		  from #VehicleTemplateWoAreaDlrLast a
		  where not exists (select 1 
							  from #TestSummaryFirstDlrLast
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotFirstDlrLast		
	
	select * into #TestPivotOutsFirstDlr from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , 0 Week1, 0 Week2, 0 Week3, 0 Week4, 0 Week5
			 , isnull([1],0) WeekOuts1 , isnull([2],0) WeekOuts2 , isnull([3],0) WeekOuts3 ,isnull([4],0) WeekOuts4 , isnull([5],0) WeekOuts5 
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , TotalOuts
			 from #TestSummaryFirstDlr
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(TotalOuts)
			for WeekInt in ([1],[2],[3],[4],[5])
		  )pvt
	  UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , 0
			 , 0, 0, 0, 0, 0
			 , 0, 0, 0, 0, 0
		  from #VehicleTemplateWoAreaDlr a
		  where not exists (select 1 
							  from #TestSummaryFirstDlr
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotOutsFirstDlr

select * into #TestPivotOutsFirstDlrLast from(
		select OrderNo3
			 , OrderNo
			 , OrderNo1
			 , OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , SaldoAwal
			 , 0 Week1, 0 Week2, 0 Week3, 0 Week4, 0 Week5
			 , isnull([1],0) WeekOuts1 , isnull([2],0) WeekOuts2 , isnull([3],0) WeekOuts3 ,isnull([4],0) WeekOuts4 , isnull([5],0) WeekOuts5 
		  from (
			select OrderNo3
				 , OrderNo
				 , OrderNo1
				 , OrderNo2
				 , GroupNo
				 , Area
				 , CompanyCode
				 , DealerAbbreviation
				 , BranchCode
				 , TipeKendaraan
				 , SeqNo
				 , LastProgress
				 , SaldoAwal
				 , weekInt
				 , TotalOuts
			 from #TestSummaryFirstDlrLast
			where (SaldoAwal + TotalOuts + Total) <> 0
		  ) as Header
		  pivot (SUM(TotalOuts)
			for WeekInt in ([1],[2],[3],[4],[5])
		  )pvt
	  UNION
		Select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , GroupNo
			 , Area
			 , CompanyCode
			 , DealerAbbreviation
			 , BranchCode
			 , TipeKendaraan
			 , SeqNo
			 , LastProgress
			 , 0
			 , 0, 0, 0, 0, 0
			 , 0, 0, 0, 0, 0
		  from #VehicleTemplateWoAreaDlrLast a
		  where not exists (select 1 
							  from #TestSummaryFirstDlrLast
							 where CompanyCode = a.CompanyCode
							   and BranchCode = a.BranchCode
							   and TipeKendaraan = a.TipeKendaraan
							   and SeqNo = a.SeqNo
							   and LastProgress = a.LastProgress
							   and (SaldoAwal + TotalOuts + Total) <> 0)
	)#TestPivotOutsFirstDlrLast
	
	select * into #TestFinalSummaryFirstDlr from(
		select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , a.SaldoAwal
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts1 end WeekOuts1
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts2 end WeekOuts2
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts3 end WeekOuts3
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts4 end WeekOuts4
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts5 end WeekOuts5
			 , a.Week1
			 , a.Week2
			 , a.Week3
			 , a.Week4
			 , a.Week5
		  from #TestPivotFirstDlr a
		  left join #TestPivotOutsFirstDlr b on a.GroupNo = b.GroupNo
				and a.OrderNo3 = b.OrderNo3
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
				and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.DealerAbbreviation = b.DealerAbbreviation
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	)#TestFinalSummaryFirstDlr
	
	select * into #TestFinalSummaryFirstDlrLast from(
		select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , a.SaldoAwal
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts1 end WeekOuts1
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts2 end WeekOuts2
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts3 end WeekOuts3
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts4 end WeekOuts4
			 , case when b.LastProgress = 'P' then 0 else b.WeekOuts5 end WeekOuts5
			 , a.Week1
			 , a.Week2
			 , a.Week3
			 , a.Week4
			 , a.Week5
		  from #TestPivotFirstDlrLast a
		  left join #TestPivotOutsFirstDlrLast b on a.GroupNo = b.GroupNo
				and a.OrderNo3 = b.OrderNo3
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
				and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.DealerAbbreviation = b.DealerAbbreviation
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	)#TestFinalSummaryFirstDlrLast
		
	select * into #TestFinalSummaryFirstBranchDlr from(
		select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '2' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestPivotFirstDlr a
		  left join #TestPivotOutsFirstDlr b on a.GroupNo = b.GroupNo
				and a.OrderNo3 = b.OrderNo3
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
				and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.DealerAbbreviation = b.DealerAbbreviation
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	  group by a.GroupNo,a.Area,a.CompanyCode,a.DealerAbbreviation, a.BranchCode,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummaryFirstBranchDlr
	
	select * into #TestFinalSummaryFirstBranchDlrLast from(
		select '1' OrderNo3
			 , '0' OrderNo
			 , '0' OrderNo1
			 , '2' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestPivotFirstDlrLast a
		  left join #TestPivotOutsFirstDlrLast b on a.GroupNo = b.GroupNo
				and a.OrderNo3 = b.OrderNo3
				and a.OrderNo = b.OrderNo
				and a.OrderNo1 = b.OrderNo1
				and a.OrderNo2 = b.OrderNo2
				and a.GroupNo = b.GroupNo
				and a.Area = b.Area
				and a.CompanyCode = b.CompanyCode
				and a.DealerAbbreviation = b.DealerAbbreviation
				and a.BranchCode = b.BranchCode
				and a.TipeKendaraan = b.TipeKendaraan
				and a.SeqNo = b.SeqNo
				and a.LastProgress = b.LastProgress
	  group by a.GroupNo,a.Area,a.CompanyCode,a.DealerAbbreviation, a.BranchCode,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummaryFirstBranchDlrLast	
	
	select * into #TestFinalSummarySecondDlr from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummaryFirstDlr a
	  group by a.GroupNo,a.Area,a.CompanyCode,a.DealerAbbreviation,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummarySecondDlr
	
	select * into #TestFinalSummarySecondDlrLast from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '0' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummaryFirstDlrLast a
	  group by a.GroupNo,a.Area,a.CompanyCode,a.DealerAbbreviation,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummarySecondDlrLast
	
	select * into #TestFinalSummaryThirdDlr from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , '' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummarySecondDlr a
	  group by a.GroupNo,a.Area,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummaryThirdDlr
		
	select * into #TestFinalSummaryThirdDlrLast from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '0' OrderNo2
			 , a.GroupNo
			 , a.Area
			 , '' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummarySecondDlrLast a
	  group by a.GroupNo,a.Area,a.SeqNo,a.LastProgress,a.TipeKendaraan
	)#TestFinalSummaryThirdDlrLast
			
	select * into #TestFinalSummaryFourthDlr from(
		select '2' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '2' OrderNo2
			 , '' GroupNo
			 , 'TOTAL' Area
			 , '' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , 'TOTAL' TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummaryThirdDlr a
	  group by a.SeqNo,a.LastProgress
	)#TestFinalSummaryFourthDlr
	
	select * into #TestFinalSummaryFourthDlrLast from(
		select '2' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '2' OrderNo2
			 , '' GroupNo
			 , 'TOTAL' Area
			 , '' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , 'TOTAL' TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummaryThirdDlrLast a
	  group by a.SeqNo,a.LastProgress
	)#TestFinalSummaryFourthDlrLast
	
	select * into #TestFinalSummaryFifthDlr from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '1' OrderNo2
			 , '999' GroupNo
			 , 'TOTAL' Area
			 , 'TOTAL' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummaryThirdDlr a
	  group by a.SeqNo,a.LastProgress,a.SaldoAwal,a.TipeKendaraan
	)#TestFinalSummaryFifthDlr
	
	select * into #TestFinalSummaryFifthDlrLast from(
		select '1' OrderNo3
			 , '1' OrderNo
			 , '1' OrderNo1
			 , '1' OrderNo2
			 , '999' GroupNo
			 , 'TOTAL' Area
			 , 'TOTAL' CompanyCode
			 , 'ZTOTAL' DealerAbbreviation
			 , '' BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
		  from #TestFinalSummaryThirdDlrLast a
	  group by a.SeqNo,a.LastProgress,a.SaldoAwal,a.TipeKendaraan
	)#TestFinalSummaryFifthDlrLast		
				 
	select * into #SummaryWBranchDlr from(
	select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.Dealerabbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			  from #TestFinalSummaryFirstDlr a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
	select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.Dealerabbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			  from #TestFinalSummarySecondDlr a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
		select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			  from #TestFinalSummaryThirdDlr a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
		select a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
		  from  #TestFinalSummaryFifthDlr a
		   group by a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
	UNION
		select a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
		  from  #TestFinalSummaryFourthDlr a
		   group by a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
	)#SummaryWBranchDlr		
			 
	select * into #SummaryWBranchDlrLast from(
	select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.Dealerabbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			  from #TestFinalSummaryFirstDlrLast a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
	select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.Dealerabbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			  from #TestFinalSummarySecondDlrLast a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
		select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , SUM(a.SaldoAwal) SaldoAwal
				 , SUM(a.WeekOuts1) WeekOuts1
				 , SUM(a.WeekOuts2) WeekOuts2
				 , SUM(a.WeekOuts3) WeekOuts3
				 , SUM(a.WeekOuts4) WeekOuts4
				 , SUM(a.WeekOuts5) WeekOuts5
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , SUM(a.Week1) Week1
				 , SUM(a.Week2) Week2
				 , SUM(a.Week3) Week3
				 , SUM(a.Week4) Week4
				 , SUM(a.Week5) Week5
				 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			  from #TestFinalSummaryThirdDlrLast a
			   group by a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
	UNION
		select a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
		  from  #TestFinalSummaryFifthDlrLast a
		   group by a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
	UNION
		select a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
			 , SUM(a.SaldoAwal) SaldoAwal
			 , SUM(a.WeekOuts1) WeekOuts1
			 , SUM(a.WeekOuts2) WeekOuts2
			 , SUM(a.WeekOuts3) WeekOuts3
			 , SUM(a.WeekOuts4) WeekOuts4
			 , SUM(a.WeekOuts5) WeekOuts5
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts			 
			 , SUM(a.Week1) Week1
			 , SUM(a.Week2) Week2
			 , SUM(a.Week3) Week3
			 , SUM(a.Week4) Week4
			 , SUM(a.Week5) Week5
			 , SUM(a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
			 , SUM(case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
		  from  #TestFinalSummaryFourthDlrLast a
		   group by a.OrderNo3
			 , a.OrderNo
			 , a.OrderNo1
			 , a.OrderNo2
			 , a.GroupNo
			 , a.Area
			 , a.CompanyCode
			 , a.DealerAbbreviation
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.SeqNo
			 , a.LastProgress
	)#SummaryWBranchDlrLast
		
	select * into #SummaryDetailDlr from(
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , (a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			 from #TestFinalSummaryFirstDlr a
		UNION
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.TotalWeek
				 , a.Total
			 from #SummaryWBranchDlr a
	)#SummaryDetailDlr

	select * into #SummaryDetailDlrLast from(
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end) TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , (a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) TotalWeek
				 , (case when a.LastProgress = 'P' then 0 else a.WeekOuts1 + a.WeekOuts2 + a.WeekOuts3 + a.WeekOuts4 + a.WeekOuts5 end + a.Week1 + a.Week2 + a.Week3 + a.Week4 + a.Week5) Total
			 from #TestFinalSummaryFirstDlrLast a
		UNION
			Select a.OrderNo3
				 , a.OrderNo
				 , a.OrderNo1
				 , a.OrderNo2
				 , a.GroupNo
				 , a.Area
				 , a.CompanyCode
				 , a.DealerAbbreviation
				 , a.BranchCode
				 , a.TipeKendaraan
				 , a.SeqNo
				 , a.LastProgress
				 , a.SaldoAwal
				 , a.WeekOuts1
				 , a.WeekOuts2
				 , a.WeekOuts3
				 , a.WeekOuts4
				 , a.WeekOuts5
				 , a.TotalWeekOuts
				 , a.Week1
				 , a.Week2
				 , a.Week3
				 , a.Week4
				 , a.Week5
				 , a.TotalWeek
				 , a.Total
			 from #SummaryWBranchDlrLast a
	)#SummaryDetailDlrLast
	
if(@Summary = 0)
begin
	select 
		 a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.SeqNo
		 , a.LastProgress
		 
		 ---- LAST MONTH
		 , SUM(b.SaldoAwal) SaldoAwalLast
		 , SUM(b.WeekOuts1) WeekOuts1Last
		 , SUM(b.WeekOuts2) WeekOuts2Last
		 , SUM(b.WeekOuts3) WeekOuts3Last
		 , SUM(b.WeekOuts4) WeekOuts4Last
		 , SUM(b.WeekOuts5) WeekOuts5Last
		 , SUM(b.TotalWeekOuts) TotalWeekOutsLast
		 , SUM(b.Week1) Week1Last
		 , SUM(b.Week2) Week2Last
		 , SUM(b.Week3) Week3Last
		 , SUM(b.Week4) Week4Last
		 , SUM(b.Week5) Week5Last
		 , SUM(b.TotalWeek) TotalWeekLast
		 , SUM(b.Total) TotalLast	

		 ---- THIS MONTH		 		
		 , SUM(a.SaldoAwal) SaldoAwal
		 , SUM(a.WeekOuts1) WeekOuts1
		 , SUM(a.WeekOuts2) WeekOuts2
		 , SUM(a.WeekOuts3) WeekOuts3
		 , SUM(a.WeekOuts4) WeekOuts4
		 , SUM(a.WeekOuts5) WeekOuts5
		 , SUM(a.TotalWeekOuts) TotalWeekOuts
		 , SUM(a.Week1) Week1
		 , SUM(a.Week2) Week2
		 , SUM(a.Week3) Week3
		 , SUM(a.Week4) Week4
		 , SUM(a.Week5) Week5
		 , SUM(a.TotalWeek) TotalWeek
		 , SUM(a.Total) Total		
		 
		 ,cast((case when SUM(b.Total) = 0 then 0 else SUM(a.Total)/ cast(SUM(b.Total) as decimal(38,2)) end) * 100 as decimal(5,1)) TotPercent
		 			 		
	  from #SummaryWBranchDlr a	
	  left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode	 
	 left join #SummaryWBranchDlrLast b on a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.TipeKendaraan = b.Tipekendaraan and a.SeqNo = b.SeqNo 
		and a.LastProgress = b.LastProgress			
	 where a.OrderNo2 <> 1 and b.OrderNo2 <> 1
	 group by a.OrderNo3, a.OrderNo,a.OrderNo1, a.OrderNo2, a.GroupNo, a.Area,a.CompanyCode,a.DealerAbbreviation, a.BranchCode,c.OutletAbbreviation, a.SeqNo, a.LastProgress
	 order by a.OrderNo3 Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.Area asc,a.OrderNo1 asc,a.OrderNo asc,a.BranchCode asc,a.OrderNo2 Asc,a.SeqNo Asc
	 
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.SeqNo
		 , a.LastProgress
		 
		 ---- LAST MONTH	
		 , b.SaldoAwal SaldoAwalLast
		 , b.WeekOuts1 WeekOuts1Last
		 , b.WeekOuts2 WeekOuts2Last
		 , b.WeekOuts3 WeekOuts3Last
		 , b.WeekOuts4 WeekOuts4Last
		 , b.WeekOuts5 WeekOuts5Last
		 , b.TotalWeekOuts TotalWeekOutsLast
		 , b.Week1 Week1Last
		 , b.Week2 Week2Last
		 , b.Week3 Week3Last
		 , b.Week4 Week4Last
		 , b.Week5 Week5Last
		 , b.TotalWeek TotalWeekLast
		 , b.Total TotalLast
		 
		 ---- THIS MONTH	
		 , a.SaldoAwal
		 , a.WeekOuts1
		 , a.WeekOuts2
		 , a.WeekOuts3
		 , a.WeekOuts4
		 , a.WeekOuts5
		 , a.TotalWeekOuts
		 , a.Week1
		 , a.Week2
		 , a.Week3
		 , a.Week4
		 , a.Week5
		 , a.TotalWeek
		 , a.Total
		 
		 ,cast((case when b.Total = 0 then 0 else a.Total/ cast(b.Total as decimal(38,2)) end) * 100 as decimal(5,1)) TotPercent
		 
	  from #SummaryDetailDlr a
	  left join #SummaryDetailDlrLast b on a.CompanyCode = b.CompanyCode and a.BranchCode = b.BranchCode and a.TipeKendaraan = b.Tipekendaraan and a.SeqNo = b.SeqNo 
		and a.LastProgress = b.LastProgress	
	  left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode
	where a.GroupNo <> 2 and a.OrderNo2 <> 2 and b.GroupNo <> 2 and b.OrderNo2 <> 2
	 order by a.OrderNo3 Asc, a.TipeKendaraan Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.OrderNo asc,a.OrderNo1 asc,a.BranchCode asc,a.OrderNo2 Asc,a.Area asc,a.SeqNo Asc
end
else if(@Summary = 1)
begin
	select a.OrderNo3
		 , a.OrderNo
		 , a.OrderNo1
		 , a.OrderNo2
		 , a.GroupNo
		 , a.Area
		 , a.CompanyCode
		 , a.DealerAbbreviation CompanyName
		 , a.BranchCode
		 , isnull(c.OutletAbbreviation,'') BranchName
		 , a.TipeKendaraan
		 , a.SeqNo
		 , a.LastProgress
		 , SaldoAwal
		 , a.WeekOuts1 + a.Week1 Week1
		 , a.WeekOuts2 + a.Week2 Week2
		 , a.WeekOuts3 + a.Week3 Week3
		 , a.WeekOuts4 + a.Week4 Week4
		 , a.WeekOuts5 + a.Week5 Week5
		 , a.Total TotalWeek
	  from #SummaryDetailDlr a
	  left join GnMstDealerMapping b on a.CompanyCode = b.DealerCode
	  left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode 
	 order by a.OrderNo3 Asc, a.TipeKendaraan Asc,a.GroupNo asc, a.DealerAbbreviation asc,a.OrderNo asc,a.OrderNo1 asc,a.BranchCode asc,a.OrderNo2 Asc,a.Area asc,a.SeqNo Asc
	 --order by OrderNo3 Asc,TipeKendaraan Asc,Area asc, DealerAbbreviation asc,OrderNo asc,OrderNo2 Asc,BranchCode asc,a.SeqNo Asc
end
-- Query : uspfn_InquiryITSStatusByType_Tuning '20100701','20100716','','','','','','',1*/

	--drop table #Base
	drop table #StatusWoAreaDlr 
	drop table #StatusWoAreaDlrLast
	  
	drop table #SummaryWBranchDlr
	drop table #SummaryWBranchDlrLast
	drop table #SummaryDetailDlr
	drop table #SummaryDetailDlrLast
	drop table #TestFinalSummaryFirstDlr
	drop table #TestFinalSummaryFirstBranchDlr
	drop table #TestFinalSummarySecondDlr
	drop table #TestFinalSummaryThirdDlr
	drop table #TestFinalSummaryFourthDlr
	drop table #TestFinalSummaryFifthDlr
	drop table #TestPivotOutsFirstDlr
	drop table #TestPivotFirstDlr
	drop table #TestSummaryFirstDlr
	drop table #VehicleWoAreaDlr
	drop table #VehicleTemplateWoAreaDlr
	
	drop table #TestFinalSummaryFirstDlrLast
	drop table #TestFinalSummaryFirstBranchDlrLast
	drop table #TestFinalSummarySecondDlrLast
	drop table #TestFinalSummaryThirdDlrLast
	drop table #TestFinalSummaryFourthDlrLast
	drop table #TestFinalSummaryFifthDlrLast
	drop table #TestPivotOutsFirstDlrLast
	drop table #TestPivotFirstDlrLast
	drop table #TestSummaryFirstDlrLast
	drop table #VehicleWoAreaDlrLast
	drop table #VehicleTemplateWoAreaDlrLast
	
end

--#endregion
GO
create procedure [dbo].[uspfn_CsInqCustFeedback]
	@CompanyCode varchar(20),
	@DateFrom varchar(10),
	@DateTo varchar(10)
as

select distinct a.CompanyCode
     , a.CustomerCode
     , c.CustomerName
     , rtrim(c.Address1) + ' ' + rtrim(c.Address2) + rtrim(c.Address3) as Address
     , c.HPNo
     , b.BpkbDate
     , b.StnkDate
     , g.DODate 
     , e.SalesModelCode
     , e.SalesModelYear
     , h.PoliceRegNo
     , a.Chassis
     , a.IsManual
     , a.FeedbackA
     , a.FeedbackB
     , a.FeedbackC
     , a.FeedbackD
     , case a.IsManual when 1 then 'Manual' else 'System' end Feedback
     , case len(rtrim(isnull(a.FeedbackA,''))) when 0 then '-' else 'Ya' end Feedback01
     , case len(rtrim(isnull(a.FeedbackB,''))) when 0 then '-' else 'Ya' end Feedback02
     , case len(rtrim(isnull(a.FeedbackC,''))) when 0 then '-' else 'Ya' end Feedback03
     , case len(rtrim(isnull(a.FeedbackD,''))) when 0 then '-' else 'Ya' end Feedback04
  from CsCustFeedback a
  left join CsCustomerVehicle b
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
   and b.Chassis = a.Chassis
  left join GnMstCustomer c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
  left join omTrSalesSOVin e          
    on e.CompanyCode = a.CompanyCode          
   and e.ChassisCode + convert(varchar, e.ChassisNo) = a.Chassis 
  left join omTrSalesSO f
    on f.CompanyCode = e.CompanyCode          
   and f.BranchCode = e.BranchCode
   and f.SONo = e.SONo
  left join omTrSalesDO g
    on g.CompanyCode = f.CompanyCode          
   and g.BranchCode = f.BranchCode
   and g.SONo = f.SONo
  left join GnMstCustomer d
    on d.CompanyCode = f.CompanyCode
   and d.CustomerCode = f.LeasingCo
  left join svMstCustomerVehicle h
    on h.CompanyCode = a.CompanyCode          
   and h.ChassisCode + convert(varchar, h.ChassisNo) = a.Chassis 
 where a.CompanyCode = @CompanyCode
   and convert(varchar, g.DODate, 112) between @DateFrom and @DateTo
GO
CREATE procedure [dbo].[uspfn_omSlsInvBrowse]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15) 
)  
AS  
BEGIN  
-- exec uspfn_omSlsInvBrowse 6006410,600641001,'DOS/14/000002'
SELECT a.BranchCode
    , a.InvoiceNo
    , a.InvoiceDate
    , a.SONo
    , d.SKPKNo
    , d.RefferenceNo
    , a.CustomerCode
    , b.CustomerName
    , a.BillTo
    , b.CustomerName AS BillName
    , b.Address1 + ' ' + b.Address2 + ' ' + b.Address3 + ' ' + b.Address4 as Address
    ,a.Status
    , CASE 
        WHEN a.Status = 0 THEN 'OPEN'
        WHEN a.Status = 1 THEN 'PRINTED'
        WHEN a.Status = 2 THEN 'APPROVED'
        WHEN a.Status = 3 THEN 'DELETED'
        WHEN a.Status = 5 THEN 'POSTED'
        WHEN a.Status = 9 THEN 'FINISHED'
      END as StatusDsc
    , c.SalesType
    , CASE ISNULL(c.SalesType, 0) 
        WHEN 0 THEN 'Wholesales' 
        ELSE 'Direct' 
      END AS SalesTypeDsc
    ,a.Remark
     
FROM omTrSalesInvoice a
LEFT JOIN gnMstCustomer b ON a.CompanyCode = b.CompanyCode 
    AND a.CustomerCode = b.CustomerCode
LEFT JOIN gnMstCustomerProfitCenter c ON a.CompanyCode = c.CompanyCode 
    AND a.BranchCode = c.BranchCode 
    AND a.CustomerCode = c.CustomerCode 
    AND c.ProfitCenterCode = '100'
LEFT JOIN omTrSalesSO d ON a.CompanyCode = d.CompanyCode 
    AND a.BranchCode = d.BranchCode 
    AND a.SONo = d.SONo
WHERE a.CompanyCode = @companyCode 
    AND a.BranchCode like @branchCode
ORDER BY a.InvoiceNo DESC  
END
GO
create proc [dbo].[uspfn_CsInqCustBDay]
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@DateFrom int,
	@DateTo int,
	@Outstanding varchar(1)
as

begin
	select a.* 
	  from CsLkuBirthdayView a
	 where a.CompanyCode=@CompanyCode
	   and a.BranchCode=@BranchCode
	   and datepart(month, a.CustomerBirthDate)>=@DateFrom
	   and datepart(month, a.CustomerBirthDate)<=@DateTo
	   and a.Outstanding=@Outstanding
	   --and a.Outstanding!='Y'
end
GO
create procedure [dbo].[uspfn_ChassisList]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SalesModelCode varchar(25),
	@SalesModelYear decimal,
	@ChassisCode varchar(25),
	@ColourCode varchar(17),
	@WarehouseCode varchar(17)
as

begin
	SELECT ltrim(convert(varchar,a.ChassisNo) + '') ChassisNo
	     , a.EngineCode
		 , ltrim(convert(varchar, a.EngineNo) + '') EngineNo
		 , a.ServiceBookNo
		 , a.KeyNo
	  FROM omMstVehicle a
	 INNER JOIN (
				SELECT TOP 1 * 
				 FROM omTrInventQtyVehicle a
				 WHERE a.CompanyCode = @CompanyCode 
					   AND a.BranchCode = @BranchCode
					   AND a.SalesModelCode = @SalesModelCode
					   AND a.SalesModelYear = @SalesModelYear 
					   AND a.ColourCode = @ColourCode
					   AND a.WarehouseCode = @WareHouseCode
				ORDER BY a.[Year] DESC, a.[Month] DESC
		 ) b on a.CompanyCode=b.CompanyCode 
	   AND a.SalesModelCode=b.SalesModelCode AND a.SalesModelYear=b.SalesModelYear 
	   AND a.ColourCode=b.ColourCode AND a.WarehouseCode=b.WarehouseCode
	 WHERE a.CompanyCode = @CompanyCode 
	   AND b.BranchCode=@BranchCode
	   AND a.Status = '0'
	   AND a.IsActive = '1'
	   AND a.SalesModelCode = @SalesModelCode
	   AND a.SalesModelYear = @SalesModelYear 
	   AND a.ChassisCode = @ChassisCode
	   AND a.ColourCode = @ColourCode
	   AND a.WareHouseCode = @WareHouseCode
	   AND b.EndingAV > 0
	   and not exists (
			select 1 from omTrSalesSOVin x 
				left join omTrSalesSO y on x.CompanyCode=y.CompanyCode and x.BranchCode=y.BranchCode
					and x.SONo=y.SONo
			where y.Status in ('0','1') and x.ChassisCode=a.ChassisCode and x.ChassisNo=a.ChassisNo
		)
	ORDER BY a.ChassisCode ASC
end
GO
Create procedure [dbo].[uspfn_omSlsInvGetAccsSeqTotal4Tax]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_omSlsInvGetTotal4Tax 6006410,600641001,''
SELECT * INTO #f1 FROM(
    SELECT (ISNULL(SUM(a.Quantity), 0) * ISNULL(SUM(a.DPP), 0)) AS DPPAmt
        , ISNULL(SUM(a.Quantity), 0) AS TotQuantity
        , (ISNULL(SUM(a.Quantity), 0) * ISNULL(SUM(a.PPn), 0)) AS PPnAmt
        , (ISNULL(SUM(a.Quantity), 0) * ISNULL(SUM(a.Total), 0)) AS TotalAmt
    FROM omTrSalesInvoiceAccsSeq a
    WHERE a.CompanyCode = @CompanyCode 
        AND a.BranchCode = @BranchCode 
        AND a.InvoiceNo = @InvoiceNo
    GROUP BY a.PartNo   
) #f1

SELECT ISNULL(SUM(DPPAmt), 0) AS DPPAmt
    , ISNULL(SUM(TotQuantity), 0) AS TotQuantity
    , ISNULL(SUM(PPnAmt), 0) AS PPnAmt
    , ISNULL(SUM(TotalAmt), 0) AS TotalAmt
FROM #f1
DROP TABLE #f1  
end
GO
Create procedure [dbo].[uspfn_SPGetSpTranDetails]
@CompanyCode varchar(25),
@BranchCode varchar(25),
@InvoiceNo varchar(25)
as 
select PartNo, PartNoOriginal, DocNo, DocDate, ReferenceNo, QtyBill from spTrnSInvoiceDtl
where InvoiceNo = @InvoiceNo
and CompanyCode = @CompanyCode
and BranchCode = @BranchCode
GO
create procedure [dbo].[uspfn_InvoiceFakturPajak] @CompanyCode varchar(15), @BranchCode varchar(15)
as
begin
SELECT TOP 1500
 Invoice.ProductType, Invoice.InvoiceNo, 
 case Invoice.InvoiceDate when ('19000101') then null else Invoice.InvoiceDate end as InvoiceDate
,Invoice.InvoiceStatus, Invoice.FPJNo
,case Invoice.FPJDate when ('19000101') then null else Invoice.FPJDate end as FPJDate
,Invoice.JobOrderNo
,case Invoice.JobOrderDate when ('19000101') then null else Invoice.JobOrderDate end as JobOrderDate
,Invoice.JobType, Invoice.ChassisCode, Invoice.ChassisNo, Invoice.EngineCode
,Invoice.EngineNo, Invoice.PoliceRegNo, Invoice.BasicModel, Invoice.CustomerCode, Invoice.CustomerCodeBill
,Invoice.Remarks, (Invoice.CustomerCode + ' - ' + Cust.CustomerName) as Customer
,(Invoice.CustomerCodeBill + ' - ' + CustBill.CustomerName) as CustomerBill
, vehicle.ServiceBookNo, Invoice.Odometer
FROM svTrnInvoice Invoice
LEFT JOIN gnMstCustomer Cust
    ON Cust.CompanyCode = Invoice.CompanyCode AND Cust.CustomerCode = Invoice.CustomerCode
LEFT JOIN gnMstCustomer CustBill
    ON CustBill.CompanyCode = Invoice.CompanyCode AND CustBill.CustomerCode = Invoice.CustomerCodeBill
LEFT JOIN svMstcustomerVehicle vehicle 
	ON Invoice.CompanyCode = vehicle.CompanyCode and Invoice.ChassisCode = vehicle.ChassisCode and 
	Invoice.ChassisNo = vehicle.ChassisNo and Invoice.EngineCode = vehicle.EngineCode and 
	Invoice.EngineNo = vehicle.EngineNo and Invoice.BasicModel = vehicle.BasicModel	
WHERE Invoice.CompanyCode = @CompanyCode AND Invoice.BranchCode = @BranchCode 
    AND Invoice.ProductType = '4W'
    AND convert(varchar, Invoice.InvoiceDate, 112) >= isnull((
            select top 1 convert(varchar, FromDate, 112) from gnMstPeriode
             where 1 = 1
               and CompanyCode = @CompanyCode
               and BranchCode = @BranchCode
               and FiscalYear = (select FiscalYear from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode)
             order by FromDate
            ), '') ORDER BY Invoice.InvoiceNo
end
GO
create procedure [dbo].[uspfn_SvJobOrderSend] 
	@LastUpdateDate datetime,
	@Segment int

--select @LastUpdateDate='1990-01-01 00:00:00',@Segment=500
as

select * into #t1 from (
select top (@Segment) CompanyCode, BranchCode, ProductType, ServiceNo
	 , ServiceType, ServiceStatus, JobOrderNo, JobOrderDate, EstimationNo, EstimationDate
	 , BookingNo, BookingDate, InvoiceNo, ForemanID, MechanicID, CustomerCode, CustomerCodeBill
	 , PoliceRegNo, ServiceBookNo, BasicModel, TransmissionType, VIN, ChassisCode, ChassisNo
	 , EngineCode, EngineNo, ColorCode, Odometer, JobType, ServiceRequestDesc, ConfirmChangingPart
	 , EstimateFinishDate, EstimateFinishDateSys, LaborDiscPct, PartDiscPct
	 , MaterialDiscAmt, InsurancePayFlag, InsuranceOwnRisk, InsuranceNo, InsuranceJobOrderNo
	 , PPNPct, PPHPct, LaborGrossAmt, PartsGrossAmt, MaterialGrossAmt, LaborDiscAmt, PartsDiscAmt
	 , MaterialDiscPct, LaborDppAmt, PartsDppAmt, MaterialDppAmt, TotalDPPAmount
	 , TotalPphAmount, TotalPpnAmount, TotalSrvAmount, PrintSeq, IsLocked, LockingBy, LockingDate
	 , CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, IsSparepartClaim
  from svTrnService
 where LastUpdateDate is not null
   and LastUpdateDate > @LastUpdateDate
 order by LastUpdateDate asc )#t1
 
declare @LastUpdateQry datetime
    set @LastUpdateQry = (select top 1 LastUpdateDate from #t1 order by LastUpdateDate desc)

select * from #t1
 union
select CompanyCode, BranchCode, ProductType, ServiceNo
	 , ServiceType, ServiceStatus, JobOrderNo, JobOrderDate, EstimationNo, EstimationDate
	 , BookingNo, BookingDate, InvoiceNo, ForemanID, MechanicID, CustomerCode, CustomerCodeBill
	 , PoliceRegNo, ServiceBookNo, BasicModel, TransmissionType, VIN, ChassisCode, ChassisNo
	 , EngineCode, EngineNo, ColorCode, Odometer, JobType, ServiceRequestDesc, ConfirmChangingPart
	 , EstimateFinishDate, EstimateFinishDateSys, LaborDiscPct, PartDiscPct
	 , MaterialDiscAmt, InsurancePayFlag, InsuranceOwnRisk, InsuranceNo, InsuranceJobOrderNo
	 , PPNPct, PPHPct, LaborGrossAmt, PartsGrossAmt, MaterialGrossAmt, LaborDiscAmt, PartsDiscAmt
	 , MaterialDiscPct, LaborDppAmt, PartsDppAmt, MaterialDppAmt, TotalDPPAmount
	 , TotalPphAmount, TotalPpnAmount, TotalSrvAmount, PrintSeq, IsLocked, LockingBy, LockingDate
	 , CreatedBy, CreatedDate, LastUpdateBy, LastUpdateDate, IsSparepartClaim
  from svTrnService
 where LastUpdateDate = @LastUpdateQry
 
  drop table #t1
GO
create procedure [dbo].[uspfn_sp_partinquiry]
@CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(2), @ProductType varchar(2)
AS
begin
DECLARE @Query varchar(max);
SET @Query = 'SELECT 
		 Items.PartNo,ItemInfo.PartName,ItemLoc.WarehouseCode
		,ItemLoc.LocationCode
		,(ItemLoc.OnHand - (ItemLoc.AllocationSP + ItemLoc.AllocationSR + ItemLoc.AllocationSL + ItemLoc.ReservedSP + ItemLoc.ReservedSR + ItemLoc.ReservedSL)) AS QtyAvail
		,Items.OnOrder,ItemPrice.RetailPriceInclTax
		,CASE ItemInfo.IsGenuinePart WHEN 1 THEN ''Ya'' ELSE ''Tidak'' END AS IsGenuinePart
		,ItemInfo.SupplierCode,ItemPrice.RetailPrice
		,Items.ProductType,Items.PartCategory
		,(SELECT LookupValueName 
			FROM gnMstLookupDtl 
		   WHERE CodeID = ''PRCT'' AND 
				 LookUpValue = Items.PartCategory AND 
				 CompanyCode = ''' + @CompanyCode + ''') AS CategoryName
		,CASE Items.Status WHEN 1 THEN ''Aktif'' ELSE ''Tidak'' END AS IsActive
		,ItemInfo.OrderUnit
		,Supplier.SupplierName
		,(SELECT LookupValueName 
			FROM gnMstLookupDtl 
		  WHERE CodeID = ''TPGO'' AND 
				LookUpValue = Items.TypeOfGoods AND 
				CompanyCode =  ''' + @CompanyCode + ''') AS TypeOfGoods
		FROM ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItems Items
		INNER JOIN ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItemInfo ItemInfo   ON Items.CompanyCode  = ItemInfo.CompanyCode                          
								 AND Items.PartNo = ItemInfo.PartNo
		INNER JOIN ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItemLoc ItemLoc ON Items.CompanyCode  = ItemLoc.CompanyCode
			AND Items.BranchCode = ItemLoc.BranchCode	
			AND Items.PartNo = ItemLoc.PartNo
		INNER JOIN ' + dbo.GetDbMD(@CompanyCode, @BranchCode) + '..SpMstItemPrice ItemPrice ON Items.CompanyCode  = ItemPrice.CompanyCode
			AND Items.BranchCode = ItemPrice.BranchCode	
			AND Items.PartNo = ItemPrice.PartNo		 
		LEFT JOIN GnMstSupplier Supplier ON Supplier.CompanyCode  = Items.CompanyCode 
								 AND Supplier.SupplierCode = ItemInfo.SupplierCode
		WHERE Items.CompanyCode =  ''' + dbo.GetCompanyMD('6156401000','6156401001') + '''
		  AND Items.BranchCode  = ''' + dbo.GetBranchMD('6156401000','6156401001') + '''    
		  AND Items.TypeOfGoods =''' +  @TypeOfGoods + '''
		  AND Items.ProductType = ''' + @ProductType + ''' 
		  AND ItemLoc.WarehouseCode = ''00''';

		exec (@Query);
END
GO
CREATE procedure [dbo].[uspfn_omSlsDoLkpSO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15),  
 @RefType varchar(8)
)  
AS  
BEGIN  
--exec uspfn_omSlsDoLkpSO 6006410,600641001,'WARE'
 SELECT Distinct a.SONo, a.SODate, a.SKPKNo, a.RefferenceNo, c.CustomerName, a.CustomerCode, 
                c.Address1 + ' ' + c.Address2 + ' ' + c.Address3 + ' ' + c.Address4 as Address,
                a.WareHouseCode, e.RefferenceDesc1 AS WareHouseName
                , (CASE ISNULL(a.SalesType, 0) WHEN 0 THEN 'WholeSales' ELSE 'Direct' END) AS TypeSales
                FROM omTrSalesSO a
                INNER JOIN omTrSalesSOModel b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND b.SONo = a.SONo
                LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode AND c.CustomerCode = a.CustomerCode
                LEFT JOIN gnMstCustomer d ON d.CompanyCode = a.CompanyCode AND d.CustomerCode = a.ShipTo
                LEFT JOIN OmMstRefference e ON e.CompanyCode = a.CompanyCode AND e.RefferenceType = @RefType AND e.RefferenceCode = a.WareHouseCode
                WHERE a.Status = '2'
                AND a.CompanyCode = @CompanyCode
                AND b.BranchCode = @BranchCode
                AND b.QuantityDO < b.QuantitySO
                ORDER BY a.SONo ASC
                
end
GO
create procedure [dbo].[uspfn_CsInqCustBirthday]
	@CompanyCode varchar(20),
	@BranchCode varchar(20),
	@PeriodYear int,
	@ParMonth int,
	@ParStatus int     -- 0: All, 1: Not Inputted, 2: Inputted
as

--declare
--	@CompanyCode varchar(20),
--	@BranchCode varchar(20),
--	@PeriodYear int,
--	@ParMonth int,
--	@ParStatus int     -- 0: All, 1: Not Inputted, 2: Inputted

--select
--	@CompanyCode = '6006406',
--	@BranchCode = '6006406', 
--	@PeriodYear = 2014,
--	@ParMonth = '3', 
--	@ParStatus = 0     -- 0: All, 1: Not Reminder Yet, 2: Reminder


select a.CompanyCode
     , a.BranchCode
     , a.CustomerCode
	 , a.CustomerName
	 , a.Address
	 , a.PhoneNo
	 , a.HPNo
	 , b.AddPhone1
	 , b.AddPhone2
	 , a.BirthDate
	 , case isnull(c.CustomerCode, '') when '' then 'N' else 'Y' end IsReminder
	 , c.CreatedDate as InputDate
  from CsCustomerView a
  left join CsCustData b
	on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join CsCustBirthDay c
	on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
   and c.PeriodYear = @PeriodYear
 where 1 = 1
   and a.CompanyCode = @CompanyCode
   and a.BranchCode = (case isnull(@BranchCode, '') when '' then a.BranchCode else @BranchCode end)
   and a.CustomerType = 'I'
   and a.BirthDate is not null
   and a.BirthDate > '1900-01-01'
   and (year(getdate() - year(a.BirthDate))) > 5
   and month(a.BirthDate) = @ParMonth
   and isnull(c.CustomerCode, '') != ''
   and isnull(c.CustomerCode, '1900-01-01') = (case @ParStatus
		when 0 then isnull(c.CustomerCode, '1900-01-01')
		when 1 then '1900-01-01'
		else c.CustomerCode
		end)
 order by day(a.BirthDate)
GO
create procedure [dbo].[uspfn_CheckITSOrganization]
	@CompanyCode varchar(17),
	@BranchCode varchar(17),
	@EmployeeID varchar(25)
as 

begin
	declare @Employee table (
		CompanyCode varchar(13),
		BranchCode varchar(13),
		EmployeeID varchar(17),
		EmployeeName varchar(100),
		Department varchar(35),
		Position varchar(10),
		PositionName varchar(100),
		Grade varchar(10),
		Leader varchar(17)
	);
	declare @LoopStatus bit;
	declare @CurrentEmployeeID varchar(17);
	declare @CurrentEmployeeName varchar(17);
	declare @CurrentDeparment varchar(17);
	declare @CurrentPosition varchar(17);
	declare @CurrentPositionName varchar(17);
	declare @CurrentLeader varchar(17);
	declare @PositionHeader varchar(25);
	declare @PositionHeaderName varchar(100);
	declare @Status bit;
	declare @Message varchar(200);
	declare @RecordCount int;
	declare @Iterator int;
	declare @GeneralManager varchar(17);
	declare @OperationManager varchar(17);
	declare @BranchManager varchar(17);
	declare @SalesHead varchar(17);
	declare @SalesCoordinator varchar(17);
	declare @Grade varchar(17);

	set @LoopStatus = 1;
	set @CurrentEmployeeID = @EmployeeID;
	set @Iterator = 1;
	set @Status = convert(bit, 0);

	while (@LoopStatus = convert(bit, 1)) 
	begin
		delete @Employee;

	    insert into @Employee 
		select a.CompanyCode
		     , BranchCode = (
					select top 1
						   x.BranchCode
					  from HrEmployeeMutation x
				     where x.CompanyCode = a.CompanyCode
					   and x.EmployeeID = a.EmployeeID 	
					   and ( x.IsDeleted = convert(bit, 0) or x.IsDeleted is null)
					 order by x.MutationDate desc
		       )
			 , a.EmployeeID
			 , a.EmployeeName
			 , Department = (
					select top 1
					       x.Department
					  from HrEmployeeAchievement x
					 where x.CompanyCode = a.CompanyCode
					   and x.EmployeeID = a.EmployeeID
					   and x.IsDeleted = convert(bit, 0)
					 order by x.AssignDate desc
			   )
			 , Position = (
					select top 1
					       x.Position
					  from HrEmployeeAchievement x
					 where x.CompanyCode = a.CompanyCode
					   and x.EmployeeID = a.EmployeeID
					   and x.IsDeleted = convert(bit, 0)
					 order by x.AssignDate desc
			   )
			 , PositionName = (
					select top 1
					       x.Position
					  from HrEmployeeAchievement x
					  left join gnMstPosition y
						on y.CompanyCode = x.CompanyCode
					   and y.DeptCode = x.Department
					   and y.PosCode = x.Position
					 where x.CompanyCode = a.CompanyCode
					   and x.EmployeeID = a.EmployeeID
					   and ( x.IsDeleted = convert(bit, 0) or x.IsDeleted is null )
					 order by x.AssignDate desc
			   )
			 , Grade = (
					select top 1
					       x.Grade
					  from HrEmployeeAchievement x
					 where x.CompanyCode = a.CompanyCode
					   and x.EmployeeID = a.EmployeeID
					   and ( x.IsDeleted = convert(bit, 0) or x.IsDeleted is null )
					 order by x.AssignDate desc
			   )
			 , a.TeamLeader
		  from HrEmployee a
		 where a.CompanyCode = @CompanyCode
		   and @BranchCode = (
					select top 1
						   x.BranchCode
					  from HrEmployeeMutation x
				     where x.CompanyCode = a.CompanyCode
					   and x.EmployeeID = a.EmployeeID 	
					   and ( x.IsDeleted = convert(bit, 0)  or IsDeleted is null )	  
					 order by x.MutationDate desc
		       )
		   and a.EmployeeID = @CurrentEmployeeID
		   and (
					select top 1
					       x.Department
					  from HrEmployeeAchievement x
					 where x.CompanyCode = a.CompanyCode
					   and x.EmployeeID = a.EmployeeID
					   and x.IsDeleted = convert(bit, 0)
					 order by x.AssignDate desc
			   ) = 'SALES';

		
		--select * from HrEmployee where EmployeeID=@EmployeeID;
		
		--select * from HrEmployeeAchievement where EmployeeID=@EmployeeID;
		--select * from HrEmployeeMutation where EmployeeID=@EmployeeID;


		set @RecordCount = (select count(a.EmployeeID) from @Employee a);
		set @CurrentEmployeeName = ( select top 1 a.EmployeeName from @Employee a );
		set @CurrentDeparment = ( select top 1 a.Department from @Employee a );
		set @CurrentPosition = ( select top 1 a.Position from @Employee a );
		set @CurrentPositionName = ( select top 1 a.PositionName from @Employee a );
		set @CurrentLeader = ( select top 1 a.Leader from @Employee a );
		set @Status = convert(bit, 0);
		set @PositionHeader = (
				select top 1
				       a.PosHeader
				  from gnMstPosition a
				 where a.CompanyCode = @CompanyCode
				   and a.DeptCode = @CurrentDeparment
				   and a.PosCode = @CurrentPosition
		    );
		set @PositionHeaderName = (
				select top 1
				       a.PosName
				  from gnMstPosition a
				 where a.CompanyCode = @CompanyCode
				   and a.DeptCode = @CurrentDeparment
				   and a.PosCode = @PositionHeader
		    );
		if @Iterator = 1
			set @Grade = ( select top 1 a.Grade from @Employee a );

		if @CurrentPosition = 'SC'
			set @SalesCoordinator = @CurrentEmployeeID;

		if @CurrentPosition = 'SH'
			set @SalesHead = @CurrentEmployeeID;

		if @CurrentPosition = 'BM'
		begin
			set @BranchManager = @CurrentEmployeeID;
			set @OperationManager = @CurrentEmployeeID;
		end

		if @CurrentPosition = @GeneralManager
			set @GeneralManager = @CurrentEmployeeID;



		if @RecordCount = 0
		begin
			if @Iterator = 1
				set @Message = 'Salesman dengan NIK "' + @CurrentEmployeeID + '" tidak ditemukan atau data mutasi dan achievement belum dilengkapi.';
			else
				set @Message = 'Leader dengan NIK "' + @CurrentEmployeeID + '" tidak ditemukan atau data mutasi dan achievement belum dilengkapi.';

			set @LoopStatus = convert(bit, 0);
		end
		else if isnull(@CurrentPosition, '') = '' or ltrim(rtrim(@CurrentPosition)) = ''
		begin
			if @Iterator = 1
				set @Message = 'Salesman dengan NIK "' + @CurrentEmployeeID + '" tidak memiliki data achievement.';
			else
				set @Message = 'Leader dengan NIK "' + @CurrentEmployeeID + '" tidak memiliki data achievement.';

			set @LoopStatus = convert(bit, 0);
		end
		else if isnull(@PositionHeader, '') = '' or ltrim(rtrim(@PositionHeader)) = '' or @PositionHeader = 'GM'
		begin
			set @Status = convert(bit, 1);
			set @Message = 'Struktur organisasi ITS sudah valid.';
			set @LoopStatus = convert(bit, 0);	
		end
		else if isnull(@CurrentLeader, '') = '' or ltrim(rtrim(@CurrentLeader)) = ''
		begin
			if @Iterator = 1
				set @Message = 'Salesman dengan NIK "' + @CurrentEmployeeID + '" tidak memiliki leader.';
			else
				set @Message = 'Leader dengan NIK "' + @CurrentEmployeeID + '" tidak memiliki leader yang sesuai dengan struktur organisasi ITS.';


			set @CurrentEmployeeID = '';
			set @LoopStatus = convert(bit, 0);
		end

		if(@Status = convert(bit, 1)) 
		begin
			set @Message = @Message;	
			set @Status = @Status;
		end
		else
		begin
			if isnull(@CurrentLeader, '') != '' or ltrim(rtrim(@CurrentLeader)) != ''
				set @CurrentEmployeeID = ( select top 1 a.Leader from @Employee a );
			else
				set @CurrentEmployeeID = '';
		end
		
		set @Iterator = @Iterator + 1;
	end

	select @Status as Status, @Message as Message, @SalesCoordinator as SalesCoordinator, @SalesHead as SalesHead, @BranchManager as BranchManager, @GeneralManager as GeneralManager, @Grade as Grade
end
GO
--Created by Benedict 13 Mar 2015
CREATE PROCEDURE [dbo].[uspfn_pmSelectMembers]
	@CompanyCode varchar(20),
	@BranchCode  varchar(20),
	@EmployeeID varchar(20)
--DECLARE	
--	@CompanyCode varchar(20) = '6006406',
--	@BranchCode  varchar(20) = '6006401',
--	@EmployeeID varchar(20) = '51343'
AS
BEGIN
DECLARE 
	@pos1 varchar(5) = (SELECT Position FROM HrEmployee WHERE CompanyCode = @CompanyCode AND EmployeeID = @EmployeeID)

IF (@pos1 = 'S' )
BEGIN

SELECT BranchCode, CONVERT(varchar, InquiryNumber) AS KeyID, NamaProspek, PerolehanData
	 , CONVERT(varchar, InquiryNumber) + ' - ' + RTRIM(NamaProspek)
	 + CASE WHEN RTRIM(PerolehanData) = '' THEN '' ELSE 
	 ' (' + RTRIM(PerolehanData) + ')' END AS Member
  FROM pmKdp
 WHERE CompanyCode = @CompanyCode
   AND BranchCode = @BranchCode
   AND EmployeeID = @EmployeeID
END

IF (@pos1 <> 'S')
BEGIN

SELECT a.BranchCode, a.EmployeeID AS KeyID, 
	CONVERT(varchar, a.EmployeeID) + ' - ' + RTRIM(b.EmployeeName)
	 + CASE WHEN RTRIM(e.PosName) = '' THEN '' ELSE 
	 ' (' + RTRIM(e.PosName) + ')' END AS Member
FROM hrEmployeeMutation a
JOIN (
	SELECT c.EmployeeId, c.EmployeeName, c.Position, MAX(d.MutationDate) AS MutationDate
	FROM hrEmployee c
	JOIN hrEmployeeMutation d
	ON c.EmployeeId = d.EmployeeId AND c.PersonnelStatus = 1 AND c.IsDeleted = 0 AND d.IsDeleted = 0
	WHERE c.Department = 'SALES' AND c.TeamLeader = @EmployeeID
	GROUP BY c.EmployeeId, c.EmployeeName, c.Position
) b
ON a.EmployeeId = b.EmployeeId AND a.MutationDate = b.MutationDate
JOIN gnMstPosition e
ON a.CompanyCode = e.CompanyCode AND e.DeptCode = 'SALES' AND b.Position = e.PosCode
WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode

END
END
GO
create procedure [dbo].[uspfn_SelectParts]
	@CompanyCode varchar(25),
	@BranchCode varchar(25)
as

begin
	declare @CodeID varchar(25);
	set @CodeID = 'TPGO';
 
	SELECT itemInfo.PartNo
         , (item.OnHand - (item.AllocationSP + item.AllocationSR + item.AllocationSL)- (item.ReservedSP + item.ReservedSR + item.ReservedSL))  AS Available
         , itemPrice.RetailPriceInclTax
         , itemInfo.PartName
         , (
				CASE itemInfo.Status
					WHEN 1 THEN 'Aktif' ELSE 'Tidak Aktif'
				END
			)  AS Status
         , dtl.LookUpValueName as JenisPart
         , itemPrice.RetailPrice  AS NilaiPart
      FROM spMstItemInfo itemInfo                    
      LEFT JOIN spMstItems item ON item.CompanyCode = itemInfo.CompanyCode
       AND item.BranchCode = @BranchCode
       AND item.PartNo = itemInfo.PartNo
      LEFT JOIN spMstItemPrice itemPrice ON itemPrice.CompanyCode = itemInfo.CompanyCode
       AND itemPrice.BranchCode = @BranchCode 
       AND itemPrice.PartNo = item.PartNo
      LEFT JOIN GnMstLookUpDtl dtl ON item.companyCode = dtl.companyCode 
       AND dtl.CodeId = @CodeId
       AND dtl.LookUpValue = item.TypeOfGoods                    
     WHERE itemInfo.CompanyCode = @CompanyCode
       AND itemInfo.Status = '1'
       AND (
				item.OnHand - 
				(item.AllocationSP + item.AllocationSR + item.AllocationSL) - 
				(item.ReservedSP + item.ReservedSR + item.ReservedSL)
		   ) > 0 
end
GO
create procedure [dbo].[uspfn_UpdateMasterShift]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..HrShift a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrShift (
		   CompanyCode
		 , ShiftCode
		 , ShiftName
		 , OnDutyTime
		 , OffDutyTime
		 , OnRestTime
		 , OffRestTime
		 , WorkingHour
		 , IsActive
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.ShiftCode
	     , a.ShiftName
	     , a.OnDutyTime
	     , a.OffDutyTime
	     , a.OnRestTime
	     , a.OffRestTime
	     , a.WorkingHour
	     , a.IsActive
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
CREATE procedure [dbo].[uspfn_GetSpTrnSFPJHdr] @CompanyCode varchar(15), @BranchCode varchar(15)  
as  
select a.FPJNo, a.FPJdate, a.FPJGovNo, a.InvoiceNo, a.PickingSlipNo, a.CustomerCode, b.CustomerName, b.Address1, b.Address2, b.Address3, b.Address4, a.TOPDays, a.TOPCode from spTrnSFPJHdr a  
join gnMstCustomer b  
on b.CustomerCode = a.CustomerCode  
and b.CompanyCode = a.CompanyCode  
where a.CompanyCode = @CompanyCode  
and a.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[uspfn_SpOrderSparepartView] @CompanyCode varchar(10) ,@BranchCode varchar(10), @TypeOfGoods varchar(2), @ProductType varchar(2)
as  
SELECT    
ItemInfo.PartNo,  
Items.ABCClass,  
ItemLoc.OnHand - itemLoc.ReservedSP - itemLoc.ReservedSR - itemLoc.ReservedSL - itemLoc.AllocationSP - itemLoc.AllocationSL - itemLoc.AllocationSR AS AvailQty,  
Items.OnOrder,  
Items.ReservedSP,  
Items.ReservedSR,  
Items.ReservedSL,  
Items.MovingCode,  
ItemInfo.SupplierCode,  
ItemInfo.PartName,  
ItemInfo.DiscPct,
ItemPrice.RetailPrice,  
ItemPrice.RetailPriceInclTax,  
ItemPrice.PurchasePrice  
FROM SpMstItems Items  
INNER JOIN SpMstItemInfo ItemInfo ON Items.CompanyCode  = ItemInfo.CompanyCode                            
                         AND Items.PartNo = ItemInfo.PartNo  
INNER JOIN spMstItemPrice ItemPrice ON Items.CompanyCode = ItemPrice.CompanyCode  
                        AND Items.BranchCode = ItemPrice.BranchCode AND Items.PartNo = ItemPrice.PartNo  
INNER JOIN spMstItemLoc ItemLoc ON Items.CompanyCode = ItemLoc.CompanyCode AND Items.BranchCode = ItemLoc.BranchCode  
                        AND Items.PartNo = ItemLoc.PartNo  
WHERE Items.CompanyCode = @CompanyCode  
  AND Items.BranchCode  = @BranchCode 
  AND Items.TypeOfGoods = @TypeOfGoods
  AND Items.ProductType = @ProductType  
  AND Items.Status > 0  
  AND ItemLoc.WarehouseCode = '00'
GO
create procedure [dbo].[uspsys_SaveMessageBoard]
	@MessageID     int,
	@MessageHeader varchar(255),
	@MessageText   varchar(max),
	@MessageTo     varchar(10),
	@MessageTarget varchar(max),
    @MessageParams varchar(50),
	@CreatedBy     varchar(20)
as

insert into SysMessageBoards
select (isnull((select max(MessageID) from SysMessageBoards), 0) + 1)
	 , @MessageHeader, @MessageText, @MessageTo, @MessageTarget, @MessageParams,null,null,@CreatedBy, getdate(), null, null
GO
CREATE Procedure [dbo].[uspfn_itsinqfollowup]  
(      
 @CompanyCode VARCHAR(15),      
 @BranchCode  VARCHAR(15),      
 @DateAwal  VARCHAR(10),      
 @DateAkhir  VARCHAR(10),      
 @Outlet   VARCHAR(max),      
 @SPV   VARCHAR(max),      
 @EMP   VARCHAR(max),         
 @Head   VARCHAR(max)      
)      
AS      
BEGIN      
  
SELECT * INTO #t1 FROM (
SELECT
    f.OutletName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
    a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
    emp1.EmployeeName Employee, emp2.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail, a.SpvEmployeeId
FROM
    PmKDP a
LEFT JOIN OmMstRefference b
    ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
left join HrEmployee emp1 on emp1.CompanyCode = a.CompanyCode  
     and emp1.EmployeeID = a.EmployeeID  
--LEFT JOIN GnMstEmployee c
--    ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.EmployeeID = a.EmployeeID
left join HrEmployee emp2 on emp2.CompanyCode = a.CompanyCode  
     and emp2.EmployeeID = a.EmployeeID  
--LEFT JOIN GnMstEmployee d
--    ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode AND d.EmployeeID = a.SpvEmployeeID
LEFT JOIN PmActivities e
    ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
    AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
LEFT JOIN PmBranchOutlets f
	ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode AND f.OutletID = a.OutletID
WHERE
    a.CompanyCode = @CompanyCode 
	AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>''OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
    AND CONVERT(VARCHAR, e.NextFollowUpDate, 112) BETWEEN @DateAwal AND @DateAkhir
    AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
    AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
    AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
) #t1

IF (@HEAD='')
BEGIN
    SELECT * FROM #t1 ORDER BY InquiryNumber 
END
ELSE
BEGIN
	declare @teamid varchar(max)
	set @teamid = (select teamid from pmmstteammembers where companycode=@CompanyCode 
		and branchcode=case @branchcode when '' then branchcode else @branchcode end
		and employeeid=@HEAD 
		and issupervisor='1')
	
	SELECT * FROM #t1 WHERE SpvEmployeeID IN (select employeeid from pmmstteammembers where companycode=@companycode 
		and branchcode=case @branchcode when '' then branchcode else @branchcode end
		and teamid=@teamid
		and issupervisor='0') 
	ORDER BY InquiryNumber 
END
DROP TABLE #t1 

END
GO
create procedure [dbo].[uspfn_ValidateUserMenu]
	@UserId varchar(36),
	@Menu varchar(50)
as
begin
	select a.MenuId
	     , b.RoleId
		 , c.UserId
	  from SysMenuDms a
	 inner join sysRoleMenu b
	    on b.MenuId = a.MenuId
	 inner join SysRoleUser c
	    on c.RoleId = b.RoleId
	 where ( a.MenuId = @Menu or a.MenuUrl like '%/' + @Menu)
	   and c.UserId = @UserId
end
GO
CREATE procedure [dbo].[uspfn_spGetLookupLMP4Srv]     
@CompanyCode varchar(15), @BranchCode varchar(15),    
@SalesType varchar(5), @TypeOfGoods varchar(15), @ProductType varchar(15)    
as    
SELECT * FROM     
(    
SELECT    
 PickingSlipNo,     
 PickingSlipDate,    
 BPSFNo,     
 BPSFDate,    
 (    
   SELECT TOP 1 PRODUCTTYPE FROM spTrnSBPSFDtl    
  WHERE spTrnSBPSFHdr.CompanyCode = spTrnSBPSFDtl.CompanyCode    
  AND spTrnSBPSFHdr.BranchCode = spTrnSBPSFDtl.BranchCode    
  AND spTrnSBPSFHdr.BPSFNo = spTrnSBPSFDtl.BPSFNo    
 ) AS ProductType,  
 spTrnSBPSFHdr.CustomerCode,
 spTrnSBPSFHdr.CustomerCodeShip,
 spTrnSBPSFHdr.CustomerCodeBill as CustomerCodeTagih, 
 b.CustomerName,  
 b.Address1,  
 b.Address2,  
 b.Address3,  
 b.Address4,  
 b.CustomerName CustomerNameTagih,  
 b.Address1 Address1Tagih,  
 b.Address2 Address2Tagih,  
 b.Address3 Address3Tagih,  
 b.Address4 Address4Tagih,  
 c.LookUpValueName TransType    
FROM spTrnSBPSFHdr    
join gnMstCustomer b  
ON spTrnSBPSFHdr.CompanyCode = b.CompanyCode  
AND spTrnSBPSFHdr.CustomerCode = b.CustomerCode  
join gnMstLookupDtl c on  
spTrnSBPSFHdr.CompanyCode = c.CompanyCode  
and spTrnSBPSFHdr.TransType= c.LookupValue   
AND c.CodeID = 'TTSR'  
WHERE spTrnSBPSFHdr.CompanyCode = @CompanyCode    
AND spTrnSBPSFHdr.BranchCode    = @BranchCode    
AND spTrnSBPSFHdr.SalesType     = @SalesType    
AND spTrnSBPSFHdr.TypeOfGoods   = @TypeOfGoods    
AND (spTrnSBPSFHdr.Status = '1' OR spTrnSBPSFHdr.Status = '0')    
AND (spTrnSBPSFHdr.PickingSlipNo NOT IN (SELECT PickingSlipNo FROM spTrnSLmpHdr where CompanyCode = @CompanyCode AND BranchCode = @BranchCode))    
) A    
WHERE A.ProductType = @ProductType
GO
create procedure [dbo].[uspfn_CsCustomerBPKBSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
	 , Chassis
	 , BpkbReadyDate
	 , BpkbPickUp
	 , ReqInfoLeasing
	 , ReqInfoCust
	 , ReqKtp
	 , ReqStnk
	 , ReqSuratKuasa
	 , Comment
	 , Additional
	 , Status
	 , FinishDate
	 , CreatedBy
	 , CreatedDate
	 , UpdatedBy
	 , UpdatedDate
	 , Tenor
	 , CustomerCategory
  from CsCustBpkb
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1
GO
CREATE procedure [dbo].[sp_SpSrvLampLkp]
@CompanyCode varchar(15),  
@BranchCode varchar(15),   
@SalesType char(1)

--exec sp_SpSrvLampLkp '6006410','600641001',1
as
SELECT
    DISTINCT LmpNo
    , LmpDate
    , (SELECT TOP 1 DocNo FROM spTrnSPickingDtl
		WHERE spTrnSPickingDtl.CompanyCode = spTrnSLmpHdr.CompanyCode
			AND spTrnSPickingDtl.BranchCode = spTrnSLmpHdr.BranchCode
			AND spTrnSPickingDtl.PickingSlipNo = spTrnSLmpHdr.PickingSlipNo
		) AS SSNo
	, (SELECT TOP 1 DocDate FROM spTrnSPickingDtl
		WHERE spTrnSPickingDtl.CompanyCode = spTrnSLmpHdr.CompanyCode
			AND spTrnSPickingDtl.BranchCode = spTrnSLmpHdr.BranchCode
			AND spTrnSPickingDtl.PickingSlipNo = spTrnSLmpHdr.PickingSlipNo
		) AS SSDate
    , spTrnSLmpHdr.BPSFNo
    , spTrnSLmpHdr.BPSFDate
    , spTrnSLmpHdr.PickingSlipNo
    , spTrnSLmpHdr.PickingSlipDate
FROM 
    spTrnSLmpHdr
    INNER JOIN spTrnSBPSFHdr ON spTrnSBPSFHdr.Companycode = spTrnSLmpHdr.CompanyCode 
            AND spTrnSBPSFHdr.BranchCode = spTrnSLmpHdr.BranchCode 
            AND spTrnSBPSFHdr.BPSFNo = spTrnSLmpHdr.BPSFNo 
WHERE 
    spTrnSLmpHdr.CompanyCode = @CompanyCode
    AND spTrnSLmpHdr.BranchCode = @BranchCode
    AND spTrnSBPSFHdr.SalesType = @SalesType
ORDER BY 
    LmpNo DESC
GO
CREATE procedure [dbo].[sp_UpdateABCClassTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year int,
@Month int,
@PID varchar(10))


as

/*SET @Year = '{0}'
SET @Month = '{1}'
SET @CompanyCode = '{2}'
SET @BranchCode = '{3}'
SET @PID = '{4}'*/

SELECT * into #A1 from(
SELECT a.CompanyCode, a.BranchCode, a.PartNo, ISNULL(b.CostPrice, 0) AS HargaPokok, ISNULL(c.SalesQty, 0) AS SalesQty, ISNULL(b.CostPrice * c.SalesQty, 0) as TotalPokok
FROM 
spMstItems a
LEFT JOIN spMstItemPrice b On a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode and a.PartNo = b.PartNo
LEFT JOIN 
(SELECT CompanyCode, BranchCode, PartNo, SalesQty FROM SpHstDemandItem a
  WHERE a.Year  = @Year
    AND a.Month = @Month) c ON a.CompanyCode = c.CompanyCode AND c.BranchCode = b.BranchCode AND a.PartNo = c.PartNo
LEFT JOIN
(SELECT ABCClassAPct, ABCClassBPct, ABCClassCPct, CompanyCode, BranchCode
                        FROM gnMstCoProfileSpare
                        WHERE CompanyCode = @CompanyCode
                        AND BranchCode = @BranchCode) d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode
WHERE a.CompanyCode = @CompanyCode
    AND a.BranchCode = @BranchCode
) #A1
--==========================================

SELECT partno, TotalPokok, Total into #A2 from 
(
SELECT TOP 1000000000 a.CompanyCode, a.BranchCode, a.PartNo, a.TotalPokok, (SELECT Sum(b.TotalPokok) FROM #A1 b WHERE a.TotalPokok <= b.TotalPokok) AS Total 
FROM #A1 a 
ORDER BY a.TotalPokok DESC
 ) #A2 WHERE TotalPokok > 0
--==========================================

select * into #A3
FROM(
SELECT CompanyCode, BranchCode, SUM(TotalPokok) AS TotalFinal FROM #A1 GROUP BY CompanyCode, BranchCode
) #A3
--==========================================

SELECT * INTO #A4
FROM(
SELECT a.CompanyCode, a.BranchCode, a.PartNo, b.Total, c.TotalFinal,
CASE WHEN c.TotalFinal = 0 THEN 'C' ELSE CASE WHEN ((b.Total/c.TotalFinal) * 100) <= ABCClassAPct THEN 'A' ELSE CASE WHEN ISNULL(((b.Total/c.TotalFinal) * 100),0) > ABCClassAPct AND ((b.Total/c.TotalFinal) * 100) <= ABCClassBPct THEN 'B' ELSE CASE WHEN ISNULL(((b.Total/c.TotalFinal) * 100),0) > ABCClassBPct THEN 'C' END END END END AS ABCClass
FROM #A1 a  
INNER JOIN #A2 b ON  a.PartNo = b.PartNo
LEFT JOIN #A3 c ON  a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode
LEFT JOIN (SELECT ABCClassAPct, ABCClassBPct, ABCClassCPct, CompanyCode, BranchCode
                        FROM gnMstCoProfileSpare
                        WHERE CompanyCode = @CompanyCode
                        AND BranchCode = @BranchCode) d ON a.CompanyCode = d.CompanyCode AND a.BranchCode = d.BranchCode
)#A4 

--update spMstItems set ABCClass = isnull((select ABCClass from #A4 where PartNo = spMstItems.PartNo and CompanyCode = spMstItems.CompanyCode and BranchCode = spMstItems.BranchCode), spMstItems.ABCClass)
--update spMstItems set LastUpdateBy = @PID, LastUpdateDate = GetDate()

UPDATE spMstItems SET ABCClass = isnull(b.ABCClass, a.ABCClass),
LastUpdateBy  = @PID, 
LastUpdateDate = GetDate() 
FROM spMstItems a, #A4 b
WHERE a.CompanyCode = b.CompanyCode 
AND a.BranchCode = b.BranchCode
AND a.PartNo = b.PartNo

DROP table #A1
DROP table #A2
DROP table #A3
DROP table #A4
GO
-- Created by Benedict 16 Mar 2015
CREATE PROCEDURE [dbo].[uspfn_pmApplyMemberTransfer]
	@p0 varchar(20),  --CompanyCode
	@p1 varchar(20),  --BranchCode
	@p2 varchar(20),  --InquiryNumber IF 'S' || EmployeeID IF NOT 'S'
	@p3 varchar(20),  --EmployeeID IF 'S' || TeamLeader IF NOT 'S'
	@p4 varchar(20)	  --UserID

--DECLARE
--	@p0 varchar(20) = '6006406', --CompanyCode
--	@p1 varchar(20) = '6006401', --BranchCode
--	@p2 varchar(20) = '421468',  --InquiryNumber IF 'S' || EmployeeID IF NOT 'S'
--	@p3 varchar(20) = '52259',   --EmployeeID IF 'S' || TeamLeader IF NOT 'S'
--	@p4 varchar(20) = 'bent'     --UserID
AS
BEGIN

DECLARE @pos1 varchar(5) = (SELECT Position FROM HrEmployee WHERE CompanyCode = @p0 AND EmployeeID = @p3)
IF (@pos1 = 'S')
BEGIN
	IF (@p3 <> (SELECT TOP 1 EmployeeID 
					FROM pmKDP 
					WHERE CompanyCode = @p0
					AND BranchCode = @p1
					AND InquiryNumber = @p2))
	BEGIN
	DECLARE @spvID varchar(15) = (SELECT TeamLeader 
									FROM HrEmployee 
									WHERE CompanyCode = @p0 AND EmployeeID = @p3)
	UPDATE pmKDP
	SET EmployeeID = @p3,
		SpvEmployeeID = @spvID,
		OutletID = @p1,
		LastUpdateBy = @p4,
		LastUpdateDate = getdate()
	WHERE CompanyCode = @p0
		AND BranchCode = @p1
		AND InquiryNumber = @p2
	END
END
ELSE
	IF (@p3 <> (SELECT TeamLeader
				FROM HrEmployee
				WHERE CompanyCode = @p0 AND EmployeeID = @p2))
	BEGIN
		UPDATE HrEmployee
		SET TeamLeader = @p3,
			UpdatedBy = @p4,
			UpdatedDate = getdate()
		WHERE CompanyCode = @p0 AND EmployeeID = @p2
	END


END
GO
create procedure [dbo].[uspfn_SelectCustomerDiscount]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@CustomerCode varchar(25)
as
begin
	if @CustomerCode = '' 
		return

	select a.*
	     , ProfitCenterCodeDisc = a.ProfitCenterCode
		 , ProfitCenterNameDisc = (
				select top 1
				       x.LookUpValueName
				  from gnMstLookUpDtl x
				 where x.CompanyCode = a.CompanyCode
				   and x.LookUpValue = a.ProfitCenterCode
				   and x.CodeID = 'PFCN'
				 
		   )
		 , TypeOfGoodsDisc = a.TypeOfGoods
		 , TypeOfGoodsNameDisc = (
				select top 1
				       x.LookUpValueName
				  from gnMstLookUpDtl x
				 where x.CompanyCode = a.CompanyCode
				   and x.LookUpValue = a.TypeOfGoods
				   and x.CodeID = 'TPGO'
		   )
		 , DiscPctDisc = a.DiscPct
	  from gnMstCustomerDisc a
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and a.CustomerCode = @CustomerCode
end


--select * from gnMstCustomerProfitCenter where CustomerCode=''
GO
-- ==============================================================================================================================
-- Author:		<Author,,Name>
-- Create date: 2015-03-07
-- Description: Select data transaksi service tipe estimasi untuk digunakan pada lookup input spk admin
-- ==============================================================================================================================

CREATE procedure [dbo].[uspfn_SvTrnServiceSelectEstimationData]
	@CompanyCode varchar(15),
	@BranchCode  varchar(15),
	@ProductType  varchar(15)
AS
-- EXEC uspfn_SvTrnServiceSelectEstimationData '6156401000', '6156401001', '4W'
SELECT DISTINCT 
    svTrnService.InvoiceNo
    , svTrnService.ServiceNo
    , svTrnService.ServiceType
    , ForemanID
    , EstimationNo
    , EstimationDate
    , BookingNo
    , BookingDate
    , svTrnService.JobOrderNo
    , svTrnService.JobOrderDate
    , svTrnService.PoliceRegNo
    , ServiceBookNo
    , svTrnService.BasicModel
    , TransmissionType
    , svTrnService.ChassisCode
    , svTrnService.ChassisNo
    , svTrnService.EngineCode
    , svTrnService.EngineNo
    , svTrnService.ChassisCode + ' ' + cast(svTrnService.ChassisNo as  varchar) KodeRangka
    , svTrnService.EngineCode + ' ' + cast(svTrnService.EngineNo as varchar) KodeMesin
    , ColorCode
    , (svTrnService.CustomerCode + ' - ' + gnMstCustomer.CustomerName) as Customer
    , (svTrnService.CustomerCodeBill + ' - ' + custBill.CustomerName) as CustomerBill
    , svTrnService.CustomerCode
    , svTrnService.CustomerCodeBill
    , svTrnService.Odometer
    , svTrnService.JobType
    , case when svTrnService.ServiceStatus='4' then
            case when @ProductType='4W' then reffService.Description
                else reffService.LockingBy
            end
        else reffService.Description 
    end ServiceStatus
    --, svTrnService.PoliceRegNo
	--, svTrnService.CustomerCode
    , InsurancePayFlag
    , InsuranceOwnRisk
    , InsuranceNo
    , InsuranceJobOrderNo
    --, svTrnService.CustomerCodeBill
    , svTrnService.LaborDiscPct
    , PartDiscPct
    , svTrnService.MaterialDiscPct
    , svTrnService.PPNPct
    , svTrnService.ServiceRequestDesc
    , ConfirmChangingPart
    --, ForemanID
    , svTrnService.MechanicID
    , EstimateFinishDate
    , svTrnService.LaborDPPAmt
    , svTrnService.PartsDPPAmt
    , svTrnService.MaterialDPPAmt
    , TotalDPPAmount
    , TotalPpnAmount
    , TotalPphAmount
    , TotalSrvAmount
    , employee.EmployeeName
    , (custBill.Address1 + '' + custBill.Address2 + '' + custBill.Address3 + '' + custBill.Address4) as AddressBill
    , custBill.NPWPNo
    , custBill.PhoneNo
    , custBill.HPNo
FROM svTrnService WITH(NOLOCK, NOWAIT)
LEFT JOIN gnMstCustomer 
    ON gnMstCustomer.CompanyCode = svTrnService.CompanyCode 
    AND gnMstCustomer.CustomerCode = svTrnService.CustomerCode
LEFT JOIN gnMstCustomer custBill 
    ON custBill.CompanyCode = svTrnService.CompanyCode
    AND custBill.CustomerCode = svTrnService.CustomerCodeBill
LEFT JOIN gnMstEmployee employee
    ON employee.CompanyCode = svTrnService.CompanyCode
    AND employee.BranchCode = svTrnService.BranchCode
	AND employee.EmployeeID = svTrnService.ForemanID
LEFT JOIN svTrnSrvItem srvItem 
    ON srvItem.CompanyCode = svTrnService.CompanyCode
    AND srvItem.BranchCode = svTrnService.BranchCode
    AND srvItem.ProductType = svTrnService.ProductType
    AND srvItem.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svTrnSrvTask srvTask
    ON srvTask.CompanyCode = svTrnService.CompanyCode
    AND srvTask.BranchCode = svTrnService.BranchCode
    AND srvTask.ProductType = svTrnService.ProductType
    AND srvTask.ServiceNo = svTrnService.ServiceNo
LEFT JOIN svMstRefferenceService reffService
    ON reffService.CompanyCode = svTrnService.CompanyCode
    AND reffService.ProductType = svTrnService.ProductType    
    AND reffService.RefferenceCode = svTrnService.ServiceStatus
    AND reffService.RefferenceType = 'SERVSTAS'
LEFT JOIN svTrnInvoice invoice
	ON invoice.CompanyCode = svTrnService.CompanyCode
	AND invoice.BranchCode = svTrnService.BranchCode
	AND invoice.ProductType = svTrnService.ProductType
	AND invoice.JobOrderNo = svTrnService.JobOrderNo
LEFT JOIN svTrnSrvVOR VOR
    ON VOR.CompanyCode = svTrnService.CompanyCode
	AND VOR.BranchCode = svTrnService.BranchCode
    AND VOR.ServiceNo = svTrnService.ServiceNo
WHERE svTrnService.CompanyCode = @CompanyCode 
    AND svTrnService.BranchCode = @BranchCode
 AND svTrnService.ServiceType in ('0','2') and svTrnService.EstimationNo <> ''
 AND svTrnService.ServiceStatus IN (0,1,2,3,4,5) ORDER BY svTrnService.EstimationNo DESC
GO
create procedure [dbo].[uspfn_GetReturnSupplySlip] @CompanyCode varchar(15), @BranchCode varchar(15), @TypeOfGoods varchar(2)
as
SELECT ReturnNo, ReturnDate 
FROM spTrnSRTurSSHdr 
WHERE Status IN (0,1) AND
    spTrnSRTurSSHdr.CompanyCode = @CompanyCode AND
    spTrnSRTurSSHdr.BranchCode = @BranchCode AND
    spTrnSRTurSSHdr.TypeOfGoods = @TypeOfGoods
ORDER BY ReturnNo DESC
GO
CREATE procedure [dbo].[uspfn_SpposView] (  @CompanyCode varchar(15) ,@BranchCode varchar(15), @TypeOfGoods	 varchar(15))
   as
            SELECT 
                DISTINCT a.POSNo, a.SupplierCode, b.SupplierName 
            FROM 
                spTrnPOrderBalance a 
            INNER JOIN gnMstSupplier b 
               ON b.SupplierCode = a.SupplierCode 
              AND b.CompanyCode  = a.CompanyCode 
            WHERE a.OrderQty > a.Received
              AND a.CompanyCode = @CompanyCode
              AND a.BranchCode  = @BranchCode
			  AND a.TypeOfGoods = @TypeOfGoods	
            ORDER BY POSNo DESC
GO
CREATE procedure [dbo].[sp_UpdateBOMTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@User varchar(10)
)


as

UPDATE spMstItems
SET spMstItems.BOMInvCostPrice= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK)
						WHERE spMstItemPrice.CompanyCode=spMstItems.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItems.BranchCode
							AND spMstItemPrice.PartNo=spMstItems.PartNo), spMstItems.BOMInvCostPrice),
	spMstItems.BOMInvQty= spMstItems.OnHand,
	spMstItems.BOMInvAmt= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK)
						WHERE spMstItemPrice.CompanyCode=spMstItems.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItems.BranchCode
							AND spMstItemPrice.PartNo=spMstItems.PartNo), spMstItems.BOMInvCostPrice)
                            * spMstItems.OnHand,
	spMstItems.LastUpdateBy=@User,	
	spMstItems.LastUpdateDate=GetDate()	
WHERE spMstItems.CompanyCode=@CompanyCode AND spMstItems.BranchCode=@BranchCode

UPDATE spMstItemLoc
SET spMstItemLoc.BOMInvCostPrice= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK) 
						WHERE spMstItemPrice.CompanyCode=spMstItemLoc.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItemLoc.BranchCode
							AND spMstItemPrice.PartNo=spMstItemLoc.PartNo 
							AND spMstItemLoc.WarehouseCode=spMstItemLoc.WarehouseCode), spMstItemLoc.BOMInvCostPrice),
	spMstItemLoc.BOMInvQty= spMstItemLoc.OnHand,
	spMstItemLoc.BOMInvAmount= ISNULL((SELECT CostPrice FROM spMstItemPrice WITH(NOWAIT, NOLOCK) 
						WHERE spMstItemPrice.CompanyCode=spMstItemLoc.CompanyCode
							AND spMstItemPrice.BranchCode=spMstItemLoc.BranchCode
							AND spMstItemPrice.PartNo=spMstItemLoc.PartNo 
							AND spMstItemLoc.WarehouseCode=spMstItemLoc.WarehouseCode), spMstItemLoc.BOMInvCostPrice)
                            * spMstItemLoc.OnHand,
	spMstItemLoc.LastUpdateBy=@User,	
	spMstItemLoc.LastUpdateDate=GetDate()	
WHERE spMstItemLoc.CompanyCode=@CompanyCode AND spMstItemLoc.BranchCode=@BranchCode
GO
-- ==============================================================================
-- Author			: Seandy A.K
-- Create date		: 30-1-2013
-- Description		: Inquiry ITS
-- Query Activation : uspfn_InquiryITS '2013-03-12','2013-03-12','CABANG','',''
-- Query Activation : uspfn_OmInquiryMKT '2013-03-12','2013-03-12','CABANG','',''
-- update by fhi    : fhi 17-03-2015
-- Query Activation : uspfn_OmInquiryMKT_genExcel '2013-03-12','2013-03-12','CABANG','6006406',''
-- ==============================================================================
Create PROCEDURE [dbo].[uspfn_OmInquiryMKT_genExcel]
	@StartDate	datetime,
	@EndDate	datetime,
	@Area		nvarchar(100),
	@DealerCode	nvarchar(15),
	@OutletCode	nvarchar(15)
AS
declare @National varchar(10)
set @National = (select top 1 ISNULL(ParaValue,0) from gnMstLookUpDtl
                  where CodeID='QSLS' and LookUpValue='NATIONAL')

Declare @MainTable table
(
	DealerCode			varchar(15),
	DealerAbbreviation	varchar(50),
	OutletCode			varchar(15),
	OutletAbbreviation	varchar(50),
	TipeKendaraan		varchar(50),
	Variant				varchar(50),
	OutsINQ				numeric(18,0),
	NewINQ				numeric(18,0),
	OutsSPK				numeric(18,0),
	NewSPK				numeric(18,0),
	CancelSPK			numeric(18,0),
	FakturPolisi		numeric(18,0),
	Balance				numeric(18,0),
	ATTestDrive			int,
	MTTestDrive			int
)

if(@National = 1)
begin	
	Select * into #t1 from(
		Select distinct b.Area
			 , b.DealerCode
			 , b.DealerAbbreviation
			 , c.OutletCode
			 , c.OutletAbbreviation
			 , a.TipeKendaraan
			 , a.Transmisi
			 , a.Variant
			 , a.InquiryDate
			 , a.SPKDate
			 , case when isnull(a.TestDrive,'') = '' then 0 else case when isnull(a.TestDrive,'') = 'YA' then 1 else 0 end end TestDrive
			 , a.InquiryNumber
			 , a.LastProgress
		from pmHstITS a
		left join GnMstDealerMapping b on a.CompanyCode = b.DealerCode
		left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode
		where convert(varchar,InquiryDate,112) <= convert(varchar,@EndDate,112)
		  and (b.Area like Case when @Area <> '' 
						then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
								then 'JABODETABEK'
								else @Area end
						else '%%' end
		   or b.Area like Case when @Area <> '' 
						then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
								then 'CABANG'
								else @Area end
						else '%%' end) 	
		  and b.DealerCode like case when @DealerCode = '' then '%%' else @DealerCode end
		  and c.OutletCode like case when @OutletCode = '' then '%%' else @OutletCode end
	)#t1  
	
	select * into #TempStock from(
		select distinct a.CompanyCode
			 , a.BranchCode
			 , a.TipeKendaraan
			 , a.Variant
			 , a.ColourCode
			 --, isnull(f.UnitQuantity,0) UnitQuantity
			 , (select TOP 1 UnitQuantity
			      from pmHstStock
			    where CompanyCode = a.CompanyCode
			      and BranchCode = a.BranchCode
			      and Year(TanggalStock) = YEAR(@EndDate)
			      and MONTH(TanggalStock) = MONTH(@EndDate)
			      and TipeKendaraan = a.TipeKendaraan
			      and Variant = a.Variant
			      and ColourCode = a.ColourCode
			 order by a.TanggalStock Desc) UnitQuantity
			from pmHstStock a
			where YEAR(a.TanggalStock) = YEAR(@EndDate)
			  and MONTH(a.TanggalStock) = MONTH(@EndDate)
	)#TempStock
	
	Insert into @MainTable
	Select distinct a.DealerCode
		 , a.DealerAbbreviation
		 , a.OutletCode
		 , a.OutletAbbreviation
		 , a.TipeKendaraan
		 , a.Variant
		 , isnull((select Count(*) 
			  from #t1 e
			  where convert(varchar,e.InquiryDate,112) < convert(varchar,@StartDate,112)
				and a.Area = e.Area
				and a.DealerCode = e.DealerCode
				and a.OutletCode = e.OutletCode
				and a.TipeKendaraan = e.TipeKendaraan
			    and e.Variant = a.Variant
				and e.LastProgress in ('P','HP','SPK')),0) OutsINQ
		 , isnull((select Count(*) 
			  from #t1
			  where convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
				and Area = a.Area
				and DealerCode = a.DealerCode
				and OutletCode = a.OutletCode
				and TipeKendaraan = a.TipeKendaraan
			    and Variant = a.Variant),0) NewINQ
		 , (select COUNT(*) 
			  from #t1 
			 where DealerCode = a.DealerCode
			   and OutletCode = a.OutletCode
			   and convert(varchar,InquiryDate,112) < convert(varchar,@StartDate,112)
			   and convert(varchar,SPKDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			   and TipeKendaraan = a.TipeKendaraan
			   and Variant = a.Variant
			   and LastProgress in ('SPK')) OutsSPK
		 , (select COUNT(*) 
			  from #t1 
			 where DealerCode = a.DealerCode
			   and OutletCode = a.OutletCode
			   and convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			   and convert(varchar,SPKDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			   and TipeKendaraan = a.TipeKendaraan
			   and Variant = a.Variant
			   and LastProgress in ('SPK')) NewSPK
		 , (select COUNT(*) 
			  from #t1 e
			 where e.DealerCode = a.DealerCode
			   and e.OutletCode = a.OutletCode
			   and convert(varchar,e.InquiryDate,112) <= convert(varchar,@EndDate,112)
			   and e.TipeKendaraan = a.TipeKendaraan
			   and e.Variant = a.Variant
			   and exists (select  1 
							  from pmHstITS 
							 where InquiryNumber = e.InquiryNumber
							   and LastProgress in ('LOST')
							   and LostCaseCategory = 'KONTRAK TIDAK DISETUJUI')) CancelSPK
		 , isnull((select Count(*)
			  from OmHstInquirySales d
			  left join OmMstModel e on d.CompanyCode = e.CompanyCode
				and d.SalesModelCode = e.SalesModelCode
			  where convert(varchar,d.SuzukiFpolDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
				and d.CompanyCode = a.DealerCode
				and d.BranchCode = a.OutletCode
				and e.GroupCode = a.TipeKendaraan
				and Variant = a.Variant
				and e.TypeCode = a.Variant),0) FakturPolisi
		 --, isnull((select isnull(SUM(f.UnitQuantity),0)
			--		from pmHstStock f
			--		where f.CompanyCode = a.DealerCode
			--		  and f.BranchCode = a.OutletCode
			--		  and YEAR(f.TanggalStock) = YEAR(@EndDate)
			--		  and MONTH(f.TanggalStock) = MONTH(@EndDate)
			--		  and f.TipeKendaraan = a.TipeKendaraan
			--		  and f.Variant = a.Variant),0) Balance
		 , isnull((select SUM(f.UnitQuantity)
					from #TempStock f
					where f.CompanyCode = a.DealerCode
					  and f.BranchCode = a.OutletCode
					  and f.TipeKendaraan = a.TipeKendaraan
					  and f.Variant = a.Variant
					  ),0) Balance
		 , isnull((select SUM(TestDrive) 
			  from #t1
			  where convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			    and Area = a.Area
			    and DealerCode = a.DealerCode
			    and OutletCode = a.OutletCode
			    and TipeKendaraan = a.TipeKendaraan
			    and Transmisi = 'AT'
			    and Variant = a.Variant),0) ATTestDrive
		 , isnull((select SUM(TestDrive) 
			  from #t1
			  where convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			    and Area = a.Area
			    and DealerCode = a.DealerCode
			    and OutletCode = a.OutletCode
			    and TipeKendaraan = a.TipeKendaraan
			    and Transmisi = 'MT'
			    and Variant = a.Variant),0) MTTestDrive
	from #t1 a
	UNION
	select a.CompanyCode
		 , b.DealerAbbreviation
		 , a.BranchCode
		 , c.OutletAbbreviation
		 , isnull(e.GroupCode,'') TipeKendaraan
		 , isnull(e.TypeCode,'') Variant
		 , 0 
		 , 0 
		 , 0
		 , 0
		 , 0
		 , 0
		 , COUNT(*)
		 , 0
		 , 0
	from OmHstInquirySales a
	left join OmMstModel e on e.CompanyCode = a.CompanyCode
		and e.SalesModelCode = a.SalesModelCode
	left join gnMstDealerMapping b on b.DealerCode = a.CompanyCode
	left join gnMstDealerOutletMapping c on c.DealerCode = a.CompanyCode
		and c.OutletCode = a.BranchCode
	where Convert(varchar,a.SuzukiFPOLDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
	  and (b.Area like Case when @Area <> '' 
					then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
							then 'JABODETABEK'
							else @Area end
					else '%%' end
	   or b.Area like Case when @Area <> '' 
					then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
							then 'CABANG'
							else @Area end
					else '%%' end) 	
	  and a.CompanyCode like case when @DealerCode = '' then '%%' else @DealerCode end
	  and a.BranchCode like case when @OutletCode = '' then '%%' else @OutletCode end
	  and not exists(select 1 
					   from #t1 d 
					  where d.DealerCode = a.CompanyCode
					    and d.OutletCode = a.BranchCode
					    and e.GroupCode = d.TipeKendaraan
					    and e.TypeCode = d.Variant)
	group by a.CompanyCode,b.DealerAbbreviation,a.BranchCode,c.OutletAbbreviation,e.GroupCode,e.TypeCode
	drop table #t1
END
else
begin
	Select * into #t3 from(
		Select distinct b.Area
			 , b.DealerCode
			 , b.DealerAbbreviation
			 , c.OutletCode
			 , c.OutletAbbreviation
			 , a.TipeKendaraan
			 , a.Variant
			 , a.InquiryDate
			 , a.SPKDate
			 , a.TestDrive
			 , a.Transmisi
			 , a.InquiryNumber
			 , a.LastProgress
		from pmKDP a
		left join GnMstDealerMapping b on a.CompanyCode = b.DealerCode
		left join GnMstDealerOutletMapping c on a.CompanyCode = c.DealerCode
			and a.BranchCode = c.OutletCode
		where convert(varchar,InquiryDate,112) <= convert(varchar,@EndDate,112)
		  and (b.Area like Case when @Area <> '' 
						then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
								then 'JABODETABEK'
								else @Area end
						else '%%' end
		   or b.Area like Case when @Area <> '' 
						then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
								then 'CABANG'
								else @Area end
						else '%%' end) 	
		  and b.DealerCode like case when @DealerCode = '' then '%%' else @DealerCode end
		  and c.OutletCode like case when @OutletCode = '' then '%%' else @OutletCode end
	)#t3
	
	--select * into #tempQty from(
	--	select f.CompanyCode
	--		 , e.BranchCode
	--		 , e.Year
	--		 , e.Month
	--		 , f.GroupCode
	--		 , f.TypeCode
	--		 , SUM(isnull(e.EndingOH,0)) EndingOH
	--	from OmMstModel f
	--	LEFT JOIN OmTrInventQtyVehicle e on f.CompanyCode = e.CompanyCode
	--	   and f.SalesModelCode = e.SalesModelCode
	--	where isnull(e.CompanyCode, '') <> ''
	--	  and isnull(e.BranchCode, '') <> ''
	--	  and e.Year = YEAR(@EndDate)
	--	  and e.Month = MONTH(@EndDate)
	--	group by f.CompanyCode
	--		 , e.BranchCode
	--		 , e.Year
	--		 , e.Month
	--		 , f.GroupCode
	--		 , f.TypeCode
	--)#tempQty
		
	select * into #tempQty from(
		select distinct f.CompanyCode
			 , e.BranchCode
			 , f.GroupCode
			 , f.TypeCode
			 , e.ColourCode
			 , (select TOP 1 b.EndingOH
			      from OmMstModel a
		     LEFT JOIN OmTrInventQtyVehicle b on a.CompanyCode = b.CompanyCode
				   and a.SalesModelCode = b.SalesModelCode
			    where a.CompanyCode = f.CompanyCode
			      and b.BranchCode = e.BranchCode
			      and b.Year = YEAR(@EndDate)
			      and b.Month = MONTH(@EndDate)
			      and a.GroupCode = f.GroupCode
			      and a.TypeCode = f.TypeCode
			      and b.ColourCode = e.ColourCode
			 order by a.CreatedDate,a.LastUpdateDate Desc) EndingOH
		from OmMstModel f
		LEFT JOIN OmTrInventQtyVehicle e on f.CompanyCode = e.CompanyCode
		   and f.SalesModelCode = e.SalesModelCode
		where isnull(e.CompanyCode, '') <> ''
		  and isnull(e.BranchCode, '') <> ''
		  and e.Year = YEAR(@EndDate)
		  and e.Month = MONTH(@EndDate)
	)#tempQty
-- Query Activation : uspfn_OmInquiryMKT '2013-03-12','2013-03-12','CABANG','',''

	Insert into @MainTable
	Select distinct a.DealerCode
		 , a.DealerAbbreviation
		 , a.OutletCode
		 , a.OutletAbbreviation
		 , a.TipeKendaraan
		 , a.Variant
		 , (select Count(*) 
			  from #t3 e
			  where convert(varchar,e.InquiryDate,112) < convert(varchar,@StartDate,112)
			    and a.Area = e.Area
			    and a.DealerCode = e.DealerCode
			    and a.OutletCode = e.OutletCode
			    and a.TipeKendaraan = e.TipeKendaraan
			    and a.Variant = e.Variant
			    and exists (select  1 
							  from pmKDP 
							 where InquiryNumber = e.InquiryNumber
							   and LastProgress in ('P','HP','SPK'))) OutsINQ
		 , (select Count(*) 
			  from #t3
			  where convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			    and Area = a.Area
			    and DealerCode = a.DealerCode
			    and OutletCode = a.OutletCode
			    and TipeKendaraan = a.TipeKendaraan
			    and Variant = a.Variant) NewINQ
		 , (select COUNT(*) 
			  from #t3 
			 where DealerCode = a.DealerCode
			   and OutletCode = a.OutletCode
			   and convert(varchar,InquiryDate,112) < convert(varchar,@StartDate,112)
			   and TipeKendaraan = a.TipeKendaraan
			   and Variant = a.Variant
			   and LastProgress in ('SPK')) OutsSPK
		 , (select COUNT(*) 
			  from #t3 
			 where DealerCode = a.DealerCode
			   and OutletCode = a.OutletCode
			   and convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			   and TipeKendaraan = a.TipeKendaraan
			   and Variant = a.Variant
			   and LastProgress in ('SPK')) NewSPK
		 , (select COUNT(*) 
			  from #t3 e
			 where e.DealerCode = a.DealerCode
			   and e.OutletCode = a.OutletCode
			   and convert(varchar,e.InquiryDate,112) <= convert(varchar,@EndDate,112)
			   and e.TipeKendaraan = a.TipeKendaraan
			   and e.Variant = a.Variant
			   and exists (select  1 
							  from pmKDP 
							 where InquiryNumber = e.InquiryNumber
							   and LastProgress in ('LOST')
							   and LostCaseCategory = 'D')) CancelSPK
		 , (select COUNT(*) 
			  from #t3 
			 where DealerCode = a.DealerCode
			   and OutletCode = a.OutletCode
			   and convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			   and TipeKendaraan = a.TipeKendaraan
			   and Variant = a.Variant
			   and LastProgress in ('DO')) FakturPolisi
 		-- , (select isnull(SUM(f.EndingOH),0)
			--from #TempQty f
			--where f.CompanyCode = a.DealerCode
			--  and f.BranchCode = a.OutletCode
			--  and f.Year = YEAR(@EndDate)
			--  and f.Month = MONTH(@EndDate)
			--  and f.GroupCode = a.TipeKendaraan
			--  and f.TypeCode = a.Variant) Balance
		 , (select isnull(SUM(f.EndingOH),0)
					from #TempQty f
					where f.CompanyCode = a.DealerCode
					  and f.BranchCode = a.OutletCode
					  and f.GroupCode = a.TipeKendaraan
					  and f.TypeCode = a.Variant) Balance
		 , (select Count(*) 
			  from #t3
			  where convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			    and Area = a.Area
			    and DealerCode = a.DealerCode
			    and OutletCode = a.OutletCode
			    and TipeKendaraan = a.TipeKendaraan
			    and Variant = a.Variant
			    and Transmisi = 'AT'
			    and TestDrive = '10') ATTestDrive
		, (select Count(*) 
			  from #t3
			  where convert(varchar,InquiryDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
			    and Area = a.Area
			    and DealerCode = a.DealerCode
			    and OutletCode = a.OutletCode
			    and TipeKendaraan = a.TipeKendaraan
			    and Variant = a.Variant
			    and Transmisi = 'MT'
			    and TestDrive = '10') MTTestDrive
	from #t3 a
	UNION
	select a.CompanyCode
		 , b.DealerAbbreviation
		 , a.BranchCode
		 , c.OutletAbbreviation
		 , isnull(e.GroupCode,'') TipeKendaraan
		 , isnull(e.TypeCode,'') Variant
		 , 0
		 , 0 
		 , 0
		 , 0
		 , 0
		 , 0
		 , COUNT(e.SalesModelCode)
		 , 0
		 , 0
	from OmTrSalesReqDetail a
	left join OmMstVehicle f on a.CompanyCode = f.CompanyCode
		and a.ChassisCode = f.ChassisCode
		and a.ChassisNo = f.ChassisNo
	left join OmMstModel e on e.CompanyCode = a.CompanyCode
		and e.SalesModelCode = f.SalesModelCode
	left join gnMstDealerMapping b on b.DealerCode = a.CompanyCode
	left join gnMstDealerOutletMapping c on c.DealerCode = a.CompanyCode
		and c.OutletCode = a.BranchCode
	where Convert(varchar,a.FakturPolisiDate,112) between convert(varchar,@StartDate,112) and convert(varchar,@EndDate,112)
	  and (b.Area like Case when @Area <> '' 
					then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
							then 'JABODETABEK'
							else @Area end
					else '%%' end
	   or b.Area like Case when @Area <> '' 
					then  case when (@Area = 'JABODETABEK' or @Area = 'CABANG')
							then 'CABANG'
							else @Area end
					else '%%' end) 	
	  and b.DealerCode like case when @DealerCode = '' then '%%' else @DealerCode end
	  and c.OutletCode like case when @OutletCode = '' then '%%' else @OutletCode end
	  and not exists(select 1 
					   from #t3 d 
					  where d.DealerCode = a.CompanyCode
					    and d.OutletCode = a.BranchCode
					    and e.GroupCode = d.TipeKendaraan
					    and e.TypeCode = d.Variant
					    and e.TransmissionType = d.Transmisi)
	group by a.CompanyCode, b.DealerAbbreviation, a.BranchCode, c.OutletAbbreviation, e.GroupCode, e.TypeCode,e.TransmissionType

	drop table #t3
end

if(@DealerCode = '' and @OutletCode = '')
begin
	select TipeKendaraan
		 , Variant
		 , SUM(OutsINQ) OutsINQ
		 , SUM(NewINQ) NewINQ
		 , SUM(OutsSPK) OutsSPK
		 , SUM(NewSPK) NewSPK
		 , SUM(CancelSPK) CancelSPK
		 , SUM(FakturPolisi) FakturPolisi
		 , SUM(Balance) Balance
		 , SUM(ATTestDrive) ATTestDrive
		 , SUM(MTTestDrive) MTTestDrive
	from @MainTable
	group by TipeKendaraan, Variant
	having (SUM(MTTestDrive) + SUM(ATTestDrive) + SUM(OutsINQ) + SUM(NewINQ) + SUM(OutsSPK) + SUM(NewSPK)  + SUM(FakturPolisi) + SUM(Balance)) > 0
	order by TipeKendaraan
end

select distinct
DealerCode
	 , DealerAbbreviation
	 , OutletCode
	 , OutletAbbreviation
from @MainTable
group by DealerCode, DealerAbbreviation, OutletCode, OutletAbbreviation, TipeKendaraan, Variant, OutsINQ , NewINQ , OutsSPK, NewSPK, CancelSPK, FakturPolisi , ATTestDrive, MTTestDrive
having (SUM(MTTestDrive) + SUM(ATTestDrive) + SUM(NewINQ) + SUM(NewSPK) + SUM(OutsINQ) + SUM(OutsSPK) + SUM(FakturPolisi) + SUM(Balance)) > 0
order by DealerAbbreviation, OutletAbbreviation

select DealerCode
	 , DealerAbbreviation
	 , OutletCode
	 , OutletAbbreviation
	 , TipeKendaraan
	 , Variant
	 , OutsINQ 
	 , NewINQ
	 , OutsSPK
	 , NewSPK
	 , CancelSPK
	 , FakturPolisi
	 , case when SUM(Balance) < 0 then 0 else SUM(Balance) end Balance
	 , ATTestDrive
	 , MTTestDrive
from @MainTable
group by DealerCode, DealerAbbreviation, OutletCode, OutletAbbreviation, TipeKendaraan, Variant, OutsINQ , NewINQ , OutsSPK, NewSPK, CancelSPK, FakturPolisi , ATTestDrive, MTTestDrive
having (SUM(MTTestDrive) + SUM(ATTestDrive) + SUM(NewINQ) + SUM(NewSPK) + SUM(OutsINQ) + SUM(OutsSPK) + SUM(FakturPolisi) + SUM(Balance)) > 0
order by DealerAbbreviation, OutletAbbreviation, TipeKendaraan, Variant
GO
create procedure [dbo].[uspfn_SelectCustomerProfitCenter]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@CustomerCode varchar(25)
as
begin
	declare @CodeID varchar(13);
	set @CodeID = 'PFCN';

	if @CustomerCode = '' return

	SELECT a.*
	     , ProfitCenterName = (
				select top 1
				       x.LookUpValueName
				  from gnMstLookUpDtl x
				 where x.CompanyCode = @CompanyCode
				   and x.CodeID = 'PFCN'
				   and x.LookUpValue = a.ProfitCenterCode
		   )
		 , CustomerClassName = (
				select top 1
				       x.CustomerClassName
				  from GnMstCustomerClass x
				 where x.CompanyCode = @CompanyCode
				   and x.ProfitCenterCode = a.ProfitCenterCode
		   )
		 , TaxDesc = (
				select top 1
				       x.Description
				  from gnMstTax x
				 where x.CompanyCode = @CompanyCode
				   and x.TaxCode = a.TaxCode
		   )
		 , CollectorName = (
				select top 1
				       x.CollectorName
				  from gnMstCollector x
				 where x.CompanyCode = @CompanyCode
				   and x.BranchCode = a.BranchCode
				   and x.ProfitCenterCode = a.ProfitCenterCode
				   and x.CollectorCode = a.CollectorCode
		   )
	     , TaxTransDesc = (
				select top 1
				       x.LookUpValueName
				  from gnMstLookUpDtl x
				 where x.CompanyCode = @CompanyCode
				   and x.CodeID = 'TRPJ'
				   and x.LookUpValue = a.TaxTransCode
		   )
	     , SalesmanName = (
				select top 1
				       x.EmployeeName
				  from HrEmployee x
				 where x.CompanyCode = @CompanyCode
				   and x.EmployeeID = a.Salesman
		   )
		 , a.SalesCode as KelAR
	     , KelARDesc = (
				select top 1
				       x.LookUpValueName
				  from gnMstLookUpDtl x
				 where x.CompanyCode = @CompanyCode
				   and x.CodeID = 'GPAR'
				   and x.LookUpValue = a.SalesCode
		   )
	     , CustomerGradeName = (
				select top 1
				       x.LookUpValueName
				  from gnMstLookUpDtl x
				 where x.CompanyCode = @CompanyCode
				   and x.CodeID = 'CSGR'
				   and x.LookUpValue = a.CustomerGrade
		   )
		 --, b.LookUpValueName as ProfitCenterName
		 , c.CustomerGovName
		 , GroupPrice = a.GroupPriceCode
		 , GroupPriceDesc = ( 
				select top 1
					   x.RefferenceDesc1
				  from omMstRefference x
				 where x.CompanyCode = a.CompanyCode
				   and x.RefferenceType = 'GRPR'
				   and x.RefferenceCode = a.GroupPriceCode
		   )
		 --, a.CustomerClass
		 --, a.ContactPerson 
	  FROM gnMstCustomerProfitCenter a
	  LEFT JOIN GnMstLookupDtl b 
	    ON b.CompanyCode=a.CompanyCode 
	   AND b.LookUpValue  = a.ProfitCenterCode
	  LEFT JOIN gnMstCustomer c ON c.CompanyCode = a.CompanyCode 
	   AND c.CustomerCode = a.CustomerCode
	 WHERE a.CompanyCode  = @CompanyCode 
	   AND a.BranchCode   = @BranchCode
	   AND a.CustomerCode = @CustomerCode
	   AND b.CodeID       = @CodeID
end


--select * from gnMstCustomerProfitCenter where CustomerCode=''
GO
create procedure [dbo].[uspfn_GenerateBPSLampiranNew]
	@CompanyCode	VARCHAR(MAX),
	@BranchCode		VARCHAR(MAX),
	@JobOrderNo		VARCHAR(MAX),
	@ProductType	VARCHAR(MAX),
	@CustomerCode	VARCHAR(MAX),
	@UserID			VARCHAR(MAX),
	@PickedBy		VARCHAR(MAX)
AS
BEGIN

/*
PSEUDOCODE PROCESS :
Line 38  : RE-CALCULATE AMOUNT DETAIL
Line 93  : RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
Line 140 : UPDATE SO SUPPLY AND STATUS HEADER 
Line 167 : UPDATE SUPPLY SLIP QTY SERVICE 
Line 237 : INSERT NEW SRV ITEM BASED PICKING LIST
Line 276 : INSERT BPS AND LAMPIRAN
Line 292 : INSERT BPS HEADER
Line 352 : INSERT BPS DETAIL
Line 395 : INSERT LAMPIRAN HEADER
Line 458 : INSERT LAMPIRAN DETAIL
Line 500 : UPDATE STOCK
Line 571 : UPDATE DEMAND CUST AND DEMAND ITEM
Line 611 : INSERT TO ITEM MOVEMENT
Line 650 : UPDATE TRANSDATE
*/

--DECLARE	@CompanyCode	VARCHAR(MAX),
--		@BranchCode		VARCHAR(MAX),
--		@JobOrderNo		VARCHAR(MAX),
--		@ProductType	VARCHAR(MAX),
--		@CustomerCode	VARCHAR(MAX),
--		@UserID			VARCHAR(MAX),
--		@PickedBy		VARCHAR(MAX)

--SET	@CompanyCode	= '6006400001'
--SET	@BranchCode		= '6006400101'
--SET	@JobOrderNo		= 'SPK/14/101625'
--SET	@ProductType	= '4W'
--SET	@CustomerCode	= 'JKT-1852626'
--SET	@UserID			= 'ga'
--SET	@PickedBy		= '00001'
		
--exec uspfn_GenerateBPSLampiranNew '6006400001','6006400101','SPK/14/101625','4W','JKT-1852626','ga','00001'

--===============================================================================================================================
-- RE-CALCULATE AMOUNT DETAIL
--===============================================================================================================================
DECLARE @DefaultDate		DATETIME

SET @DefaultDate = '1900-01-01 00:00:00.000'

SELECT * INTO #TempPickingSlipDtl FROM (
SELECT
	a.CompanyCode
	, a.BranchCode 
	, a.PickingSlipNo
	, a.PickingSlipDate
	, a.CustomerCode
	, a.TypeOfGoods
	, b.DocNo
	, b.PartNo
	, b.QtyPicked
	, b.QtyPicked * b.RetailPrice SalesAmt
	, Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) DiscAmt
	, (b.QtyPicked * b.RetailPrice) - Floor((b.QtyPicked * b.RetailPrice) * DiscPct/100) NetSalesAmt
FROM SpTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode 
	AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND Status < 2
	AND b.DocNo IN (SELECT DocNo FROM SpTrnSordHdr WITH (NOLOCK, NOWAIT)
				WHERE 
					1 = 1
					AND CompanyCode =@CompanyCode
					AND BranchCode = @BranchCode
					AND UsageDocNo = @JobOrderNo
					AND Status = 4)
) #TempPickingSlipDtl

UPDATE SpTrnSPickingDtl
SET SalesAmt = b.SalesAmt 
	, DiscAmt = b.DiscAmt
	, NetSalesAmt = b.NetSalesAmt
	, TotSalesAmt = b.NetSalesAmt
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingDtl a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo
	AND a.PartNo = b.PartNo

--===============================================================================================================================
-- RE-CALCULATE AMOUNT HEADER AND UPDATE STATUS
--===============================================================================================================================
SELECT * INTO #TempPickingSlipHdr FROM (
SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
	, SUM(b.QtyPicked) TotSalesQty
	, SUM(b.SalesAmt) TotSalesAmt
	, SUM(b.DiscAmt) TotDiscAmt
	, SUM(b.NetSalesAmt) TotDPPAmt
	, floor(SUM(b.NetSalesAmt) * (ISNULL((SELECT TaxPct FROM GnMstTax x WITH (NOLOCK, NOWAIT) WHERE x.CompanyCode = @CompanyCode AND x.TaxCode IN 
		(SELECT TaxCode FROM GnMstCustomerProfitCenter y WITH (NOLOCK, NOWAIT) WHERE y.CompanyCode = @CompanyCode AND y.BranchCode = @BranchCode
			AND y.ProfitCenterCode = '300' AND y.CustomerCode = @CustomerCode)),0)/100))
	  TotPPNAmt
FROM spTrnSPickingHdr a WITH (NOLOCK, NOWAIT)
LEFT JOIN spTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PickingSlipNo = b.PickingSlipNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo IN (SELECT DISTINCT(PickingSlipNo) FROM #TempPickingSlipDtl WITH (NOLOCK, NOWAIT))
GROUP BY a.CompanyCode
	, a.BranchCode
	, a.PickingSlipNo	
) #TempPickingSlipHdr

UPDATE SpTrnSPickingHdr
SET TotSalesQty = b.TotSalesQty
	, TotSalesAmt = b.TotSalesAmt
	, TotDiscAmt = b.TotDiscAmt
	, TotDPPAmt = b.TotDPPAmt
	, TotPPNAmt = b.TotPPNAmt
	, TotFinalSalesAmt = b.TotDPPAmt + b.TotPPNAmt
	, Status = 2
	, PickedBy = @PickedBy
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSPickingHdr a, #TempPickingSlipHdr b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PickingSlipNo = b.PickingSlipNo

--===============================================================================================================================
-- UPDATE SO SUPPLY AND STATUS HEADER 
--===============================================================================================================================
UPDATE SpTrnSOSupply
SET	Status = 2
	, QtyPicked = b.QtyPicked
	, QtyBill = b.QtyPicked
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
FROM SpTrnSOSupply a, #TempPickingSlipDtl b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.DocNo = b.DocNo
	AND a.PartNo = b.PartNo

UPDATE SpTrnSORDHdr 
SET Status = 5
	, LastUpdateBy = @UserID
	, LastUpdateDate = GetDate()
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocNo IN (SELECT DISTINCT(DocNo) FROM #TempPickingSlipDtl)

--===============================================================================================================================
-- UPDATE SUPPLY SLIP QTY SERVICE 
--===============================================================================================================================
DECLARE @ServiceNo VARCHAR(MAX)

SET @ServiceNo = (SELECT ServiceNo FROM svTrnService WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
		AND ProductType = @ProductType AND JobOrderNo = @JobOrderNo)

SELECT * INTO #TempServiceItem FROM (
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq
	, a.DemandQty
	, a.SupplyQty
	, b.QtyBill
	, b.DocNo
	, c.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DiscPct
FROM SvTrnSrvItem a WITH (NOLOCK, NOWAIT)
INNER JOIN SpTrnSPickingDtl b WITH (NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode AND a.BranchCode = b.BranchCode AND a.PartNo = b.PartNo AND a.SupplySlipNo = b.DocNo
INNER JOIN SpMstItemPrice c ON a.CompanyCode = c.CompanyCode AND a.BranchCode = c.BranchCode AND a.PartNo = c.PartNo
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.ServiceNo = @ServiceNo
	AND a.PartSeq IN (SELECT MAX(PartSeq) FROM SvTrnSrvItem WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = a.PartNo)
	AND a.SupplySlipNo = b .DocNo
) #TempServiceItem 

UPDATE svTrnSrvItem
SET SupplyQty = (CASE WHEN b.QtyBill > b.DemandQty 
				THEN 
					CASE WHEN b.DemandQty = 0 THEN b.QtyBill ELSE b.DemandQty END
				ELSE b.QtyBill END)
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq
	AND a.SupplySlipNo = b.DocNo

UPDATE svTrnSrvItem
SET CostPrice = b.CostPrice
	, LastUpdateBy = @UserID
	, LastUpdateDate = Getdate()
FROM svTrnSrvItem a, #TempServiceItem b
WHERE
	1 = 1
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.SupplySlipNo = b.DocNo

--===============================================================================================================================
-- INSERT NEW SRV ITEM BASED PICKING LIST
--===============================================================================================================================
INSERT INTO SvTrnSrvItem (CompanyCode, BranchCode, ProductType, ServiceNo, PartNo, PartSeq, DemandQty, SupplyQty, ReturnQty, CostPrice, RetailPrice, TypeOfGoods, BillType, SupplySlipNo, SupplySlipDate, SSReturnNo, SSReturnDate, CreatedBy, CreatedDate, LastupdateBy, LastupdateDate, DiscPct)
SELECT 
	a.CompanyCode
	, a.BranchCode
	, a.ProductType
	, a.ServiceNo
	, a.PartNo
	, a.PartSeq + 1
	, 0 DemandQty
	, a.QtyBill - a.DemandQty SupplyQty
	, 0 ReturnQty
	, a.CostPrice
	, a.RetailPrice
	, a.TypeOfGoods
	, a.BillType
	, a.DocNo SupplySlipNo
	, (SELECT DocDate FROM SpTrnSORDHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
		AND DocNo = a.DocNo) SupplySlipDate
	, NULL SSReturnNo
	, NULL SSReturnDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, a.DiscPct
FROM #TempServiceItem a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.ProductType = @ProductType
	AND a.DemandQty < a.QtyBill
	AND a.QtyBill > 0
	AND a.DemandQty > 0

DROP TABLE #TempServiceItem 

--===============================================================================================================================
-- INSERT BPS AND LAMPIRAN
--===============================================================================================================================
DECLARE @PickingSlipNo	VARCHAR(MAX)
DECLARE	@TempBPSFNo		VARCHAR(MAX)
DECLARE	@TempLMPNo		VARCHAR(MAX)
DECLARE @MaxBPSFNo		INT
DECLARE @MaxLmpNo		INT

DECLARE db_cursor CURSOR FOR
SELECT DISTINCT PickingSlipNo FROM #TempPickingSlipHdr
OPEN db_cursor
FETCH NEXT FROM db_cursor INTO @PickingSlipNo

WHILE @@FETCH_STATUS = 0
BEGIN	

--===============================================================================================================================
-- INSERT BPS HEADER
--===============================================================================================================================
SET @MaxBPSFNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'BPF' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempBPSFNo = ISNULL((SELECT 'BPF/' + RIGHT(YEAR(GETDATE()),2) + '/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxBPSFNo, 1), 6)),'BPF/YY/XXXXXX')

INSERT INTO SpTrnSBPSFHdr
SELECT 
	CompanyCode
	, BranchCode
	, @TempBPSFNo BPSFNo
	, GetDate() BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, SalesType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, '2' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL isLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'BPF'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT BPS DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSBPSFDtl
SELECT
	CompanyCode
	, BranchCode
	, @TempBPSFNo
	, WarehouseCode
	, PartNo
	, PartNoOriginal
	, DocNo
	, DocDate
	, ReferenceNo
	, ReferenceDate
	, LocationCode
	, QtyBill
	, RetailPriceInclTax
	, RetailPrice
	, CostPrice
	, DiscPct
	, SalesAmt
	, DiscAmt
	, NetSalesAmt
	, 0 PPNAmt
	, TotSalesAmt
	, ProductType
	, PartCategory 
	, MovingCode
	, ABCClass
	, '' ExPickingListNo
	, @DefaultDate ExPickingListDate
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

--===============================================================================================================================
-- INSERT LAMPIRAN HEADER
--===============================================================================================================================
SET @MaxLmpNo = ISNULL((SELECT DocumentSequence + 1 FROM GnMstDocument WHERE 
	CompanyCode = @CompanyCode
		AND BranchCode = @BranchCode
		AND DocumentType = 'LMP' 
		AND ProfitCenterCode = '300' 
		AND DocumentYear = YEAR(GetDate())),0)

SET @TempLmpNo = ISNULL((SELECT 'LMP/' + RIGHT(YEAR(GETDATE()),2) +'/' + RIGHT(1000000 + CONVERT(VARCHAR, @MaxLmpNo, 1), 6)),'LMP/YY/XXXXXX')

INSERT INTO SpTrnSLmpHdr
SELECT
	CompanyCode
	, BranchCode
	, @TempLmpNo LmpNo	
	, GetDate() LmpDate
	, @TempBPSFNo BPSFNo
	, (SELECT BPSFDate FROM SpTrnSBPSFHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode AND BPSFNo = @TempBPSFNo)
		BPSFDate
	, PickingSlipNo
	, PickingSlipDate
	, TransType
	, CustomerCode
	, CustomerCodeBill
	, CustomerCodeShip
	, TotSalesQty
	, TotSalesAmt
	, TotDiscAmt
	, TotDPPAmt
	, TotPPNAmt
	, TotFinalSalesAmt
	, CONVERT(BIT, 0) isPKP
	, '0' Status
	, 0 PrintSeq
	, TypeOfGoods
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
	, NULL IsLocked
	, NULL LockingBy
	, NULL LockingDate
FROM SpTrnSPickingHdr WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND PickingSlipNo = @PickingSlipNo

UPDATE GnMstDocument
SET DocumentSequence = DocumentSequence + 1
	, LastUpdateDate = GetDate()
	, LastUpdateBy = @UserID
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND DocumentPrefix = 'LMP'
	AND ProfitCenterCode = '300'
	AND DocumentYear = Year(GetDate())

--===============================================================================================================================
-- INSERT LAMPIRAN DETAIL
--===============================================================================================================================
INSERT INTO SpTrnSLmpDtl
SELECT
	a.CompanyCode
	, a.BranchCode
	, @TempLmpNo LmpNo
	, a.WarehouseCode
	, a.PartNo
	, a.PartNoOriginal
	, a.DocNo
	, a.DocDate
	, a.ReferenceNo
	, a.ReferenceDate
	, a.LocationCode
	, a.QtyBill
	, a.RetailPriceInclTax
	, a.RetailPrice
	, ISNULL((SELECT CostPrice FROM SpMstItemPrice WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND PartNo = a.PartNo),0) CostPrice
	, a.DiscPct
	, a.SalesAmt
	, a.DiscAmt
	, a.NetSalesAmt
	, 0 PPNAmt
	, a.TotSalesAmt
	, a.ProductType
	, a.PartCategory 
	, a.MovingCode
	, a.ABCClass
	, @UserID CreatedBy
	, GetDate() CreatedDate
	, @UserID LastUpdateBy
	, GetDate() LastUpdateDate
FROM SpTrnSPickingDtl a WITH (NOLOCK, NOWAIT)
WHERE 
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND a.PickingSlipNo = @PickingSlipNo
	AND a.QtyPicked > 0

--===============================================================================================================================
-- UPDATE STOCK
--===============================================================================================================================

--===============================================================================================================================
-- VALIDATION QTY
--===============================================================================================================================
	DECLARE @Onhand_SRValid NUMERIC(18,2)	
	DECLARE @Allocation_SRValid NUMERIC(18,2)
	DECLARE @errmsg VARCHAR(MAX)
	DECLARE @CompanyMD AS VARCHAR(15)
	DECLARE @BranchMD AS VARCHAR(15)
	DECLARE @WarehouseMD AS VARCHAR(15)

	SET @CompanyMD = (SELECT CompanyMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @BranchMD = (SELECT BranchMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)
	SET @WarehouseMD = (SELECT WarehouseMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

	SELECT * INTO #Valid_2 FROM(
	SELECT a.PartNo
		, a.AllocationSR - b.QtyBill QtyValidSR
		, a.Onhand - b.QtyBill QtyValidOnhand
	FROM SpMstItems a, SpTrnSPickingDtl b
	WHERE 1 = 1
		AND a.CompanyCode = @CompanyMD
		AND a.BranchCode = @BranchMD
		AND b.PickingSlipNo = @PickingSlipNo
		AND a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.PartNo = b.PartNo) #Valid_2

	SET @Allocation_SRValid = ISNULL((SELECT TOP 1 QtyValidSR FROM #Valid_2 WHERE QtyValidSR < 0),0)
	SET @Onhand_SRValid = ISNULL((SELECT TOP 1 QtyValidOnhand FROM #Valid_2 WHERE QtyValidOnhand < 0),0)

	DROP TABLE #Valid_2

	IF (@Onhand_SRValid < 0 OR @Allocation_SRValid < 0)
	BEGIN
		SET @errmsg = 'PEMBUATAN DOKUMEN LAMPIRAN GAGAL ! ' + char(13) + char(13) + 'Error Message: Terdapat part dengan quantity Onhand atau alokasi kurang dari nol !'
		RAISERROR (@errmsg,16,1);
		RETURN
	END
--===============================================================================================================================

DECLARE @DbMD AS VARCHAR(15)
SET @DbMD = (SELECT DbMD FROM gnMstCompanyMapping WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode)

DECLARE @Query AS VARCHAR(MAX)
SET @Query = 
'UPDATE SpMstItems
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
	, LastSalesDate = GetDate()
FROM ' + @DbMD + '..SpMstItems a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo
UPDATE SpMstItemLoc
SET
	AllocationSR = AllocationSR - b.QtySupply
	, Onhand = Onhand - b.QtyBill
	, LastUpdateBy = ' + '''' + @UserID + '''' +'
	, LastUpdateDate = GetDate()
FROM ' + @DbMD + '..SpMstItemLoc a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = ' + ''''+@CompanyMD+'''' + '
	AND a.BranchCode = ' + ''''+@BranchMD +''''+ '
	AND a.WarehouseCode = ' + ''''+@WarehouseMD +''''+ '
	AND b.PickingSlipNo = ' + ''''+@PickingSlipNo+'''' + '
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.PartNo = b.PartNo'

EXEC(@query)
	
--===============================================================================================================================
-- UPDATE DEMAND CUST AND DEMAND ITEM
--===============================================================================================================================
UPDATE SpHstDemandCust
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandCust a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.CustomerCode IN (SELECT CustomerCode FROM SpTrnSPickingHdr WHERE CompanyCode = @CompanyCode AND BranchCode = BranchCode
							AND PickingSlipNo = @PickingSlipNo)
	AND a.PartNo = b.PartNo
	

UPDATE SpHstDemandItem
SET SalesFreq = SalesFreq + 1
	, SalesQty = SalesQty + b.QtyBill
	, LastUpdateBy = @UserID 
	, LastUpdateDate = GetDate()
FROM SpHstDemandItem a, SpTrnSPickingDtl b
WHERE
	1 = 1
	AND a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND b.PickingSlipNo = @PickingSlipNo
	AND a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.Year = Year(b.DocDate)
	AND a.Month = Month(b.DocDate)
	AND a.PartNo = b.PartNo
--
----=============================================================================================================================
---- INSERT TO ITEM MOVEMENT
----=============================================================================================================================
INSERT INTO SpTrnIMovement
SELECT
	@CompanyCode CompanyCode
	, @BranchCode BranchCode
	, a.LmpNo DocNo
	, (SELECT LmPDate FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
		AND BranchCode = @BranchCode AND LmpNo = a.LmpNo) 
	  DocDate
	, dateadd(s,ROW_NUMBER() OVER(Order by a.PartNo),getdate()) CreatedDate 
	, '00' WarehouseCode
	, LocationCode 
	, a.PartNo
	, 'OUT' SignCode
	, 'LAMPIRAN' SubSignCode
	, a.QtyBill
	, a.RetailPrice
	, a.CostPrice
	, a.ABCClass
	, a.MovingCode
	, a.ProductType
	, a.PartCategory
	, @UserID CreatedBy
FROM SpTrnSLmpDtl a WITH (NOLOCK, NOWAIT)
WHERE
	1 = 1
	AND CompanyCode = @CompanyCode
	AND BranchCode = @BranchCode
	AND LmpNo IN (SELECT LmpNo FROM SpTrnSLmpHdr WITH (NOLOCK, NOWAIT) WHERE CompanyCode = @CompanyCode 
				AND BranchCode = @BranchCode AND PickingSlipNo = @PickingSlipNo)
FETCH NEXT FROM db_cursor INTO @PickingSlipNo
END

CLOSE db_cursor

-- ==============================================================================================================================

DEALLOCATE db_cursor 

--===============================================================================================================================
-- UPDATE TRANSDATE
--===============================================================================================================================

update gnMstCoProfileSpare
set TransDate=getdate()
	, LastUpdateBy=@UserID
	, LastUpdateDate=getdate()
where CompanyCode = @CompanyCode AND BranchCode = @BranchCode

--===============================================================================================================================
-- DROP SECTION HEADER
--===============================================================================================================================
DROP TABLE #TempPickingSlipDtl
DROP TABLE #TempPickingSlipHdr
END
GO
create procedure [dbo].[uspfn_GetSpTranDetails] 
@PickingSlipNo varchar(25),
@CustomerCode varchar(25)
as
SELECT a.CustomerCode, a.PickingSlipNo, b.CustomerCode, b.CustomerName, b.Address1, b.Address2, b.Address3 FROM spTrnSInvoiceHdr a
               inner join gnMstCustomer b on a.CompanyCode = b.CompanyCode
               AND a.CustomerCode = a.CustomerCode
               where a.pickingSlipNo = @PickingSlipNo --'PLS/13/016078'
               AND b.CustomerCode = @CustomerCode --'1000557'
GO
CREATE procedure [dbo].[uspfn_spPickingHdrSales] @CompanyCode varchar(15), @BranchCode varchar(15), @PickingSlipNo varchar(25), @CodeID varchar(6)  
as      
SELECT DISTINCT  
                            spTrnSORDHdr.DocNo,        
                            spTrnSORDHdr.DocDate,                                                    
                            PaymentName =   
                            (select LookUpValueName from gnMstLookupDtl   
                            where LookupValue = spTrnSORDHdr.PaymentCode and CodeID = @CodeID),  
                            spTrnSORDHdr.OrderNo,                              
                            spTrnSORDHdr.OrderDate,  
                            CONVERT(bit, 1) ChkSelect,
                            spTrnSPickingHdr.Remark                            
                            FROM spTrnSPickingHdr   
                            LEFT JOIN spTrnSPickingDtl ON spTrnSPickingHdr.PickingSlipNo = spTrnSPickingDtl.PickingSlipNo AND  
                                spTrnSPickingHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND  
                                spTrnSPickingHdr.BranchCode = spTrnSPickingDtl.BranchCode      
                            INNER JOIN spTrnSORDHdr ON spTrnSORDHdr.DocNo = spTrnSPickingDtl.DocNo AND  
                                spTrnSORDHdr.CompanyCode = spTrnSPickingDtl.CompanyCode AND  
                                spTrnSORDHdr.BranchCode = spTrnSPickingDtl.BranchCode  
                            WHERE spTrnSPickingHdr.PickingSlipNo = @PickingSlipNo AND  
                            spTrnSPickingHdr.CompanyCode = @CompanyCode AND  
                            spTrnSPickingHdr.BranchCode = @BranchCode
GO
CREATE procedure [dbo].[uspfn_itsinqAchievementSalesman]
(  
 @CompanyCode  VARCHAR(15),  
 @BMEmployeeID  VARCHAR(15),  
 @SHEmployeeID  VARCHAR(15),  
 @SCEmployeeID  VARCHAR(15),  
 @SMEmployeeID  VARCHAR(15),  
 @Year    INT  
)  
AS  
BEGIN  

--declare @CompanyCode  VARCHAR(15)  
--SET @CompanyCode = '6006406'
--declare @BMEmployeeID  VARCHAR(15)
--SET @BMEmployeeID = 'BM189'  
--declare @SHEmployeeID  VARCHAR(15) 
--SET @SHEmployeeID = '225' 
--declare @SCEmployeeID  VARCHAR(15)
--SET @SCEmployeeID = '50395'  
--declare @SMEmployeeID  VARCHAR(15)
--SET @SMEmployeeID ='%'
--DECLARE  @Year    INT  
--SET @Year = 2013

 select * into #ListOfSalesman from (  
  select tmSalesman.CompanyCode, tmSalesman.BranchCode  
   , tmSalesman.EmployeeID, tmSalesman.TeamID   
   , tmSalesman.IsSupervisor    
  from   
   PmMstTeamMembers tmSalesman,  
   (  
    -- Sales Coordinator ---  
    select tmSalesmanTemp.CompanyCode, tmSalesmanTemp.BranchCode  
     , tmSalesmanTemp.EmployeeID, tmSalesmanTemp.TeamID   
     , tmSalesmanTemp.IsSupervisor   
    from   
     PmMstTeamMembers tmSalesmanTemp,  
     (  
      -- Team Members of Sales Head ----------  
      select tmSC.CompanyCode, tmSC.BranchCode  
       , tmSC.EmployeeID, tmSC.TeamID , tmSC.IsSupervisor   
      from   
       PmMstTeamMembers tmSC,   
       (  
        -- Sales Head ----------  
        select tmSH.CompanyCode, tmSH.BranchCode  
         , tmSH.EmployeeID, tmSH.TeamID , tmSH.IsSupervisor  
        from   
         PmMstTeamMembers tmSH,   
         (  
          -- Team Members of Branch Manager -----  
          select tmSHTemp.CompanyCode, tmSHTemp.BranchCode  
           , tmSHTemp.EmployeeID, tmSHTemp.TeamID, tmBM.IsSupervisor  
          from   
           PmMstTeamMembers tmSHTemp, (  
            -- Branch Manager --  
            select tmBM.CompanyCode, tmBM.BranchCode, tmBM.IsSupervisor  
             ,tmBM.EmployeeID, tmBM.TeamID  
            from PmMstTeamMembers tmBM  
             inner join PmPosition posBM on tmBM.CompanyCode = posBM.CompanyCode  
              and tmBM.EmployeeID = posBM.EmployeeID and posBM.PositionID = 40   
            where tmBM.CompanyCode = @CompanyCode and tmBM.EmployeeID like @BMEmployeeID -- employeeID of Branch Manager  
            --------------------  
           ) tmBM  
          where   
           tmBM.CompanyCode = tmSHTemp.CompanyCode   
           and tmBM.BranchCode = tmSHTemp.BranchCode  
           and tmBM.TeamID = tmSHTemp.TeamID   
           and tmSHTemp.IsSupervisor != 1   
           and tmSHTemp.EmployeeID like @SHEmployeeID -- employeeID of SalesHead  
          ----------------------------------------  
         ) tmSHTemp_NotSup  
        where tmSH.CompanyCode = tmSHTemp_NotSup.CompanyCode   
         and tmSH.BranchCode = tmSHTemp_NotSup.BranchCode  
         and tmSH.EmployeeID = tmSHTemp_NotSup.EmployeeID  
         and tmSH.IsSupervisor = 1  
        ---------------------------------  
       ) tmSCTemp  
      where  
       tmSC.CompanyCode = tmSCTemp.CompanyCode   
       and tmSC.BranchCode = tmSCTemp.BranchCode  
       and tmSC.TeamID = tmSCTemp.TeamID  
       and tmSC.IsSupervisor != 1  
       and tmSC.EmployeeID like @SCEmployeeID -- EmployeeID of Sales Coordinator  
      --------------------------------  
     )tmSCTemp_NotSup  
    where tmSalesmanTemp.CompanyCode = tmSCTemp_NotSup.CompanyCode   
     and tmSalesmanTemp.BranchCode = tmSCTemp_NotSup.BranchCode  
     and tmSalesmanTemp.EmployeeID = tmSCTemp_NotSup.EmployeeID  
     and tmSalesmanTemp.IsSupervisor = 1  
    --------------  
   ) tmSalesmanTemp  
  where  
   tmSalesman.CompanyCode = tmSalesmanTemp.CompanyCode   
   and tmSalesman.BranchCode = tmSalesmanTemp.BranchCode  
   and tmSalesman.TeamID = tmSalesmanTemp.TeamID  
   and tmSalesman.IsSupervisor != 1  
   and tmSalesman.EmployeeID like @SMEmployeeID -- EmployeeID of Salesman  
 ) #ListOfSalesman 

select * into #TempSM from (  
  select 'SM' Intial, CompanyCode, BranchCode, SpvEmployeeID, EmployeeID, isnull(Jan, 0) Jan  
  , isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May  
  , isnull(Jun, 0) Jun, isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep  
  , isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec from (  
   select kdp.CompanyCode, kdp.BranchCode, substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth --[Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec]  
    , kdp.SpvEmployeeID, kdp.EmployeeID, count(kdp.EmployeeID) InquiryCount  
   from PmKDP kdp  
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year  
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)        
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)        
   group by kdp.CompanyCode, kdp.BranchCode, kdp.SpvEmployeeID, kdp.EmployeeID, substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)  
  ) as Header  
  pivot(  
   sum(InquiryCount)  
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  
  ) pvt  
 )#TempSM   
  
 select * into #TempSC from (  
  select   
  'SC' Initial, SM.CompanyCode, SM.BranchCode, SM.SpvEmployeeID EmployeeID  
  , sum(SM.Jan) Jan, sum(SM.Feb) Feb, sum(SM.Mar) Mar  
  , sum(SM.Apr) Apr, sum(SM.May) May, sum(SM.Jun) Jun  
  , sum(SM.Jul) Jul, sum(SM.Aug) Aug, sum(SM.Sep) Sep  
  , sum(SM.Oct) Oct, sum(SM.Nov) Nov, sum(SM.Dec) Dec  
  from #TempSM SM   
  group by SM.CompanyCode, SM.BranchCode, SM.SpvEmployeeID  
 ) #TempSC  
  
 select * into #TempSH from (  
  select   
   'SH' Initial, tempSH.CompanyCode, tempSH.BranchCode, tempSH.SpvEmployeeID EmployeeID  
   , sum(tempSC.Jan) Jan, sum(tempSC.Feb) Feb, sum(tempSC.Mar) Mar  
   , sum(tempSC.Apr) Apr, sum(tempSC.May) May, sum(tempSC.Jun) Jun  
   , sum(tempSC.Jul) Jul, sum(tempSC.Aug) Aug, sum(tempSC.Sep) Sep  
   , sum(tempSC.Oct) Oct, sum(tempSC.Nov) Nov, sum(tempSC.Dec) Dec   
  from #TempSC tempSC,   
   (select tMembersHead.CompanyCode, tMembersHead.BranchCode  
    , tMembersHead.EmployeeID SpvEmployeeID, tMembersCoord.EmployeeID  
   from PmMstTeamMembers tMembersHead,  
    (select tMembers.CompanyCode, tMembers.BranchCode  
     , tMembers.EmployeeID, tMembers.TeamID  
    from PmMstTeamMembers tMembers, #TempSC sHeads  
    where   
     tMembers.CompanyCode = sHeads.CompanyCode   
     and tMembers.BranchCode = sHeads.BranchCode  
     and tMembers.EmployeeID = sHeads.EmployeeID   
     and tMembers.IsSupervisor != 1) tMembersCoord   
   where tMembersHead.CompanyCode = tMembersCoord.CompanyCode  
    and tMembersHead.BranchCode = tMembersCoord.BranchCode  
    and tMembershead.TeamID = tMembersCoord.TeamID  
    and tMembersHead.IsSupervisor = 1) tempSH  
  where tempSH.CompanyCode = tempSC.CompanyCode  
   and tempSH.BranchCode = tempSC.BranchCode  
   and tempSH.EmployeeID = tempSC.EmployeeID  
  group by tempSH.CompanyCode, tempSH.BranchCode, tempSH.SpvEmployeeID  
 ) #TempSH  
  
 select * into #TempBM from (  
  select   
   'SH' Initial, tempBM.CompanyCode, tempBM.BranchCode, tempBM.SpvEmployeeID EmployeeID  
   , sum(tempSH.Jan) Jan, sum(tempSH.Feb) Feb, sum(tempSH.Mar) Mar  
   , sum(tempSH.Apr) Apr, sum(tempSH.May) May, sum(tempSH.Jun) Jun  
   , sum(tempSH.Jul) Jul, sum(tempSH.Aug) Aug, sum(tempSH.Sep) Sep  
   , sum(tempSH.Oct) Oct, sum(tempSH.Nov) Nov, sum(tempSH.Dec) Dec   
  from #TempSH tempSH,   
   (select tMembersHead.CompanyCode, tMembersHead.BranchCode  
    , tMembersHead.EmployeeID SpvEmployeeID, tMembersCoord.EmployeeID  
   from PmMstTeamMembers tMembersHead,  
    (select tMembers.CompanyCode, tMembers.BranchCode  
     , tMembers.EmployeeID, tMembers.TeamID  
    from PmMstTeamMembers tMembers, #TempSH sHeads  
    where   
     tMembers.CompanyCode = sHeads.CompanyCode   
     and tMembers.BranchCode = sHeads.BranchCode  
     and tMembers.EmployeeID = sHeads.EmployeeID   
     and tMembers.IsSupervisor != 1) tMembersCoord   
   where tMembersHead.CompanyCode = tMembersCoord.CompanyCode  
    and tMembersHead.BranchCode = tMembersCoord.BranchCode  
    and tMembershead.TeamID = tMembersCoord.TeamID  
    and tMembersHead.IsSupervisor = 1) tempBM  
  where tempBM.CompanyCode = tempSH.CompanyCode  
   and tempBM.BranchCode = tempSH.BranchCode  
   and tempBM.EmployeeID = tempSH.EmployeeID  
  group by tempBM.CompanyCode, tempBM.BranchCode, tempBM.SpvEmployeeID  
 ) #TempBM 
 
 select   
  inc, initial, CompanyCode, BranchCode, EmployeeID, EmployeeName  
  , case cast(Jan as varchar) when '0' then '-' else cast(Jan as varchar) end Jan  
  , case cast(Feb as varchar) when '0' then '-' else cast(Feb as varchar) end Feb  
  , case cast(Mar as varchar) when '0' then '-' else cast(Mar as varchar) end Mar  
  , case cast(Apr as varchar) when '0' then '-' else cast(Apr as varchar) end Apr  
  , case cast(May as varchar) when '0' then '-' else cast(May as varchar) end May  
  , case cast(Jun as varchar) when '0' then '-' else cast(Jun as varchar) end Jun  
  , case cast(Jul as varchar) when '0' then '-' else cast(Jul as varchar) end Jul  
  , case cast(Aug as varchar) when '0' then '-' else cast(Aug as varchar) end Aug  
  , case cast(Sep as varchar) when '0' then '-' else cast(Sep as varchar) end Sep  
  , case cast(Oct as varchar) when '0' then '-' else cast(Oct as varchar) end Oct  
  , case cast(Nov as varchar) when '0' then '-' else cast(Nov as varchar) end Nov  
  , case cast(Dec as varchar) when '0' then '-' else cast(Dec as varchar) end Dec  
  , case cast(Sem1 as varchar) when '0' then '-' else cast(Sem1 as varchar) end Sem1  
  , case cast(Sem2 as varchar) when '0' then '-' else cast(Sem2 as varchar) end Sem2  
  , case cast(Total as varchar) when '0' then '-' else cast(Total as varchar) end Total  
 from (  
  select    
   '1' inc, 'Salesman' initial, tempSM.CompanyCode, tempSM.BranchCode, tempSM.EmployeeID  
   , emp.EmployeeName, tempSM.Jan, tempSM.Feb, tempSM.Mar, tempSM.Apr, tempSM.May, tempSM.Jun  
   , tempSM.Jul, tempSM.Aug, tempSM.Sep, tempSM.Oct, tempSM.Nov, tempSM.Dec  
   , (tempSM.Jan + tempSM.Feb + tempSM.Mar + tempSM.Apr + tempSM.May + tempSM.Jun) Sem1  
   , (tempSM.Jul + tempSM.Aug + tempSM.Sep + tempSM.Oct + tempSM.Nov+ tempSM.Dec) Sem2  
   , (tempSM.Jan + tempSM.Feb + tempSM.Mar + tempSM.Apr + tempSM.May + tempSM.Jun  
    + tempSM.Jul + tempSM.Aug + tempSM.Sep + tempSM.Oct + tempSM.Nov  
    + tempSM.Dec) Total  
  from   
   #TempSM tempSM  
    left join HrEmployee emp on tempSM.CompanyCode = emp.CompanyCode  
     and tempSM.EmployeeID = emp.EmployeeID  
    
  union  
  -- Sales Coordinator -------   
  select    
   '2' inc, 'Sales Coordinator' initial, TempSC.CompanyCode, TempSC.BranchCode, TempSC.EmployeeID, emp.EmployeeName  
   , TempSC.Jan, TempSC.Feb, TempSC.Mar, TempSC.Apr, TempSC.May, TempSC.Jun  
   , TempSC.Jul, TempSC.Aug, TempSC.Sep, TempSC.Oct, TempSC.Nov, TempSC.Dec  
   , (TempSC.Jan + TempSC.Feb + TempSC.Mar + TempSC.Apr + TempSC.May + TempSC.Jun) Sem1  
   , (TempSC.Jul + TempSC.Aug + TempSC.Sep + TempSC.Oct + TempSC.Nov+ TempSC.Dec) Sem2  
   , (TempSC.Jan + TempSC.Feb + TempSC.Mar + TempSC.Apr + TempSC.May + TempSC.Jun  
    + TempSC.Jul + TempSC.Aug + TempSC.Sep + TempSC.Oct + TempSC.Nov  
    + TempSC.Dec) Total  
  from   
   #TempSC TempSC  
    left join HrEmployee emp on TempSC.CompanyCode = emp.CompanyCode  
     and TempSC.EmployeeID = emp.EmployeeID  
    
  union  
  -- Sales Head -------   
  select    
   '3' inc, 'Sales Head' initial, TempSH.CompanyCode, TempSH.BranchCode, TempSH.EmployeeID, emp.EmployeeName  
   , TempSH.Jan, TempSH.Feb, TempSH.Mar, TempSH.Apr, TempSH.May, TempSH.Jun  
   , TempSH.Jul, TempSH.Aug, TempSH.Sep, TempSH.Oct, TempSH.Nov, TempSH.Dec  
   , (TempSH.Jan + TempSH.Feb + TempSH.Mar + TempSH.Apr + TempSH.May + TempSH.Jun) Sem1  
   , (TempSH.Jul + TempSH.Aug + TempSH.Sep + TempSH.Oct + TempSH.Nov+ TempSH.Dec) Sem2  
   , (TempSH.Jan + TempSH.Feb + TempSH.Mar + TempSH.Apr + TempSH.May + TempSH.Jun  
    + TempSH.Jul + TempSH.Aug + TempSH.Sep + TempSH.Oct + TempSH.Nov  
    + TempSH.Dec) Total  
  from   
   #TempSH TempSH  
    left join HrEmployee emp on TempSH.CompanyCode = emp.CompanyCode  
     and TempSH.EmployeeID = emp.EmployeeID  
    
  union  
  -- Branch Manager -------  
  select    
   '4' inc, 'Branch Manager' initial, TempBM.CompanyCode, TempBM.BranchCode, TempBM.EmployeeID, emp.EmployeeName  
   , TempBM.Jan, TempBM.Feb, TempBM.Mar, TempBM.Apr, TempBM.May, TempBM.Jun  
   , TempBM.Jul, TempBM.Aug, TempBM.Sep, TempBM.Oct, TempBM.Nov, TempBM.Dec  
   , (TempBM.Jan + TempBM.Feb + TempBM.Mar + TempBM.Apr + TempBM.May + TempBM.Jun) Sem1  
   , (TempBM.Jul + TempBM.Aug + TempBM.Sep + TempBM.Oct + TempBM.Nov+ TempBM.Dec) Sem2  
   , (TempBM.Jan + TempBM.Feb + TempBM.Mar + TempBM.Apr + TempBM.May + TempBM.Jun  
    + TempBM.Jul + TempBM.Aug + TempBM.Sep + TempBM.Oct + TempBM.Nov  
    + TempBM.Dec) Total  
  from   
   #TempBM TempBM  
    left join HrEmployee emp on TempBM.CompanyCode = emp.CompanyCode  
     and TempBM.EmployeeID = emp.EmployeeID  
 ) SASalesman order by SASalesman.inc--, SASalesman.EmployeeName 
 
 DROP TABLE #ListOfSalesman
 DROP TABLE #TempBM
 DROP TABLE #TempSH
 DROP TABLE #TempSM
 DROP TABLE #TempSC
 
 end
GO
create procedure [dbo].[uspfn_SOLkuColourModelList]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(35),
	@SalesModelCode varchar(35),
	@SalesModelYear decimal
as

begin
	select a.*
	     , b.SalesModelDesc
		 , (
				SELECT b.RefferenceDesc1
				  FROM omMstRefference b
				 WHERE b.RefferenceCode = a.ColourCode
				   AND b.CompanyCode = a.CompanyCode 
				   AND b.RefferenceType = 'COLO'
		   ) AS ColourDesc
	  from OmTrSalesSOModelColour a
	  inner join omMstModelYear b
      	on b.CompanyCode = a.CompanyCode 
	   and b.SalesModelCode = a.SalesModelCode
	   and b.SalesModelYear = a.SalesModelYear
	   and b.Status in ('1', '2') 
	 --inner join OmMstModelColour c
	 --   on c.CompanyCode = a.CompanyCode
	 --  and c.SalesModelCode = b.SalesModelCode
	 --  and c.ColourCode = a.ColourCode 
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and a.SONo = @SONumber
	   and a.SalesModelCode = @SalesModelCode
	   and a.SalesModelYear = @SalesModelYear
end
GO
CREATE procedure [dbo].[uspfn_spSelectPickingSlip] 
@CompanyCode varchar(15), @BranchCode varchar(15), 
@ProductType varchar(4), @JobOrderNo varchar(25)
as
SELECT * INTO #t1 FROM (
SELECT
    DISTINCT c.DocNo, c.DocDate, d.PickingSlipNo, e.PartNo, e.PartNo PartNoOri, e.QtySupply, 
    e.QtyPicked, e.QtyBill, d.Status, f.LookUpValueName TransTypeDesc, c.TransType, g.LmpNo,
    d.PickedBy
FROM
    svTrnService a
LEFT JOIN svTrnSrvItem b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode 
    AND b.ProductType = a.ProductType AND b.ServiceNo=a.ServiceNo
LEFT JOIN spTrnSOrdHdr c ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode 
    AND c.DocNo = b.SupplySlipNo
LEFT JOIN spTrnSPickingHdr d ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode 
    AND d.PickingSlipNo = c.ExPickingSlipNo
LEFT JOIN spTrnSPickingDtl e ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode 
    AND e.PickingSlipNo = d.PickingSlipNo
LEFT JOIN gnMstLookUpDtl f ON f.CompanyCode = a.CompanyCode AND f.CodeId = 'TTSR' 
    AND f.LookUpValue = c.TransType
LEFT JOIN spTrnSLmpHdr g ON g.CompanyCode = a.CompanyCode AND g.BranchCode = a.BranchCode 
    AND g.PickingSlipNo = d.PickingSlipNo
WHERE 
    a.CompanyCode     = @CompanyCode
    AND a.BranchCode  = @BranchCode
    AND a.ProductType = @ProductType
    AND a.jobOrderNo  = @JobOrderNo
    AND b.SupplySlipNo <> ''
    AND b.PartSeq = (SELECT MAX(PartSeq) FROM SvTrnSrvItem WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode
           AND ProductType = @ProductType AND ServiceNo = a.ServiceNo AND PartNo = b.PartNo)
    AND d.Status < 2
)#t1
SELECT Row_number() OVER(ORDER BY DocNo) No, * FROM #t1
DROP TABLE #t1
GO
CREATE PROCEDURE [dbo].[sp_SpSOSelectforEntry]   
@CompanyCode varchar(15),  
@BranchCode varchar(15),   
@ProductType  varchar(15),
@WarehouseCode  varchar(15)   

AS  
 SELECT
 distinct
	    a.PartNo,
	    (SELECT PartName FROM spMstItemInfo WHERE CompanyCode = a.CompanyCode AND PartNo = a.PartNo) AS PartName
    FROM
	    spMstItems a
        INNER JOIN spMstItemLoc b ON a.CompanyCode = b.CompanyCode
            AND a.BranchCode = b.BranchCode
            AND a.PartNo = b.PartNo
    WHERE
	    a.CompanyCode = @CompanyCode
	    AND a.BranchCode = @BranchCode	
	    AND a.ProductType = @ProductType
        AND b.WarehouseCode = @WarehouseCode
    ORDER BY
        PartNo ASC
GO
create procedure [dbo].[uspfn_UpdateLookupMapping]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..HrLookupMapping a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrLookupMapping (
		   CompanyCode
		 , CodeID
		 , CodeDescription
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.CodeID
	     , a.CodeDescription
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_TaxCheckPendingDocument]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @IsFPJCentral  = '1'

AS
BEGIN
SELECT InvoiceNo , InvoiceDate 
FROM OmTrSalesInvoice 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		)
	AND isStandard = '1' 
	AND isnull ( FakturPajakNo , '' ) = '' 
	AND Status <> '3' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 
EXCEPT 
SELECT InvoiceNo , InvoiceDate 
FROM OmFakturPajakHdr 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		)
	AND TaxType = 'Standard' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 

UNION 

SELECT InvoiceNo , InvoiceDate 
FROM ARTrnInvoiceHdr 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		) 
	AND StatusTax = '1' 
	AND isnull ( FPJNo , '' ) = '' 
	AND Status <> '1' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 
EXCEPT 
SELECT InvoiceNo , InvoiceDate 
FROM ARFakturPajakHdr 
WHERE CompanyCode = @CompanyCode 
	AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		)
	AND TaxType = 'Standard' 
	AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate
END
GO
create procedure [dbo].[uspfn_SyncCsCustomerViewInitialize]
as
begin
	;with x as (
	select a.CompanyCode
		 , BranchCode = isnull((
			select top 1 BranchCode from OmTrSalesSo
			 where CompanyCode = a.CompanyCode
			  and CustomerCode = a.CustomerCode
			order by SODate desc), '')
		 , a.CustomerCode
		 , a.CustomerName
		 , a.CustomerType
		 , rtrim(a.Address1) + ' ' + rtrim(a.Address2) + rtrim(a.Address3) as Address
		 , a.PhoneNo
		 , a.HPNo
		 , b.AddPhone1
		 , b.AddPhone2
		 , a.BirthDate
		 , b.ReligionCode
		 , a.CreatedDate
		 , a.LastUpdateDate
	  from GnMstCustomer a
	  left join CsCustData b
		on b.CompanyCode = a.CompanyCode
	   and b.CustomerCode = a.CustomerCode
	 where 1 = 1
	   and a.CustomerType = 'I'
	   and a.BirthDate is not null
	   and a.BirthDate > '1900-01-01'
	   and (year(getdate() - year(a.BirthDate))) > 5
	   and year(a.LastUpdateDate) = year(getdate())
	)
	select * into #t1 from (select * from x where BranchCode != '')#

--	delete CsCustomerView
--	 where exists (
--		select top 1 1 from #t1
--		 where #t1.CompanyCode = CsCustomerView.CompanyCode
--		   and #t1.BranchCode = CsCustomerView.BranchCode
--		   and #t1.CustomerCode = CsCustomerView.CustomerCode
--	 )
--	insert into CsCustomerView (CompanyCode, BranchCode, CustomerCode, CustomerName, CustomerType, Address, PhoneNo, HPNo, AddPhone1, AddPhone2, BirthDate, ReligionCode, CreatedDate, LastUpdateDate)
--	select * from #t1

--	drop table CsCustomerView
	select * into CsCustomerView from #t1


	drop table #t1
end
GO
create procedure [dbo].[sp_SpPosLkp]
@CompanyCode varchar(15),  
@BranchCode varchar(15),   
@TypeOfGoods  varchar(15)
as

SELECT 
 a.POSNo
,a.PosDate
,ISNULL(a.IsDeleted, 0) IsDeleted
,a.SupplierCode
,b.SupplierName
FROM spTrnPPOSHdr a
INNER JOIN gnMstSupplier b ON b.SupplierCode = a.SupplierCode and b.CompanyCode = a.CompanyCode
WHERE a.CompanyCode=@CompanyCode 
	  AND a.BranchCode=@BranchCode
      AND a.IsDeleted=0 
      AND TypeOfGoods = @TypeOfGoods
ORDER BY a.POSNo ASC
GO
CREATE procedure [dbo].[uspfn_itsinqAchievementSalesType]
(  
 @CompanyCode  VARCHAR(15),  
 @BMEmployeeID  VARCHAR(15),  
 @SHEmployeeID  VARCHAR(15),  
 @SCEmployeeID  VARCHAR(15),  
 @SMEmployeeID  VARCHAR(15),  
 @Year    INT  
)  
AS  
BEGIN  

-- declare @CompanyCode  VARCHAR(15)  
-- SET @CompanyCode = '6006406'
-- declare @BMEmployeeID  VARCHAR(15)
-- SET @BMEmployeeID = '%'  
-- declare @SHEmployeeID  VARCHAR(15) 
-- SET @SHEmployeeID = '%' 
-- declare @SCEmployeeID  VARCHAR(15)
-- SET @SCEmployeeID = '%'  
-- declare @SMEmployeeID  VARCHAR(15)
-- SET @SMEmployeeID ='%'
-- DECLARE  @Year    INT  
-- SET @Year = 2013

 select * into #ListOfSalesman from (  
  select tmSalesman.CompanyCode, tmSalesman.BranchCode  
   , tmSalesman.EmployeeID, tmSalesman.TeamID   
   , tmSalesman.IsSupervisor    
  from   
   PmMstTeamMembers tmSalesman,  
   (  
    -- Sales Coordinator ---  
    select tmSalesmanTemp.CompanyCode, tmSalesmanTemp.BranchCode  
     , tmSalesmanTemp.EmployeeID, tmSalesmanTemp.TeamID   
     , tmSalesmanTemp.IsSupervisor   
    from   
     PmMstTeamMembers tmSalesmanTemp,  
     (  
      -- Team Members of Sales Head ----------  
      select tmSC.CompanyCode, tmSC.BranchCode  
       , tmSC.EmployeeID, tmSC.TeamID , tmSC.IsSupervisor   
      from   
       PmMstTeamMembers tmSC,   
       (  
        -- Sales Head ----------  
        select tmSH.CompanyCode, tmSH.BranchCode  
         , tmSH.EmployeeID, tmSH.TeamID , tmSH.IsSupervisor  
        from   
         PmMstTeamMembers tmSH,   
         (  
          -- Team Members of Branch Manager -----  
          select tmSHTemp.CompanyCode, tmSHTemp.BranchCode  
           , tmSHTemp.EmployeeID, tmSHTemp.TeamID, tmBM.IsSupervisor  
          from   
           PmMstTeamMembers tmSHTemp, (  
            -- Branch Manager --  
            select tmBM.CompanyCode, tmBM.BranchCode, tmBM.IsSupervisor  
             ,tmBM.EmployeeID, tmBM.TeamID  
            from PmMstTeamMembers tmBM  
             inner join PmPosition posBM on tmBM.CompanyCode = posBM.CompanyCode  
              and tmBM.EmployeeID = posBM.EmployeeID and posBM.PositionID = 40   
            where tmBM.CompanyCode = @CompanyCode and tmBM.EmployeeID like @BMEmployeeID -- employeeID of Branch Manager  
            --------------------  
           ) tmBM  
          where   
           tmBM.CompanyCode = tmSHTemp.CompanyCode   
           and tmBM.BranchCode = tmSHTemp.BranchCode  
           and tmBM.TeamID = tmSHTemp.TeamID   
           and tmSHTemp.IsSupervisor != 1   
           and tmSHTemp.EmployeeID like @SHEmployeeID -- employeeID of SalesHead  
          ----------------------------------------  
         ) tmSHTemp_NotSup  
        where tmSH.CompanyCode = tmSHTemp_NotSup.CompanyCode   
         and tmSH.BranchCode = tmSHTemp_NotSup.BranchCode  
         and tmSH.EmployeeID = tmSHTemp_NotSup.EmployeeID  
         and tmSH.IsSupervisor = 1  
        ---------------------------------  
       ) tmSCTemp  
      where  
       tmSC.CompanyCode = tmSCTemp.CompanyCode   
       and tmSC.BranchCode = tmSCTemp.BranchCode  
       and tmSC.TeamID = tmSCTemp.TeamID  
       and tmSC.IsSupervisor != 1  
       and tmSC.EmployeeID like @SCEmployeeID -- EmployeeID of Sales Coordinator  
      --------------------------------  
     )tmSCTemp_NotSup  
    where tmSalesmanTemp.CompanyCode = tmSCTemp_NotSup.CompanyCode   
     and tmSalesmanTemp.BranchCode = tmSCTemp_NotSup.BranchCode  
     and tmSalesmanTemp.EmployeeID = tmSCTemp_NotSup.EmployeeID  
     and tmSalesmanTemp.IsSupervisor = 1  
    --------------  
   ) tmSalesmanTemp  
  where  
   tmSalesman.CompanyCode = tmSalesmanTemp.CompanyCode   
   and tmSalesman.BranchCode = tmSalesmanTemp.BranchCode  
   and tmSalesman.TeamID = tmSalesmanTemp.TeamID  
   and tmSalesman.IsSupervisor != 1  
   and tmSalesman.EmployeeID like @SMEmployeeID -- EmployeeID of Salesman  
 ) #ListOfSalesman  
 
  select * into #ST from (  
  select CompanyCode, '' BranchCode, TypeOf1, TypeOf2  
   , isnull(Jan, 0) Jan, isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May, isnull(Jun, 0) Jun  
   , isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep, isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec  
  from (  
   select kdp.CompanyCode, '' BranchCode, kdp.TipeKendaraan TypeOf1, kdp.Variant TypeOf2  
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth  
    , count(kdp.EmployeeID) InquiryCount  
   from PmKDP kdp  
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year  
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)        
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)       
   group by kdp.CompanyCode, kdp.TipeKendaraan, kdp.Variant   
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)) as Header  
  pivot  
  (  
   sum(InquiryCount)  
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  
  ) pvt  
 ) #ST 

select    
   '2' inc, 'Sales by Type' initial, tempST.CompanyCode, tempST.BranchCode, GTS.GroupCode, GTS.typeCode-- tempST.TypeOf1, tempST.TypeOf2  
   , isnull(tempST.Jan, 0) Jan, isnull(tempST.Feb, 0) Feb, isnull(tempST.Mar, 0) Mar  
   , isnull(tempST.Apr, 0) Apr, isnull(tempST.May, 0) May, isnull(tempST.Jun, 0) Jun  
   , isnull(tempST.Jul, 0) Jul, isnull(tempST.Aug, 0) Aug, isnull(tempST.Sep, 0) Sep  
   , isnull(tempST.Oct, 0) Oct, isnull(tempST.Nov, 0) Nov, isnull(tempST.Dec, 0) Dec  
   , isnull((tempST.Jan + tempST.Feb + tempST.Mar + tempST.Apr + tempST.May + tempST.Jun), 0) Sem1  
   , isnull((tempST.Jul + tempST.Aug + tempST.Sep + tempST.Oct + tempST.Nov+ tempST.Dec), 0) Sem2  
   , isnull((tempST.Jan + tempST.Feb + tempST.Mar + tempST.Apr + tempST.May + tempST.Jun  
    + tempST.Jul + tempST.Aug + tempST.Sep + tempST.Oct + tempST.Nov  
    + tempST.Dec), 0) Total  
  from   
   (select Distinct CompanyCode, GroupCode, TypeCode    
   from pmGroupTypeSeq   
   group by CompanyCode, GroupCode ,typeCode) GTS  
    left join #ST tempST on GTS.CompanyCode = tempST.CompanyCode and GTS.GroupCode = tempST.TypeOf1 and GTS.TypeCode = tempST.TypeOf2  
       

DROP TABLE #ListOfSalesman
DROP TABLE #ST

end
GO
CREATE procedure [dbo].[sp_SpReceiveClaimNo] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TypeOfGoods varchar(10))

as
SELECT DISTINCT a.CompanyCode, a.BranchCode, a.ClaimNo
,a.ClaimDate , TypeOfGoods            
FROM spTrnPClaimHdr a
INNER JOIN spTrnPClaimDtl b ON b.CompanyCode = a.CompanyCode
AND b.BranchCode = a.BranchCode
AND b.ClaimNo = a.ClaimNo
WHERE a.CompanyCode = @CompanyCode
AND a.BranchCode = @BranchCode   
AND a.Status = '2'
AND a.TypeOfGoods = @TypeOfGoods
AND 
(SELECT ISNULL(SUM(OvertageQty) + SUM(ShortageQty) + SUM(DemageQty) + SUM(WrongQty),0) FROM spTrnPClaimDtl 
WHERE CompanyCode =  @CompanyCode
AND BranchCode = @BranchCode   
AND ClaimNo = a.ClaimNo) >
(SELECT  ISNULL(SUM(c.RcvOvertageQty) + SUM(c.RcvShortageQty) + SUM(c.RcvDamageQty) + SUM(c.RcvWrongQty),0) FROM spTrnPRcvClaimDtl c
INNER JOIN spTrnPRcvClaimHdr b ON c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode AND c.ClaimNo = b.ClaimNo AND c.ClaimReceivedNo = b.ClaimReceivedNo
WHERE c.CompanyCode =  @CompanyCode
AND c.BranchCode = @BranchCode   
AND c.ClaimNo = a.ClaimNo AND b.Status NOT IN (3))
ORDER BY a.ClaimNo DESC
GO
create procedure [dbo].[uspfn_UpdateHoliday]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..HrHoliday a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrHoliday (
		   CompanyCode
		 , HolidayYear
		 , HolidayCode
		 , HolidayDesc
		 , DateFrom
		 , DateTo
		 , IsHoliday
		 , ReligionCode
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.HolidayYear
	     , a.HolidayCode
	     , a.HolidayDesc
	     , a.DateFrom
	     , a.DateTo
	     , a.IsHoliday
	     , a.ReligionCode
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_TaxCheckPendingDocumentFPJ]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@IsFPJCentral bit,
@DocNo varchar(max)

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit
--declare @DocNo as varchar(max)

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @IsFPJCentral  = '1'
--set @DocNo = ''

as
begin
select x.*
from(
    SELECT	BranchCode,InvoiceNo, convert(varchar,InvoiceDate,112) InvoiceDate
    FROM	OmFakturPajakHdr
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND TaxType = 'Standard'
		    AND CONVERT(VARCHAR, InvoiceDate, 112) >= @StartDate AND CONVERT(VARCHAR, InvoiceDate, 112) < @FPJDate
	    UNION
    SELECT	BranchCode,InvoiceNo, convert(varchar,InvoiceDate,112) InvoiceDate
    FROM	ARFakturPajakHdr
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND TaxType = 'Standard'
		    AND CONVERT(VARCHAR, InvoiceDate, 112) >= @StartDate AND CONVERT(VARCHAR, InvoiceDate, 112) < @FPJDate
	    UNION
    SELECT	BranchCode,InvoiceNo, convert(varchar,InvoiceDate,112) InvoiceDate
    FROM	SPTrnSFPJHdr
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND isPKP = 1
		    AND CONVERT(VARCHAR, InvoiceDate, 112) >= @StartDate AND CONVERT(VARCHAR, InvoiceDate, 112) < @FPJDate
	    UNION
    SELECT	BranchCode,FPJNO AS  InvoiceNo, convert(varchar,FPJDate,112) AS InvoiceDate 
    FROM	SVTrnFakturPajak
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
			AND isPKP = 1
		    AND CONVERT(VARCHAR, FPJDate, 112) >= @StartDate AND CONVERT(VARCHAR, FPJDate, 112) < @FPJDate
		    AND (select TOP 1 TotalSrvAmt 
				   from svTrnInvoice 
				  where CompanyCode = @CompanyCode 
				    AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
							or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
							) 
					and FPJNo = SVTrnFakturPajak.FPJNo) <> 0
    EXCEPT
    SELECT	BranchCode,DocNo AS InvoiceNo, convert(varchar,DocDate,112) AS InvoiceDate 
    FROM	GnGenerateTax
    WHERE	CompanyCode = @CompanyCode 
			AND ((case when @IsFPJCentral = 'True' then BranchCode end) <> ''
				or (case when @IsFPJCentral = 'False' then BranchCode end) in (@BranchCode)
			)
		    AND CONVERT(VARCHAR, DocDate, 112) >= @StartDate AND CONVERT(VARCHAR, DocDate, 112) < @FPJDate
) x
where (case when @DocNo != '' then @DocNo else '' end) not like '%|'+x.BranchCode+' '+x.InvoiceNo+'|%'
end
GO
create procedure [dbo].[uspfn_UpdateHRSetting]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..HrSetting a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrSetting (
		   Name
		 , Value
		 , IsDeleted
		 )
	select a.Name
	     , a.Value
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_CRUDCustBdayResource]
	@CompanyCode varchar(13),
	@CustomerCode varchar(13)
as
begin

	delete from CsLkuBirthdayView
	 where CompanyCode = @CompanyCode
       and CustomerCode = @CustomerCode

	if object_id('.#1') is not null
		drop table #1;

	with x as (
			select * 
			  from CsLkuBirthdayViewSource a
			 where a.CompanyCode = @CompanyCode
			   and a.CustomerCode = @CustomerCode
		)
	select * into #1
	  from x;

	insert into CsLkuBirthdayView
	select * from #1;
end
GO
CREATE procedure [dbo].[uspfn_spCustSOPickListNewOrder]   
--DECLARE
@CompanyCode varchar(15),  
@BranchCode varchar(15),  
@ProfitCenterCode varchar(3),  
@TypeOfGoods varchar(2)  
as  
--SET @CompanyCode = '6006410'
--SET @BranchCode = '600641001'
----SET @ProfitCenterCode = '000' --
--SET @TypeOfGoods = '0'
SELECT x.CustomerCode,  
                    (  
                     SELECT c.CustomerName   
                     FROM gnMstCustomer c with(nolock, nowait)  
                     where  c.CompanyCode=x.CompanyCode  
                     AND c.CustomerCode= x.CustomerCode   
                     AND c.CustomerCode=x.CustomerCode  
                    ) AS CustomerName,  
                    (  
                     SELECT c.Address1+' '+c.Address2+' '+c.Address3+' '+c.Address4   
                     FROM gnMstCustomer c with(nolock, nowait)  
                     where  c.CompanyCode=x.CompanyCode  
                     AND c.CustomerCode= x.CustomerCode   
                     AND c.CustomerCode=x.CustomerCode  
  
                    ) as Address  
                    , z.LookUpValueName as ProfitCenter  
                    FROM   
                    (  
                     SELECT DISTINCT a.CompanyCode, a.BranchCode,  
                     b.CustomerCode   
                     FROM spTrnSOSupply a WITH(nolock, nowait) INNER JOIN   
                        spTrnSOrdHdr b ON a.CompanyCode=b.CompanyCode  
                     and a.BranchCode=b.BranchCode  
                     and a.DocNo=b.DocNo  
                        and b.TypeOfGoods=@TypeOfGoods  
                     WHERE pickingslipno = ''  
                    ) x   
                    INNER JOIN gnMstCustomerProfitCenter y WITH(nolock, nowait)  
                    ON y.CompanyCode = x.CompanyCode   
                       AND y.BranchCode = x.BranchCode  
                       AND y.CustomerCode = x.CustomerCode  
                    INNER JOIN gnMstLookUpDtl z WITH(nolock, nowait)  
                    ON z.CompanyCode= x.CompanyCode  
                       AND z.CodeID='PFCN'  
                       AND z.LookupValue=y.ProfitCenterCode  
                    WHERE x.CompanyCode=@CompanyCode  
                        AND x.BranchCode=@BranchCode  
                       AND y.ProfitCenterCode=@ProfitCenterCode
GO
-- =============================================
-- Author:		<yo>
-- Create date: <5 Agust 14>
-- Description:	<Query FPJ Generated>
-- =============================================

CREATE procedure [dbo].[uspfn_TaxQueryFPJGenerated]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@ProfitCenter varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @ProfitCenter  = '300'
--set @IsFPJCentral  = '1'

as
begin

select 
    y.No,y.chkSelect,y.CompanyCode,y.BranchCode,y.ProfitCenter,y.FPJGovNo
    ,isnull(y.FPJGovDate,'')FPJGovDate,y.DocNo, convert(varchar, convert(datetime,y.DocDate), 106) DocDate
from(
    select 
        row_number() over(order by DocDate, BranchCode,ProfitCenter asc) as No
        , Convert(bit, 0) chkSelect, x.CompanyCode, x.BranchCode
        , a.LookUpValueName ProfitCenter, x.FPJGovNo, x.FPJGovDate
        , x.DocNo, x.DocDate
    from (
	    SELECT	CompanyCode, BranchCode,'300' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	SpTrnSFPJHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 
                AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'200' AS ProfitCenter,FPJGovNo
			    ,NULL AS FPJGovDate,FPJNo as DocNo,convert(varchar,FPJDate,112) AS DocDate
	    FROM	SvTrnFakturPajak
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND isPKP = 1 AND ISNULL(FPJGovNo, '') = ''
			    AND CONVERT(VARCHAR, FPJDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'100' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	OmFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        ) 
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
	    UNION
	    SELECT	CompanyCode, BranchCode,'000' AS ProfitCenter,FakturPajakNo FPJGovNo
			    ,NULL AS FPJGovDate,InvoiceNo as DocNo,convert(varchar,InvoiceDate,112) AS DocDate
	    FROM	ArFakturPajakHdr
	    WHERE	CompanyCode = @CompanyCode 
                AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
			        or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
		        )
                AND TaxType = 'Standard' AND ISNULL(FakturPajakNo, '') = ''
			    AND CONVERT(VARCHAR, InvoiceDate, 112) BETWEEN @StartDate AND @FPJDate
                AND DPPAMt > 0
    ) x 
    left join gnMstLookUpDtl a on a.CompanyCode= x.CompanyCode and a.CodeID='PFCN' and a.LookUpValue= x.ProfitCenter
    where x.ProfitCenter like ''+@ProfitCenter+''
) y
end
GO
CREATE procedure [dbo].[sp_SpSOSelectforLookup] (  @CompanyCode varchar(10) ,@BranchCode varchar(10))  
 as  
select distinct(a.STNo)  
  , b.WarehouseCode  
  , b.STHdrNo  
  --, a.PartNo  
  from spTrnStockTakingTemp a with(nolock, nowait)  
       left join spTrnStockTakingHdr b with(nolock, nowait) on a.CompanyCode = b.CompanyCode  
   and a.Branchcode = b.Branchcode   
   and a.STHdrNo = b.STHdrNo   
 where a.status IN ('0', '1')  
   and b.status < 2  
   and a.CompanyCode = @CompanyCode  
   and a.Branchcode = @BranchCode
GO
CREATE Procedure [dbo].[uspfn_itsinqfollowup2]
(        
 @CompanyCode VARCHAR(15),        
 @BranchCode  VARCHAR(15),        
 @DateAwal  VARCHAR(10),        
 @DateAkhir  VARCHAR(10),        
 @Outlet   VARCHAR(max),        
 @SPV   VARCHAR(max),        
 @EMP   VARCHAR(max),           
 @Head   VARCHAR(max)        
)        
AS        
BEGIN        
    
--declare @CompanyCode VARCHAR(15)    
--SET @CompanyCode = '6006406'    
--declare @BranchCode  VARCHAR(15)    
--SET @BranchCode = '6006406'    
--declare @DateAwal  VARCHAR(10)        
--SET @DateAwal = '20100101'    
--declare @DateAkhir  VARCHAR(10)      
--SET @DateAkhir ='20140117'    
--declare @Outlet   VARCHAR(max)        
--SET @Outlet = '0601'    
--declare @SPV   VARCHAR(max)        
--SET @SPV ='50438'    
--declare @EMP   VARCHAR(max)        
--SET @EMP = '52153'    
--declare @Head   VARCHAR(max)        
--SET @Head = ''    
   
 

SELECT * INTO #t1 FROM (
SELECT
    f.OutletName, a.InquiryNumber, a.NamaProspek Pelanggan, a.InquiryDate, a.TipeKendaraan,
    a.Variant, a.Transmisi, b.RefferenceDesc1 Warna, a.PerolehanData,
    Emp1.EmployeeName Employee, Emp2.EmployeeName Supervisor, e.NextFollowUpDate, a.LastProgress, e.ActivityDetail, a.SpvEmployeeId
FROM
    PmKDP a
LEFT JOIN OmMstRefference b
    ON b.CompanyCode = a.CompanyCode AND b.RefferenceType='COLO' AND b.RefferenceCode=a.ColourCode
left join HrEmployee emp1 on emp1.CompanyCode = a.CompanyCode  
     and emp1.EmployeeID = a.EmployeeID  
--LEFT JOIN GnMstEmployee c
--    ON c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.EmployeeID = a.EmployeeID
left join HrEmployee emp2 on a.CompanyCode = emp2.CompanyCode  
     and a.EmployeeID = emp2.EmployeeID  
--LEFT JOIN GnMstEmployee d
--    ON d.CompanyCode = a.CompanyCode AND d.BranchCode = a.BranchCode AND d.EmployeeID = a.SpvEmployeeID
LEFT JOIN PmActivities e
    ON e.CompanyCode = a.CompanyCode AND e.BranchCode = a.BranchCode AND e.InquiryNumber=a.InquiryNumber
    AND e.ActivityID = (SELECT TOP 1 ActivityID FROM PmActivities WHERE CompanyCode = a.CompanyCode 
	AND BranchCode = a.BranchCode AND InquiryNumber=a.InquiryNumber ORDER BY ActivityID DESC) 
LEFT JOIN PmBranchOutlets f
	ON f.CompanyCode = a.CompanyCode AND f.BranchCode = a.BranchCode AND f.OutletID = a.OutletID

WHERE
    a.CompanyCode = @CompanyCode 
	AND ((CASE WHEN @BranchCode='' THEN a.BranchCode END)<>''OR (CASE WHEN @BranchCode<>'' THEN a.BranchCode END)=@BranchCode)
    AND CONVERT(VARCHAR, e.NextFollowUpDate, 112) BETWEEN @DateAwal AND @DateAkhir
    AND ((CASE WHEN @Outlet='' THEN a.OutletID END)<>'' OR (CASE WHEN @Outlet<>'' THEN a.OutletID END)=@Outlet)
    AND ((CASE WHEN @SPV='' THEN a.SpvEmployeeID END)<>'' OR (CASE WHEN @SPV<>'' THEN a.SpvEmployeeID END)=@SPV)
    AND ((CASE WHEN @EMP='' THEN a.EmployeeID END)<>'' OR (CASE WHEN @EMP<>'' THEN a.EmployeeID END)=@EMP)
) #t1

IF (@HEAD='')
BEGIN
    SELECT * FROM #t1 ORDER BY InquiryNumber 
END
ELSE
BEGIN
	declare @teamid varchar(max)
	set @teamid = (select teamid from pmmstteammembers where companycode=@CompanyCode 
		and branchcode=case @branchcode when '' then branchcode else @branchcode end
		and employeeid=@HEAD 
		and issupervisor='1')
	
	SELECT * FROM #t1 WHERE SpvEmployeeID IN (select employeeid from pmmstteammembers where companycode=@companycode 
		and branchcode=case @branchcode when '' then branchcode else @branchcode end
		and teamid=@teamid
		and issupervisor='0') 
	ORDER BY InquiryNumber 
END
DROP TABLE #t1
end
GO
CREATE procedure [dbo].[uspfn_itsinqAchievementProsStat]
(  
 @CompanyCode  VARCHAR(15),  
 @BMEmployeeID  VARCHAR(15),  
 @SHEmployeeID  VARCHAR(15),  
 @SCEmployeeID  VARCHAR(15),  
 @SMEmployeeID  VARCHAR(15),  
 @Year    INT  
)  
AS  
BEGIN  

--declare @CompanyCode  VARCHAR(15)  
--SET @CompanyCode = '6006406'
--declare @BMEmployeeID  VARCHAR(15)
--SET @BMEmployeeID = 'BM189'  
--declare @SHEmployeeID  VARCHAR(15) 
--SET @SHEmployeeID = '225' 
--declare @SCEmployeeID  VARCHAR(15)
--SET @SCEmployeeID = '50395'  
--declare @SMEmployeeID  VARCHAR(15)
--SET @SMEmployeeID ='%'
--DECLARE  @Year    INT  
--SET @Year = 2013

 select * into #ListOfSalesman from (  
  select tmSalesman.CompanyCode, tmSalesman.BranchCode  
   , tmSalesman.EmployeeID, tmSalesman.TeamID   
   , tmSalesman.IsSupervisor    
  from   
   PmMstTeamMembers tmSalesman,  
   (  
    -- Sales Coordinator ---  
    select tmSalesmanTemp.CompanyCode, tmSalesmanTemp.BranchCode  
     , tmSalesmanTemp.EmployeeID, tmSalesmanTemp.TeamID   
     , tmSalesmanTemp.IsSupervisor   
    from   
     PmMstTeamMembers tmSalesmanTemp,  
     (  
      -- Team Members of Sales Head ----------  
      select tmSC.CompanyCode, tmSC.BranchCode  
       , tmSC.EmployeeID, tmSC.TeamID , tmSC.IsSupervisor   
      from   
       PmMstTeamMembers tmSC,   
       (  
        -- Sales Head ----------  
        select tmSH.CompanyCode, tmSH.BranchCode  
         , tmSH.EmployeeID, tmSH.TeamID , tmSH.IsSupervisor  
        from   
         PmMstTeamMembers tmSH,   
         (  
          -- Team Members of Branch Manager -----  
          select tmSHTemp.CompanyCode, tmSHTemp.BranchCode  
           , tmSHTemp.EmployeeID, tmSHTemp.TeamID, tmBM.IsSupervisor  
          from   
           PmMstTeamMembers tmSHTemp, (  
            -- Branch Manager --  
            select tmBM.CompanyCode, tmBM.BranchCode, tmBM.IsSupervisor  
             ,tmBM.EmployeeID, tmBM.TeamID  
            from PmMstTeamMembers tmBM  
             inner join PmPosition posBM on tmBM.CompanyCode = posBM.CompanyCode  
              and tmBM.EmployeeID = posBM.EmployeeID and posBM.PositionID = 40   
            where tmBM.CompanyCode = @CompanyCode and tmBM.EmployeeID like @BMEmployeeID -- employeeID of Branch Manager  
            --------------------  
           ) tmBM  
          where   
           tmBM.CompanyCode = tmSHTemp.CompanyCode   
           and tmBM.BranchCode = tmSHTemp.BranchCode  
           and tmBM.TeamID = tmSHTemp.TeamID   
           and tmSHTemp.IsSupervisor != 1   
           and tmSHTemp.EmployeeID like @SHEmployeeID -- employeeID of SalesHead  
          ----------------------------------------  
         ) tmSHTemp_NotSup  
        where tmSH.CompanyCode = tmSHTemp_NotSup.CompanyCode   
         and tmSH.BranchCode = tmSHTemp_NotSup.BranchCode  
         and tmSH.EmployeeID = tmSHTemp_NotSup.EmployeeID  
         and tmSH.IsSupervisor = 1  
        ---------------------------------  
       ) tmSCTemp  
      where  
       tmSC.CompanyCode = tmSCTemp.CompanyCode   
       and tmSC.BranchCode = tmSCTemp.BranchCode  
       and tmSC.TeamID = tmSCTemp.TeamID  
       and tmSC.IsSupervisor != 1  
       and tmSC.EmployeeID like @SCEmployeeID -- EmployeeID of Sales Coordinator  
      --------------------------------  
     )tmSCTemp_NotSup  
    where tmSalesmanTemp.CompanyCode = tmSCTemp_NotSup.CompanyCode   
     and tmSalesmanTemp.BranchCode = tmSCTemp_NotSup.BranchCode  
     and tmSalesmanTemp.EmployeeID = tmSCTemp_NotSup.EmployeeID  
     and tmSalesmanTemp.IsSupervisor = 1  
    --------------  
   ) tmSalesmanTemp  
  where  
   tmSalesman.CompanyCode = tmSalesmanTemp.CompanyCode   
   and tmSalesman.BranchCode = tmSalesmanTemp.BranchCode  
   and tmSalesman.TeamID = tmSalesmanTemp.TeamID  
   and tmSalesman.IsSupervisor != 1  
   and tmSalesman.EmployeeID like @SMEmployeeID -- EmployeeID of Salesman  
 ) #ListOfSalesman 

 select * into #PS from (  
  select CompanyCode, '' BranchCode, TypeOf1, TypeOf2  
   , isnull(Jan, 0) Jan, isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May, isnull(Jun, 0) Jun  
   , isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep, isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec   
  from (  
   select kdp.CompanyCode, '' BranchCode, kdp.LastProgress TypeOf1, '' TypeOf2  
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth  
    , count(kdp.EmployeeID) InquiryCount  
   from PmKDP kdp  
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year   
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)        
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)        
   group by kdp.CompanyCode, kdp.BranchCode, kdp.LastProgress  
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)) as Header  
  pivot  
  (  
   sum(InquiryCount)  
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  
  ) pvt  
 ) #PS
 
select   
   '3' inc, 'Prospect Status' initial, tempPS.CompanyCode, tempPS.BranchCode, lkpDtl.LookUpValueName TypeOf1, tempPS.TypeOf2  
   , isnull(tempPS.Jan, 0) Jan, isnull(tempPS.Feb, 0) Feb, isnull(tempPS.Mar, 0) Mar  
   , isnull(tempPS.Apr, 0) Apr, isnull(tempPS.May, 0) May, isnull(tempPS.Jun, 0) Jun  
   , isnull(tempPS.Jul, 0) Jul, isnull(tempPS.Aug, 0) Aug, isnull(tempPS.Sep, 0) Sep  
   , isnull(tempPS.Oct, 0) Oct, isnull(tempPS.Nov, 0) Nov, isnull(tempPS.Dec, 0) Dec  
   , isnull((tempPS.Jan + tempPS.Feb + tempPS.Mar + tempPS.Apr + tempPS.May + tempPS.Jun), 0) Sem1  
   , isnull((tempPS.Jul + tempPS.Aug + tempPS.Sep + tempPS.Oct + tempPS.Nov+ tempPS.Dec), 0) Sem2  
   , isnull((tempPS.Jan + tempPS.Feb + tempPS.Mar + tempPS.Apr + tempPS.May + tempPS.Jun  
    + tempPS.Jul + tempPS.Aug + tempPS.Sep + tempPS.Oct + tempPS.Nov  
    + tempPS.Dec), 0) Total  
  from  
   GnMstLookUpDtl lkpDtl  
    left join #PS tempPS on lkpDtl.CompanyCode = tempPS.CompanyCode  
    and lkpDtl.LookUpValue = tempPS.TypeOf1   
  where lkpDtl.CodeID = 'PSTS' and lkpDtl.CompanyCode = @CompanyCode  
  
  
 DROP TABLE #ListOfSalesMan
 Drop TABLE #PS
 
 end
GO
create procedure [dbo].[uspfn_SelectWHDO]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(25)
as
begin
	SELECT Count(*) QtyDO
	     , a.WarehouseCode
		 , b.SalesModelCode
		 , b.SalesModelYear
		 , b.ColourCode
     FROM omTrSalesDO a
     INNER JOIN omTrSalesDODetail b
	    ON a.CompanyCode = b.CompanyCode
	   AND a.BranchCode = b.BranchCode
	   AND a.DONo = b.DONo
     WHERE a.CompanyCode = @CompanyCode
	   AND a.BranchCode = @BranchCode
	   AND a.SONo = @SONumber
	   AND a.Status = '2'
     Group By a.WarehouseCode, b.SalesModelCode, b.SalesModelYear, b.ColourCode
end
GO
create procedure [dbo].[uspfn_UpdateMasterTraining]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..HrMstTraining a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..HrMstTraining (
		   CompanyCode
		 , TrainingCode
		 , TrainingName
		 , TrainingDescription
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.TrainingCode
	     , a.TrainingName
	     , a.TrainingDescription
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_TaxCheckValidTransaction]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@StartDate varchar(10),
@FPJDate varchar(10),
@IsFPJCentral bit

--declare @CompanyCode as varchar(15)
--declare @BranchCode as varchar(15)
--declare @StartDate as varchar(10)
--declare @FPJDate as varchar(10)
--declare @ProfitCenter as varchar(10)
--declare @IsFPJCentral as bit

--set @CompanyCode = '6006410'
--set @BranchCode  = '600641001'
--set @StartDate  = '20140501'
--set @FPJDate  = '20140513'
--set @IsFPJCentral  = '1'

AS
BEGIN
SELECT TR.* FROM 
( 
    SELECT 
		CompanyCode , BranchCode , '300' AS ProfitCenterCode , InvoiceNo AS DocNo , 
		InvoiceDate AS DocDate , DueDate , FPJNo AS RefNo , FPJDate AS RefDate 
    FROM 
		SPTrnSFPJHdr 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND isPKP = 1 
		AND isnull ( FPJGovNo , '' ) = '' 
		AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate
    UNION 

    SELECT 
		CompanyCode , BranchCode , '200' AS ProfitCenterCode , FPJNo AS DocNo , 
		FPJDate AS DocDate , DueDate , '' AS RefNo , NULL AS RefDate 
    FROM 
		SVTrnFakturPajak 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND isPKP = 1 
		AND isnull ( FPJGovNo , '' ) = '' 
		AND convert ( varchar , FPJDate , 112 ) BETWEEN @StartDate AND @FPJDate
    UNION 

    SELECT 
		CompanyCode , BranchCode , '100' AS ProfitCenterCode , InvoiceNo AS DocNo , 
		InvoiceDate AS DocDate , DueDate , '' AS RefNo , NULL AS RefDate 
    FROM 
		OmFakturPajakHdr 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND TaxType = 'Standard' 
		AND isnull ( FakturPajakNo , '' ) = '' 
		AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate
    UNION 

    SELECT 
		CompanyCode , BranchCode , '000' AS ProfitCenterCode , InvoiceNo AS DocNo , 
		InvoiceDate AS DocDate , DueDate , FPJNo AS RefNo , FPJDate AS RefDate 
    FROM 
		ARFakturPajakHdr 
    WHERE 
		CompanyCode = @CompanyCode
		AND ((case when @IsFPJCentral = '1' then BranchCode end) <> ''
				or (case when @IsFPJCentral = '0' then BranchCode end) in (@BranchCode)
			)
		AND TaxType = 'Standard' 
		AND isnull ( FakturPajakNo , '' ) = '' 
		AND convert ( varchar , InvoiceDate , 112 ) BETWEEN @StartDate AND @FPJDate 
) 
AS TR
END
GO
CREATE procedure [dbo].[sp_SpSOSelectforInsert] (  @CompanyCode varchar(10) ,@BranchCode varchar(10),@LocationCode varchar(10))
 as
SELECT 
	 ItemLoc.PartNo	
	,ItemLoc.WarehouseCode
	,ItemLoc.LocationCode
	,Items.PartCategory
	,Items.CompanyCode
	,Items.BranchCode   
	,Items.ProductType
	,Items.TypeOfGoods
	,itemloc.OnHand
FROM spMstItemLoc ItemLoc
INNER JOIN spMstItems Items 
    ON ItemLoc.CompanyCode=Items.CompanyCode
    AND ItemLoc.BranchCode=Items.BranchCode
    AND ItemLoc.PartNo=Items.PartNo
WHERE	
	 Items.CompanyCode=@CompanyCode and Items.BranchCode=@BranchCode and ItemLoc.LocationCode like '%' +@LocationCode
GO
create procedure [dbo].[uspfn_UpdateCsBpkb]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..CsCustBpkb a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..CsCustBpkb (
		   CompanyCode
		 , CustomerCode
		 , Chassis
		 , BpkbReadyDate
		 , BpkbPickUp
		 , ReqKtp
		 , ReqSuratKuasa
		 , Comment
		 , Additional
		 , Status
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , ReqStnk
		 , ReqInfoLeasing
		 , ReqInfoCust
		 , Tenor
		 , LeasingCode
		 , CustomerCategory
		 , FinishDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.CustomerCode
	     , a.Chassis
	     , a.BpkbReadyDate
	     , a.BpkbPickUp
	     , a.ReqKtp
	     , a.ReqSuratKuasa
	     , a.Comment
	     , a.Additional
	     , a.Status
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.ReqStnk
	     , a.ReqInfoLeasing
	     , a.ReqInfoCust
	     , a.Tenor
	     , a.LeasingCode
	     , a.CustomerCategory
	     , a.FinishDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
--created by BENEDICT 11/Mar/2015

CREATE PROCEDURE [dbo].[uspfn_pmSelectOrganizationTree]
@CompanyCode varchar(15),
@BranchCode varchar(15)

--DECLARE @CompanyCode varchar(15) = '6006406'
--DECLARE @BranchCode varchar(15) = '6006401'

AS BEGIN
DECLARE @HighestPos varchar(15) = 
	CASE (SELECT COUNT(CompanyCode) FROM gnMstPosition
									WHERE CompanyCode = @CompanyCode
									AND DeptCode = 'SALES'
									AND (PosHeader IS NULL OR PosHeader = ''))
	WHEN 0 THEN (SELECT PosCode
				FROM gnMstPosition 
				WHERE CompanyCode = @CompanyCode AND DeptCode = 'SALES'
				AND PosHeader = (SELECT PosCode 
								FROM gnMstPosition
								WHERE DeptCode = 'SALES'
								AND PosHeader IS NULL OR PosHeader = ''))
	ELSE (SELECT PosCode FROM gnMstPosition
									WHERE CompanyCode = @CompanyCode
									AND DeptCode = 'SALES'
									AND (PosHeader IS NULL OR PosHeader = ''))
	END

SELECT * INTO #test1 FROM(
	SELECT a.BranchCode, a.EmployeeID, b.EmployeeName, e.PosLevel AS PositionID, b.Position, e.PosName AS PositionName,
	(rtrim(a.EmployeeID) + ' - ' + rtrim(b.EmployeeName)) Employee,
	isnull((
			select count(*) from PmKDP
			 where CompanyCode  = a.CompanyCode
			   and BranchCode   = a.BranchCode
			   and EmployeeID   = a.EmployeeID
			), 0) CountKDP, b.TeamLeader, ISNULL(f.OutletAbbreviation, a.BranchCode) AS BranchAbv, b.PersonnelStatus
	FROM hrEmployeeMutation a
	JOIN (
		SELECT c.EmployeeId, c.EmployeeName, c.Position, ISNULL(c.TeamLeader, '') AS TeamLeader, MAX(d.MutationDate) AS MutationDate, c.PersonnelStatus
		FROM hrEmployee c
		JOIN hrEmployeeMutation d
		ON c.EmployeeId = d.EmployeeId
		WHERE c.Department = 'SALES' AND c.PersonnelStatus = 1 AND c.IsDeleted = 0 AND d.IsDeleted = 0
		GROUP BY c.EmployeeId, c.EmployeeName, c.Position, c.TeamLeader, c.PersonnelStatus
	) b
	ON a.EmployeeId = b.EmployeeId AND a.MutationDate = b.MutationDate
	JOIN gnMstPosition e
	ON a.CompanyCode = e.CompanyCode AND e.DeptCode = 'SALES' AND b.Position = e.PosCode
	JOIN gnMstDealerOutletMapping f
	ON a.CompanyCode = f.DealerCode AND a.BranchCode = f.OutletCode
	WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = CASE @BranchCode WHEN '' THEN a.BranchCode ELSE @BranchCode END
UNION
	SELECT a.BranchCode, a.EmployeeID, b.EmployeeName, e.PosLevel AS PositionID, b.Position, e.PosName AS PositionName,
	(rtrim(a.EmployeeID) + ' - ' + rtrim(b.EmployeeName)) Employee,
	isnull((
			select count(*) from PmKDP
			 where CompanyCode  = a.CompanyCode
			   and BranchCode   = a.BranchCode
			   and EmployeeID   = a.EmployeeID
			), 0) CountKDP, b.TeamLeader, ISNULL(f.OutletAbbreviation, a.BranchCode) AS BranchAbv, b.PersonnelStatus
	FROM hrEmployeeMutation a
	JOIN (
		SELECT c.EmployeeId, c.EmployeeName, c.Position, ISNULL(c.TeamLeader, '') AS TeamLeader, MAX(d.MutationDate) AS MutationDate, c.PersonnelStatus
		FROM hrEmployee c
		JOIN hrEmployeeMutation d
		ON c.EmployeeId = d.EmployeeId
		WHERE c.Department = 'SALES' AND c.PersonnelStatus = 1 AND c.IsDeleted = 0 AND d.IsDeleted = 0
		AND c.Position = @HighestPos
		GROUP BY c.EmployeeId, c.EmployeeName, c.Position, c.TeamLeader, c.PersonnelStatus
	) b
	ON a.EmployeeId = b.EmployeeId AND a.MutationDate = b.MutationDate
	JOIN gnMstPosition e
	ON a.CompanyCode = e.CompanyCode AND e.DeptCode = 'SALES' AND b.Position = e.PosCode
	JOIN gnMstDealerOutletMapping f
	ON a.CompanyCode = f.DealerCode AND a.BranchCode = f.OutletCode
	WHERE a.CompanyCode = @CompanyCode
)#test1

;WITH N(id, lvl, BranchCode, EmployeeID, EmployeeName, PositionID, Position, PositionName, Employee, CountKDP, TeamLeader, BranchAbv, PersonnelStatus)
AS
(
	SELECT 
		CAST(row_number() OVER(ORDER BY a.EmployeeID) AS varchar) as id,
		0 AS lvl,
		a.BranchCode, a.EmployeeID, a.EmployeeName, a.PositionID, a.Position, a.PositionName, a.Employee, a.CountKDP, a.TeamLeader, a.BranchAbv, a.PersonnelStatus
	FROM #test1 a
	WHERE a.TeamLeader = ''
	AND a.PersonnelStatus = 1
	UNION ALL
	SELECT 
		CAST(N.id + '.' + CAST(row_number() OVER(ORDER BY b.EmployeeID) AS varchar) AS varchar) as id,
		N.lvl + 1 AS lvl,
		b.BranchCode, b.EmployeeID, b.EmployeeName, b.PositionID, b.Position, b.PositionName, b.Employee, b.CountKDP, b.TeamLeader, b.BranchAbv, b.PersonnelStatus
	FROM #test1 b JOIN N ON N.EmployeeID = b.TeamLeader
)
SELECT * FROM N ORDER BY lvl, PositionID DESC, BranchCode, id

DROP TABLE #test1
END
GO
CREATE procedure [dbo].[uspfn_GetFPJLookUp]      
@CompanyCode varchar(15),      
@BranchCode  varchar(15),      
@TypeOfGoods varchar(4),      
@IsPKPOnly  varchar(2)      
as      
SELECT       
    TOP 100 a. FPJNo      
    , a.FPJDate      
    , a.PickingSlipNo      
    , a.PickingSlipDate      
    , a.InvoiceNo      
    , a.InvoiceDate      
    , (SELECT CustomerName FROM gnMstCustomer WHERE CompanyCode = a.CompanyCode AND CustomerCode = a.CustomerCode) CustomerName      
    , a.CustomerCode     
    , a.TOPCode    
    , a.TOPDays    
    , a.TotSalesQty    
    , a.TotSalesAmt    
    , a.TotDiscAmt    
    , a.TotDPPAmt    
    , a.TotPPNAmt    
    , a.TotFinalSalesAmt    
    , a.TransType    
    , a.CustomerCodeBill    
    , a.CustomerCodeShip
    , a.Status
    , a.FPJGovNo
    , a.FPJSignature    
    , c.CustomerCode CustomerCodeTagih    
    , b.CustomerName CustomerNameTagih  
    , b.Address1 Address1Tagih  
    , b.Address2 Address2Tagih  
    , b.Address3 Address3Tagih    
    , b.Address4 Address4Tagih   
    , c.CustomerName     
    , c.Address1     
    , c.Address2     
    , c.Address3   
    , c.Address4   
FROM           
    spTrnSFPJHdr a      
    join SpTrnSFPJInfo b    
    on a.CompanyCode = b.CompanyCode    
    and a.BranchCode = b.BranchCode    
    and a.FPJNo = b.FPJNo    
    join gnMstCustomer c    
    on a.CompanyCode = b.CompanyCode    
    and a.CustomerCode = c.CustomerCode    
WHERE           
    a.CompanyCode = @CompanyCode      
    AND a.BranchCode = @BranchCode      
 AND ((CASE WHEN @IsPKPOnly = 1 THEN a.IsPKP END) = 1 OR (CASE WHEN @IsPKPOnly = 0 THEN a.IsPKP END) = a.IsPKP)      
 AND ((CASE WHEN @TypeOfGoods = '%' THEN a.TypeOfGoods END) = a.TypeOfGoods OR (CASE WHEN @TypeOfGoods <> '%' THEN a.TypeOfGoods END) = '0')      
 ORDER BY a.FPJNo DESC
GO
create procedure [dbo].[uspfn_SysGenerateUser]
AS
BEGIN
DECLARE @UNIQUEX UNIQUEIDENTIFIER,
	@UserID varchar(32),
	@CompanyCode varchar(20),
	@BranchCode varchar(20)

	declare CR_USER cursor for
	select BranchCode + '-ITS' a, CompanyCode, BranchCode
	from gnMstCoProfile 
	where CompanyCode = (Select top 1 companycode from gnMstOrganizationHdr)

	open CR_USER
	FETCH NEXT FROM CR_USER
	INTO @UserID, @CompanyCode, @BranchCode

	WHILE @@FETCH_STATUS = 0
	BEGIN

		INSERT INTO [dbo].[sysUser]([UserId],[Password],[FullName],[Email],[CompanyCode],[BranchCode],[TypeOfGoods],[IsActive],[RequiredChange])
		VALUES (@UserID,'202CB962AC59075B964B07152D234B70',@UserID,'',@CompanyCode, @BranchCode,'',1,0)
		
		insert [dbo].[SysRoleUser]([UserId], [RoleId]) values (@UserID, 'ITS')
				
		FETCH NEXT FROM CR_USER
		INTO @UserID, @CompanyCode, @BranchCode
	END

	CLOSE CR_USER
	DEALLOCATE CR_USER

END
GO
CREATE procedure [dbo].[uspfn_GetTaxInPeriod]
	@CompanyCode nvarchar(25),
	@BranchCode nvarchar(25),
	@ProductType nvarchar(2),
	@PeriodYear int,
	@PeriodMonth int
  
  as
  begin
--DECLARE @CompanyCode nvarchar(25) set @CompanyCode ='6006410'
--DECLARE @BranchCode nvarchar(25) set @BranchCode ='600641001'
--DECLARE @ProductType nvarchar(2) set @ProductType ='4W'
--DECLARE @PeriodYear int set @PeriodYear = 2014
--DECLARE @PeriodMonth int set @PeriodMonth =12

  --exec uspfn_GetTaxInPeriod 6006410,600641001,'4W',2014,12


SELECT * INTO #1 FROM (
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxIn WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth
UNION
SELECT BranchCode, TaxNo, SupplierCode FROM gnTaxInHistory WITH(NOLOCK, NOWAIT)
WHERE CompanyCode = @CompanyCode 
    AND BranchCode = case @BranchCode when '' then BranchCode else @BranchCode end 
    AND ProductType = @ProductType 
	AND PeriodYear = @PeriodYear 
    AND PeriodMonth = @PeriodMonth 
    AND IsDeleted = '1'
) #1

/* AMBIL SEMUA DATA HPP SPARE */
select * into #t_1 from (
select b.SupplierCode, a.* 
from spTrnPHpp a
left join spTrnPRcvHdr b on b.CompanyCode = a.CompanyCode 
	and b.BranchCode = a.BranchCode
	and b.WRSNo = a.WRSNo
where
	a.CompanyCode	 = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	and a.YearTax	 = @PeriodYear
	and a.MonthTax	 = @PeriodMonth
)#t_1 

/* AMBIL SEMUA DATA BTT OTHER (AP) */
select * into #t_2 from (
select a.* 
from apTrnBTTOtherHdr a
where 
	a.CompanyCode = @CompanyCode
	and a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	and a.FPJNo <> ''
	and SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    and RIGHT(a.FPJPeriod, 2) = @PeriodMonth
)#t_2 

/* DATA HPP SPARE YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA DENGAN BTT OTHER (NILAI DIJUMLAHKAN) */
SELECT * INTO #t_3 FROM (
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL((ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0)) + g.DppAmt,0) DPPAmt
, ISNULL((ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0)) + g.PPNAmt, 0) PPNAmt
, ISNULL(0 + g.PPNBmAmt, 0) PPNBmAmt
, 'PEMBELIAN SPARE PART' Description
, ISNULL(ISNULL(b.TotItem, 0)+(SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode 
							AND BranchCode = a.BranchCode AND BTTNo = g.BTTNo), 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
	INNER JOIN #t_2 g on g.BranchCode=a.BranchCode AND g.SupplierCode = b.SupplierCode
		AND g.FPJNo = a.TaxNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
) #t_3

-----------------------------------------------------------

/* QUERY UTAMA */
SELECT * INTO Query3S FROM (
-- SALES : PURCHASE
SELECT
  a.CompanyCode
, a.BranchCode
, e.ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode 
, d.SupplierGovName SupplierName
, d.IsPKP 
, d.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.HPPNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, (SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscDPP, 0) + ISNULL(OthersDPP, 0))) FROM omTrPurchaseHPPDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ) DPPAmt
, (SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscPPn, 0) + ISNULL(OthersPPn, 0))) FROM omTrPurchaseHPPDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ) PPNAmt
, (SELECT SUM(ISNULL(Quantity, 0) * ISNULL(AfterDiscPPnBM, 0)) FROM omTrPurchaseHPPDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo ) PPNBmAmt
, (SELECT TOP 1 SalesModelCode + ', NO. CHS. ' + CONVERT(VARCHAR, ChassisNo) FROM omTrPurchaseHPPSubDetail 
	WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND HPPNo = a.HPPNo) Description
, (SELECT COUNT(HPPSeq) FROM omTrPurchaseHPPSubDetail c 
    LEFT JOIN omTrPurchaseHPPDetailModel b ON c.CompanyCode = b.CompanyCode AND c.BranchCode = b.BranchCode 
    AND c.HPPNo = b.HPPNo AND c.BPUNo = b.BPUNo
    WHERE c.CompanyCode = a.CompanyCode AND c.BranchCode = a.BranchCode AND c.HPPNo = a.HPPNo) Quantity
FROM
    omTrPurchaseHPP a WITH(NOLOCK, NOWAIT)
    LEFT JOIN gnMstSupplier d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.SupplierCode = d.SupplierCode
    LEFT JOIN gnMstCoProfile e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
    INNER JOIN gnMstSupplierProfitCenter f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
	    AND a.BranchCode = f.BranchCode
        AND a.SupplierCode = f.SupplierCode
    INNER JOIN gnMstTax g WITH(NOLOCK, NOWAIT) ON a.CompanyCode = g.CompanyCode
        AND f.TaxCode = g.TaxCode        
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND YEAR(a.LockingDate) = @PeriodYear
    AND MONTH(a.LockingDate) = @PeriodMonth
    AND a.Status NOT IN ('3')
    AND f.ProfitCenterCode = '100'    
    AND g.TaxPct > 0
-------------------------------------------------------------------------------------
UNION
-- SALES : KAROSERI
SELECT
  a.CompanyCode
, a.BranchCode
, ProductType
, YEAR(a.LockingDate) PeriodYear
, MONTH(a.LockingDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.RefferenceFakturPajakNo FPJNo
, a.RefferenceFakturPajakDate FPJDate
, a.KaroseriTerimaNo + ' (' + a.RefferenceInvoiceNo + ')' ReferenceNo
, a.RefferenceInvoiceDate ReferenceDate
, a.RefferenceFakturPajakNo TaxNo
, a.RefferenceFakturPajakDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.Quantity, 0) * (ISNULL(a.DPPMaterial, 0) + ISNULL(a.DPPFee, 0) + ISNULL(a.DPPOthers, 0)) DPPAmt
, ISNULL(a.Quantity, 0) * ISNULL(a.PPn, 0) PPNAmt
, 0 PPNBmAmt
, 'Karoseri SPK No: ' + a.KaroseriSPKNo Description
, ISNULL(a.Quantity, 0) Quantity
FROM
    omTrPurchaseKaroseriTerima a WITH(NOLOCK, NOWAIT)
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode  
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode              
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND YEAR(a.LockingDate) = @PeriodYear
    AND MONTH(a.LockingDate) = @PeriodMonth
    AND a.Status NOT IN ('3')
    AND d.ProfitCenterCode = '100'
    AND e.TaxPct > 0
-----------------------------------------------------------------------------------------
UNION
-- SALES : PURCHASE RETURN
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, YEAR(ReturnDate) PeriodYear
, MONTH(ReturnDate) PeriodMonth
, '100' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'R' DocumentType
, c.SupplierCode SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP IsPKP
, c.NPWPNo NPWP
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') FPJNo
, a.RefferenceDate FPJDate
, a.ReturnNo + ' (' + a.RefferenceNo + ')' ReferenceNo
, a.RefferenceDate ReferenceDate
, replace(a.RefferenceNo,substring(a.RefferenceNo,1,1),'9') TaxNo  
, a.RefferenceDate TaxDate
, a.ReturnDate SubmissionDate
,(SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscDPP, 0) + ISNULL(OthersDPP, 0))) FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 DPPAmt
,(SELECT SUM(ISNULL(Quantity, 0) * (ISNULL(AfterDiscPPn, 0) + ISNULL(OthersPPn, 0)))FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 PPNAmt
,(SELECT SUM(ISNULL(Quantity, 0) * ISNULL(AfterDiscPPnBM, 0)) FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 PPNBmAmt
, 'RTR-SLS-NO: ' + a.ReturnNo Description
, (SELECT SUM(ISNULL(Quantity, 0))FROM omTrPurchaseReturnDetailModel 
    WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND ReturnNo = a.ReturnNo) * -1 Quantity
FROM
    omTrPurchaseReturn a WITH(NOLOCK, NOWAIT)
    LEFT JOIN omTrPurchaseHPP b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.BranchCode = b.BranchCode
	    AND a.HPPNo = b.HPPNo
    LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND b.SupplierCode = c.SupplierCode
    LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode  
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode              
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND YEAR(ReturnDate) = @PeriodYear
    AND MONTH(ReturnDate) = @PeriodMonth
    AND a.Status NOT IN ('3')
    AND e.ProfitCenterCode = '100'
    AND f.TaxPct > 0
---------------------------------------------------------------------------------------
UNION
-- SERVICE
SELECT
 a.CompanyCode
, a.BranchCode
, a.ProductType
, YEAR(RecDate) PeriodYear
, MONTH(RecDate) PeriodMonth
, '200' ProfitCenter
, NULL TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP IsPKP
, b.NPWPNo NPWP
, a.FPJNo FPJNo
, a.FPJDate FPJDate
, a.PONo + ' (' + a.JobOrderNo + ')' ReferenceNo
, a.RecDate RefferenceDate
, a.FPJGovNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.DPPAmt, 0) DPPAmt
, ISNULL(a.PPnAmt, 0) PPNAmt
, 0 PPNBmAmt
, 'REC-SV-NO: ' + a.RecNo Description
, 1 Quantity
FROM
    svTrnPOSubCon a	WITH(NOLOCK, NOWAIT)
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    INNER JOIN gnMstSupplierProfitCenter c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
        AND a.SupplierCode = c.SupplierCode      
    INNER JOIN gnMstTax d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
        AND c.TaxCode = d.TaxCode          
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND a.ProductType = @ProductType
    AND YEAR(RecDate) = @PeriodYear
    AND MONTH(RecDate) = @PeriodMonth
    AND c.ProfitCenterCode = '200'
    AND d.TaxPct > 0
---------------------------------------------------------------------------------------
UNION 
-- SPAREPART
SELECT
  a.CompanyCode
, a.BranchCode
, d.ProductType
, a.YearTax PeriodYear
, a.MonthTax PeriodMonth
, '300' ProfitCenter
, a.TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, b.SupplierCode
, c.SupplierGovName SupplierName
, c.IsPKP
, c.NPWPNo NPWP
, a.ReferenceNo FPJNo
, a.ReferenceDate FPJDate
, a.HPPNo + ' (' + a.ReferenceNo + ')' ReferenceNo
, a.WRSDate ReferenceDate
, a.TaxNo TaxNo
, a.TaxDate TaxDate
, a.DueDate SubmissionDate
, ISNULL(a.TotNetPurchAmt, 0) + ISNULL(a.DiffNetPurchAmt, 0) DPPAmt
, ISNULL(a.TotTaxAmt, 0) + ISNULL(a.DiffTaxAmt, 0) PPNAmt
, 0 PPNBmAmt
, 'PEMBELIAN SPARE PART' Description
, ISNULL(b.TotItem, 0) Quantity	
FROM
	spTrnPHPP a	WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnPRcvHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.WRSNo = b.WRSNo
	LEFT JOIN gnMstSupplier c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND b.SupplierCode = c.SupplierCode
	LEFT JOIN gnMstCoProfile d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
    INNER JOIN gnMstSupplierProfitCenter e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
	    AND a.BranchCode = e.BranchCode
        AND b.SupplierCode = e.SupplierCode
    INNER JOIN gnMstTax f WITH(NOLOCK, NOWAIT) ON a.CompanyCode = f.CompanyCode
        AND e.TaxCode = f.TaxCode
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
	AND ProductType = @ProductType
	AND a.YearTax = @PeriodYear
	AND a.MonthTax = @PeriodMonth
	AND a.Status = '2'
    AND e.ProfitCenterCode = '300'
    AND f.TaxPct > 0
	AND b.BranchCode+'-'+b.SupplierCode+'-'+a.TaxNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- FINANCE
SELECT
  a.CompanyCode
, a.BranchCode
, c.ProductType
, SUBSTRING(a.FPJPeriod, 1, 4) PeriodYear
, RIGHT(a.FPJPeriod, 2) PeriodMonth
, '000' ProfitCenter
, 'NULL' TypeOfGoods
, 'B' TaxCode
, '2' TransactionCode
, '1' StatusCode
, '1' DocumentCode
, 'F' DocumentType
, a.SupplierCode
, b.SupplierGovName SupplierName
, b.IsPKP
, b.NPWPNo NPWP
, a.FPJNo
, a.FPJDate
, a.BTTNo + ' (' + a.ReffNo + ')' ReferenceNo
, a.ReffDate ReferenceDate
, a.FPJNo TaxNo
, a.FPJDate TaxDate
, a.DueDate SubmissionDate
, a.DPPAmt
, a.PPNAmt
, a.PPnBMAmt
, (SELECT TOP 1 Description FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Description
, (SELECT COUNT(*) FROM apTrnBTTOtherDtl WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode AND BTTNo = a.BTTNo) Quantity	
FROM
    apTrnBTTOtherHdr a	WITH(NOLOCK, NOWAIT)    
    LEFT JOIN gnMstSupplier b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
	    AND a.SupplierCode = b.SupplierCode
    LEFT JOIN gnMstCoProfile c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
	    AND a.BranchCode = c.BranchCode
    INNER JOIN gnMstSupplierProfitCenter d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
	    AND a.BranchCode = d.BranchCode
        AND a.SupplierCode = d.SupplierCode
    INNER JOIN gnMstTax e WITH(NOLOCK, NOWAIT) ON a.CompanyCode = e.CompanyCode
        AND d.TaxCode = e.TaxCode               
WHERE
    a.CompanyCode = @CompanyCode
    AND a.BranchCode = case @BranchCode when '' then a.BranchCode else @BranchCode end
    AND ProductType = @ProductType
    AND SUBSTRING(a.FPJPeriod, 1, 4) = @PeriodYear
    AND RIGHT(a.FPJPeriod, 2) = @PeriodMonth
    AND a.Category = 'INV'
    AND d.ProfitCenterCode = '000'
    AND e.TaxPct > 0
    AND a.BranchCode+'-'+a.SupplierCode+'-'+a.FPJNo NOT IN (SELECT BranchCode+'-'+SupplierCode+'-'+TaxNo FROM #t_3)
-------------------------------------------------------------------------------
UNION
-- SPARE PART DAN BTT YANG MEMILIKI SUPPLIER DAN TAXNO YANG SAMA
SELECT * FROM #t_3
) Query3S

select ROW_NUMBER() OVER(ORDER BY q1.BranchCode, q1.ProfitCenter ASC, q1.TaxNo)  SeqNo
    , q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, ISNULL((SELECT TOP 1 TypeOfGoods FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo), '') TypeOfGoods
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, (SELECT TOP 1 FPJNo FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJNo
	, (SELECT TOP 1 FPJDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) FPJDate
	, (SELECT TOP 1 ReferenceNo FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceNo
	, (SELECT TOP 1 ReferenceDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) ReferenceDate
	, q1.TaxNo
	, (SELECT TOP 1 TaxDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) TaxDate
	, (SELECT TOP 1 SubmissionDate FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) SubmissionDate
	, SUM(q1.DPPAmt) DPPAmt
	, SUM(q1.PPNAmt) PPNAmt
	, SUM(q1.PPnBMAmt) PPnBMAmt
	, (SELECT TOP 1 Description FROM Query3S WHERE CompanyCode = q1.CompanyCode AND BranchCode = q1.BranchCode AND 
		ProductType = q1.ProductType AND PeriodYear = q1.PeriodYear AND PeriodMonth = q1.PeriodMonth AND 
		SupplierCode = q1.SupplierCode AND TaxNo = q1.TaxNo) Description
	, SUM(q1.Quantity) Quantity
from Query3S q1
group by
	q1.CompanyCode
	, q1.BranchCode
	, q1.ProductType
	, q1.PeriodYear
	, q1.PeriodMonth
	, q1.ProfitCenter
	, q1.TaxCode
	, q1.TransactionCode
	, q1.StatusCode
	, q1.DocumentCode
	, q1.DocumentType
	, q1.SupplierCode
	, q1.SupplierName
	, q1.IsPKP
	, q1.NPWP
	, q1.TaxNo 

select
    ISNULL(SUM(DPPAmt),0) DPPAmt
    ,ISNULL(SUM(PPnAmt),0) PPnAmt
	,ISNULL((SELECT SUM(DPPAmt) FROM Query3S WHERE IsPKP='1'),0) SumDPPStd 
	,ISNULL((SELECT SUM(DPPAmt) FROM Query3S WHERE IsPKP='0'),0) SumDPPSdh 
	,ISNULL((SELECT SUM(PPnAmt) FROM Query3S WHERE IsPKP='1'),0) SumPPNStd
	,ISNULL((SELECT SUM(PPnAmt) FROM Query3S WHERE IsPKP='0'),0) SumPPNSdh
	,ISNULL(SUM(PPnBMAmt),0) SumPPnBMAmt
from Query3S

drop table Query3S
drop table #1
drop table #t_1
drop table #t_2
drop table #t_3
end
GO
create procedure [dbo].[uspfn_SelectBNN]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear int,
	@UserID varchar(25)
as

begin
	declare @ProfitCenterCode varchar(25);
	set @ProfitCenterCode = (select top 1 a.ProfitCenter from sysUserProfitCenter a where a.UserId = @UserID);

    SELECT DISTINCT 
	       a.SupplierCode
		 , a.SupplierName 
      FROM gnMstSupplier a, gnMstSupplierProfitCenter b, omMstBBNKIR c
     WHERE a.CompanyCode = b.CompanyCode
       AND b.CompanyCode = c.CompanyCode
       AND a.SupplierCode = b.SupplierCode
       AND b.SupplierCode = c.SupplierCode
       AND a.CompanyCode = @CompanyCode
       AND c.BranchCode = @BranchCode
       AND b.ProfitCenterCode = @ProfitCenterCode
       AND c.Status = '1'
       AND c.SalesModelCode = @SalesModelCode
       AND c.SalesModelYear = @SalesModelYear
     ORDER BY a.SupplierCode ASC
end
GO
--Non Penjualan & Unit Order
CREATE PROCEDURE [dbo].[uspfn_LookupLMP] @CompanyCode varchar(15), @BranchCode varchar(15), @SalesType varchar(15),
@TypeOfGoods varchar(15), @ProductType varchar(15)
as
SELECT * FROM 
(
SELECT
 PickingSlipNo, PickingSlipDate,
 BPSFNo, BPSFDate,
 (
   SELECT TOP 1 PRODUCTTYPE FROM spTrnSBPSFDtl
	 WHERE spTrnSBPSFHdr.CompanyCode = spTrnSBPSFDtl.CompanyCode
	 AND spTrnSBPSFHdr.BranchCode = spTrnSBPSFDtl.BranchCode
	 AND spTrnSBPSFHdr.BPSFNo = spTrnSBPSFDtl.BPSFNo
 ) AS ProductType
FROM spTrnSBPSFHdr
WHERE spTrnSBPSFHdr.CompanyCode = @CompanyCode
AND spTrnSBPSFHdr.BranchCode    = @BranchCode
AND spTrnSBPSFHdr.SalesType     = @SalesType
AND spTrnSBPSFHdr.TypeOfGoods   = @TypeOfGoods
AND (spTrnSBPSFHdr.Status = '1' OR spTrnSBPSFHdr.Status = '0')
AND (spTrnSBPSFHdr.PickingSlipNo NOT IN (SELECT PickingSlipNo FROM spTrnSLmpHdr where CompanyCode = @CompanyCode AND BranchCode = @BranchCode))
) A
WHERE A.ProductType = @ProductType
ORDER BY A.PickingSlipNo DESC
GO
create procedure [dbo].[usp_itsinqlostbytype]
	@CompanyCode varchar(20),
	@EmployeeID varchar(20),
	@DateFrom varchar(10),
	@DateTo varchar(10)
as

select a.TipeKendaraan as name
	 , count(a.TipeKendaraan) as value
  from PmKDP a 
  left join PmStatusHistory b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode 
   and b.InquiryNumber = a.InquiryNumber
   and b.SequenceNo = (select top 1 SequenceNo from PmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber order by SequenceNo desc)
 where a.CompanyCode = @CompanyCode
   and a.EmployeeID = @EmployeeID
   and a.LastProgress = 'LOST'
   and convert(varchar, b.UpdateDate, 112) between @DateFrom and @DateTo
 group by a.TipeKendaraan

--select * from PmStatusHistory where InquiryNumber = '387904'
GO
create procedure [dbo].[uspfn_UpdateCsBirthday]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..CsCustBirthDay a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..CsCustBirthDay (
		   CompanyCode
		 , CustomerCode
		 , PeriodYear
		 , TypeOfGift
		 , SentGiftDate
		 , ReceivedGiftDate
		 , Comment
		 , AdditionalInquiries
		 , Status
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , SpouseName
		 , ChildName1
		 , ChildName2
		 , ChildName3
		 , SpouseBirthday
		 , ChildBirthday1
		 , ChildBirthday2
		 , ChildBirthday3
		 , SpouseComment
		 , ChildComment1
		 , ChildComment2
		 , ChildComment3
		 , SpouseGiftSentDate
		 , ChildGiftSentDate1
		 , ChildGiftSentDate2
		 , ChildGiftSentDate3
		 , SpouseTypeOfGift
		 , ChildTypeOfGift1
		 , ChildTypeOfGift2
		 , SpouseRelation
		 , ChildRelation1
		 , ChildRelation2
		 , ChildRelation3
		 , ChildTelephone1
		 , ChildTelephone2
		 , ChildTelephone3
		 , SpouseGiftReceivedDate
		 , ChildGiftReceivedDate1
		 , ChildGiftReceivedDate2
		 , ChildGiftReceivedDate3
		 , ChildTypeOfGift3
		 , SpouseTelephone
		 )
	select CompanyCode = @CompanyCode_B
	     , a.CustomerCode
	     , a.PeriodYear
	     , a.TypeOfGift
	     , a.SentGiftDate
	     , a.ReceivedGiftDate
	     , a.Comment
	     , a.AdditionalInquiries
	     , a.Status
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.SpouseName
	     , a.ChildName1
	     , a.ChildName2
	     , a.ChildName3
	     , a.SpouseBirthday
	     , a.ChildBirthday1
	     , a.ChildBirthday2
	     , a.ChildBirthday3
	     , a.SpouseComment
	     , a.ChildComment1
	     , a.ChildComment2
	     , a.ChildComment3
	     , a.SpouseGiftSentDate
	     , a.ChildGiftSentDate1
	     , a.ChildGiftSentDate2
	     , a.ChildGiftSentDate3
	     , a.SpouseTypeOfGift
	     , a.ChildTypeOfGift1
	     , a.ChildTypeOfGift2
	     , a.SpouseRelation
	     , a.ChildRelation1
	     , a.ChildRelation2
	     , a.ChildRelation3
	     , a.ChildTelephone1
	     , a.ChildTelephone2
	     , a.ChildTelephone3
	     , a.SpouseGiftReceivedDate
	     , a.ChildGiftReceivedDate1
	     , a.ChildGiftReceivedDate2
	     , a.ChildGiftReceivedDate3
	     , a.ChildTypeOfGift3
	     , a.SpouseTelephone
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_AbExtractData_II]
	@FileID varchar(100),
	@FileContent varchar(max),
	@UserId varchar(25)
as
begin
	--select @FileContent

	update SimDmsIterator 
	   set AttendanceFlatFileExtractionProcessed=0
	     , AttendanceFlatFileExtractionTotal=100

	select * into #a 
	from uspfn_AbSplitString(@FileContent, char(10)+char(13))

	--begin try
		declare c cursor for 
			select * from #a
		declare @Record varchar(100);
		declare @EmployeeID varchar(17);
		declare @AttendanceTime varchar(20);
		declare @MachineCode varchar(15);
		declare @IdentityCode varchar(12);
		declare @CurrentDate datetime;
		declare @CompanyCode varchar(17);
		declare @TrailingZeroIndex tinyint;
		set @CompanyCode = (
			select top 1
			       CompanyCode
			  from gnMstOrganizationHdr 
		);

		declare @NumberOfIteratorRecords int;
		declare @NumberOfRecord int;
		set @NumberOfIteratorRecords = ( select count(*) from SimDmsIterator );
		set @NumberOfRecord = (select count(*) from #a);

		if @NumberOfIteratorRecords = 0
		begin
			insert into SimDmsIterator (AttendanceFlatFileExtractionProcessed, AttendanceFlatFileExtractionTotal)
			values (0, 100)
		end

		update SimDmsIterator
		   set AttendanceFlatFileExtractionProcessed = 0
		     , AttendanceFlatFileExtractionTotal = @NumberOfRecord
			 




		open c
			fetch next from c into @Record

			declare @iterator int;
			set @iterator=1;
			while @@FETCH_STATUS=0
			begin
				if @iterator>2
				begin
					set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr );
					set @EmployeeID = (select * from dbo.SplitString(@Record, ',', 1));
					--set @AttendanceTime = convert(datetime,  (select * from dbo.SplitString(@Record, ',', 3)) + ' ' + (select * from dbo.SplitString(@Record, ',', 4)));
					set @AttendanceTime = (select * from dbo.SplitString(@Record, ',', 3)) + ' ' + (select * from dbo.SplitString(@Record, ',', 4));
					set @MachineCode = (select * from dbo.SplitString(@Record, ',', 5));
					set @IdentityCode = ( 
						case (select * from dbo.SplitString(@Record, ',', 8) )
							when 'scan masuk' then 'I' 
							else 'O' 
						end);


					--select @AttendanceTime as AttendanceTime;
					--select * from dbo.SplitString(@Record, ',', 3);
					exec uspfn_AbInsertAttendanceData 
						 @CompanyCode = @CompanyCode
					   , @FileID = @FileID
					   , @Iterator = @Iterator
					   , @EmployeeID = @EmployeeID
					   , @AttendanceTime = @AttendanceTime
					   , @MachineCode = @MachineCode
					   , @IdentityCode = @IdentityCode
					   , @UserId = @UserID

					update SimDmsIterator 
					   set AttendanceFlatFileExtractionProcessed = @iterator					 
				end

				set @iterator = @iterator + 1;
				fetch next from c into @Record
			end
		close c
		deallocate c

		select Convert(bit, 1);
	--end try
	--begin catch
	--	select Convert(bit, 0);
	--end catch
end
GO
CREATE procedure [dbo].[uspfn_spTrnPSUGGORHdr] (  @CompanyCode varchar(15) ,  @BranchCode varchar(15) )
 as

SELECT 
 a.SuggorNo
--,a.SuggorDate
,CONVERT(varchar(15), a.SuggorDate, 103) as SuggorDate
,a.SupplierCode
,b.SupplierName
FROM spTrnPSUGGORHdr a
LEFT JOIN gnMstSupplier b on b.CompanyCode=a.CompanyCode AND b.SupplierCode=a.SupplierCode                               
WHERE a.CompanyCode=@CompanyCode AND a.BranchCode=@BranchCode

AND a.status < 2
ORDER BY a.SuggorNo DESC
GO
create procedure [dbo].[uspfn_UpdateCsCustData]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..CsCustData a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..CsCustData (
		   CompanyCode
		 , CustomerCode
		 , AddPhone1
		 , AddPhone2
		 , ReligionCode
		 , IsDeleted
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 )
	select CompanyCode = @CompanyCode_B
	     , a.CustomerCode
	     , a.AddPhone1
	     , a.AddPhone2
	     , a.ReligionCode
	     , a.IsDeleted
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_SalesSOTax]
	@CompanyCode varchar(13),
	@CustomerCode varchar(17)
as
begin
	SELECT a.TaxPct
      FROM gnMstTax a
     INNER JOIN gnMstCustomerProfitCenter b
        ON a.CompanyCode = b.CompanyCode
       AND a.TaxCode = b.TaxCode
       AND a.CompanyCode = @CompanyCode
       AND b.CustomerCode = @CustomerCode
       AND b.ProfitCenterCode = '100'
end



--go
--exec uspfn_SalesSOTax '6115204', '0000001'
GO
create procedure [dbo].[uspfn_CsFeedbackSend] 
	@LastUpdateDate datetime,
	@Segment int
as

select * into #t1 from (
select top (@Segment) CompanyCode 
     , CustomerCode
     , Chassis
     , IsManual
     , FeedbackA
     , FeedbackB
     , FeedbackC
     , FeedbackD
     , CreatedBy
     , CreatedDate
     , UpdatedBy
     , UpdatedDate
  from CsCustFeedback
 where UpdatedDate is not null
   and UpdatedDate > @LastUpdateDate
 order by UpdatedDate asc )#t1

select * from #t1

  drop table #t1


--go
--exec uspfn_CsFeedbackSend @LastUpdateDate='2013-01-01', @Segment=1
GO
Create procedure [dbo].[uspfn_OmFakturPajakDtlAccsSeqSaveDetail]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlAccsSeqSaveDetail 6006410,600641001,''
INSERT INTO OmFakturPajakDetailAccsSeq(CompanyCode, BranchCode, InvoiceNo, PartNo, PartName, Quantity, 
    RetailPrice, DiscExcludePPn, DPP, PPn, Total)
SELECT a.CompanyCode
    , a.BranchCode
    , a.InvoiceNo
    , a.PartNo
    , isnull(b.PartName,'') PartName
    , a.Quantity Quantity
    , a.RetailPrice
    , a.DiscExcludePPn
    , a.DPP
    , a.PPn
    , a.Total
FROM omTrSalesInvoiceAccsSeq a
LEFT JOIN spMstItemInfo b ON b.CompanyCode = a.CompanyCode 
    AND b.PartNo = a.PartNo
WHERE a.CompanyCode = @CompanyCode 
    AND a.BranchCode = @BranchCode 
    AND a.InvoiceNo = @InvoiceNo
    AND a.PartNo NOT IN(SELECT PartNo FROM omFakturPajakDetailAccsSeq WHERE CompanyCode = a.CompanyCode 
        AND BranchCode = a.BranchCode AND InvoiceNo = a.InvoiceNo AND PartNo = a.PartNo)  
end
GO
Create procedure [dbo].[uspfn_OmFakturPajakDtlDoSaveDO]   
(  
 @CompanyCode varchar(15),  
 @BranchCode varchar(15), 
 @InvoiceNo varchar(30) 
)  
AS  
BEGIN 
-- exec uspfn_OmFakturPajakDtlSaveDO 6006410,600641001,''
INSERT INTO OmFakturPajakDetailDO(CompanyCode, BranchCode, InvoiceNo, DONo)
 SELECT a.CompanyCode, a.BranchCode, a.InvoiceNo, b.DONo FROM omTrSalesInvoiceModel a
 INNER JOIN omTrSalesBPK b ON b.CompanyCode = a.CompanyCode AND b.BranchCode = a.BranchCode AND a.BPKNo = b.BPKNo
 WHERE a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode AND a.InvoiceNo = @InvoiceNo
 AND b.DONo NOT IN(SELECT DONo FROM omFakturPajakDetailDO WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode
 AND InvoiceNo = a.InvoiceNo)
 GROUP BY a.CompanyCode, a.BranchCode, a.InvoiceNo, b.DONo
end
GO
create procedure [dbo].[uspfn_RptSO_A01_Rpt]
	@CompanyCode varchar(13),
	@BranchCode varchar(13),
	@SONumber varchar(35)
as
begin
	select a.SONo as SONumber
	     , a.SODate 
		 , a.SKPKNo as SKPKNumber
		 , a.RefferenceNo as ReffNumber
		 , a.CustomerCode 
		 , b.CustomerName
		 , b.CustomerGovName
		 , Address = ( ltrim(b.Address1) + ' ' + ltrim(b.Address2) + ' ' + ltrim(b.Address3) + ltrim(b.Address4))
		 , b.Address1
		 , b.Address2
		 , b.Address3
		 , b.Address4
		 , b.NPWPNo 
		 , b.NPWPDate
		 , a.LeasingCo
		 , c.CustomerCode as LeasingCode
		 , c.CustomerName as LeasingName
		 , d.TOPCode
		 , e.LookUpValueName as TOPDesc
		 --, g.LookUpValueName as City
		 , City = (
				select top 1
				       y.LookupValueName
				  from gnMstCoProfile x
				 inner join gnMstLookupDtl y
				    on y.CompanyCode = x.CompanyCode
				   and y.CodeID = 'CITY'
				   and y.LookupValue = x.CityCode
				 where x.CompanyCode = a.CompanyCode
				   and x.BranchCode = a.BranchCode
		   )
	  from OmTrSalesSO a
	 inner join gnMstCustomer b
	    on b.CompanyCode = a.CompanyCode
	   and b.CustomerCode = a.CustomerCode
	  left join gnMstCustomer c
	    on c.CompanyCode = a.CompanyCode
	   and c.CategoryCode = 32
	   and c.CustomerCode = a.LeasingCo
	  left join gnMstCustomerProfitCenter d
	    on d.CompanyCode = a.CompanyCode
	   and d.BranchCode = a.BranchCode
	   and d.CustomerCode = c.CustomerCode
	  left join gnMstLookupDtl e
	    on e.CompanyCode = a.CompanyCode
	   and e.CodeID = 'TOPC'
	   and e.LookUpValue = d.TOPCode
	  left join gnMstCoProfile f
	    on f.CompanyCode = e.CompanyCode
	   and f.BranchCode = d.BranchCode
	  left join gnMstLookUpDtl g
	    on g.CompanyCode = f.CompanyCode
	   and g.CodeID = 'CITY'
	   and g.LookUpValue = f.CityCode
	 where a.CompanyCode = @CompanyCode
	   and a.BranchCode = @BranchCode
	   and a.SONo = @SONumber
end
GO
CREATE procedure [dbo].[uspfn_HrGetTeamLeader222]
	@CompanyCode varchar(25),
	@DeptCode varchar(25),
	@PosCode varchar(25)
as

declare @table as table(value varchar(200), text varchar(200))
declare @curpos as varchar(200)
select Dept = @DeptCode
if(@DeptCode like '%SALES & MKT%')
	select 'true'
else
	select 'false'

select 
	a.*
from
	gnMstPosition a
where
	a.CompanyCode=@CompanyCode
	and
	a.DeptCode='SALES & MKT'

set @curpos = isnull((
				select top 1 PosHeader
				  from GnMstPosition
				 where CompanyCode = @CompanyCode
				   and DeptCode = @DeptCode
				   and PosCode = @PosCode
				  ), '') 

while (@curpos != '' and @DeptCode != 'COM')
begin
	insert into @table
	select a.EmployeeID, a.EmployeeName + ' (' + @curpos + ')' 
	  from HrEmployee a
	 where CompanyCode = @CompanyCode
	   and (Department = @DeptCode or Department = 'COM')
	   and Position = @curpos
   
	set @curpos = isnull((
					select top 1 PosHeader
					  from GnMstPosition
					 where CompanyCode = @CompanyCode
					   and (DeptCode = @DeptCode or DeptCode = 'COM')
					   and PosCode = @curpos
					  ), '') 
end

select * from @table
GO
Create PROCEDURE [dbo].[uspfn_svCusVehLookUp]
@CompanyCode varchar(15), @BranchCode varchar(15), @DynamicFilter varchar(4000) = ''
AS
begin
--declare @CompanyCode varchar(15), @BranchCode varchar(15), @DynamicFilter varchar(4000) = ''
--set @CompanyCode = '6159401000'
--set @BranchCode = '6159401001'
--set @DynamicFilter = ' 
--	and InvoiceNo like ''%INC/15/0029%''
--	and JobOrderNo like ''%SPK/15/003%'''

DECLARE @Query varchar(max);
	SET @Query = 'select top 500 * from SvCustomerVehicleView
	WHERE CompanyCode = ''' + @CompanyCode + ''' AND BranchCode = ''' + @BranchCode + '''' 
            +@DynamicFilter
          
        
	--print(@Query);
	exec (@Query)
END
GO
CREATE Procedure [dbo].[uspfn_GnGetDataSHISTTest]    
as    
declare @CompanyCode varchar(20)    
declare @BranchCode  varchar(20)    
declare @DealerCode  char(10)    
declare @TotalItem  int    
declare @LastDate  datetime    
declare @ProductType varchar(100)    
    
set @CompanyCode = (select top 1 CompanyCode from gnMstOrganizationHdr);    
set @BranchCode  = (select top 1 BranchCode from gnMstOrganizationDtl where IsBranch = 0);    
set @DealerCode  = isnull((select LockingBy from gnMstCoProfileService where CompanyCode = @CompanyCode and BranchCode = @BranchCode), @CompanyCode);    
set @ProductType = (select top 1 ProductType from gnMstCoProfile where CompanyCode = @CompanyCode and BranchCode = @BranchCode)    
    
declare @T_SHIST  table (Line varchar(max), SeqNo varchar(max), SeqNo1 varchar(MAX))    
declare @T_SHIST_DTL table    
(    
 Year     varchar(4),    
 Month     varchar(2),    
 BranchCode    varchar(15),    
 BranchName    varchar(100),    
 Area     varchar(100),    
 BranchHeadID   varchar(15),    
 BranchHeadName   varchar(100),    
 SalesHeadID    varchar(15),    
 SalesHeadName   varchar(100),    
 SalesCoordinatorID  varchar(15),    
 SalesCoordinatorName varchar(100),    
 SalesmanID    varchar(15),    
 SalesmanName   varchar(100),    
 JoinDate    varchar(8),    
 ResignDate    varchar(8),    
 GradeDate    varchar(8),    
 Grade     varchar(50),    
 ModelCatagory   varchar(100),    
 SalesType    varchar(100),    
 InvoiceNo    varchar(15),    
 InvoiceDate    varchar(8),    
 SoNo     varchar(15),    
 SalesModelCode   varchar(20),    
 SalesModelYear   varchar(4),    
 SalesModelDesc   varchar(100),    
 FakturPolisiDesc  varchar(100),    
 MarketModel    varchar(100),    
 ColourCode    varchar(15),    
 ColourName    varchar(100),    
 --ColourNameInd   varchar(100),    
 GroupMarketModel  varchar(100),    
 ColumnMarketModel  varchar(100),    
 ChassisCode    varchar(15),    
 ChassisNo    varchar(10),    
 EngineCode    varchar(15),    
 EngineNo    varchar(10),    
 FakturPolisiNo   varchar(15),    
 FakturPolisiDate  varchar(8),    
 Status     varchar(1),    
 CreatedBy    varchar(15),    
 CreatedDate    varchar(8),    
 LastUpdateBy   varchar(15),    
 LastUpdateDate   varchar(8)    
)    
    
insert into @T_SHIST_DTL    
select TOP 2000 a.Year    
 , a.Month    
 , a.BranchCode    
 , a.BranchName    
 , a.Area    
 , a.BranchHeadID    
 , replace(a.BranchHeadName,',','.') BranchHeadName    
 , a.SalesHeadID    
 , replace(a.SalesHeadName,',','.') SalesHeadName    
 , a.SalesCoordinatorID    
 , replace(a.SalesCoordinatorName,',','.') SalesCoordinatorName    
 , a.SalesmanID    
 , replace(replace(a.SalesmanName,',','.'),'''','`') SalesmanName    
 , convert(varchar, isnull(a.JoinDate, '19000101'),112)    
 , convert(varchar, isnull(a.ResignDate, '19000101'),112)    
 , convert(varchar, isnull(a.GradeDate, '19000101'),112)    
 , isnull(a.Grade,1)    
 , a.ModelCatagory    
 , a.SalesType    
 , a.InvoiceNo    
 , convert(varchar, isnull(a.InvoiceDate, '19000101'),112)    
 , a.SoNo    
 , a.SalesModelCode    
 , a.SalesModelYear    
 , a.SalesModelDesc    
 , a.FakturPolisiDesc    
 , a.MarketModel    
 , a.ColourCode    
 , a.ColourName    
 --, a.ColourNameInd  
 , a.GroupMarketModel    
 , a.ColumnMarketModel    
 , isnull(a.ChassisCode, '') ChassisCode    
 , convert(varchar,isnull(a.ChassisNo, 0)) ChassisNo    
 , isnull(a.EngineCode, '') EngineCode    
 , convert(varchar,isnull(a.EngineNo, 0)) EngineNo    
 , isnull(a.FakturPolisiNo, '') FakturPolisiNo    
 , convert(varchar, isnull(a.FakturPolisiDate, '19000101'),112) FakturPolisiDate    
 , a.Status    
 , a.CreatedBy    
 , convert(varchar, isnull(a.CreatedDate, '19000101'),112)    
 , a.LastUpdateBy    
 , convert(varchar, isnull(a.LastUpdateDate, '19000101'),112)    
from omHstInquirySales a    
where a.CompanyCode = @CompanyCode    
-- and a.LastUpdateBy not like 'TR#%'    
 and SalesHeadID = '00421'    
 --and isnull(a.CreatedDate, convert(datetime, '19000101'))    
 --> isnull((    
 --   select top 1 LastSendDate    
 --  from gnMstSendSchedule    
 --    where DataType = 'SHIST'    
 --    order by LastSendDate desc    
 --   ), convert(datetime, '18990101'))    
order by a.CreatedDate    
    
set @TotalItem = (select count(*) from @T_SHIST_DTL)     
set @LastDate  = (select top 1 CreatedDate from @T_SHIST_DTL order by CreatedDate desc)    
    
insert into @T_SHIST     
select 'HSHIST'     
+ left(@DealerCode + replicate(' ',10),10)    
+ left('2000000' + replicate(' ',10),10)    
+ left((select BranchName     
   from GnMstOrganizationDtl     
   where CompanyCode = @CompanyCode     
    and BranchCode = @BranchCode)     
  + replicate(' ',50),50)    
+ right(replicate('0', 6) + convert(varchar, @TotalItem), 6)    
+ (select top 1 case ProductType    
  when '2W' then 'A'     
  when '4W' then 'B'     
  else 'C'      
  end     
   from gnMstCoProfile    
  where CompanyCode = @CompanyCode    
    and BranchCode = @BranchCode)    
+ replicate(' ', 480)    
, 0    
, 0    
    
insert into @T_SHIST    
select distinct '1'    
 + LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchName,'') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.Area,'') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadName,'-') + replicate(' ', 100), 100)    
 + replicate(' ', 226)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
, '1'    
    
from @T_SHIST_DTL a    
group by a.Year    
 , a.Month    
 , a.BranchCode    
 , a.BranchName    
 , a.Area    
 , a.BranchHeadID    
 , a.BranchHeadName    
     
insert into  @T_SHIST    
select distinct '2'    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadName, '-') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorName, '-') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanName, '-') + replicate(' ', 100), 100)    
 + convert(varchar, isnull(a.JoinDate, '19000101'),112)    
 + convert(varchar, isnull(a.ResignDate, '19000101'),112)    
 + convert(varchar, isnull(a.GradeDate, '19000101'),112)    
 + LEFT(isnull(a.Grade, '') + replicate(' ', 50), 50)    
 + replicate(' ', 143)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
, '2'    
from @T_SHIST_DTL a    
group by a.Year    
 , a.Month    
 , a.BranchCode    
 , a.BranchName    
 , a.Area    
 , a.BranchHeadID    
 , a.BranchHeadName    
 , a.SalesHeadID    
 , a.SalesHeadName    
 , a.SalesCoordinatorID    
 , a.SalesCoordinatorName    
 , a.SalesmanID    
 , a.SalesmanName    
 , a.JoinDate    
 , a.ResignDate    
 , a.GradeDate    
 , a.Grade    
     
insert into @T_SHIST    
select distinct '3'    
 + LEFT(isnull(a.ModelCatagory, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.SalesType, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.InvoiceNo, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.InvoiceDate, '19000101'),112)    
 + LEFT(isnull(a.SoNo, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesModelCode, '') + replicate(' ', 20), 20)    
 + RIGHT(replicate('0', 4) + isnull(a.SalesModelYear, '') , 4)    
 + LEFT(isnull(a.SalesModelDesc, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.FakturPolisiDesc, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.MarketModel, '') + replicate(' ', 100), 100)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisNo, '') + replicate(' ', 10), 10)    
, LEFT(isnull(a.SoNo, '') + replicate(' ', 15), 15) + '(1)'    
from @T_SHIST_DTL a    
    
insert into @T_SHIST    
select distinct '4'    
 + LEFT(isnull(a.ColourCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ColourName, '') + replicate(' ', 100), 100)    
-- + LEFT(isnull(a.ColourNameInd, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.GroupMarketModel, '') + replicate(' ', 100), 100)    
 + LEFT(isnull(a.ColumnMarketModel, '') + replicate(' ', 100), 100)    
 + isnull(a.Status, '0')    
 + LEFT(isnull(a.CreatedBy, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.CreatedDate, '19000101'),112)    
 + LEFT(isnull(a.LastUpdateBy, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.LastUpdateDate, '19000101'), 112)    
 + LEFT(isnull(a.ChassisCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisNo, '') + replicate(' ', 10), 10)    
 + LEFT(isnull(a.EngineCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.EngineNo, '') + replicate(' ', 10), 10)    
 + LEFT(isnull(a.FakturPolisiNo, '') + replicate(' ', 15), 15)    
 + convert(varchar, isnull(a.FakturPolisiDate, '19000101'), 112)    
 + replicate(' ', 27)    
, LEFT(isnull(a.Year, '') + replicate(' ', 4), 4)    
 + RIGHT(replicate('0',2) + isnull(a.Month, ''), 2)    
 + LEFT(isnull(a.BranchCode,'') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.BranchHeadID,'-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesHeadID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesCoordinatorID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.SalesmanID, '-') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisCode, '') + replicate(' ', 15), 15)    
 + LEFT(isnull(a.ChassisNo, '') + replicate(' ', 10), 10)    
,LEFT(isnull(a.SoNo, '') + replicate(' ', 15), 15) + '(2)'    
from @T_SHIST_DTL a    
    
select @LastDate as LastDate    
    
select line from @T_SHIST    
order by SeqNo,SeqNo1    
    
--;with x as(select TOP 2000 * from omHstInquirySales a    
--   where a.CompanyCode = @CompanyCode    
--   and a.LastUpdateBy not like 'TR#%')    
--update x set LastUpdateBy=('TR#' + LastUpdateBy) , LastUpdateDate = getdate()
GO
create procedure [dbo].[uspfn_StnkExtensionOutstanding]
	@CompanyCode nvarchar(20),
	@BranchCode varchar(20)
as

--set @CompanyCode = '6006406'

declare @CurrDate datetime, @Param1 as varchar(20)
declare @t_rem as table
(
	RemCode varchar(20),
	RemDate datetime,
	RemValue int
)

set @CurrDate = getdate()

-- REM3DAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REM3DAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REM3DAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBDAYSCALL
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBDAYSCALL'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBDAYSCALL', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMHOLIDAYS
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMHOLIDAYS'), '0')
insert into @t_rem (RemCode, RemDate) values('REMHOLIDAYS', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMSTNKEXT
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMSTNKEXT'), '0')
insert into @t_rem (RemCode, RemDate) values('REMSTNKEXT', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')

-- REMBPKB
set @Param1 = isnull((select SettingParam1 from CsSettings where CompanyCode = @CompanyCode and SettingCode = 'REMBPKB'), '0')
insert into @t_rem (RemCode, RemDate) values('REMBPKB', left(convert(varchar, dateadd(month, -convert(int, @Param1), @CurrDate), 112), 6) + '01')
   
declare @CurrentMonth tinyint;
declare @PreviousMonth tinyint;
declare @NextMonth tinyint;
declare @CurrentDay tinyint;
declare @DateComparison datetime;
  
set @DateComparison = (select RemDate from @t_rem where RemCode = 'REMBDAYSCALL');
set @CurrentMonth = datepart(month, @DateComparison);
set @NextMonth = @CurrentMonth + 1;
set @PreviousMonth = @CurrentMonth - 1;

select a.CustomerCode
     , b.CustomerName
	 , StnkExpiredDate = isnull(c.StnkExpiredDate, isnull(c.StnkDate, a.BpkDate)) 
	 , a.PoliceRegNo
  from CsCustomerVehicleView a
 inner join CsCustomerView b 
    on b.CompanyCode = a.CompanyCode
   and b.CustomerCode = a.CustomerCode
  left join CsStnkExt c
    on c.CompanyCode = a.CompanyCode
   and c.CustomerCode = a.CustomerCode
   and c.Chassis = a.Chassis
 where a.CompanyCode like @CompanyCode 
   and a.BranchCode like @BranchCode
   and isnull(c.Chassis, '') = ''
   and isnull(c.StnkExpiredDate, isnull(c.StnkDate, a.BpkDate)) >= (select RemDate from @t_rem where RemCode = 'REMSTNKEXT')
GO
CREATE Procedure [dbo].[Uspfn_UpdateSSReturnNo] @CompanyCode varchar(15), @BranchCode varchar(15),
@ProductType varchar(2), @ReturnNo varchar(25), @PartNo varchar(25), @IsSaveProcess bit, @LastUpdateBy varchar(25)
as
SELECT
	a.CompanyCode
	, a.BranchCode
	, d.ProductType
	, d.ServiceNo
	, a.PartNo
	, (SELECT TOP 1 PartSeq FROM svTrnSrvItem WHERE CompanyCode = a.CompanyCode AND BranchCode = a.BranchCode 
        AND ProductType = d.ProductType AND ServiceNo = d.ServiceNo AND PartNo = a.PartNo AND SupplySlipNo = 
        c.DocNo ORDER BY PartSeq DESC) PartSeq
	, a.ReturnNo SSReturnNo
	, b.ReturnDate SSReturnDate
INTO
	#SrvItem
FROM 
	spTrnSRturSSDtl a WITH(NOLOCK, NOWAIT)
	LEFT JOIN spTrnSRturSSHdr b WITH(NOLOCK, NOWAIT) ON a.CompanyCode = b.CompanyCode
		AND a.BranchCode = b.BranchCode
		AND a.ReturnNo = b.ReturnNo
	LEFT JOIN spTrnSORDHdr c WITH(NOLOCK, NOWAIT) ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.DocNo = c.DocNo
	LEFT JOIN svTrnService d WITH(NOLOCK, NOWAIT) ON a.CompanyCode = d.CompanyCode
		AND a.BranchCode = d.BranchCode
		AND c.UsageDocNo = d.JobOrderNo
WHERE
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode
	AND d.ProductType = @ProductType
	AND a.ReturnNo = @ReturnNo
	AND a.PartNo = @PartNo

UPDATE
	svTrnSrvItem
SET
	SSReturnNo = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnNo ELSE '' END 
    , SSReturnDate = CASE @IsSaveProcess WHEN '1' THEN b.SSReturnDate ELSE '1900-01-01 00:00:00.000' END
	, LastupdateBy = @LastupdateBy
	, LastupdateDate = GETDATE()
FROM
	svTrnSrvItem a, #SrvItem b
WHERE
	a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode
	AND a.ProductType = b.ProductType
	AND a.ServiceNo = b.ServiceNo
	AND a.PartNo = b.PartNo
	AND a.PartSeq = b.PartSeq

DROP TABLE #SrvItem
GO
create procedure [dbo].[uspfn_UpdateCsCustFeedback]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..CsCustFeedback a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..CsCustFeedback (
		   CompanyCode
		 , CustomerCode
		 , Chassis
		 , FeedbackA
		 , FeedbackB
		 , FeedbackC
		 , FeedbackD
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsManual
		 )
	select CompanyCode = @CompanyCode_B
	     , a.CustomerCode
	     , a.Chassis
	     , a.FeedbackA
	     , a.FeedbackB
	     , a.FeedbackC
	     , a.FeedbackD
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsManual
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create PROCEDURE [dbo].[uspfn_InquiryITSWithStatusByType]
	@CompanyCode		varchar(15),
	@BranchCode			varchar(15),
	@StartDate			varchar(20),
	@EndDate			varchar(20),
	@LastStartDate		varchar(20),
	@LastEndDate		varchar(20),
	@Area				varchar(100),
	@GroupModel			varchar(100),
	@TipeKendaraan		varchar(100),
	@Variant			varchar(100),
	@Summary			bit
AS
begin

--exec uspfn_InquiryITSWithStatusByType '', '', '20140401', '20140415', '20140301', '20140328', '', '', '', '', 1

--Declare @CompanyCode	varchar(15)
--declare @BranchCOde		varchar(15)
--Declare @StartDate		varchar(20)
--Declare @EndDate		varchar(20)
--Declare @LastStartDate	varchar(20)
--Declare @LastEndDate	varchar(20)
--Declare @Area			varchar(100)
--declare @GroupModel		varchar(100)
--declare @TipeKendaraan	varchar(100)
--declare @Variant		varchar(100)
--declare @Summary		bit

--set @CompanyCode = ''
--set @BranchCode = ''
--set @StartDate = '20140401'
--set @EndDate = '20140415'
--set @LastStartDate = '20140301'
--set @LastEndDate = '20140328'
--set @Area = ''
--set @GroupModel = ''
--set @TipeKendaraan = ''
--set @Variant = ''
--set @Summary = 0

select * into #tThis from(
select c.CompanyCode, c.BranchCode 	
	, c.LastProgress
	, c.InquiryNumber
	, convert(varchar,c.UpdateDate,112)	UpdateDate
	, CASE 
		 WHEN day(c.UpdateDate) >= 1 and day(c.UpdateDate) <= 7  THEN 1
		 WHEN day(c.UpdateDate) >= 8 and day(c.UpdateDate) <= 14  THEN 2
		 WHEN day(c.UpdateDate) >= 15 and day(c.UpdateDate) <= 21  THEN 3
		 WHEN day(c.UpdateDate) >= 22 and day(c.UpdateDate) <= 28  THEN 4
		 WHEN day(c.UpdateDate) >= 29 and day(c.UpdateDate) <= 31  THEN 5
	   END WeekInt	
from SuzukiR4..pmStatusHistory c with (nolock, nowait) 
INNER JOIN SuzukiR4..pmHstITS a with (nolock, nowait)  ON -- penambahan 1 Apr 14
				a.CompanyCode = c.CompanyCode AND
				a.BranchCode = c.BranchCode AND
				a.InquiryNumber = c.InquiryNumber
where
	(case when c.CompanyCode='6015402' then '6015401' when c.CompanyCode='6051402' then '6051401' else c.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and c.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and c.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')	
	and (convert(varchar,c.UpdateDate,112) between @StartDate and @EndDate
	or (convert(varchar,c.UpdateDate,112) < @StartDate 
	and (c.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress<>'P'
												and convert(varchar,h.UpdateDate,112)<@StartDate)
	or  c.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP')
												and convert(varchar,h.UpdateDate,112)<@StartDate)
	or  c.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP','SPK')
												and convert(varchar,h.UpdateDate,112)<@StartDate))))	
union all
select   
h.CompanyCode
, h.BranchCode 
, 'SPK' LastProgress
, h.InquiryNumber
, convert(varchar,h.SPKDate,112)	SPKDate
, CASE 
	 WHEN day(h.SPKDate) >= 1 and day(h.SPKDate) <= 7  THEN 1
	 WHEN day(h.SPKDate) >= 8 and day(h.SPKDate) <= 14  THEN 2
	 WHEN day(h.SPKDate) >= 15 and day(h.SPKDate) <= 21  THEN 3
	 WHEN day(h.SPKDate) >= 22 and day(h.SPKDate) <= 28  THEN 4
	 WHEN day(h.SPKDate) >= 29 and day(h.SPKDate) <= 31  THEN 5
   END WeekInt	
from SuzukiR4..pmHstITS h
where 
(case when h.CompanyCode='6015402' then '6015401' when h.CompanyCode='6051402' then '6051401' else h.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and h.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and h.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')
 and convert(varchar,h.SPKDate,112) between @StartDate and @EndDate 
 and not exists (select top 1 1 from SuzukiR4..pmStatusHistory
                  where CompanyCode=h.CompanyCode
                    and BranchCode=h.BranchCode
                    and InquiryNumber=h.InquiryNumber)    
) #tThis order by CompanyCode, BranchCode

--select * into #tThis from(  --- penambahan 23 april 14
--select * from #tThis1
--union all
--select c.CompanyCode, c.BranchCode 	
--	, 'LOST' LastProgress
--	, c.InquiryNumber
--	, convert(varchar,c.UpdateDate,112)	UpdateDate
--	, CASE 
--		 WHEN day(c.UpdateDate) >= 1 and day(c.UpdateDate) <= 7  THEN 1
--		 WHEN day(c.UpdateDate) >= 8 and day(c.UpdateDate) <= 14  THEN 2
--		 WHEN day(c.UpdateDate) >= 15 and day(c.UpdateDate) <= 21  THEN 3
--		 WHEN day(c.UpdateDate) >= 22 and day(c.UpdateDate) <= 28  THEN 4
--		 WHEN day(c.UpdateDate) >= 29 and day(c.UpdateDate) <= 31  THEN 5
--	   END WeekInt	
--from SuzukiR4..pmStatusHistory c with (nolock, nowait) 
--inner join #tThis1 on #tThis1.CompanyCode = c.CompanyCode
--	and #tThis1.BranchCode = c.BranchCode
--	and #tThis1.InquiryNumber = c.InquiryNumber
--	and #tThis1.LastProgress = 'SPK' 
--where c.LastProgress = 'LOST'		
--and convert(varchar, #tThis1.UpdateDate, 112) between @StartDate and @EndDate
--) #tThis order by CompanyCode, BranchCode

select * into #tLast from(
select c.CompanyCode, c.BranchCode 
	, c.LastProgress
	, c.InquiryNumber		 
	, convert(varchar,c.UpdateDate,112)	UpdateDate
	, CASE 
		 WHEN day(c.UpdateDate) >= 1 and day(c.UpdateDate) <= 7  THEN 1
		 WHEN day(c.UpdateDate) >= 8 and day(c.UpdateDate) <= 14  THEN 2
		 WHEN day(c.UpdateDate) >= 15 and day(c.UpdateDate) <= 21  THEN 3
		 WHEN day(c.UpdateDate) >= 22 and day(c.UpdateDate) <= 28  THEN 4
		 WHEN day(c.UpdateDate) >= 29 and day(c.UpdateDate) <= 31  THEN 5
	   END WeekInt		   
from SuzukiR4..pmStatusHistory c with (nolock, nowait) 
INNER JOIN SuzukiR4..pmHstITS a WITH (NOLOCK, NOWAIT) ON -- penambahan 1 Apr 14
				a.CompanyCode = c.CompanyCode AND
				a.BranchCode = c.BranchCode AND
				a.InquiryNumber = c.InquiryNumber -- join Last Progress dihapus, 23 Apr 14
where
	(case when c.CompanyCode='6015402' then '6015401' when c.CompanyCode='6051402' then '6051401' else c.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and c.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and c.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')
	and (convert(varchar,c.UpdateDate,112) between @LastStartDate and @LastEndDate
	or (convert(varchar,c.UpdateDate,112) < @LastStartDate 
	and (c.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress<>'P'
												and convert(varchar,h.UpdateDate,112)<@LastStartDate)
	or  c.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP')
												and convert(varchar,h.UpdateDate,112)<@LastStartDate)
	or  c.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP','SPK')
												and convert(varchar,h.UpdateDate,112)<@LastStartDate))))	
union all
select   
h.CompanyCode
, h.BranchCode 
, 'SPK' LastProgress
, h.InquiryNumber
, convert(varchar,h.SPKDate,112) SPKDate
, CASE 
	 WHEN day(h.SPKDate) >= 1 and day(h.SPKDate) <= 7  THEN 1
	 WHEN day(h.SPKDate) >= 8 and day(h.SPKDate) <= 14  THEN 2
	 WHEN day(h.SPKDate) >= 15 and day(h.SPKDate) <= 21  THEN 3
	 WHEN day(h.SPKDate) >= 22 and day(h.SPKDate) <= 28  THEN 4
	 WHEN day(h.SPKDate) >= 29 and day(h.SPKDate) <= 31  THEN 5
   END WeekInt	
from SuzukiR4..pmHstITS h
where 
(case when h.CompanyCode='6015402' then '6015401' when h.CompanyCode='6051402' then '6051401' else h.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and h.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and h.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')
and convert(varchar,h.SPKDate,112) between @LastStartDate and @LastEndDate 
 and not exists (select top 1 1 from SuzukiR4..pmStatusHistory
                  where CompanyCode=h.CompanyCode
                    and BranchCode=h.BranchCode
                    and InquiryNumber=h.InquiryNumber)     																					
) #tLast order by CompanyCode, BranchCode

select * into #t1 from(
select 
	a.CompanyCode
	, a.BranchCode 
	, isnull((select TOP 1 GroupModel 
						 from SuzukiR4..msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan
	, isnull(b.Variant,'') Variant
	, convert(varchar, b.InquiryDate, 112) InquiryDate
	, a.UpdateDate
	, a.LastProgress	
	, a.WeekInt
	, a.InquiryNumber
from #tThis a with (nolock, nowait)												
inner join SuzukiR4..pmHstITS b with (nolock, nowait) on b.CompanyCode = a.CompanyCode and b.BranchCode = a.BranchCode and b.InquiryNumber = a.InquiryNumber  
where
	(case when @TipeKendaraan <> '' then b.TipeKendaraan else @TipeKendaraan end) = @TipeKendaraan 
	and (case when @Variant <> '' then b.Variant else @Variant end) = @Variant 
	--and (convert(varchar, b.InquiryDate, 112) < @StartDate or convert(varchar, a.UpdateDate, 112) between @StartDate and @EndDate)
	) #t1
order by CompanyCode, BranchCode, TipeKendaraan, Variant
	
select * into #t4 from(
select 	a.CompanyCode
	, a.BranchCode 
	, isnull((select TOP 1 GroupModel 
						 from SuzukiR4..msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') TipeKendaraan
	, isnull(b.Variant,'') Variant
	, convert(varchar, b.InquiryDate, 112) InquiryDate
	, a.UpdateDate
	, a.LastProgress
	, a.WeekInt	 
	, a.InquiryNumber
from #tLast a with (nolock, nowait) 
left join SuzukiR4..pmHstITS b with (nolock, nowait) on b.CompanyCode = a.CompanyCode and b.BranchCode = a.BranchCode and b.InquiryNumber = a.InquiryNumber  
where
	(case when @TipeKendaraan <> '' then b.TipeKendaraan else @TipeKendaraan end) = @TipeKendaraan 
	and (case when @Variant <> '' then b.Variant else @Variant end) = @Variant 
	--and (convert(varchar, b.InquiryDate, 112) < @LastStartDate or convert(varchar, a.UpdateDate, 112) between @LastStartDate and @LastEndDate)
	) #t4 order by CompanyCode, BranchCode, TipeKendaraan, Variant

select * into #tVehicle from(
select distinct CompanyCode, BranchCode, TipeKendaraan
from #t1 
where (case when @GroupModel <> '' then TipeKendaraan else @GroupModel end) = @GroupModel
group by CompanyCode, BranchCode, TipeKendaraan
union all
select distinct CompanyCode, BranchCode, TipeKendaraan
from #t4 
where (case when @GroupModel <> '' then TipeKendaraan else @GroupModel end) = @GroupModel
group by CompanyCode, BranchCode, TipeKendaraan
) #tVehicle

select * into #t2 from(
select SeqNo, LookupValue LastProgress
from SuzukiR4..gnMstLookupDtl
where CodeID = 'PSTS'
) #t2 order by SeqNo
	
select * into #t3 from(
select 1 WeekInt union select 2 WeekInt union select 3 WeekInt union select 4 WeekInt union select 5 WeekInt
) #t3
	
select * into #tUnion1 from(
select CompanyCode, BranchCode, TipeKendaraan--, InquiryNumber
, LastProgress 

-- Outs
, (select count(*) from #t1
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and InquiryDate < @StartDate and UpdateDate < @StartDate ) SaldoAwal
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 1 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts1	
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 2 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts2		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 3 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts3		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 4 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts4
,(select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 5 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts5
,(select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) TotalWeekOuts

-- New
,(select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress 
	and WeekInt = 1 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week1	
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress 
	and WeekInt = 2 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week2		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress 
	and WeekInt = 3 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week3		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress 
	and WeekInt = 4 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week4
,(select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress 
	and WeekInt = 5 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week5
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress
	and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) TotalWeek
from #t1 a
group by CompanyCode, BranchCode, TipeKendaraan, LastProgress--, InquiryNumber
) #tUnion1

select * into #tUnion2 from(
select CompanyCode, BranchCode, TipeKendaraan
, LastProgress 

-- Outs
, (select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and InquiryDate < @LastStartDate and UpdateDate < @LastStartDate) SaldoAwalLast
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 1 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts1Last	
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan  
	and LastProgress = a.LastProgress and WeekInt = 2 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts2Last		
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan  
	and LastProgress = a.LastProgress and WeekInt = 3 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts3Last		
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan  
	and LastProgress = a.LastProgress and WeekInt = 4 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts4Last
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 5 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts5Last
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan  
	and LastProgress = a.LastProgress and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) TotalWeekOutsLast

-- New
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 1  
	and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week1Last	-- perhitungan InquiryDate between dihapus (23 apr 14)
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 2 
	and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week2Last		
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan 
	and LastProgress = a.LastProgress and WeekInt = 3 
	and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week3Last		
, (select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan  
	and LastProgress = a.LastProgress and WeekInt = 4 
	and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week4Last
, (select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan  
	and LastProgress = a.LastProgress and WeekInt = 5 
	and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week5Last
,(select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan
	and LastProgress = a.LastProgress 
	and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) TotalWeekLast
		
from #t4 a

group by CompanyCode, BranchCode, TipeKendaraan
, LastProgress 	
) #tUnion2
			
-- This Month
select * into #tGabung from(	
select distinct
	a.GroupNo
	, a.Area
	, a.DealerCode CompanyCode
	, a.DealerAbbreviation CompanyName
	, b.OutletCode BranchCode 
	, b.OutletAbbreviation BranchName
	, d.TipeKendaraan
	
	, e.SeqNo
	, e.LastProgress		
	
	, isnull(g.SaldoAwal, 0) SaldoAwal
	, isnull(g.WeekOuts1, 0) WeekOuts1
	, isnull(g.WeekOuts2, 0) WeekOuts2
	, isnull(g.WeekOuts3, 0) WeekOuts3
	, isnull(g.WeekOuts4, 0) WeekOuts4
	, isnull(g.WeekOuts5, 0) WeekOuts5
	, isnull(g.TotalWeekOuts, 0) TotalWeekOuts
	
	, isnull(g.Week1, 0) Week1
	, isnull(g.Week2, 0) Week2
	, isnull(g.Week3, 0) Week3
	, isnull(g.Week4, 0) Week4
	, isnull(g.Week5, 0) Week5
	, isnull(g.TotalWeek, 0) TotalWeek
	
	, isnull(g.TotalWeekOuts, 0) + isnull(g.TotalWeek, 0) Total
	
	, isnull(h.SaldoAwalLast, 0) SaldoAwalLast
	, isnull(h.WeekOuts1Last, 0) WeekOuts1Last
	, isnull(h.WeekOuts2Last, 0) WeekOuts2Last
	, isnull(h.WeekOuts3Last, 0) WeekOuts3Last
	, isnull(h.WeekOuts4Last, 0) WeekOuts4Last
	, isnull(h.WeekOuts5Last, 0) WeekOuts5Last
	, isnull(h.TotalWeekOutsLast, 0) TotalWeekOutsLast
	
	, isnull(h.Week1Last, 0) Week1Last
	, isnull(h.Week2Last, 0) Week2Last
	, isnull(h.Week3Last, 0) Week3Last
	, isnull(h.Week4Last, 0) Week4Last
	, isnull(h.Week5Last, 0) Week5Last
	, isnull(h.TotalWeekLast, 0) TotalWeekLast
	
	, isnull(h.TotalWeekOutsLast, 0) + isnull(h.TotalWeekLast, 0) TotalLast
	
	,cast((case when isnull(h.TotalWeekOutsLast, 0) + isnull(h.TotalWeekLast, 0) = 0 then 0 else (isnull(g.TotalWeekOuts, 0) + isnull(g.TotalWeek, 0))/ cast((isnull(h.TotalWeekOutsLast, 0) + isnull(h.TotalWeekLast, 0)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent

from SuzukiR4..gnMstDealerMapping a with (nolock, nowait)
left join SuzukiR4..gnMstDealerOutletMapping b with (nolock, nowait) on a.DealerCode = b.DealerCode
inner join #tVehicle d with (nolock, nowait) on d.CompanyCode = a.DealerCode and d.BranchCode = b.OutletCode
left join #t2 e with (nolock, nowait) on e.SeqNo > 0 
left join #tUnion1 g with (nolock, nowait) on g.CompanyCode = a.DealerCode and g.BranchCode = b.OutletCode and g.TipeKendaraan =  d.TipeKendaraan and g.LastProgress = e.LastProgress
left join #tUnion2 h with (nolock, nowait) on h.CompanyCode = a.DealerCode and h.BranchCode = b.OutletCode and h.TipeKendaraan =  d.TipeKendaraan and h.LastProgress = e.LastProgress
where 
	a.IsActive = 1
	and (a.Area like Case when @Area <> '' then case when (@Area = 'JABODETABEK' or @Area = 'CABANG') then 'JABODETABEK' else @Area end else '%%' end
			or  a.Area like Case when @Area <> '' then case when (@Area='JABODETABEK' or @Area='CABANG') then 'CABANG' else @Area end else '%%' end)		  
	and (case when a.DealerCode='6015402' then '6015401' when a.DealerCode='6051402' then '6051401' else a.DealerCode end) like 
				case when @CompanyCode = '' then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and b.OutletCode  like case when @BranchCode='' then '%%' else @BranchCode end
	) #tGabung
order by GroupNo, CompanyCode, BranchCode, TipeKendaraan, SeqNo
	
-- Level 0
select * into #tFinal from(
select 
	1 OrderNo3
	, 0 OrderNo
	, 0 OrderNo1
	, 0 OrderNo2
	
	,  GroupNo
	,  Area
	,  CompanyCode
	,  CompanyName
	,  BranchCode 
	,  BranchName
	,  TipeKendaraan
	,  SeqNo
	,  LastProgress		
	
	, SaldoAwalLast	
	, WeekOuts1Last	
	, WeekOuts2Last		
	, WeekOuts3Last		
	, WeekOuts4Last
	, WeekOuts5Last
	, TotalWeekOutsLast
	, Week1Last
	, Week2Last
	, Week3Last
	, Week4Last
	, Week5Last
	, TotalWeekLast
	, TotalLast
	
	,  SaldoAwal	
	,  WeekOuts1	
	,  WeekOuts2		
	,  WeekOuts3		
	,  WeekOuts4
	,  WeekOuts5
	,  TotalWeekOuts
	,  Week1
	,  Week2
	,  Week3
	,  Week4
	,  Week5
	,  TotalWeek	
	,  Total
	
	, TotPercent

	from #tGabung
union
-- Group per Tipe Kendaraan
select 
	1 OrderNo3
	, 1 OrderNo
	, 0 OrderNo1
	, 0 OrderNo2
	
	,  GroupNo
	,  Area
	,  CompanyCode
	,  CompanyName
	,  '' BranchCode 
	,  '' BranchName
	,  TipeKendaraan
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by 
	 GroupNo
	,   Area
	,   CompanyCode
	,   CompanyName
	,   BranchCode 
	,   BranchName
	,   TipeKendaraan	
	,   SeqNo
	,   LastProgress	
union
-- Group per Company
select 
	1 OrderNo3
	, 1 OrderNo
	, 1 OrderNo1
	, 0 OrderNo2

	,  GroupNo
	,  Area
	,  '' CompanyCode
	,  'ZTOTAL' CompanyName
	,  '' BranchCode 
	,  '' BranchName
	,  TipeKendaraan
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by  GroupNo
	,   Area	
	,  TipeKendaraan
	,   SeqNo
	,   LastProgress				
union
-- Group per Area
select 
	1 OrderNo3
	, 1 OrderNo
	, 1 OrderNo1
	, 1 OrderNo2
	
	,  999999 GroupNo	
	,  'TOTAL' Area	
	,  'TOTAL' CompanyCode
	,  'ZTOTAL' CompanyName	
	,  '' BranchCode 
	,  '' BranchName		
	,  TipeKendaraan
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by TipeKendaraan
	,  SeqNo
	,  LastProgress
union
-- TOTAL
select 
	2 OrderNo3
	, 1 OrderNo
	, 1 OrderNo1
	, 2 OrderNo2
	
	,  0 GroupNo	
	,  'TOTAL' Area	
	,  '' CompanyCode
	,  'ZTOTAL' CompanyName	
	,  '' BranchCode 
	,  '' BranchName		
	,  'TOTAL' TipeKendaraan
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(TotalLast) + sum(TotalWeek) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by SeqNo
	,  LastProgress) #tFinal

if(@Summary = 0)
begin	
select 
		  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  SeqNo
		 ,  LastProgress		 		
		 
		 ---- LAST MONTH	
		 , sum(SaldoAwalLast) SaldoAwalLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts1Last) END WeekOuts1Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts2Last) END WeekOuts2Last  
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts3Last) END WeekOuts3Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts4Last) END WeekOuts4Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts5Last) END WeekOuts5Last		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END TotalWeekOutsLast
		 , sum(Week1Last) Week1Last
		 , sum(Week2Last) Week2Last
		 , sum(Week3Last) Week3Last
		 , sum(Week4Last) Week4Last
		 , sum(Week5Last) Week5Last
		 , sum(TotalWeekLast) TotalWeekLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast) TotalLast	 
		 
		 ---- THIS MONTH	
		 , sum(SaldoAwal) SaldoAwal
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts1) END WeekOuts1
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts2) END WeekOuts2
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts3) END WeekOuts3
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts4) END WeekOuts4
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts5) END WeekOuts5		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END TotalWeekOuts
		 , sum(Week1) Week1
		 , sum(Week2) Week2 
		 , sum(Week3) Week3
		 , sum(Week4) Week4
		 , sum(Week5) Week5
		 , sum(TotalWeek) TotalWeek
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek) Total
		 
		 , cast((case when (CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) = 0 then 0 else 
		   (CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek))/ cast((CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent
 from #tFinal
 where OrderNo2 <> 1
 group by  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  SeqNo
		 ,  LastProgress	
	order by OrderNo3 Asc,GroupNo asc, CompanyName asc,Area asc,OrderNo1 asc,OrderNo asc,BranchCode asc,OrderNo2 Asc,SeqNo Asc

select 
		  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  SeqNo
		 ,  LastProgress		 		
		 
		 ---- LAST MONTH	
		 , sum(SaldoAwalLast) SaldoAwalLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts1Last) END WeekOuts1Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts2Last) END WeekOuts2Last  
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts3Last) END WeekOuts3Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts4Last) END WeekOuts4Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts5Last) END WeekOuts5Last		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END TotalWeekOutsLast
		 , sum(Week1Last) Week1Last
		 , sum(Week2Last) Week2Last
		 , sum(Week3Last) Week3Last
		 , sum(Week4Last) Week4Last
		 , sum(Week5Last) Week5Last
		 , sum(TotalWeekLast) TotalWeekLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast) TotalLast	 
		 
		 ---- THIS MONTH	
		 , sum(SaldoAwal) SaldoAwal
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts1) END WeekOuts1
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts2) END WeekOuts2
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts3) END WeekOuts3
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts4) END WeekOuts4
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts5) END WeekOuts5		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END TotalWeekOuts
		 , sum(Week1) Week1
		 , sum(Week2) Week2 
		 , sum(Week3) Week3
		 , sum(Week4) Week4
		 , sum(Week5) Week5
		 , sum(TotalWeek) TotalWeek
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek) Total
		 
		 , cast((case when (CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) = 0 then 0 else 
		   (CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek))/ cast((CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent
 from #tFinal
 where GroupNo <> 2 and OrderNo2 <> 2
 group by  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  SeqNo
		 ,  LastProgress
	 order by  OrderNo3 Asc,  TipeKendaraan Asc, GroupNo asc,  CompanyName asc, OrderNo asc, OrderNo1 asc, BranchCode asc, OrderNo2 Asc, Area asc, SeqNo Asc 	 
end
else if (@Summary = 1)
begin
	select 
		  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  SeqNo
		 ,  LastProgress		 		
		 
		 ---- LAST MONTH	
		 , sum(SaldoAwalLast) SaldoAwalLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts1Last) END WeekOuts1Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts2Last) END WeekOuts2Last  
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts3Last) END WeekOuts3Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts4Last) END WeekOuts4Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts5Last) END WeekOuts5Last		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END TotalWeekOutsLast
		 , sum(Week1Last) Week1Last
		 , sum(Week2Last) Week2Last
		 , sum(Week3Last) Week3Last
		 , sum(Week4Last) Week4Last
		 , sum(Week5Last) Week5Last
		 , sum(TotalWeekLast) TotalWeekLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast) TotalLast	 
		 
		 ---- THIS MONTH	
		 , sum(SaldoAwal) SaldoAwal
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts1) END WeekOuts1
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts2) END WeekOuts2
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts3) END WeekOuts3
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts4) END WeekOuts4
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts5) END WeekOuts5		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END TotalWeekOuts
		 , sum(Week1) Week1
		 , sum(Week2) Week2 
		 , sum(Week3) Week3
		 , sum(Week4) Week4
		 , sum(Week5) Week5
		 , sum(TotalWeek) TotalWeek
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek) Total
		 
		 , cast((case when (CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) = 0 then 0 else 
		   (CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek))/ cast((CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent
 from #tFinal
 group by  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  SeqNo
		 ,  LastProgress
	 order by  OrderNo3 Asc,  TipeKendaraan Asc, GroupNo asc,  CompanyName asc, OrderNo asc, OrderNo1 asc, BranchCode asc, OrderNo2 Asc, Area asc, SeqNo Asc 	 
end

drop table #tThis,  #t1, #t2, #t3, #t4, #tLast, #tUnion1, #tUnion2, #tVehicle, #tGabung, #tFinal

end
GO
create procedure [dbo].[uspfn_SelectCustomerSO]
	@CompanyCode varchar(15),
	@BranchCode varchar(15),
	@UserID varchar(50)
as

begin
	declare @TOPC varchar(5);
	set @TOPC = 'TOPC';

	declare @ProfitCenter varchar(10);
	set @ProfitCenter = (select top 1 ProfitCenter from sysUserProfitCenter where UserId=@UserID);

	SELECT a.CompanyCode
	    , a.CustomerCode
		, a.CustomerName
		, a.Address1 + ' ' + a.Address2 + ' ' + a.Address3 + ' ' + a.Address4 as Address
		, ISNULL(c.LookUpValueName,'') AS TopCode
		, b.TopCode as TOPCD
		, b.GroupPriceCode
		, d.RefferenceDesc1 as GroupPriceDesc
		, b.SalesCode
	 FROM gnMstCustomer a
	 LEFT JOIN gnMstCustomerProfitCenter b 
       ON b.CompanyCode = a.CompanyCode 
      AND b.CustomerCode = a.CustomerCode
	 LEFT JOIN gnMstLookUpDtl c ON c.CompanyCode=a.CompanyCode
	  AND c.LookUpValue = b.TOPCode    
	  AND c.CodeID = @TOPC
	 LEFT JOIN omMstRefference d ON a.CompanyCode = d.CompanyCode 
	  AND d.RefferenceType = 'GRPR' 
	  AND d.RefferenceCode = b.GroupPriceCode
	WHERE a.CompanyCode = @CompanyCode
	  AND b.BranchCode = @BranchCode
	  AND b.ProfitCenterCode = @ProfitCenter
	  AND a.Status = '1'
	  AND b.SalesType = '1'
	  AND b.isBlackList = 0
	  and a.CustomerCode='200063129'
	ORDER BY CustomerCode
end
GO
CREATE procedure [dbo].[uspsync_EmployeeInit]
as

-- initial data 
insert into SyncEmployee (SyncID, SalesID, EmployeeID, EmployeeName, CompanyCode, BranchCode, DeptCode, PosCode, Grade, TeamLeaderID, IsDeleted, CreatedBy, CreatedDate, UpdatedBy, UpdatedDate, IsTransfered, TransferedID, TransferedDate)
select newid() as SyncID, a.SalesID, a.EmployeeID, b.EmployeeName, a.CompanyCode, a.BranchCode
     , a.OrgCode as DeptCode, a.PosCode, a.GradeCode as Grade, a.TeamLeaderID, 0 as IsDeleted
     , a.CreatedBy, isnull(a.CreatedDate, getdate()), a.UpdatedBy, a.UpdatedDate
     , 0 as IsTransfered, null as TransferedID, null as TransferedDate
  from gnMstEmployeeData a, gnMstEmployee b
 where 1 = 1
   and b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode
   and b.EmployeeID = a.EmployeeID
   and SalesID is not null
   and not exists (
		select 1 from SyncEmployee
		 where 1 = 1
		   and CompanyCode = a.CompanyCode
		   and SalesID = a.SalesID 
	)
GO
CREATE procedure [dbo].[uspfn_GetRetirnSSDetails] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(25)
  as
  SELECT a.*, b.*, c.CustomerCode, c.CustomerName, c.CustomerGovName, c.Address1, c.Address2, c.Address3, c.Address4, c.HPNo, c.FaxNo, c.CityCode, d.LookUpValueName as City FROM spTrnSRTurSSHdr a
  join svTrnService b ON a.CompanyCode = b.CompanyCode 
  and a.BranchCode = b.BranchCode and a.SKPNo = b.JobOrderNo
  join gnMstCustomer c
  ON a.CompanyCode = c.CompanyCode
  and a.CustomerCode = c.CustomerCode
  Inner JOIN GnMstLookupDtl d on d.CompanyCode = c.CompanyCode
	and d.CodeID = 'City'
	and d.LookupValue = c.CityCode
  where a.ReturnNo = @ReturnNo
  and a.BranchCode = @BranchCode
  and a.CompanyCode = @CompanyCode
GO
CREATE procedure [dbo].[uspfn_spSuppliers]  (  @CompanyCode varchar(10) ,@BranchCode varchar(10), @ProfitCenterCode char(3)) 
	   as
	            SELECT distinct
                    a.SupplierCode, a.SupplierName, (a.address1+' '+a.address2+' '+a.address3+' '+a.address4) as Alamat,
                    b.DiscPct as Diskon, (Case a.Status when 0 then 'Tidak Aktif' else 'Aktif' end) as [Status],
                    (SELECT Lookupvaluename FROM gnmstlookupdtl WHERE codeid='PFCN' 
                     AND lookupvalue = b.ProfitCentercode) as Profit
                FROM 
                    gnMstSupplier a
                JOIN gnmstSupplierProfitCenter b ON a.CompanyCode= b.CompanyCode
	                AND a.SupplierCode = b.SupplierCode
                WHERE 
                    a.CompanyCode=@CompanyCode
                    AND b.BranchCode=@BranchCode
					AND b. ProfitCenterCode=@ProfitCenterCode
                    AND b.isBlackList=0
                    AND a.status = 1
GO
CREATE procedure [dbo].[sp_UpdateDemandAverageTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TransDate datetime)


as

--declare @TransDate as datetime
--set @TransDate = '{0}'

select * into #t1 from (
select a.CompanyCode
,a.BranchCode
,a.PartNo
,a.DemandQty
,a.Year
,a.Month
,convert(varchar,a.Year) + right('0' + convert(varchar,a.Month),2) as date0
,convert(varchar(6), dateadd(m,-5,@TransDate), 112) date1
,convert(varchar(6), @TransDate, 112) date2
from spHstDemandItem a WITH(NOWAIT, NOLOCK) where a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode
) #T1

select * into #T2 from (
select 
a.* 
,case when date0 between date1 and date2 then 1 else 0 end as IsValid
from #t1 a
) #t2

select * into #t3 from (
select CompanyCode, BranchCode, PartNo, Sum(DemandQty) DemandQty, Sum(DemandQty)/(6*30) DemandAvg from #t2 
where IsValid = 1 and DemandQty > 0
group by CompanyCode, BranchCode, PartNo
) #t3

select * into #t4 from (
select a.companycode, a.branchcode, a.partno, 0 as DemandAvg 
from spMstItems a
left join #t3 b on a.companycode = b.companycode and a.branchcode = b.branchcode and a.partno = b.partno
where  a.CompanyCode = @CompanyCode AND a.BranchCode = @BranchCode and b.partno is null
) #t4


update spMstItems set DemandAverage = isnull(b.DemandAvg, 0)
from spMstItems a, #t4 b
where a.CompanyCode=b.CompanyCode
and a.BranchCode=b.BranchCode
and a.PartNo=b.PartNo

update spMstItems set DemandAverage = isnull(b.DemandAvg, a.DemandAverage)
from spMstItems a, #t3 b
where a.CompanyCode=b.CompanyCode
and a.BranchCode=b.BranchCode
and a.PartNo=b.PartNo

drop table #t4
drop table #t3
drop table #t2
drop table #t1
GO
--exec usprpt_spRpTrn032 '6006406','6006402','20120801', '20120831'
CREATE PROCEDURE [dbo].[usprpt_spRpTrn032CEK]
	@CompanyCode VARCHAR(20), 
	@BranchCode VARCHAR(20),
	@BegDate DATETIME,
	@EndDate DATETIME
AS
BEGIN
	(
		SELECT	pos.CompanyCode
				, pos.BranchCode
				, pos.POSNo AS DocNo
				, pos.POSDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = pos.CompanyCode and LookUpValue = pos.TypeOfGoods and CodeID = 'TPGO'
				  ) as TipePart
				, case pos.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select SupplierName from gnMstSupplier where CompanyCode = pos.CompanyCode and SupplierCode = pos.SupplierCode) CustomerName
				, 'POS' JenisDokumen
		FROM	spTrnPPOSHdr pos with(nolock, nowait)
		WHERE pos.CompanyCode = @CompanyCode 
		AND pos.BranchCode = @BranchCode
		AND (pos.Status NOT IN (2, 3, 4, 5, 6, 7))
		AND CONVERT(VARCHAR, pos.PosDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 
	)
	union
	(
		SELECT	binn.CompanyCode
				, binn.BranchCode
				, binn.BinningNo AS DocNo
				, binn.BinningDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = binn.CompanyCode and LookUpValue = binn.TypeOfGoods and CodeID = 'TPGO'
				  ) as TipePart
				, case binn.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select SupplierName from gnMstSupplier where CompanyCode = binn.CompanyCode and SupplierCode = binn.SupplierCode) CustomerName
				, 'BINNING' JenisDokumen
		FROM	spTrnPBinnHdr binn with(nolock, nowait)
		WHERE binn.CompanyCode = @CompanyCode 
		AND binn.BranchCode = @BranchCode
		AND (binn.Status NOT IN (3, 4))
		AND CONVERT(VARCHAR, binn.BinningDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 
	)
	union 
	(
		SELECT	rcv.CompanyCode
				, rcv.BranchCode
				, rcv.WRSNo AS DocNo
				, rcv.WRSDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = rcv.CompanyCode and LookUpValue = rcv.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case rcv.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select SupplierName from gnMstSupplier where CompanyCode = rcv.CompanyCode and SupplierCode = rcv.SupplierCode) CustomerName
				, 'RECEIVING' JenisDokumen
		FROM	spTrnPRcvHdr rcv with(nolock, nowait)
		WHERE	rcv.CompanyCode = @CompanyCode 
				AND rcv.BranchCode = @BranchCode
				AND rcv.Status NOT IN (3, 4)         
                AND rcv.ReceivingType = 1  -- add 30/10/2010  by dRU
                AND rcv.TransType = 4      -- add 30/10/2010  by dRU
				AND CONVERT(VARCHAR, rcv.WRSDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 
	)
	union
	(
			SELECT	rcv.CompanyCode
					, rcv.BranchCode
					, rcv.WRSNo AS DocNo
					, rcv.WRSDate AS DocDate
					, (
						select LookupValueName
						from gnMstLookUpDtl
						where CompanyCode = rcv.CompanyCode and LookUpValue = rcv.TypeOfGoods and CodeID='TPGO'
					  ) as TipePart
					, case rcv.Status 
						when 0 then '-'
						else 'x'
					end CetakSta
					, '-' glSta
					, '-' pjkSta
					, '-' tpjSta	
					, '-' postSta
					, (select SupplierName from gnMstSupplier where CompanyCode = rcv.CompanyCode and SupplierCode = rcv.SupplierCode) CustomerName
					, 'RECEIVING' JenisDokumen
			FROM	spTrnPRcvHdr rcv with(nolock, nowait)
			WHERE	rcv.CompanyCode = @CompanyCode 
					AND rcv.BranchCode = @BranchCode
					AND rcv.Status NOT IN (2, 3)
					AND rcv.ReceivingType = 3
					AND CONVERT(VARCHAR, rcv.WRSDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 
	)
	union
	(
		SELECT hpp.CompanyCode
				, hpp.BranchCode
				, hpp.HPPNo AS DocNo
				, hpp.HPPDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = hpp.CompanyCode and LookUpValue = hpp.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case hpp.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select SupplierName from gnMstSupplier where CompanyCode = hpp.CompanyCode and SupplierCode = rcv.SupplierCode) CustomerName	
				, 'HPP' JenisDokumen
		FROM	spTrnPHPP hpp with(nolock, nowait) 
				inner join spTrnPRcvHdr rcv with(nolock, nowait) on hpp.CompanyCode = rcv.CompanyCode
					and hpp.BranchCode = rcv.BranchCode
					and hpp.WRSNo = rcv.WRSNo
		WHERE	hpp.CompanyCode = @CompanyCode 
				AND hpp.BranchCode = @BranchCode
				AND (hpp.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, hpp.WRSDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 
	)
	union
	(
		SELECT a.CompanyCode
			, a.BranchCode
			, a.LampiranNo AS DocNo
			, a.CreatedDate AS DocDate
			, ISNULL((SELECT LookUpValueName 
				FROM GnMstLookUpDtl 
				WHERE CompanyCode = a.CompanyCode 
					AND CodeID = 'TPGO'
					AND LookupValue = b.TypeOfGoods),'') TipePart
			, CASE a.Status WHEN 0 then '-' else 'x' end CetakSta
			, '-' glSta
			, '-' pjkSta
			, '-' tpjSta	
			, '-' postSta
			, 'INTERNAL' CustomerName
			, 'TRANSSTOCK' JenisDokumen
		FROM spUtlStockTrfHdr a
		INNER JOIN spTrnSLmpHdr b ON a.CompanyCode = b.CompanyCode AND a.DealerCode = b.BranchCode AND a.LampiranNo = b.LmpNo
		WHERE a.CompanyCode = @CompanyCode 
			AND a.BranchCode = @BranchCode
			AND (a.Status <> 2)
			AND (CONVERT(VARCHAR,b.LmpDate,112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112))
	)
	union 
	(
		SELECT	ord.CompanyCode
				, ord.BranchCode
				, ord.DocNo AS DocNo
				, ord.DocDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = ord.CompanyCode and LookUpValue = ord.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case ord.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = ord.CompanyCode and CustomerCode = ord.CustomerCode) CustomerName
				, 'ORDER' JenisDokumen
		FROM	spTrnSORDHdr ord with(nolock, nowait) 
		WHERE	ord.CompanyCode = @CompanyCode 
				AND ord.BranchCode = @BranchCode
				AND (ord.Status NOT IN (2, 3, 4, 5))
				AND CONVERT(VARCHAR, ord.DocDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 				
	)
	union 
	(
		SELECT	supply.CompanyCode
				, supply.BranchCode
				, supply.DocNo AS DocNo
				, ord.DocDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = supply.CompanyCode and LookUpValue = ord.TypeOfGoods and CodeID = 'TPGO'
				  ) as TipePart
				, case supply.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = supply.CompanyCode and CustomerCode = ord.CustomerCode) CustomerName
				, 'SUPPLY ORDER YUYUY' JenisDokumen
		FROM	spTrnSOSupply supply with(nolock, nowait) 
				inner join spTrnSORDHdr ord with(nolock, nowait) on supply.CompanyCode = ord.CompanyCode
					and supply.BranchCode = ord.BranchCode
					and supply.DocNo = ord.DocNo				
		WHERE	supply.CompanyCode = @CompanyCode 
				AND supply.BranchCode = @BranchCode
				AND (LEN(ISNULL(supply.PickingSlipNo, '')) = 0)
				AND CONVERT(VARCHAR, ord.DocDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 				
	)
	union
	(
		SELECT	pickSlip.CompanyCode
				, pickSlip.BranchCode
				, pickSlip.PickingSlipNo AS DocNo
				, pickSlip.PickingSlipDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = pickSlip.CompanyCode and LookUpValue = pickSlip.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case pickSlip.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = pickSlip.CompanyCode and CustomerCode = pickSlip.CustomerCode) CustomerName
				, 'PICKING SLIP' JenisDokumen
		FROM	spTrnSPickingHdr pickSlip with(nolock, nowait)
		WHERE	pickSlip.CompanyCode = @CompanyCode 
				AND pickSlip.BranchCode = @BranchCode
				AND (pickSlip.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, pickSlip.PickingSlipDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112) 								
	)
	union
	(
		SELECT	rtur.CompanyCode
				, rtur.BranchCode
				, rtur.ReturnNo AS DocNo
				, rtur.ReturnDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = rtur.CompanyCode and LookUpValue = rtur.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case rtur.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = rtur.CompanyCode and CustomerCode = rtur.CustomerCode) CustomerName
				, 'RETUR SP' JenisDokumen
		FROM	spTrnSRturHdr rtur with(nolock, nowait)
		WHERE	rtur.CompanyCode = @CompanyCode 
				AND rtur.BranchCode = @BranchCode
				AND (rtur.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, rtur.ReturnDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)												
	)
	union
	(
		SELECT	rtur.CompanyCode
				, rtur.BranchCode
				, rtur.ReturnNo AS DocNo
				, rtur.ReturnDate AS DocDate
				, '-' as TipePart
				, case rtur.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = rtur.CompanyCode and CustomerCode = rtur.CustomerCode) CustomerName
				, 'RETUR SRV' JenisDokumen
		FROM	spTrnSRturSrvHdr rtur with(nolock, nowait)
		WHERE	rtur.CompanyCode = @CompanyCode 
				AND rtur.BranchCode = @BranchCode
				AND (rtur.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, rtur.ReturnDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)												
	)
	union
	(
		SELECT	rturSS.CompanyCode
				, rturSS.BranchCode
				, rturSS.ReturnNo AS DocNo
				, rturSS.ReturnDate AS DocDate 
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = rturSS.CompanyCode and LookUpValue = rturSS.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case rturSS.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta	
				, (select CustomerName from gnMstCustomer where CompanyCode = rturSS.CompanyCode and CustomerCode = rturSS.CustomerCode) CustomerName
				, 'RETUR SUPPLY SLIP' JenisDokumen
		FROM	spTrnSRturSSHdr rturSS with(nolock, nowait)                           
		WHERE	rturSS.CompanyCode = @CompanyCode 
				AND rturSS.BranchCode = @BranchCode
				AND (rturSS.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, rturSS.ReturnDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)																
	)
	union
	(            
		SELECT	bps.CompanyCode
				, bps.BranchCode
				, bps.BPSFNo AS DocNo
				, bps.BPSFDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = bps.CompanyCode and LookUpValue = bps.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case bps.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = bps.CompanyCode and CustomerCode = bps.CustomerCode) CustomerName
				, 'BPS' JenisDokumen
		FROM	spTrnSBPSFHdr bps with(nolock, nowait) 
		WHERE	bps.CompanyCode = @CompanyCode 
				AND bps.BranchCode = @BranchCode
				AND (bps.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, bps.BPSFDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)																				
	)
	union
	(
		SELECT	invoice.CompanyCode
				, invoice.BranchCode
				, invoice.InvoiceNo AS DocNo
				, invoice.InvoiceDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = invoice.CompanyCode and LookUpValue = invoice.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case invoice.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = invoice.CompanyCode and CustomerCode = invoice.CustomerCode) CustomerName
				, 'INVOICE' JenisDokumen
		FROM	spTrnSInvoiceHdr invoice with(nolock, nowait) 
		WHERE	invoice.CompanyCode = @CompanyCode 
				AND invoice.BranchCode = @BranchCode
				AND (invoice.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, invoice.InvoiceDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)				
	)
	union
	(
		SELECT	lmp.CompanyCode
				, lmp.BranchCode
				, lmp.LmpNo AS DocNo	
				, lmp.LmpDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = lmp.CompanyCode and LookUpValue = lmp.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case lmp.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta	
				, (select CustomerName from gnMstCustomer where CompanyCode = lmp.CompanyCode and CustomerCode = lmp.CustomerCode) CustomerName
				, 'LAMPIRAN' JenisDokumen
		FROM	spTrnSLmpHdr lmp with(nolock, nowait)
		WHERE	lmp.CompanyCode = @CompanyCode 
				AND lmp.BranchCode = @BranchCode
				AND (lmp.Status NOT IN (1, 2, 3))
				AND CONVERT(VARCHAR, lmp.LmpDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)				
	)
	union
	(
		SELECT	fpj.CompanyCode
				, fpj.BranchCode
				, fpj.FPJNo AS DocNo
				, fpj.FPJDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = fpj.CompanyCode and LookUpValue = fpj.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart 
				, case fpj.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, (select CustomerName from gnMstCustomer where CompanyCode = fpj.CompanyCode and CustomerCode = fpj.CustomerCode) CustomerName
				, 'FAKTUR PAJAK' JenisDokumen
		FROM	spTrnSFPJHdr fpj with(nolock, nowait)
		WHERE	fpj.CompanyCode = @CompanyCode 
				AND fpj.BranchCode = @BranchCode
				AND (fpj.Status NOT IN (1, 2, 3))
                AND ISNULL(fpj.FPJGovNo,'') = ''
				AND CONVERT(VARCHAR, fpj.FPJDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)				
	)
	union 
	(
		SELECT	whTrf.CompanyCode
				, whTrf.BranchCode
				, whTrf.WHTrfNo AS DocNo
				, whTrf.WHTrfDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = whTrf.CompanyCode and LookUpValue = whTrf.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case whTrf.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, '' AS CustomerName
				, 'WAREHOUSE TRANSFER' JenisDokumen
		FROM	spTrnIWHTrfHdr whTrf with(nolock, nowait)
		WHERE	whTrf.CompanyCode = @CompanyCode 
				AND whTrf.BranchCode = @BranchCode
				AND (whTrf.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, whTrf.WHTrfDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)				
	)
	union
	(
		SELECT	adj.CompanyCode
				, adj.BranchCode
				, adj.AdjustmentNo AS DocNo
				, adj.AdjustmentDate AS DocDate
				, (
					select LookupValueName
					from gnMstLookUpDtl
					where CompanyCode = adj.CompanyCode and LookUpValue = adj.TypeOfGoods and CodeID='TPGO'
				  ) as TipePart
				, case adj.Status 
					when 0 then '-'
					else 'x'
				end CetakSta
				, '-' glSta
				, '-' pjkSta
				, '-' tpjSta	
				, '-' postSta
				, '' AS CustomerName
				, 'ADJUSTMENT' JenisDokumen
		FROM	spTrnIAdjustHdr adj with(nolock, nowait)
		WHERE	adj.CompanyCode = @CompanyCode 
				AND adj.BranchCode = @BranchCode
				AND (adj.Status NOT IN (2, 3))
				AND CONVERT(VARCHAR, adj.AdjustmentDate, 112) between CONVERT(VARCHAR, @BegDate, 112) and CONVERT(VARCHAR, @EndDate, 112)
	)
END

select top 1 * from svtrnservice
GO
CREATE procedure [dbo].[sp_UpdateBORegisterTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@LastUpdateBy varchar(10))


as

UPDATE spMstItems
SET BackOrderSP = 0, BackOrderSR = 0, BackOrderSL = 0
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode

UPDATE spMstItemLoc
SET BackOrderSP = 0, BackOrderSR = 0, BackOrderSL = 0
WHERE CompanyCode = @CompanyCode AND BranchCode = @BranchCode

SELECT A.CompanyCode, A.BranchCode, A.WarehouseCode, A.Partno, B.SalesType, SUM(A.QtyBO -(A.QtyBOSupply + A.QtyBOCancel)) as BOAvail 
INTO #TempBo
FROM spTrnSORDDtl A WITH(NOWAIT, NOLOCK) INNER JOIN spTrnSORDHdr B WITH(NOWAIT, NOLOCK) 
ON A.CompanyCode = B.CompanyCode 
AND A.BranchCode = B.BranchCode
AND A.DocNo = B.DocNo
WHERE A.CompanyCode = @CompanyCode 
AND A.BranchCode = @BranchCode
GROUP BY A.CompanyCode, A.BranchCode, WarehouseCode, A.Partno, B.SalesType
HAVING SUM(A.QtyBO -(A.QtyBOSupply + A.QtyBOCancel)) > 0

UPDATE spMstItems 
SET LastUpdateBy = @LastUpdateBy, LastUpdateDate = getDate(),
    BackOrderSP = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItems.CompanyCode
    AND a.BranchCode = spMstItems.BranchCode
    AND a.PartNo = spMstItems.PartNo
    AND a.SalesType in ('0','1')), spMstItems.BackOrderSP),
 BackOrderSR = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItems.CompanyCode
    AND a.BranchCode = spMstItems.BranchCode
    AND a.PartNo = spMstItems.PartNo
    AND a.SalesType='2'), spMstItems.BackOrderSR),
 BackOrderSL = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a
    WHERE a.CompanyCode = spMstItems.CompanyCode
    AND a.BranchCode = spMstItems.BranchCode 
    AND a.PartNo = spMstItems.PartNo
    AND a.SalesType='3'), spMstItems.BackOrderSL)
WHERE spMstItems.CompanyCode=@CompanyCode
AND spMstItems.BranchCode=@BranchCode 

UPDATE spMstItemLoc 
SET LastUpdateBy = @LastUpdateBy, LastUpdateDate = getDate(),
 BackOrderSP = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItemLoc.CompanyCode
    AND a.BranchCode = spMstItemLoc.BranchCode
    AND a.WarehouseCode = spMstItemLoc.WarehouseCode
    AND a.PartNo = spMstItemLoc.PartNo 
    AND a.SalesType in ('0','1')), spMstItemLoc.BackOrderSP),
 BackOrderSR = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a  
    WHERE a.CompanyCode = spMstItemLoc.CompanyCode
    AND a.BranchCode = spMstItemLoc.BranchCode
    AND a.WarehouseCode = spMstItemLoc.WarehouseCode
    AND a.PartNo = spMstItemLoc.PartNo 
    AND a.SalesType='2'), spMstItemLoc.BackOrderSR),
 BackOrderSL = ISNULL((SELECT SUM(a.BOAvail) from #TempBo a 
    WHERE a.CompanyCode = spMstItemLoc.CompanyCode
    AND a.BranchCode = spMstItemLoc.BranchCode
    AND a.WarehouseCode = spMstItemLoc.WarehouseCode
    AND a.PartNo = spMstItemLoc.PartNo 
    AND a.SalesType='3'), spMstItemLoc.BackOrderSL)
WHERE spMstItemLoc.CompanyCode=@CompanyCode
AND spMstItemLoc.BranchCode=@BranchCode 
AND spMstItemLoc.WarehouseCode = '00'

DROP TABLE #TempBo
GO
create procedure [dbo].[uspfn_SelectCustomerBank]
	@CompanyCode varchar(13),
	@CustomerCode varchar(25)
as
begin
	if @CustomerCode = '' 
		return

	select a.*
	  from gnMstCustomerBank a
	 where a.CompanyCode = @CompanyCode
	   and a.CustomerCode = @CustomerCode
end


--select * from gnMstCustomerProfitCenter where CustomerCode=''
GO
CREATE procedure [dbo].[uspfn_GetReturnSSDetails] @CompanyCode varchar(15), @BranchCode varchar(15), @ReturnNo varchar(25)  
  as  
  SELECT a.*, b.*, a.DocNo as LmpNo, a.DocDate as LmpDate, c.CustomerCode, c.CustomerName, c.CustomerGovName, c.Address1, c.Address2, c.Address3, c.Address4, c.HPNo, c.FaxNo, c.CityCode, d.LookUpValueName as City FROM spTrnSRTurSSHdr a  
  join svTrnService b ON a.CompanyCode = b.CompanyCode   
  and a.BranchCode = b.BranchCode and a.SKPNo = b.JobOrderNo  
  left join gnMstCustomer c  
  ON a.CompanyCode = c.CompanyCode  
  and a.CustomerCode = c.CustomerCode  
  left JOIN GnMstLookupDtl d on d.CompanyCode = c.CompanyCode  
 and d.CodeID = 'City'  
 and d.LookupValue = c.CityCode  
  where a.ReturnNo = @ReturnNo  
  and a.BranchCode = @BranchCode  
  and a.CompanyCode = @CompanyCode
GO
CREATE procedure [dbo].[usprpt_ItsInqAchievement]     
(    
 @CompanyCode  VARCHAR(15),    
 @BMEmployeeID  VARCHAR(15),    
 @SHEmployeeID  VARCHAR(15),    
 @SCEmployeeID  VARCHAR(15),    
 @SMEmployeeID  VARCHAR(15),    
 @Year    INT    
)    
AS    
  
--declare @companycode  varchar(15)    
--set @companycode = '6006406'  
--declare @bmemployeeid  varchar(15)  
--set @bmemployeeid = 'bm189'    
--declare @shemployeeid  varchar(15)   
--set @shemployeeid = '225'   
--declare @scemployeeid  varchar(15)  
--set @scemployeeid = '50395'    
--declare @smemployeeid  varchar(15)  
--set @smemployeeid ='%'  
--declare  @year    int    
--set @year = 2013  
  
 select * into #ListOfSalesman from (    
  select tmSalesman.CompanyCode, tmSalesman.BranchCode    
   , tmSalesman.EmployeeID, tmSalesman.TeamID     
   , tmSalesman.IsSupervisor      
  from     
   PmMstTeamMembers tmSalesman,    
   (    
    -- Sales Coordinator ---    
    select tmSalesmanTemp.CompanyCode, tmSalesmanTemp.BranchCode    
     , tmSalesmanTemp.EmployeeID, tmSalesmanTemp.TeamID     
     , tmSalesmanTemp.IsSupervisor     
    from     
     PmMstTeamMembers tmSalesmanTemp,    
     (    
      -- Team Members of Sales Head ----------    
      select tmSC.CompanyCode, tmSC.BranchCode    
       , tmSC.EmployeeID, tmSC.TeamID , tmSC.IsSupervisor     
      from     
       PmMstTeamMembers tmSC,     
       (    
        -- Sales Head ----------    
        select tmSH.CompanyCode, tmSH.BranchCode    
         , tmSH.EmployeeID, tmSH.TeamID , tmSH.IsSupervisor    
        from     
         PmMstTeamMembers tmSH,     
         (    
          -- Team Members of Branch Manager -----    
          select tmSHTemp.CompanyCode, tmSHTemp.BranchCode    
           , tmSHTemp.EmployeeID, tmSHTemp.TeamID, tmBM.IsSupervisor    
          from     
           PmMstTeamMembers tmSHTemp, (    
            -- Branch Manager --    
            select tmBM.CompanyCode, tmBM.BranchCode, tmBM.IsSupervisor    
             ,tmBM.EmployeeID, tmBM.TeamID    
            from PmMstTeamMembers tmBM    
             inner join PmPosition posBM on tmBM.CompanyCode = posBM.CompanyCode    
              and tmBM.EmployeeID = posBM.EmployeeID and posBM.PositionID = 40     
            where tmBM.CompanyCode = @CompanyCode and tmBM.EmployeeID like @BMEmployeeID -- employeeID of Branch Manager    
            --------------------    
           ) tmBM    
          where     
           tmBM.CompanyCode = tmSHTemp.CompanyCode     
           and tmBM.BranchCode = tmSHTemp.BranchCode    
           and tmBM.TeamID = tmSHTemp.TeamID     
           and tmSHTemp.IsSupervisor != 1     
           and tmSHTemp.EmployeeID like @SHEmployeeID -- employeeID of SalesHead    
          ----------------------------------------    
         ) tmSHTemp_NotSup    
        where tmSH.CompanyCode = tmSHTemp_NotSup.CompanyCode     
         and tmSH.BranchCode = tmSHTemp_NotSup.BranchCode    
         and tmSH.EmployeeID = tmSHTemp_NotSup.EmployeeID    
         and tmSH.IsSupervisor = 1    
        ---------------------------------    
       ) tmSCTemp    
      where    
       tmSC.CompanyCode = tmSCTemp.CompanyCode     
       and tmSC.BranchCode = tmSCTemp.BranchCode    
       and tmSC.TeamID = tmSCTemp.TeamID    
       and tmSC.IsSupervisor != 1    
       and tmSC.EmployeeID like @SCEmployeeID -- EmployeeID of Sales Coordinator    
      --------------------------------    
     )tmSCTemp_NotSup    
    where tmSalesmanTemp.CompanyCode = tmSCTemp_NotSup.CompanyCode     
     and tmSalesmanTemp.BranchCode = tmSCTemp_NotSup.BranchCode    
     and tmSalesmanTemp.EmployeeID = tmSCTemp_NotSup.EmployeeID    
     and tmSalesmanTemp.IsSupervisor = 1    
    --------------    
   ) tmSalesmanTemp    
  where    
   tmSalesman.CompanyCode = tmSalesmanTemp.CompanyCode     
   and tmSalesman.BranchCode = tmSalesmanTemp.BranchCode    
   and tmSalesman.TeamID = tmSalesmanTemp.TeamID    
   and tmSalesman.IsSupervisor != 1    
   and tmSalesman.EmployeeID like @SMEmployeeID -- EmployeeID of Salesman    
 ) #ListOfSalesman    
   
   
-- ===========================================================    
-- ====== Searching for KDP based on parameters (List of Salesman) and PmMstTeamMembers,     
-- ====== Then Transpose to Monthly View ==========================    
-- ===========================================================     
 select * into #TempSM from (    
  select 'SM' Intial, CompanyCode, BranchCode, SpvEmployeeID, EmployeeID, isnull(Jan, 0) Jan    
  , isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May    
  , isnull(Jun, 0) Jun, isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep    
  , isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec from (    
   select kdp.CompanyCode, kdp.BranchCode, substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth --[Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec]    
    , kdp.SpvEmployeeID, kdp.EmployeeID, count(kdp.EmployeeID) InquiryCount    
   from PmKDP kdp    
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year    
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)          
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)          
   group by kdp.CompanyCode, kdp.BranchCode, kdp.SpvEmployeeID, kdp.EmployeeID, substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)    
  ) as Header    
  pivot(    
   sum(InquiryCount)    
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)    
  ) pvt    
 )#TempSM     
    
 select * into #TempSC from (    
  select     
  'SC' Initial, SM.CompanyCode, SM.BranchCode, SM.SpvEmployeeID EmployeeID    
  , sum(SM.Jan) Jan, sum(SM.Feb) Feb, sum(SM.Mar) Mar    
  , sum(SM.Apr) Apr, sum(SM.May) May, sum(SM.Jun) Jun    
  , sum(SM.Jul) Jul, sum(SM.Aug) Aug, sum(SM.Sep) Sep    
  , sum(SM.Oct) Oct, sum(SM.Nov) Nov, sum(SM.Dec) Dec    
  from #TempSM SM     
  group by SM.CompanyCode, SM.BranchCode, SM.SpvEmployeeID    
 ) #TempSC    
    
 select * into #TempSH from (    
  select     
   'SH' Initial, tempSH.CompanyCode, tempSH.BranchCode, tempSH.SpvEmployeeID EmployeeID    
   , sum(tempSC.Jan) Jan, sum(tempSC.Feb) Feb, sum(tempSC.Mar) Mar    
   , sum(tempSC.Apr) Apr, sum(tempSC.May) May, sum(tempSC.Jun) Jun    
   , sum(tempSC.Jul) Jul, sum(tempSC.Aug) Aug, sum(tempSC.Sep) Sep    
   , sum(tempSC.Oct) Oct, sum(tempSC.Nov) Nov, sum(tempSC.Dec) Dec     
  from #TempSC tempSC,     
   (select tMembersHead.CompanyCode, tMembersHead.BranchCode    
    , tMembersHead.EmployeeID SpvEmployeeID, tMembersCoord.EmployeeID    
   from PmMstTeamMembers tMembersHead,    
    (select tMembers.CompanyCode, tMembers.BranchCode    
     , tMembers.EmployeeID, tMembers.TeamID    
    from PmMstTeamMembers tMembers, #TempSC sHeads    
    where     
     tMembers.CompanyCode = sHeads.CompanyCode     
     and tMembers.BranchCode = sHeads.BranchCode    
     and tMembers.EmployeeID = sHeads.EmployeeID     
     and tMembers.IsSupervisor != 1) tMembersCoord     
   where tMembersHead.CompanyCode = tMembersCoord.CompanyCode    
    and tMembersHead.BranchCode = tMembersCoord.BranchCode    
    and tMembershead.TeamID = tMembersCoord.TeamID    
    and tMembersHead.IsSupervisor = 1) tempSH    
  where tempSH.CompanyCode = tempSC.CompanyCode    
   and tempSH.BranchCode = tempSC.BranchCode    
   and tempSH.EmployeeID = tempSC.EmployeeID    
  group by tempSH.CompanyCode, tempSH.BranchCode, tempSH.SpvEmployeeID    
 ) #TempSH    
    
 select * into #TempBM from (    
  select     
   'SH' Initial, tempBM.CompanyCode, tempBM.BranchCode, tempBM.SpvEmployeeID EmployeeID    
   , sum(tempSH.Jan) Jan, sum(tempSH.Feb) Feb, sum(tempSH.Mar) Mar    
   , sum(tempSH.Apr) Apr, sum(tempSH.May) May, sum(tempSH.Jun) Jun    
   , sum(tempSH.Jul) Jul, sum(tempSH.Aug) Aug, sum(tempSH.Sep) Sep    
   , sum(tempSH.Oct) Oct, sum(tempSH.Nov) Nov, sum(tempSH.Dec) Dec     
  from #TempSH tempSH,     
   (select tMembersHead.CompanyCode, tMembersHead.BranchCode    
    , tMembersHead.EmployeeID SpvEmployeeID, tMembersCoord.EmployeeID    
   from PmMstTeamMembers tMembersHead,    
    (select tMembers.CompanyCode, tMembers.BranchCode    
     , tMembers.EmployeeID, tMembers.TeamID    
    from PmMstTeamMembers tMembers, #TempSH sHeads    
    where     
     tMembers.CompanyCode = sHeads.CompanyCode     
     and tMembers.BranchCode = sHeads.BranchCode    
     and tMembers.EmployeeID = sHeads.EmployeeID     
     and tMembers.IsSupervisor != 1) tMembersCoord     
   where tMembersHead.CompanyCode = tMembersCoord.CompanyCode    
    and tMembersHead.BranchCode = tMembersCoord.BranchCode    
    and tMembershead.TeamID = tMembersCoord.TeamID    
    and tMembersHead.IsSupervisor = 1) tempBM    
  where tempBM.CompanyCode = tempSH.CompanyCode    
   and tempBM.BranchCode = tempSH.BranchCode    
   and tempBM.EmployeeID = tempSH.EmployeeID    
  group by tempBM.CompanyCode, tempBM.BranchCode, tempBM.SpvEmployeeID    
 ) #TempBM     
    
--=======================================================================================    
-- SALES SOURCE OF DATA    
--=======================================================================================    
 select * into #SSD from (    
  select CompanyCode, '' BranchCode, TypeOf1, TypeOf2    
   , isnull(Jan, 0) Jan, isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May, isnull(Jun, 0) Jun    
   , isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep, isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec    
  from (    
   select kdp.CompanyCode, '' BranchCode, kdp.PerolehanData TypeOf1, '' TypeOf2    
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth, count(kdp.EmployeeID) InquiryCount    
   from PmKDP kdp    
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year    
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)          
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)    
   group by kdp.CompanyCode, kdp.PerolehanData, substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)) as Header    
  pivot    
  (    
   sum (inquiryCount)    
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)    
  ) pvt    
 ) #SSD    
    
--=======================================================================================    
-- SALES BY TYPE    
--=======================================================================================    
 select * into #ST from (    
  select CompanyCode, '' BranchCode, TypeOf1, TypeOf2    
   , isnull(Jan, 0) Jan, isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May, isnull(Jun, 0) Jun    
   , isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep, isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec    
  from (    
   select kdp.CompanyCode, '' BranchCode, kdp.TipeKendaraan TypeOf1, kdp.Variant TypeOf2    
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth    
    , count(kdp.EmployeeID) InquiryCount    
   from PmKDP kdp    
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year    
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)          
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)         
   group by kdp.CompanyCode, kdp.TipeKendaraan, kdp.Variant     
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)) as Header    
  pivot    
  (    
   sum(InquiryCount)    
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)    
  ) pvt    
 ) #ST    
    
--=======================================================================================    
-- PROSPECT STATUS    
--=======================================================================================    
 select * into #PS from (    
  select CompanyCode, '' BranchCode, TypeOf1, TypeOf2    
   , isnull(Jan, 0) Jan, isnull(Feb, 0) Feb, isnull(Mar, 0) Mar, isnull(Apr, 0) Apr, isnull(May, 0) May, isnull(Jun, 0) Jun    
   , isnull(Jul, 0) Jul, isnull(Aug, 0) Aug, isnull(Sep, 0) Sep, isnull(Oct, 0) Oct, isnull(Nov, 0) Nov, isnull(Dec, 0) Dec     
  from (    
   select kdp.CompanyCode, '' BranchCode, kdp.LastProgress TypeOf1, '' TypeOf2    
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3) InquiryMonth    
    , count(kdp.EmployeeID) InquiryCount    
   from PmKDP kdp    
   where kdp.CompanyCode = @CompanyCode and year(kdp.InquiryDate) = @Year     
    and kdp.BranchCode in (select BranchCode from #ListOfSalesman)          
    and kdp.EmployeeID in (select EmployeeID from #ListOfSalesman)          
   group by kdp.CompanyCode, kdp.BranchCode, kdp.LastProgress    
    , substring(Convert(varchar, kdp.InquiryDate, 109), 1, 3)) as Header    
  pivot    
  (    
   sum(InquiryCount)    
   for InquiryMonth in (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)    
  ) pvt    
 ) #PS    
   
 -- Salesman ----------    
 select     
  inc, initial, CompanyCode, BranchCode, EmployeeID, EmployeeName    
  , case cast(Jan as varchar) when '0' then '-' else cast(Jan as varchar) end Jan    
  , case cast(Feb as varchar) when '0' then '-' else cast(Feb as varchar) end Feb    
  , case cast(Mar as varchar) when '0' then '-' else cast(Mar as varchar) end Mar    
  , case cast(Apr as varchar) when '0' then '-' else cast(Apr as varchar) end Apr    
  , case cast(May as varchar) when '0' then '-' else cast(May as varchar) end May    
  , case cast(Jun as varchar) when '0' then '-' else cast(Jun as varchar) end Jun    
  , case cast(Jul as varchar) when '0' then '-' else cast(Jul as varchar) end Jul    
  , case cast(Aug as varchar) when '0' then '-' else cast(Aug as varchar) end Aug    
  , case cast(Sep as varchar) when '0' then '-' else cast(Sep as varchar) end Sep    
  , case cast(Oct as varchar) when '0' then '-' else cast(Oct as varchar) end Oct    
  , case cast(Nov as varchar) when '0' then '-' else cast(Nov as varchar) end Nov    
  , case cast(Dec as varchar) when '0' then '-' else cast(Dec as varchar) end Dec    
  , case cast(Sem1 as varchar) when '0' then '-' else cast(Sem1 as varchar) end Sem1    
  , case cast(Sem2 as varchar) when '0' then '-' else cast(Sem2 as varchar) end Sem2    
  , case cast(Total as varchar) when '0' then '-' else cast(Total as varchar) end Total    
 from (    
  select      
   '1' inc, 'Salesman' initial, tempSM.CompanyCode, tempSM.BranchCode, tempSM.EmployeeID    
   , emp.EmployeeName, tempSM.Jan, tempSM.Feb, tempSM.Mar, tempSM.Apr, tempSM.May, tempSM.Jun    
   , tempSM.Jul, tempSM.Aug, tempSM.Sep, tempSM.Oct, tempSM.Nov, tempSM.Dec    
   , (tempSM.Jan + tempSM.Feb + tempSM.Mar + tempSM.Apr + tempSM.May + tempSM.Jun) Sem1    
   , (tempSM.Jul + tempSM.Aug + tempSM.Sep + tempSM.Oct + tempSM.Nov+ tempSM.Dec) Sem2    
   , (tempSM.Jan + tempSM.Feb + tempSM.Mar + tempSM.Apr + tempSM.May + tempSM.Jun    
    + tempSM.Jul + tempSM.Aug + tempSM.Sep + tempSM.Oct + tempSM.Nov    
    + tempSM.Dec) Total    
  from     
   #TempSM tempSM    
    left join HrEmployee emp on tempSM.CompanyCode = emp.CompanyCode    
     and tempSM.EmployeeID = emp.EmployeeID    
      
  union    
  -- Sales Coordinator -------     
  select      
   '2' inc, 'Sales Coordinator' initial, TempSC.CompanyCode, TempSC.BranchCode, TempSC.EmployeeID, emp.EmployeeName    
   , TempSC.Jan, TempSC.Feb, TempSC.Mar, TempSC.Apr, TempSC.May, TempSC.Jun    
   , TempSC.Jul, TempSC.Aug, TempSC.Sep, TempSC.Oct, TempSC.Nov, TempSC.Dec    
   , (TempSC.Jan + TempSC.Feb + TempSC.Mar + TempSC.Apr + TempSC.May + TempSC.Jun) Sem1    
   , (TempSC.Jul + TempSC.Aug + TempSC.Sep + TempSC.Oct + TempSC.Nov+ TempSC.Dec) Sem2    
   , (TempSC.Jan + TempSC.Feb + TempSC.Mar + TempSC.Apr + TempSC.May + TempSC.Jun    
    + TempSC.Jul + TempSC.Aug + TempSC.Sep + TempSC.Oct + TempSC.Nov    
    + TempSC.Dec) Total    
  from     
   #TempSC TempSC    
    left join HrEmployee emp on TempSC.CompanyCode = emp.CompanyCode    
      and TempSC.EmployeeID = emp.EmployeeID    
      
  union    
-- Sales Head -------     
  select      
   '3' inc, 'Sales Head' initial, TempSH.CompanyCode, TempSH.BranchCode, TempSH.EmployeeID, emp.EmployeeName    
   , TempSH.Jan, TempSH.Feb, TempSH.Mar, TempSH.Apr, TempSH.May, TempSH.Jun    
   , TempSH.Jul, TempSH.Aug, TempSH.Sep, TempSH.Oct, TempSH.Nov, TempSH.Dec    
   , (TempSH.Jan + TempSH.Feb + TempSH.Mar + TempSH.Apr + TempSH.May + TempSH.Jun) Sem1    
   , (TempSH.Jul + TempSH.Aug + TempSH.Sep + TempSH.Oct + TempSH.Nov+ TempSH.Dec) Sem2    
   , (TempSH.Jan + TempSH.Feb + TempSH.Mar + TempSH.Apr + TempSH.May + TempSH.Jun    
    + TempSH.Jul + TempSH.Aug + TempSH.Sep + TempSH.Oct + TempSH.Nov    
    + TempSH.Dec) Total    
  from     
   #TempSH TempSH    
    left join HrEmployee emp on TempSH.CompanyCode = emp.CompanyCode    
    and TempSH.EmployeeID = emp.EmployeeID    
      
  union    
  -- Branch Manager -------    
  select      
   '4' inc, 'Branch Manager' initial, TempBM.CompanyCode, TempBM.BranchCode, TempBM.EmployeeID, emp.EmployeeName    
   , TempBM.Jan, TempBM.Feb, TempBM.Mar, TempBM.Apr, TempBM.May, TempBM.Jun    
   , TempBM.Jul, TempBM.Aug, TempBM.Sep, TempBM.Oct, TempBM.Nov, TempBM.Dec    
   , (TempBM.Jan + TempBM.Feb + TempBM.Mar + TempBM.Apr + TempBM.May + TempBM.Jun) Sem1    
   , (TempBM.Jul + TempBM.Aug + TempBM.Sep + TempBM.Oct + TempBM.Nov+ TempBM.Dec) Sem2    
   , (TempBM.Jan + TempBM.Feb + TempBM.Mar + TempBM.Apr + TempBM.May + TempBM.Jun    
    + TempBM.Jul + TempBM.Aug + TempBM.Sep + TempBM.Oct + TempBM.Nov    
    + TempBM.Dec) Total    
  from     
   #TempBM TempBM    
    left join HrEmployee emp on TempBM.CompanyCode = emp.CompanyCode    
   and TempBM.EmployeeID = emp.EmployeeID    
 ) SASalesman order by SASalesman.inc--, SASalesman.EmployeeName  
   
 select      
    '1' inc, 'Sales Source of Data' initial, tempSSD.CompanyCode, '' BranchCode, lkpDtl.LookUpValue TypeOf1, tempSSD.TypeOf2    
   , isnull(tempSSD.Jan, 0) Jan, isnull(tempSSD.Feb, 0) Feb, isnull(tempSSD.Mar, 0) Mar    
   , isnull(tempSSD.Apr, 0) Apr, isnull(tempSSD.May, 0) May, isnull(tempSSD.Jun, 0) Jun    
   , isnull(tempSSD.Jul, 0) Jul, isnull(tempSSD.Aug, 0) Aug, isnull(tempSSD.Sep, 0) Sep    
   , isnull(tempSSD.Oct, 0) Oct, isnull(tempSSD.Nov, 0) Nov, isnull(tempSSD.Dec, 0) Dec    
   , isnull((tempSSD.Jan + tempSSD.Feb + tempSSD.Mar + tempSSD.Apr + tempSSD.May + tempSSD.Jun), 0) Sem1    
   , isnull((tempSSD.Jul + tempSSD.Aug + tempSSD.Sep + tempSSD.Oct + tempSSD.Nov+ tempSSD.Dec), 0) Sem2    
   , isnull((tempSSD.Jan + tempSSD.Feb + tempSSD.Mar + tempSSD.Apr + tempSSD.May + tempSSD.Jun    
    + tempSSD.Jul + tempSSD.Aug + tempSSD.Sep + tempSSD.Oct + tempSSD.Nov    
    + tempSSD.Dec), 0) Total    
  from     
   GnMstLookUpDtl lkpDtl    
    left join #SSD tempSSD on lkpDtl.CompanyCode = tempSSD.CompanyCode    
    and lkpDtl.LookUpValue = tempSSD.TypeOf1     
  where     
   lkpDtl.CodeID = 'PSRC' and lkpDtl.CompanyCode = @CompanyCode   
     
   select      
   '2' inc, 'Sales by Type' initial, tempST.CompanyCode, tempST.BranchCode, GTS.GroupCode TypeOf1, GTS.typeCode TypeOf2-- tempST.TypeOf1, tempST.TypeOf2    
   , isnull(tempST.Jan, 0) Jan, isnull(tempST.Feb, 0) Feb, isnull(tempST.Mar, 0) Mar    
   , isnull(tempST.Apr, 0) Apr, isnull(tempST.May, 0) May, isnull(tempST.Jun, 0) Jun    
   , isnull(tempST.Jul, 0) Jul, isnull(tempST.Aug, 0) Aug, isnull(tempST.Sep, 0) Sep    
   , isnull(tempST.Oct, 0) Oct, isnull(tempST.Nov, 0) Nov, isnull(tempST.Dec, 0) Dec    
   , isnull((tempST.Jan + tempST.Feb + tempST.Mar + tempST.Apr + tempST.May + tempST.Jun), 0) Sem1    
   , isnull((tempST.Jul + tempST.Aug + tempST.Sep + tempST.Oct + tempST.Nov+ tempST.Dec), 0) Sem2    
   , isnull((tempST.Jan + tempST.Feb + tempST.Mar + tempST.Apr + tempST.May + tempST.Jun    
    + tempST.Jul + tempST.Aug + tempST.Sep + tempST.Oct + tempST.Nov    
    + tempST.Dec), 0) Total    
  from     
   (select Distinct CompanyCode, GroupCode, TypeCode      
   from pmGroupTypeSeq     
   group by CompanyCode, GroupCode ,typeCode) GTS    
    left join #ST tempST on GTS.CompanyCode = tempST.CompanyCode and GTS.GroupCode = tempST.TypeOf1 and GTS.TypeCode = tempST.TypeOf2    
         
  select     
   '3' inc, 'Prospect Status' initial, tempPS.CompanyCode, tempPS.BranchCode, lkpDtl.LookUpValueName TypeOf1, tempPS.TypeOf2    
   , isnull(tempPS.Jan, 0) Jan, isnull(tempPS.Feb, 0) Feb, isnull(tempPS.Mar, 0) Mar    
   , isnull(tempPS.Apr, 0) Apr, isnull(tempPS.May, 0) May, isnull(tempPS.Jun, 0) Jun    
   , isnull(tempPS.Jul, 0) Jul, isnull(tempPS.Aug, 0) Aug, isnull(tempPS.Sep, 0) Sep    
   , isnull(tempPS.Oct, 0) Oct, isnull(tempPS.Nov, 0) Nov, isnull(tempPS.Dec, 0) Dec    
   , isnull((tempPS.Jan + tempPS.Feb + tempPS.Mar + tempPS.Apr + tempPS.May + tempPS.Jun), 0) Sem1    
   , isnull((tempPS.Jul + tempPS.Aug + tempPS.Sep + tempPS.Oct + tempPS.Nov+ tempPS.Dec), 0) Sem2    
   , isnull((tempPS.Jan + tempPS.Feb + tempPS.Mar + tempPS.Apr + tempPS.May + tempPS.Jun    
    + tempPS.Jul + tempPS.Aug + tempPS.Sep + tempPS.Oct + tempPS.Nov    
    + tempPS.Dec), 0) Total    
  from    
   GnMstLookUpDtl lkpDtl    
    left join #PS tempPS on lkpDtl.CompanyCode = tempPS.CompanyCode    
    and lkpDtl.LookUpValue = tempPS.TypeOf1     
  where lkpDtl.CodeID = 'PSTS' and lkpDtl.CompanyCode = @CompanyCode   
  
 drop table #TempSM    
 drop table #TempSC    
 drop table #TempSH    
 drop table #TempBM    
 drop table #SSD    
 drop table #ST    
 drop table #PS    
    
 drop table #ListOfSalesman
GO
CREATE procedure [dbo].[sp_UpdateDemandHistoryTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@Year int,
@Month int,
@ProfitCenterCode varchar(10),
@LastUpdateBy varchar(10)
)


as

DELETE SpHstDemandItem 
                    WHERE Year=@Year AND Month=@Month AND CompanyCode = @CompanyCode AND BranchCode = @BranchCode

                    SELECT 
                        x.CompanyCode
                        , x.BranchCode
                        , @Year Year
                        , @Month Month
                        , x.PartNo
                        , 0 AS DemandFreq
                        , 0 AS DemandQty
                        , 0 AS SalesFreq
                        , 0 AS SalesQty    
                        , x.MovingCode
                        , x.ProductType
                        , x.PartCategory
                        , x.ABCClass
                        , @LastUpdateBy LastUpdateBy
                        , getdate() LastUpdateDate			
                    INTO #SpHstDemandItem 
                    FROM spMstItems x WITH(NOWAIT,NOLOCK) 
                    WHERE x.CompanyCode = @CompanyCode
                        AND x.BranchCode = @BranchCode
                    
                    INSERT INTO SpHstDemandItem SELECT * FROM #SpHstDemandItem

                    DROP TABLE #SpHstDemandItem
GO
CREATE procedure [dbo].[uspfn_spTrnPPOSHdr] 
@CompanyCode varchar(10),@BranchCode varchar(10),
@TypeOfGoods varchar(10),
 @Status  int
as 
SELECT a.POSNo, a.PosDate , a.Status ,a.SupplierCode ,b.SupplierName, a.OrderType
                FROM spTrnPPOSHdr a
                INNER JOIN gnMstSupplier b ON b.SupplierCode = a.SupplierCode and b.CompanyCode = a.CompanyCode
    WHERE a.CompanyCode=@CompanyCode 
                AND a.BranchCode=@BranchCode
                AND a.TypeOfGoods=@TypeOfGoods
                AND a.Status <=@Status           ORDER BY a.POSNo DESC
GO
create procedure [dbo].[uspfn_UpdateBpkbRetrievalInformation]
as
begin
	declare @CompanyCode_A varchar(17);
	declare @CompanyCode_B varchar(17);

	set @CompanyCode_A = '6006406';
	set @CompanyCode_B = '6006400001';

	if object_id('#temp1') is not null
		drop table #temp1;
	
	with x as (
		select *
		  from SDMS..CsBpkbRetrievalInformation a
	)
	select * into #temp1
	  from (
				select * from x 
		   ) x;

	insert into SBTDB..CsBpkbRetrievalInformation (
		   CompanyCode
		 , CustomerCode
		 , RetrievalEstimationDate
		 , Notes
		 , CreatedBy
		 , CreatedDate
		 , UpdatedBy
		 , UpdatedDate
		 , IsDeleted
		 )
	select CompanyCode = @CompanyCode_B
	     , a.CustomerCode
	     , a.RetrievalEstimationDate
	     , a.Notes
	     , a.CreatedBy
	     , a.CreatedDate
	     , a.UpdatedBy
	     , a.UpdatedDate
	     , a.IsDeleted
	  from #temp1 a;

	if object_id('#temp1') is not null
		drop table #temp1;
end
GO
create procedure [dbo].[uspfn_GetPPNPct] @CompanyCode varchar(15), @BranchCode varchar(15),
@CustomerCode varchar(25), @ProfitCenterCode varchar(5)
as
select	distinct isnull(b.TaxPct,0) 
                from	gnMstCustomerProfitCenter a with(nolock, nowait), 
                        gnMstTax b with(nolock, nowait)
                where a.CompanyCode = b.CompanyCode 
                  and a.TaxCode = b.TaxCode
                  and a.CompanyCode = @CompanyCode
	              and a.BranchCode = @BranchCode
	              and a.CustomerCode = @CustomerCode
                  and a.ProfitCenterCode = @ProfitCenterCode
GO
create procedure [dbo].[uspfn_SelectChassis]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear int,
	@ChassisCode varchar(25),
	@ColourCode varchar(25),
	@WarehouseCode varchar(25)
as

begin
   SELECT ltrim(convert(varchar,a.ChassisNo) + '') ChassisNo
        , a.EngineCode, ltrim(convert(varchar, a.EngineNo) + '') EngineNo
		, a.ServiceBookNo
		, a.KeyNo
	 FROM omMstVehicle a
	INNER JOIN (
		  	SELECT TOP 1 * 
		  	 FROM omTrInventQtyVehicle a
		  	 WHERE a.CompanyCode = @CompanyCode 
		  		   AND a.BranchCode = @BranchCode
		  		   AND a.SalesModelCode = @SalesModelCode
		  		   AND a.SalesModelYear = @SalesModelYear 
		  		   AND a.ColourCode = @ColourCode
		  		   AND a.WarehouseCode = @WareHouseCode
		  	ORDER BY a.[Year] DESC, a.[Month] DESC
		  ) b on a.CompanyCode=b.CompanyCode 
	  AND a.SalesModelCode=b.SalesModelCode AND a.SalesModelYear=b.SalesModelYear 
	  AND a.ColourCode=b.ColourCode AND a.WarehouseCode=b.WarehouseCode
	WHERE a.CompanyCode = @CompanyCode 
	  AND b.BranchCode=@BranchCode
	  AND a.Status = '0'
	  AND a.IsActive = '1'
	  AND a.SalesModelCode = @SalesModelCode
	  AND a.SalesModelYear = @SalesModelYear 
	  AND a.ChassisCode = @ChassisCode
	  AND a.ColourCode = @ColourCode
	  AND a.WareHouseCode = @WareHouseCode
	  AND b.EndingAV > 0
	  and not exists (
			select 1 from omTrSalesSOVin x 
				left join omTrSalesSO y on x.CompanyCode=y.CompanyCode and x.BranchCode=y.BranchCode
					and x.SONo=y.SONo
			where y.Status in ('0','1') and x.ChassisCode=a.ChassisCode and x.ChassisNo=a.ChassisNo
		  )
	ORDER BY a.ChassisCode ASC
end
GO
CREATE procedure [dbo].[sp_UpdateOrderPointTuning] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@LastUpdateBy varchar(10)
)


as

SELECT
	a.CompanyCode
	, a.BranchCode
	, a.PartNo
	, (ISNULL(a.DemandAverage, 0) * (ISNULL(c.LeadTime, 0) + ISNULL(c.OrderCycle, 0))) + 
	  (ISNULL(a.DemandAverage, 0) * ISNULL(c.SafetyStock, 0)) OrderPointQty
    , (ISNULL(a.DemandAverage, 0) * ISNULL(c.SafetyStock, 0)) SafetyStockQty
	, ISNULL(c.LeadTime, 0) LeadTime
	, ISNULL(c.OrderCycle, 0) OrderCycle
	, ISNULL(c.SafetyStock, 0) SafetyStock
INTO
	#OrderPointQty
FROM
	spMstItems a		
	LEFT JOIN spMstItemInfo b ON a.CompanyCode = b.CompanyCode
		AND a.PartNo = b.PartNo		
	LEFT JOIN spMstOrderParam c ON a.CompanyCode = c.CompanyCode
		AND a.BranchCode = c.BranchCode
		AND a.MovingCode = c.MovingCode
		AND b.SupplierCode = c.SupplierCode
WHERE	
	a.CompanyCode = @CompanyCode
	AND a.BranchCode = @BranchCode

UPDATE spMstItems
SET OrderPointQty = b.OrderPointQty
    , SafetyStockQty = b.SafetyStockQty
	, LeadTime = b.LeadTime
	, OrderCycle = b.OrderCycle
	, SafetyStock = b.SafetyStock
	, LastUpdateBy = @LastUpdateBy
	, LastUpdateDate = GETDATE()
FROM
	spMstItems a, #OrderPointQty b
WHERE
	a.CompanyCode = b.CompanyCode
	AND a.BranchCode = b.BranchCode 
	AND a.PartNo = b.PartNo

DROP TABLE #OrderPointQty
GO
create procedure [dbo].[usp_itsinqlostcase]
	@CompanyCode varchar(20),
	@EmployeeID varchar(20),
	@DateFrom varchar(10),
	@DateTo varchar(10)
as

select a.InquiryNumber
     --, a.BranchCode
	 --, a.EmployeeID
	 --, a.OutletID
	 , a.NamaProspek
	 , a.InquiryDate
	 , a.TipeKendaraan
	 , a.Variant
	 , a.PerolehanData
	 , d.LookUpValueName as PerolehanDataDesc
	 , b.UpdateDate as LostDate
	 , a.LostCaseCategory as LostCaseCategoryCode
	 , c.LookUpValueName as LostCaseCategoryDesc
	 , a.LostCaseOtherReason
	 , a.LostCaseVoiceOfCustomer
	 , b.LastProgress
	 , b.UpdateDate
  from PmKDP a 
  left join PmStatusHistory b
    on b.CompanyCode = a.CompanyCode
   and b.BranchCode = a.BranchCode 
   and b.InquiryNumber = a.InquiryNumber
   and b.SequenceNo = (select top 1 SequenceNo from PmStatusHistory where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and InquiryNumber = a.InquiryNumber order by SequenceNo desc)
  left join GnMstLookUpDtl c
    on c.CompanyCode = a.CompanyCode
   and c.CodeID = 'PLCC'
   and c.LookUpValue = a.LostCaseCategory
  left join GnMstLookUpDtl d
    on d.CompanyCode = a.CompanyCode
   and d.CodeID = 'PSRC'
   and d.LookUpValue = a.PerolehanData
 where a.CompanyCode = @CompanyCode
   and a.EmployeeID = @EmployeeID
   and a.LastProgress = 'LOST'
   and convert(varchar, b.UpdateDate, 112) between @DateFrom and @DateTo
 order by a.InquiryNumber

--select * from PmStatusHistory where InquiryNumber = '387904'
GO
CREATE PROCEDURE [dbo].[uspfn_spTrnIAdjustDtlview]
@CompanyCode varchar(15),
@BranchCode varchar(15),
@AdjustmentNo varchar(25) 
 
AS
SELECT 
        row_number () OVER (ORDER BY spTrnIAdjustDtl.CreatedDate) AS No,
        spTrnIAdjustDtl.PartNo,
        spMstItemInfo.PartName,
        spTrnIAdjustDtl.WarehouseCode,	
        spTrnIAdjustDtl.LocationCode,
		spTrnIAdjustDtl.AdjustmentCode,
        gnMstLookUpDtl_1.LookUpValueName AS AdjustmentDesc,
	    gnMstLookUpDtl_2.LookUpValueName AS WarehouseName,
        spTrnIAdjustDtl.QtyAdjustment,
		spTrnIAdjustDtl.ReasonCode,
        gnMstLookUpDtl.LookUpValueName AS ReasonDesc
    FROM 
        spTrnIAdjustDtl
        INNER JOIN spTrnIAdjustHdr ON spTrnIAdjustHdr.AdjustmentNo = spTrnIAdjustDtl.AdjustmentNo 
            AND spTrnIAdjustHdr.CompanyCode =  spTrnIAdjustDtl.CompanyCode
            AND spTrnIAdjustHdr.BranchCode =  spTrnIAdjustDtl.BranchCode
        INNER JOIN spMstItemInfo ON spMstItemInfo.PartNo = spTrnIAdjustDtl.PartNo
            AND spMstItemInfo.CompanyCode = spTrnIAdjustDtl.CompanyCode
        INNER JOIN gnMstLookUpDtl ON gnMstLookUpDtl.LookUpValue = spTrnIAdjustDtl.ReasonCode
            AND gnMstLookUpDtl.CompanyCode = spTrnIAdjustDtl.CompanyCode
        INNER JOIN gnMstLookUpDtl AS gnMstLookUpDtl_1 ON gnMstLookUpDtl_1.LookUpValue = spTrnIAdjustDtl.AdjustmentCode
            AND gnMstLookUpDtl_1.CompanyCode = spTrnIAdjustDtl.CompanyCode
	    INNER JOIN gnMstLookUpDtl AS gnMstLookUpDtl_2 ON gnMstLookUpDtl_2.LookUpValue = spTrnIAdjustDtl.WarehouseCode
            AND gnMstLookUpDtl_2.CompanyCode = spTrnIAdjustDtl.CompanyCode
    WHERE 
        spTrnIAdjustDtl.CompanyCode = @CompanyCode
        AND spTrnIAdjustDtl.BranchCode = @BranchCode
        AND gnMstLookUpDtl.CodeId='RSAD'
	    AND gnMstLookUpDtl_2.CodeId='WRCD'
        AND gnMstLookUpDtl_1.CodeID = 'ADJS'
        AND spTrnIAdjustDtl.AdjustmentNo =  @AdjustmentNo
    ORDER BY spTrnIAdjustDtl.CreatedDate
GO
create PROCEDURE [dbo].[uspfn_InquiryITSWithStatusByDealer]
	@CompanyCode		varchar(15),
	@BranchCode			varchar(15),
	@StartDate			varchar(20),
	@EndDate			varchar(20),
	@LastStartDate		varchar(20),
	@LastEndDate		varchar(20),
	@Area				varchar(100),
	@GroupModel			varchar(100),
	@TipeKendaraan		varchar(100),
	@Variant			varchar(100),
	@Summary			bit
AS
begin

--exec uspfn_InquiryITSWithStatusByDealer '', '', '20140401', '20140415', '20140301', '20140328', '', '', '', '', 0

--Declare @CompanyCode	varchar(15)
--declare @BranchCOde		varchar(15)
--Declare @StartDate		varchar(20)
--Declare @EndDate		varchar(20)
--Declare @LastStartDate	varchar(20)
--Declare @LastEndDate	varchar(20)
--Declare @Area			varchar(100)
--declare @GroupModel		varchar(100)
--declare @TipeKendaraan	varchar(100)
--declare @Variant		varchar(100)
--declare @Summary		bit

--set @CompanyCode = ''
--set @BranchCode = ''
--set @StartDate = '20140401'
--set @EndDate = '20140415'
--set @LastStartDate = '20140301'
--set @LastEndDate = '20140328'
--set @Area = ''
--set @GroupModel = ''
--set @TipeKendaraan = ''
--set @Variant = ''
--set @Summary = 1

select * into #tThis from(
select c.CompanyCode, c.BranchCode 
	--, c.SequenceNo
	, c.LastProgress	
	, c.InquiryNumber
	, convert(varchar,c.UpdateDate,112)	UpdateDate
	, CASE 
		 WHEN day(c.UpdateDate) >= 1 and day(c.UpdateDate) <= 7  THEN 1
		 WHEN day(c.UpdateDate) >= 8 and day(c.UpdateDate) <= 14  THEN 2
		 WHEN day(c.UpdateDate) >= 15 and day(c.UpdateDate) <= 21  THEN 3
		 WHEN day(c.UpdateDate) >= 22 and day(c.UpdateDate) <= 28  THEN 4
		 WHEN day(c.UpdateDate) >= 29 and day(c.UpdateDate) <= 31  THEN 5
	   END WeekInt	
from SuzukiR4..pmStatusHistory c with (nolock, nowait) 
INNER JOIN SuzukiR4..pmHstITS a WITH (NOLOCK, NOWAIT) ON -- penambahan 1 Apr 14
				a.CompanyCode = c.CompanyCode AND
				a.BranchCode = c.BranchCode AND
				a.InquiryNumber = c.InquiryNumber --AND
				--a.LastProgress = c.LastProgress
where
	(case when c.CompanyCode='6015402' then '6015401' when c.CompanyCode='6051402' then '6051401' else c.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and c.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and c.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')
	and (convert(varchar,c.UpdateDate,112) between @StartDate and @EndDate
	or (convert(varchar,c.UpdateDate,112) < @StartDate 		
	and (c.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress<>'P'
												and convert(varchar,h.UpdateDate,112)<@StartDate)
	or  c.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP')
												and convert(varchar,h.UpdateDate,112)<@StartDate)
	or  c.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP','SPK')
												and convert(varchar,h.UpdateDate,112)<@StartDate))))	
union all
select   
h.CompanyCode
, h.BranchCode 
, 'SPK' LastProgress
, h.InquiryNumber
, convert(varchar,h.SPKDate,112)	SPKDate
, CASE 
	 WHEN day(h.SPKDate) >= 1 and day(h.SPKDate) <= 7  THEN 1
	 WHEN day(h.SPKDate) >= 8 and day(h.SPKDate) <= 14  THEN 2
	 WHEN day(h.SPKDate) >= 15 and day(h.SPKDate) <= 21  THEN 3
	 WHEN day(h.SPKDate) >= 22 and day(h.SPKDate) <= 28  THEN 4
	 WHEN day(h.SPKDate) >= 29 and day(h.SPKDate) <= 31  THEN 5
   END WeekInt	
from SuzukiR4..pmHstITS h
where 
(case when h.CompanyCode='6015402' then '6015401' when h.CompanyCode='6051402' then '6051401' else h.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and h.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and h.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')
 and convert(varchar,h.SPKDate,112) between @StartDate and @EndDate 
 and not exists (select top 1 1 from SuzukiR4..pmStatusHistory
                  where CompanyCode=h.CompanyCode
                    and BranchCode=h.BranchCode
                    and InquiryNumber=h.InquiryNumber)    							
) #tThis order by CompanyCode, BranchCode

select * into #tLast from(
select c.CompanyCode, c.BranchCode 
	--, c.SequenceNo
	, c.LastProgress
	, c.InquiryNumber		 
	, convert(varchar,c.UpdateDate,112)	UpdateDate
	, CASE 
		 WHEN day(c.UpdateDate) >= 1 and day(c.UpdateDate) <= 7  THEN 1
		 WHEN day(c.UpdateDate) >= 8 and day(c.UpdateDate) <= 14  THEN 2
		 WHEN day(c.UpdateDate) >= 15 and day(c.UpdateDate) <= 21  THEN 3
		 WHEN day(c.UpdateDate) >= 22 and day(c.UpdateDate) <= 28  THEN 4
		 WHEN day(c.UpdateDate) >= 29 and day(c.UpdateDate) <= 31  THEN 5
	   END WeekInt		   
from SuzukiR4..pmStatusHistory c with (nolock, nowait) 
INNER JOIN SuzukiR4..pmHstITS a WITH (NOLOCK, NOWAIT) ON -- penambahan 1 Apr 14
				a.CompanyCode = c.CompanyCode AND
				a.BranchCode = c.BranchCode AND
				a.InquiryNumber = c.InquiryNumber --AND
				--a.LastProgress = c.LastProgress
where
	(case when c.CompanyCode='6015402' then '6015401' when c.CompanyCode='6051402' then '6051401' else c.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and c.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and c.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')
	and (convert(varchar,c.UpdateDate,112) between @LastStartDate and @LastEndDate
	or (convert(varchar,c.UpdateDate,112) < @LastStartDate 
	and (c.LastProgress='P'   and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress<>'P'
												and convert(varchar,h.UpdateDate,112)<@LastStartDate)
	or  c.LastProgress='HP'  and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP')
												and convert(varchar,h.UpdateDate,112)<@LastStartDate)
	or  c.LastProgress='SPK' and not exists (select top 1 1 from SuzukiR4..pmStatusHistory h
											  where h.CompanyCode=c.CompanyCode
												and h.BranchCode=c.BranchCode
												and h.InquiryNumber=c.InquiryNumber
												and h.LastProgress not in ('P','HP','SPK')
												and convert(varchar,h.UpdateDate,112)<@LastStartDate))))			
union all
select
h.CompanyCode
, h.BranchCode 
, 'SPK' LastProgress
, h.InquiryNumber
, convert(varchar,h.SPKDate,112) SPKDate
, CASE 
	 WHEN day(h.SPKDate) >= 1 and day(h.SPKDate) <= 7  THEN 1
	 WHEN day(h.SPKDate) >= 8 and day(h.SPKDate) <= 14  THEN 2
	 WHEN day(h.SPKDate) >= 15 and day(h.SPKDate) <= 21  THEN 3
	 WHEN day(h.SPKDate) >= 22 and day(h.SPKDate) <= 28  THEN 4
	 WHEN day(h.SPKDate) >= 29 and day(h.SPKDate) <= 31  THEN 5
   END WeekInt	
from SuzukiR4..pmHstITS h
where 
(case when h.CompanyCode='6015402' then '6015401' when h.CompanyCode='6051402' then '6051401' else h.CompanyCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and h.BranchCode  like case when @BranchCode='' then '%%' else @BranchCode end
	and h.LastProgress in (select LookUpValue from SuzukiR4..gnMstLookupDtl where CodeID = 'PSTS')
and convert(varchar,h.SPKDate,112) between @LastStartDate and @LastEndDate 
 and not exists (select top 1 1 from SuzukiR4..pmStatusHistory
                  where CompanyCode=h.CompanyCode
                    and BranchCode=h.BranchCode
                    and InquiryNumber=h.InquiryNumber)     																					
) #tLast order by CompanyCode, BranchCode

select * into #t1 from(
select 
	a.CompanyCode
	, a.BranchCode 
	, isnull((select TOP 1 GroupModel 
						 from SuzukiR4..msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') GroupModel
	, isnull(b.TipeKendaraan,'') TipeKendaraan
	, isnull(b.Variant,'') Variant
	, convert(varchar, b.InquiryDate, 112) InquiryDate
	, a.UpdateDate
	, a.LastProgress	
	, a.WeekInt	 
from #tThis a with (nolock, nowait)												
inner join SuzukiR4..pmHstITS b with (nolock, nowait) on b.CompanyCode = a.CompanyCode and b.BranchCode = a.BranchCode and b.InquiryNumber = a.InquiryNumber  
where
	(case when @TipeKendaraan <> '' then b.TipeKendaraan else @TipeKendaraan end) = @TipeKendaraan 
	and (case when @Variant <> '' then b.Variant else @Variant end) = @Variant 
	--and convert(varchar, b.InquiryDate, 112) < @StartDate
	--or convert(varchar, b.InquiryDate, 112) between @StartDate and @EndDate
	) #t1
order by CompanyCode, BranchCode, TipeKendaraan, Variant

select * into #t4 from(
select 	a.CompanyCode
	, a.BranchCode 
	, isnull((select TOP 1 GroupModel 
						 from SuzukiR4..msMstGroupModel with (nolock,nowait)
						where ModelType = b.TipeKendaraan),'OTHERS') GroupModel
	, isnull(b.TipeKendaraan,'') TipeKendaraan
	, isnull(b.Variant,'') Variant
	, convert(varchar, b.InquiryDate, 112) InquiryDate
	, a.UpdateDate
	, a.LastProgress
	, a.WeekInt	 
from #tLast a with (nolock, nowait) 
inner join SuzukiR4..pmHstITS b with (nolock, nowait) on b.CompanyCode = a.CompanyCode and b.BranchCode = a.BranchCode and b.InquiryNumber = a.InquiryNumber  
where
	(case when @TipeKendaraan <> '' then b.TipeKendaraan else @TipeKendaraan end) = @TipeKendaraan 
	and (case when @Variant <> '' then b.Variant else @Variant end) = @Variant 
	--and convert(varchar, b.InquiryDate, 112) < @LastStartDate
	--or convert(varchar, b.InquiryDate, 112) between @LastStartDate and @LastEndDate
	) #t4 order by CompanyCode, BranchCode, TipeKendaraan, Variant

select * into #tVehicle from(
select distinct CompanyCode, BranchCode, TipeKendaraan, Variant
from #t1 
where (case when @GroupModel <> '' then GroupModel else @GroupModel end) = @GroupModel
	and (case when @TipeKendaraan <> '' then TipeKendaraan else @TipeKendaraan end) = @TipeKendaraan 
	and (case when @Variant <> '' then Variant else @Variant end) = @Variant 
group by CompanyCode, BranchCode, TipeKendaraan, Variant
union 
select distinct CompanyCode, BranchCode, TipeKendaraan, Variant
from #t4 
where (case when @GroupModel <> '' then GroupModel else @GroupModel end) = @GroupModel
	and (case when @TipeKendaraan <> '' then TipeKendaraan else @TipeKendaraan end) = @TipeKendaraan 
	and (case when @Variant <> '' then Variant else @Variant end) = @Variant 
group by CompanyCode, BranchCode, TipeKendaraan, Variant
) #tVehicle

select * into #t2 from(
select SeqNo, LookupValue LastProgress
from SuzukiR4..gnMstLookupDtl
where CodeID = 'PSTS'
) #t2 order by SeqNo

select * into #t3 from(
select 1 WeekInt union select 2 WeekInt union select 3 WeekInt union select 4 WeekInt union select 5 WeekInt
) #t3
	
select * into #tUnion1 from(
select CompanyCode, BranchCode, TipeKendaraan, Variant
, LastProgress 

-- Outs
, (select count(*) from #t1
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and InquiryDate < @StartDate and UpdateDate < @StartDate ) SaldoAwal
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 1 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts1	
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 2 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts2		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 3 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts3		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 4 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts4
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 5 and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) WeekOuts5
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and InquiryDate < @StartDate and UpdateDate between @StartDate and @EndDate) TotalWeekOuts

-- New
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 1 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week1	
,  (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 2 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week2		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 3 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week3		
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 4 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week4
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 5 and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) Week5
, (select count(*) from #t1 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and UpdateDate between @StartDate and @EndDate 
	and (InquiryDate between @StartDate and @EndDate or InquiryDate > @EndDate)) TotalWeek
		
from #t1 a

group by CompanyCode, BranchCode, TipeKendaraan, Variant
, LastProgress 	
) #tUnion1

select * into #tUnion2 from(
select CompanyCode, BranchCode, TipeKendaraan, Variant
, LastProgress 

-- Outs
, (select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and InquiryDate < @LastStartDate and UpdateDate < @LastStartDate) SaldoAwalLast
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 1 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts1Last	
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 2 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts2Last		
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 3 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts3Last		
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 4 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts4Last
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 5 and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) WeekOuts5Last
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and InquiryDate < @LastStartDate and UpdateDate between @LastStartDate and @LastEndDate) TotalWeekOutsLast

-- New
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 1 and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week1Last	
, (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 2 and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate))  Week2Last		
,  (select count(*) from #t4 
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 3 and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week3Last		
,  (select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 4 and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week4Last
,  (select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and WeekInt = 5 and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) Week5Last
, (select count(*) from #t4
	where CompanyCode = a.CompanyCode and BranchCode = a.BranchCode and TipeKendaraan = a.TipeKendaraan and Variant = a.Variant 
	and LastProgress = a.LastProgress and UpdateDate between @LastStartDate and @LastEndDate
	and (InquiryDate between @LastStartDate and @LastEndDate or InquiryDate > @LastEndDate)) TotalWeekLast
		
from #t4 a

group by CompanyCode, BranchCode, TipeKendaraan, Variant
, LastProgress 	
) #tUnion2
			
-- This Month
select * into #tGabung from(	
select distinct
	a.GroupNo
	, a.Area
	, a.DealerCode CompanyCode
	, a.DealerAbbreviation CompanyName
	, b.OutletCode BranchCode 
	, b.OutletAbbreviation BranchName
	, d.TipeKendaraan
	, d.Variant
	, e.SeqNo
	, e.LastProgress		
	
	, isnull(g.SaldoAwal, 0) SaldoAwal
	, isnull(g.WeekOuts1, 0) WeekOuts1
	, isnull(g.WeekOuts2, 0) WeekOuts2
	, isnull(g.WeekOuts3, 0) WeekOuts3
	, isnull(g.WeekOuts4, 0) WeekOuts4
	, isnull(g.WeekOuts5, 0) WeekOuts5
	, isnull(g.TotalWeekOuts, 0) TotalWeekOuts
	
	, isnull(g.Week1, 0) Week1
	, isnull(g.Week2, 0) Week2
	, isnull(g.Week3, 0) Week3
	, isnull(g.Week4, 0) Week4
	, isnull(g.Week5, 0) Week5
	, isnull(g.TotalWeek, 0) TotalWeek
	
	, isnull(g.TotalWeekOuts, 0) + isnull(g.TotalWeek, 0) Total
	
	, isnull(h.SaldoAwalLast, 0) SaldoAwalLast
	, isnull(h.WeekOuts1Last, 0) WeekOuts1Last
	, isnull(h.WeekOuts2Last, 0) WeekOuts2Last
	, isnull(h.WeekOuts3Last, 0) WeekOuts3Last
	, isnull(h.WeekOuts4Last, 0) WeekOuts4Last
	, isnull(h.WeekOuts5Last, 0) WeekOuts5Last
	, isnull(h.TotalWeekOutsLast, 0) TotalWeekOutsLast
	
	, isnull(h.Week1Last, 0) Week1Last
	, isnull(h.Week2Last, 0) Week2Last
	, isnull(h.Week3Last, 0) Week3Last
	, isnull(h.Week4Last, 0) Week4Last
	, isnull(h.Week5Last, 0) Week5Last
	, isnull(h.TotalWeekLast, 0) TotalWeekLast
	
	, isnull(h.TotalWeekOutsLast, 0) + isnull(h.TotalWeekLast, 0) TotalLast
	
	,cast((case when isnull(h.TotalWeekOutsLast, 0) + isnull(h.TotalWeekLast, 0) = 0 then 0 else (isnull(g.TotalWeekOuts, 0) + isnull(g.TotalWeek, 0))/ cast((isnull(h.TotalWeekOutsLast, 0) + isnull(h.TotalWeekLast, 0)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent

from SuzukiR4..gnMstDealerMapping a with (nolock, nowait)
left join SuzukiR4..gnMstDealerOutletMapping b with (nolock, nowait) on a.DealerCode = b.DealerCode
inner join #tVehicle d with (nolock, nowait) on d.CompanyCode = a.DealerCode and d.BranchCode = b.OutletCode
left join #t2 e with (nolock, nowait) on e.SeqNo > 0 
left join #t3 f with (nolock, nowait) on f.WeekInt > 0
left join #tUnion1 g with (nolock, nowait) on g.CompanyCode = a.DealerCode and g.BranchCode = b.OutletCode and g.TipeKendaraan =  d.TipeKendaraan
	and g.Variant = d.Variant 
	and g.LastProgress = e.LastProgress
left join #tUnion2 h with (nolock, nowait) on h.CompanyCode = a.DealerCode and h.BranchCode = b.OutletCode and h.TipeKendaraan =  d.TipeKendaraan
	and h.Variant = d.Variant 
	and h.LastProgress = e.LastProgress
where 
	a.IsActive = 1
	and (a.Area like Case when @Area <> '' then case when (@Area = 'JABODETABEK' or @Area = 'CABANG') then 'JABODETABEK' else @Area end else '%%' end
			or  a.Area like Case when @Area <> '' then case when (@Area='JABODETABEK' or @Area='CABANG') then 'CABANG' else @Area end else '%%' end)		  
	and (case when a.DealerCode='6015402' then '6015401' when a.DealerCode='6051402' then '6051401' else a.DealerCode end) like 
				case when @CompanyCode = ''       then '%%'  when @CompanyCode ='6015402' then '6015401' when @CompanyCode ='6051402' then '6051401' else @CompanyCode end		   
	and b.OutletCode  like case when @BranchCode='' then '%%' else @BranchCode end
	) #tGabung
order by GroupNo, CompanyCode, BranchCode, TipeKendaraan, Variant, SeqNo

-- Level 0
select * into #tFinal from(
select 
	1 OrderNo3
	, 0 OrderNo
	, 0 OrderNo1
	, 0 OrderNo2
	
	,  GroupNo
	,  Area
	,  CompanyCode
	,  CompanyName
	,  BranchCode 
	,  BranchName
	,  TipeKendaraan
	,  Variant
	,  SeqNo
	,  LastProgress		
	
	, SaldoAwalLast	
	, WeekOuts1Last	
	, WeekOuts2Last		
	, WeekOuts3Last		
	, WeekOuts4Last
	, WeekOuts5Last
	, TotalWeekOutsLast
	, Week1Last
	, Week2Last
	, Week3Last
	, Week4Last
	, Week5Last
	, TotalWeekLast
	, TotalLast
	
	,  SaldoAwal	
	,  WeekOuts1	
	,  WeekOuts2		
	,  WeekOuts3		
	,  WeekOuts4
	,  WeekOuts5
	,  TotalWeekOuts
	,  Week1
	,  Week2
	,  Week3
	,  Week4
	,  Week5
	,  TotalWeek	
	,  Total
	
	, TotPercent

	from #tGabung
union
---- Group per Tipe Kendaraan
select 
	1 OrderNo3
	, 1 OrderNo
	, 0 OrderNo1
	, 0 OrderNo2
	
	,  GroupNo
	,  Area
	,  CompanyCode
	,  CompanyName
	,  BranchCode 
	,  BranchName
	,  TipeKendaraan
	,  '' Variant
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by 
	 GroupNo
	,   Area
	,   CompanyCode
	,   CompanyName
	,   BranchCode 
	,   BranchName
	,   TipeKendaraan		
	,   SeqNo
	,   LastProgress	
union
-- Group per Company
select 
	1 OrderNo3
	, 2 OrderNo
	, 1 OrderNo1
	, 0 OrderNo2

	,  GroupNo
	,  Area
	,  CompanyCode
	,  CompanyName
	,  BranchCode 
	,  BranchName
	,  '' TipeKendaraan
	,  '' Variant
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by  GroupNo
	,  Area
	,  CompanyCode
	,  CompanyName
	,  BranchCode 
	,  BranchName	
	,  SeqNo
	,  LastProgress		
union
select 
	1 OrderNo3
	, 2 OrderNo
	, 2 OrderNo1
	, 0 OrderNo2

	,  GroupNo
	,  Area
	,  '' CompanyCode
	,  'TOTAL' CompanyName
	,  '' BranchCode 
	,  '' BranchName
	,  '' TipeKendaraan
	,  '' Variant
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by  GroupNo
	,  Area	
	,  SeqNo
	,  LastProgress			
union
-- Group per Area
select 
	1 OrderNo3
	, 2 OrderNo
	, 1 OrderNo1
	, 1 OrderNo2
	
	,  GroupNo	
	,  Area	
	,  CompanyCode
	,  CompanyName	
	,  'TOTAL' BranchCode 
	,  '' BranchName		
	,  '' TipeKendaraan
	,  '' Variant
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by GroupNo	
	,  Area	
	,  CompanyCode
	,  CompanyName	
	, BranchName
	,  SeqNo
	,  LastProgress		
union
-- TOTAL
select 
	2 OrderNo3
	, 2 OrderNo
	, 1 OrderNo1
	, 1 OrderNo2
	
	,  999999 GroupNo	
	,  'TOTAL' Area	
	,  '' CompanyCode
	,  'TOTAL' CompanyName	
	,  '' BranchCode 
	,  '' BranchName		
	,  '' TipeKendaraan
	,  '' Variant
	,  SeqNo
	,  LastProgress		
	
	, sum(SaldoAwalLast) SaldoAwalLast	
	, sum(WeekOuts1Last) WeekOuts1Last	
	, sum(WeekOuts2Last) WeekOuts2Last	
	, sum(WeekOuts3Last) WeekOuts3Last		
	, sum(WeekOuts4Last) WeekOuts4Last
	, sum(WeekOuts5Last) WeekOuts5Last
	, sum(TotalWeekOutsLast) TotalWeekOutsLast
	, sum(Week1Last) Week1Last
	, sum(Week2Last) Week2Last
	, sum(Week3Last) Week3Last
	, sum(Week4Last) Week4Last
	, sum(Week5Last) Week5Last
	, sum(TotalWeekLast) TotalWeekLast
	, sum(TotalLast) TotalLast
	
	,  sum(SaldoAwal) SaldoAwal
	,  sum(WeekOuts1) WeekOuts1
	,  sum(WeekOuts2) WeekOuts2
	,  sum(WeekOuts3) WeekOuts3
	,  sum(WeekOuts4) WeekOuts4
	,  sum(WeekOuts5) WeekOuts5
	,  sum(TotalWeekOuts) TotalWeekOuts
	,  sum(Week1) Week1
	,  sum(Week2) Week2
	,  sum(Week3) Week3
	,  sum(Week4) Week4
	,  sum(Week5) Week5
	,  sum(TotalWeek) TotalWeek
	,  sum(Total) Total
	
	,  cast((case when sum(TotalLast) = 0 then 0 else sum(Total)/ cast(sum(TotalLast) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent 

	from #tGabung
group by SeqNo
	,  LastProgress) #tFinal

if(@Summary = 0)
begin	
select 
		  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  SeqNo
		 ,  LastProgress		 		
		 
		 ---- LAST MONTH	
		 , sum(SaldoAwalLast) SaldoAwalLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts1Last) END WeekOuts1Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts2Last) END WeekOuts2Last  
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts3Last) END WeekOuts3Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts4Last) END WeekOuts4Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts5Last) END WeekOuts5Last		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END TotalWeekOutsLast
		 , sum(Week1Last) Week1Last
		 , sum(Week2Last) Week2Last
		 , sum(Week3Last) Week3Last
		 , sum(Week4Last) Week4Last
		 , sum(Week5Last) Week5Last
		 , sum(TotalWeekLast) TotalWeekLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast) TotalLast	 
		 
		 ---- THIS MONTH	
		 , sum(SaldoAwal) SaldoAwal
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts1) END WeekOuts1
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts2) END WeekOuts2
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts3) END WeekOuts3
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts4) END WeekOuts4
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts5) END WeekOuts5		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END TotalWeekOuts
		 , sum(Week1) Week1
		 , sum(Week2) Week2 
		 , sum(Week3) Week3
		 , sum(Week4) Week4
		 , sum(Week5) Week5
		 , sum(TotalWeek) TotalWeek
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek) Total
		 
		 , cast((case when (CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) = 0 then 0 else 
		   (CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek))/ cast((CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent
 from #tFinal
 --where OrderNo2 <> 1
 group by  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  SeqNo
		 ,  LastProgress	
	--order by OrderNo3 Asc,GroupNo asc, CompanyName asc,Area asc,OrderNo1 asc,OrderNo asc,BranchCode asc,OrderNo2 Asc,SeqNo Asc
	order by  OrderNo3 Asc, GroupNo asc,  CompanyName asc, Area asc, OrderNo2 asc, OrderNo1 asc, BranchCode asc,  OrderNo Asc,  SeqNo Asc

select 
		  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  Variant
		 ,  SeqNo
		 ,  LastProgress		 		
		 
		 ---- LAST MONTH	
		 , sum(SaldoAwalLast) SaldoAwalLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts1Last) END WeekOuts1Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts2Last) END WeekOuts2Last  
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts3Last) END WeekOuts3Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts4Last) END WeekOuts4Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts5Last) END WeekOuts5Last		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END TotalWeekOutsLast
		 , sum(Week1Last) Week1Last
		 , sum(Week2Last) Week2Last
		 , sum(Week3Last) Week3Last
		 , sum(Week4Last) Week4Last
		 , sum(Week5Last) Week5Last
		 , sum(TotalWeekLast) TotalWeekLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast) TotalLast	
		 
		 ---- THIS MONTH	
		 , sum(SaldoAwal) SaldoAwal
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts1) END WeekOuts1
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts2) END WeekOuts2
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts3) END WeekOuts3
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts4) END WeekOuts4
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts5) END WeekOuts5		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END TotalWeekOuts
		 , sum(Week1) Week1
		 , sum(Week2) Week2 
		 , sum(Week3) Week3
		 , sum(Week4) Week4
		 , sum(Week5) Week5
		 , sum(TotalWeek) TotalWeek
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek) Total
		 
		 , cast((case when (CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) = 0 then 0 else 
		   (CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek))/ cast((CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent
 from #tFinal
 where OrderNo1 <> 2
 group by  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  Variant
		 ,  SeqNo
		 ,  LastProgress
	 order by  OrderNo3 Asc, GroupNo asc,  CompanyName asc, Area asc, OrderNo2 asc, BranchCode asc, OrderNo1 asc,  TipeKendaraan Asc,  OrderNo Asc,  Variant Asc,  SeqNo Asc
	 --order by  OrderNo3 Asc, GroupNo asc,  CompanyName asc, Area asc, OrderNo2 asc, BranchCode asc, OrderNo1 asc,  TipeKendaraan Asc,  OrderNo Asc,  Variant Asc,  SeqNo Asc
	 --order by  OrderNo3 Asc,  TipeKendaraan Asc, GroupNo asc,  CompanyName asc, OrderNo asc, OrderNo1 asc, BranchCode asc, OrderNo2 Asc, Area asc, SeqNo Asc 	 
end
else if (@Summary = 1)
begin
	select 
		  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  Variant
		 ,  SeqNo
		 ,  LastProgress		 		
		 
		 ---- LAST MONTH	
		 , sum(SaldoAwalLast) SaldoAwalLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts1Last) END WeekOuts1Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts2Last) END WeekOuts2Last  
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts3Last) END WeekOuts3Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts4Last) END WeekOuts4Last
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(WeekOuts5Last) END WeekOuts5Last		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END TotalWeekOutsLast
		 , sum(Week1Last) Week1Last
		 , sum(Week2Last) Week2Last
		 , sum(Week3Last) Week3Last
		 , sum(Week4Last) Week4Last
		 , sum(Week5Last) Week5Last
		 , sum(TotalWeekLast) TotalWeekLast
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast) TotalLast	
		 
		 ---- THIS MONTH	
		 , sum(SaldoAwal) SaldoAwal
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts1) END WeekOuts1
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts2) END WeekOuts2
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts3) END WeekOuts3
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts4) END WeekOuts4
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(WeekOuts5) END WeekOuts5		 
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END TotalWeekOuts
		 , sum(Week1) Week1
		 , sum(Week2) Week2 
		 , sum(Week3) Week3
		 , sum(Week4) Week4
		 , sum(Week5) Week5
		 , sum(TotalWeek) TotalWeek
		 , CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek) Total
		 
		 , cast((case when (CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) = 0 then 0 else 
		   (CASE WHEN  LastProgress = 'P' THEN 0 ELSE  sum(TotalWeekOuts) END + sum(TotalWeek))/ cast((CASE WHEN  LastProgress = 'P' THEN 0 ELSE sum(TotalWeekOutsLast) END + sum(TotalWeekLast)) as decimal(38,2)) end) * 100 as decimal(8,1)) TotPercent
 from #tFinal
 group by  OrderNo3
		 ,  OrderNo
		 ,  OrderNo1
		 ,  OrderNo2
		 ,  GroupNo
		 ,  Area
		 ,  CompanyCode
		 ,  CompanyName
		 ,  BranchCode
		 ,  BranchName
		 ,  TipeKendaraan
		 ,  Variant
		 ,  SeqNo
		 ,  LastProgress
	order by  OrderNo3 Asc, GroupNo asc,  CompanyName asc, Area asc, OrderNo2 asc, BranchCode asc, OrderNo1 asc,  TipeKendaraan Asc,  OrderNo Asc,  Variant Asc,  SeqNo Asc	 
	 --order by  OrderNo3 Asc,  TipeKendaraan Asc, GroupNo asc,  CompanyName asc, OrderNo asc, OrderNo1 asc, BranchCode asc, OrderNo2 Asc, Area asc, SeqNo Asc 	 
end

drop table #tThis, #t1, #t2, #t3, #t4, #tLast, #tUnion1, #tUnion2, #tVehicle, #tGabung, #tFinal

end
GO
create procedure [dbo].[uspfn_getreportheader]
@CompanyCode varchar(25),   
@BranchCode varchar(25),   
@PeriodStart datetime,   
@PeriodEnd DateTime  
as  
select co.CompanyName as BranchName, co.Address1, co.Address2, co.Address3, co.Address4 , Convert(varchar(15),@PeriodStart,106) +' s/d '+Convert(varchar(15),@PeriodEnd,106) as PeriodStartEnd from gnMstCoProfile co  
where co.CompanyCode = @CompanyCode  
and co.BranchCode = @BranchCode
GO
create procedure [dbo].[uspfn_SelectCity]
	@CompanyCode varchar(25),
	@BranchCode varchar(25),
	@SalesModelCode varchar(25),
	@SalesModelYear int,
	@SupplierCode varchar(25)
as

begin
	SELECT DISTINCT 
	       a.LookUpValue as CityCode
		 , a.LookUpValueName as CityName
		 , b.BBN
		 , b.KIR
	  FROM gnMstLookUpDtl a
	     , omMstBBNKIR b
	 WHERE a.CompanyCode = b.CompanyCode
	   AND a.CompanyCode = @CompanyCode
	   AND a.LookUpValue = b.CityCode
	   AND b.BranchCode = @BranchCode
	   AND a.CodeID = 'CITY'
	   AND b.Status = '1'
	   AND b.SupplierCode = @SupplierCode
	   AND b.SalesModelCode = @SalesModelCode
	   AND b.SalesModelYear = @SalesModelYear
	 ORDER BY a.LookUpValue
end
GO
CREATE procedure [dbo].[sp_UpdateMovingCodeTuningV2] (  

@CompanyCode varchar(10) ,
@BranchCode varchar(10),
@TransDate datetime)


as


select * into #t1 from (
select 
 a.PartNo
,a.DemandFreq
,a.DemandQty
,convert(varchar,a.Year) + right('0' + convert(varchar,a.Month),2) as date0
,convert(varchar(6), dateadd(m,-5,@TransDate), 112) date1
,convert(varchar(6), dateadd(m,-4,@TransDate), 112) date2
,convert(varchar(6), dateadd(m,-3,@TransDate), 112) date3
,convert(varchar(6), dateadd(m,-2,@TransDate), 112) date4
,convert(varchar(6), dateadd(m,-1,@TransDate), 112) date5
,convert(varchar(6), dateadd(m,-0,@TransDate), 112) date6
from spHstDemandItem a WITH(NOWAIT, NOLOCK) 
where a.CompanyCode=@CompanyCode and a.BranchCode=@BranchCode
 and convert(varchar,a.Year) + right('0' + convert(varchar,a.Month),2) >= convert(varchar(6), dateadd(m,-6,@TransDate), 112)
) #t1

select * into #t2 from (
select 
 a.PartNo
,a.DemandFreq
,case when (date0=date1) and a.DemandFreq>0 then 1 else 0 end as T1
,case when (date0=date2) and a.DemandFreq>0 then 1 else 0 end as T2
,case when (date0=date3) and a.DemandFreq>0 then 1 else 0 end as T3
,case when (date0=date4) and a.DemandFreq>0 then 1 else 0 end as T4
,case when (date0=date5) and a.DemandFreq>0 then 1 else 0 end as T5
,case when (date0=date6) and a.DemandFreq>0 then 1 else 0 end as T6
from #t1 a
) #t2

select * into #t3 from (
select
 a.PartNo
,case when (sum(T1)> 0) then 1 else 0 end as D1
,case when (sum(T2)> 0) then 1 else 0 end as D2
,case when (sum(T3)> 0) then 1 else 0 end as D3
,case when (sum(T4)> 0) then 1 else 0 end as D4
,case when (sum(T5)> 0) then 1 else 0 end as D5
,case when (sum(T6)> 0) then 1 else 0 end as D6
from #t2 a
group by a.PartNo
) #t3

select * into #t4 from (
select 
 a.PartNo
,b.NewPartNo
from #t3 a
left join spMstItemMod b WITH(NOWAIT, NOLOCK)
  on b.PartNo = a.PartNo and b.CompanyCode = @CompanyCode
where b.NewPartNo <> ''
) #t4

insert into #t3
select 
 NewPartNo as PartNo
,D1=0,D2=0,D3=0,D4=0,D5=0,D6=0
from #t4
where NewPartNo not in (select PartNo from #t3)

select * into #t5 from(
select distinct PartNo, D1, D2, D3, D4, D5, D6 from #t3)#t5


select * into #t6 from (
select 
	PartNo
	, CASE WHEN ISNULL((SELECT D1 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D1 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D1
	, CASE WHEN ISNULL((SELECT D2 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D2 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D2
	, CASE WHEN ISNULL((SELECT D3 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D3 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D3
	, CASE WHEN ISNULL((SELECT D4 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D4 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D4
	, CASE WHEN ISNULL((SELECT D5 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D5 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D5
	, CASE WHEN ISNULL((SELECT D6 FROM #t5 WHERE PartnO = a.PartNo),0) + ISNULL((SELECT D6 FROM #t5 WHERE PartnO = a.NewPartNo),0) > 0 THEN 1 ELSE 0 END D6
from #t4 a) #t6

update #t5
set d1 = b.d1
	, d2 = b.d2
	, d3 = b.d3
	, d4 = b.d4
	, d5 = b.d5
	, d6 = b.d6
from #t5 a, #t6 b
where a.partno = b.partno


select * into #t7 from (
select @CompanyCode CompanyCode, @BranchCode BranchCode, partno, d1 + d2 + d3 + d4 + d5 + d6  dTotal from #t5) #t7

update spMstItems 
set MovingCode = CASE WHEN b.dTotal = 0 THEN 5
			ELSE CASE WHEN b.dTotal = 1 THEN 4 
			ELSE CASE WHEN b.dTotal = 2 THEN 4
			ELSE CASE WHEN b.dTotal = 3 THEN 3 
			ELSE CASE WHEN b.dTotal = 4 THEN 3 
			ELSE CASE WHEN b.dTotal = 5 THEN 2 
			ELSE CASE WHEN b.dTotal = 6 THEN 1 
			END END END END END END END 
from spMstItems a, #t7 b
where 
	a.CompanyCode = b.CompanyCode
	and a.branchcode = b.branchcode
	and a.partno = b.partno
	and (datediff(mm, a.BornDate, @transdate) + 1) >= 6 

-- SET MOVING CODE : 0 FOR ITEM THAT BORN DATE < 6 MONTHS
update spMstItems set MovingCode = 0
where CompanyCode = @CompanyCode
  and BranchCode = @BranchCode
  and (datediff(mm, BornDate, @TransDate) + 1) < 6

drop table #t7
drop table #t6
drop table #t5
drop table #t4
drop table #t3
drop table #t2
drop table #t1
GO
